{"_default": {"1": {"dtychshenko": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6631", "title": "WCF method with UriTemplate annotation fails with InvalidOperationException", "body": "## Description\r\n\r\nI have an existing WCF service that was originally developed in .NET/Windows, which I've been trying to get running on Mono/Mac/XSP. Everything works well, except for methods that use path parameters in the request URL through UriTemplate. \r\n\r\nWhen such method is called with Mono, the service returns a 500 error due to `System.InvalidOperationException: HttpListenerContext does not match any of the registered channels`; however, the same call works on .NET\r\n\r\nThe issue appears to be specific to using path parameters with UriTemplate, as methods that do NOT use UriTemplate, work equally well with Mono or .NET\r\n\r\n**This issue has been previously reported in 2014 in the following [Bugzilla bug #25444](https://bugzilla.xamarin.com/show_bug.cgi?id=25444)**\r\n\r\n## Steps to Reproduce\r\n\r\n1. Create a simple WCF service that uses a UriTemplate with at least one path parameter on one of the OperationContract's\r\n2. Call the service and observe the error\r\n\r\nSee the following sample to reproduce the issue:\r\n[Sample Service.zip](https://github.com/mono/mono/files/1653492/Sample.Service.zip)\r\n\r\n## Current Behavior\r\n\r\nService responds with a 500 status due to an exception during the processing of the request. \r\n\r\n![screen shot 2018-01-22 at 3 31 12 pm](https://user-images.githubusercontent.com/2285979/35242988-545616e0-ff89-11e7-9b6f-4a11510dbc46.png)\r\n\r\n## Expected Behavior\r\n\r\nThe service should return the requested data and respond with a successful 200 status code\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.8.0\r\n\r\n### Stacktrace\r\n\r\n```\r\nat System.ServiceModel.Channels.Http.HttpListenerManager.ProcessNewContext (System.ServiceModel.Channels.Http.HttpContextInfo ctxi) [0x0000a] in /Users/dtychshenko/dev/mono/mcs/class/System.ServiceModel/System.ServiceModel.Channels.Http/HttpListenerManager.cs:80 \r\n  at System.ServiceModel.Channels.SvcHttpHandler.ProcessRequest (System.Web.HttpContext context) [0x00055] in /Users/dtychshenko/dev/mono/mcs/class/System.ServiceModel/System.ServiceModel.Channels/SvcHttpHandler.cs:83 \r\n  at System.Web.HttpApplication+<Pipeline>d__225.MoveNext () [0x008fd] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/System.Web/System.Web/HttpApplication.cs:1338 \r\n  at System.Web.HttpApplication.Tick () [0x00000] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/System.Web/System.Web/HttpApplication.cs:927 ```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6632", "title": "Fixes #6631: WCF method with UriTemplate annotation fails with InvalidOperationException", "body": "As the title states, fixes #6631, which mirrors [Bugzilla bug #25444](https://bugzilla.xamarin.com/show_bug.cgi?id=25444)\r\n\r\nThis adds support to WCF services that use UriTemplate annotation with path parameters. \r\n\r\nFor example, if a WCF service is hosted at endpoint:\r\n```http://localhost/MyService.svc```\r\nand has an operation contract for\r\n```[WebGet(UriTemplate = \"Books/{id}\")]```\r\nwhen a GET request is made to:\r\n```http://localhost/MyServcie.svc/Books/2```\r\nthe HttpListenerManagerTable would be able to retrieve the existing listener for `/MyService.svc` as the request URL starts with `/MyService.svc` ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaykrell": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6629", "title": "mono_error_set_exception_instance vs. mono_error_set_exception_handle", "body": "All uses of first need to change to second, for coop/handle work.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6628", "title": "g_find_program_in_path:", "body": "g_find_program_in_path:\r\n - case insensitivity?\r\n - likely wrong order of extensions\r\n - possibly wrong extensions\r\n The right order and possibly the right set, is what cmd uses:\r\n $ wine cmd /c set path\r\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH\r\nBut I'd be leary of the ones after .cmd.\r\nThis is quite semantically meaningful as people will have\r\nfoo.com in order to be preferred over foo.exe.\r\n.com used to mean a different file format, but that was decades ago\r\n - too many calls to strlen buried in there\r\n - lack of const/static on the array of suffixes\r\n - better to loop on G_ELEMS than until NULL\r\n - to address case insensitivity and strlen-in-loop,\r\n   suggest g_memicmp\r\n\r\nAlso need to see what desktop CLR does.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/da444c9d514d0918193d78cd83d7ee586836ce6a", "message": "[perfcounters] Move machine handling from native to managed. (#6543)\n\n* Move machine handling of performance counters from native\r\nto managed -- just slightly less native code therefore.\r\n\r\n* PR feedback: Rename ValidMachine to IsValidMachine.\r\n             Use string::operator== instead of .Length/[].\r\n             Change InstanceExistsInternal to return bool/MonoBoolean directly instead of int.\r\n             Remove question mark on FIXME comment for more reliable grep.\r\n             Remove redundant zeroing of a pointer."}, {"url": "https://api.github.com/repos/mono/mono/commits/31ec1631c2bb0a7650f7162867e06a5ba62e84ae", "message": " Fix configure `--disable-boehm` to build more tests. (#6614)"}, {"url": "https://api.github.com/repos/mono/mono/commits/181aa3c026ff8bb89f17f2ffb07b6d02bd9a83e3", "message": "Fix missed closedir in commit 947d0bc0ef63c9e9304b760d333b4cb7ed06df94 (#6599)"}, {"url": "https://api.github.com/repos/mono/mono/commits/844a927f25002a9dfd1bba76cb702c3c5d35a2dc", "message": "This test is supposed to take between 1 and 2 seconds, but takes slightly longer in practise and fails.\nGive it 2.5 seconds.\n\nhttps://jenkins.mono-project.com/job/test-mono-pull-request-amd64/10727/parsed_console/log.html\n\nTests run: 120, Passed: 119, Errors: 0, Failures: 1, Inconclusive: 0\nNot run: 0, Invalid: 0, Ignored: 0, Skipped: 0\nElapsed time: 00:00:32.8320000\n\nErrors and Failures:\n\n    EndBuildWaitsForSubmissionCompletion (MonoTests.Microsoft.Build.Execution.BuildSubmissionTest.EndBuildWaitsForSubmissionCompletion)\n    #5\n    Expected: less than or equal to 00:00:02\n    But was: 00:00:02.0757916\n\nat MonoTests.Microsoft.Build.Execution.BuildSubmissionTest.EndBuildWaitsForSubmissionCompletion () [0x00126] in /mnt/jenkins/workspace/test-mono-pull-request-amd64/mcs/class/Microsoft.Build/Test/Microsoft.Build.Execution/BuildSubmissionTest.cs:105\nat (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-pull-request-amd64/mcs/class/corlib/System.Reflection/MonoMethod.cs:305"}, {"url": "https://api.github.com/repos/mono/mono/commits/3b34235086446239d81347d1ee35644c0f2c3369", "message": "Convert dis, profiler, pedump, unit-tests to new MonoError/ERROR_DECL style. (#6607)\n\nConvert dis, profiler, pedump, unit-tests to new MonoError/ERROR_DECL style."}, {"url": "https://api.github.com/repos/mono/mono/commits/5839d7b43447e3ff6ca080fae0b03b56c67eb5e4", "message": "Split mono_method_get_header_checked into internal and external forms. (#6609)\n\nSplit mono_method_get_header_checked into internal and external forms. (#6609)\r\nExternal form is mono_method_get_header_checked, the preexisting name.\r\nInternal form is mono_method_get_header_internal.\r\nExternal must initialize the MonoError for compatibility, internal can/should assume it is already initialized per the new pattern."}, {"url": "https://api.github.com/repos/mono/mono/commits/423cd246496f241c5b933e5235249bcf77868f63", "message": "Check errors when mono_method_to_ir calls handle_delegate_ctor. (#6588)"}, {"url": "https://api.github.com/repos/mono/mono/commits/8a968a3550d3f4bd47fd1ab2046747f56398e6f0", "message": "Cleanup mono_string_to_utf16 -- use unichar2 type to advantage over char."}, {"url": "https://api.github.com/repos/mono/mono/commits/12970c4bbd2869d389b775e2a1dc5ca774868f42", "message": "g_assert should be an expression not a statement; provide g_assertf f is format like printf (#6235)\n\n* g_assert should be an expression not a statement; provide g_assertf f is format like printf\r\n\r\n- g_assert should be an expression, not a statement\r\n   ANSI C assert gets this correct, and I corrected\r\n   widely used NT ASSERT circa 2001 with no ill effects\r\n   Note that ANSI C assert is void, g_assert here is boolean.\r\n\r\n - provide g_assertf\r\n   f is for format, like printf -- too terse?\r\n   Where you might previously say:\r\n   if (!(expr))\r\n     g_error(...); // like printf\r\n   now:\r\n    g_assertf(expr, ...)\r\n\r\nManual tests provided -- how to provide a test whose success is failure to compile?\r\nCorrect existing eglib/test to build and pass, but don't enable in build.\r\nEnabling it is a line in toplevel configure.ac to add eglib/test/Makefile\r\nafter eglib/Makefile.\r\n\r\n* Fix comment in test code.\r\n\r\n* format with s instead of hs\r\n\r\n* review"}, {"url": "https://api.github.com/repos/mono/mono/commits/2e029d691e3d5dc5a838f867f8feb472864a8109", "message": "Convert ves_icall_System_Threading_Thread_GetName_internal to coophandle. (#6435)\n\nConvert thread get name to coop/handle (ves_icall_System_Threading_Thread_GetName_internal)."}, {"url": "https://api.github.com/repos/mono/mono/commits/6a04dc64516bd91b7b45d4587b66988b0e9b1285", "message": "Convert K&R warning farm to ANSI and add static/const.\nAlso smaller part fix C-vs.-C++-isms."}, {"url": "https://api.github.com/repos/mono/mono/commits/b909a770208a45d92cab764ff94aecf3de9932f3", "message": "return 0 is generally redundant in configure.ac, as the construction (#6528)\n\nof the test program wraps the text in int main() { ... ; return 0; }"}, {"url": "https://api.github.com/repos/mono/mono/commits/bbf6b67483a96e0c22ffc54cee4f868a771e0ada", "message": "Fix some warnings. (#6526)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e4f6b185b2aab27d5d004626874215c30720651", "message": "Convert thread get/set/clear state to coop/handle. (#6389)\n\n* Coop-handle ves_icall_System_Threading_Thread_GetState, SetState, ClrState.\r\nAnd cleanup.\r\n\r\n* Favor mono_internal_thread_handle_ptr."}, {"url": "https://api.github.com/repos/mono/mono/commits/042056452acd763e31612b1ecf7c8d46742aa469", "message": "Remove ampersands on MonoError variables name \"error\", but not on the others."}, {"url": "https://api.github.com/repos/mono/mono/commits/111786f94431638f5e932c8b7fae51c2ace5fd6b", "message": "Support for removing ampersand on MonoError variables and other\npreparation for MonoError cleanup (specific use-cases instead\nof one error_init)."}, {"url": "https://api.github.com/repos/mono/mono/commits/31070dfdc0a49efec3ebc634df7959b8ec1116cd", "message": "In MonoError, provide a uint32_t for initialization with\njust one instruction instead of two (at least it makes\na difference on the Apple arm32 target).\n\nAlso favor expressions over statements."}, {"url": "https://api.github.com/repos/mono/mono/commits/242980e00edc5b6860498fb4631d430caff5a0fa", "message": "replace new MonoError with ERROR_DECL"}, {"url": "https://api.github.com/repos/mono/mono/commits/b68b5ad1be64263c7f0f977cbb3a4f459855a882", "message": "Replace some \"error\" with \"gerror\" so that \"error\" is more often a MonoError or MonoError*."}, {"url": "https://api.github.com/repos/mono/mono/commits/c3a9d69c8af2cc248e9bdc68767966745da8144d", "message": "mono_string_new_utf32_checked leaks in error path, and produces some unused data. (#6374)\n\n* mono_string_new_utf32_checked leaks in error path, and produces\r\n some unused data.\r\n\r\n* assume equivalence of error and null\r\n\r\n* line damage"}, {"url": "https://api.github.com/repos/mono/mono/commits/c87842d24eba4858da92507359eab82e0d7cd46e", "message": "Reduce use of mono_marshal_string_to_utf16 which appears (#6438)\n\nno longer needed. It remains only for register_icall.\r\n\r\nRemove casts from void* to HANDLE, as HANDLE always and forever\r\nwill also be void*.\r\n\r\nAdd comments explaining the valid use of INVALID_HANDLE_VALUE (-1).\r\nWith CreateFileMapping, for the file handle, it means to\r\nuse physical memory / pagefile."}, {"url": "https://api.github.com/repos/mono/mono/commits/e6a167a7cd15ecd424e76e8d39856cf355066fb7", "message": "mono_string_to_utf32 produces unused data. (#6375)"}, {"url": "https://api.github.com/repos/mono/mono/commits/f4bbf7a3b916ac66520feba9653f103aa7cc1743", "message": "Cleanup arm64 OP_SHL_IMM to share code with OP_LSHL_IMM. (#6444)"}, {"url": "https://api.github.com/repos/mono/mono/commits/fa83e7828c6d2b161c1991639e40e0dc5691f64c", "message": "Convert thread get and set priority to coop/handle. (#6436)"}, {"url": "https://api.github.com/repos/mono/mono/commits/8422ea56bcc8251a100cfa76b0f3550bd46f4e19", "message": "Convert GetCurrentThread to coop/handle. (#6437)"}, {"url": "https://api.github.com/repos/mono/mono/commits/61f6da9cb4b83acb1dc81313734218175075bfb2", "message": "return_val_and_set_pending_if_nok macro is missing do/while0. (#6396)"}, {"url": "https://api.github.com/repos/mono/mono/commits/fd325223bab4daa5e150810f1ae0fab63a5d4c75", "message": "Rename some occurences of \"error\" to \"gerror\" so that (#6447)\n\n\"error\" is more often specifically MonoError."}, {"url": "https://api.github.com/repos/mono/mono/commits/a4ac0aa8a5b32fd3ae1d492c430229ba9de0ae46", "message": "if MONO missing in Fix some ThreadPool performance counters. (#6118) (#6434)"}, {"url": "https://api.github.com/repos/mono/mono/commits/17a2fba78de10678cf1ad903d410b057340a2795", "message": "Replace MonoError foo; with ERROR_DECL (foo);"}, {"url": "https://api.github.com/repos/mono/mono/commits/4aa6582504b72c0eeb674ed07c56c12645404a29", "message": "Add initial ERROR_DECL for easier to read history."}, {"url": "https://api.github.com/repos/mono/mono/commits/ad64e938a2649c21afc202c541e564272a223b20", "message": "Merge pull request #6392 from jaykrell/string_equal\n\nProvide g_utf16_ascii_equal and g_utf16_asciiz_equal for comparing utf16 to ascii for equality."}, {"url": "https://api.github.com/repos/mono/mono/commits/dc312c772f2a892b8eecea9e8d14a91e4b0fc9bf", "message": "    Fix some ThreadPool performance counters. (#6118)\n\n* Fix some ThreadPool performance counters.\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41294\r\n\r\nThe bug is that some performance counters are always zero.\r\nBecause we do not update them.\r\nThis addresses two of them: Work items added and thread count.\r\n\r\nThere is PerformanceCounter class and you can Increment instances,\r\nhowever its metadata and some of the implementation is in System.dll.\r\nMost of the code is in native.\r\nThreadPool is in mscorlib.dll, so can't use System.dll.\r\nA few options exist to address this.\r\nWe could move and forward the type. We could duplicate and rename\r\nand possibly subset the type.\r\nHere we add a new icall very specifically for the scenario.\r\n\r\nThere is slight cost for the icall, and for the atomic increment.\r\nThere is an attempt to measure but the results were unclear.\r\n\r\nNote that the count of work items is not specifically for QueueUserWorkItem\r\nas one might expect, but also for any async calls.\r\n\r\nFix a little bit of typos.\r\n\r\n* Take command lines from command line per PR feedback.\r\n\r\n* newline at end of file"}, {"url": "https://api.github.com/repos/mono/mono/commits/7c6f619ae5fd41df6133ed1bd23ff7fd15bc437c", "message": "Provide g_utf16_ascii_equal and g_utf16_asciiz_equal for comparing\nutf16 to ascii for equality.\n\ng_utf16_ascii_equal takes lengths, which are checked first\nand unequal length implies unequal strings, and then no characters are looked at.\n\n\"z\"\" for zero means nul terminated and requires scanning the string.\nStill, an equality primitive is often desired vs. inverting inequality.\n\nThese can cleanup some code -- extracted from a larger not yet commited PR\nthat uses it."}, {"url": "https://api.github.com/repos/mono/mono/commits/e23e916f26abdda2b7ef6f65d4ae844081ee66a1", "message": "The only call to mono_string_to_utf8_mp is in the file that implements it -- object.c. (#6377)\n\nSo remove it from any header, even an internal one, and make it static."}, {"url": "https://api.github.com/repos/mono/mono/commits/8bbebd920a2c5aef2dff6e844b2af4ab4c2b9279", "message": "Remove duplicated code by factoring on endian parameter. (#6321)\n\n* Remove duplicated code by factoring on endian parameter.\r\n\r\n* Force inline to mimic previous.\r\n\r\n* fix the forceinline part\r\n\r\n* Do not forceinline utf32, we never use it."}, {"url": "https://api.github.com/repos/mono/mono/commits/740013d051303ecae004dc94e014f77948de32fb", "message": "Fix an error ignore, and then remove the support for it, and unused similar. (#6292)\n\n* \"Fix\" a case of an error being ignored.\r\n* And then remove mono_string_to_utf8_image_ignore which is not used.\r\nAnd then remove the gboolean ignore_error parameter which is always FALSE."}, {"url": "https://api.github.com/repos/mono/mono/commits/93d0e9ed4d6af359aaed5e1806f05fb261329ee2", "message": "Fix apparent double or invalid free. (#6297)"}, {"url": "https://api.github.com/repos/mono/mono/commits/e0b1d6651915c395eca637ed172399354ee0fa17", "message": "    cooperative suspend babystep wrt mono_domain_try_type_resolve(MonoObject*). (#6196)\n\n* cooperative suspend babystep wrt mono_domain_try_type_resolve(MonoObject*).\r\nNo reduction in warnings, but remove one call to a function that has\r\nwarnings, leaving sre.c alone for now.\r\n\r\nWe have:\r\n mono_domain_try_type_resolve (MonoDomain *domain, char *name, MonoObject *tb)\r\n mono_domain_try_type_resolve_checked (MonoDomain *domain, char *name, MonoObject *tb, MonoError*)\r\n\r\nThe MonoObject* tb parameter causes a warning under cooperative suspend static validation.\r\n\r\nBetween name and tb, only one is ever used -- i.e. the non-null one, favoring name.\r\n\r\nThe non-checked function is embedded, so it survives for the time being.\r\n\r\nInternally, we have reflection.c calling _checked(name != null, tb == null) and sre.c the opposite.\r\n\r\nSo, this fix refactors the function such that one takes const char* and the other MonoObject* (or MonoReflectionTypeBuilder*).\r\n\r\nSome calls to a function with a warning are therefore replaced by calls to a function without a warning.\r\n\r\nsre.c is left alone for now, therefore the number of warnings does not go down.\r\n\r\nThe caching within of System.AppDomain.DoTypeResolve is refactored into mono_class_get_appdomain_do_type_resolve_method.\r\nShould we have GENERATE_GET_METHOD_WITH_CACHE like GENERATE_GET_CLASS_WITH_CACHE?  Or GENERATE_GET_METHOD_CACHED?\r\n\r\nA few stylistic experiments:\r\n   ternary operator?\r\n   const?\r\n   Some name shortening?\r\n   Non-anonymous struct tags?\r\n   Forward declaration to increase type safety?\r\n   _checked suffix optional if not differentiating from other?\r\n\r\n* Cleanup MonoError initialization and usage.\r\nThread MonoError through a bit -- add mono_class_get_method_from_name_checked.\r\n Could also be named mono_class_get_method_from_name_flags_checked.\r\nRename tb to typebuilder.\r\nrename _builder to _typebuilder.\r\nReduce but don't eliminate struct/typedef change.\r\nRemove extra braces.\r\n\r\n* More MonoError tweaking -- the existance of cleanup breaks the model.\r\n\r\n* remove a newline that was added\r\n\r\n* Remove line breaks.\r\nPut struct forward declaration among others.\r\nRestore g_warning.\r\ni.e. code review feedback\r\n\r\n* Remove some newlines.\r\n\r\n* more newlines\r\n\r\n* Move from public class.h to private class-internals.h.\r\n\r\n* Move new forward declarations out of public header object.h\r\nand into new internal header object-forward.h."}, {"url": "https://api.github.com/repos/mono/mono/commits/11e18c2a5d6ed7d17184ad4d5e0606ab1e7ec334", "message": "This list is almost sorted -- so repair the sorting and add comment. (#6244)"}, {"url": "https://api.github.com/repos/mono/mono/commits/fba6bfc9549fb8686576cca20e33df4d01fb2d1a", "message": "Minor cleanup split out and expanded from another larger change. (#6263)\n\n* Minor cleanup split out and expanded from another larger change.\r\n - Spelling in comment.\r\n - 'l' is a short identifier that looks like '1' -- use \"len\".\r\n - Remove extra braces.\r\n - Add some g_assert (error) before error_init (error).\r\n\r\n* remove unuseful asserts"}, {"url": "https://api.github.com/repos/mono/mono/commits/891941ecbe9640b180f73096b8b230c6f48bf11b", "message": "Remove a few braces that are contrary to our prescribed style. (#6245)"}, {"url": "https://api.github.com/repos/mono/mono/commits/57ad62b9ec63423a08e8209ab967badaee627ea2", "message": "Just fix one typo in a comment. (#6240)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6547", "title": "Performance counter coop/handle conversion, this time \"fixed\" instead of \"WrappedString\".", "body": "Machine handling is moved to managed -- in another PR as well.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6503", "title": "Understand PE32+, at least as much as PE32 is understood.", "body": "A number of other problems are noticed in the code but commented only.\r\nThis fixes https://bugzilla.xamarin.com/show_bug.cgi?id=56071", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6465", "title": "[don't merge] Support Windows 10 OS-supported unicode thread names.", "body": "As opposed to just the wierd debugger thread names.\r\n\r\nNot actually tested on Windows, granted.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6443", "title": "Convert thread set name to coop/handle, passing fixed utf8 as suggested, and storing utf8.", "body": "Ludovic suggested passing fixed utf8, I'm not sure he meant to store it or not.\r\nResolve that before commit, and edit this comment down.\r\n  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6406", "title": "Cleanup MonoError initialization.", "body": "Neuter most initializations. Make them asserts for now.\r\nGive names to ones that must stay.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6394", "title": "A terser but clear style for zeroing a struct.", "body": "A terse but clear style for zeroing a struct.\r\nThis does not work portabily for unions, and will fail to compile for C++ if the first member is an enum (you have to cast). But otherwise zeros the entire thing.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6393", "title": "Some handle.h cleanup extracted from larger PR.", "body": "Some handle.h cleanup extracted from larger PR.  ", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6355", "title": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "body": "mono_perfcounter_counter_names returns incorrect names, and restructure slightly for clarity", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6298", "title": "convert mono/metadata/mono-perfcounters.c to use coop handles", "body": "convert mono/metadata/mono-perfcounters.c to use coop handles", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6247", "title": " Convert thread names to coop handles. ", "body": "\r\nConvert thread names to coop handles. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6621", "title": "StepOver on methods with more than 1 arguments", "body": "## Steps to Reproduce\r\n\r\n1. Follow #6617 \r\n\r\n## Current Behavior\r\n\r\nIf the method has two arguments and we step into in the first argument evaluation then \"step over\" we cannot step into in second arguments because debugger skip the whole method execution. I created the test to reproduce this problem.\r\n\r\n## Expected Behavior\r\n\r\nTests Passes\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nmono master\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/51e1e5af325baa566bd6b65dd045e461eb1cef7c", "message": "[mcs] Implements C# 7 tuples implicit deconstruction"}, {"url": "https://api.github.com/repos/mono/mono/commits/eef1a5aff241bb1cf5e7cac615bee2d4b65f0993", "message": "[mcs] Adds missing default literal conversion test in probing code path"}, {"url": "https://api.github.com/repos/mono/mono/commits/a5e2efe17f249ae609bdc3015fe05da5750cb224", "message": "[mcs] Fixes assumption that string class has no implicit/explicit conversion operators"}, {"url": "https://api.github.com/repos/mono/mono/commits/44309f79f152dcc6e026883861fed4d9a641f894", "message": "Bump linker"}, {"url": "https://api.github.com/repos/mono/mono/commits/c282af6df5ffbc7fc4ec2ab857299c8d455f9d72", "message": "[mcs] Implements C# 7.0 discards"}, {"url": "https://api.github.com/repos/mono/mono/commits/370105c5e0a741b187c5040c137ae0b44e3a7bc4", "message": "[profiler] Don't double escape special characters. (#6534)\n\nThe output of parse_generic_type_names is processed by escape_string_for_xml and\r\nwe were double escaping `&` character"}, {"url": "https://api.github.com/repos/mono/mono/commits/00934efe152db8b3d90b527867c8dd75ccbfacfb", "message": "[corlib] Fixes StoppedThreadsThrowThreadStateException test build"}, {"url": "https://api.github.com/repos/mono/mono/commits/46bb11eb337dd5cf951796265c00d1adf4b43d78", "message": "[mcs] C# 7.2 non-trailing named arguments"}, {"url": "https://api.github.com/repos/mono/mono/commits/111a7b3b129660c67abc9ed92c6dcedb0525975e", "message": "Bump monolite version (#6475)\n\nmissed in 190d357c2739a2a294f781b1939d76cb7c340aca"}, {"url": "https://api.github.com/repos/mono/mono/commits/6aa4e4dac90f83424b35ce8f98a96090c9e76bbc", "message": "[corlib] Optimizes non-intrinsics version of string indexer code"}, {"url": "https://api.github.com/repos/mono/mono/commits/25bff86cee04cc852ae453702e1ae83b8fe7c3b9", "message": "Bump corert (#6420)\n\n* Bump corert\r\n\r\n* Bump API snapshot submodule"}, {"url": "https://api.github.com/repos/mono/mono/commits/df0fd973cc0fd6d0608c22490d2138b7c929fc5a", "message": "Make suggestions in github issue template XML comments"}, {"url": "https://api.github.com/repos/mono/mono/commits/aa2ecc705375fd783d8b57b3c135d3ccc541251f", "message": "[corlib] Fixes ThreadPoolTest test"}, {"url": "https://api.github.com/repos/mono/mono/commits/c1c70a3622796538e0af167de1e604b1afbe0d30", "message": "[build] Bump bootstrap mcs dependency for mcs builds"}, {"url": "https://api.github.com/repos/mono/mono/commits/975765dbabf177958e8c4278811d5947fd302211", "message": "Bump corefx (#6119)"}, {"url": "https://api.github.com/repos/mono/mono/commits/5de513945b76d29d9704e167e7ba05f4abfa8c29", "message": "[mcs] Allow calling by-ref types virtual methods which can be devirtualized."}, {"url": "https://api.github.com/repos/mono/mono/commits/23675d6292e8969d68c75b5c157bc5c9bf03f016", "message": "[runtime] Adds System.Numeric remapping. Fixes #6339"}, {"url": "https://api.github.com/repos/mono/mono/commits/1003597c4e2664689e2cfa6ef5f17d4e3274b7cf", "message": "[mcs] Implements 7.2 stackalloc to Span assignment conversion."}, {"url": "https://api.github.com/repos/mono/mono/commits/eb3f9147ae855e1bbc7e5fa63ac2a37b41abe5e0", "message": "[mcs] readonly struct this can be reassigned within ctor"}, {"url": "https://api.github.com/repos/mono/mono/commits/841ffc2334512b5a4d0c59c4ce9f311cf63c4610", "message": "[mcs] Implements C# 7.0 Generalized async return types"}, {"url": "https://api.github.com/repos/mono/mono/commits/6e885dec43b2e275822e9372412a7077287fd484", "message": "[mcs] Support implicit user conversion from nullable type without unwrapping. Fixes #60900"}, {"url": "https://api.github.com/repos/mono/mono/commits/8d36d250bcf77d20f34c8e68441f574e0aef0445", "message": "[mcs] Adds parser support for readonly ref syntax"}, {"url": "https://api.github.com/repos/mono/mono/commits/c709e42040331878e1fcec4ff178623074c46a66", "message": "[mcs] Fixes parsing of default literal inside conditional expression"}, {"url": "https://api.github.com/repos/mono/mono/commits/fa9acab81164a78569d725bc1f84bf367e5092f9", "message": "Update codeowners"}, {"url": "https://api.github.com/repos/mono/mono/commits/723037ab133970549c34e46c51dd5bb4e06ae687", "message": "Bump linker & cecil"}, {"url": "https://api.github.com/repos/mono/mono/commits/742590f5b4d545a5e739b7116c6492a22141005f", "message": "Merge pull request #6168 from radekdoulik/pr-add-linker-analyzer-script"}, {"url": "https://api.github.com/repos/mono/mono/commits/9c00f0c0c4ce7fa1a7778d31805dce724b987379", "message": "[github] Update issue template not to auto-convert platforms into tasks"}, {"url": "https://api.github.com/repos/mono/mono/commits/7bf60c3ec95a2ba0af15eddb3c4c77200e9421e3", "message": "[build] Redirect api build to reference-assemblies"}, {"url": "https://api.github.com/repos/mono/mono/commits/da807f6f900ec774a4d94a1a9317916c7ef2a905", "message": "[mcs] Propagate flow analysis for tuple deconstruct"}, {"url": "https://api.github.com/repos/mono/mono/commits/2d43cf694f95fdb44be07d6a34e28691b477de29", "message": "Add issue template"}, {"url": "https://api.github.com/repos/mono/mono/commits/1724ce22a3a66dfec60ca0f576fb71b83da542de", "message": "[mcs] Add a detection for ByRefLikeMarker (#6195)"}, {"url": "https://api.github.com/repos/mono/mono/commits/a21fb19fc771ba23455fce8c77297d7681bc9127", "message": "[mcs] Don't emit tuple names for a private types"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6476", "title": "Weak field support backport", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6395", "title": "Bump corefx", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4608", "title": "[System.Drawing] Fixes wrongly used GCHandle.Alloc on managed object", "body": "System.ArgumentException : Object contains non-primitive or non-blittable data.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/128022", "body": "It should be bellow licence text\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137435", "body": "you should fix moonlight profile to use bootstrap gmcs from basic profile and not 2.0\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/195912", "body": "This commit causes\n\nStack overflow in unmanaged: IP: 0x400e8ac6, fault addr: 0x41cf0ff4\nStack overflow in unmanaged: IP: 0x400c43be, fault addr: 0x41ceffcc\nStack overflow in unmanaged: IP: 0x400e8ac9, fault addr: 0x41ceefe4\nStack overflow in unmanaged: IP: 0x400c43be, fault addr: 0x41cedfec\nStack overflow in unmanaged: IP: 0x400c1c40, fault addr: 0x41cecffc\nStack overflow in unmanaged: IP: 0x400e8ac6, fault addr: 0x41cebff4\nStack overflow in unmanaged: IP: 0x400c43be, fault addr: 0x41ceafcc\nStack overflow in unmanaged: IP: 0x400e8ac9, fault addr: 0x41ce9fe4\nStack overflow: IP: 0x400c43be, fault addr: 0x41ce8fec\n\nWhen calling the accessors\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/195912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/196834", "body": "This implementation is not really correct. It handles only the most trivial case in some circumstances.\n\nFor more fun try things like Dictionary<IList<object>, dynamic[]>\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/196834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/196835", "body": "github ate embedded IList\"<\"object> in my comment\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/196835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/264218", "body": "Any reason why the fields are global in the class ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/264218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/462695", "body": "Any reason not to make the class static\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/462695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/571480", "body": "Reverted in a850901cee48aaca968e\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/571480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/639137", "body": "You should not put it under Mono.Dns namespace it will cause many problem due to ambiguity with Dns class (same sort problem as Mono.Math causes to everyone) when a user code is compiled with mono dlls.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/639137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/650459", "body": "This is wrong, it will throw an exception where WaitAny should never throw\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/650459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/653500", "body": "Clean up should run in finally, Wait can throw an exception\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/653500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/662580", "body": "Of course the barrier must be there\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/662580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/662586", "body": "Again, the barrier is required and fixed the race\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/662586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/664108", "body": "This does not really fixes anything, just hides real races like when cancellation happen during finish/setup\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/664108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/733587", "body": "I cannot reproduce this error. It prints\n\nerror CS1950: The best overloaded collection initalizer method `System.Collections.Generic.List<int>.Add(int)' has some invalid arguments\n\nfor me which is correct in this case. Could you fill a new bug report will complete test case.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/733587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/981231", "body": "Can you send me .mdb you are trying to read (ideally with the steps how \nto build it myself)\n\n> This breaks Cecil ability (and all the associated tooling) to read/write debugging symbols. e.g.\n> \n> Could not link assemblies: System.ArgumentException: An element with the same key already exists in the dictionary.\n>    at System.Collections.Generic.Dictionary`2[System.Int32,Mono.CompilerServices.SymbolWriter.MethodEntry].Add (Int32 key, Mono.CompilerServices.SymbolWriter.MethodEntry value) [0x00163] in /Users/poupou/git/mono/mono/mcs/class/corlib/System.Collections.Generic/Dictionary.cs:450\n>    at Mono.CompilerServices.SymbolWriter.MonoSymbolFile.read_methods () [0x00072] in /Users/poupou/git/mono/mono/mcs/class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs:594\n>    at Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetMethodByToken (Int32 token) [0x00019] in /Users/poupou/git/mono/mono/mcs/class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs:608\n>    at Mono.Cecil.Mdb.MdbReader.Read (Mono.Cecil.Cil.MethodBody body, Mono.Cecil.Cil.InstructionMapper mapper) [0x0000c] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil.Mdb/Mono.Cecil.Mdb/MdbReader.cs:71\n>    at Mono.Cecil.Cil.CodeReader.ReadMethodBody () [0x000a6] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil.Cil/CodeReader.cs:109\n>    at Mono.Cecil.Cil.CodeReader.ReadMethodBody (Mono.Cecil.MethodDefinition method) [0x0001f] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil.Cil/CodeReader.cs:66\n>    at Mono.Cecil.MetadataReader.ReadMethodBody (Mono.Cecil.MethodDefinition method) [0x00000] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/AssemblyReader.cs:1983\n>    at Mono.Cecil.MethodDefinition.<get_Body>m__34 (Mono.Cecil.MethodDefinition method, Mono.Cecil.MetadataReader reader) [0x00000] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/MethodDefinition.cs:141\n>    at Mono.Cecil.ModuleDefinition.Read[MethodDefinition,MethodBody] (Mono.Cecil.MethodDefinition item, System.Func`3 read) [0x00018] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/ModuleDefinition.cs:815\n>    at Mono.Cecil.MethodDefinition.get_Body () [0x00035] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/MethodDefinition.cs:141\n>    at Mono.Linker.Steps.MarkStep.ProcessMethod (Mono.Cecil.MethodDefinition method) [0x00163] in /Users/poupou/git/mono/mono/mcs/tools/linker/Mono.Linker.Steps/MarkStep.cs:817\n> Failed to link /Developer/MonoTouch/Source/monomac/samples/AnimatingViews/bin/Debug/AnimatingViews.exe\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/mono/mono/commit/70cc60e9572e3cd4ec69fd8c77340b1109eacbfb#commitcomment-981227\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/981231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1009744", "body": "Why not to use Convert.ToInt32 ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1009744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1309060", "body": "You are missing GC.SuppressFinalize call\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1309060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1408127", "body": "You are missing ConfigureAwait (false) here and on many other places as well\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1408127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1408132", "body": "Could you commit tests for the change\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1408132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1445429", "body": "What do you mean \"Event .NET 2.0 has the same behaviour\" ? There is no such field, do you have test case which exposes the difference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1445429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1561086", "body": "Had to revert the change. Please submit pull request which passes all existing tests and include test for the new/changed code.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1561086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1620654", "body": "Is should handle IsError property as well\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1620654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1620656", "body": "Now Wait failure will go unnoticed\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1620656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1705023", "body": "This breaks .net compatibility and probably just hides underlying problem\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1705023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1705410", "body": "https://wrench.mono-project.com/Wrench/WebServices/Download.aspx?workfile_id=896161\n\nSecondly, the value is configurable so it should work with any provided value.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1705410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1706291", "body": "In your connection string use Packet Size=<some value from the range>\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1706291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1754514", "body": "This is wrong, smcs in obsolete in master\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1754514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1786181", "body": "Do we really need binaries here, why resources cannot be compiled from sources?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1786181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1856411", "body": "Duncan, this commit broke all posix tests\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1856411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057", "body": "Made small tweak but `mono --version` is useful only for people running Mono directly. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156319057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027", "body": "My worry is that then people would just skip the section", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160170027/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555", "body": "Should use git::// protocol", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687", "body": "How big is the submodule, it's still not accessible for me", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/141249687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904", "body": "I didn't want to move that one as I don't know if I need to change the paths and secondly, CODEOWNERS seems to be useful on its own", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156317904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607", "body": "I don't know what's the purpose of that, seems like what should be on mono github wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156318607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/90548334", "body": "I don't like this. I think it's overkill and it should be build profile driven for example we can completely ifdef it out for MOBILE", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/90548334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98669999", "body": "Why not to include all AOT like profiles here?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98669999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98677761", "body": "Why don't we run them, they should be no different to e.g winaot ?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98677761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98680504", "body": "monotouch works on mac desktop in same way as winout works on win desktop (not sure if orbis works anywhere)", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98680504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148922746", "body": "We should keep this", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148922746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148940592", "body": "I know this is about configure output and we should show it there as well", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148940592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/157745064", "body": "@luhenry do we need it for the compiled in code?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/157745064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83590755", "body": "Unwanted change\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83590755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152648896", "body": "Is any of the events enabled by default?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152648896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152648997", "body": "What does this mean?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152648997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70483190", "body": "yeah, we cannot simple drop it without notice especially when it was documented. Put it back and make it do nothing with a warning of deprecation\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70483190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93017798", "body": "This description does not make much sense. I don't know what it does on runtime but it could be nothing.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93017798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93018237", "body": "I think the description should be more general, no need to mention the profile at all as any profile can run with this option.\r\n\r\nI'd go for something like \r\n\r\n> Instructs mono runtime to run AOTed code only any JIT dependant code will abort the execution with exception. Useful for XXXXX\r\n\r\n> ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93018237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93027874", "body": "I don't think it make sense to mention any API. This is for mono runtime so what block anyone to run this with their own set of libraries? It should explain what it does and how to use it", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93027874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/32498669", "body": "I'd prefer xammac_net_4_5 naming convention\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/32498669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/92804734", "body": "I know, that's why it has label work-in-progress", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/92804734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114035473", "body": "This should go to profile config file e.g. `build/profiles/net_4_x.make` and only to profiles which have more than 1 value. For profiles which are already platform specific like monotouch we don't need this at all.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114035473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114037274", "body": "Don't need it here", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114037274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114037283", "body": "Don't need it here", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114037283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114037288", "body": "Don't need it here", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114037288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/121475139", "body": "Yes!", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/121475139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114969158", "body": "I don't like this, we need to introduce PROFILE_OUTPUT or something like that instead of copy and paste everywhere", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114969158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148923224", "body": "Why is this needed", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148923224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148941672", "body": "right but this way it'll look up for anything named `bash` not necessary bash shell", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148941672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148949173", "body": "@akoeplinger  I don't agree this is better, it means that the script could behave differently depending on who runs it.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148949173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114035126", "body": "I think BUILD_TOOLS_PROFILE is much better name", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114035126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75345998", "body": "I am not sure, we can keep it now but I'd still like to remove it later as it'll become confusing what is used and what is dead\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75345998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104483780", "body": "This should not be needed, we do it in relevant Makefile(s)", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104483780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "pbsf": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6603", "title": "System.IO.IOException when SQL command exceeds 702 chars.", "body": "## Steps to Reproduce\r\n\r\n1. Save the code below on a file named Program.cs, and replace the value of the variable `connectionString` with a valid one.\r\n2. mcs Program.cs -r:System.Data.dll\r\n3. mono Program.exe\r\n\r\n```\r\nusing System.Data.SqlClient;\r\n\r\nnamespace Test\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var sqlCommandLength = 703; // 702 works as expected, 703 does not.\r\n            var connectionString = \"[SOME_SQL_CONNECTION_STRING]\";\r\n            var sql = new string(';', sqlCommandLength);\r\n\r\n            foo(connectionString, sql);\r\n        }\r\n\r\n        static void foo(string connectionString, string sql)\r\n        {\r\n            using (var dbcon = new SqlConnection(connectionString))\r\n            {\r\n                dbcon.Open();\r\n                using (var dbcmd = dbcon.CreateCommand())\r\n                {\r\n                    dbcmd.CommandText = sql;\r\n                    using (var reader = dbcmd.ExecuteReader())\r\n                    {\r\n                        while (reader.Read()) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\n\r\nThe program throws an exception.\r\n\r\n\r\n## Expected Behavior\r\n\r\nThe program should exit without exceptions. This is achieved when changing the variable `sqlCommandLength` to a lower value (0 < `sqlCommandLength` < 703).\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[X] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n`\r\nMono JIT compiler version 5.4.1.6 (tarball Wed Nov  8 20:37:24 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-proj\r\nect.com\r\n        TLS:           __thread\r\n        SIGSEGV:       altstack\r\n        Notifications: epoll\r\n        Architecture:  amd64\r\n        Disabled:      none\r\n        Misc:          softdebug\r\n        LLVM:          supported, not enabled.\r\n        GC:            sgen (concurrent by default)\r\n`\r\n\r\nObtained in: https://github.com/mono/docker\r\n\r\n### Stacktrace\r\n\r\n```\r\nUnhandled Exception:System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer. ---> System.Net.Sockets.SocketException: Connection reset by peer\r\n  at System.Net.Sockets.Socket.Receive (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags) [0x00016] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x0009b] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n--- End of inner exception stack trace ---\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x000e2] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 count) [0x00024] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacketHeader () [0x00004] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetByte () [0x0000e] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.ProcessSubPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.NextResult () [0x00039] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at System.Data.SqlClient.SqlDataReader.NextResult () [0x00042] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlDataReader..ctor (System.Data.SqlClient.SqlCommand command) [0x00019] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlDataReader:.ctor (System.Data.SqlClient.SqlCommand)\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader (System.Data.CommandBehavior behavior) [0x00068] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader () [0x00000] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlCommand:ExecuteReader ()\r\n  at Test.Program.foo (System.String connectionString, System.String sql) [0x0001b] in <47dbd646d3fb49c298a3295a4c1af362>:0\r\n  at Test.Program.Main (System.String[] args) [0x0000c] in <47dbd646d3fb49c298a3295a4c1af362>:0[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer. ---> System.Net.Sockets.SocketException: Connection reset by peer\r\n  at System.Net.Sockets.Socket.Receive (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags) [0x00016] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x0009b] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n--- End of inner exception stack trace ---\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x000e2] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 count) [0x00024] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacketHeader () [0x00004] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetByte () [0x0000e] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.ProcessSubPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.NextResult () [0x00039] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at System.Data.SqlClient.SqlDataReader.NextResult () [0x00042] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlDataReader..ctor (System.Data.SqlClient.SqlCommand command) [0x00019] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlDataReader:.ctor (System.Data.SqlClient.SqlCommand)\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader (System.Data.CommandBehavior behavior) [0x00068] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader () [0x00000] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlCommand:ExecuteReader ()\r\n  at Test.Program.foo (System.String connectionString, System.String sql) [0x0001b] in <47dbd646d3fb49c298a3295a4c1af362>:0\r\n  at Test.Program.Main (System.String[] args) [0x0000c] in <47dbd646d3fb49c298a3295a4c1af362>:0xe t@0e4a214cb648:/playground# mcs Program.cs -r:System.Data.dll; mono Program.eUnhandled Exception:System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer. ---> System.Net.Sockets.SocketException: Connection reset by peer\r\n  at System.Net.Sockets.Socket.Receive (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags) [0x00016] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x0009b] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n--- End of inner exception stack trace ---\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x000e2] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 count) [0x00024] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacketHeader () [0x00004] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetByte () [0x0000e] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.ProcessSubPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.NextResult () [0x00039] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at System.Data.SqlClient.SqlDataReader.NextResult () [0x00042] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlDataReader..ctor (System.Data.SqlClient.SqlCommand command) [0x00019] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlDataReader:.ctor (System.Data.SqlClient.SqlCommand)\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader (System.Data.CommandBehavior behavior) [0x00068] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader () [0x00000] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlCommand:ExecuteReader ()\r\n  at Test.Program.foo (System.String connectionString, System.String sql) [0x0001b] in <8b9f6784c9d4434980285a675a546ae2>:0\r\n  at Test.Program.Main (System.String[] args) [0x00013] in <8b9f6784c9d4434980285a675a546ae2>:0[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer. ---> System.Net.Sockets.SocketException: Connection reset by peer\r\n  at System.Net.Sockets.Socket.Receive (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags) [0x00016] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x0009b] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n--- End of inner exception stack trace ---\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x000e2] in <50d80b08c1a5449282b22aedf03ce925>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 count) [0x00024] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacketHeader () [0x00004] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetPhysicalPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.TdsComm.GetByte () [0x0000e] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.ProcessSubPacket () [0x00000] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at Mono.Data.Tds.Protocol.Tds.NextResult () [0x00039] in <f79aba28c7fd4daab1d9371cb3809c14>:0\r\n  at System.Data.SqlClient.SqlDataReader.NextResult () [0x00042] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlDataReader..ctor (System.Data.SqlClient.SqlCommand command) [0x00019] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlDataReader:.ctor (System.Data.SqlClient.SqlCommand)\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader (System.Data.CommandBehavior behavior) [0x00068] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at System.Data.SqlClient.SqlCommand.ExecuteReader () [0x00000] in <23f11074adc346a7bcd76c006d949301>:0\r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlCommand:ExecuteReader ()\r\n  at Test.Program.foo (System.String connectionString, System.String sql) [0x0001b] in <8b9f6784c9d4434980285a675a546ae2>:0\r\n  at Test.Program.Main (System.String[] args) [0x00013] in <8b9f6784c9d4434980285a675a546ae2>:0\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6591", "title": "AOT compiler crashes when compiling VSMac", "body": "## Steps to Reproduce\r\n\r\n1. See this full log of VS AOT build https://gist.github.com/Therzok/cea5dc99b1aacd21b0a57238e8f154b9\r\n2. Look for stacktraces and the message `AOT failed:`\r\n3.  \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.270 (master/6a04dc64516 Thu Jan 18 09:04:29 EST 2018)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug\r\n\tInterpreter:   yes\r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6590", "title": "AOT compiled code crashes with Assertion at icall.c:4014, condition `method->slot < nslots' not met", "body": "## Steps to Reproduce\r\n\r\n1. Open AOT compiled VSMac\r\n2. https://gist.github.com/Therzok/336d593e6555548a8e83fa6fee0e6d30\r\n3. \r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\n`Assertion at icall.c:4014, condition `method->slot < nslots' not met`\r\n\r\n## Expected Behavior\r\n\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0.270 (master/6a04dc64516 Thu Jan 18 09:04:29 EST 2018)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug\r\n\tInterpreter:   yes\r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6167", "title": "Control intervals under which performance counters are gathered", "body": "`LogProfiler` should provide API for fine-grained measurement of performance counters. Rather than reporting them every 1s, I would like 2 methods:\r\n\r\n* GetPerformanceCounters - grab all perf counters collected until now\r\n* ResetPerformanceCounters - reset all counters to 0.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/112203157", "body": "Isn't the default now sgen?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112203157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "linyingwei": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6581", "title": "Getting malloc: *** error for object 0x610006830320: Non-aligned pointer being freed (2) error while running application on Mac OS with Xamarin", "body": "## Steps to Reproduce\r\n\r\nRun test application with 10 instances on one single box for 2 hrs\r\nTest application uses Xamarin platform to test business scenarios related to our product\r\n\r\n## Current Behavior\r\n\r\nTest app crashes with no logs except the log in system log which tells us there was an unaligned pointer being freed. This doesn't repro on a specific test or any specific time, it tends to happen once per test run. Recently, a change which just added logging to the app caused this to happen much more regularly with the same setup. We've investigated potential issue with that modified code - but couldn't find any. To be more explicit, it was System.Data.Sqlite dll which we thought as root cause, but it happened with earlier versions as well.\r\n\r\nWe're seeing the below log in /var/log/system.log:\r\n\r\nJan 18 02:09:00 BaeMacPro10-1 BAEMacShellLibTestApplication[60429]: BAEMacShellLibTestApplication(60429,0x70000b2b2000) malloc: *** error for object 0x610006830320: Non-aligned pointer being freed (2)\r\n*** set a breakpoint in malloc_error_break to debug\r\nJan 18 02:09:00 BaeMacPro10-1 syslogd[46]: ASL Sender Statistics\r\nJan 18 02:09:01 BaeMacPro10-1 com.apple.xpc.launchd[1] (com.microsoft.MerpForMono.MerpGUIAgent.699904[67524]): Service exited due to signal: Segmentation fault: 11 sent by exc handler[0]\r\nJan 18 02:09:01 BaeMacPro10-1 com.apple.xpc.launchd[1] (com.apple.ReportCrash[67525]): Endpoint has been activated through legacy launch(3) APIs. Please switch to XPC or bootstrap_check_in(): com.apple.ReportCrash\r\nJan 18 02:09:22 BaeMacPro10-1 com.apple.xpc.launchd[1] (com.apple.quicklook[68891]): Endpoint has been activated through legacy launch(3) APIs. Please switch to XPC or bootstrap_check_in(): com.apple.quicklook\r\n\r\n## Expected Behavior\r\n\r\nNo Crash\r\n\r\n### On which platforms did you notice this\r\n\r\nXamarin Studio Community 6.2.1 (build 3)\r\nRuntime: Mono 4.8.0.520\r\nApple Developer Tools: Xcode 8.3.3 (12175.1)\r\nXamarin.Mac 3.0.0.398\r\n\r\nWe can't share the binaries offline, and we can provide logs with a suggested methodology if provided. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joncham": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6579", "title": "Type.GetInterface fails to find implemented interface when `ignoreCase: true` is used", "body": "## Steps to Reproduce\r\n\r\n1. Run code below\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\npublic class Foo\r\n{\r\n    public static int Main(string[] args)\r\n    {\r\n        Console.WriteLine((typeof(Dictionary<string, object>).GetInterface(\"System.Collections.IDictionary\", true) != null));\r\n        return 0;\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\n\r\nOutput: False\r\n\r\n## Expected Behavior\r\n\r\n// .NET returns True\r\nOutput: True\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ x] Windows\r\n\r\n**Version Used**:\r\n\r\nRecent mono master (perhaps a few weeks old)\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/6c9339dd805b163f69de875439628d0c9cf34645", "message": "Pass TRUE for 'repeat' of send variants. This matches behavior of receive variants. Fixes blocking send call where Win32 returns WSAEWOULDBLOCK. (#6453)\n\nRelated to issue https://github.com/mono/mono/issues/6464"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3974", "title": "Check for successful return value rather than an incomplete set of no\u2026", "body": "\u2026n-successful codes\r\n\r\nSince the waits were alertable, the return value of MONO_THREAD_INFO_WAIT_RET_ALERTED was not being handled in the early out. Seems better to just check for successful return values.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1549553", "body": "I still have a regressions with this is sln file path is rooted. xbuild /a/b/c/my.sln ... gives me \"Unknown switch: \" with my sln name. Working on patch.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1549553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/149357893", "body": "@lewurm  I could. The original case if for architecture checks where this is a (sub)platform check. I wasn't sure if they should be merged or not. For example, if x86 is added to original check I likely want whatever is done there performed for Tizen as well.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149357893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Rombersoft": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6573", "title": "Deadlock in delegate which created used ", "body": "## Steps to Reproduce\r\n\r\n1. Assembly computer with motherboard msi 760GM-p23. On other motherboards all works fine!\r\n2. Install 4.8.8-2-ARCH #1 SMP PREEMPT Thu Nov 17 15:09:32 CET 2016 i686 GNU/Linux\r\n3. Install mono 5.8\r\n4. git clone from https://github.com/MonoGame/MonoGame\r\n5. Create project monogame with some animation\r\n\r\n<!--\r\nVideo number one about problem https://www.dropbox.com/s/dd1t83kisa8z8xx/video.mp4?dl=04\r\nYou can see on this video that application stop draw until somebody touch a touchscreen\r\n\r\nVideo number two about problem https://www.dropbox.com/s/fio3ajc3qhpne2a/VID_20180117_103256.mp4?dl=0 \r\nYou can see on this video that my application works fine when above it placed another window (in current case this is urxvt terminal emulator). Take attention on time as seconds run when I place urxvt window above my application and seconds stop when my application is on top of all windows\r\n-->\r\n\r\n## Current Behavior\r\n\r\n<!--\r\nApplication sometimes is not drawn. But if you click mouse or press keyboard button application continue to draw but not long time and stop again\r\n-->\r\n\r\n## Expected Behavior\r\nApplication must draw animation\r\n\r\n## Description and other observation\r\nMonogame is game engine which in cycle runs methods Draw and Update. \r\nAt start I thought that problem in monogame, I even create topic here http://community.monogame.net/t/drawing-stops/9799\r\nBut when I tried with old version monogame (2.5) on mono 5.4 version that problem still exists.\r\nBut when I tried with old version monogame (2.5) on mono 2.10 version that problem does not exist.\r\nI can not use monogame 3.6 on mono 2.10 because 2.10 version does not support 4.5 framework and monogame 3.6 does not work on 4.0 framework\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[*] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n<!--\r\n5.2 and 5.8\r\n-->\r\n\r\n### Stacktrace\r\n\r\nI can not reproduce Stack trace. But I know place where drawing thread stops.\r\nLook at here\r\nhttps://github.com/MonoGame/MonoGame/blob/master/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs#L356\r\nI am sure that it is problem on new mono.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6573/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6555", "title": "Process.WaitForExit() gets slower the larger your open file limit (ulimit -n) is on Linux", "body": "## Steps to Reproduce\r\n\r\n1. Compile this: `csc test.cs`:\r\n\r\n```csharp\r\npublic static class Program {\r\n    public static int Main () {\r\n        for (int i = 0; i < 100; i++) {\r\n            var p = System.Diagnostics.Process.Start (\"echo\", \"hello\");\r\n            if (!p.WaitForExit (10000)) return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```\r\n2. `$ (ulimit -n 1000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m0.402s\r\nuser\t0m0.028s\r\nsys\t0m0.184s\r\n```\r\n3. `$ (ulimit -n 100000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m1.277s\r\nuser\t0m0.380s\r\nsys\t0m0.592s\r\n```\r\n4. `$ (ulimit -n 1000000; time mono test.exe)`\r\n```\r\n...\r\nreal\t0m8.758s\r\nuser\t0m3.424s\r\nsys\t0m4.424s\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt gets slower the higher your ulimit -n is.\r\n\r\nNote: you may need to change your system settings (`/etc/security/limits.conf`) to allow higher limits.\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNot getting slower.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04/16.04\r\n[ ] Windows\r\n\r\n**Version Used**: master, 5.8.088 and 4.2.1 (so either a very old bug or something outside our control)\r\n\r\nThis was the root cause behind an issue (https://github.com/mono/mono/pull/6537) we had on Jenkins because the Azure Linux VM builders had ulimit -n set to 1048576.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6555/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6548", "title": "Frequent test failures of ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test", "body": "## Steps to Reproduce\r\n\r\n1. Compile Mono on Linux i386\r\n2. `make -C mcs/class/corlib run-xunit-test`\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nFrequent test failure in System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference corefx test: https://github.com/mono/corefx/blob/dfd98e7113a99708f4c9ed063a8c481f838aa8d3/src/System.Threading/tests/ThreadLocalTests.cs#L192-L225\r\n\r\nThis seems to only occur on i386 and on Linux: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=ubuntu-1404-i386/\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n## Expected Behavior\r\n\r\nNo test failure.\r\n<!--\r\nPlease describe the behavior you are expecting\r\n-->\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 14.04\r\n[ ] Windows\r\n\r\n**Version Used**: master\r\n\r\n<!--\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n-->\r\n\r\n### Stacktrace\r\n\r\n```\r\nAssert.False() Failure\r\nExpected: False\r\nActual:   True\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\n  at System.Threading.Tests.ThreadLocalTests+ThreadLocalWeakReferenceTest.Run () [0x0001c] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:216 \r\n  at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest7_WeakReference () [0x00005] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/external/corefx/src/System.Threading/tests/ThreadLocalTests.cs:224 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /mnt/jenkins/workspace/test-mono-mainline-linux/label/ubuntu-1404-i386/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6523", "title": "Remove obsolete assemblies in next major version bump", "body": "Tracking issue for assemblies to remove once we can do another breaking change, i.e. when we do Mono 6.0.\r\n\r\n- [ ] IBM.Data.DB2.dll, replaced by NuGet package\r\n- [ ] ICSharpCode.SharpZipLib.dll, replaced by NuGet package, fixes problems like  https://bugzilla.xamarin.com/show_bug.cgi?id=59304\r\n- [ ] Compat.ICSharpCode.SharpZipLib.dll (old copy of above)\r\n- [ ] Commons.Xml.Relaxng.dll, replaced by NuGet package\r\n- [ ] Mono.C5.dll, replaced by NuGet package\r\n- [ ] RabbitMQ.Client.dll, replaced by NuGet package\r\n- Very old copy of Rx.NET, replaced by NuGet packages\r\n  - [ ] System.Reactive.Core.dll\r\n  - [ ] System.Reactive.Debugger.dll\r\n  - [ ] System.Reactive.Experimental.dll\r\n  - [ ] System.Reactive.Interfaces.dll\r\n  - [ ] System.Reactive.Linq.dll\r\n  - [ ] System.Reactive.Observable.Aliases.dll\r\n  - [ ] System.Reactive.PlatformServices.dll\r\n  - [ ] System.Reactive.Providers.dll\r\n  - [ ] System.Reactive.Runtime.Remoting.dll\r\n  - [ ] System.Reactive.Windows.Forms.dll\r\n  - [ ] System.Reactive.Windows.Threading.dll\r\n- Very old copy of ASP.NET MVC framework, replaced by NuGet packages\r\n  - [ ] System.Web.Http.dll\r\n  - [ ] System.Web.Http.SelfHost.dll\r\n  - [ ] System.Web.Http.WebHost.dll\r\n  - [ ] System.Web.Mvc.dll\r\n  - [ ] System.Web.Razor.dll\r\n  - [ ] System.Web.WebPages.Deployment.dll\r\n  - [ ] System.Web.WebPages.dll\r\n  - [ ] System.Web.WebPages.Razor.dll\r\n  - [ ] WebMatrix.Data.dll\r\n  - [ ] Microsoft.Web.Infrastructure.dll\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6513", "title": "SocketTest.AcceptBlockingStatus is flaky on ARM", "body": "It failed 47 times in the last two weeks on the armel, armhf and arm64 master lanes with this stack trace:\r\n\r\n```\r\nMESSAGE:\r\nSystem.Net.Sockets.SocketException : Connection timed out\r\n+++++++++++++++++++\r\nSTACK TRACE:\r\nat System.Net.Sockets.Socket.Connect (System.Net.EndPoint remoteEP) [0x000b0] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/System.Net.Sockets/Socket.cs:886 \r\n  at MonoTests.System.Net.Sockets.SocketTest.BlockingConnect (System.Boolean block, System.Int32 port) [0x00033] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:136 \r\n  at MonoTests.System.Net.Sockets.SocketTest.AcceptBlockingStatus () [0x00006] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/System/Test/System.Net.Sockets/SocketTest.cs:171 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/builder/jenkins/workspace/test-mono-mainline-linux/label/debian-8-armhf/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6466", "title": "System.Diagnostics.ProcessTest.Start1_FileName_NotFound failing on newer Ubuntu", "body": "## Steps to Reproduce\r\n\r\n1. `make -C mcs/class/System run-test V=1 TESTNAME=System.Diagnostics.ProcessTest.Start1_FileName_NotFound\r\n`\r\n\r\nNote: This was first reported in https://github.com/mono/mono/issues/6383, after the native crash was fixed.\r\n\r\n## Current Behavior\r\n\r\n```\r\n...F\r\nTests run: 1, Passed: 0, Errors: 0, Failures: 1, Inconclusive: 0\r\n  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0\r\nElapsed time: 00:00:00.0690000\r\n\r\nErrors and Failures:\r\n\r\n1) Start1_FileName_NotFound (MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound)\r\n   #C1\r\n  at MonoTests.System.Diagnostics.ProcessTest.Start1_FileName_NotFound () [0x0015b] in /home/alexander/dev/mono/mcs/class/System/Test/System.Diagnostics/ProcessTest.cs:215 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /home/alexander/dev/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:305 \r\n\r\ngvfs-open: /usr/bin/shouldnoteverexist: error opening location: Error when getting information for file '/usr/bin/shouldnoteverexist': No such file or directory\r\n\r\nResults saved as /home/alexander/dev/mono/mcs/class/System/TestResult-net_4_x.xml.\r\n../../build/tests.make:208: recipe for target 'run-test-lib' failed\r\nmake[1]: *** [run-test-lib] Error 1\r\n```\r\n\r\n## Expected Behavior\r\n\r\nno failure.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ X ] Linux, Ubuntu 16.04 in VirtualBox VM and Ubuntu chroot on a ChromeOS device.\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\ne9913fdc487622073a0827f32f845b637163590d\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6379", "title": "Reenable System.Runtime.CompilerServices.Unsafe-xunit test on 32bit", "body": "It is disabled at the moment:\r\n\r\nhttps://github.com/mono/mono/blob/1710dd74fe06fc2679d9f2e72ad939d7e3bdfa10/scripts/ci/run-test-default.sh#L90-L91\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60865 was fixed but to fix the test we need a corefx bump that includes the changes from https://github.com/mono/mono/pull/6129#issuecomment-348296944\r\n\r\nReenable the test after corefx was bumped.\r\n  ", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6379/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/fad6e0cc3190ebbc2f50ff67d5d3615bbf4a76fd", "message": "Bump bockbuild to bump gtksharp (#6604)\n\nhttps://github.com/mono/bockbuild/pull/57"}, {"url": "https://api.github.com/repos/mono/mono/commits/4e2b3ad0d9cefd2dd84b86c104041718238b6288", "message": "Fix CLA link in CONTRIBUTING.md (#6585)\n\nIt was changed when .NET Foundation switched to new CLA infrastructure."}, {"url": "https://api.github.com/repos/mono/mono/commits/0c59209931f618d7811e4e0ff602e47f6276ef3e", "message": "[tests] Disable weak-fields.exe on LLVM as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/a99d7f4b1318091354ecc12c0be1aa97e34ae2c0", "message": "[ci] Use correct -arch syntax in CFLAGS on OSX (#6570)\n\nIn c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a I unified how we're\r\npassing -arch in CFLAGS to \"-arch=XXX\" since the original change\r\nin 63a49e9eb8b569c6d5265168101982f5557c52bb mixed the formats.\r\n\r\nTurns out the correct syntax is \"-arch XXX\" instead and it broke\r\nthe ccache build in bockbuild because it complained about the\r\nunknown format.\r\n\r\nAlso add LDFLAGS in the amd64 case to match what we have in bockbuild."}, {"url": "https://api.github.com/repos/mono/mono/commits/0d9c3dfff432f4a74f2f1588d9ec50fccc8d7ea7", "message": "[tests] Bump timeouts in process-stress-?.exe runtime tests (#6515)\n\n* [test-runner] Record test duration in NUnit xml\r\n\r\nThis allows us to keep track of the time on Jenkins.\r\n\r\nAlso fix issue where we were recording .Seconds of a TimeSpan instead of .TotalSeconds.\r\n\r\n* [tests] Bump timeouts in process-stress-?.exe runtime tests\r\n\r\nWe're seeing these fail sometimes on Linux Azure VMs, let's try\r\nif bumping the timeouts helps."}, {"url": "https://api.github.com/repos/mono/mono/commits/2a03be316d4e762168dd602a493d94944ccc9446", "message": "[class] Add Obsolete message to ICSharpCode.SharpZipLib.dll (#6511)\n\n* [class] Add Obsolete message to ICSharpCode.SharpZipLib.dll\r\n\r\nUsers should use the nuget package instead, we'll remove the assembly in Mono 6.0\r\n\r\nDon't install it into the 4.7.1 reference assembly directory anymore.\r\n\r\n* Bump API snapshot submodule"}, {"url": "https://api.github.com/repos/mono/mono/commits/ad5703adfd84c309292d4c33a2fcaa5e60de9100", "message": "[System] Set exception on Finish*Failure in SocketAsyncEventArgs (#6462)\n\nFollow up to https://github.com/mono/mono/pull/6431, we should\r\ncapture the exception that is passed to the methods.\r\n\r\nCopied the SetResult() method that referencesource uses."}, {"url": "https://api.github.com/repos/mono/mono/commits/1b5fa0e0596bc2774eeb60b439c66ca8c9caa676", "message": "Fix Windows build\n\nfd325223bab4daa5e150810f1ae0fab63a5d4c75 didn't change this occurrence of 'error' to 'gerror'."}, {"url": "https://api.github.com/repos/mono/mono/commits/b5c5c55368a92e1b513cb465c3cdc391fc784d87", "message": "[System] Recursively delete directory in ApplicationSettingsBaseTest\n\nOtherwise we'd get a \"directory not empty\" exception in the\nTestFixtureTearDown (which for some reason isn't shown in the log?).\n\nThis was added in https://github.com/mono/mono/pull/6272"}, {"url": "https://api.github.com/repos/mono/mono/commits/e0f362764e0705433708b656ec9f555948f4af59", "message": "[System] Clear XDG_DATA_HOME and XDG_CONFIG_HOME in ApplicationSettingsBase tests (#6417)\n\nThey were set in https://github.com/mono/mono/pull/6272 but since\r\nenv vars are process wide we'd end up with non-existing paths once\r\nthe tests are done. It is safer to unset the variables after the test."}, {"url": "https://api.github.com/repos/mono/mono/commits/261b75e047af12b1a87d376446ce7068dfe80af0", "message": "[ci] Bump timeout in acceptance-tests"}, {"url": "https://api.github.com/repos/mono/mono/commits/3b6c67d61f9cfae691809f3d17af228fff98ec21", "message": "[scripts] Ignore build output"}, {"url": "https://api.github.com/repos/mono/mono/commits/861e52e25c5ab6d6a670b42dd330276e1776b11f", "message": "[runtime] Fix include paths (#6402)\n\nVSCode complains about not finding these."}, {"url": "https://api.github.com/repos/mono/mono/commits/0f9bb15622b649db81974057f66669674ea47923", "message": "[I18N] Add CP737 (Greek) and CP775 (Baltic) (#6361)\n\n* [I18N] Add CP737 (Greek) and CP775 (Baltic)\r\n\r\nFixes https://bugzilla.xamarin.com/show_bug.cgi?id=45901\r\n\r\n* Bump API snapshot submodule"}, {"url": "https://api.github.com/repos/mono/mono/commits/c60f2c4ca2d8287cda992b3bc4316261c82605a6", "message": "Bump bockbuild"}, {"url": "https://api.github.com/repos/mono/mono/commits/ffc3a83d9b63aa2a2cd853dea9071fa023f52ed7", "message": "Bump gtksharp in bockbuild"}, {"url": "https://api.github.com/repos/mono/mono/commits/3826a69bc0c194e7598e4a7bbdfd829bbc802a34", "message": "[packaging] Whitelist vbc command in OSX pkg (#6382)\n\nWe added vbc in https://github.com/mono/mono/commit/8be2726e127a969cd73e4e92ed03b053f13ed5d5\r\nbut didn't whitelist it in the Mac package."}, {"url": "https://api.github.com/repos/mono/mono/commits/ccd3e6ff12da27972b3bc3fdf2aa3b2e4ea8beba", "message": "Update a few more Bugzilla URLs to GitHub (#6381)\n\nAlso update the WinForms readme to remove outdated content while at it."}, {"url": "https://api.github.com/repos/mono/mono/commits/ff197eb40587c6c7a1bda0cba583d77609b3dbbe", "message": "[packaging] Remove files from gtksharp package that would overwrite Mono files\n\nI found out that we were packaging e.g. MonoPosixHelper.dll from\nthe gtksharp msi instead of the one we build in Mono :P\n\nThis only happened in the x86 build because we don't package\ngtksharp in the x64 build."}, {"url": "https://api.github.com/repos/mono/mono/commits/d3356e6aab0a4227ca08f4d62ecb144c9fb691c2", "message": "[packaging] Add check for cygwin paths on Windows (#6364)\n\nWe don't want to package these, found a few that needed to be removed/fixed."}, {"url": "https://api.github.com/repos/mono/mono/commits/af165436b5a1feaee945046b99fbdcdd93a84534", "message": "Don't add linker tests to tarball\n\nThey contain files with very long names which causes issues with `tar`.\n\nWe simply remove them from the dist directory before creating\nthe tarball since we don't use them in the Mono build anyway.\n\nFixes https://github.com/mono/mono/issues/6349"}, {"url": "https://api.github.com/repos/mono/mono/commits/c354ac8ac1c5e88b63b80de18e9406cff81c7b70", "message": "Dist files in groups of 100 entries\n\nOn some distros the number of strings you can pass to execve()\nis limited which means you get the following error when trying\nto create the tarball:\n\n```\nmake[5]: execvp: /bin/sh: Argument list too long\nmake[5]: * [../../build/rules.make:303: dist-default] Error 127\n```\n\nTo solve this we split the DISTFILES variable into groups of 100\nentries and invoke the shell for each group instead of adding all\ninto the same invocation. Also removed looking for 'makefile' and\n'GNUmakefile' since those don't exist in Mono and simplifies the logic.\n\nFound during investigation of https://github.com/mono/mono/issues/6349"}, {"url": "https://api.github.com/repos/mono/mono/commits/f93caff1c85d74db8561d951b96d5dde9dea8bd5", "message": "[packaging] Windows: remove FSharp.Core from GAC (#6345)\n\nSee https://github.com/mono/mono/pull/6295#issuecomment-354156711."}, {"url": "https://api.github.com/repos/mono/mono/commits/7363f1ac3d10c3f3a8d9e204fa80273a7b6a336e", "message": "[utils] Include jemalloc dir in tarball build (#6344)\n\nFixes https://github.com/mono/mono/issues/6343"}, {"url": "https://api.github.com/repos/mono/mono/commits/c7d8d247c35b6fa08bbc7e36d2f44fefcdf48b5a", "message": "[ci] Add existing LDFLAGS instead of overwriting"}, {"url": "https://api.github.com/repos/mono/mono/commits/dd34edb9076b05cefd37b53bb8f0fb1b8f1884a3", "message": "Bump roslyn-binaries submodule"}, {"url": "https://api.github.com/repos/mono/mono/commits/27790b94950c24d816a3ba668013bbe6d2a9dd38", "message": "Bump roslyn-binaries submodule"}, {"url": "https://api.github.com/repos/mono/mono/commits/399c2c89c7c11ac8843f15269567bc9cde6fa1c0", "message": "[tests] Disable weak-fields.exe on FullAOT as well"}, {"url": "https://api.github.com/repos/mono/mono/commits/cd5f5282f22302cd4226d4f6b8f9940d6882272f", "message": "Bump version to 5.11 (#6158)"}, {"url": "https://api.github.com/repos/mono/mono/commits/58618dea1ecb591829a35e1b9a836a1abcefe906", "message": "[tests] Disable weak-fields.exe on ARM\n\nIt was introduced by https://github.com/mono/mono/pull/5972\n\nFiled bug: https://bugzilla.xamarin.com/show_bug.cgi?id=60973\n\nReviewed manually by @lewurm."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430", "body": "nit: in most templates I've seen the current/problematic behavior comes before the expected one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242430/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553", "body": "I'd rather instruct them to specifically run `mono --version` so we get full commit hash etc. which is included there.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156242553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037", "body": "not sure we need to mention both backtrace and stacktrace, they're used pretty much interchangeably anyway.\r\n\r\nstacktrace seems to be more commonly known from what I've seen.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145", "body": "`macOS`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052", "body": "don't you get this: \r\n![image](https://user-images.githubusercontent.com/1376924/33861614-14d2eef2-deb5-11e7-81a3-3c8a53f87857.png) ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156245052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598", "body": "What about we just remove this and the \"expected behavior\" description below? It doesn't add anything which isn't clear from the section header anyway and would make the template simpler.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735", "body": "maybe make it \"repro code/solution\" to be clear", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/160159735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328", "body": "use `git://` here like the other submodules\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/49633328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595", "body": "This must use `git://` instead of `git@` otherwise it won't be accessible to people without push access to that repo.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81156595/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942", "body": "This must be `git://` as `git@` requires authentication.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/83679942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928", "body": "typo: `borinssl`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136823928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077", "body": "`NuGet.BuildTasks` should be `nuget-buildtasks`", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472", "body": "this no longer exists", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665", "body": "this is called `/external/binary-reference-assemblies` now", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/136824665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543", "body": "should we keep this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861", "body": "while you're at it you could move the CODEOWNERS to the .github folder as well. And maybe CONTRIBUTING.md too?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156243861/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757", "body": "add the same in the CROSS_COMPILING section above too to make it consistent.\n\nActually, I'm wondering if we still need this separation when both if branches are the same anyway?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66353757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112211616", "body": "@Therzok yes, this option is about selecting which Boehm GC to use.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112211616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42945767", "body": "I tried to follow a naming convention of `{test suite}-{target}` in this Makefile in order to have a clean separation between all the test suites (i.e. you can just type `make coerclr-`, `make roslyn-`, `make whatever-` and hit tab on the shell to get all applicable targets).\n\nConsider renaming it to `coreclr-stresstest`.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42945767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42945806", "body": "`CORECLR_DISABLED_TEST_CS_SRC` is intended to list files that don't make sense to run but need to be included somewhere so we can easily check if new files were added upstream with `coreclr-list-missing-tests`.\n\nAdd it to `CORECLR_DEFINED_CS_SRC` below instead, since we're actually using the GC files.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42945806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42945839", "body": "Maybe GCStressTests to make it clear what's in there?\nI've also been building the other .exe's right next to their .cs in the coreclr repo, any reason why we don't want to do this here?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42945839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488089", "body": "This is disabled by default AFAIK (you need to pass --enable-big-arrays to ./configure), so it should still fail as .NET?\n\nIn any case, I'd prefer ifdef-ing out the \"big array\" case in the test source instead so that the other cases are still tested.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488450", "body": "[configure.ac#L2637](https://github.com/mono/mono/blob/d2cc9be75b10cd5d96a85dde6aff2ed014c1a6f7/configure.ac#L2637) says it defaults to no, and MONO_BIG_ARRAYS is not defined in config.h for me.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488517", "body": "btw. I agree we can disable the test as it doesn't do much, thought about some other test.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77944224", "body": "These need to end with .dll\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77944224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77946350", "body": "roslyn needs it, mcs doesn't, and we have been switching everything over to be consistent.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77946350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77944361", "body": "Not sure you need this, does -r:Newtonsoft.Json.dll not work?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77944361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77946185", "body": "I thought we install it, but OK in that case :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77946185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982157", "body": "unrelated but since you're touching this line: please change to \"4.x FX\" instead of 4.6\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982166", "body": "Can we call this something other than _profile_, since e.g. bitcode_mobile_static isn't a profile but a combination of settings from what I can see.\n\nSomething with `preset` maybe?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982180", "body": "I've got to say I still don't like this here. The fact that we're not building the mobile profiles on ppc/s390x on Jenkins is just a resource issue, nothing else. It doesn't feel like those checks belong here.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982776", "body": "This change seems to be effectively reverted in a later commit.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65982776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66806689", "body": "This needs a better description, it still mentions profiles instead of presets and what those are and why we do it (doesn't necessarily all need to be in the autoconf description, but a comment on this line).\n\nnet_4_x should probably also be renamed to something else since it includes building the monodroid, monotouch etc assemblies too. `netfx_and_mobile` maybe?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66806689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66806783", "body": "can you please add a comment to explain why we disable this on osx by default?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66806783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66808687", "body": "should also be called Preset defaults or something like that\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66808687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76576367", "body": "This won't work since we're setting CFLAGS in run-jenkins.sh which will override this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76576367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76576623", "body": "I'm also not 100% sure whether the .deb that is used for benchmarking is built with CFLAGS set so benchmarking results might not be meaningful.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76576623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76581271", "body": "I get why you did it this way and it is fine, I was just trying to point out that the Jenkins results are not meaningful if you don't modify run-jenkins.sh as well. So yes, please do that :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76581271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/79641999", "body": "nit: missing space after `/dev/null`\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/79641999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81120460", "body": "I don't see this being wired through to the mcs/ build system. Just having this here won't make it available in C# code like [MonoTlsProviderFactory.cs#L159](https://github.com/mono/mono/blob/f08c2659e746a5c067abff7d2acf833106f0efa5/mcs/class/System/Mono.Net.Security/MonoTlsProviderFactory.cs#L159).\n\nYou'll need to add writing this define to `$mcs_topdir/build/config.make` like in line 4404. Then you can use that and add a `-define:HAVE_BTLS` for the C# compiler in the right Makefiles.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81120460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81145753", "body": "So it's expected that the code in MonoTlsProviderFactory.cs#L159 and the other places where HAVE_BTLS is used in C# don't get built right now and there'll be a follow-up change that enables this?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81145753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81147178", "body": "Okay thanks, that clears up my confusion \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81147178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/89869244", "body": "you need to change this in the `AC_ARG_WITH(runtime_preset,` as well", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/89869244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/94632157", "body": "typo: symobols", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/94632157/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97073469", "body": "could you please fix the spaces/tabs mix while you modify this line?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97073469/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97074020", "body": "are there plans to enable gsharedvt on windows? maybe add a comment with the tracking bug.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97074020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98676522", "body": "We don't run runtime tests for monotouch from the Mono repo (do they even do it in the XI repo?), and that's the only missing FullAOT profile", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98676522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98678166", "body": "Because they wouldn't work since the monotouch BCL doesn't work on desktop. That's different from winaot as far as I know, since that one does work on windows desktop.\r\n\r\nIt's the reason why we created mobile_static / testing_aot_full \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98678166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98700288", "body": "There's stuff like [Environment.iOS.cs#L16](https://github.com/mono/mono/blob/0bcbe39b148bb498742fc68416f8293ccd350fb6/mcs/class/corlib/System/Environment.iOS.cs#L16) specific to XI, xamarin_GetFolderPath is implemented in [xamarin-support.m#L116](https://github.com/xamarin/xamarin-macios/blob/d3ae54adb6d017d3676a6880b82a3af0f5765fd0/runtime/xamarin-support.m#L116) which we don't have in Mono. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/98700288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104016341", "body": "I think we need this for winaot, orbis and possibly hybridaot as well", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104016341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104018094", "body": "Yeah bitcode too (everything that uses the \"mobile\" defines).\r\n\r\nI don't think there's anything to do for `--with_<profile>` since that only enables/disabling _building_ the respective BCL profiles.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104018094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114525593", "body": "can we rename this to `BUILD_PLATFORM` to make it more consistent with the usual cross-compile terminology?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114525593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114525953", "body": "this and win32 should probably also define `PLATFORM` here so we don't need to rely on the guessing in rules.make", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114525953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/124302507", "body": "why are you setting this here and below?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/124302507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/142270691", "body": "nit: should be an O in that error message, not a zero.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/142270691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/159400582", "body": "could you please leave it on a separate line? we have some scripts that grep the version number out of configure.ac all over the place and I'm not 100% sure all of them handle this :D", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/159400582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/103777610", "body": "this changed from librsvg-2.so.2 to librsvg-2.so.0, please fix it.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/103777610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905313", "body": "The format for headers in markdown needs to be either setext or ATX: http://daringfireball.net/projects/markdown/syntax#header\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905617", "body": "~~is~~ **in** a subtle way\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905653", "body": "~~been~~ **being** compatible\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77427296", "body": "Looks like mingw doesn't know SHGetKnownFolderPath (or we somehow end up not defining _WIN32_WINNT=0x0600 in eglib):\n\n```\ngmisc-win32.c: In function 'monoeg_g_get_home_dir':\ngmisc-win32.c:123:2: warning: implicit declaration of function 'SHGetKnownFolderPath' [-Wimplicit-function-declaration]\n  HRESULT hr = SHGetKnownFolderPath (&FOLDERID_Profile, KF_FLAG_DEFAULT, NULL, &profile_path);\n  ^\ngmisc-win32.c:123:56: error: 'KF_FLAG_DEFAULT' undeclared (first use in this function)\n  HRESULT hr = SHGetKnownFolderPath (&FOLDERID_Profile, KF_FLAG_DEFAULT, NULL, &profile_path);\n```\n\nWhat we've done in the past is simply including the declaration ourselves wrapped in `#if !defined`\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77427296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76161451", "body": "@cmcqueen seems like this change snuck in, can you please revert it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76161451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/52227399", "body": "https://github.com/mono/referencesource/commit/b04e2857af0c5120ddd9785f701f89605e0dc3e7\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/52227399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/68926886", "body": "~~This seems to contradict the other change you made in exceptions-arm.c. There you include asm/sigcontext.h if `__GLIBC__` is defined, but here it's the other way round (it'll fall through to the else and include it when `__GLIBC__` is **not** defined).~~ sorry, I misread the nesting, this is fine.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/68926886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72800518", "body": "If you look a few lines down there are already `__GLIB__` defines, the purpose is to skip those completely as logic like `#if 2 <= __GLIBC__` doesn't work if the symbol isn't defined at all.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72800518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65956603", "body": "this should use git:// so it can be cloned anonymously.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65956603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75648946", "body": "should be cert-sync\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75648946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/63276081", "body": "\"PowerPC running on ARM64\" <-- that doesn't make much sense, where is PPC in the above? Additionally, the command line uses `4.4.0-debian-8-x86` which isn't an available target.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/63276081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/63456779", "body": "`4.4.0-debian-8-powerpc` is not listed in `available targets`, this is confusing.\n\nBtw. what are the plans regarding Mono versions? Do we push all releases there? If yes, should this use the 4part version like 4.4.0.168 instead?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/63456779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/56442805", "body": "Can we call this e.g. `MONO_JIT_DUMP_METHOD` or something similar instead?\nWe already have the totally unrelated (albeit rarely used) `MONO_CFG_DIR` and I'd like to avoid confusion.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/56442805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70476451", "body": "did this option ship in a release? if yes, I think we can't simply remove it as it'd break people using it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70476451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70480860", "body": "It's used in monodroid at least: https://github.com/xamarin/xamarin-android/blob/14260f43fc47abc9aee0ff5a0ca10a10ac2e3384/src/Xamarin.Android.Build.Tasks/Tasks/BuildApk.cs#L324 (and who knows what other code relies on it).\n\nWe should just make this a no-op now that it's the default.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70480860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70481299", "body": "And now that I look at it, the same likely applies to `gen-seq-points-file` as well which was removed in https://github.com/mono/mono/commit/eb8cc5ca57c7fd03ca0026c9c0bcef9734c78776. \n\nIt's used in monodroid here: https://github.com/xamarin/xamarin-android/blob/14260f43fc47abc9aee0ff5a0ca10a10ac2e3384/src/Xamarin.Android.Build.Tasks/Tasks/Aot.cs#L329\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70481299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93014159", "body": "You don't need the special aot_full BCL profile for that, e.g. the monotouch profile works with it as well. What counts is that whatever profile you use must not use stuff that doesn't work in a fully AOTed world without JIT.\r\n\r\nAlso I don't think we should call this experimental given that every Xamarin.iOS app uses this.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93014159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93014362", "body": "Same here, full aot shouldn't be experimental.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93014362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/92803768", "body": "this will break building the IL-based runtime tests", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/92803768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/121474685", "body": "shouldn't it be the other way around?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/121474685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/116082342", "body": "nit: extracting the code that creates the cygwin-compatible symlink into a function would make this more readable and avoid duplication with library.make (we can keep it in mind for a future cleanup though).", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/116082342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148944455", "body": "some Unix systems don't have bash in /bin so using /usr/bin/env is usually considered more portable.\r\n\r\nI do wonder though whether we shouldn't stick to /bin/sh instead and removing the bashisms for such a core script (afaik all the other scripts that use bash aren't required for the build).", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148944455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114527360", "body": "(can't comment on the line)\r\n\r\nI think we can get rid of PLATFORM_excludes below now. I can't find any current usages and with the new setup we can use `linux_net_4_x_corlib.dll.exclude.sources` instead.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114527360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131519853", "body": "why KEYFILE_MCS_FLAGS instead of just adding it to LIB_MCS_FLAGS?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131519853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131520408", "body": "also there are a few stray cases of KEY_FILE e.g. in Facades, could you please consolidate them to KEYFILE?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131520408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66850955", "body": "Why not do it for the other options as well then?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66850955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/91093040", "body": "We don't have mono.bat anymore, only normal mono.exe (which points at mono-boehm.exe or mono-sgen.exe). You need to replace this with just `mono`.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/91093040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75292118", "body": "We should probably leave this in, just as a safeguard if these defines are used somewhere else.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75292118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/54562550", "body": "See https://github.com/akoeplinger/mono/commit/6ac50ede2a19a7502519fe421d1011093da24a3c#commitcomment-16412609.\nI don't know of a good way to propagate the autoconf vars into the mcs/ build system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/54562550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97779609", "body": "this won't work, the PROFILE_MCS_FLAGS only get passed to the C# compiler so they have no effect on the Makefile. You need to set `NO_CONSOLE=yes` further down as part of the Makefile instead.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97779609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97781191", "body": "This also needs to be added to all profiles that defined `MOBILE` before so they continue to exclude console.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97781191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexrp": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6546", "title": "Miscellaneous coverage profiler cleanup tasks", "body": "Opening this as a sort of meta-bug to keep track of some relatively small issues with the coverage profiler that should be addressed over time.\r\n\r\n- [ ] When we're comfortable bumping the output format version, it would be nice to change the overall structure to be more easily digestible for readers. For example, all `class` elements should be under an `assembly` element, all `method` elements should be under a `class` element, etc.\r\n- [ ] Type names (and signatures in general) should be fully qualified in the output, and not use C# names like `int`, `long`, etc.\r\n- [ ] The way we output generic definitions and generic instantiations needs to be cleaned up and made consistent. For example, if a program has a method `Foo<T> ()` and executes the instantiation `Foo<int> ()`, the output file will mention `Foo<int> ()` with all the correct execution counts, but it will also mention the uninstantiated `Foo<T> ()` with all-zero counts, as if it was uncovered. We should only mention the generic definition (with all the counts from all instantiations merged), not every single instantiation.\r\n- [ ] The data structures (or rather, lack thereof) in the profiler can be simplified. There's no particular reason we need to use a bunch of hash tables to map everything back and forth the way we do. The code would be much easier to read and maintain if we just had some proper structures for representing loaded assemblies, classes, and methods.\r\n- [ ] We should resolve method signatures and such ahead of time instead of doing it when we're dumping coverage data at shutdown. Resolving method signatures during shutdown can cause assemblies to be loaded, and metadata from those will be missing in the output as a result.\r\n- [ ] There's some commented out code relating to zipping of the output. This should either be implemented or removed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6271", "title": "Switch the JIT --trace code to using call context introspection", "body": "Now that the profiler API has full support for selective enter/leave instrumentation and simple/portable inspection of stack frames (arguments, locals, return value), we could implement the `mono --trace` functionality using this API. This would allow us to get rid of the arch-specific `mono_arch_instrument_prolog` and `mono_arch_instrument_epilog`, both of which are known to be somewhat unreliable (the reason we switched enter/leave instrumentation to using internal calls in the first place).", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6271/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6254", "title": "Crash in profiler stress test runner when waiting for a process", "body": "## Steps to Reproduce\r\n\r\n1. Build Mono on Linux armel or OS X i386.\r\n2. `cd acceptance-tests`\r\n3. `make check-profiler-stress`\r\n\r\n## Current Behavior\r\n\r\nA crash occurs when waiting on a child (test) process to exit.\r\n\r\n## Expected Behavior\r\n\r\nThe test runner should run to completion.\r\n\r\n**Version Used**:\r\n\r\n2d43cf694f95fdb44be07d6a34e28691b477de29\r\n\r\n### Stacktrace\r\n\r\nhttps://jenkins.mono-project.com/job/test-mono-mainline-linux-profilerstress-arm/label=debian-8-armel-on-arm64/68/consoleFull#-2001780300c04ca618-a109-447b-99e0-481aaedae630\r\n\r\nhttps://jenkins.mono-project.com/job/test-mono-mainline-profilerstress/label=osx-i386/151/consoleFull#-2001780300c04ca618-a109-447b-99e0-481aaedae630", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6211", "title": "Rare shutdown crash in profiler stress tests", "body": "Example: https://jenkins.mono-project.com/job/test-mono-mainline-linux-profilerstress-x86-x64/label=high-mem-ubuntu-1404-i386/500/testReport/junit/MonoTests/profiler-stress/couchbase/\r\n\r\nIt looks like we try to call `mono_method_full_name` on a `MonoMethod` whose signature contains a type that's already been freed. This happens because we keep `MonoMethod` pointers around in the profiler for longer than we should - see #6171. The fix will probably be similar to that issue.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6190", "title": "Rare Roslyn timeout in profiler stress tests", "body": "Example: https://jenkins.mono-project.com/job/test-mono-mainline-linux-profilerstress-x86-x64/label=high-mem-ubuntu-1404-amd64/466/testReport/junit/MonoTests/profiler-stress/roslyn_timeout/\r\n\r\nWhile this particular run had `sample-real=668`, that still shouldn't take 9 hours, especially considering GC allocation events and heapshots weren't enabled. Need to investigate if this is a profiler issue or an issue in Roslyn.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6189", "title": "Nonsensical profiler stress test assertion (possible stack corruption)", "body": "Examples:\r\n\r\n* https://jenkins.mono-project.com/job/test-mono-mainline-linux-profilerstress-x86-x64/label=high-mem-ubuntu-1404-i386/484/testReport/junit/MonoTests/profiler-stress/couchbase/\r\n* https://jenkins.mono-project.com/job/test-mono-mainline-linux-profilerstress-x86-x64/label=high-mem-ubuntu-1404-amd64/471/testReport/junit/MonoTests/profiler-stress/fsharp/\r\n\r\nThere are no code paths in the runtime that pass non-zero `unwind_options` when doing an async backtrace, so I can only assume we're looking at some kind of rare stack corruption.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6188", "title": "Consolidate the concept of a tools thread and a thread that has opted out of STW", "body": "Right now, we have two ways of opting out of participating in STW:\r\n\r\n* Attach as a tools thread (call `mono_threads_attach_tools_thread`).\r\n* Attach normally and opt out (call `mono_gc_set_skip_thread`).\r\n\r\nI believe that it would be completely fine for us to consolidate these two. Currently, a tools thread is basically just a thread that's attached through the `MonoThreadInfo` infrastructure *only* (i.e. it has no `MonoInternalThread` set, no domain, etc). Only the profiler uses tools threads. In reality, all the profiler needs is that tools threads do not participate in STW and are not considered for statistical sampling - nothing else. Having a `MonoInternalThread` and a domain set for these threads is not a problem at all.\r\n\r\nIn fact, *not* having a domain set for tools threads is proving to be a problem. The tools threads in the profiler sometimes call into runtime functions that end up wanting to use `mono_domain_get`, thus crashing since no domain is set. For example, using the log profiler with an AOT-compiled Roslyn results in this crash:\r\n\r\n```\r\n\t0   mono                                0x0000000101a5fd91 mono_handle_native_crash + 257\r\n\t1   mono                                0x00000001019b334c mono_sigsegv_signal_handler + 220\r\n\t2   libsystem_platform.dylib            0x00007fffcf037b3a _sigtramp + 26\r\n\t3   ???                                 0x00007fb1cd479810 0x0 + 140401629960208\r\n\t4   mono                                0x0000000101ae61e7 mono_assembly_load_full_nosearch + 439\r\n\t5   mono                                0x0000000101ae22a8 mono_assembly_load_full_internal + 40\r\n\t6   mono                                0x0000000101ae1f17 mono_assembly_load_reference + 519\r\n\t7   mono                                0x0000000101ae8c5d mono_class_from_typeref_checked + 573\r\n\t8   mono                                0x0000000101af767d mono_class_get_checked + 173\r\n\t9   mono                                0x0000000101b4ac16 mono_metadata_parse_type_internal + 1238\r\n\t10  mono                                0x0000000101b4b5ee mono_metadata_parse_method_signature_full + 590\r\n\t11  mono                                0x0000000101b25aa3 mono_method_signature_checked + 483\r\n\t12  mono                                0x0000000101b05c46 mono_method_get_name_full + 726\r\n\t13  libmono-profiler-log.0.dylib        0x0000000101ecaf3d handle_writer_queue_entry + 205\r\n\t14  libmono-profiler-log.0.dylib        0x0000000101ecad98 writer_thread + 568\r\n\t15  libsystem_pthread.dylib             0x00007fffcf04193b _pthread_body + 180\r\n\t16  libsystem_pthread.dylib             0x00007fffcf041887 _pthread_body + 0\r\n\t17  libsystem_pthread.dylib             0x00007fffcf04108d thread_start + 13\r\n```\r\n\r\nSo, my plan to fix this is as follows:\r\n\r\n* Remove the whole tools thread concept.\r\n* Remove `mono_gc_set_skip_thread` (it's not public API).\r\n* Move the `gc_disabled` field to `MonoThreadInfo`.\r\n* Introduce `mono_thread_info_set_skip_suspend` (replaces `mono_gc_set_skip_thread`) and `mono_thread_info_set_skip_sample`.\r\n* Attach profiler background threads normally (possibly even start them using `mono_thread_create_internal`).\r\n* Use the new functions to make the runtime skip STW and sampling on profiler background threads.\r\n* Make the rest of the runtime check these bits where needed.\r\n\r\n---\r\n\r\nOriginally filed at: https://bugzilla.xamarin.com/show_bug.cgi?id=59024", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6188/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6186", "title": "Code coverage instrumentation logic should deal with inlining the same way as enter/leave instrumentation", "body": "That is, `mono_method_check_inlining` should fail if `method` has coverage instrumentation enabled.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6185", "title": "Provide line number information in log profiler backtraces", "body": "On the surface, this seems simple enough: We can get this information more or less the same way we do when generating backtraces for exceptions. Where it gets a bit more complicated is when we have to get the information for async backtraces collected during sampling.\r\n\r\nAdditionally, we would need to come up with a good way to encode this information in the format without it taking up a tremendous amount of space. Writing file name + line number + column number for every frame is obviously not feasible. One possibility is that we only encode an IL offset for each frame and let readers figure things out from there (would require #6180 and #6181).\r\n\r\n---\r\n\r\nOriginally filed at: https://bugzilla.xamarin.com/show_bug.cgi?id=29904", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6184", "title": "Parallelize log buffer parsing in LogProcessor", "body": "Since we read log buffers into a `MemoryStream` before actually parsing events from them, it should be entirely possible to parse multiple buffers in parallel, sort them by arrival order, and then actually process the parsed events from them serially.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6183", "title": "Graduate Mono.Profiler.Log to stable status", "body": "What needs to happen:\r\n\r\n- [ ]  Refine and stabilize the API.\r\n- [ ] Remove the library from `MONO_API_ASSEMBLIES_IGNORED`.\r\n- [ ] Include the library in the `mobile` and `xammac_4_5` profiles (possibly others).\r\n- [ ] Start shipping the library in XA/XI/XM.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6182", "title": "Investigate using Ward annotations in the log profiler", "body": "It would be nice to try and use [Ward](https://github.com/evincarofautumn/Ward) annotations to catch violations of various invariants in the log profiler.\r\n\r\nA few examples:\r\n\r\n* We shouldn't try to write an event to a log buffer without holding the reader or exclusive lock.\r\n* We shouldn't start writing a new event to a log buffer if we're already writing one.\r\n* We shouldn't try to iterate the thread list without holding the exclusive lock.\r\n* We shouldn't try to acquire the reader or exclusive lock recursively.\r\n* We shouldn't use signal-unsafe functions in the sample hit callback.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6182/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6181", "title": "Log profiler should write the current runtime's Aotid to the log format", "body": "This is needed to look up debug information when using AOT.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6180", "title": "Log profiler's image load events should include the Mvid", "body": "", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6179", "title": "Remove code coverage support from the log profiler", "body": "We now have a dedicated coverage profiler that is working quite well and which we're exercising on CI. We also warn users who use the `coverage` option of the log profiler that they should switch to the new coverage profiler instead. All that's left is to remove the coverage support from the log profiler at some point.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6178", "title": "Log profiler should provide startup time in stream header from same source as event timestamps", "body": "The stream header should contain a startup time value from the same clock source as the timestamps used in events (i.e. a monotonic clock).", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6178/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6177", "title": "Log profiler should provide field metadata events", "body": "In particular, it would be nice to have field types, names, and offsets. With this information, a complete object graph with detailed field information could be constructed from a heapshot. Additionally, once #6144 is merged, field offsets would make it possible to narrow down exactly which `static` field a root comes from.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6177/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6176", "title": "Add some basic coverage profiler tests", "body": "While we do exercise the coverage profiler on the BCL on Jenkins, it would be nice to have some tests that actually verify the correctness of the output.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6175", "title": "Expand the log profiler's command server", "body": "The Xamarin Profiler team would like to be able to do the same things through the command server which are currently possible through the `LogProfiler` class in the `Mono.Profiler.Log` assembly.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6174", "title": "Include object's current generation in TYPE_HEAP_OBJECT events", "body": "The Xamarin Profiler team would like to know an object's generation in a heapshot.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6173", "title": "Periodic heapshot mode calculates time difference incorrectly", "body": "This results in too frequent heapshots (basically on every GC).", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6172", "title": "Some profiler events are raised before profilers are loaded", "body": "After adding some debug logging to `MONO_PROFILER_RAISE`, I get this:\r\n\r\n```\r\njit_chunk_created raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\njit_code_buffer raised before a profiler was loaded\r\n```\r\n\r\nWhile these events are not super important, we should still see if anything can be done about it. We might have to load profilers before the global code manager is initialized.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6171", "title": "Runtime should free methods when profilers are attached", "body": "`mono_free_method` currently does nothing if a profiler is attached. This is because of a bunch of hacks in the log profiler that result in keeping `MonoMethod` pointers around potentially for longer than their actual lifetime. The thread-local method list is one such hack.\r\n\r\nWe should investigate whether this can be fixed. One possible fix is to increase the ref count on the `MonoImage` associated with the `MonoMethod` while we're keeping these pointers around.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6170", "title": "Switch to Mach thread suspend API for sampling", "body": "Signal delivery on OS X is not very reliable. There are no real time signals nor signal queuing of any kind. This means that in programs with lots of threads, we lose tons of samples. To make matters worse, most sample signals tend to be delivered to one particular thread, while all other threads barely get any samples.\r\n\r\nTo solve this problem, the sampling background thread should instead use the Mach thread suspend APIs to suspend a thread, grab its machine context, perform the sample hit callback (where we collect a backtrace, send it to the dumper thread, etc), then resume the thread. Since the thread suspend APIs use a counter internally, this should not interfere with our STW machinery.\r\n\r\nWe will need to introduce a new sample hit callback in the profiler API since the current one is guaranteed to be invoked from a signal handler on the sampled thread.\r\n\r\nRelevant Mach APIs:\r\n\r\n* [`thread_suspend`](https://opensource.apple.com/source/xnu/xnu-344.12.2/osfmk/man/thread_suspend.html.auto.html)\r\n* [`thread_resume`](https://opensource.apple.com/source/xnu/xnu-344.34/osfmk/man/thread_resume.html.auto.html)\r\n* [`thread_get_state`](https://opensource.apple.com/source/xnu/xnu-344/osfmk/man/thread_get_state.html.auto.html)", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3491b7b604c2d1741e1d261a3315aa0e5a554d0c", "message": "[profiler] Write out all uncovered classes/methods in a loaded image. (#6544)\n\n* [runtime] Export mono_class_get_checked () for use in profilers.\r\n\r\n* [runtime] Expand mono_method_get_header_summary () to collect more info.\r\n\r\nIt now collects all the trivially-accessible header data that doesn't require\r\nchasing down other metadata.\r\n\r\n* [profiler] Use mono_method_get_header_summary () in the coverage code.\r\n\r\nWe only need code start and size information, not all the data that is present\r\nin the header. By switching to this function, we avoid all the side effects\r\nthat come with resolving local variables and exception clauses (which can even\r\nresult in loading assemblies in the worst case).\r\n\r\n* [profiler] Write out all uncovered classes/methods in a loaded image.\r\n\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60225\r\n\r\nThis required a bit of refactoring and some workarounds for various special\r\ncases. This also fixes some race conditions with respect to how data was\r\ninserted into the lock-free hash tables and queues."}, {"url": "https://api.github.com/repos/mono/mono/commits/76d7ab281db976c40e9f15176e0b5a3488bad869", "message": "[Mono.Profiler.Log] Fix reading of TYPE_JITHELPER events for < v14."}, {"url": "https://api.github.com/repos/mono/mono/commits/d7ac79ccc0edc7de26f319447935f179f893bff6", "message": "[profiler] Rework GC roots reporting. (#6144)\n\nThis change re-implement GC roots reporting in a way that allows users to correctly track the source of a GC root.\r\n\r\nThe new design is based on emitting GC root information upfront and only report addresses during heap dumps.\r\n\r\nWhen a GC root is registered we emit an event that is an address range, the root kind, a key and a text description.\r\n\r\nA decoder can use this information to match a reported root address with all registration addresses to figure out what they mean.\r\n\r\nA GC Root key is used to further its meaning. For example, if kind is thread, key is a tid, if kind is static variables, key is the vtable pointer and so on.\r\n\r\nThe build of the change is introducing this key argument across all root registration code and rework our root reporting code to encode their addresses.\r\n\r\nSome roots use pseudo-addresses when they are not registrable. This is the case of thread stacks/registers and the finalizer queue.\r\n\r\nFinally, root reporting was changed to happen only once per collection and at the end, leading to correct and useful data being produced."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/308855", "body": "BTW, this fixes: https://bugzilla.novell.com/show_bug.cgi?id=633312\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/308855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958", "body": "Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974", "body": "Minor style issue: Spaces here instead of tabs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/5308974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870", "body": "s/mono-lite/monolite/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873", "body": "This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/13260873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77945730", "body": "Seems to be working fine without. What difference does this make?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77945730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77945958", "body": "`System.Net.Http.Formatting.dll` and various other assemblies in `mcs/` do it like this, and I can't find any makefiles that build and install `Newtonsoft.Json.dll` in the GAC.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77945958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/51344547", "body": "These messages need to be changed so it's clear that we need `libtoolize` from the libtool package, not `libtool`.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/51344547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76580977", "body": "Well, the whole point of doing it like this is so that the user can override it with `CFLAGS` in the environment. Can I just modify the `run-jenkins.sh` script in this PR?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76580977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146725780", "body": "Does this really need to be this elaborate? Can't it just be a simple `AC_CHECK_FUNCS(getrandom)`?\r\n\r\nThe test currently relies on runtime behavior to determine the availability. That's bad for cross-compiling.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146725780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146728905", "body": "Then what we should do is detect the `ENOSYS` at runtime and fall back to `/dev/urandom`, IMO.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146728905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146733845", "body": "Perhaps @luhenry could clarify this? I believe he worked on that code.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146733845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/10174598", "body": "Instead of invoking `sh`, can we pick up the existing shell and use that?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/10174598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72918165", "body": "If the overhead is significant, we could disable the overridable allocators by default and print an error message in the malloc profiler instructing the user to recompile with overridable allocators enabled to use it. Since this profiler is probably most useful to runtime developers, that's probably fine?\n\nThe alternative is disabling the malloc profiler when overridable allocators are disabled, but it would be nice to always build it regardless of the availability of overridable allocators so we can catch breakage early.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72918165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/41525001", "body": "Since this is a symbol that doesn't exist in glib proper, shouldn't it be `eg_`?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/41525001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2954503", "body": "Strictly speaking, the `volatile` here is unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2954503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2953810", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2953810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152654773", "body": "These: https://github.com/mono/mono/blob/master/mono/metadata/profiler.h#L355\r\n\r\nI.e. not super useful to the average user (to this day I'm not exactly sure why these events were even added; it was done before I started maintaining the profiler).", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152654773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152654897", "body": "I will add a note to the ones that are enabled by default.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/152654897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/132596763", "body": "The plan is to remove this option exactly because `output=stuff.mlpd.%p` does the same thing. So I'd rather not document it.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/132596763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66848768", "body": "Why the change from `=` to `:=`?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66848768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rodrmoya": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6512", "title": "Missing counters/perf counters in Mono 5.8 with new profiler arguments", "body": "## Steps to Reproduce\r\n\r\n1. Run any desktop mono app with: `/Library/Frameworks/Mono.framework/Versions/Current/bin/mono --gc=sgen --profile=log:heapshot=ondemand,nolegacy,jit,gc,nogcalloc,gcroot,gcmove,counter,output=\"/var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd\" app.exe`\r\n2. Let it run for a few seconds and stop\r\n3. `mprof-report /var/folders/rd/w957krqd3rn1zps5z6r75kz00000gn/T/n4rhtedd.mlpd` shows no counters\r\n\r\n<!--\r\nYou may drag & drop the attachement (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n## Current Behavior\r\n\r\nUsing the old runtime arguments (`alloc,heapshot=ondemand,counters`) produces a MLPD with counters on it.\r\n\r\n## Expected Behavior\r\n\r\nCounters should be emitted in the MLPD file\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n```$ mono --version\r\nMono JIT compiler version 5.8.0.103 (2017-10/1359c52fc6e Wed Dec 20 10:52:54 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/issues/6259", "title": "AllocationEvent's come before associated VTable event", "body": "In mono master (5.11), the MLPDs produced by the runtime profiler seem to have one problem, only happening for a few \"System.RuntimeType\" allocations that seem to happen at the beginning of the application. The series of events is:\r\n\r\n(Messages obtained via adding debugging console output to Xamarin.Profiler on a v15 MLPD where the problem was seen)\r\nBuffer ID's are the buffer's TimeBase field, and the 2nd number is the timestamp of the specific event:\r\n\r\n1. ClassLoad event:\r\n   The culprit is System.RuntimeType at buffer 19250786083136 at 19250788456173\r\n2. Several Allocation events for objects of that type, without any stack trace:\r\n   No backtrace at buffer 19250786083136 at 19250789353288\r\n   No backtrace at buffer 19250786083136 at 19250789359463\r\n   No backtrace at buffer 19250786083136 at 19250789362233\r\n   No backtrace at buffer 19250786083136 at 19250789363302\r\n   No backtrace at buffer 19250786083136 at 19250789364130\r\n3. VTable event for the unknown-till-now VTablePointer:\r\n   Got unknown VTable for class 2072191896 at buffer 19250786083136 at 19250789365557\r\n\r\nAll events are in the same buffer, and it is not an ordering problem because of the timestamp sorting in SyncPoint, as the events have different timestamps", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OleksandrChizh": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6498", "title": "Mono issue with TLS due to Client Certificates", "body": "Hi. We have a .NET 4.0 application for sending https(TLS 1.0) requests using HttpWebRequest. The application works correctly with the windows version of Mono but when we send a request on Ubuntu 16.04 using Mono 5.4.1.6 we get an error, see here: https://pastebin.com/hP9dZvuF\r\nJust to test the app we sent a request to https://www.google.com, https://github.com, etc. and we got no errors but when we send a request to required server the issue appears.\r\nWe tried to import required certificates manually using certmgr and mozroots but it didn't solve the issue.\r\nWe are thinking it's an issue of Mono because we compiled the same code with .NET Core and it works well. Is there any chance to solve this issue?\r\nThank you!\r\n\r\n> CQNET: Error getting response stream (ReadDone1): ReceiveFailure - Error\r\n> System.Net.WebException: Error getting response stream (ReadDone1): ReceiveFailure ---> System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:100000b6:SSL routines:OPENSSL_internal:NO_RENEGOTIATION\r\n>   at /build/mono-5.4.1.6/external/boringssl/ssl/s3_pkt.c:446\r\n>   at Mono.Btls.MonoBtlsContext.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean& wantMore) [0x00050] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.ProcessRead (Mono.Net.Security.BufferOffsetSize userBuffer) [0x00011] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream:ProcessRead (Mono.Net.Security.BufferOffsetSize)\r\n>   at Mono.Net.Security.AsyncReadRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x0000c] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<ProcessOperation>d__24.MoveNext () [0x000ff] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter.GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.AsyncProtocolRequest+<StartOperation>d__23.MoveNext () [0x0008b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream+<StartOperation>d__58.MoveNext () [0x001bf] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x0003e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Runtime.CompilerServices.TaskAwaiter1[TResult].GetResult () [0x00000] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at System.Threading.Tasks.TaskToApm.End[TResult] (System.IAsyncResult asyncResult) [0x0002e] in <62f5937022004555807e6c57c33f6684>:0 \r\n>   at Mono.Net.Security.MobileAuthenticatedStream.EndRead (System.IAsyncResult asyncResult) [0x00000] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.WebConnection.ReadDone (System.IAsyncResult result) [0x0001b] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>    --- End of inner exception stack trace ---\r\n>   at System.Net.HttpWebRequest.EndGetResponse (System.IAsyncResult asyncResult) [0x00058] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at System.Net.HttpWebRequest.GetResponse () [0x0000e] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n>   at k.s (System.String bqi, System.Int32 bqj) [0x00043] in <31d60139ab8f4173b33ee35d33fa2fdb>\r\n>", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6498/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luhenry": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6490", "title": "Reenable weak-fields.exe test", "body": "Extracted from https://bugzilla.xamarin.com/show_bug.cgi?id=60973\r\n\r\nIt fails with the following output\r\n\r\n```\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 0\r\nFinalized. 16946264\r\n```\r\n\r\n@vargaz noted that it's the test that seems flaky since it doesn't expect the object to be randomly retained.\r\n\r\nIt was disabled with https://github.com/mono/mono/pull/6191", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9484143e9389dba5feba3aec6f4df25c6f1a00fb", "message": "[eglib] Add g_assertf (#6483)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdb93684e7634e03691aa4fe9851084cf594f0df", "message": "[sdks] Extract versions into a dedicated file (#6474)"}, {"url": "https://api.github.com/repos/mono/mono/commits/b58dee4b8749b6d0915ef138f838fdbd69682338", "message": "[coop] Disable failing tests on PR (#6472)"}, {"url": "https://api.github.com/repos/mono/mono/commits/ba40387f50ec96f35ff63b18212586c6e59215f8", "message": "[w32process] Ensure process_handle is a legal value (#6449)\n\n* [w32process] Ensure process_handle is a legal value\r\n\r\nFixes https://github.com/mono/mono/issues/6383\r\n\r\n* [w32process] Remove dead code"}, {"url": "https://api.github.com/repos/mono/mono/commits/04a275df98205dbfae97bed05022f44916926f2c", "message": "[interp] Fix build when disabled (2) (#6280)"}, {"url": "https://api.github.com/repos/mono/mono/commits/5f5c5e97a08f7086d7c18af37352c4a03dc4c0d1", "message": "[threadpool] Replace parked_threads condition variable by a semaphore (#6222)"}, {"url": "https://api.github.com/repos/mono/mono/commits/f6bf1d427b29ba00211f047081e492c56d06b41c", "message": "[threads] Ensure we remove the thread only once (#6194)\n\n* [threads] Ensure we remove the thread only once\r\n\r\n* [threads] Inline unsused function\r\n\r\n* [threads] Assert we are on the current thread when detaching"}, {"url": "https://api.github.com/repos/mono/mono/commits/5e9081600f0cd4a66e7ff1d274109869b811a5b3", "message": "[console] Invoke async console cancel on ThreadPool from managed"}, {"url": "https://api.github.com/repos/mono/mono/commits/19cba1df374fbf0b69cbf7f2ba425298132b5b24", "message": "[interp] Fix build when disabled (#6218)"}, {"url": "https://api.github.com/repos/mono/mono/commits/1e3fb99fa35bcd586e846723a74209e980e9f911", "message": "[threads] Fix leak of gchandle to MonoInternalThread\n\nFixes https://github.com/mono/mono/issues/6169"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6634", "title": "[runtime] Apply cctor filters to callees of cctors (#6562)", "body": "Backport of http://github.com/mono/mono/pull/6562", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6627", "title": "Bump linker", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6619", "title": "Fix watchos tests for system.data (#6600)", "body": "Backport of https://github.com/mono/mono/pull/6600", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6500", "title": "[sdks] Move some code supporting the BCL from XA to Mono", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5853", "title": "[interp] Enable all runtime tests for interpreter", "body": "This PR is to know which runtime tests are failing, and which one can be enabled on master.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/42947476", "body": "The issue is the this folder is hardcoded into the test runner in the coreclr. Also, I copied the file from Kumpera's fork (https://github.com/kumpera/coreclr-gc-test), as he has to make some minor changes to make it cross platform. We should see to upstream these changes, as they do not modify the behavior, but only make it correct on multiple platforms.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42947476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42947895", "body": "I actually found a workaround: there is a BVT_ROOT env variable which is used in the code to change the folder where to find the tests.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/42947895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/78844372", "body": "This is a test for github required comments\n\nsee https://help.github.com/articles/about-pull-request-reviews/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/78844372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/78844427", "body": "test2\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/78844427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/89885748", "body": "done at https://github.com/mono/mono/pull/4035/files#diff-67e997bcfdac55191033d57a16d1408aR776", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/89885748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/90570696", "body": "It make things easier, I will change it to MOBILE.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/90570696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105178153", "body": "the script to build System.Native (https://github.com/dotnet/corefx/blob/master/src/Native/build-native.sh) doesn't have a specific parameter to build for android. Would you be ok to simply pass `linux` in the case of android, or should we add this option to the build script?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105178153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105180233", "body": "Same as for android, the System.native build script doesn't have a parameter for anything else than `freebsd`, `linux`, `netbsd` and `osx`.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105180233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113290800", "body": "It's dead: if you define `LAZY_GC_THREAD_CREATION` then no finalizer thread will ever be created.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113290800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113932117", "body": "You are right, it's still in use. I am going to add it back to a header, as it's not defined in any of them.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113932117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/121791816", "body": "you should check for ERANGE, and increase the size of tmp_buff in this case.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/121791816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114134417", "body": "That's a leftover, I will remove it.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114134417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114134482", "body": "Same as https://github.com/mono/mono/pull/4764#discussion_r114134417", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114134482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114134498", "body": "Same as https://github.com/mono/mono/pull/4764#discussion_r114134417", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114134498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114145178", "body": "I will move it to `build/profiles/$(PROFILE).make`. For profiles that only run on 1 platform, it just makes it much easier to still provide the 1 platform, so we can generalise the rest of the build system, and not special case for when the platform is provided or not.\r\nIt also opens the door (at a  later time) for what @kumpera suggested of generalising profiles (for example: orbis becomes monotouch + orbis platform or something equivalent).", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114145178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/115026071", "body": "Why not simply have `$(PROFILE)_$(LIBRARY_SUBDIR)_$(subst /,-,$(intermediate))_$(LIBRARY)` ? There are going to be some consecutive `_` but that's for generated files so it does not matter.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/115026071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75374866", "body": "I have no strong opinion on removing NET_2_1 in this PR. But for the sake of having as little breaking change as possible, I will leave the removing of it for another PR.\nIn the same note, but for yet another PR, I am pretty sure we could get rid of NET_1_1, NET_2_0 and NET_3_5 too.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75374866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ErwinVorenhout": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6477", "title": "GetActiveTcpConnections->state returns wrong status", "body": "I am trying to monitor an active TCP connection with the following code, when running on windows the _log.logInfo function will simply return established but when running on Mono 4.2.1 it will return \"Closed\", while the connection is established according: netstat -anp --tcp. \r\n\r\n```\r\nActive Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        0      0 192.168.200.202:42685   192.168.200.218:18000   ESTABLISHED 23378/mono\r\n```\r\n\r\nThis is the code that I am using:\r\n```\r\nIPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();\r\nTcpConnectionInformation[] tcpConnections = ipProperties.GetActiveTcpConnections().Where(x => x.LocalEndPoint.Equals(_client.Client.LocalEndPoint) && x.RemoteEndPoint.Equals(_client.Client.RemoteEndPoint)).ToArray();\r\nif (tcpConnections != null && tcpConnections.Length > 0)\r\n{\r\n       TcpState stateOfConnection = tcpConnections.First().State;\r\n      if (_connected != 2)\r\n      {                              \r\n           if (stateOfConnection != TcpState.Established)\r\n           {\r\n                _log.logInfo(tcpConnections.First().RemoteEndPoint.ToString() + \"status:\" + \r\n                tcpConnections.First().State.ToString());\r\n                reConnect();\r\n           }\r\n      }\r\n}\r\n```\r\n\r\nThe output on windows when placing the log function above the if statement: \r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : established\r\n```\r\n\r\nWhile the output on Linux is:\r\n\r\n```\r\n2018-01-10 20:14:23.767245 | TCP/IP Connector -  : closed\r\n```\r\n\r\nI found out that Mono uses the ```/proc/net/tcp``` to read out the TCP/IP connections \r\nWhen trying to monitor the connection on remote addr 192.168.200.218  /proc/net/tcp returns the following:\r\n\r\n```  \r\nsl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode\r\n0: 0100007F:0CEA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   111        0 1077650 1 0000000000000000 100 0 0 10 0\r\n1: 00000000:008B 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815396 1 0000000000000000 100 0 0 10 0\r\n2: 00000000:0016 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 17055 1 0000000000000000 100 0 0 10 0\r\n3: 00000000:01BD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 2815395 1 0000000000000000 100 0 0 10 0\r\n4: 29CAA8C0:0016 DAC8A8C0:DBFB 01 00000080:00000000 01:00000015 00000000     0        0 2906153 3 0000000000000000 25 4 1 10 16\r\n```\r\nHere is number 4 the connection that I am trying to monitor(HEX DA C8 A8 C0  = decimal 192.168.200.218 ) the  state is  01 in the table.\r\n\r\n According the [kernel ](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h?id=HEAD) state 01 should be established so I am wondering where the state closed is comming from?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebasijan": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6471", "title": "PlatformNotSupportedException when calling LdapConnetion.Disconnect", "body": "Everything appears to be working fine (apart from the fact that retrieving a specific attribute should be way easier than iterating around all existing attributes - not sure why it was designed this way), but when I try to disconnect I get\r\n\r\n > PlatformNotSupportedException: Thread abort is not supported on this platform.\r\n\r\nThe code is pretty much exactly as taken from the Novell documentation, aprt from the fact that I am trying to just rerieve 2 specific attributes (name and logon time): \r\n\r\n\tvar users = new List<User>();\r\n\r\n\t// Creating an LdapConnection instance \r\n\tLdapConnection ldapConn= new LdapConnection();\r\n\r\n\t//Connect function will create a socket connection to the server\r\n\tldapConn.Connect(\"DOMAIN.com\",389);\r\n\r\n\t//Bind function will Bind the user object Credentials to the Server\r\n\tldapConn.Bind(\"DOMAIN\\\\_Bassi\",\"password\");\r\n\r\n\t// Searches in the Marketing container and return all child entries just below this\r\n\t//container i.e. Single level search\r\n\tLdapSearchResults lsc=ldapConn.Search(\"OU=Users,OU=MCS,OU=AU,OU=COMPANY,DC=DOMAIN,DC=com\",\r\n\t\t\t\t\tLdapConnection.SCOPE_ONE,\r\n\t\t\t\t\t\"objectClass=*\",\r\n\t\t\t\t\tnull,\r\n\t\t\t\t\tfalse);\r\n\r\n\twhile (lsc.hasMore())\r\n\t{\r\n\t\tvar user = new User();\r\n\r\n\t\tLdapEntry nextEntry = null;\r\n\t\ttry \r\n\t\t{\r\n\t\t\tnextEntry = lsc.next();\r\n\t\t}\r\n\t\tcatch(LdapException e) \r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Error: \" + e.LdapErrorMessage);\r\n\t\t\t// Exception is thrown, go for next entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tConsole.WriteLine(\"\\n\" + nextEntry.DN);\r\n\r\n\t\tLdapAttributeSet attributeSet = nextEntry.getAttributeSet();\r\n\t\tSystem.Collections.IEnumerator ienum =  attributeSet.GetEnumerator();\r\n\r\n\t\tvar atts = attributeSet.ToArray().ToList();\r\n\r\n\t\twhile(ienum.MoveNext())\r\n\t\t{\r\n\t\t\tLdapAttribute attribute=(LdapAttribute)ienum.Current;\r\n\t\t\tif(attribute.Name == \"sAMAccountName\")\r\n\t\t\t{\r\n\t\t\t\tuser.UserName = attribute.StringValue;\r\n\t\t\t} \r\n\t\t\telse if(attribute.Name == \"lastLogonTimestamp\")\r\n\t\t\t{\r\n\t\t\t\tuser.LastLogon = DateTime.FromFileTime(long.Parse(attribute.StringValue));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tusers.Add(user);\r\n\t}\r\n\r\n\tldapConn.Disconnect();\r\n\r\nAnd as soon as `Disconnect` is called I get the error. \r\n\r\nHas anyone else experienced this or know what might be going wrong?\r\n\r\n**stacktrace**\r\n\r\n\r\n\tSystem.Threading.Thread.Abort()\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.Dispose(bool disposing, string reason, int semaphoreId, InterThreadException notifyUser)\r\n\r\n\r\n\tNovell.Directory.Ldap.Connection.destroyClone(bool apiCall)\r\n\r\n\r\n\tNovell.Directory.Ldap.LdapConnection.Disconnect()\r\n\r\n\r\n\tLogonChecker.Managers.ActiveDirectory.GetADUsers() in ActiveDirectory.cs\r\n\t- \r\n\t64.                    }\r\n\t65.                }\r\n\t66.\r\n\t67.                users.Add(user);\r\n\t68.            }\r\n\t69.\r\n\t70.            ldapConn.Disconnect();\r\n\t71.\r\n\t72.            return users;\r\n\t73.\r\n\t74.            // LdapConnection ADconn = new LdapConnection();\r\n\t75.            // ADconn.Connect(\"DOMAIN.com\", 389);\r\n\t76.            // ADconn.Bind(\"DOMAIN\\\\_Bassie\", \"password\");\r\n\r\n\r\n\tLogonChecker.Controllers.UserController+<Index>d__2.MoveNext() in UserController.cs\r\n\t- \r\n\t20.        }\r\n\t21.\r\n\t22.        // GET: User\r\n\t23.        public async Task<IActionResult> Index()\r\n\t24.        {\r\n\t25.            var ad = new ActiveDirectory();\r\n\t26.            var users = ad.GetADUsers();\r\n\t27.\r\n\t28.            return View(users);\r\n\t29.            // return View(await _context.User.ToListAsync());\r\n\t30.        }\r\n\t31.\r\n\t32.        // GET: User/Details/5\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n\r\n\r\n\tSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n\r\n\tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\r\n\r\n\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "didiermauricio": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6461", "title": "System.Runtime.Remoting.RemotingException: Tcp transport error.", "body": "## Steps to Reproduce\r\n\r\n1. Execute a nunit test with system runtime remoting\r\n\r\n\r\n\r\n## Current Behavior\r\n\r\n\r\nTimeout is produced in the test \r\n\r\n\r\n## Expected Behavior\r\n\r\nThe test ends correctly\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[X] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n\r\nMono JIT compiler version 5.4.1.6\r\n\r\n\r\n### Stacktrace\r\n\r\n```\r\nSystem.Runtime.Remoting.RemotingException: Tcp transport error. ---> System.Runtime.Remoting.RemotingException: Connection closed\r\n  at System.Runtime.Remoting.Channels.Tcp.TcpMessageIO.StreamRead (System.IO.Stream networkStream, System.Byte[] buffer, System.Int32 count) [0x00011] in <fa2996d57e8648068039a20e3bc00c4e>:0 \r\n  at System.Runtime.Remoting.Channels.Tcp.TcpMessageIO.ReceiveMessageStatus (System.IO.Stream networkStream, System.Byte[] buffer) [0x00000] in <fa2996d57e8648068039a20e3bc00c4e>:0 \r\n   --- End of inner exception stack trace ---\r\n\r\n\r\nServer stack trace: \r\n  at System.Runtime.Remoting.Channels.Tcp.TcpMessageIO.ReceiveMessageStatus (System.IO.Stream networkStream, System.Byte[] buffer) [0x00017] in <fa2996d57e8648068039a20e3bc00c4e>:0 \r\n  at System.Runtime.Remoting.Channels.Tcp.TcpClientTransportSink.ProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, System.IO.Stream& responseStream) [0x0005e] in <fa2996d57e8648068039a20e3bc00c4e>:0 \r\n  at System.Runtime.Remoting.Channels.BinaryClientFormatterSink.SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg) [0x00066] in <fa2996d57e8648068039a20e3bc00c4e>:0 \r\n\r\nException rethrown at [0]: \r\n  at (wrapper managed-to-native) System.Object:__icall_wrapper_mono_remoting_wrapper (intptr,intptr)\r\n  at (wrapper remoting-invoke) NUnit.Engine.Agents.RemoteTestAgent:Stop ()\r\n  at NUnit.Engine.Runners.ProcessRunner.Dispose (System.Boolean disposing) [0x00086] in <1e8ad6af4c6f4686ad7e5f9e67020b3b>:0 \r\n  at NUnit.Engine.Runners.AbstractTestRunner.Dispose () [0x00000] in <1e8ad6af4c6f4686ad7e5f9e67020b3b>:0 \r\n  at NUnit.Engine.Runners.MasterTestRunner.Dispose (System.Boolean disposing) [0x00013] in <1e8ad6af4c6f4686ad7e5f9e67020b3b>:0 \r\n  at NUnit.Engine.Runners.MasterTestRunner.Dispose () [0x00000] in <1e8ad6af4c6f4686ad7e5f9e67020b3b>:0 \r\n  at NUnit.ConsoleRunner.ConsoleRunner.RunTests (NUnit.Engine.TestPackage package, NUnit.Engine.TestFilter filter) [0x0010e] in <5d13e9f4d03e4da1b4779cb1d61b9b3d>:0 \r\n  at NUnit.ConsoleRunner.ConsoleRunner.Execute () [0x000b6] in <5d13e9f4d03e4da1b4779cb1d61b9b3d>:0 \r\n  at NUnit.ConsoleRunner.Program.Main (System.String[] args) [0x001bf] in <5d13e9f4d03e4da1b4779cb1d61b9b3d>:0 \r\n\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lambdageek": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6457", "title": "ReflectionTypeLoadException: should include LoaderExceptions in the Message", "body": "The CoreCLR version of `System.Reflection.ReflectionTypeLoadException` includes the contents of the `LoaderException` property in its `Message`.  Mono should do likewise.\r\n(Mono is using a version of `ReflectionTypeLoadException` from `referencesource` here: https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/reflection/reflectiontypeloadexception.cs)\r\n\r\nhttps://github.com/dotnet/coreclr/blob/a76445568d42b9b7d37d9f6e94ec47393179585e/src/mscorlib/shared/System/Reflection/ReflectionTypeLoadException.cs#L47", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a529b434538ffb1ef32e72e806954ca2ed74a246", "message": "[mono-error] Use mono_error_assert{f,_msg}_ok instead of if (is_ok (e)) g_error(...)"}, {"url": "https://api.github.com/repos/mono/mono/commits/77c68b952bc5dfa8016e14bd135b92aafd59665e", "message": "[mono-error] Use g_assertf in mono_error_assert_ok implementation\n\nAlso add two more variants\n\n* mono_error_assert_msg_ok (err, msg) to print \"msg, due to <err>\" on failure\n* mono_error_assertf_ok (err, fmt, args...) to print\n  \"<formatted args>, due to <err>\" on failure."}, {"url": "https://api.github.com/repos/mono/mono/commits/ab9ecc9903dd92719480abb953bb0ae83722e1f9", "message": "[metadata] Mark several functions external only (#6384)\n\n* [runtime] Mark mono_class_get and mono_class_get_full external only.\r\n\r\n   Runtime should use mono_class_get_checked and\r\n   mono_class_get_and_inflate_typespec_checked, respectively.\r\n\r\n* [runtime] Mark mono_ldtoken external only\r\n\r\n   Runtime should use mono_ldtoken_checked\r\n\r\n* [metadata] Mark mono_type_create_from_typespec external only\r\n\r\n   Runtime should use mono_type_create_from_typespec_checked\r\n\r\n* [runtime] Remove mono_class_inflate_generic_method_full.\r\n\r\n   Mark mono_class_inflate_generic_method external only.\r\n\r\n   Runtime should use mono_class_inflate_generic_method_full_checked.\r\n\r\n* [runtime] Mark mono_get_inflated_method external only\r\n\r\n   This function is obsolete.  It should have no callers.\r\n\r\n* [metadata] Mark mono_field_from_token external only\r\n\r\n   Runtime should use mono_field_from_token_checked\r\n\r\n* [runtime] Add MonoError arg to mono_class_get_inflated_method\r\n\r\n* [metadata] Mark mono_metadata_parse_method_signature external only\r\n\r\n   Runtime should use mono_metadata_parse_method_signature_full\r\n\r\n* [metadata] Mark mono_metadata_interfaces_from_typedef as external only.\r\n\r\n   Runtime should use mono_metadata_interfaces_from_typedef_full\r\n\r\n* [mini] Add MonoError arg to mono_class_get_method_generic\r\n\r\n   Also move its declaration from metadata/class-internals.h to mini/mini.h\r\n   since it's defined and used in mini/\r\n\r\n* [class] Assert that mono_class_get_inflated_method never returns NULL"}, {"url": "https://api.github.com/repos/mono/mono/commits/0fb4f03a1bbf4f253e3f7bba0e9dee987386bda0", "message": "[centrinel] Suppress warning about body of mono_internal_thread_handle_ptr (#6432)\n\nSince object-internals.h is included in a ton of places, we get one Centrinel warning\r\nabout mono_internal_thread_handle_ptr per translation unit every time the\r\nheader is included which is ridiculously noisy.\r\n\r\nThis commit will suppress the warning about the body of this function.\r\n\r\nNote that uses of the function will still get a warning since it returns a\r\nMonoInternalThread* and we haven't yet taught Centrinel that those calls are ok since\r\nthe thread object is pinned."}, {"url": "https://api.github.com/repos/mono/mono/commits/009e2d8835bfa19913ecc56116bb744991a4af85", "message": "[sre] Emit a memberref token for fields,methods of a gtd\n\nThis can happen when emitting code like:\n```\n  class Foo<T> {\n    T elt;\n    public T getter () {\n      return elt;  // ILGenerator.Emit (OpCodes.Ldfld, /*FieldBuilder of Foo::elt*/)\n    };\n  }\n```\n\nthe old incorrect code emitted a fielddef token for Foo::elt, but it should be a\nmemberref for Foo<!0>::elt.\n\nLikewise, if we have\n```\nclass Foo<T> {\n  public T f () { /*...*/}\n  public void g () {\n    var x = f (); // ILGenerator.Emit (OpCodes.Call, /* MethodBuilder of Foo::f */)\n    /*... */\n  }\n}\n```\n\nFixes https://github.com/mono/mono/issues/6192\n\nthe old incorrect code would emit a fieldref token for Foo::f but it should be\na memberref for Foo<!0>::f"}, {"url": "https://api.github.com/repos/mono/mono/commits/6102b9538555180cea57b92c3969d324cedf2f7f", "message": "[tests] SRE check that a memberref token is emitted for a gtd\n\nRegression test for https://github.com/mono/mono/issues/6192"}, {"url": "https://api.github.com/repos/mono/mono/commits/e5246d94ab9907e66e76c1a5baa9240ea3fe52f5", "message": "Merge pull request #6331 from lambdageek/string_new_error_leak\n\nDon't leak glib error in mono_string_new_checked"}, {"url": "https://api.github.com/repos/mono/mono/commits/f783d2946299efba4e6748a6f7f45a9de64196ee", "message": "Merge pull request #6323 from lambdageek/class-h-minor-cleanups\n\nMark mono_class_vtable and mono_class_from_typeref external only."}, {"url": "https://api.github.com/repos/mono/mono/commits/649f509f04c7b0005e1cce7d77e0bdacb4977213", "message": "[unit-tests] A few unit tests for mono_string_new_checked"}, {"url": "https://api.github.com/repos/mono/mono/commits/7bdbadbbb4b09de4555413f106049d43699e24b2", "message": "[unit-tests] Fix Makefile.am when Mono is compiled with LLVM"}, {"url": "https://api.github.com/repos/mono/mono/commits/68baa2967dfc0770d17cdef1c7596f255cbf0552", "message": "[object] Don't leak glib error in mono_string_new_checked\n\nAfter we save the UTF8 to UTF16 conversion error to MonoError, free the GError."}, {"url": "https://api.github.com/repos/mono/mono/commits/8ba48b5a41ac48bf6fe9351406165d22c753722d", "message": "[object] mono_string_new should not assert on UTF conversion failures (#6333)\n\nRevert the embedding API behavior change introduced by dcdfb3c5005297b375c985ec5f0a4af99f8ad7cf\r\n\r\nmono_string_new will:\r\n * return NULL if the given byte sequence is not a valid UTF-8 sequence\r\n * assert if there is not enough memory to allocate a new MonoString.\r\n\r\nThis only changes the behavior of the API function.  The runtime will continue\r\nto use mono_string_new_checked which sets MonoError* for both sorts of\r\nfailures."}, {"url": "https://api.github.com/repos/mono/mono/commits/2eba6b82ec92c410aacfa8d04e74a566c4c199b9", "message": "[runtime] Rename mono_class_vtable_full to mono_class_vtable_checked\n\nNo functional change."}, {"url": "https://api.github.com/repos/mono/mono/commits/dbb76ea0c3e4b66a64a10bc5c1af9e8e1608c91c", "message": "[runtime] Mark mono_class_vtable external only.\n\n- Runtime should use mono_class_vtable_full.\n- Updated callers.\n- Added a MonoError argument to:\n  - mono_marshal_get_remoting_invoke\n  - mono_marshal_get_xappdomain_invoke\n  - mono_marshal_get_remoting_invoke_for_target\n  - mono_marshal_get_remoting_invoke_with_check"}, {"url": "https://api.github.com/repos/mono/mono/commits/f202cffa2bd71cbe97fb817b79d325c8ddc4c9dd", "message": "[runtime] Mark mono_class_from_typeref external only.\n\nRuntime should use mono_class_from_typeref_checked."}, {"url": "https://api.github.com/repos/mono/mono/commits/67c9ed311c0e214f9c58fdc96ad6264927dd6243", "message": "README.md: point at GitHub Issues"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6611", "title": "[DO NOT MERGE] Experiment - move MonoClass initialization to a separate file", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/103788587", "body": "@akoeplinger @marek-safar I don't understand what I'm doing.  But here's what I observe:\r\n\r\nthe fullaot preset seems to build the BCL libs with the strong name version of \"2.0.5.0\"  (this is coming from `mcs/build/common/Consts.cs.in`).\r\n\r\nIf I don't pass `--runtime=mobile` to the runtime, it consults the `framework_assemblies` table in appdomain.c and remaps requests for, for example, `System.Core 2.0.5.0` to `System.Core 4.0.0.0`.  So then my strong name check doesn't load the BCL assemblies from `mcs/class/lib/testing_aot_full` since they claim to be version 2.0.5.0.\r\n\r\nIf I pass `--runtime=mobile`, all those assemblies get mapped to 2.0.5.0 (ie the same as what gets built) and the tests run.\r\n\r\nIs `configure.ac` the right place to do this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/103788587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104017234", "body": "And bitcode?\r\n\r\nAnother question: so I'm doing this only for the presets.  Is there anything to change for the `--with_<profile>` flags?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/104017234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/124304191", "body": "because I forgot to delete the one here.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/124304191/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114206322", "body": "\"standard\" is the wrong word, I think.  What we're really matching is the [behavior of .NET Framework](https://msdn.microsoft.com/en-us/library/yx7xezcf(v=vs.110).aspx)", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114206322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "AdsRSherman": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6418", "title": "Can't run nuget.exe on windows using mono", "body": "## Steps to Reproduce\r\n\r\n1. Install mono 5.4.1 x64 on windows\r\n2. Cd to C:\\Program Files\\Mono\\lib\\mono\\nuget\r\n3. command: mono nuget.exe install docfx (or whatever)\r\n\r\n## Current Behavior\r\n\r\nCommand:\r\n> PS C:\\Program Files\\Mono\\lib\\mono\\nuget> mono nuget.exe install docfx\r\n\r\nResulting in:\r\n> Feeds used:\r\n>   https://api.nuget.org/v3/index.json\r\n>   C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n> Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n>   An error occurred while sending the request\r\n>   Error: TrustFailure (The authentication or decryption has failed.)\r\n>   The authentication or decryption has failed.\r\n>   Invalid certificate received from server. Error code: 0xffffffff800b0109\r\n\r\n## Expected Behavior\r\nPackage installed\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[x ] Windows\r\n\r\n**Version Used**:\r\n\r\n5.4.1 (Visual Studio built mono)\r\n\r\n### Stacktrace\r\n\r\nNA\r\n\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mellinoe": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6411", "title": "System.Numerics structs are incorrect sizes", "body": "Many of the structures in the System.Numerics namespace are being padded out to an incorrectly-large size in memory. Although this was likely done as a kind of performance optimization, it has widespread side effects that break many of the main use cases for the types. This behavior is also different from .NET Core and .NET Framework.\r\n\r\nThe types affected:\r\n\r\nType | Expected Size | Actual Size\r\n----- | -------------- | -----------\r\nVector2 | 8 | 16\r\nVector3 | 12 | 16\r\nPlane | 16 | 20\r\n\r\nPlane is probably larger because it contains a Vector3, but I've listed it anyways.\r\n\r\nThere are some test cases in corefx which ensure that these structures are the expected physical size in memory. [For example](https://github.com/dotnet/corefx/blob/master/src/System.Numerics.Vectors/tests/Vector3Tests.cs#L1146-L1154)\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumpera": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6405", "title": "Explicit stack overflow check when debugging", "body": "The JIT should emit explicit stack overflow checks when debugging to help users troubleshoot crashes.\r\n\r\nThe check needs to be efficient enough and not depend on VMM faults.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6371", "title": "WebAssembly: Disable blocking System tests", "body": "System includes a myriad of tests that block the main thread waiting for the threadpool to do some work. This won't work with WebAssembly due to the lack of threading.\r\n\r\nThose tests should be tagged with `[Category (\"MultiThreaded\")`", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6369", "title": "WebAssembly: Missing Timer implementation", "body": "Corlib is missing a timer implementation (System.Threads.Timer) that relies on setTimeout instead of a background thread.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6368", "title": "WebAssembly: Missing Timezone implementation", "body": "Corlib is missing a tz implementation. Our current profile tries a unix impl that probes the FS, it should be replaced by stubs or something using browser support.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/232af8c206d9253d6f284d8ca960c174f4d7b9c7", "message": "Add CI to WebAssembly. This is PR based on top of # Only the top 3 commits matter for this PR: (#6488)\n\n* [WASM] Fix System.Core issues and disable broken tests.\r\n\r\n* [wasm] Fix cookie computation heap overflow. Use a local to make it thread safe.\r\n\r\n* [wasm] Disable System tests that don't work under WASM. Change the wasm profile to disable BSD sockets.\r\n\r\n* [wasm] Address reviewer feedback.\r\n\r\n* [wasm] Disable test that requires multiple threads.\r\n\r\n* [wasm] Add package target to wasm.\r\n\r\n* [wasm] Modify the runner to exit(1) if the test suite fails.\r\n\r\n* [wasm] Add CI configuration for WebAssembly.\r\n\r\n* [wasm] Fix issues found over review."}, {"url": "https://api.github.com/repos/mono/mono/commits/146346977cea8aaed2de8ab6a84c2a58b30aea24", "message": "Revert \"Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\" (#6557)\n\nThis reverts commit 411791c4696424d1ec9ec0f5258b6a0a4cc1885f."}, {"url": "https://api.github.com/repos/mono/mono/commits/411791c4696424d1ec9ec0f5258b6a0a4cc1885f", "message": "Implement trivial loop detector in the front end and use it to drive inlining decisions. (#6478)\n\nThis cute hack allow us to cut the budget of perf irrelevant blocks[1] while massively boosting those that are perf relevant[2].\r\n\r\nIt has a ton of missing features, like it doesn't detect nested loops, it doesn't take hints from inlined methods and it doesn't compute EH info.\r\nBeyond that, inlining budget is all but horrible, so there's ton of room for improvement here.\r\n\r\nResults are promising.\r\n\r\nA marginal improvements in benchmarks like Roslyn (2% user) while as much as 30% in micro benchmarks where the now bigger methods are in loop bodies.\r\nCode size with Roslyn changed from 5433242 to 5501751, IE extra 68.5k, or 1.2% more.\r\n\r\n[1] those ending in throw or in a catch handler\r\n[2] Loops"}, {"url": "https://api.github.com/repos/mono/mono/commits/77ba59959f597398e222660eeaa6f44e85ce79b8", "message": "Merge pull request #6480 from kumpera/disable-cross-domain-autointern\n\n[runtime] Don't auto intern a string just because another domain has done the same."}, {"url": "https://api.github.com/repos/mono/mono/commits/bcc32da91482f3e12dafb11bd8d65b2187b38154", "message": "[runtime] Don't auto intern a string just because another domain has done the same.\n\nPreviously, we tried to keep the intern status of a string consistent across domains. Meaning\nthat if you interned \"FOO\" in domain 0, it would return true for String.IsInterned in domain 1.\n\nThis behavior exists in the CLR because the string table is shared between domain as string are\nwhat they call agile objects - those that can exit in multiple domains at the same time.\n\nMono appdomain isolation doesn't work that way and there's not visible advantage of keeping that property.\n\nThe reason for this change is to potentially reduce the amount of interned strings and, more importantly,\nreduce the amount of domain lookups, which are quite expensive and unsafe.\n\nThis should speed up interning queries."}, {"url": "https://api.github.com/repos/mono/mono/commits/87315d19c6bdbb76f916b0f5c0df5043e717f579", "message": "Merge pull request #6372 from kumpera/wasm-p3\n\n[wasm] Improve docs on how to build/test WebAssembly. Add System and System.Core test suite. Improve dep tracking for bcl test suites."}, {"url": "https://api.github.com/repos/mono/mono/commits/f7f280c7398534a1d5359ff50a1b3392c6cbd2ea", "message": "Merge pull request #6329 from lewurm/unaligned-ptrs-in-valuetype-equals\n\n[valuetypes] use memcmp in default implementation of Equals"}, {"url": "https://api.github.com/repos/mono/mono/commits/4b0b545236419a13a80ac33f442ebb6b1b51e477", "message": "[wasm] Improve docs on how to build/test WebAssembly. Add System and System.Core test suite. Improve dep tracking for bcl test suites."}, {"url": "https://api.github.com/repos/mono/mono/commits/f3e04b182a0988d0b019096474492ebc4824cf4a", "message": "[wasm] Fix runtime compilation. Fixes by Kenneth Pouncey"}, {"url": "https://api.github.com/repos/mono/mono/commits/68eb7bc3f866646c57d6d030d7f9e263532c823d", "message": "[wasm] Update corlib testsuite to disable multi-threaded tests."}, {"url": "https://api.github.com/repos/mono/mono/commits/9eecae812c256b7ea4cded763b2712d415a2cf16", "message": "[wasm] Run finalizers from a background task."}, {"url": "https://api.github.com/repos/mono/mono/commits/f08f228fcfaa80218e5f0c998cbdf6964fea769a", "message": "[wasm] Add comment to generated file that is was... generated."}, {"url": "https://api.github.com/repos/mono/mono/commits/4ad5fc61c6a9c80acfea57939641fd8d9c7327da", "message": "[corlib] Mark tests that requires multiple threads with the \"MultiThreaded\" category."}, {"url": "https://api.github.com/repos/mono/mono/commits/7ac259dc673b66a89c209d5609ed498df4a6b1dc", "message": "[wasm] Implement a wasm specific threadpool worker."}, {"url": "https://api.github.com/repos/mono/mono/commits/d5ebaad99dfe2b3bed1fbf7b30ecb0ba9c3252ed", "message": "[wasm] Move runtime background pumping to utils and make it work with multiple subsystems."}, {"url": "https://api.github.com/repos/mono/mono/commits/198a7c648273fb85ed9ee8e73a8d5e2d9d7cc3ae", "message": "[wasm] Pass the name of the test suite to the test driver. Disable running tests that fail under the interpreter."}, {"url": "https://api.github.com/repos/mono/mono/commits/1b1ba678b7f2592fdf350f5c8b6068f0fc850eb9", "message": "[wasm] Disable mini test that fails due to the interpreter"}, {"url": "https://api.github.com/repos/mono/mono/commits/e5fa0b75b40251ba5427b03f0fdefb5efdd6035a", "message": "Merge pull request #6234 from vargaz/llvm-weak-fields\n\n[aot] Fix aot+llvm after the weak field changes."}, {"url": "https://api.github.com/repos/mono/mono/commits/aeceaa7e1e300b27e6c22adc6be4643a5d2a2692", "message": "Merge pull request #6203 from luhenry/fix-6169\n\n[threads] Fix leak of gchandle to MonoInternalThread"}, {"url": "https://api.github.com/repos/mono/mono/commits/b683e1076ab0c42dbb0effe12c0f199976e083db", "message": "[runtime] Thread MonoError through mono_class_get_overrides_full. (#6069)\n\n* [runtime] Thread MonoError through mono_class_get_overrides_full.\r\n\r\n* [runtime] Use goto_if_nok"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6123", "title": "Simplify MonoError and managed Exception creation", "body": "MonoError is simplified for MME by having the error message eagerly created, which simplifies things A LOT.\nManaged Exception creation is simplified by only setting Message, as it's done by other runtimes.\n\nThe idea of this PR is gather feedback on this approach and the way it was implemenented. If it's good, I'll do for other errors.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6018", "title": "Run the ProcessExit events in the threadpool and enforce a 3 seconds limit. Fixes #10087", "body": null, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5694", "title": "[DONT MERGE/Review] PR with a WASM backend.", "body": "This PR exists so I can get some testing of my changes.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5177", "title": "[w32handle] Change refcounting to explicitly track handle state and version.", "body": "This is a big debug helper change. It was used to find the GetProccess (int) bug.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/2280", "title": "[DONT MERGE][build] Disable make builtin rules for the runtime build. This speeds up a no-changes build by ~25%.", "body": "This is a RFC PR over disabling implicit make rules. It does speed up the no-change build a bit.\n\nFor the runtime it's not a lot, but once we factor in the BCL, the difference will be more significant.\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/1149418", "body": "Looks good, please rebase on top of current head and I'll apply it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1149418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8277526", "body": "I bet --enable-static still fails on master. Someone should take over this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8277526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8433890", "body": "Thanks for the patch! \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8433890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/855499", "body": "Pushed to master.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/855499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/855516", "body": "Pushed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/855516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/67879021", "body": "Hey @vargaz, can you merge your rebase on top of master?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/67879021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/1148554", "body": "You need to add the test to WindowsBase_test.dll.sources otherwise it won't run.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1148554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/1148540", "body": "Change makes sense, I wish it had a test attached. Please consider adding one next time.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1148540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/1366688", "body": "Please close the bugzilla entry.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1366688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/127820036", "body": "Closing this one now that thin locks are in.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/127820036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/40279715", "body": "No rush, we just want to ensure you're this planning to work on this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/40279715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2844888", "body": "Hi Pablo.\n\nLoved your patch. But there there are 3 issues blocking it from been merged.\n\n1)It messes up with line endings. You should set autoclrf to true otherwise someone will end up doing a line ending only commit.\n2)It should be enabled by default. It's too awesome to be left disabled.\n3)Lastly, it causes this test case (http://bugzilla.xamarin.com/show_bug.cgi?id=1531) to raise tons of IndexOutOfRangeException from I18N.CJK.CP936.GetBytes.\n\ndiff --git a/mcs/class/I18N/CJK/Makefile b/mcs/class/I18N/CJK/Makefile\nindex a91d595..9a22145 100644\n--- a/mcs/class/I18N/CJK/Makefile\n+++ b/mcs/class/I18N/CJK/Makefile\n@@ -4,7 +4,7 @@ include ../../../build/rules.make\n\n LIBRARY = I18N.CJK.dll\n LIBRARY_USE_INTERMEDIATE_FILE = yes\n-LOCAL_MCS_FLAGS = /unsafe /resource:big5.table /resource:gb2312.table /resource:jis.table /resource:ks.table /resource:gb18030.table /r:$(corlib) /r:I18N.dll\n+LOCAL_MCS_FLAGS = /unsafe /resource:big5.table /resource:gb2312.table /resource:jis.table /resource:ks.table /resource:gb18030.table /r:$(corlib) /r:I18N.dll /define:DISABLE_UNSAFE\n\n EXTRA_DISTFILES = big5.table jis.table gb2312.table ks.table gb18030.table \\\n        README.gb18030 \\\ndiff --git a/mcs/class/I18N/Common/Makefile b/mcs/class/I18N/Common/Makefile\nindex 2a42d86..cfdd37f 100644\n--- a/mcs/class/I18N/Common/Makefile\n+++ b/mcs/class/I18N/Common/Makefile\n@@ -4,7 +4,7 @@ include ../../../build/rules.make\n\n LIBRARY = I18N.dll\n LIBRARY_USE_INTERMEDIATE_FILE = yes\n-LOCAL_MCS_FLAGS = /r:$(corlib) /unsafe\n+LOCAL_MCS_FLAGS = /r:$(corlib) /unsafe /define:DISABLE_UNSAFE\n NO_TEST = yes\n\n include ../../../build/library.make\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2844888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2849494", "body": "About (2) I mean the safe version should be enabled by default.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2849494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2849649", "body": "Do as it fits you best. I'm here to help, not make it harder for you. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2849649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2916560", "body": "Hi Pablo,\n\nI'm on vacations travelling only with a tablet, so reviewing your code will\nbe tricky. I'll be back next week and your patch will be reviewed then.\n\nThanks a lot for taking the time to work on this.\n\nOn Monday, November 28, 2011, Pablo Ruiz Garca <\nreply@reply.github.com>\nwrote:\n\n> Hi Rodrigo,\n> \n> Finnally this two commits would finish my current work on the encoding\n> issues.\n> \n> As ussual, please let me know if there's anything missing. And thanks for\n> your help on the whole process. ;)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/mono/mono/pull/189#issuecomment-2910831\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2916560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/3290207", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/3290207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2837944", "body": "This is not the way to fix it, but thanks for pointing out the issue.\nI'm working on a proper fix.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2837944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2839074", "body": "Hi Sectoid,\n\nAfter looking into it a bit more. I decided to post a patch just like yours. Together with a regression test.\n\nThe way to properly fix it is to use the remembered set information to partially scan old gen arrays instead of checking them all. This would speed up in the case of large arrays not filled with young objects.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2839074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2839388", "body": "The GC has this thing called remembered sets, which records all stores to reference slots that happened by managed code.\nWe use this information to avoid scanning the whole heap when performing a nursery collection.\nThe same should be used with ephemerons.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2839388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/2839562", "body": "Sure, just make a pull request.\nFeel free to email me directly for questions on the subject.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/2839562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/3301109", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/3301109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/4522275", "body": "Hi Gleb,\n\nThanks for taking the time to work on this issue. Your patch have two minor issues and I'll merge it once they have been addressed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4522275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/5396239", "body": "Patch looks good to me. Should be merged in.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/5396239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/4789852", "body": "This is a huge merge request, WOW. Great work, just a few small details to be worked out.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4789852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/7887905", "body": "None of the asked changed where made and since no patch has been contributed under the MIT/X11 license, we can't pull them in.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/7887905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/5273782", "body": "This change look bogus.\n\nIf the cancelation token was signaled should that method return false or raise an exception? Because the check right after the WaitAny suggests that raising an exception is the expected behavior.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/5273782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/5285435", "body": "Thanks for the patch with the tests.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/5285435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/5934115", "body": "This patch unfortunately can't be merged as it introduces a big performance regression for the majority of those targets that don't care about COM.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/5934115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/5944011", "body": "The cases that will get slower are those that exploit some more obscure Binder features such as binding through parameter names. I'm ok with those get slower, as it's already the case anyway.\n\nSo, yes, the performance impact is probably minimal.\n\nThe issues left are that this should not be enabled on MOBILE targets (this I'll fix) and that it lacks tests.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/5944011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/5987092", "body": "About tests, if adding them to the corlib test suite is an issue, you can put it on mono/mono/tests and use libtest.c\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/5987092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/6527792", "body": "This patch on its current form is not acceptable. A version of g_utf8_to_utf16 that allows embedded null should be used instead of this realloc fest.\n\nThis can be used to cause DOS by providing specially crafter strings with lots of embedded zeros.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/6527792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/6528302", "body": "Mono no longer uses glib, it has its own implementations of the glib API. So it's perfectly possible to add such a patch.\n\nUsing power of 2 increases in buffer sizes solve the asymptotic issue.\n\nA variant of g_utf8_to_utf16 should be introduced mostly because I believe that we'll probably have to fix this very same issue on other places.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/6528302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8226683", "body": "Sure, once the 2 issues I highlighted above are addressed, it can be merged.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8226683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/9318354", "body": "I found a couple of bugs in your code and test suite. I fixed them and the result has been pushed to master.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/9318354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/6554940", "body": "Please repost the patch as MIT/X11. Just add a note on the commit message \"Released under the MIT/X11 License.\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/6554940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/6554951", "body": "The patch will go in once this detail is fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/6554951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/6697256", "body": "Hi James, can you rebase this pull request on top of master so it can be automatically merged?\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/6697256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/109964517", "body": "The code in gmisc sounds wrong. This bug exists since the beginning of times and it was\nnot a deliberate change.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/109964517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/109964560", "body": "I believe the better fix is what we have in #1861 though\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/109964560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/6906097", "body": "If the whole problem is the method visibility in where you call Mark, then this whole thing can be ignored as the current tasklet code mark the whole frame as been the first to be copied.\n\nYou can provide the exact same functionality with pure C# without loss of generality or performance.\n\nIf you have found a bug in the tasklet code, you should report or fix it instead of producing a set of code that has way too many issues before it's even mergeable. Code doesn't follow our coding convention, the extra code in libgc is not needed, no sgen support and lack of a decent test suite, just to begin with.\n\nWe would love a contribution of a standard implementation of cooperating threading on top of Mono.Tasklets.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/6906097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/7007868", "body": "Good points. Stacklets is very tricky to get right, specially WRT exception handling and GC stack scanning.\nI believe your code handle neither correctly, but this a minor point.\n\nBoth stacklets and thread-migratable Continuations would be a very nice things to have. If Tasklets had\nsupport for those two, it would be possible to have such a cooperative framework done in C#.\n\nI know I might be biased, but I rather have those features integrated in some shape to the existing code\nthan to have another runtime extension to maintain.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/7007868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/7069387", "body": "Patch looks good, please release it under the MIT/X11 license. This means changing the commit message to include \"I release this patch is under the MIT/X11 license.\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/7069387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/7071436", "body": "Pulled manually because github didn't want to auto merge it.\n\nThanks a lot for the patch.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/7071436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/7887933", "body": "Please file a pull request with proper line endings. Your patch rewrites the whole file, which makes it impossible to review your change.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/7887933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8127897", "body": "There's a reason why we don't support inflating pointers - it's not valid.\n\nPointers and function pointers are the two types that are not allowed to be generalized. The reason for that is because once can't have a pointer to a managed object but if you use generics, it's possible.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8127897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8131755", "body": "Ok, let's get this in.\nThe are only two other issues. \nFirst, we can't take runtime patches if they are not MIT/X11 licensed. You can do that by making sure the commit message mentions it \"This patch is released under the MIT/X11 license.\".\n\nSecond, we need tests for this feature to make sure it works as intended.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8131755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/9321428", "body": "I just merged back your branch manually. Github shitty PR system doesn't allow me to resolve the conflicts online.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/9321428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8276819", "body": "This sounds useful when tracing transitions, it can help us on MT, for example.\n\nVincent, can you change the man page to include this as well?\n\nThanks for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8276819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/8277343", "body": "Done, updated.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/8277343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/21311751", "body": "Probably fine.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/21311751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/9308252", "body": "I'm not sure that changing from EV_ONESHOT to EV_CLEAR have the same semantics.\nThe man page suggests that EV_CLEAR will keep the filter registered so calling multiple times will queue up in kernel land.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/9308252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/20095604", "body": "The kqueue backend for OSX has been dropped due to an infinite stream of bugs we believe are not fixable.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20095604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/11262796", "body": "Commit reverted as it was breaking existing tests. Please make a pull request that properly address those issues and do add tests for the fixed issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/11262796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14804635", "body": "The patch could have cleaned up things a bit instead of spreading things around. It didn't handle shutdown during debugger sessions, which I'll fix locally.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14804635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/10767772", "body": "Patch looks good. It must be under the MIT/X11 license for us to accept the contribution.\n\nThanks for looking into this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/10767772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/10768237", "body": "Hi Pablo, just state on the commit message. Adding a  \"This patch is under the MIT/X11 license\" to the last line of the commit message does it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/10768237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/10897995", "body": "Merged, sorry for the delay and thanks again for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/10897995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/12108285", "body": "Hi andres,\n\nYeah, we forgot to tag, just fixed that!\n\nSorry for missing this commit for the 3.0.3 cycle. Lets merge it now then.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/12108285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/11148594", "body": "We check for HAVE_SYS_INOTIFY_H\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/11148594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/11295829", "body": "We don't want the linux build to be linked against inotify. Please move the lib check to happen under freebsd only, this can be merged.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/11295829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/11296048", "body": "Thanks for the prompt work on this issue. Everything is working now.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/11296048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/11381596", "body": "So inotify can work on FreeBSD? Note that this doesn't interfere with linux/osx/windows & derivatives.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/11381596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14253427", "body": "Thanks for the patch and review guys!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14253427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/12832861", "body": "Hi Elijah, thanks for the contribution. This patchset is massive and we need to figure out someone to handle it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/12832861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/15847048", "body": "Zoltan, could you give Elijah some guidance on what set of patches (IOW, how split them) would make your review work possible?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/15847048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/96075804", "body": "This PR won't be merged given how massive it is. Please submit smaller ones with specific changes so they can be reviewed and merged in pieces.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/96075804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13092024", "body": "I have no problems in general with what this path wants to accomplish. The only problem is that it's doing the wrong thing.\n\nA quick look at the MS behavior shows that new assemblies are appended, not just SRE ones.\n\nThis patch would produce a fragile result that will not work under all cases.\n\nAnyways, will merge it and fix the rest myself.\n\nThanks for the patch!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13092024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13096464", "body": "Sorry, yes, the patch was incomplete, not wrong.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13096464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13300028", "body": "Thanks for the path. You might need to do a similar thing on mono/metadata/threads.c as we have the stack size  code there duplicated. Sorry for that. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13300028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13300092", "body": "Hey, I forgot one thing, can you release your changes under the MIT/X11 or otherwise I'll have to revert it. Sorry for the confusion.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13300092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13615470", "body": "Only the public C headers need to work with C++, no point on trying to fix the internal ones. Internal APIs are volatile and change without notice.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13615470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13975182", "body": "This patch introduces too many issues, it cannot be merged. It should be reworked to simply further wire MonoError around. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13975182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/13831275", "body": "Can you release this patch under MIT/X11 before we consider merging it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/13831275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14386248", "body": "Could you release you patch under the MIT/X11 license? To do so, either state it here, on this pull request, or make a new pull request with such a comment on the commit message.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14386248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14389692", "body": "In such a case, we just need @schani  to review & merge it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14389692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14389807", "body": "Thanks for the patch!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14389807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14391625", "body": "One thing, not sure when another 2.10 release will happen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14391625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/14394263", "body": "Please fix your pull request to not include hundreds of commits from others. It's impossible to know what changes are you proposing.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/14394263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/21315246", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/21315246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/15394407", "body": "The new await must use a properly configured awaiter.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/15394407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/18009175", "body": "This creates too much burden at startup for mobile apps. Not really an option. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/18009175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/18909178", "body": "Changes to the C runtime must be released under the MIT/X11 license. Could you please state that on the commit messages so we can merge it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/18909178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/19519326", "body": "Yes, please state on the commit messages their license.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/19519326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/20022200", "body": "Thanks for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20022200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/33427819", "body": "Closing as I fixed it in a different way.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/33427819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/20053482", "body": "Merged, thanks for the patch.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20053482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/26609570", "body": "Are we ok with the licensing of this code?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/26609570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/26609599", "body": "The patch is bringing in code from Joyent and node.js\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/26609599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/20710139", "body": "Applied your fix but to the right mono variable.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20710139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/20702383", "body": "Thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20702383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/20825166", "body": "Hi Yuriy,\n\nThanks for the pull request, here are some issues from a quick look:\n\n-The patch must be released under the MIT/X11 license. You can do it by including a note on the commit message.\n-Your great explanation of the issue is missing from the commit message. It's better to have it there for easy future reference.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20825166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/21756930", "body": "Shouldn't we use something like this:\n\nBINDIR=$(dirname $0)\nexec $BINDIR/mcs ........\n\nThis makes the scripts do exactly what we want, which is to run the sibling mcs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/21756930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/22355415", "body": "This is hiding the actual bug and not fixing it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/22355415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/22001878", "body": "We cannot take pull requests to mono that are not from the rights holder of the original patches.\n\nI suppose you don't have rights to those Unity patches to distribute them under MIT / X11\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/22001878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/22016557", "body": "@migueldeicaza is the above ok? We can use those commits directly to get the metadata right\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/22016557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/22423237", "body": "@vargaz  Hey Zoltan, could you test/merge this?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/22423237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/22016726", "body": "We're not going to expose a global variable in the API. This is a no go.\n\nA mono_config_set_server_mode function should be added instead.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/22016726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/22138700", "body": "I guess we're down to 3 modes: mobile, desktop, server.\n\nIt's fine if we have 2 modes leading to the same execution decision.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/22138700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587935", "body": "Hi Martin,\n\nCould you give examples of where the current behavior fail so we can verify it?\nAnd can you release those changes under the MIT/X11 license? To do so, just change the commit message to include it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587628", "body": "Can this change be tested with unit tests?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587462", "body": "Thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24590271", "body": "@atsushieno  can you review this one?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24590271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587315", "body": "Please provide unit tests for this change.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24592585", "body": "@marek-safar can you review this one?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24592585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24626029", "body": "I expect tests that show what this commit fixes\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24626029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587238", "body": "Please provide unit tests for this change.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/24587238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28155479", "body": "@dsyme This fix will be part of mono 3.2.5, which should be released after thanksgiving.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28155479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/26609179", "body": "This will mess up with thread registration, did you test this with a regular mono build on windows?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/26609179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/26616996", "body": "I have nothing particularly against this change in particular. I just need to ensure it won't break boehm on windows outside of wine.\n\nThe code looks reasonable and it doesn't look like anything bad should happen in the runtime itself. So let's merge and see how it goes in the windows bots.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/26616996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/26334070", "body": "Please provide tests for this change.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/26334070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27515134", "body": "Reverted. Could the author explain the issue pointed out above?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27515134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28062687", "body": "Alistar, can you release your changed under the MIT/X11 license? Otherwise we won't be able to keep them merged in.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28062687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28289748", "body": "Looks good, can you state in the commit message that you release the changes under the MIT/X11 license?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28289748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/29169057", "body": "Why does the second commit not reuse the ifdef block of the first one?\n\nCould you provide a test case to be included in the class libraries of this behavior?\n\nChanges to the mono runtime must be under the terms of the MIT license to be included. To do so state \"This commit in under the MIT license\" in the commit message.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/29169057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/29251470", "body": "I assume this will change the behavior of SetSocketOption from throwing a not implemented error to throwing an error due to invalid socket state.\n\nThis is a fine test, it will ensure it doesn't crash the runtime when used.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/29251470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/29384949", "body": "Looks good, thanks for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/29384949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30003373", "body": "Hi Bart,\n\nWe need a more time to properly review it,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30003373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30011623", "body": "@marek-safar can you review this one?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30011623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/29907922", "body": "Your pull request include a merge commit, please rebase your changes and only submit that.\n\nYou must provide test cases for your changes.\n\nb31acd doesn't follow our code formating styling.\n\nPlease address those issues so we can merge it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/29907922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31456156", "body": "This patch doesn't handle the case of a default value of null. Please fix the implementation and add a test case for this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31456156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31490940", "body": "@akoeplinger  is on spot. Fix that and it's ready to merge.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31490940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31663255", "body": "We're here for the long run. Code that enters our code base must survive the test of time and last for many many years. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31663255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31658561", "body": "This is not the right way to fix this. mono_class_is_assignable_from_slow sufix means exactly that, it's very slow and meant to be used under special cases.\n\nThe right fix is to improve mono_class_is_assignable_from to not require full initialization, which is a little bit trickier.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31658561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31659571", "body": "This single commit contains no tests and have a lot of mixed changes in together with no decent commit message justifying the changes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31659571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32617481", "body": "This is a @marek-safar issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32617481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31959649", "body": "There are multiple functions in appdomain.c that deals with shadow-copying, why only this one needs fixing?\nWe need a test case here to ensure this works.\n\nChanges to the C codebase must be release under the MIT license, do do so put \"These changes are under the MIT license\" in the commit message.\n\nWhy missing file must be special cased and just not all CopyFile failures?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31959649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32115519", "body": "Patch looks great, thanks for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32115519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59615655", "body": "@grendello what do you think? can we merge this one?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59615655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32964165", "body": "We can't merge Vincent Povirk patches as they don't have proper licensing information. Where did the come from?\n\nThe strtoull and sgen-qsort patches can go in.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32964165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/33033723", "body": "Hi Vincent, thanks for clearing this out. I'm ok on all changes but the premake built system. This has to be discussed with the whole team as everyone will be responsible to maintain it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/33033723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41430895", "body": "@grendello Please review & merge the above changes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41430895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/35400573", "body": "The version for ConcurrentDictionary must be implemented in terms of TryGetValue as the value can go away between the calls to Contains and indexer.\n\nTryGetValue is also faster, given it doesn't perform two lookups.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/35400573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/35421974", "body": "A lot of those fixes are on master. Which one is missing?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/35421974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/40279802", "body": "The BCL should remain platform independent, compile time switches should be replaced by runtime checks.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/40279802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36275410", "body": "Hi Eberhard,\n\nWhy do you need those commits cherry picked in the 3.2.8 branch?\nMono does frequent releases from master which means there's no clear value for the project\nin backporting fixes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36275410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36807344", "body": "This patch replaces the core caching data structure from a heap to a sorted array.\nInsert/remove went from O(lgN) to O(N) which is a huge performance degradation.\n\nWe can't have such big performance degradation taking place. You'll need to find another way to fix it without causing this problem.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36807344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36812810", "body": "Did you test with expiration times that would force large parts of the array to be shifted?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36812810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36888134", "body": "The current implementation of the cache keep items in heap order. That's why it looks so strange.\nhttp://en.wikipedia.org/wiki/Heap_(data_structure)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36888134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/37301978", "body": "You change looks good.\n Do you mind rebasing your commit?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/37301978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/37197540", "body": "This change is really bad. We should not workaround broken software this way. It does introduces problems for working code and hides actual crashers that we care for.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/37197540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/61116129", "body": "Hey Guys,\n\nThis will break all alternative COM implementations since OLE is not available on unix.\n\nI'm not sure this is something we really want to merge this way.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/61116129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/44531554", "body": "How about diverging class subtrees?\n\nSay you have:\n\nclass Foo  {}\nclass Baz : Foo {}\nclass Bar : Foo {}\nclass SubBar : Bar {}\n\nYou ask for Foo and run into instances of Baz and SubBar. What's the expected behavior in this case?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/44531554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/40279879", "body": "Looks good to me. Before we can merge you need to release this change under the MIT license.\n\nTo do so, put the following in the commit message \"This change in released under the MIT license.\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/40279879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/40280034", "body": "Looks harmless, but will probably help with false pinning.\n\nBrandon, could you release your change under the MIT license?\n\nTo do so put in the commit message \"I release this change under the MIT license\".\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/40280034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/40361863", "body": "@BrandonLWhite And object is considered pinned when the GC cannot move it during a collection.\nGood pinning is caused by two things: the fixed statement and a pinning GC handle.\n\nSgen, by default, does conservative stack scanning, pinning all possible pointers it finds on the stack.\n\nFinally, false pinning happens when either an integer on stack looks like a valid object pointer or when sgen finds a dead pointer on stack (mostly due to compiler optimizations).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/40361863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/40363506", "body": "@BrandonLWhite Thanks for the contribution. If you want to further discuss mono's GC drop me an email. it's my user name at gmail.com\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/40363506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41144392", "body": "This commit is wrong, we should not be disabling tests, we should be fixing them.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41144392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41157870", "body": "We should accept PR to fix regressions of bugs about them. Disabling tests is a step backward.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41157870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41163110", "body": "This is a regression, the assert is on mono_hazard_pointer_save_for_signal_handler which was introduced  in March 14, 2014. One can't claim always for code that is barely one month old.\n\nAn unnoticed bug should be first investigated before been disabled. I have zero evidence of such a thing.\n\nI agree that the current set of disabled tests lack proper documentation and bugs on why. It would be great to have such a thing. Too bad we did not do it in the past.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41163110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41172969", "body": "Why do you need to make install?\nThe need for sudo intrigues me as you can just use a prefix that is no /usr/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41172969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41179594", "body": "Sounds reasonable\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41179594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41909641", "body": "Looks good to me but this is the kind of tricky change I'd like to get on extra set of eyes.\n @illupus  @vargaz ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41909641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41927748", "body": "Ok, now we need those 2 changes under the MIT license so we can merge them.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41927748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/41939004", "body": "Have the message on one of the commits is enough.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/41939004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/42303203", "body": "@baulig please review this one.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/42303203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/43708673", "body": "Hi Seth,\n\nCan you release your changes under the MIT license?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/43708673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/43708651", "body": "Hi Seth, can you release your changes are under the MIT license?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/43708651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/44293288", "body": "Hey @spouliot, can you review this one?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/44293288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/51083116", "body": "It failed on Jenkins for unrelated reasons. Let's merged it!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/51083116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47660644", "body": "Patch can go it.\n\nBut since this is a packaging change, @alexischr must be in the loop.\nAlexis, does this change negatively affect our OSX packaging? If it's ok, could you ensure\nthat things will remain working after it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47660644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/44426893", "body": "This is a test that can be done using a MemoryStream subclass instead of this unreliable network setup.\n\nAs it, it doesn't really test what you fixed, but simply that ReadAsync works.\n\nPlease change your test.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/44426893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/44452806", "body": "Good point Jeff, this is a good opportunity to make such cleanup.\n\nThe reason why looping is a bad idea is because a second Read call will only happen if the first one returns less bytes than requested.\n\nAny sane kernel will only return less bytes than requested if that's all that's available.\n\nSo the odds of a second read call reading any further data without blocking is minimal, so we should simply avoid it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/44452806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/48193346", "body": "Path looks good. Do you think you could you add a test to it?\n\nBefore we merge the runtime change must be released under the MIT license.\nTo do so include this text in the commit message \"I release this under MIT license.\".\n\nThanks for the contribution and sorry for the review delay.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/48193346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/48347827", "body": "Good point knocte.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/48347827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/54762032", "body": "@akoeplinger yes, it's fine to have that in the testing code.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/54762032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/45540571", "body": "When doing the ARM point,  the cache filling code will need store_store memory barriers and the delegate creatio code will need load_load barriers to ensure we don't load broken things.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/45540571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/45423639", "body": "@alexrp  The instructions used during the call sequence are not part of the X86 ABI, what matters if the memory layout.\n\nVlad is a GSoC student and this change was reviewed my me and Zoltan.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/45423639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/46577609", "body": "Does mono_strtod works on arm? It was disabled 9 years ago because it miscompiled.\n\nIf it works fine now we should enable to all ARM targets and not cargo cult that check.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/46577609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/46595217", "body": "@alexrp can you take a look if mono_strtod work on ARM? \nThe commit that disabled it is from 2005, not much from that time still remains today.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/46595217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47567971", "body": "3.6.0 is only taking important bug related to the officially supported platforms at this stage.\nSorry if we can't take your patch this time, but there will be another master release of mono later the summer.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47567971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/48348738", "body": "The addition looks good. But it should go mono/metadata/domain.c and mono/metadata/appdomain.h.\n\nBesides that changes to the runtime must be under the MIT license. To do so add this line to your commit message. \"This change is released under the MIT license.\".\n\nOnce those 2 points are addressed it should go in.\n\nThanks for taking the time for this contribution.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/48348738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/46969140", "body": "Wow, this is a huge changeset, thanks for the effort.\n\nIt will take quite some time to review it, through.\n\nHow about we pick those that are ok to go in and move them to separate pull requests so the set of changes is reduced?\n\nSaid that, changes to the mono runtime must be under the MIT license. You need to state them on the commit message. Otherwise we won't be able to merge them.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/46969140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/46983007", "body": "On the commits themselves:\n\nOk to commit:\n\n007302f9b3e32f50f54ff0837ad2d279820558e8\nb91e5bb9f6cdad0793788f0edba73215fcc8b123\n11dfcab8717eed3e7fefdbad664271f9b075fc03\nda1b9ec2fd0583ebd1da8e0ba4606f9d66af5d2c\n2fbec884720330a87b54ac9c5f75249d16887f69\n5de398f1a131bbbce8509ea773760af14d670b41\nbec2042f8f78f4528026b1b124e4762034311419\ncd86bfaf1c1d6e984e8e96fe86b1cfeac3546aef\n41ddb9801731a9c2d85cfd6979f261bdcef5e97a\n28d97ea7a95871f7fd23932fcbbce66abb4c10e7\n6bd464fd74d369d961c3d31251cf870fde3c152e - I'm ok with the workaround there\n0c71a29084f9aea0b53f097a2402c29b9d49cbd7\n16a6c28fb8741d2e1c2299e075b680c6a64860bf\n\nIssues:\n\n1ccd122dbd93c8c2da45664502f11179ec23066b - why are we adding map.h and mph.h?\n3aa1cd5dcc9575b137e4b1b418b9a18bf251ae5d - this should use the standard types such as int16_t.\nf8aa61994d2eed7be6d7e98b75fac2a9f00c177f - we should investigate what does this use to enable to make sure it doesn't break existing functionality. This was introduced in 2010, so it's recent enough that must be checked on why.\nf42468eefdbef6f0275de39a472b40c52f62415c - the check for SIGPROF here is redundant and on serves to kill a warning. Is that the only reason?\naa6cb378f19a1f4d014249507ff11adb8c1b9e47 - it should use ssize_t and %zd. Same effect and much more portable.\nfd64ce419fbcf3281a649caa41d063c47e0f61af - must be reviewed by Zoltan.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/46983007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47236444", "body": "Hi, I'm cherry picking those that everyone is ok with.\n\nHere's the list of those I didn't:\n\n1)Avoid non-standard BSD types in mono/io-layer/wapi_glob.c\n2)Print pid_t's portably in mono/metadata/attach.c\n3)define MONO_ARCH_NOMAP32BIT if !defined(MAP_32BIT)\n\nMy suggestions:\nUse stdint.h or glib types for (1).\nFor (2) it might make sense to try using the standards path and see what breaks.\nChange (3)  must be reviewed by @vargaz before we merge.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47236444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47237579", "body": "You know, I pushed (1) and (2). They are good changes and worth trying it out.\n\nWe'll hold on (3) though.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47237579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47104745", "body": "We now need a similar fix for the other 3 major archs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47104745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47165996", "body": "Sure, arm64 should be easy though.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47165996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/47173656", "body": "approved\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/47173656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/48193533", "body": "We'll not be able to include it for this release cycle, sorry. Mono 3.6.1 will be branched by the end of the month. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/48193533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/48359800", "body": "I don't like this change, it complicates the existing very complicated delegate tramp code and increase the size of that struct.\n\nSince the cases we can match in handle_delegate_ctor have all information statically available we should exploit that and have smaller structs and a separate tramp code path.\n\nAs suggested before, we should introduce a new, simplified trampoline that supports caching and progressively introduce more cases to it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/48359800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59615662", "body": "@grendello what do you think? can we merge this one?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59615662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59426331", "body": "has this been merged?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59426331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/75824206", "body": "There's a competing patch here: https://bugzilla.xamarin.com/show_bug.cgi?id=8207\n\nThey use different ioctl values. I'm not familiar with serial comms so I wonder which one is the appropriate one.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/75824206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/56044301", "body": "build\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/56044301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/58193931", "body": "Lets give up on jenkins for this one.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/58193931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/51821689", "body": "Hey @baulig, please review this one.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/51821689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/52536711", "body": "Once John verify what mono needs to do to trigger the right debuggerd behavior, we'll figure out how to incorporate it into mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/52536711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/52413084", "body": "This patch adds dead code, we should not be doing it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/52413084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/52633794", "body": "build\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/52633794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59426453", "body": "@esdrubal please review this PR.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59426453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/54919517", "body": "@vargaz what do you think?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/54919517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/54919543", "body": "build\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/54919543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115935", "body": "Why are you reducing it? The changelog lacks proper justification.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123130", "body": "I believe we should replace all bblock shenanigans with just emitting an iconst and let the dce pass do its job\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/155748", "body": "We can fix that by adding support for 2 things:\n\n-Accessing non-local TLS on linux. Geoff already added thins for Mach/OSX. This is the hard part.\n-Register a TLS key as a root. This is pretty easy and scanning it is also trivial.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/155748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/160525", "body": "Gonzalo, let's start getting rid of this unsafe coding practice of checking the class name.\n\nis_socket = (is_io_task && !strcmp (((MonoObject *) data)->vtable->klass->name, \"SocketAsyncResult\"));\n\nThis is problematic because an user can queue his/her \"public SocketAsyncResult : IAsyncResult { ... evil inside ... }\" and\nbad stuff will happen.\n\nThe correct approach, which is faster too, BTW, is to use the idiom that's starting to be used in reflection.c (lots of code still to be converted). Look\nfor is_sre_array, for an example.\n\nWe should move check_corlib_type_cached and is_corlib_type to a header so everyone can use them.\n\nChecking for a type with strings make spouliot lose some sleep.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/160525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/160905", "body": "Awesome :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/160905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/177781", "body": "Marek already noted it and I fixed on 8a828011d0e09500093f9b604ad07e620da67d39.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/177781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/178553", "body": "We check if *lockTaken is false in the managed side.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/178553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/574280", "body": "Well, the issue is that there is no such thing as read-only file on unix systems.\nSo what we had was that GetFileAttributes () returns that a file is read only even if it's writeable thru o+w or g+w, which would break under Android's sandboxing, for example.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/574280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/662665", "body": "Store barriers are usually needed before the store.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/662665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/879016", "body": "Yeah, this looks wrong.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/879016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488274", "body": "Big arrays are always enabled on mono. We need to kill that configure flag.\n\nAnyways, this test is of very low value, we have similar ones in mono/tests for large array sizes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69488274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65990116", "body": "How about a MONO_EXTRA_CONFIGURE_FLAGS to make this not a one time off?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65990116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65990198", "body": "We should use AC_DEFINE for this define as it doesn't interfere with boehm.\n\nAdditionally, it should be namespaced.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/65990198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105103091", "body": "This is wrong, it could iOS or tvOS", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105103091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105103210", "body": "this is wrong, it could be iOS, tvOS or watchOS.\r\n\r\nThe distinction matters as the runtime behaves differently among those 3.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105103210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105103534", "body": "What about Android?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/105103534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/106289134", "body": "This is the wrong approach.\r\n\r\nconfigure should compute the suffix and both appdomain.c and Environment.cs  should use it.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/106289134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112245216", "body": "Why is this being removed? What's the justification for that?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112245216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113490542", "body": "How did you determine it was dead?\r\nAFAICT, we still ship it: https://github.com/xamarin/xamarin-macios/blob/0a47a8ce0c6d00e7d36e3315289c99de01f417b2/builds/Makefile#L1263", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113490542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113958866", "body": "By moving to a header the idea is to make this conditional to the host being iOS?\r\niOS functions fine without it as it's just an optimization.\r\nHow does it get better without the configure flag?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/113958866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582114", "body": "This is wrong.\r\narm darwin can be iOS, tvOS or watchOS.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582206", "body": "This is wrong.\r\n\r\narm64 darwin can be iOS or tvOS.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582421", "body": "This is wrong, it will match Android.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582487", "body": "This is wrong, it will match OSX and simulators.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582559", "body": "This is wrong, it will match Android.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582611", "body": "This is wrong, it will match the simulators.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582648", "body": "This is wrong, it will match Android.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582682", "body": "This is wrong, it will match Android.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/118582682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/119445028", "body": "HAVE_ONLINE_VES is a weird name at first, but it makes perfect sense.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/119445028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/122507131", "body": "It doesn't evaluate as we can see from the build breakage of all non OSX targets:\r\n```\r\n\r\nconfigure: error: The autoconf-assigned value of $cross_compiling is currently \"maybe\", but Mono only understands the values \"yes\" and \"no\". Try adding an explicit --build option, such as \"./configure --build='./config.guess'\", instead of leaving configure to autodetect.\r\n/media/ssd/jenkins/workspace/test-mono-pull-request-arm64/scripts/ci/babysitter: Test suite terminated with code 1, and suite cannot report test case data. Halting.\r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/122507131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/134565485", "body": "We'll probably have to change this later to be `--enable-host-wasm`  `--enable-target-wasm` to support AOT.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/134565485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/134567122", "body": "Anyhow, documented the current one.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/134567122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905801", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/28905801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75934024", "body": "This used to be generated AFAICT.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75934024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69564776", "body": "Use AC_DEFINE instead of setting a var here and checking it in config.h.in\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69564776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69565690", "body": "This change makes no sense, why would we force a vasprintf implementation on targets that have it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69565690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73229926", "body": "The overhead is minimal, but let me measure it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73229926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73230150", "body": "Once I port it to linux and address the issues raised here we can benchmark this plus the tags to see how worse it gets.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73230150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80733551", "body": "At some point we should make this a configure time toggle so we can enable it on desktop and test it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80733551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80734214", "body": "oh, nm, just show winconfig\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80734214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69565833", "body": "You cannot use config.h defines in eglib.h.\n\nDefine the function to always exist and make it a nop in the implementation in case the define is not set.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69565833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69565885", "body": "Same thing as the previous comment.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69565885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69566135", "body": "Those 2 free calls are out of context here. Do we have a mem leak?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69566135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/122029990", "body": "done", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/122029990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131702937", "body": "HAVE_xxxx macros should only be defined by configure.\r\n\r\nIt's ok to check it here, but use a different name prefix, like USE_xxx.\r\n\r\nAdditionally, there should be a comment on why this is being checked.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131702937/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131703730", "body": "If we are to trust the docs, this is ok, as buff would alternatively point to an immutable buffer.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131703730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69566514", "body": "If should remove this header completely and decide on the body of g_vasprintf in its body.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69566514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/52226340", "body": "Can you push your RS changes somewhere?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/52226340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93022473", "body": "The bitcode output is not the defining characteristic of this mode so describing it that way is misguided.\r\n\r\nOther modes produce a bitcode file when using llvm so this explanation is confusing.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93022473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93023317", "body": "The AOT compiler does not perform IL stripping.\r\n\r\nIt should mention that the runtime must be in full mode (--full-aot) to use such library.\r\n\r\nThe description of full-aot mode should, perhaps, be left to the --full-aot flag.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93023317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93023636", "body": "The AOT compiler doesn't perform IL stripping.\r\nIL stripping is not required of this mode, it's just possible.\r\n\r\nI think, like --aot=full, say that it AOT's the library to be run under the --hybrid-aot mode.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93023636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93024000", "body": "nit: value type is not hyphenated in the dotnet world.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93024000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93024449", "body": "The --aot=full flag doesn't provide any additional information.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93024449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93025446", "body": "This is wrong.\r\n\r\nUnder hybrid-aot the following conditions apply:\r\n\r\n- JIT compilation is enabled;\r\n- dynamic codegen APIs, such SRE, are available;\r\n- dynamic assembly loading is available;\r\n- AOT images must have being compiled in the hybrid-aot mode.\r\n- the runtime will not use IL from assemblies with AOT images (implying they can be stripped)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/93025446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/150064086", "body": "This is a lot nicer than having the sdk build go to that dir and a  \"make PROFILE=xxx\"!\r\nI'll apply this to wasm as well.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/150064086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/54562338", "body": "We should learn this from the autoconf vars and not by grepping build output\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/54562338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70488406", "body": "Could you add some comments on how you picked those numbers and where do they show up?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70488406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70488700", "body": "Another thing, we're supported to support gsharedvt on all FullAOT targets. Which ones are we missing?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70488700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "directhex": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6388", "title": "Allow environment override of cert store", "body": "It would be beneficial to allow the machine and user cert stores to be read/written from/to arbitrary locations, rather than the currently hardcoded locations in `mcs/class/Mono.Security/Mono.Security.X509/X509StoreManager.cs` - e.g. this is needed to allow Flatpak MonoDevelop to read/write Mono certs from the standard location, whilst still storing the MonoDevelop config in a special sandbox per-app location. As-is, Flatpak overrides `XDG_CONFIG_HOME`, which causes Mono to use a special per-app config directory of `~/.var/app/com.xamarin.MonoDevelop/config/.mono/`", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c4d1df972e10c38ad148c054b05732e2d3721de3", "message": "Add file missed from e0b1d6651915c395eca637ed172399354ee0fa17 to Makefile.am\n\n(cherry picked from commit 8c7efc8a9a7858e5cdf214a55d7c07ace2907cf6)"}, {"url": "https://api.github.com/repos/mono/mono/commits/c593c1e3516b2f8ecefbe829933efb5a1537b210", "message": "[mkbundle] Bundle unmanaged libs"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6582", "title": "Try grabbing postinst logs into /tmp", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danroth27": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6376", "title": "Add support for XsdDataContractExporter for mobile", "body": "We're updating the Microsoft ASP.NET Web API Client [package](https://www.nuget.org/packages/microsoft.aspnet.webapi) to support .NET Standard 2.0. This library uses the `XsdDataContractExporter` to detect if a type has a data contract, but it looks like `XsdDataContractExporter` throws NotSupportedExceptions on Xamarin.Android:\r\n\r\n```\r\n12-15 06:13:09.949 E/mono    (12122): \r\n12-15 06:13:09.949 E/mono    (12122): Unhandled Exception:\r\n12-15 06:13:09.949 E/mono    (12122): System.TypeInitializationException: The type initializer for 'System.Net.Http.FormattingUtilities' threw an exception. ---> System.NotImplementedException: The method or operation is not implemented.\r\n12-15 06:13:09.949 E/mono    (12122):   at System.Runtime.Serialization.XsdDataContractExporter..ctor () [0x00006] in /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mcs/class/System.Runtime.Serialization/ReferenceSources/XsdDataContractExporter_mobile.cs:39 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Net.Http.FormattingUtilities..cctor () [0x000e4] in <a96925ecdb904c5c931a865f71021787>:0 \r\n12-15 06:13:09.949 E/mono    (12122):    --- End of inner exception stack trace ---\r\n12-15 06:13:09.949 E/mono    (12122):   at System.Net.Http.Formatting.JsonMediaTypeFormatter..ctor () [0x0000b] in <a96925ecdb904c5c931a865f71021787>:0 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Net.Http.Formatting.MediaTypeFormatterCollection.CreateDefaultFormatters () [0x00000] in <a96925ecdb904c5c931a865f71021787>:0 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Net.Http.Formatting.MediaTypeFormatterCollection..ctor () [0x00000] in <a96925ecdb904c5c931a865f71021787>:0 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Net.Http.HttpContentExtensions.get_DefaultMediaTypeFormatterCollection () [0x00007] in <a96925ecdb904c5c931a865f71021787>:0 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Net.Http.HttpContentExtensions.ReadAsAsync[T] (System.Net.Http.HttpContent content) [0x00000] in <a96925ecdb904c5c931a865f71021787>:0 \r\n12-15 06:13:09.949 E/mono    (12122):   at Phoneword.Test+<ReadAsJsonAsync>d__2.MoveNext () [0x00134] in C:\\Users\\kichalla\\Downloads\\Phoneword\\Phoneword\\Test.cs:22 \r\n12-15 06:13:09.949 E/mono    (12122): --- End of stack trace from previous location where exception was thrown ---\r\n12-15 06:13:09.949 E/mono    (12122):   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:151 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Threading.Tasks.Task task) [0x00037] in /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:187 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Threading.Tasks.Task task) [0x00028] in /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:156 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Threading.Tasks.Task task) [0x00008] in /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:128 \r\n12-15 06:13:09.949 E/mono    (12122):   at System.Runtime.CompilerServices.TaskAwaiter`1[TResult].GetResult () [0x00000] in /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/TaskAwaiter.cs:357 \r\n12-15 06:13:09.949 E/mono    (12122):   at Phoneword.MainActivity+<OnCreate>d__0.MoveNext () [0x00053] in C:\\Users\\kichalla\\Downloads\\Phoneword\\Phoneword\\MainActivity.cs:17\r\n```\r\n\r\nAny plans to add support for XsdDataContractExporter for mobile?", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lewurm": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6373", "title": "infrequent crash of bug-10127.exe", "body": "e.g. here: https://jenkins.mono-project.com/job/test-mono-pull-request-interpreter-aarch64/1495/testReport/junit/MonoTests/runtime-interp/bug_10127_exe/\r\n\r\nSome while ago I've modified the test so that it will print the seed that it happened with (might be relevant?):\r\n```\r\n=============== bug-10127.exe.stdout ===============\r\nStarting cache testers\r\nThread seed: 2009947753\r\n* Assertion at threads.c:884, condition `thread->suspended' not met\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/5ba19cb47812dd356b19624d5bce380e514c3c64", "message": "[configure] fix altstack detection\n\nnewer linux headers hide the `struct sigaltstack` definition (e.g. on\nUbuntu 17.10), probably because it is encouraged to use `stack_t`\nanyway.\n\nWe use `stack_t` in our code anyway:\nhttps://github.com/mono/mono/blob/146346977cea8aaed2de8ab6a84c2a58b30aea24/mono/mini/mini-exceptions.c#L2379\n\nThe change introducing the `ifdef` was already wrong imho:\nhttps://github.com/mono/mono/commit/f6d15e14c234c505e4b5e4d5e46a2666370d2b4a"}, {"url": "https://api.github.com/repos/mono/mono/commits/f49e87d42a26593cfbc2f26db6b58516bdbe1b1a", "message": "[exceptions] remove restore_stack_prot from managed code (#6518)\n\nit's dead code. restore happens in `restore_soft_guard_pages` upon\r\nreturning from the altstack machinery."}, {"url": "https://api.github.com/repos/mono/mono/commits/e39acb7a0d8409a3797b389b047e7544683dcca7", "message": "[exception] propagte stackoverflow exception to managed code (#6458)\n\nwe return the address of the StackOverflowException object in\r\n`restore_soft_guard_pages`, so it ends up in the architecture specific\r\nresult register (e.g. %rax) where the exception handler expects it.\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=60862"}, {"url": "https://api.github.com/repos/mono/mono/commits/b30a5d37e44346329ec04b2a4e8630c5dec98bc9", "message": "[exception] unprotect whole stack guard if a stack overflow occurs\n\nRationale:\n\n1. it asks for double faulting scenarios we can't do anything about\n   it anyway, exception just unmap yet another page\n\n2. `mprotect(2)` behaves weirdly (at least on macOS) if you try to\n   change permissions for subsequent pages with different permissions.\n   With the previous code it happened that the requested memory range\n   would go from somewhere in the stack guard and overlap into the\n   regular, unprotected stack and end up with unpredictable behaviour.\n   We could be more careful about it, but it would complicate things\n   even more."}, {"url": "https://api.github.com/repos/mono/mono/commits/711a02e465a83e426ca6775205834e639fe880a1", "message": "[mini] factor out interp into a library (#6419)\n\n* [mini] factor out interp into a library\r\n\r\nIt enables us to ship the interpreter as an add-on to the runtime.\r\nEmbedder can statically link it into their application on demand.\r\n\r\nUsage:\r\n\r\nconfigure mono without the interpreter, such as:\r\n\r\n```\r\n$ ./autogen.sh --enable-minimal=interpreter ...\r\n$ make; make install\r\n```\r\n\r\nrun your favorite program with the interpreter and see it fail:\r\n\r\n```\r\n$ ./mono/mini/mono-sgen --interpreter ./mono/mini/basic.exe\r\nMono IL interpreter support is missing\r\n```\r\n\r\ndespite `--enable-minimal=interpreter`, we can still build the interp\r\nmodule:\r\n\r\n```\r\n% make -C mono/mini libmono-ee-interp-static.la\r\n  CC       interp/libmono_ee_interp_static_la-interp.lo\r\n  CC       interp/libmono_ee_interp_static_la-mintops.lo\r\n  CC       interp/libmono_ee_interp_static_la-transform.lo\r\n  CCLD     libmono-ee-interp-static.la\r\n```\r\n\r\n`libmono-ee-interp-static.a` can be statically linked into the target\r\napplication.\r\n\r\n* [fixup] include libmono-ee-interp reference in runtime unit-tests"}, {"url": "https://api.github.com/repos/mono/mono/commits/efb6eb891cd217e9aaba5e5404d569683f40e4cd", "message": "[interp] fix build when interpreter is disabled (#6416)\n\n```\r\nmini-amd64.c:1103:36: error: incomplete definition of type 'struct _MonoInterpCallbacks'\r\n                        gpointer ret_storage = interp_cb->frame_arg_to_storage ((MonoInterpFrameHandle)frame, sig, -1);\r\n                                               ~~~~~~~~~^\r\n./mini-runtime.h:162:16: note: forward declaration of 'struct _MonoInterpCallbacks'\r\ntypedef struct _MonoInterpCallbacks MonoInterpCallbacks;\r\n               ^\r\nmini-amd64.c:1103:61: error: use of undeclared identifier 'MonoInterpFrameHandle'\r\n                        gpointer ret_storage = interp_cb->frame_arg_to_storage ((MonoInterpFrameHandle)frame, sig, -1);\r\n                                                                                 ^\r\nmini-amd64.c:1134:12: error: incomplete definition of type 'struct _MonoInterpCallbacks'\r\n                interp_cb->frame_arg_to_data ((MonoInterpFrameHandle)frame, sig, i, storage);\r\n                ~~~~~~~~~^\r\n./mini-runtime.h:162:16: note: forward declaration of 'struct _MonoInterpCallbacks'\r\ntypedef struct _MonoInterpCallbacks MonoInterpCallbacks;\r\n               ^\r\nmini-amd64.c:1134:34: error: use of undeclared identifier 'MonoInterpFrameHandle'\r\n                interp_cb->frame_arg_to_data ((MonoInterpFrameHandle)frame, sig, i, storage);\r\n                                               ^\r\nmini-amd64.c:1214:11: error: incomplete definition of type 'struct _MonoInterpCallbacks'\r\n        interp_cb->data_to_frame_arg ((MonoInterpFrameHandle)frame, sig, -1, storage);\r\n        ~~~~~~~~~^\r\n./mini-runtime.h:162:16: note: forward declaration of 'struct _MonoInterpCallbacks'\r\ntypedef struct _MonoInterpCallbacks MonoInterpCallbacks;\r\n               ^\r\nmini-amd64.c:1214:33: error: use of undeclared identifier 'MonoInterpFrameHandle'\r\n        interp_cb->data_to_frame_arg ((MonoInterpFrameHandle)frame, sig, -1, storage);\r\n```\r\n                                       ^"}, {"url": "https://api.github.com/repos/mono/mono/commits/d6e5957ecb444171f7e6708546f00ec425952e59", "message": "[valuetypes] incorporate review feedback for 77a53f0dc9b6a99b8abc1504356ef11477976f83 (#6403)"}, {"url": "https://api.github.com/repos/mono/mono/commits/866d0ad48295cb7d11ed27337d6870e0587e78db", "message": "[interp] move up rtm assigment so it won't be NULL on potential usage (#6390)\n\nTHROW_EX expands to a potential usage of `rtm`"}, {"url": "https://api.github.com/repos/mono/mono/commits/7a5df3c524d5eb4cf70744dc69c4803eb70b283b", "message": "[mini] Allow stind.ref only on object references. (#6164)\n\n* [mini] Allow stind.ref only on object references.\r\n\r\n* [marshal] stind.ref is invalid for non-reference types"}, {"url": "https://api.github.com/repos/mono/mono/commits/1710dd74fe06fc2679d9f2e72ad939d7e3bdfa10", "message": "[configure] change bug URL (#6378)"}, {"url": "https://api.github.com/repos/mono/mono/commits/77a53f0dc9b6a99b8abc1504356ef11477976f83", "message": "[valuetypes] use memcmp in default implementation of Equals for unaligned fields\n\nsome architectures (e.g. ARM) do not support reads of unaligned pointers\n\nfixes https://github.com/mono/mono/issues/6320"}, {"url": "https://api.github.com/repos/mono/mono/commits/ee43f5a4ad0a1a31ed4ec77688c7ea981d010e6f", "message": "[arm] use DMB ISH barrier instead of DMB SY\n\nISH is enough, as a \"inner shareability domain\" contains all PEs\ncontrolled by a single hypervisor or operating system. That is inline\nwith GCC, linux kernel etc.\n\nWe do the same on ARM64: https://github.com/mono/mono/commit/efdf035cfb928ffe3c0ef81e7ce2bad8402cab26"}, {"url": "https://api.github.com/repos/mono/mono/commits/b3f9ee4413fa79dee4b764fe60e4ca0e1c5a709f", "message": "[mini] cleanup some code to silent compiler warnings (#6325)\n\n* [method2ir] remove unused ldind_to_load_membase ()\r\n\r\n* [method2ir] mono_create_tls_get () can be static\r\n\r\n* [method2ir] remove unused mono_create_tls_set () (and thus mono_create_fast_tls_setter ())\r\n\r\n* [amd64] remove unused array and guard debug code properly to suppress compiler warning"}, {"url": "https://api.github.com/repos/mono/mono/commits/9cfdeb1a2eadab73a9164ddafd7397b64bc337a9", "message": "[arm] replace cp15 barrier usage wih dmb instruction on armv7\n\non armv8 chips this barrier isn't implemented in hardware and must be\nemulated by the kernel if it runs aarch32 code:\n\nhttps://github.com/torvalds/linux/blob/c9b012e5f4a1d01dfa8abc6318211a67ba7d5db2/arch/arm64/kernel/armv8_deprecated.c#L475"}, {"url": "https://api.github.com/repos/mono/mono/commits/7924c406d94d5d28418039680159cf5792e06e27", "message": "[interp] on cee_ret use underlying type which handles, among other things, ref types correctly\n\nwhile at it:\n    * only get MonoClass if really necessary.\n    * use helper function to print method with signature.\n\nfixes: https://bugzilla.xamarin.com/show_bug.cgi?id=60756"}, {"url": "https://api.github.com/repos/mono/mono/commits/746a3d021443dc21d9dfec7ff8c4153fe947fff8", "message": "[corlib] rename NotWorkingInterpreter and InterpreterNotWorking categories (#6225)"}, {"url": "https://api.github.com/repos/mono/mono/commits/f9287857f227bc5f3504d02b5ea325c525b03a44", "message": "[mini] isalnum() respects encoding in python3, we only want to have ASCII chars (#6199)"}, {"url": "https://api.github.com/repos/mono/mono/commits/4d5d54f7a8c02c3d91c74bca46c5bacb8d1a073d", "message": "[interp] disable weak-fields.exe (#6191)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6623", "title": "[offsetdumper] remove InterpMethodArguments", "body": "Every user of this tool is using architectures that are implementing\r\n`CallContext`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5806", "title": "[WIP] [interp] [arm] hack around callee save problem for r8 in interp_in trampoline", "body": "TODO:\r\n- [ ] make it MT-safe\r\n- [ ] only restore if `mono_set_rgctx_arg` is actually used\r\n- [ ] make it work for AOT case", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318", "body": "maybe it's a good place to explain that there are \"native backtraces\" and \"managed stacktraces\" and how to obtain them. Depending on the issue, those can be useful.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76580733", "body": "I was wondering about that too.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/76580733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/122456104", "body": "did you test that?  using backticks and such looks dangerous regarding quoting rules.  or is it intended that it evaluates `./config.guess` in the error message?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/122456104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148938349", "body": "if disabled, it would show in the `minimal` line later in the output. note that this is about the `configure` output, not `mono --version`; I will add something to the `mono --version` output.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148938349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149042414", "body": "`./autogen.sh ...` would give you this:\r\n```\r\n        mcs source:    mcs\r\n        C# Compiler:   roslyn\r\n\r\n   Engine:\r\n        Host:          x86_64-apple-darwin16.7.0\r\n        Target:        x86_64-apple-darwin16.7.0\r\n        GC:            sgen (concurrent by default) and Included Boehm GC with typed GC\r\n        TLS:           pthread\r\n        SIGALTSTACK:   yes\r\n        Engine:        Building and using the JIT\r\n        BigArrays:     no\r\n        DTrace:        yes\r\n        LLVM Back End: no (dynamically loaded: no)\r\n\r\n   Libraries:\r\n        .NET 4.x:        yes\r\n        Xamarin.Android: no\r\n        Xamarin.iOS:     no\r\n        Xamarin.WatchOS: no\r\n        Xamarin.TVOS:    no\r\n        Xamarin.Mac:     no\r\n        Windows AOT:     no\r\n        Orbis:           no\r\n        Unreal:          no\r\n        WebAssembly:     no\r\n        Test profiles:   AOT Full (no), AOT Hybrid (no)\r\n        JNI support:     IKVM Native\r\n        libgdiplus:      /Library/Frameworks/Mono.framework/Versions/Current/lib/libgdiplus.dylib\r\n        zlib:            system zlib\r\n        BTLS:            yes (x86_64)\r\n```\r\n\r\n`./autogen.sh --enable-minimal=interpreter ...`:\r\n```\r\n        mcs source:    mcs\r\n        C# Compiler:   roslyn\r\n\r\n   Engine:\r\n        Host:          x86_64-apple-darwin16.7.0\r\n        Target:        x86_64-apple-darwin16.7.0\r\n        GC:            sgen (concurrent by default) and Included Boehm GC with typed GC\r\n        TLS:           pthread\r\n        SIGALTSTACK:   yes\r\n        Engine:        Building and using the JIT\r\n        BigArrays:     no\r\n        DTrace:        yes\r\n        LLVM Back End: no (dynamically loaded: no)\r\n\r\n   Libraries:\r\n        .NET 4.x:        yes\r\n        Xamarin.Android: no\r\n        Xamarin.iOS:     no\r\n        Xamarin.WatchOS: no\r\n        Xamarin.TVOS:    no\r\n        Xamarin.Mac:     no\r\n        Windows AOT:     no\r\n        Orbis:           no\r\n        Unreal:          no\r\n        WebAssembly:     no\r\n        Test profiles:   AOT Full (no), AOT Hybrid (no)\r\n        JNI support:     IKVM Native\r\n        libgdiplus:      /Library/Frameworks/Mono.framework/Versions/Current/lib/libgdiplus.dylib\r\n        zlib:            system zlib\r\n        BTLS:            yes (x86_64)\r\n        Disabled:      interpreter\r\n\r\n```\r\n\r\nSo I think that additional line is not really necessary?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149042414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149340842", "body": "can't you remove those two lines above?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149340842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149419706", "body": "@joncham ah I see, that makes sense \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149419706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/159401503", "body": "damn \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/159401503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/56558616", "body": "good point! I changed it to `MONO_JIT_DUMP_METHOD`\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/56558616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jonpryor": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6370", "title": "Allow AOT .so files to contain output of multiple assemblies", "body": "Context: https://github.com/xamarin/xamarin-android/issues/1146\r\n\r\nXamarin.Android [allows assemblies to be AOT'd by setting `$(AotAssemblies)` to True](https://developer.xamarin.com/guides/android/advanced_topics/building-apps/build-process/). When this is enabled, each `.dll` contained within the application will have a corresponding AOT `.so` generated, for either/both \"normal\" AOT and Hybrid/Full AOT mechanisms (`$(AndroidAotMode)='Hybrid'`).\r\n\r\nUnfortunately, Android 4.3 and earlier only allow 128 native libraries to be loaded into a process, and the default process address space has ~65 already loaded (`libc.so`, etc.), giving us \"headroom\" of only 63 native libraries. That's ridiculously easy to hit: the [`Xamarin.Forms-Performance-Integration` project](https://github.com/xamarin/xamarin-android/tree/master/tests/Xamarin.Forms-Performance-Integration/Droid) contains *55* assemblies, and is largely a bog-standard Xamarin.Forms app. 8 more assemblies, and you hit the limit.\r\n\r\nWhat is desired is a way to emit only *one* `.so` for *all* of the assembly AOT data, not one `.so` per `.dll`, as is currently done.\r\n\r\n## Steps to Reproduce\r\n\r\n1. [Create a Xamarin.Android app which contains ~65 assemblies](https://github.com/xamarin/xamarin-android/files/1593964/lib.zip) and sets `$(AotAssemblies)`=True.\r\n2. Build, Deploy, and Run the Xamarin.Android app on an Android 4.3 or earlier device which supports armeabi-v7a binaries:\r\n\r\n        cd lib\r\n        msbuild /t:SignAndroidPackage /p:Configuration=Release\r\n        msbuild /t:Install /p:Configuration=Release\r\n        msbuild /t:_Run /p:Configuration=Release\r\n\r\n        # How many native libs does this .apk contain?\r\n        unzip -l bin/Release/*-Signed.apk | grep .so$ | wc -l\r\n             146\r\n\r\n3. Launch the app\r\n\r\n## Current Behavior\r\n\r\nApp (eventually?) crashes, as it can't load the `.so`:\r\n\r\n```\r\nD/Mono    ( 6456): DllImport error loading library './libUnluckyLibName.so': 'Cannot load library: alloc_info[268]:   195 too many libraries when loading libUnluckyLibName.so'.\r\n```\r\n\r\n## Expected Behavior\r\n\r\nApp launches and runs.\r\n\r\n### On which platforms did you notice this\r\n\r\n- [X ] Android\r\n\r\n**Version Used**:\r\n\r\nmono/2017-10\r\n\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/issues/6266", "title": "ArrayTypeMismatchException when using array of generic ICollection<T> or IList<T>", "body": "### Steps to Reproduce\r\n\r\n1. Run the following program:\r\n\r\n```csharp\r\nusing System.Collections.Generic;\r\n\r\npublic interface IFoo\r\n{\r\n  int MyInt { get; }\r\n}\r\n\r\npublic class Bar : IFoo\r\n{\r\n  public int MyInt => 0;\r\n}\r\n\r\nclass App {\r\n  public static void Main ()\r\n  {\r\n    ICollection<IFoo> arr1 = new Bar[1] { new Bar() };\r\n    ICollection<IFoo> arr2 = new Bar[1] { new Bar() };\r\n\r\n    ICollection<IFoo>[] a2d = new ICollection<IFoo>[2] {\r\n      arr1,\r\n      arr2,\r\n    };\r\n  }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo exception thrown.\r\n\r\n### Actual Behavior\r\n\r\nThrows an `ArrayTypeMismatchException` at last line of test code at runtime when using `ICollection<T>` or `IList<T>`. \r\n\r\n```\r\nSystem.ArrayTypeMismatchException: Attempted to access an element as a type incompatible with the array.\r\n  at (wrapper stelemref) System.Object:virt_stelemref_interface (intptr,object)\r\n  at App.Main () [0x0001f] in /Users/jon/tmp/csharp/gxa-1120.cs:19 \r\n```\r\n\r\nThe following types are working properly as expected:\r\n\r\n* `IEnumerable`\r\n* `IEnumerable<T>`\r\n* `ICollection`\r\n* `IList`\r\n\r\nCode is compiling successfully with all types.\r\n\r\n### Version Information\r\n\r\nVisual Studio: 15.5.2\r\nMono: MonoAndroid70 / 4.0.30319 / 8.1.0.25\r\nAndroid: 7.0\r\nKernel: 4.1.18-gdd36b34\r\n\r\n### On which platforms did you notice this\r\n\r\n-[X] macOS\r\n-[ ] Linux\r\n-[ ] Windows\r\n-[X] Xamarin.Android\r\n\r\n**Version Used**:\r\n\r\nDesktop macOS: 5.4.1.7 (2017-06/e66d9abbb27)  \r\nXamarin.Android 8.1: d15-5-2017-06/950ea65\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/146649", "body": "This should be fixed in commit http://github.com/mono/mono/commit/31190e15c36ab909c2ab219379a26e737b667fc3\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/153695", "body": "Isn't the exception message on line 2689 (new) wrong?  if we're throwing because events.Length is less than max_events, that implies that events must contain more than max_events entries...i.e. at least max_events elements.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/153695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/639490", "body": "Place it into a Mono.Net namespace?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/639490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/822033", "body": "As always, `catch{}` is evil. ;-)\n\nInstead, perhaps:\n\n```\ncatch (Exception e) {\n    p (output, \"/* exception caught: \" + e.Message + \" */\");\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/822033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1044747", "body": "I'm way late to seeing this, but...what prompted this change?\n\nThe `message` parameter is validated in managed code:\nhttps://github.com/mono/mono/blob/master/mcs/class/Mono.Posix/Mono.Unix.Native/Syscall.cs#L3200\nhttps://github.com/mono/mono/blob/master/mcs/class/Mono.Posix/Mono.Unix/UnixMarshal.cs#L366\n\nThis change means that '%m' isn't useful in format strings to Syscall.syslog(), as it'll be escaped instead of \"passed through\" unchanged.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1044747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "rnagy": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6363", "title": "build failure with emutls", "body": "Hi\r\n\r\nmono fails to build with both gcc and clang if using emutls.\r\nconfigure checks for a working __thread, which succeeds,\r\nhowever at link time it fails.\r\n\r\nadditional reference: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65953\r\n\r\n```\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:212: undefined reference to `mono_tls_thread'\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:213: undefined reference to `mono_tls_jit_tls'\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:214: undefined reference to `mono_tls_domain'\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:215: undefined reference to `mono_tls_lmf_addr'\r\n../../mono/utils/.libs/libmonoutils.a(libmonoutils_la-mono-tls.o): In function `mono_tls_init_gc_keys':\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:201: undefined reference to `mono_tls_sgen_thread_info'\r\n../../mono/utils/.libs/libmonoutils.a(libmonoutils_la-mono-tls.o): In function `mono_tls_init_runtime_keys':\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:212: undefined reference to `mono_tls_thread'\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:213: undefined reference to `mono_tls_jit_tls'\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:214: undefined reference to `mono_tls_domain'\r\n/usr/ports/pobj/mono/mono/utils/mono-tls.c:215: undefined reference to `mono_tls_lmf_addr'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/issues/6359", "title": "unable to use csc.exe on OpenBSD", "body": "Building with csc on OpenBSD is completely broken in any version of mono (including HEAD) after 5.x. Mono itself can be built by using --with-csc=mcs and after that mcs\r\ncan be used to build, without that mono cannot be built.\r\n\r\nThe following backtrace is from mono-5.8.0.88:\r\n\r\n```\r\n$ LD_DEBUG=1 csc hello.cs  \r\nld.so loading: 'mono'\r\nexe load offset:  0xfcd70f00000\r\n flags /usr/local/bin/mono = 0x0\r\nhead /usr/local/bin/mono\r\nobj /usr/local/bin/mono has /usr/local/bin/mono as head\r\nexamining: '/usr/local/bin/mono'\r\nloading: libm.so.10.0 required by /usr/local/bin/mono\r\n flags /usr/lib/libm.so.10.0 = 0x0\r\nobj /usr/lib/libm.so.10.0 has /usr/local/bin/mono as head\r\nloading: libpthread.so.25.1 required by /usr/local/bin/mono\r\n flags /usr/lib/libpthread.so.25.1 = 0x8\r\nobj /usr/lib/libpthread.so.25.1 has /usr/local/bin/mono as head\r\nloading: libc.so.92.1 required by /usr/local/bin/mono\r\n flags /usr/lib/libc.so.92.2 = 0x0\r\nobj /usr/lib/libc.so.92.2 has /usr/local/bin/mono as head\r\nloading: libiconv.so.6.0 required by /usr/local/bin/mono\r\n flags /usr/local/lib/libiconv.so.6.0 = 0x0\r\nobj /usr/local/lib/libiconv.so.6.0 has /usr/local/bin/mono as head\r\nlinking dep /usr/local/lib/libiconv.so.6.0 as child of /usr/local/bin/mono\r\nlinking dep /usr/lib/libm.so.10.0 as child of /usr/local/bin/mono\r\nobjname /usr/lib/libpthread.so.25.1 is nodelete\r\nlinking dep /usr/lib/libpthread.so.25.1 as child of /usr/local/bin/mono\r\nlinking dep /usr/lib/libc.so.92.2 as child of /usr/local/bin/mono\r\nexamining: '/usr/local/lib/libiconv.so.6.0'\r\nexamining: '/usr/lib/libm.so.10.0'\r\nexamining: '/usr/lib/libpthread.so.25.1'\r\nexamining: '/usr/lib/libc.so.92.2'\r\n flags /usr/libexec/ld.so = 0x0\r\nobj /usr/libexec/ld.so has /usr/local/bin/mono as head\r\nstatic tls size=0 align=8 offset=0\r\nprotect start RELRO = 0xfcfa575bf90 in /usr/lib/libc.so.92.2\r\nprotect end RELRO = 0xfcfa575e000 in /usr/lib/libc.so.92.2\r\nprotect start RELRO = 0xfcf8e632c28 in /usr/lib/libpthread.so.25.1\r\nprotect end RELRO = 0xfcf8e633000 in /usr/lib/libpthread.so.25.1\r\nprotect start RELRO = 0xfcfc5987d78 in /usr/lib/libm.so.10.0\r\nprotect end RELRO = 0xfcfc5988000 in /usr/lib/libm.so.10.0\r\nprotect start RELRO = 0xfcfadcb86a8 in /usr/local/lib/libiconv.so.6.0\r\nprotect end RELRO = 0xfcfadcba000 in /usr/local/lib/libiconv.so.6.0\r\nprotect start RELRO = 0xfcd714683d8 in /usr/local/bin/mono\r\nprotect end RELRO = 0xfcd7146eff8 in /usr/local/bin/mono\r\n        Start            End              Type Open Ref GrpRef Name\r\n        00000fcd70f00000 00000fcd714cc000 exe  2    0   0      /usr/local/bin/mono\r\n        00000fcfad9be000 00000fcfadcbb000 rlib 0    1   0      /usr/local/lib/libiconv.so.6.0\r\n        00000fcfc5763000 00000fcfc5989000 rlib 0    1   0      /usr/lib/libm.so.10.0\r\n        00000fcf8e42b000 00000fcf8e634000 rlib 0    1   0      /usr/lib/libpthread.so.25.1\r\n        00000fcfa5491000 00000fcfa5772000 rlib 0    1   0      /usr/lib/libc.so.92.2\r\n        00000fcfd2900000 00000fcfd2900000 ld.so 0    1   0      /usr/libexec/ld.so\r\nsymcache lookups 76 hits 0 ratio 0% hits\r\ndynamic loading done, success.\r\ntib new=0xfcfb578ba40\r\nsetting environ 0xfcfd2b14090@/usr/libexec/ld.so[0xfd02277f400] from 0xfcfd2b14090\r\nsetting __progname 0xfcfd2b14098@/usr/libexec/ld.so[0xfd02277f400] from 0xfcfd2b14098\r\ndoing ctors obj 0xfd00241e800 @0xfcfad9be2e0: [/usr/local/lib/libiconv.so.6.0]\r\ndoing ctors obj 0xfd02277f000 @0xfcfc57632e0: [/usr/lib/libm.so.10.0]\r\ndoing ctors obj 0xfd00241ec00 @0xfcf8e42b2e0: [/usr/lib/libpthread.so.25.1]\r\nentry point: 0xfcd70f01550\r\ndlctl: _dl_thread_fnc set to 0xfcf8e42be10\r\ntib new=0xfcfea94ec00\r\ntib new=0xfcfea94ea00\r\ntib new=0xfd06581e600\r\ntib new=0xfcfea94e200\r\ntib new=0xfcfea94e600\r\ntib new=0xfcfea94ee00\r\ntib new=0xfd06581e200\r\ntib new=0xfcfa4585a00\r\nMicrosoft (R) Visual C# Compiler version 2.3.2.61928 (ec1cde8b)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\ntib new=0xfcfea94e400\r\ntib new=0xfcfea94e000\r\ntib new=0xfcfa4585400\r\ntib new=0xfd06581e000\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: api-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open api-ms-win-core-file-l1-1-0.dll\r\ndlopen: api-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0\r\ndlopen: libapi-ms-win-core-file-l1-1-0: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: libapi-ms-win-core-file-l1-1-0.so: done (failed).\r\ndlopen: loading: api-ms-win-core-file-l1-1-0\r\ndlopen: failed to open api-ms-win-core-file-l1-1-0\r\ndlopen: api-ms-win-core-file-l1-1-0: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: api-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open api-ms-win-core-file-l1-1-0.dll\r\ndlopen: api-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0\r\ndlopen: libapi-ms-win-core-file-l1-1-0: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.so\r\ndlopen: libapi-ms-win-core-file-l1-1-0.so: done (failed).\r\ndlopen: loading: api-ms-win-core-file-l1-1-0\r\ndlopen: failed to open api-ms-win-core-file-l1-1-0\r\ndlopen: api-ms-win-core-file-l1-1-0: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: /usr/local/lib/mono/4.5/libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll.so\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll.so: done (failed).\r\ndlopen: loading: libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: failed to open libapi-ms-win-core-file-l1-1-0.dll\r\ndlopen: libapi-ms-win-core-file-l1-1-0.dll: done (failed).\r\ntib new=0xfcfea94e800\r\ntib new=0xfcfb8c1b600\r\nCannot transition thread 0xfcfa575e030 from RUNNING with FINISH_ASYNC_SUSPEND\r\nThread 0xfcfea94ea40 may have been prematurely finalized\r\nThread 0xfd06581e240 may have been prematurely finalized\r\nThread 0xfcfea94e240 may have been prematurely finalized\r\nCannot transition thread 0xfcfea94e040 from RUNNING with FINISH_ASYNC_SUSPEND\r\nCannot transition thread 0xfcfa4585440 from RUNNING with FINISH_ASYNC_SUSPEND\r\nThread 0xfd06581e640 may have been prematurely finalized\r\nCannot transition thread 0xfcfea94e840 from RUNNING with FINISH_ASYNC_SUSPEND\r\nThread 0xfcfea94ec40 may have been prematurely finalized\r\nThread 0xfcfea94e640 may have been prematurely finalized\r\nCannot transition thread 0xfd06581e040 from RUNNING with FINISH_ASYNC_SUSPEND\r\nCannot transition thread 0xfcfa4585a40 from RUNNING with FINISH_ASYNC_SUSPEND\r\nThread 0xfcfea94ee40 may have been prematurely finalized\r\nCannot transition thread 0xfcfea94e440 from RUNNING with FINISH_ASYNC_SUSPEND\r\nStacktrace:\r\n\r\nAbort trap (core dumped) \r\n\r\n```\r\n\r\n```\r\n#0  thrkill () at -:3\r\n#1  0x00000fcfa549561e in _libc_abort () at /usr/src/lib/libc/stdlib/abort.c:61\r\n#2  0x00000fcd7110b67b in mono_log_write_logfile (log_domain=<optimized out>, level=<optimized out>, hdr=<optimized out>, message=0xfcfbd4dd200 \"Cannot transition thread 0xfcfea94e040 from RUNNING with FINISH_ASYNC_SUSPEND\")\r\n    at mono-log-common.c:135\r\n#3  0x00000fcd71121adc in monoeg_g_logv (log_domain=<optimized out>, log_level=<optimized out>, format=<optimized out>, args=<optimized out>) at goutput.c:115\r\n#4  monoeg_g_log (log_domain=0x0, log_level=G_LOG_LEVEL_ERROR, format=<optimized out>) at goutput.c:125\r\n#5  0x00000fcd71119086 in mono_threads_transition_finish_async_suspend (info=<optimized out>) at mono-threads-state-machine.c:415\r\n#6  0x00000fcd71119d60 in suspend_signal_handler (_dummy=<optimized out>, info=<optimized out>, context=0xfd034182ca0) at mono-threads-posix-signals.c:145\r\n#7  <signal handler called>\r\n#8  futex () at -:3\r\n#9  0x00000fcfa54aa375 in _rthread_cond_timedwait (cond=0xfcf9185cdd0, mutexp=0xfcd71473f88 <worker+72>, abs=0xfd034183288) at /usr/src/lib/libc/thread/synch.h:41\r\n#10 0x00000fcd7110e4ad in mono_os_cond_timedwait (cond=0xfcd71473f98 <worker+88>, mutex=0xfcd71473f88 <worker+72>, timeout_ms=45770) at mono-os-mutex.c:75\r\n#11 0x00000fcd710b24e3 in mono_coop_cond_timedwait (cond=<optimized out>, mutex=<optimized out>, timeout_ms=<optimized out>) at ../../mono/utils/mono-coop-mutex.h:102\r\n#12 worker_park () at threadpool-worker-default.c:418\r\n#13 worker_thread (unused=<optimized out>) at threadpool-worker-default.c:488\r\n#14 0x00000fcd710ac690 in start_wrapper_internal (start_info=<optimized out>, stack_ptr=<optimized out>) at threads.c:993\r\n#15 start_wrapper (data=<optimized out>) at threads.c:1053\r\n#16 0x00000fcd7113e760 in GC_start_routine (arg=<optimized out>) at pthread_support.c:1508\r\n#17 0x00000fcf8e42c56e in _rthread_start (v=0x4) at /usr/src/lib/librthread/rthread.c:96\r\n#18 0x00000fcfa550865b in __tfork_thread () at /usr/src/lib/libc/arch/amd64/sys/tfork_thread.S:75\r\n#19 0x0000000000000000 in ?? ()\r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/e31ecb3b41989ab1252708c3f5622049a3af26ef", "message": "openbsd related patches (#6358)\n\n* include netinet/in.h for in_addr_t\r\n\r\n* there is no need for an openbsd specific implementation anymore\r\nso you use the generic pthread one\r\n\r\n* signal.h is required for sigaltstack\r\n\r\n* add missing mono/utils/mono-threads.h include\r\n\r\n* there is no malloc.h on OpenBSD either\r\n\r\n* sys/socket.h is required for struct sockaddr\r\n\r\n* add support for btls on openbsd and default to with_tls=pthread as there is only emultls support which is not enough for mono\r\n\r\n* there is no need for pthread_attr_init/destroy anymore\r\n\r\n* add -Wl,-zwxneeded to LDFLAGS on OpenBSD\r\n\r\nW^X is strictly enforced by default on OpenBSD;\r\na program can only violate it if it is located on a filesystem mounted\r\nwith the wxallowed mount(8) option and has been linked with the\r\nabove flag"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/147412", "body": "Szia,\n\nEs exceptions-amd64.c?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/147412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/150420", "body": "Szia\n\nA mostani HEAD -el nincs problema, szerintem valami gaz lehetett a githubos forkommal.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/150420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "RepNex": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6357", "title": "Keepass crashes when editing an entry notes field in a specific way", "body": "I reported this problem first to the Keepass developer [here](https://sourceforge.net/p/keepass/bugs/1696/). But he says, it's caused by Mono.\r\n\r\n## Steps to Reproduce\r\n\r\n1. Open appended test.kdbx with password \"123456\" (without quotes)\r\n2. Edit \"Sample Entry\"\r\n3. Scroll down completely in notes field\r\n4. Select text exactly as shown in screenshot 1\r\n5. Press Backspace\r\nKeepass is crashing, notes field is disappearing and \"Edit Entry\" window is remaining as seen in screenshot 2, completely unresponsive.\r\n\r\nScreenshot 1 - Text Selection:\r\n<a href=\"https://ibb.co/d3ON0R\"><img src=\"https://thumb.ibb.co/d3ON0R/1_Text_Selection.png\" alt=\"1 Text Selection\" border=\"0\" /></a>\r\n\r\nScreenshot 2 - Crashed:\r\n<a href=\"https://ibb.co/ghejEm\"><img src=\"https://thumb.ibb.co/ghejEm/2_Crash.png\" alt=\"2 Crash\" border=\"0\" /></a>\r\n[test.zip](https://github.com/mono/mono/files/1596055/test.zip)\r\n\r\n\r\n\r\n## Current Behavior\r\n\r\nWhen editing an entry's notes field in a specific way, Keepass crashes.\r\n\r\n## Expected Behavior\r\n\r\nNot crashing...\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[X] Linux\r\n[ ] Windows\r\n\r\nMore detailed:\r\nUbuntu 17.10 (default desktop environment), Keepass 2.36 (from official Ubuntu repositories)\r\n\r\n**Version Used**:\r\n```\r\nmono --version\r\nMono JIT compiler version 4.6.2 (Debian 4.6.2.7+dfsg-1ubuntu1)\r\n[...]\r\n```\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\nHow do I get this?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ArsenShnurkov": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6352", "title": "Bug in TextRenderer.DrawText on Linux", "body": "## Steps to Reproduce\r\n\r\n\tusing System;\r\n\tusing System.Drawing;\r\n\tusing System.Windows.Forms;\r\n\r\n\tpublic class MyForm : Form\r\n\t{\r\n\t\tstatic int Main(string[] args)\r\n\t\t{\r\n\t\t\tMyForm mainForm = new MyForm();\r\n\t\t\tApplication.Run(mainForm);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tprotected override void OnPaint(PaintEventArgs e)\r\n\t\t{\r\n\t\t\tGraphics g = e.Graphics;\r\n\t\t\tstring text = \"&&&&&&\";\r\n\t\t\tFont font = this.Font;\r\n\t\t\tint x = 5;\r\n\t\t\tint y = 5;\r\n\t\t\tColor color = this.ForeColor;\r\n\t\t\tTextFormatFlags textFormatFlags = TextFormatFlags.NoPrefix;\r\n\t\t\tTextRenderer.DrawText(g, text, font, new Point(x, y), color, textFormatFlags);\r\n\t\t\tTextRenderer.DrawText(g, text, font, new Point(x, y+5+font.Height), color, textFormatFlags | TextFormatFlags.NoClipping);\r\n\t\t}\r\n\t}\r\n\r\n## Current Behavior\r\n\r\ndisplayed strings look different\r\n\r\n<img src=\"https://github.com/ArsenShnurkov/forum-images/raw/gh-pages/images/TextRenderer.DrawText.gif\" />\r\n\r\n## Expected Behavior\r\n\r\nthey should look the same\r\n\r\n### On which platforms did you notice this\r\n\r\nSabayon Linux\r\n\r\nMono JIT compiler version 5.11.0.132 (tarball Thu Dec 28 02:37:15 MSK 2017)\r\n\r\n### Other thoughts\r\n\r\n'&' is special symbol, and the clipping region in DrawText is calculated incorrectly", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rjvdboon": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6350", "title": "SqlCommand.ExecuteNonQuery always throws \"non-blocking socket would block\" exception", "body": "## Steps to Reproduce\r\n\r\n1. Create a Sql Server database and the sample table (see the CreateTable method in the source)\r\n2. Adapt the sample code below: change the connection string to contain the right database server, database name, user id and password\r\n3. run with mono 5.9+\r\n4. observe the error\r\n\r\n## Current Behavior\r\n\r\nWith 5.9+ it throws an exception on reading from the socket\r\nWith 5.8 and before it succeeds.\r\n\r\n## Expected Behavior\r\n\r\nI expect no exception\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ x ] Linux Centos 6.8, RHEL 6.8 and 6.9. Note that it works correcly on Centos 7.3.\r\n[ ] Windows\r\nCentos 6.8 (azure cloud image \"CentOS-based 6.8 HPC\"):\r\n`uname -a`: `Linux [machinename] 2.6.32-642.15.1.el6.x86_64 #1 SMP Fri Feb 24 14:31:22 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux`\r\n`gcc --version`: `gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)`\r\n\r\n\r\n**Version Used**:\r\n\r\nThe following mono versions show this problem:\r\n- Branch 2017-12\r\n- Master\r\n- build 5.9.0.380 from [centos6-nightly](http://download.mono-project.com/repo/centos6-nightly/m/mono-core/)\r\n\r\n### Stacktrace\r\n\r\n```\r\nSystem.Data.SqlClient.SqlException (0x80131904): Snix_Read (provider: SNI_PN7, error: 35 - SNI_ERROR_35)\r\nSnix_Read (provider: SNI_PN7, error: 35 - SNI_ERROR_35)  ---> System.IO.IOException: Unable to read data from the transport connection: Operation on non-blocking socket would block.  ---> System.Net.Sockets.SocketException: Operation on non-blocking socket would block\r\n  at System.Net.Sockets.Socket.Receive (System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags) [0x00017] in /builddir/build/BUILD/mono-5.9.0.380/mcs/class/referencesource/System/net/System/Net/Sockets/Socket.cs:1773 \r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x0009b] in /builddir/build/BUILD/mono-5.9.0.380/mcs/class/referencesource/System/net/System/Net/Sockets/NetworkStream.cs:513 \r\n   --- End of inner exception stack trace ---\r\n  at System.Net.Sockets.NetworkStream.Read (System.Byte[] buffer, System.Int32 offset, System.Int32 size) [0x000c3] in /builddir/build/BUILD/mono-5.9.0.380/mcs/class/referencesource/System/net/System/Net/Sockets/NetworkStream.cs:525 \r\n  at System.Data.SqlClient.SNI.SNIPacket.ReadFromStream (System.IO.Stream stream) [0x00000] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIPacket.cs:280 \r\n  at System.Data.SqlClient.SNI.SNITCPHandle.Receive (System.Data.SqlClient.SNI.SNIPacket& packet, System.Int32 timeoutInMilliseconds) [0x00062] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNITcpHandle.cs:440 \r\n  at System.Data.SqlClient.SqlConnection.OnError (System.Data.SqlClient.SqlException exception, System.Boolean breakConnection, System.Action`1[T] wrapCloseInAction) [0x0005a] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs:1199 \r\n  at (wrapper remoting-invoke-with-check) System.Data.SqlClient.SqlConnection.OnError(System.Data.SqlClient.SqlException,bool,System.Action`1<System.Action>)\r\n  at System.Data.SqlClient.SqlInternalConnection.OnError (System.Data.SqlClient.SqlException exception, System.Boolean breakConnection, System.Action`1[T] wrapCloseInAction) [0x00013] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlInternalConnection.cs:612 \r\n  at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning (System.Data.SqlClient.TdsParserStateObject stateObj, System.Boolean callerHasConnectionLock, System.Boolean asyncClose) [0x00152] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs:1107 \r\n  at System.Data.SqlClient.TdsParserStateObject.ThrowExceptionAndWarning (System.Boolean callerHasConnectionLock, System.Boolean asyncClose) [0x00000] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs:932 \r\n  at System.Data.SqlClient.TdsParserStateObject.ReadSniError (System.Data.SqlClient.TdsParserStateObject stateObj, System.UInt32 error) [0x00170] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs:2572 \r\n  at System.Data.SqlClient.TdsParserStateObject.ReadSniSyncOverAsync () [0x00073] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs:2107 \r\n  at System.Data.SqlClient.TdsParserStateObject.TryReadNetworkPacket () [0x0003a] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs:2032 \r\n  at System.Data.SqlClient.TdsParserStateObject.TryPrepareBuffer () [0x00049] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs:1077 \r\n  at System.Data.SqlClient.TdsParserStateObject.TryReadByte (System.Byte& value) [0x00019] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs:1311 \r\n  at System.Data.SqlClient.TdsParser.TryRun (System.Data.SqlClient.RunBehavior runBehavior, System.Data.SqlClient.SqlCommand cmdHandler, System.Data.SqlClient.SqlDataReader dataStream, System.Data.SqlClient.BulkCopySimpleResultSet bulkCopyHandler, System.Data.SqlClient.TdsParserStateObject stateObj, System.Boolean& dataReady) [0x0012f] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs:1590 \r\n  at System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds (System.String methodName, System.Boolean async, System.Int32 timeout, System.Boolean asyncWrite) [0x0020f] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs:2361 \r\n  at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery (System.Threading.Tasks.TaskCompletionSource`1[TResult] completion, System.Boolean sendToPipe, System.Int32 timeout, System.Boolean asyncWrite, System.String methodName) [0x0006a] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs:1157 \r\n  at System.Data.SqlClient.SqlCommand.ExecuteNonQuery () [0x00049] in /builddir/build/BUILD/mono-5.9.0.380/external/corefx/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs:874 \r\n  at ConsoleApplication1.Program.DoSomeStuff (System.Data.SqlClient.SqlConnection con, System.String query) [0x00008] in <f2f7a830e7fd43759eb874cb5043edbc>:0 \r\nClientConnectionId:33fbcecb-f673-45c1-bae8-fb1a2db98405 \r\n```\r\n\r\n### Sample program code:\r\n```\r\nusing System;\r\nusing System.Data.SqlClient;\r\n\r\nnamespace ConsoleApplication1 {\r\n   internal class Program {\r\n      static string connectionString = \"Server=dbserver,1433;Database=MonoTestSql;user id=[sa];password=[password]\";\r\n      private static void Main(string[] args){\r\n            if (args == null || args.Length == 0)\r\n                 WithDisposesWithClearPools();\r\n            else CreateTable();\r\n      }\r\n      private static void CreateTable(){\r\n         using (var con = new SqlConnection(connectionString)) {\r\n            con.Open();\r\n            DoSomeStuff(con, \"CREATE TABLE Dogs1 ( Weight int, Name nvarchar(255))\");\r\n         }         \r\n      }\r\n\r\n      private static void WithDisposesWithClearPools(){\r\n         Console.WriteLine(\"WithDisposesWithClearPools\");\r\n         SqlConnection con = new SqlConnection(connectionString);\r\n\r\n         con.Open();\r\n         DoSomeStuff(con);\r\n         con.Close();\r\n         SqlConnection.ClearAllPools();\r\n      }\r\n      private static void DoSomeStuff(SqlConnection con, string query = \"UPDATE Dogs1 SET Weight=1 WHERE Weight < 0\") {\r\n         try {\r\n            using (var command = new SqlCommand(query, con)) {\r\n               command.ExecuteNonQuery();\r\n            }\r\n         } catch (Exception ex) {\r\n            Console.WriteLine(\"exception on {0}: {1}\", query, ex.ToString());\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/issues/6205", "title": "Can't build mono using Roslyn C# compiler when MONO_DEBUG env var is set", "body": "The build of the 5.8.0.88 tarball from `https://download.mono-project.com/sources/mono/mono-5.8.0.88.tar.bz2`\r\nhangs at `CSC     [basic] mscorlib.dll`.\r\n\r\nSystem:\r\n- RHEL 6.8\r\n- gcc 4.4.7\r\n- python 2.7.9\r\n- No existing mono installation (i.e. uses monolite)\r\n\r\nSteps to build:\r\n```sh\r\nwget https://download.mono-project.com/sources/mono/mono-5.8.0.88.tar.bz2\r\ntar -xjf mono-5.8.0.88.tar.bz2\r\ncd mono-5.8.0.88\r\n./configure --disable-rpath --enable-big-arrays --with-large-heap --prefix=/home/${USER}/local/mono/MONO-5.8.0-GCC-4.4.7 --enable-btls=no\r\n## make hangs at 'CSC     [basic] mscorlib.dll'\r\nmake\r\n```\r\n\r\nThe same build steps for mono-5.4.1.6.tar.bz2 build correctly.\r\n \r\n[edit 2018-01-09]:\r\nRelevant Mono environment variables exposing the problem:\r\n`MONO_DEBUG=gdb`", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iamphi": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6342", "title": "Proxy that requires Digest authentication type does not work", "body": "## Steps to Reproduce\r\n\r\n1. I have a squid instance (Version 2.7.STABLE9)  with this configuration to require a login to use the proxy.\r\n```\r\nauth_param digest program /usr/lib/squid/digest_pw_auth -c /etc/squid/users\r\nauth_param digest children 5\r\nauth_param digest realm MyRealm\r\n\r\nacl users proxy_auth REQUIRED\r\nhttp_access allow users\r\n```\r\n2. Run a test similar to:\r\n```c#\r\npublic class MyCredential : ICredentials {\r\n    public NetworkCredential GetCredential(Uri uri, string authType) {\r\n        Debug.Print($\"MyCredential GetCredential {uri}, {authType}\");\r\n        return new NetworkCredential(\"test\", \"1234\");\r\n    }\r\n}\r\n\r\npublic static void ProxyAuthorizationTest(string proxyServer, string targetUrl) {\r\n    var request = (HttpWebRequest)WebRequest.Create(targetUrl);\r\n    request.Proxy = new WebProxy(proxyServer) {\r\n        Credentials = new MyCredential()\r\n    };\r\n    using(var response = request.GetResponse()) {\r\n        using(var s = response.GetResponseStream()) {\r\n            var rs = new StreamReader(s).ReadToEnd();\r\n            Debug.Print($\"{request.Method} {targetUrl} {rs}\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Current Behavior\r\nFor mono version >= 4.6, MyCredential.GetCredential is not called and proxying doesn't happen. Tested with mono 4.6.2 and 5.4.0.199\r\nFor mono version = 4.4 MyCredential.GetCredential is called, proxying happens and content of target url printed.\r\n\r\n## Expected Behavior\r\n\r\nMyCredential.GetCredential to be called, and proxying works.\r\n\r\n### On which platforms did you notice this\r\n\r\n[x ] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n## Findings\r\nI added some Console.WriteLine to mono 4.4, and 4.6 HttpWebRequest's \r\n`public bool CheckAuthorization (WebResponse response, HttpStatusCode code)`\r\nand this is what I found:\r\n\r\nI think this is the breaking commit:\r\nhttps://github.com/mono/mono/commit/ba81e38ecc73f736164377b0b210c21a7de352e2\r\nHttpWebRequest.cs, \r\nline 1619 (old):\r\n`string [] authHeaders = response.Headers.GetValues_internal (isProxy ? \"Proxy-Authenticate\" : \"WWW-Authenticate\", false);`\r\nto 1637 (new):\r\n`string [] authHeaders = response.Headers.GetValues (isProxy ? \"Proxy-Authenticate\" : \"WWW-Authenticate\");`\r\nhttps://github.com/mono/mono/commit/ba81e38ecc73f736164377b0b210c21a7de352e2#diff-ec15a2905576a08477edf6ae11b0dbcfL1619\r\n\r\n`authHeaders` values: if the response header value for `Proxy-Authenticate` is \r\n`Digest realm=\"TestRealm\", qop=\"auth,auth-int\", nonce=\"1\", opaque=\"2\"`:\r\n* mono 4.4 is preserving the whole value of `Proxy-Authenticate` header: \r\n`Digest  realm=\"TestRealm\", qop=\"auth,auth-int\", nonce=\"1\", opaque=\"2\"`, so authHeaders has count 1.\r\n* mono 4.6 is splitting `Proxy-Authenticate` header by `,`  so authHeaders has count 4, and DigestClient's `public Authorization Authenticate (string challenge, WebRequest webRequest, ICredentials credentials)` challenge parameter does not have all the details it needs to send back a Proxy-Authorization \r\n\r\nIt seems like only `Proxy-Authenticate` is having this problem. I did tests with `WWW-Authenticate` with Digest and mono 4.4 and 4.6 behaves properly.\r\n\r\n**node js test proxy**\r\nI wrote this code to mock a proxy server for debugging\r\n```js\r\nvar http = require('http');\r\nhttp.createServer(function(request, response) {\r\n  console.log(new Date());\r\n  console.log(request.headers);\r\n  console.log(request.url);\r\n  request.addListener('data', function(chunk) {\r\n    console.log(chunk.toString());\r\n  });\r\n\r\n  request.addListener('end', function() {\r\n    var authorizationHeader = request.headers['proxy-authorization'];\r\n    console.log(authorizationHeader);\r\n    if(authorizationHeader) {\r\n      response.write(authorizationHeader);\r\n    } else {\r\n      response.statusCode=407;\r\n      var authParams = 'Digest realm=\"TestRealm\", qop=\"auth,auth-int\", nonce=\"1\", opaque=\"2\"';\r\n      console.log(authParams);\r\n      response.setHeader('Proxy-Authenticate',authParams);\r\n    }\r\n    response.end();\r\n  });\r\n}).listen(8080);\r\n```  \r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6342/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Alex-DE-74": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6336", "title": "System.MissingMethodException: Method not found: \"Void System.Array.Reverse(!!0[], Int32, Int32)\" in latest build 5.4.0.201", "body": "Hello together,\r\n\r\nthanks for such amazing work. I hope to use it with xamarin on Android.\r\n\r\nLast word first - after downgrading of Mono.Security to version 3.2.3 this problem goes off.\r\n\r\nI'm currently fails and spend a day of work with this weird problem:\r\n\r\n## Steps to Reproduce\r\n\r\n            X509CertificateBuilder cb = new X509CertificateBuilder(2);\r\n            cb.SerialNumber = sn;\r\n            cb.IssuerName = subject;\r\n            cb.NotBefore = notBefore;\r\n            cb.NotAfter = notAfter;\r\n            cb.SubjectName = subject;\r\n            cb.SubjectPublicKey = subjectKey;\r\n            cb.Hash = hashName;\r\n            //cb.Version = 2;\r\n\r\n            RSA issuerKey = subjectKey;\r\n\r\n            // extensions\r\n            IDigest digest = new Sha1Digest();\r\n            byte[] resBuf = new byte[digest.GetDigestSize()];\r\n            var spki = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(DotNetUtilities.GetRsaPublicKey(issuerKey));\r\n            byte[] bytes = spki.PublicKeyData.GetBytes();\r\n            digest.BlockUpdate(bytes, 0, bytes.Length);\r\n            digest.DoFinal(resBuf, 0);\r\n\r\n\r\n            byte[] rawcert = cb.Sign(subjectKey);\r\n            byte[] u = new byte[] { 17 }; // TEST\r\n            System.Array.Reverse(u, 0, 1); // TEST\r\n            Mono.Security.X509.X509Certificate x509Cert = new Mono.Security.X509.X509Certificate(rawcert);\r\n                       <---------- EXCEPTION \r\n## Current Behavior\r\n\r\nAt the point of  new Mono.Security.X509.X509Certificate I get very strange exception  Method not found: \"Void System.Array.Reverse(!!0[], Int32, Int32)\" . But... the test above with revert of member u does work.\r\n\r\n\r\n## Expected Behavior\r\n\r\nInstead of create an instance of X509Certificate  the MissingMethodException was thrown.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ x ] Windows\r\n\r\n**Version Used**:\r\n\r\nNuGet Mono.Security 5.4.0.201\r\n\r\nStrange enought, after downgrading of Mono.Security to version 3.2.3 this problem goes off.\r\n\r\n\r\n### Stacktrace\r\n\r\nUnbehandelte Ausnahme: System.MissingMethodException: Methode nicht gefunden: \"Void System.Array.Reverse(!!0[], Int32, Int32)\".\r\n   bei Mono.Security.X509.X509Certificate.Parse(Byte[] data)\r\n   bei Mono.Security.X509.X509Certificate..ctor(Byte[] data)\r\n   bei LeastPrivilege.PFXGenerator.GeneratePfx(String certificateName, String password, DateTime startTime, DateTime endTime) in C:\\ACER_1\\Security\\MiscCode\\SslStreamWithClientAuth\\SslClient\\PfxGenerator.cs:Zeile 76.\r\n   bei LeastPrivilege.Client.Main(String[] args) in C:\\ACER_1\\Security\\MiscCode\\SslStreamWithClientAuth\\SslClient\\Client.cs:Zeile 35.\r\n\r\n\r\nThank you very much to considering this problem.\r\n\r\n-- Alex --\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dazinator": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6322", "title": "Mono Android 8 - ExecutionContext doesn't flow SecurityContext", "body": "## Steps to Reproduce\r\n\r\nI have a detailed explanation of the problem here:  https://stackoverflow.com/questions/47926132/xamarin-android-task-run-vs-task-factory-startnew-and-thread-currentprincipal\r\n\r\nHowever in short, [this field](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs#L501) doesn't appear to exist on `ExecutionContext` when running under MonoAndroid. \r\n\r\nSubsequently SecurityContext is not flowing accross Threads.\r\n\r\nFor example this fails:\r\n\r\n```csharp\r\n\r\n  public async Task Foo()\r\n  {\r\n\r\n             var principal = new GenericPrincipal(new GenericIdentity(\"Daz\", \"foo\"), new string[] { \"Superstar\" });\r\n            Thread.CurrentPrincipal = principal;\r\n\r\n            var surpressed = ExecutionContext.IsFlowSuppressed();\r\n            if(surpressed)\r\n            {\r\n                throw new Exception(\"Flow is surpressed..\");\r\n            }\r\n           \r\n            var ec = ExecutionContext.Capture();\r\n\r\n            await Task.Factory.StartNew(() =>\r\n            {\r\n                // Problem is only apparant when we are now executing on a different thread   \r\n                var afterThreadId = Thread.CurrentThread.ManagedThreadId;\r\n                var afterPriniple = Thread.CurrentPrincipal;\r\n               \r\n               // Note: Thread.CurrentPrincipal has not been restored for us (Task.Run() should do this)\r\n                // Let's try and restore it from the captured context:\r\n                \r\n                ExecutionContext.Run(ec, delegate\r\n                {\r\n                    var restoredPrincipal = Thread.CurrentPrincipal;\r\n                    if(restoredPrincipal.Identity.Name != principal.Identity.Name)\r\n                    {\r\n                        // Still doesn't work.\r\n                        throw new Exception(\"Principal did not flow accross threads.\");\r\n                    }\r\n\r\n                }, null);      \r\n            });\r\n}\r\n```\r\n\r\n## Current Behavior\r\n\r\nIt looks like [this field](https://github.com/mono/mono/blob/master/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs#L501), when running under MonoDroid, does not exist at all.\r\n\r\nI don't see it when doing this:\r\n\r\n```\r\n                        var privateFields = typeof(ExecutionContext).GetFields(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);\r\n\r\n            System.Reflection.FieldInfo securityContextField = null;\r\n            foreach (var item in privateFields)\r\n            {\r\n                if(item.Name == \"_sc\" && item.FieldType.ToString().Contains(\"SecurityContext\"))\r\n                {\r\n                    securityContextField = item;\r\n                }\r\n            }          \r\n```\r\n\r\n## Expected Behavior\r\n\r\nExecutionContext should flow SecurityContext under Android. This is important for keeping Thread.CurrentPrincipal flowing accross async boundaries for example with Task.Run().\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] MonoDroid\r\n\r\nIt works fine under .NET4.7\r\n\r\n**Version Used**:\r\n\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n\r\n### Stacktrace\r\n\r\n```\r\nPlease paste the stacktrace here if available.\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cptjazz": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6316", "title": "Code page 437 Encoding does not respect EncoderFallback", "body": "## Steps to Reproduce\r\n\r\nThe code page 437 does not respect specified ``EncoderFallback`` rules.\r\n\r\n## Current Behaviour \r\n\r\n**On .NET 4.7 on Windows:**\r\n\r\n    var encoding = Encoding.GetEncoding(437, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback);\r\n    var b = encoding.GetBytes(\"\u010d\".ToCharArray());\r\n    \r\n    -> System.Text.EncoderFallbackException: 'Unable to translate Unicode character \\u010D at index 0 to specified code page.'\r\n\r\n**On Mono 5.0.1 on Linux**\r\n\r\n    var encoding = Encoding.GetEncoding(437, EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback);\r\n    var b = encoding.GetBytes(\"\u010d\".ToCharArray());\r\n    \r\n    -> b[0] == 'c'\r\n\r\n## Expected Behaviour\r\n\r\nMono should respect the specified EncoderFallback and throw an exception, just like on Windows.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jlemay-Matrox": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6315", "title": "X509Chain.ChainStatus property is not implemented with BTLS", "body": "## Current Behavior\r\n\r\nAccessing X509Chain.ChainStatus property throw NotImplementedException when using BTLS instead of old legacy code.\r\n\r\n## Expected Behavior\r\n\r\nWe are supposed to get ChainStatus to be able to manually verify if a self-sign certificate is invalid because it has UntrustedRoot via X509ChainStatusFlags.UntrustedRoot.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nTested with mono 5.2.0.224 with BTLS implementation enabled. But in source code in master branch, the property is still not implemented.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "elasota": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6312", "title": "Ambiguous variant call resolution differs from .NET Framework", "body": "When resolving ambiguous calls using variance, Mono and the .NET Framework have different resolution behavior.\r\n\r\nThe relevant section of the spec (II.12.2) is extremely confusing, and if I'm reading it correctly, both implementations are non-compliant for different reasons.\r\n\r\nThe algorithm that .NET appears to use when making a variant call is to look for an exact match of the interface at the each level of the class hierarchy, and if one exists, call using it.  If that fails, it tries to find a variant match at that level of the class hierarchy, and if that fails too, it descends to the next class in the hierarchy in type declaration order.\r\n\r\nAn important thing is that an exact match won't be used if a variant match is found with a shallower search, which the spec has examples of.  Mono doesn't appear to handle that correctly to begin with (i.e. in the example, removing `IVar<B>` from Ambiguous should cause it to use the `IIfcA` and `IIfcB` matches, because it can resolve those before `IVar<B>` is visible).\r\n\r\nHowever, there's an additional quirk with how .NET does it: If an interface is reimplemented, then any methods that are the same as a previous implementation of the same interface will be skipped.  In the example below, implementing `IVar<B>` in Ambiguous doesn't supply a new implementation of P, so it's ignored when searching for a method to call.\r\n\r\n## Steps to Reproduce\r\n\r\nCompile and run this program:\r\n```csharp\r\nusing System;\r\n\r\nnamespace Tests\r\n{\r\n    public class TestInheritedImplementationDeprioritization\r\n    {\r\n        interface IIfcA { }\r\n        interface IIfcB { }\r\n\r\n        class A { }\r\n        class B : A { }\r\n        class C : B, IIfcA { }\r\n        class D : B, IIfcB { }\r\n\r\n        interface IVar<in T> { void P(T v, bool callB); }\r\n        class S1\r\n        {\r\n            public virtual void P(B v, bool callB) { Console.WriteLine(\"Wrong (Fell through)\"); }\r\n            public virtual void P(A v, bool callB) { Console.WriteLine(\"Wrong (Called A)\"); }\r\n        }\r\n        class S2 : S1, IVar<B>\r\n        {\r\n        }\r\n\r\n        class Ambiguous : S2, IVar<B>, IVar<IIfcA>, IVar<IIfcB>\r\n        {\r\n            void IVar<IIfcA>.P(IIfcA v, bool callB)\r\n            {\r\n                Console.WriteLine(callB ? \"OK\" : \"Wrong\");\r\n            }\r\n\r\n            void IVar<IIfcB>.P(IIfcB v, bool callB)\r\n            {\r\n                Console.WriteLine(callB ? \"Wrong\" : \"OK\");\r\n            }\r\n        }\r\n\r\n        public static void Main()\r\n        {\r\n            ((IVar<C>)new Ambiguous()).P(null, true);\r\n            ((IVar<D>)new Ambiguous()).P(null, false);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Current Behavior\r\n\r\nPrints \"Wrong (Fell through)\" twice unmodified\r\nIf `IVar<B>` is removed from `Ambiguous`, prints \"Wrong (Fell through)\" twice\r\nIf `IVar<B>` is removed from `S2`, prints \"Wrong (Fell through)\" twice\r\nIf `IVar<B>` is removed from `S2` and Ambiguous, prints \"OK\" twice\r\n\r\n## Expected Behavior\r\n\r\nShould print \"OK\" twice unmodified. (.NET Framework does this, but may be a spec violation?)\r\nIf `IVar<B>` is removed from `Ambiguous`, should print \"OK\" twice\r\nIf `IVar<B>` is removed from `S2`, should print \"Wrong (Fell through)\" twice\r\nIf `IVar<B>` is removed from `S2` and Ambiguous, should print \"OK\" twice\r\n\r\n### On which platforms did you notice this\r\n\r\nWindows\r\n\r\n**Version Used**: 5.4.1", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mregen": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6306", "title": "Disposing RSA objects obtained with GetRSAPublicKey/GetRSAPrivateKey makes keys unusable.", "body": "https://github.com/OPCFoundation/UA-.NETStandard/issues/216\r\n\r\n## Steps to Reproduce\r\n\r\nAccording to article https://blogs.msdn.microsoft.com/dotnet/2015/07/20/announcing-net-framework-4-6/, this is best practice how to use a RSA key (public/private):\r\n```\r\npublic static byte[] EncryptDataOaepSha256(X509Certificate2 cert, byte[] data)\r\n{\r\n    using (RSA rsa = cert.GetRSAPublicKey())\r\n    {\r\n        return rsa.Encrypt(data, RSAEncryptionPadding.OaepSHA256);\r\n    }\r\n}\r\n```\r\n\r\n1. EncryptData\r\n2. EncryptData  --> cannot access disposed object\r\n3. \r\n\r\n## Current Behavior\r\n\r\nAfter using function once the RSA object in the cert becomes unusable. Next call throws cannot access disposed object exception. using / Dispose must not be called on RSA object.\r\n\r\n## Expected Behavior\r\n\r\nExpect to call using / dispose on every operation without affecting the cert public or private key.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[x ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**: 5.4 and older\r\n\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n\r\n### Stacktrace\r\nhttps://github.com/OPCFoundation/UA-.NETStandard/issues/216\r\n```\r\nDescription: Could not verify security on OpenSecureChannel request. \r\n=== \r\nId: Bad \r\nDescription: Cannot access a disposed object.\r\nObject name: 'Keypair was disposed'. \r\n>>> Cannot access a disposed object.\r\nObject name: 'Keypair was disposed'. \r\n---   at Mono.Security.Cryptography.RSAManaged.get_KeySize () [0x00012] in <62f5937022004555807e6c57c33f6684>:0  \r\n---   at System.Security.Cryptography.RSACryptoServiceProvider.get_KeySize () [0x0000f] in <62f5937022004555807e6c57c33f6684>:0  \r\n---   at Opc.Ua.Bindings.UaSCUaBinaryChannel.Rsa_GetPlainTextBlockSize (System.Security.Cryptography.X509Certificates.X509Certificate2 encryptingCertificate, System.Boolean useOaep) [0x00018] in /home/martin/UA-.NetStandardLibrary/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Rsa.cs:37  \r\n---   at Opc.Ua.Bindings.UaSCUaBinaryChannel.Rsa_Decrypt (System.ArraySegment`1[T] dataToDecrypt, System.ArraySegment`1[T] headerToCopy, System.Security.Cryptography.X509Certificates.X509Certificate2 encryptingCertificate, System.Boolean useOaep) [0x00032] in /home/martin/UA-.NetStandardLibrary/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Rsa.cs:215  \r\n---   at Opc.Ua.Bindings.UaSCUaBinaryChannel.Decrypt (System.ArraySegment`1[T] dataToDecrypt, System.ArraySegment`1[T] headerToCopy, System.Security.Cryptography.X509Certificates.X509Certificate2 receiverCertificate) [0x000b9] in /home/martin/UA-.NetStandardLibrary/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Asymmetric.cs:1080  \r\n---   at Opc.Ua.Bindings.UaSCUaBinaryChannel.ReadAsymmetricMessage (System.ArraySegment`1[T] buffer, System.Security.Cryptography.X509Certificates.X509Certificate2 receiverCertificate, System.UInt32& channelId, System.Security.Cryptography.X509Certificates.X509Certificate2& senderCertificate, System.UInt32& requestId, System.UInt32& sequenceNumber) [0x001c5] in /home/martin/UA-.NetStandardLibrary/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Asymmetric.cs:860  \r\n---   at Opc.Ua.Bindings.TcpServerChannel.ProcessOpenSecureChannelRequest (System.UInt32 messageType, System.ArraySegment`1[T] messageChunk) [0x00047] in /home/martin/UA-.NetStandardLibrary/Stack/Opc.Ua.Core/Stack/Tcp/TcpServerChannel.cs:755 \r\n\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jalbarl": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6305", "title": "WellKnownAccount.LookupByName fails for incomplete names such as \"Administrators\" instead of \"BUILTIN\\Administrators\"", "body": "## Steps to Reproduce\r\n\r\n1. Download the Intel-SA-00086 Detection Tool (https://downloadcenter.intel.com/download/27150?v=t)\r\n2. Extract the zip file\r\n3. Use ILSpy or a similar tool to extract the embedded assemblies from Intel-SA-00086-console.exe (tool will fail to start otherwise, due to a separate bug, see https://github.com/mono/mono/issues/6301)\r\n4. Run the console application from the DiscoveryTool folder: mono.exe Intel-SA-00086-console.exe -n -f -c\r\n\r\n## Current Behavior\r\n\r\nApplication stops early, due to an unhandled exception (System.Security.Principal.IdentityNotMappedException).\r\n\r\n## Expected Behavior\r\n\r\nThe implementation should be able to successfully resolve the given name.\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ X] Windows (7 x64)\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.4.1 (Visual Studio built mono)\r\n\r\n### Stacktrace\r\n\r\n```\r\nUnhandled Exception:\r\nSystem.Security.Principal.IdentityNotMappedException: Cannot map account name: Administrators\r\n  at System.Security.Principal.NTAccount.Translate (System.Type targetType) [0x0004d] in <ee9b80546f454fd48a31a390370231ef>:0\r\n  at System.Security.AccessControl.ObjectSecurity.SidFromIR (System.Security.Principal.IdentityReference identity) [0x00014] in <ee9b80546f454fd48a31a390370231ef>:0\r\n  at System.Security.AccessControl.CommonObjectSecurity.ModifyAccess (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, System.Boolean& modified) [0x00051] in <ee9b80546f454fd48a31a390370231ef>:0\r\n  at System.Security.AccessControl.CommonObjectSecurity.AddAccessRule (System.Security.AccessControl.AccessRule rule) [0x00000] in <ee9b80546f454fd48a31a390370231ef>:0\r\n  at System.Security.AccessControl.FileSystemSecurity.AddAccessRule (System.Security.AccessControl.FileSystemAccessRule rule) [0x00000] in <ee9b80546f454fd48a31a390370231ef>:0\r\n  at DiscoveryTool.FileExtractor.Extract (System.String directoryName, System.Boolean localization) [0x0001f] in <e9d0a33a973d4799a512096db43e7db3>:0\r\n  at DiscoveryTool.CLI.Program.Main (System.String[] args) [0x000f6] in <e9d0a33a973d4799a512096db43e7db3>:0\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/6301", "title": "Static constructor doesn't run before JITing Main entrypoint", "body": "## Steps to Reproduce\r\n\r\n1. Download the Intel-SA-00086 Detection Tool (https://downloadcenter.intel.com/download/27150?v=t)\r\n2. Extract the zip file and run the console application from the DiscoveryTool folder: mono.exe Intel-SA-00086-console.exe -n -f -c \r\n\r\n## Current Behavior\r\nThe application won't start, because mono cannot find a file (it might be embedded into the binary - because it is not present on the filesystem)\r\n\r\n## Expected Behavior\r\nThe application is working fine on a separate machine, which has .Net 4.5 installed. I may be trying to do something that is unsupported, or I just ran into the \"not implemented\" area. I tried to find more information about this kind of error message, but it is still unclear if the application should start correctly or not (maybe adding some more information on the stack trace would help debug the issue).\r\n\r\n### On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[ ] Linux\r\n[ X] Windows (7 x64)\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.4.1 (Visual Studio built mono)\r\nThis is the standard x64 version downloaded from http://www.mono-project.com\r\nI initially used version 5.0.0, with the same result.\r\n\r\n### Stacktrace\r\n\r\n```\r\nUnhandled Exception:\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Intel-SA-00086-console-DLL, Version=1.0.0.146, Culture=neutral, PublicKeyToken=null' or one of its dependencies.\r\nFile name: 'Intel-SA-00086-console-DLL, Version=1.0.0.146, Culture=neutral, PublicKeyToken=null'\r\n[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.FileNotFoundException: Could not load file or assembly 'Intel-SA-00086-console-DLL, Version=1.0.0.146, Culture=neutral, PublicKeyToken=null' or one of its dependencies.\r\nFile name: 'Intel-SA-00086-console-DLL, Version=1.0.0.146, Culture=neutral, PublicKeyToken=null'\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mfilippov": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6299", "title": "Crash in mono debugger.", "body": "## Steps to Reproduce\r\n\r\n1. Attach to Rider backend process\r\n2. Debugger step into \r\n## Current Behavior\r\n\r\nMono crashed\r\n\r\n## Expected Behavior\r\n\r\nExecute step into\r\n\r\n### On which platforms did you notice this\r\n\r\n[ X] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nmono 5.4.1.5\r\n\r\nWe compiled the debug version of mono, attach to runtime with VS Code and reproduce crash.\r\nThis is screenshot with debuger state in exception time:\r\n![2017-12-20_18-08-29](https://user-images.githubusercontent.com/927432/34213863-94300c90-e5b1-11e7-9ec1-6e2783bb4148.png)\r\n\r\n\r\n### Stacktrace\r\n\r\n```\r\nStacktrace:\r\n\r\n  at <unknown> <0xffffffff>\r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&) [0x00016] in <70fd265747c64acc8035fc9de48250f9>:0\r\n  at System.Reflection.MonoMethod.Invoke (object,System.Reflection.BindingFlags,System.Reflection.Binder,object[],System.Globalization.CultureInfo) [0x00038] in <70fd265747c64acc8035fc9de48250f9>:0\r\n  at System.Reflection.MethodBase.Invoke (object,object[]) [0x00006] in <70fd265747c64acc8035fc9de48250f9>:0\r\n  at JetBrains.Application.Environment.RunsPublicStaticIntMain/<>c__DisplayClass0_0.<.ctor>b__0 () [0x00289] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/RunsPublicStaticIntMain.cs:81\r\n  at JetBrains.Util.Logging.Logger.Catch (System.Action) [0x00016] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Core/Src/Logging/Logger.cs:339\r\n  at JetBrains.Application.Threading.IThreadingEx/<>c__DisplayClass13_1.<ExecuteOrQueueWhenNotGuarded>b__2 () [0x0003a] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Threading/IThreadingEx.cs:329\r\n  at JetBrains.Threading.JetDispatcher/Closure.Execute () [0x0009e] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Core/Src/Concurrency/Dispatcher/JetDispatcher.cs:615\r\n  at JetBrains.Util.Concurrency.UnixJetDispatcher/UnixJetDispatcherStaticMethods.IsolatedlyProcessClosure (JetBrains.Threading.JetDispatcher/Closure) [0x00011] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Core/Src/Concurrency/Dispatcher/UnixJetDispatcher.cs:246\r\n  at JetBrains.Util.Concurrency.UnixJetDispatcher/UnixJetDispatcherStaticMethods.Run (System.Func`1<bool>,System.TimeSpan,bool) [0x00073] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Core/Src/Concurrency/Dispatcher/UnixJetDispatcher.cs:273\r\n  at JetBrains.Threading.JetDispatcher.Run (System.Func`1<bool>,System.TimeSpan,bool) [0x00001] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Core/Src/Concurrency/Dispatcher/JetDispatcher.cs:263\r\n  at JetBrains.Application.Environment.IJetHostEx.RunHostMessageLoop (JetBrains.Application.Components.IComponentContainer) [0x00058] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/IJetHostEx.cs:115\r\n  at JetBrains.Application.Environment.HostParameters.MessagePumpMainLoopHostMixin.JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.RunMainLoop (JetBrains.Application.Components.ComponentContainer) [0x00001] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/HostParameters/Common/MessagePumpMainLoopHostMixin.cs:23\r\n  at JetBrains.Application.Environment.HostParameters.JetHostParametersCaller.RunMainLoop (JetBrains.Application.Components.ComponentContainer) [0x000a8] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/HostParameters/Interface/JetHostParametersCaller.cs:195\r\n  at JetBrains.Application.Environment.JetEnvironment.InternalRun (JetBrains.Application.Environment.HostParameters.JetHostParametersCaller,JetBrains.Application.Components.ComponentContainer) [0x00012] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/JetEnvironment.cs:251\r\n  at JetBrains.Application.Environment.JetEnvironment.CreateAndRun (JetBrains.Application.Environment.JetHostItems/Full) [0x00034] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/JetEnvironment.cs:137\r\n  at JetBrains.Application.Environment.JetHostItems.CreateAndRun (JetBrains.Application.Environment.JetHostItems/Full) [0x00014] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/Shell/Src/Application/Environment/Infra/JetHostItems.cs:25\r\n  at JetBrains.ReSharper.Host.Product.ReSharperHostProgram.MainX (System.Reflection.Assembly,JetBrains.Application.BuildScript.Application.HostInfo,string[]) [0x0000e] in /Users/mfilippov/Developer/ReSharperHost/ReSharperAutomationTools/src/ReSharperHost/ReSharperHost/Product/ReSharperHostProgram.cs:52\r\n  at JetBrains.ReSharper.Host.Product.ReSharperHostProgram/<>c.<Main>b__0_0 (JetBrains.DataFlow.Lifetime) [0x00038] in /Users/mfilippov/Developer/ReSharperHost/ReSharperAutomationTools/src/ReSharperHost/ReSharperHost/Product/ReSharperHostProgram.cs:29\r\n  at JetBrains.DataFlow.Lifetimes.Using<int> (System.Func`2<JetBrains.DataFlow.Lifetime, int>) [0x00027] in /Users/mfilippov/Developer/ReSharperHost/Platform/Core/Shell/RdCore/Src/Lifetime/Lifetimes.cs:283\r\n  at JetBrains.ReSharper.Host.Product.ReSharperHostProgram.Main () [0x0000c] in /Users/mfilippov/Developer/ReSharperHost/ReSharperAutomationTools/src/ReSharperHost/ReSharperHost/Product/ReSharperHostProgram.cs:23\r\n  at (wrapper runtime-invoke) <Module>.runtime_invoke_int (object,intptr,intptr,intptr) [0x00053] in <34bdcad9891b422f87a7118ffa623337>:0\r\n\r\nNative stacktrace:\r\n\r\n  0   mono-sgen                           0x0000000107baad63 mono_handle_native_crash + 291\r\n  1   mono-sgen                           0x0000000107c8a45b altstack_handle_and_restore + 91\r\n  2   mono-sgen                           0x0000000107bee61c ss_start + 364\r\n  3   mono-sgen                           0x0000000107be0d05 process_single_step_inner + 1269\r\n  4   mono-sgen                           0x0000000107be079f debugger_agent_single_step_from_context + 319\r\n  5   ???                                 0x00000001081c651f 0x0 + 4431045919\r\n  6   ???                                 0x000000011de19369 0x0 + 4796289897\r\n  7   ???                                 0x000000012967bb59 0x0 + 4989631321\r\n  8   ???                                 0x000000011747a57b 0x0 + 4685538683\r\n  9   ???                                 0x000000011db9cdee 0x0 + 4793683438\r\n  10  ???                                 0x00000001189deeee 0x0 + 4707970798\r\n\r\nDebug info from gdb:\r\n\r\n(lldb) command source -s 0 '/tmp/mono-gdb-commands.QCJTT7'\r\nExecuting commands in '/tmp/mono-gdb-commands.QCJTT7'.\r\n(lldb) process attach --pid 54070\r\nProcess 54070 stopped\r\n* thread #1, name = 'tid_307', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n    frame #0: 0x00007fff57729502 libsystem_kernel.dylib`__wait4 + 10\r\nlibsystem_kernel.dylib`__wait4:\r\n->  0x7fff57729502 <+10>: jae    0x7fff5772950c            ; <+20>\r\n    0x7fff57729504 <+12>: movq   %rax, %rdi\r\n    0x7fff57729507 <+15>: jmp    0x7fff577200dd            ; cerror\r\n    0x7fff5772950c <+20>: retq   \r\nTarget 0: (mono-sgen) stopped.\r\n\r\nExecutable module set to \"/Users/mfilippov/Developer/ReSharperHost/Bin.ReSharperHost/macos-x64/mono/bin/mono-sgen\".\r\nArchitecture set to: x86_64h-apple-macosx.\r\n(lldb) thread list\r\nProcess 54070 stopped\r\n* thread #1: tid = 0x5e83dc, 0x00007fff57729502 libsystem_kernel.dylib`__wait4 + 10, name = 'tid_307', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n  thread #2: tid = 0x5e83df, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'SGen worker'\r\n  thread #3: tid = 0x5e83e0, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'SGen worker'\r\n  thread #4: tid = 0x5e83e3, 0x00007fff5771f7fe libsystem_kernel.dylib`semaphore_wait_trap + 10, name = 'Finalizer'\r\n  thread #5: tid = 0x5e83e4, 0x00007fff57728f0a libsystem_kernel.dylib`__recvfrom + 10, name = 'Debugger agent'\r\n  thread #6: tid = 0x5e83ea, 0x00007fff57729562 libsystem_kernel.dylib`__workq_kernreturn + 10\r\n  thread #7: tid = 0x5e8469, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'WatchParentPid:54063'\r\n  thread #8: tid = 0x5e846a, 0x00007fff57729ec2 libsystem_kernel.dylib`kevent + 10, name = 'tid_2e03'\r\n  thread #9: tid = 0x5e84fc, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool Manager'\r\n  thread #10: tid = 0x5e84fd, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'StaExecutor'\r\n  thread #11: tid = 0x5e8538, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (S) Regular thread #1'\r\n  thread #12: tid = 0x5e8539, 0x00007fff57728a62 libsystem_kernel.dylib`__munmap + 10, name = 'JetPool (S) Regular thread #2'\r\n  thread #13: tid = 0x5e853a, 0x0000000107ba0c10 mono-sgen`get_callee_mask(spec='\\xff') at mini-codegen.c:1098, name = 'JetPool (S) Regular thread #3'\r\n  thread #14: tid = 0x5e853b, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (S) Regular thread #4'\r\n  thread #15: tid = 0x5e853c, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (S) Regular thread #5'\r\n  thread #16: tid = 0x5e853d, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (S) Regular thread #6'\r\n  thread #17: tid = 0x5e853e, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (S) Regular thread #7'\r\n  thread #18: tid = 0x5e853f, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (L) Regular thread #1'\r\n  thread #19: tid = 0x5e8540, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (L) Regular thread #2'\r\n  thread #20: tid = 0x5e8541, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool (L) Regular thread #3'\r\n  thread #21: tid = 0x5e85cb, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'FileSystemTrackerCommit'\r\n  thread #22: tid = 0x5e85cd, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'JetPool Manager'\r\n  thread #23: tid = 0x5e85ce, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'StaExecutor'\r\n  thread #24: tid = 0x5e85d2, 0x00007fff57862a14 libsystem_pthread.dylib`pthread_getspecific + 9, name = 'Timer-Scheduler'\r\n  thread #25: tid = 0x5e85d5, 0x00007fff5772a41a libsystem_kernel.dylib`read + 10, name = 'Threadpool worker'\r\n  thread #26: tid = 0x5e85d7, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #27: tid = 0x5e85d8, 0x00007fff5772a41a libsystem_kernel.dylib`read + 10, name = 'Threadpool worker'\r\n  thread #28: tid = 0x5e8614, 0x00007fff57728f0a libsystem_kernel.dylib`__recvfrom + 10, name = 'ClientSocket-MainWire'\r\n  thread #29: tid = 0x5e866c, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'ClientSocket-MainWire-AsyncSendProcessor'\r\n  thread #30: tid = 0x5e86f9, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'UsageDbManager'\r\n  thread #31: tid = 0x5e86fb, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'ActivityLogsSubmitter'\r\n  thread #32: tid = 0x5e8709, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'LevelDbAutocommitTransaction'\r\n  thread #33: tid = 0x5e89f2, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'LevelDbAutocommitTransaction'\r\n  thread #34: tid = 0x5e8ab9, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'TaskProcessor for unit test tasks.'\r\n  thread #35: tid = 0x5e8bb8, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'LevelDbAutocommitTransaction'\r\n  thread #36: tid = 0x5e8bde, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'MsBuild Protocol Thread'\r\n  thread #37: tid = 0x5e8bdf, 0x00007fff57728f0a libsystem_kernel.dylib`__recvfrom + 10, name = 'ServerSocket-MsBuildExternalProcess'\r\n  thread #38: tid = 0x5e8c29, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'ServerSocket-MsBuildExternalProcess-AsyncSendProcessor'\r\n  thread #39: tid = 0x5e8ce4, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'SolutionBuilderControllerPrototype_Executor'\r\n  thread #40: tid = 0x5e8cf5, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'XmlIndexThread'\r\n  thread #41: tid = 0x5e8d01, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'CacheJobService'\r\n  thread #42: tid = 0x5e8d21, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'DaemonThread'\r\n  thread #43: tid = 0x5e8eb9, 0x00007fff577281be libsystem_kernel.dylib`__accept + 10, name = 'tid_b603'\r\n  thread #44: tid = 0x5e903d, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n  thread #45: tid = 0x5e9140, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'FileLogEventListener.Flusher:backend.log'\r\n  thread #46: tid = 0x5e9141, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'FileLogEventListener.Flusher:backend-protocol.log'\r\n  thread #47: tid = 0x5ebbcd, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'tid_10e03'\r\n  thread #48: tid = 0x5efc90, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #49: tid = 0x5efc92, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #50: tid = 0x5efc99, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #51: tid = 0x5efc9a, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #52: tid = 0x5efc9b, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #53: tid = 0x5efc9c, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #54: tid = 0x5efc9f, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #55: tid = 0x5efca0, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #56: tid = 0x5efca1, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n  thread #57: tid = 0x5efca2, 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'Threadpool worker'\r\n(lldb) thread backtrace all\r\n* thread #1, name = 'tid_307', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n  * frame #0: 0x00007fff57729502 libsystem_kernel.dylib`__wait4 + 10\r\n    frame #1: 0x0000000107baae7f mono-sgen`mono_handle_native_crash(signal=\"SIGSEGV\", ctx=0x0000000000000000, info=0x0000000000000000) at mini-exceptions.c:2720\r\n    frame #2: 0x0000000107c8a45b mono-sgen`altstack_handle_and_restore(ctx=0x00007ffee8173ae0, obj=0x0000000000000000, stack_ovf=0) at exceptions-amd64.c:799\r\n    frame #3: 0x0000000107bee61c mono-sgen`ss_start(ss_req=0x00007fa3c566a100, method=0x00007fa3e2483ca8, sp=0x00007ffee8173f18, info=0x00007fa3eaca91a0, ctx=0x00007fa3e1814128, tls=0x00007fa3e1813800, step_to_catch=0, frames=0x00007fa3d23f12b0, nframes=20) at debugger-agent.c:5538\r\n    frame #4: 0x0000000107be0d05 mono-sgen`process_single_step_inner(tls=0x00007fa3e1813800, from_signal=0) at debugger-agent.c:5209\r\n    frame #5: 0x0000000107be079f mono-sgen`debugger_agent_single_step_from_context(ctx=0x00007ffee81741b0) at debugger-agent.c:5291\r\n    frame #6: 0x00000001081c651f\r\n    frame #7: 0x000000011de19369\r\n    frame #8: 0x000000012967bb59\r\n    frame #9: 0x000000011747a57b\r\n    frame #10: 0x000000011db9cdee\r\n    frame #11: 0x00000001189deeee\r\n  thread #2, name = 'SGen worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107ed0f5d mono-sgen`mono_os_cond_wait(cond=0x000000010801ecf8, mutex=0x000000010801ecb8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107ed0b3d mono-sgen`thread_func(thread_data=0x000000010801ecb0) at sgen-thread-pool.c:108\r\n    frame #4: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #5: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #6: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #3, name = 'SGen worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107ed0f5d mono-sgen`mono_os_cond_wait(cond=0x000000010801d578, mutex=0x000000010801d538) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107ed0b3d mono-sgen`thread_func(thread_data=0x0000000108231108) at sgen-thread-pool.c:108\r\n    frame #4: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #5: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #6: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #4, name = 'Finalizer'\r\n    frame #0: 0x00007fff5771f7fe libsystem_kernel.dylib`semaphore_wait_trap + 10\r\n    frame #1: 0x0000000107de2e4a mono-sgen`mono_os_sem_wait(sem=0x000000010800e968, flags=MONO_SEM_FLAGS_ALERTABLE) at mono-os-semaphore.h:91\r\n    frame #2: 0x0000000107de1db8 mono-sgen`mono_coop_sem_wait(sem=0x000000010800e968, flags=MONO_SEM_FLAGS_ALERTABLE) at mono-coop-semaphore.h:43\r\n    frame #3: 0x0000000107de3868 mono-sgen`finalizer_thread(unused=0x0000000000000000) at gc.c:864\r\n    frame #4: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000012d0ec8) at threads.c:829\r\n    frame #5: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e0c11cb0) at threads.c:891\r\n    frame #6: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #7: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #8: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #5, name = 'Debugger agent'\r\n    frame #0: 0x00007fff57728f0a libsystem_kernel.dylib`__recvfrom + 10\r\n    frame #1: 0x0000000107bf75ba mono-sgen`socket_transport_recv(buf=2001-01-01 00:00:00 UTC, len=11) at debugger-agent.c:1148\r\n    frame #2: 0x0000000107be337e mono-sgen`transport_recv(buf=2001-01-01 00:00:00 UTC, len=11) at debugger-agent.c:1554\r\n    frame #3: 0x0000000107be2739 mono-sgen`debugger_thread(arg=0x0000000000000000) at debugger-agent.c:10338\r\n    frame #4: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000014d3ec8) at threads.c:829\r\n    frame #5: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e0c15a20) at threads.c:891\r\n    frame #6: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #7: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #8: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #6\r\n    frame #0: 0x00007fff57729562 libsystem_kernel.dylib`__workq_kernreturn + 10\r\n    frame #1: 0x00007fff5786406a libsystem_pthread.dylib`_pthread_wqthread + 1035\r\n    frame #2: 0x00007fff57863c4d libsystem_pthread.dylib`start_wqthread + 13\r\n  thread #7, name = 'WatchParentPid:54063'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107ef54ce mono-sgen`mono_os_cond_timedwait(cond=0x000000010801e048, mutex=0x000000010801e008, timeout_ms=1000) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107ef50e0 mono-sgen`mono_coop_cond_timedwait(cond=0x000000010801e048, mutex=0x000000010801e008, timeout_ms=1000) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107ef398a mono-sgen`sleep_interruptable(ms=1000, alerted=0x000070000185f52c) at mono-threads.c:1200\r\n    frame #5: 0x0000000107ef36d6 mono-sgen`mono_thread_info_sleep(ms=1000, alerted=0x000070000185f52c) at mono-threads.c:1232\r\n    frame #6: 0x0000000107d9b0dd mono-sgen`ves_icall_System_Threading_Thread_Sleep_internal(ms=1000) at threads.c:1461\r\n    frame #7: 0x00000001144dbcaf\r\n    frame #8: 0x000000010bfac4d3\r\n    frame #9: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c026f50, params=0x000070000185fea0, exc=0x0000000000000000, error=0x000070000185fe20) at mini-runtime.c:2791\r\n    frame #10: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c026f50, params=0x000070000185fea0, exc=0x0000000000000000, error=0x000070000185fe20) at object.c:2862\r\n    frame #11: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c026f50, params=0x000070000185fea0, error=0x000070000185fe20) at object.c:3016\r\n    frame #12: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c026f50, params=0x000070000185fea0, exc=0x0000000000000000, error=0x000070000185fe20) at object.c:3958\r\n    frame #13: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c026f50, params=0x000070000185fea0, error=0x000070000185fe20) at object.c:3977\r\n    frame #14: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000070000185fec8) at threads.c:837\r\n    frame #15: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e3302d40) at threads.c:891\r\n    frame #16: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #17: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #18: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #8, name = 'tid_2e03'\r\n    frame #0: 0x00007fff57729ec2 libsystem_kernel.dylib`kevent + 10\r\n    frame #1: 0x0000000107cfe062 mono-sgen`ves_icall_System_IO_KqueueMonitor_kevent_notimeout(kq_ptr=0x000000010c0339c4, changelist=0x00007fa3e0e24670, nchanges=0, eventlist=0x00007fa3e20d6600, nevents=32) at filewatcher.c:244\r\n    frame #2: 0x0000000114527e66\r\n    frame #3: 0x000000011450348b\r\n    frame #4: 0x0000000114502d63\r\n    frame #5: 0x000000010bfac4d3\r\n    frame #6: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c033c48, params=0x0000700001a62ea0, exc=0x0000000000000000, error=0x0000700001a62e20) at mini-runtime.c:2791\r\n    frame #7: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c033c48, params=0x0000700001a62ea0, exc=0x0000000000000000, error=0x0000700001a62e20) at object.c:2862\r\n    frame #8: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c033c48, params=0x0000700001a62ea0, error=0x0000700001a62e20) at object.c:3016\r\n    frame #9: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c033c48, params=0x0000700001a62ea0, exc=0x0000000000000000, error=0x0000700001a62e20) at object.c:3958\r\n    frame #10: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c033c48, params=0x0000700001a62ea0, error=0x0000700001a62e20) at object.c:3977\r\n    frame #11: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700001a62ec8) at threads.c:837\r\n    frame #12: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e3075d90) at threads.c:891\r\n    frame #13: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #14: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #15: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #9, name = 'JetPool Manager'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd568e mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e102fd28, mutex=0x00007fa3e102fce8, timeout_ms=49) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e102fd28, mutex=0x00007fa3e102fce8, timeout=49, poll=0, alerted=0x000070000206ae50) at w32handle.c:956\r\n    frame #4: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x000000000000282b, timeout=49, poll=0, alerted=0x000070000206ae50) at w32handle.c:1071\r\n    frame #5: 0x0000000107dd3b0d mono-sgen`mono_w32handle_wait_one(handle=0x000000000000282b, timeout=49, alertable=1) at w32handle.c:1190\r\n    frame #6: 0x0000000107dd3f60 mono-sgen`mono_w32handle_wait_multiple(handles=0x000070000206b360, nhandles=1, waitall=0, timeout=49, alertable=1) at w32handle.c:1224\r\n    frame #7: 0x0000000107d9c49b mono-sgen`mono_wait_uninterrupted(thread=0x0000000109854a28, numhandles=1, handles=0x000070000206b360, waitall=0, ms=49, error=0x000070000206b2f0) at threads.c:1892\r\n    frame #8: 0x0000000107d9c7b3 mono-sgen`ves_icall_System_Threading_WaitHandle_WaitOne_internal(handle=0x000000000000282b, ms=49) at threads.c:2017\r\n    frame #9: 0x0000000114503f5f\r\n    frame #10: 0x0000000114503983\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c43a5e0, params=0x000070000206bea0, exc=0x0000000000000000, error=0x000070000206be20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c43a5e0, params=0x000070000206bea0, exc=0x0000000000000000, error=0x000070000206be20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c43a5e0, params=0x000070000206bea0, error=0x000070000206be20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c43a5e0, params=0x000070000206bea0, exc=0x0000000000000000, error=0x000070000206be20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c43a5e0, params=0x000070000206bea0, error=0x000070000206be20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000070000206bec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e0de4520) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #10, name = 'StaExecutor'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e102ffd0, mutex=0x00007fa3e102ff90) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e102ffd0, mutex=0x00007fa3e102ff90, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e102ffd0, mutex=0x00007fa3e102ff90, timeout=4294967295, poll=0, alerted=0x000070000226e210) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x0000000000002830, timeout=4294967295, poll=0, alerted=0x000070000226e210) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x0000000000002830, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c43dac0, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x0000000115a7cb7b\r\n    frame #11: 0x0000000115a7c64a\r\n    frame #12: 0x000000010bfae006\r\n    frame #13: 0x000000010bfac4d3\r\n    frame #14: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c43cee8, params=0x000070000226eea0, exc=0x0000000000000000, error=0x000070000226ee20) at mini-runtime.c:2791\r\n    frame #15: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c43cee8, params=0x000070000226eea0, exc=0x0000000000000000, error=0x000070000226ee20) at object.c:2862\r\n    frame #16: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c43cee8, params=0x000070000226eea0, error=0x000070000226ee20) at object.c:3016\r\n    frame #17: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c43cee8, params=0x000070000226eea0, exc=0x0000000000000000, error=0x000070000226ee20) at object.c:3958\r\n    frame #18: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c43cee8, params=0x000070000226eea0, error=0x000070000226ee20) at object.c:3977\r\n    frame #19: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000070000226eec8) at threads.c:837\r\n    frame #20: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e323c700) at threads.c:891\r\n    frame #21: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #22: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #23: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #11, name = 'JetPool (S) Regular thread #1'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1030498, mutex=0x00007fa3e1030458) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1030498, mutex=0x00007fa3e1030458, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1030498, mutex=0x00007fa3e1030458, timeout=4294967295, poll=0, alerted=0x00007000024712b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x0000000000002839, timeout=4294967295, poll=0, alerted=0x00007000024712b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x0000000000002839, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c5206a0, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c5207d8, params=0x0000700002471ea0, exc=0x0000000000000000, error=0x0000700002471e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c5207d8, params=0x0000700002471ea0, exc=0x0000000000000000, error=0x0000700002471e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c5207d8, params=0x0000700002471ea0, error=0x0000700002471e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c5207d8, params=0x0000700002471ea0, exc=0x0000000000000000, error=0x0000700002471e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c5207d8, params=0x0000700002471ea0, error=0x0000700002471e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700002471ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e34ab020) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #12, name = 'JetPool (S) Regular thread #2'\r\n    frame #0: 0x00007fff57728a62 libsystem_kernel.dylib`__munmap + 10\r\n    frame #1: 0x0000000107ee2722 mono-sgen`mono_vfree(addr=0x000000012be00000, length=1048576, type=MONO_MEM_ACCOUNT_SGEN_LOS) at mono-mmap.c:262\r\n    frame #2: 0x0000000107eafded mono-sgen`sgen_free_os_memory(addr=0x000000012be00000, size=1048576, flags=SGEN_ALLOC_HEAP, type=MONO_MEM_ACCOUNT_SGEN_LOS) at sgen-memory-governor.c:428\r\n    frame #3: 0x0000000107e62a1c mono-sgen`sgen_los_sweep at sgen-los.c:483\r\n    frame #4: 0x0000000107e5c37e mono-sgen`major_finish_collection(gc_thread_gray_queue=0x0000700002673980, reason=\"user request\", is_overflow=0, old_next_pin_slot=1095, forced=1) at sgen-gc.c:2188\r\n    frame #5: 0x0000000107e56352 mono-sgen`major_do_collection(reason=\"user request\", is_overflow=0, forced=1) at sgen-gc.c:2249\r\n    frame #6: 0x0000000107e54fc9 mono-sgen`sgen_perform_collection(requested_size=0, generation_to_collect=1, reason=\"user request\", wait_to_finish=1, stw=1) at sgen-gc.c:2446\r\n    frame #7: 0x0000000107e575ee mono-sgen`sgen_gc_collect(generation=1) at sgen-gc.c:2944\r\n    frame #8: 0x0000000107e3dec3 mono-sgen`mono_gc_collect(generation=1) at sgen-mono.c:2635\r\n    frame #9: 0x0000000107de1e83 mono-sgen`ves_icall_System_GC_InternalCollect(generation=1) at gc.c:529\r\n  thread #13, name = 'JetPool (S) Regular thread #3'\r\n    frame #0: 0x0000000107ba0c10 mono-sgen`get_callee_mask(spec='\\xff') at mini-codegen.c:1098\r\n    frame #1: 0x0000000107b9d3ed mono-sgen`mono_local_regalloc(cfg=0x00007fa3d73fb200, bb=0x00007fa3c6e40d88) at mini-codegen.c:1345\r\n    frame #2: 0x0000000107a8f57f mono-sgen`mono_codegen(cfg=0x00007fa3d73fb200) at mini.c:2224\r\n    frame #3: 0x0000000107a92be6 mono-sgen`mini_method_compile(method=0x00007fa3ddb50390, opts=370239999, domain=0x00007fa3e0d02e40, flags=JIT_FLAG_RUN_CCTORS, parts=0, aot_method_index=-1) at mini.c:3839\r\n    frame #4: 0x0000000107a96bd8 mono-sgen`mono_jit_compile_method_inner(method=0x00007fa3ddb50390, target_domain=0x00007fa3e0d02e40, opt=370239999, error=0x0000700002876658) at mini.c:4167\r\n    frame #5: 0x0000000107a9c13b mono-sgen`mono_jit_compile_method_with_opt(method=0x00007fa3ddb50390, opt=370239999, jit_only=0, error=0x0000700002876658) at mini-runtime.c:2129\r\n    frame #6: 0x0000000107a9ba3d mono-sgen`mono_jit_compile_method(method=0x00007fa3ddb50390, error=0x0000700002876658) at mini-runtime.c:2175\r\n    frame #7: 0x0000000107a9e902 mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3ddb50390, obj=0x0000000000000000, params=0x0000000000000000, exc=0x0000700002875c60, error=0x0000700002876658) at mini-runtime.c:2676\r\n    frame #8: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3ddb50390, obj=0x0000000000000000, params=0x0000000000000000, exc=0x0000700002875c60, error=0x0000700002876658) at object.c:2862\r\n    frame #9: 0x0000000107dea668 mono-sgen`mono_runtime_try_invoke(method=0x00007fa3ddb50390, obj=0x0000000000000000, params=0x0000000000000000, exc=0x0000700002875c60, error=0x0000700002876658) at object.c:2970\r\n    frame #10: 0x0000000107de9ebe mono-sgen`mono_runtime_class_init_full(vtable=0x00007fa3c80cdaf0, error=0x0000700002876658) at object.c:471\r\n    frame #11: 0x0000000107a974ef mono-sgen`mono_jit_compile_method_inner(method=0x00007fa3c80cb9f8, target_domain=0x00007fa3e0d02e40, opt=370239999, error=0x0000700002876658) at mini.c:4341\r\n    frame #12: 0x0000000107a9c13b mono-sgen`mono_jit_compile_method_with_opt(method=0x00007fa3c80cb9f8, opt=370239999, jit_only=0, error=0x0000700002876658) at mini-runtime.c:2129\r\n    frame #13: 0x0000000107a9ba3d mono-sgen`mono_jit_compile_method(method=0x00007fa3c80cb9f8, error=0x0000700002876658) at mini-runtime.c:2175\r\n    frame #14: 0x0000000107a9e902 mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3c80cb9f8, obj=0x000000010fdb27f8, params=0x0000000000000000, exc=0x0000000000000000, error=0x0000700002876658) at mini-runtime.c:2676\r\n    frame #15: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3c80cb9f8, obj=0x000000010fdb27f8, params=0x0000000000000000, exc=0x0000000000000000, error=0x0000700002876658) at object.c:2862\r\n    frame #16: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3c80cb9f8, obj=0x000000010fdb27f8, params=0x0000000000000000, error=0x0000700002876658) at object.c:3016\r\n    frame #17: 0x0000000107df431f mono-sgen`mono_runtime_try_invoke_array(method=0x00007fa3c80cb9f8, obj=0x000000010fdb27f8, params=0x0000000000000000, exc=0x0000000000000000, error=0x0000700002876658) at object.c:5109\r\n    frame #18: 0x0000000107df4784 mono-sgen`mono_runtime_invoke_array_checked(method=0x00007fa3c80cb9f8, obj=0x0000000000000000, params=0x0000000000000000, error=0x0000700002876658) at object.c:5010\r\n    frame #19: 0x0000000107d0a103 mono-sgen`ves_icall_InternalInvoke(method=0x000000010fdb2788, this_arg=0x0000000000000000, params=0x0000000000000000, exc=0x00007000028767a8) at icall.c:3298\r\n    frame #20: 0x000000010a1ac230\r\n    frame #21: 0x000000011454cce3\r\n  thread #14, name = 'JetPool (S) Regular thread #4'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1034458, mutex=0x00007fa3e1034418) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1034458, mutex=0x00007fa3e1034418, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1034458, mutex=0x00007fa3e1034418, timeout=4294967295, poll=0, alerted=0x0000700002a7a2b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028b1, timeout=4294967295, poll=0, alerted=0x0000700002a7a2b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028b1, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c522288, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522380, params=0x0000700002a7aea0, exc=0x0000000000000000, error=0x0000700002a7ae20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522380, params=0x0000700002a7aea0, exc=0x0000000000000000, error=0x0000700002a7ae20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c522380, params=0x0000700002a7aea0, error=0x0000700002a7ae20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c522380, params=0x0000700002a7aea0, exc=0x0000000000000000, error=0x0000700002a7ae20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c522380, params=0x0000700002a7aea0, error=0x0000700002a7ae20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700002a7aec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e3268d20) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #15, name = 'JetPool (S) Regular thread #5'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1033ce8, mutex=0x00007fa3e1033ca8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1033ce8, mutex=0x00007fa3e1033ca8, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1033ce8, mutex=0x00007fa3e1033ca8, timeout=4294967295, poll=0, alerted=0x0000700002c7d2b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028a3, timeout=4294967295, poll=0, alerted=0x0000700002c7d2b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028a3, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c522650, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522748, params=0x0000700002c7dea0, exc=0x0000000000000000, error=0x0000700002c7de20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522748, params=0x0000700002c7dea0, exc=0x0000000000000000, error=0x0000700002c7de20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c522748, params=0x0000700002c7dea0, error=0x0000700002c7de20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c522748, params=0x0000700002c7dea0, exc=0x0000000000000000, error=0x0000700002c7de20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c522748, params=0x0000700002c7dea0, error=0x0000700002c7de20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700002c7dec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e0c0fde0) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #16, name = 'JetPool (S) Regular thread #6'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1033f08, mutex=0x00007fa3e1033ec8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1033f08, mutex=0x00007fa3e1033ec8, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1033f08, mutex=0x00007fa3e1033ec8, timeout=4294967295, poll=0, alerted=0x0000700002e802b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028a7, timeout=4294967295, poll=0, alerted=0x0000700002e802b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028a7, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c522a18, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522b10, params=0x0000700002e80ea0, exc=0x0000000000000000, error=0x0000700002e80e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522b10, params=0x0000700002e80ea0, exc=0x0000000000000000, error=0x0000700002e80e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c522b10, params=0x0000700002e80ea0, error=0x0000700002e80e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c522b10, params=0x0000700002e80ea0, exc=0x0000000000000000, error=0x0000700002e80e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c522b10, params=0x0000700002e80ea0, error=0x0000700002e80e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700002e80ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e34aaf80) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #17, name = 'JetPool (S) Regular thread #7'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1033bd8, mutex=0x00007fa3e1033b98) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1033bd8, mutex=0x00007fa3e1033b98, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1033bd8, mutex=0x00007fa3e1033b98, timeout=4294967295, poll=0, alerted=0x00007000030832b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028a1, timeout=4294967295, poll=0, alerted=0x00007000030832b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028a1, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c522de0, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522ed8, params=0x0000700003083ea0, exc=0x0000000000000000, error=0x0000700003083e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c522ed8, params=0x0000700003083ea0, exc=0x0000000000000000, error=0x0000700003083e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c522ed8, params=0x0000700003083ea0, error=0x0000700003083e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c522ed8, params=0x0000700003083ea0, exc=0x0000000000000000, error=0x0000700003083e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c522ed8, params=0x0000700003083ea0, error=0x0000700003083e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700003083ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e0f665e0) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #18, name = 'JetPool (L) Regular thread #1'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e10351a0, mutex=0x00007fa3e1035160) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e10351a0, mutex=0x00007fa3e1035160, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e10351a0, mutex=0x00007fa3e1035160, timeout=4294967295, poll=0, alerted=0x00007000032862b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028ca, timeout=4294967295, poll=0, alerted=0x00007000032862b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028ca, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c5231a8, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c5232b0, params=0x0000700003286ea0, exc=0x0000000000000000, error=0x0000700003286e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c5232b0, params=0x0000700003286ea0, exc=0x0000000000000000, error=0x0000700003286e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c5232b0, params=0x0000700003286ea0, error=0x0000700003286e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c5232b0, params=0x0000700003286ea0, exc=0x0000000000000000, error=0x0000700003286e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c5232b0, params=0x0000700003286ea0, error=0x0000700003286e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700003286ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e0d6b2b0) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #19, name = 'JetPool (L) Regular thread #2'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e10332d0, mutex=0x00007fa3e1033290) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e10332d0, mutex=0x00007fa3e1033290, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e10332d0, mutex=0x00007fa3e1033290, timeout=4294967295, poll=0, alerted=0x00007000034892b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x0000000000002890, timeout=4294967295, poll=0, alerted=0x00007000034892b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x0000000000002890, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c523580, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c523678, params=0x0000700003489ea0, exc=0x0000000000000000, error=0x0000700003489e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c523678, params=0x0000700003489ea0, exc=0x0000000000000000, error=0x0000700003489e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c523678, params=0x0000700003489ea0, error=0x0000700003489e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c523678, params=0x0000700003489ea0, exc=0x0000000000000000, error=0x0000700003489e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c523678, params=0x0000700003489ea0, error=0x0000700003489e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700003489ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e34ab810) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #20, name = 'JetPool (L) Regular thread #3'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1033248, mutex=0x00007fa3e1033208) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1033248, mutex=0x00007fa3e1033208, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1033248, mutex=0x00007fa3e1033208, timeout=4294967295, poll=0, alerted=0x000070000368c2b0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x000000000000288f, timeout=4294967295, poll=0, alerted=0x000070000368c2b0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x000000000000288f, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c523948, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c523a40, params=0x000070000368cea0, exc=0x0000000000000000, error=0x000070000368ce20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c523a40, params=0x000070000368cea0, exc=0x0000000000000000, error=0x000070000368ce20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c523a40, params=0x000070000368cea0, error=0x000070000368ce20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c523a40, params=0x000070000368cea0, exc=0x0000000000000000, error=0x000070000368ce20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c523a40, params=0x000070000368cea0, error=0x000070000368ce20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000070000368cec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e370f320) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #21, name = 'FileSystemTrackerCommit'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1030388, mutex=0x00007fa3e1030348) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1030388, mutex=0x00007fa3e1030348, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1030388, mutex=0x00007fa3e1030348, timeout=4294967295, poll=0, alerted=0x000070000388f210) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=40, timeout=4294967295, poll=0, alerted=0x000070000388f210) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=40, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c5f65a8, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x0000000115a7cb7b\r\n    frame #11: 0x0000000115a7c64a\r\n    frame #12: 0x000000010bfae006\r\n    frame #13: 0x000000010bfac4d3\r\n    frame #14: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c5f6168, params=0x000070000388fea0, exc=0x0000000000000000, error=0x000070000388fe20) at mini-runtime.c:2791\r\n    frame #15: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c5f6168, params=0x000070000388fea0, exc=0x0000000000000000, error=0x000070000388fe20) at object.c:2862\r\n    frame #16: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c5f6168, params=0x000070000388fea0, error=0x000070000388fe20) at object.c:3016\r\n    frame #17: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c5f6168, params=0x000070000388fea0, exc=0x0000000000000000, error=0x000070000388fe20) at object.c:3958\r\n    frame #18: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c5f6168, params=0x000070000388fea0, error=0x000070000388fe20) at object.c:3977\r\n    frame #19: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000070000388fec8) at threads.c:837\r\n    frame #20: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e365f440) at threads.c:891\r\n    frame #21: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #22: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #23: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #22, name = 'JetPool Manager'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1031048, mutex=0x00007fa3e1031008) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1031048, mutex=0x00007fa3e1031008, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1031048, mutex=0x00007fa3e1031008, timeout=4294967295, poll=0, alerted=0x0000700003a91e50) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x000000000000284f, timeout=4294967295, poll=0, alerted=0x0000700003a91e50) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x000000000000284f, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107dd3f60 mono-sgen`mono_w32handle_wait_multiple(handles=0x0000700003a92360, nhandles=1, waitall=0, timeout=4294967295, alertable=1) at w32handle.c:1224\r\n    frame #8: 0x0000000107d9c49b mono-sgen`mono_wait_uninterrupted(thread=0x0000000109855ad0, numhandles=1, handles=0x0000700003a92360, waitall=0, ms=-1, error=0x0000700003a922f0) at threads.c:1892\r\n    frame #9: 0x0000000107d9c7b3 mono-sgen`ves_icall_System_Threading_WaitHandle_WaitOne_internal(handle=0x000000000000284f, ms=-1) at threads.c:2017\r\n    frame #10: 0x0000000114503f5f\r\n    frame #11: 0x0000000114503983\r\n    frame #12: 0x000000010bfae006\r\n    frame #13: 0x000000010bfac4d3\r\n    frame #14: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c600998, params=0x0000700003a92ea0, exc=0x0000000000000000, error=0x0000700003a92e20) at mini-runtime.c:2791\r\n    frame #15: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c600998, params=0x0000700003a92ea0, exc=0x0000000000000000, error=0x0000700003a92e20) at object.c:2862\r\n    frame #16: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c600998, params=0x0000700003a92ea0, error=0x0000700003a92e20) at object.c:3016\r\n    frame #17: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c600998, params=0x0000700003a92ea0, exc=0x0000000000000000, error=0x0000700003a92e20) at object.c:3958\r\n    frame #18: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c600998, params=0x0000700003a92ea0, error=0x0000700003a92e20) at object.c:3977\r\n    frame #19: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700003a92ec8) at threads.c:837\r\n    frame #20: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e319fe80) at threads.c:891\r\n    frame #21: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #22: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #23: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #23, name = 'StaExecutor'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1031378, mutex=0x00007fa3e1031338) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1031378, mutex=0x00007fa3e1031338, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1031378, mutex=0x00007fa3e1031338, timeout=4294967295, poll=0, alerted=0x0000700003c95210) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=\"(\", timeout=4294967295, poll=0, alerted=0x0000700003c95210) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=\"(\", timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c6055a8, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x0000000115a7cb7b\r\n    frame #11: 0x0000000115a7c64a\r\n    frame #12: 0x000000010bfae006\r\n    frame #13: 0x000000010bfac4d3\r\n    frame #14: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c600e40, params=0x0000700003c95ea0, exc=0x0000000000000000, error=0x0000700003c95e20) at mini-runtime.c:2791\r\n    frame #15: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c600e40, params=0x0000700003c95ea0, exc=0x0000000000000000, error=0x0000700003c95e20) at object.c:2862\r\n    frame #16: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c600e40, params=0x0000700003c95ea0, error=0x0000700003c95e20) at object.c:3016\r\n    frame #17: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c600e40, params=0x0000700003c95ea0, exc=0x0000000000000000, error=0x0000700003c95e20) at object.c:3958\r\n    frame #18: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c600e40, params=0x0000700003c95ea0, error=0x0000700003c95e20) at object.c:3977\r\n    frame #19: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700003c95ec8) at threads.c:837\r\n    frame #20: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e3282280) at threads.c:891\r\n    frame #21: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #22: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #23: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #24, name = 'Timer-Scheduler'\r\n    frame #0: 0x00007fff57862a14 libsystem_pthread.dylib`pthread_getspecific + 9\r\n    frame #1: 0x0000000107ef1c94 mono-sgen`mono_thread_info_current at mono-threads.c:528\r\n    frame #2: 0x0000000107ef3e58 mono-sgen`mono_thread_info_uninstall_interrupt(interrupted=0x0000700003e97e10) at mono-threads.c:1413\r\n    frame #3: 0x0000000107dd3e8a mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x000000000000285b, timeout=0, poll=0, alerted=0x0000700003e97e10) at w32handle.c:1074\r\n    frame #4: 0x0000000107dd3b0d mono-sgen`mono_w32handle_wait_one(handle=0x000000000000285b, timeout=0, alertable=1) at w32handle.c:1190\r\n    frame #5: 0x0000000107dd3f60 mono-sgen`mono_w32handle_wait_multiple(handles=0x0000700003e98320, nhandles=1, waitall=0, timeout=0, alertable=1) at w32handle.c:1224\r\n    frame #6: 0x0000000107d9c49b mono-sgen`mono_wait_uninterrupted(thread=0x0000000109855d60, numhandles=1, handles=0x0000700003e98320, waitall=0, ms=0, error=0x0000700003e982b0) at threads.c:1892\r\n    frame #7: 0x0000000107d9c7b3 mono-sgen`ves_icall_System_Threading_WaitHandle_WaitOne_internal(handle=0x000000000000285b, ms=0) at threads.c:2017\r\n    frame #8: 0x0000000114503f5f\r\n    frame #9: 0x0000000114503983\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c60f7a0, params=0x0000700003e98ea0, exc=0x0000000000000000, error=0x0000700003e98e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c60f7a0, params=0x0000700003e98ea0, exc=0x0000000000000000, error=0x0000700003e98e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c60f7a0, params=0x0000700003e98ea0, error=0x0000700003e98e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c60f7a0, params=0x0000700003e98ea0, exc=0x0000000000000000, error=0x0000700003e98e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c60f7a0, params=0x0000700003e98ea0, error=0x0000700003e98e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700003e98ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e374d4f0) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #25, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff5772a41a libsystem_kernel.dylib`read + 10\r\n    frame #1: 0x0000000107cb94a0 mono-sgen`pipe_read(handle=0x0000000000000023, buffer=0x000000010e78e9f0, numbytes=1024, bytesread=0x000070000429df28) at w32file-unix.c:2064\r\n    frame #2: 0x0000000107cb25bf mono-sgen`mono_w32file_read(handle=0x0000000000000023, buffer=0x000000010e78e9f0, numbytes=1024, bytesread=0x000070000429df28) at w32file-unix.c:3109\r\n    frame #3: 0x0000000107cfd589 mono-sgen`ves_icall_System_IO_MonoIO_Read(handle=0x0000000000000023, dest=0x000000010e78e9d0, dest_offset=0, count=1024, error=0x000070000429e090) at w32file.c:866\r\n    frame #4: 0x000000010a1e81af\r\n  thread #26, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd568e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce5c0, mutex=0x0000000107fce580, timeout_ms=100) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107dd5523 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x0000000107fce5c0, mutex=0x0000000107fce580, timeout=4294967295, poll=1, alerted=0x00007000046a39c4) at w32handle.c:973\r\n    frame #4: 0x0000000107dd4c3a mono-sgen`mono_w32handle_timedwait_signal(timeout=4294967295, poll=1, alerted=0x00007000046a39c4) at w32handle.c:1016\r\n    frame #5: 0x0000000107dd4749 mono-sgen`mono_w32handle_wait_multiple(handles=0x00007000046a3e40, nhandles=2, waitall=0, timeout=4294967295, alertable=1) at w32handle.c:1356\r\n    frame #6: 0x0000000107d9c49b mono-sgen`mono_wait_uninterrupted(thread=0x0000000109856280, numhandles=2, handles=0x00007000046a3e40, waitall=0, ms=-1, error=0x00007000046a3dc0) at threads.c:1892\r\n    frame #7: 0x0000000107d9c6ac mono-sgen`ves_icall_System_Threading_WaitHandle_WaitAny_internal(mono_handles=0x000000010e73e950, ms=-1) at threads.c:1989\r\n    frame #8: 0x0000000122a1c11f\r\n  thread #27, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff5772a41a libsystem_kernel.dylib`read + 10\r\n    frame #1: 0x0000000107cb94a0 mono-sgen`pipe_read(handle=0x0000000000000021, buffer=0x000000010e78ce70, numbytes=1024, bytesread=0x00007000048a6f28) at w32file-unix.c:2064\r\n    frame #2: 0x0000000107cb25bf mono-sgen`mono_w32file_read(handle=0x0000000000000021, buffer=0x000000010e78ce70, numbytes=1024, bytesread=0x00007000048a6f28) at w32file-unix.c:3109\r\n    frame #3: 0x0000000107cfd589 mono-sgen`ves_icall_System_IO_MonoIO_Read(handle=0x0000000000000021, dest=0x000000010e78ce50, dest_offset=0, count=1024, error=0x00007000048a7090) at w32file.c:866\r\n    frame #4: 0x000000010a1e81af\r\n  thread #28, name = 'ClientSocket-MainWire'\r\n    frame #0: 0x00007fff57728f0a libsystem_kernel.dylib`__recvfrom + 10\r\n    frame #1: 0x0000000107caf327 mono-sgen`mono_w32socket_recvfrom(sock=17, buf=\"p\", len=522, flags=0, from=0x0000000000000000, fromlen=0x0000000000000000, blocking=1) at w32socket-unix.c:320\r\n    frame #2: 0x0000000107caf299 mono-sgen`mono_w32socket_recv(sock=17, buf=\"p\", len=522, flags=0, blocking=1) at w32socket-unix.c:300\r\n    frame #3: 0x0000000107d859fc mono-sgen`ves_icall_System_Net_Sockets_Socket_Receive_internal(sock=17, buffer=0x000000010d1fe428, offset=502, count=522, flags=0, werror=0x0000700004aa9f90, blocking=1) at w32socket.c:1431\r\n    frame #4: 0x000000011747f562\r\n    frame #5: 0x000000011747f33b\r\n    frame #6: 0x000000011747eb43\r\n  thread #29, name = 'ClientSocket-MainWire-AsyncSendProcessor'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1035118, mutex=0x00007fa3e10350d8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1035118, mutex=0x00007fa3e10350d8, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1035118, mutex=0x00007fa3e10350d8, timeout=4294967295, poll=0, alerted=0x0000700004cad2f0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028c9, timeout=4294967295, poll=0, alerted=0x0000700004cad2f0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028c9, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010d1d5830, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010d35fa48, params=0x0000700004cadea0, exc=0x0000000000000000, error=0x0000700004cade20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010d35fa48, params=0x0000700004cadea0, exc=0x0000000000000000, error=0x0000700004cade20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010d35fa48, params=0x0000700004cadea0, error=0x0000700004cade20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010d35fa48, params=0x0000700004cadea0, exc=0x0000000000000000, error=0x0000700004cade20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010d35fa48, params=0x0000700004cadea0, error=0x0000700004cade20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700004cadec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e5b3ec50) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #30, name = 'UsageDbManager'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1030520, mutex=0x00007fa3e10304e0) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1030520, mutex=0x00007fa3e10304e0, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1030520, mutex=0x00007fa3e10304e0, timeout=4294967295, poll=0, alerted=0x0000700004eb0250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x000000000000283a, timeout=4294967295, poll=0, alerted=0x0000700004eb0250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x000000000000283a, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e1b24e0, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e1b2148, params=0x0000700004eb0ea0, exc=0x0000000000000000, error=0x0000700004eb0e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e1b2148, params=0x0000700004eb0ea0, exc=0x0000000000000000, error=0x0000700004eb0e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010e1b2148, params=0x0000700004eb0ea0, error=0x0000700004eb0e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010e1b2148, params=0x0000700004eb0ea0, exc=0x0000000000000000, error=0x0000700004eb0e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010e1b2148, params=0x0000700004eb0ea0, error=0x0000700004eb0e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700004eb0ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e5d589b0) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #31, name = 'ActivityLogsSubmitter'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1035aa8, mutex=0x00007fa3e1035a68) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1035aa8, mutex=0x00007fa3e1035a68, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1035aa8, mutex=0x00007fa3e1035a68, timeout=4294967295, poll=0, alerted=0x00007000050b3250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028db, timeout=4294967295, poll=0, alerted=0x00007000050b3250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028db, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e1b9450, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e1b9100, params=0x00007000050b3ea0, exc=0x0000000000000000, error=0x00007000050b3e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e1b9100, params=0x00007000050b3ea0, exc=0x0000000000000000, error=0x00007000050b3e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010e1b9100, params=0x00007000050b3ea0, error=0x00007000050b3e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010e1b9100, params=0x00007000050b3ea0, exc=0x0000000000000000, error=0x00007000050b3e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010e1b9100, params=0x00007000050b3ea0, error=0x00007000050b3e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000050b3ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e5b95c90) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #32, name = 'LevelDbAutocommitTransaction'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1036438, mutex=0x00007fa3e10363f8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1036438, mutex=0x00007fa3e10363f8, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1036438, mutex=0x00007fa3e10363f8, timeout=4294967295, poll=0, alerted=0x00007000052b6250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=2001-01-01 00:00:00 UTC, timeout=4294967295, poll=0, alerted=0x00007000052b6250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=2001-01-01 00:00:00 UTC, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e1dc060, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e1dbc58, params=0x00007000052b6ea0, exc=0x0000000000000000, error=0x00007000052b6e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e1dbc58, params=0x00007000052b6ea0, exc=0x0000000000000000, error=0x00007000052b6e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010e1dbc58, params=0x00007000052b6ea0, error=0x00007000052b6e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010e1dbc58, params=0x00007000052b6ea0, exc=0x0000000000000000, error=0x00007000052b6e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010e1dbc58, params=0x00007000052b6ea0, error=0x00007000052b6e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000052b6ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3e5b9fa00) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #33, name = 'LevelDbAutocommitTransaction'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1034c50, mutex=0x00007fa3e1034c10) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1034c50, mutex=0x00007fa3e1034c10, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1034c50, mutex=0x00007fa3e1034c10, timeout=4294967295, poll=0, alerted=0x00007000054b9250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028c0, timeout=4294967295, poll=0, alerted=0x00007000054b9250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028c0, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010ec05388, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010ec04f80, params=0x00007000054b9ea0, exc=0x0000000000000000, error=0x00007000054b9e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010ec04f80, params=0x00007000054b9ea0, exc=0x0000000000000000, error=0x00007000054b9e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010ec04f80, params=0x00007000054b9ea0, error=0x00007000054b9e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010ec04f80, params=0x00007000054b9ea0, exc=0x0000000000000000, error=0x00007000054b9e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010ec04f80, params=0x00007000054b9ea0, error=0x00007000054b9e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000054b9ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3eac2a7a0) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #34, name = 'TaskProcessor for unit test tasks.'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1034700, mutex=0x00007fa3e10346c0) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1034700, mutex=0x00007fa3e10346c0, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1034700, mutex=0x00007fa3e10346c0, timeout=4294967295, poll=0, alerted=0x00007000058bf250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028b6, timeout=4294967295, poll=0, alerted=0x00007000058bf250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028b6, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c0022f0, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c02fe30, params=0x00007000058bfea0, exc=0x0000000000000000, error=0x00007000058bfe20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c02fe30, params=0x00007000058bfea0, exc=0x0000000000000000, error=0x00007000058bfe20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c02fe30, params=0x00007000058bfea0, error=0x00007000058bfe20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c02fe30, params=0x00007000058bfea0, exc=0x0000000000000000, error=0x00007000058bfe20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c02fe30, params=0x00007000058bfea0, error=0x00007000058bfe20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000058bfec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3ec9cabf0) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #35, name = 'LevelDbAutocommitTransaction'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1033a40, mutex=0x00007fa3e1033a00) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1033a40, mutex=0x00007fa3e1033a00, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1033a40, mutex=0x00007fa3e1033a00, timeout=4294967295, poll=0, alerted=0x0000700005cc5250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x000000000000289e, timeout=4294967295, poll=0, alerted=0x0000700005cc5250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x000000000000289e, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e571868, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e571460, params=0x0000700005cc5ea0, exc=0x0000000000000000, error=0x0000700005cc5e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e571460, params=0x0000700005cc5ea0, exc=0x0000000000000000, error=0x0000700005cc5e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010e571460, params=0x0000700005cc5ea0, error=0x0000700005cc5e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010e571460, params=0x0000700005cc5ea0, exc=0x0000000000000000, error=0x0000700005cc5e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010e571460, params=0x0000700005cc5ea0, error=0x0000700005cc5e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700005cc5ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3ef422c90) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #36, name = 'MsBuild Protocol Thread'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1034f80, mutex=0x00007fa3e1034f40) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1034f80, mutex=0x00007fa3e1034f40, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1034f80, mutex=0x00007fa3e1034f40, timeout=4294967295, poll=0, alerted=0x0000700005ec7d90) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028c6, timeout=4294967295, poll=0, alerted=0x0000700005ec7d90) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028c6, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107dd3f60 mono-sgen`mono_w32handle_wait_multiple(handles=0x0000700005ec82a0, nhandles=1, waitall=0, timeout=4294967295, alertable=1) at w32handle.c:1224\r\n    frame #8: 0x0000000107d9c49b mono-sgen`mono_wait_uninterrupted(thread=0x000000011cd57ad8, numhandles=1, handles=0x0000700005ec82a0, waitall=0, ms=-1, error=0x0000700005ec8230) at threads.c:1892\r\n    frame #9: 0x0000000107d9c7b3 mono-sgen`ves_icall_System_Threading_WaitHandle_WaitOne_internal(handle=0x00000000000028c6, ms=-1) at threads.c:2017\r\n    frame #10: 0x0000000114503f5f\r\n    frame #11: 0x0000000114503983\r\n    frame #12: 0x00000001229e6723\r\n  thread #37, name = 'ServerSocket-MsBuildExternalProcess'\r\n    frame #0: 0x00007fff57728f0a libsystem_kernel.dylib`__recvfrom + 10\r\n    frame #1: 0x0000000107caf327 mono-sgen`mono_w32socket_recvfrom(sock=31, buf=\"\", len=30, flags=0, from=0x0000000000000000, fromlen=0x0000000000000000, blocking=1) at w32socket-unix.c:320\r\n    frame #2: 0x0000000107caf299 mono-sgen`mono_w32socket_recv(sock=31, buf=\"\", len=30, flags=0, blocking=1) at w32socket-unix.c:300\r\n    frame #3: 0x0000000107d859fc mono-sgen`ves_icall_System_Net_Sockets_Socket_Receive_internal(sock=31, buffer=0x000000010ef03fc8, offset=994, count=30, flags=0, werror=0x00007000060caff0, blocking=1) at w32socket.c:1431\r\n    frame #4: 0x000000011747f562\r\n    frame #5: 0x000000011747f33b\r\n    frame #6: 0x000000011747eb43\r\n  thread #38, name = 'ServerSocket-MsBuildExternalProcess-AsyncSendProcessor'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1031510, mutex=0x00007fa3e10314d0) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1031510, mutex=0x00007fa3e10314d0, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1031510, mutex=0x00007fa3e10314d0, timeout=4294967295, poll=0, alerted=0x00007000062ce2f0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x0000000000002858, timeout=4294967295, poll=0, alerted=0x00007000062ce2f0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x0000000000002858, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e75c510, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010ef9b6c8, params=0x00007000062ceea0, exc=0x0000000000000000, error=0x00007000062cee20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010ef9b6c8, params=0x00007000062ceea0, exc=0x0000000000000000, error=0x00007000062cee20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010ef9b6c8, params=0x00007000062ceea0, error=0x00007000062cee20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010ef9b6c8, params=0x00007000062ceea0, exc=0x0000000000000000, error=0x00007000062cee20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010ef9b6c8, params=0x00007000062ceea0, error=0x00007000062cee20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000062ceec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d0d09b50) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #39, name = 'SolutionBuilderControllerPrototype_Executor'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1031400, mutex=0x00007fa3e10313c0) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1031400, mutex=0x00007fa3e10313c0, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1031400, mutex=0x00007fa3e10313c0, timeout=4294967295, poll=0, alerted=0x0000700006ee0250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x0000000000002856, timeout=4294967295, poll=0, alerted=0x0000700006ee0250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x0000000000002856, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010c853ba8, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c853800, params=0x0000700006ee0ea0, exc=0x0000000000000000, error=0x0000700006ee0e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010c853800, params=0x0000700006ee0ea0, exc=0x0000000000000000, error=0x0000700006ee0e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010c853800, params=0x0000700006ee0ea0, error=0x0000700006ee0e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010c853800, params=0x0000700006ee0ea0, exc=0x0000000000000000, error=0x0000700006ee0e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010c853800, params=0x0000700006ee0ea0, error=0x0000700006ee0e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700006ee0ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d0f96920) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #40, name = 'XmlIndexThread'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1036988, mutex=0x00007fa3e1036948) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1036988, mutex=0x00007fa3e1036948, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1036988, mutex=0x00007fa3e1036948, timeout=4294967295, poll=0, alerted=0x00007000070e3250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028f7, timeout=4294967295, poll=0, alerted=0x00007000070e3250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028f7, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010cfeb078, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010cfead40, params=0x00007000070e3ea0, exc=0x0000000000000000, error=0x00007000070e3e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010cfead40, params=0x00007000070e3ea0, exc=0x0000000000000000, error=0x00007000070e3e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010cfead40, params=0x00007000070e3ea0, error=0x00007000070e3e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010cfead40, params=0x00007000070e3ea0, exc=0x0000000000000000, error=0x00007000070e3e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010cfead40, params=0x00007000070e3ea0, error=0x00007000070e3e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000070e3ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d24ba310) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #41, name = 'CacheJobService'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1035ff8, mutex=0x00007fa3e1035fb8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1035ff8, mutex=0x00007fa3e1035fb8, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1035ff8, mutex=0x00007fa3e1035fb8, timeout=4294967295, poll=0, alerted=0x00007000072e6250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x00000000000028e5, timeout=4294967295, poll=0, alerted=0x00007000072e6250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x00000000000028e5, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x0000000121af2750, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010d053540, params=0x00007000072e6ea0, exc=0x0000000000000000, error=0x00007000072e6e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010d053540, params=0x00007000072e6ea0, exc=0x0000000000000000, error=0x00007000072e6e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010d053540, params=0x00007000072e6ea0, error=0x00007000072e6e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010d053540, params=0x00007000072e6ea0, exc=0x0000000000000000, error=0x00007000072e6e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010d053540, params=0x00007000072e6ea0, error=0x00007000072e6e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000072e6ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d24d0ce0) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #42, name = 'DaemonThread'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e1034238, mutex=0x00007fa3e10341f8) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e1034238, mutex=0x00007fa3e10341f8, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e1034238, mutex=0x00007fa3e10341f8, timeout=4294967295, poll=0, alerted=0x00007000074e9250) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=2001-01-01 00:00:00 UTC, timeout=4294967295, poll=0, alerted=0x00007000074e9250) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=2001-01-01 00:00:00 UTC, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x0000000124349830, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x00000001185f60a3\r\n    frame #11: 0x000000010bfae006\r\n    frame #12: 0x000000010bfac4d3\r\n    frame #13: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010d20d0a8, params=0x00007000074e9ea0, exc=0x0000000000000000, error=0x00007000074e9e20) at mini-runtime.c:2791\r\n    frame #14: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010d20d0a8, params=0x00007000074e9ea0, exc=0x0000000000000000, error=0x00007000074e9e20) at object.c:2862\r\n    frame #15: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010d20d0a8, params=0x00007000074e9ea0, error=0x00007000074e9e20) at object.c:3016\r\n    frame #16: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010d20d0a8, params=0x00007000074e9ea0, exc=0x0000000000000000, error=0x00007000074e9e20) at object.c:3958\r\n    frame #17: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010d20d0a8, params=0x00007000074e9ea0, error=0x00007000074e9e20) at object.c:3977\r\n    frame #18: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000074e9ec8) at threads.c:837\r\n    frame #19: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d278c2d0) at threads.c:891\r\n    frame #20: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #21: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #22: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #43, name = 'tid_b603'\r\n    frame #0: 0x00007fff577281be libsystem_kernel.dylib`__accept + 10\r\n    frame #1: 0x0000000107cae9ee mono-sgen`mono_w32socket_accept(sock=34, addr=0x0000000000000000, addrlen=0x0000000000000000, blocking=1) at w32socket-unix.c:176\r\n    frame #2: 0x0000000107d83db1 mono-sgen`ves_icall_System_Net_Sockets_Socket_Accept_internal(sock=34, werror=0x00007000076ec560, blocking=1) at w32socket.c:798\r\n    frame #3: 0x00000001229f156f\r\n    frame #4: 0x00000001229f0a6b\r\n    frame #5: 0x000000010bfae006\r\n    frame #6: 0x000000010bfac4d3\r\n    frame #7: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010f8450e8, params=0x00007000076ecea0, exc=0x0000000000000000, error=0x00007000076ece20) at mini-runtime.c:2791\r\n    frame #8: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010f8450e8, params=0x00007000076ecea0, exc=0x0000000000000000, error=0x00007000076ece20) at object.c:2862\r\n    frame #9: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010f8450e8, params=0x00007000076ecea0, error=0x00007000076ece20) at object.c:3016\r\n    frame #10: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010f8450e8, params=0x00007000076ecea0, exc=0x0000000000000000, error=0x00007000076ece20) at object.c:3958\r\n    frame #11: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010f8450e8, params=0x00007000076ecea0, error=0x00007000076ece20) at object.c:3977\r\n    frame #12: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000076ecec8) at threads.c:837\r\n    frame #13: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d79d3330) at threads.c:891\r\n    frame #14: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #15: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #16: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #44\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000118852a6b libleveldb.dylib`leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper(void*) + 75\r\n    frame #3: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #4: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #5: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #45, name = 'FileLogEventListener.Flusher:backend.log'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e10306b8, mutex=0x00007fa3e1030678) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e10306b8, mutex=0x00007fa3e1030678, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e10306b8, mutex=0x00007fa3e1030678, timeout=4294967295, poll=0, alerted=0x0000700001c652f0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=2001-01-01 00:00:00 UTC, timeout=4294967295, poll=0, alerted=0x0000700001c652f0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=2001-01-01 00:00:00 UTC, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e80eb30, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e80ec78, params=0x0000700001c65ea0, exc=0x0000000000000000, error=0x0000700001c65e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e80ec78, params=0x0000700001c65ea0, exc=0x0000000000000000, error=0x0000700001c65e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010e80ec78, params=0x0000700001c65ea0, error=0x0000700001c65e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010e80ec78, params=0x0000700001c65ea0, exc=0x0000000000000000, error=0x0000700001c65e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010e80ec78, params=0x0000700001c65ea0, error=0x0000700001c65e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700001c65ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3dcb1bb50) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #46, name = 'FileLogEventListener.Flusher:backend-protocol.log'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107dd573d mono-sgen`mono_os_cond_wait(cond=0x00007fa3e10321d0, mutex=0x00007fa3e1032190) at mono-os-mutex.h:173\r\n    frame #3: 0x0000000107dd557a mono-sgen`mono_os_cond_timedwait(cond=0x00007fa3e10321d0, mutex=0x00007fa3e1032190, timeout_ms=4294967295) at mono-os-mutex.h:188\r\n    frame #4: 0x0000000107dd54c4 mono-sgen`mono_w32handle_timedwait_signal_naked(cond=0x00007fa3e10321d0, mutex=0x00007fa3e1032190, timeout=4294967295, poll=0, alerted=0x0000700001e682f0) at w32handle.c:956\r\n    frame #5: 0x0000000107dd3e73 mono-sgen`mono_w32handle_timedwait_signal_handle(handle=0x0000000000002870, timeout=4294967295, poll=0, alerted=0x0000700001e682f0) at w32handle.c:1071\r\n    frame #6: 0x0000000107dd3a8b mono-sgen`mono_w32handle_wait_one(handle=0x0000000000002870, timeout=4294967295, alertable=1) at w32handle.c:1180\r\n    frame #7: 0x0000000107de59e4 mono-sgen`ves_icall_System_Threading_Monitor_Monitor_wait(obj=0x000000010e813748, ms=4294967295) at monitor.c:1392\r\n    frame #8: 0x00000001145790bf\r\n    frame #9: 0x000000011457089b\r\n    frame #10: 0x000000010bfae006\r\n    frame #11: 0x000000010bfac4d3\r\n    frame #12: 0x0000000107a9f01b mono-sgen`mono_jit_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e813890, params=0x0000700001e68ea0, exc=0x0000000000000000, error=0x0000700001e68e20) at mini-runtime.c:2791\r\n    frame #13: 0x0000000107defac5 mono-sgen`do_runtime_invoke(method=0x00007fa3e10efb88, obj=0x000000010e813890, params=0x0000700001e68ea0, exc=0x0000000000000000, error=0x0000700001e68e20) at object.c:2862\r\n    frame #14: 0x0000000107de9627 mono-sgen`mono_runtime_invoke_checked(method=0x00007fa3e10efb88, obj=0x000000010e813890, params=0x0000700001e68ea0, error=0x0000700001e68e20) at object.c:3016\r\n    frame #15: 0x0000000107df1c26 mono-sgen`mono_runtime_delegate_try_invoke(delegate=0x000000010e813890, params=0x0000700001e68ea0, exc=0x0000000000000000, error=0x0000700001e68e20) at object.c:3958\r\n    frame #16: 0x0000000107df1c7c mono-sgen`mono_runtime_delegate_invoke_checked(delegate=0x000000010e813890, params=0x0000700001e68ea0, error=0x0000700001e68e20) at object.c:3977\r\n    frame #17: 0x0000000107da23ca mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700001e68ec8) at threads.c:837\r\n    frame #18: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3dca63d40) at threads.c:891\r\n    frame #19: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #20: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #21: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #47, name = 'tid_10e03'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107ef54ce mono-sgen`mono_os_cond_timedwait(cond=0x000000010801e048, mutex=0x000000010801e008, timeout_ms=500) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107ef50e0 mono-sgen`mono_coop_cond_timedwait(cond=0x000000010801e048, mutex=0x000000010801e008, timeout_ms=500) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107ef398a mono-sgen`sleep_interruptable(ms=500, alerted=0x00007000078efd24) at mono-threads.c:1200\r\n    frame #5: 0x0000000107ef36d6 mono-sgen`mono_thread_info_sleep(ms=500, alerted=0x00007000078efd24) at mono-threads.c:1232\r\n    frame #6: 0x0000000107da8454 mono-sgen`monitor_thread(unused=0x0000000000000000) at threadpool-worker-default.c:693\r\n    frame #7: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000078efec8) at threads.c:829\r\n    frame #8: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d23ee280) at threads.c:891\r\n    frame #9: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #10: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #11: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #48, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=26035) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=26035) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x000070000409bec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c0f1ad80) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #49, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=18060) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=18060) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700007af2ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c55934a0) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #50, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=26731) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=26731) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700007cf5ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c54b12e0) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #51, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=52736) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=52736) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000044a1ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c500ddc0) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #52, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=16151) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=16151) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000056bcec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c500e410) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #53, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=7514) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=7514) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700005ac2ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c0f1aa10) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #54, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=24889) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=24889) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000064d1ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3d0f1a190) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #55, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=51703) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=51703) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000066d4ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c54b12e0) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #56, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=5495) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=5495) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x00007000068d7ec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c500e750) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n  thread #57, name = 'Threadpool worker'\r\n    frame #0: 0x00007fff57728cee libsystem_kernel.dylib`__psynch_cvwait + 10\r\n    frame #1: 0x00007fff57865662 libsystem_pthread.dylib`_pthread_cond_wait + 732\r\n    frame #2: 0x0000000107da9c9e mono-sgen`mono_os_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=47693) at mono-os-mutex.h:216\r\n    frame #3: 0x0000000107da9aa0 mono-sgen`mono_coop_cond_timedwait(cond=0x0000000107fce290, mutex=0x0000000107fce248, timeout_ms=47693) at mono-coop-mutex.h:102\r\n    frame #4: 0x0000000107da9790 mono-sgen`worker_park at threadpool-worker-default.c:417\r\n    frame #5: 0x0000000107da9167 mono-sgen`worker_thread(unused=0x0000000000000000) at threadpool-worker-default.c:484\r\n    frame #6: 0x0000000107da234c mono-sgen`start_wrapper_internal(start_info=0x0000000000000000, stack_ptr=0x0000700006adaec8) at threads.c:829\r\n    frame #7: 0x0000000107da1f99 mono-sgen`start_wrapper(data=0x00007fa3c54a4b50) at threads.c:891\r\n    frame #8: 0x00007fff578646c1 libsystem_pthread.dylib`_pthread_body + 340\r\n    frame #9: 0x00007fff5786456d libsystem_pthread.dylib`_pthread_start + 377\r\n    frame #10: 0x00007fff57863c5d libsystem_pthread.dylib`thread_start + 13\r\n(lldb) detach\r\nProcess 54070 detached\r\n(lldb) quit\r\n\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/b519d42c15e08158ad48824bab4922797a766704", "message": "Add test for reproduce problem in debugger stepping"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6622", "title": "Fix NUnit reference generation in tests csproj.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "expertmm": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6288", "title": "Unhandled Exception related to CultureInfo during make using git version and updated build tools", "body": "## Steps to Reproduce\r\n* on Antergos linux via terminal:\r\n```\r\nsudo pacman -Syu git autoconf libtool automake gettext cmake base-devel\r\ngit clone https://github.com/mono/mono.git\r\ncd mono\r\nPREFIX=/usr/local\r\n./autogen.sh --prefix=$PREFIX\r\nmake\r\n```\r\n\r\n## Current Behavior\r\nnear end of make:\r\nUnhandled Exception:\r\nSystem.MissingMethodException: Method 'System.Globalization.CultureInfo.set_CurrentUICulture' not found.\r\n  at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc+<>c__DisplayClass1_0.<Run>b__0 (System.IO.TextWriter tw) <0x409d90f0 + 0x0002e> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CommandLine.ConsoleUtil.RunWithUtf8Output[T] (Boolean utf8Output, System.IO.TextWriter textWriter, System.Func`2 func) <0x409d8ff0 + 0x0004b> in <filename unknown>:0 \r\n\r\nfull output is here: <https://pastebin.com/ndrwpfLk>\r\nsee also similar regression that was happening last year: <https://bugzilla.xamarin.com/show_bug.cgi?id=46966>\r\n\r\n**but `sudo make install` still works, as proven by the following output of `mono --version`:**\r\n```\r\nMono JIT compiler version 5.11.0 (master/57ad62b9ec6 Mon Dec 18 21:14:41 UTC 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           __thread\r\n\tSIGSEGV:       normal\r\n\tNotifications: epoll\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tInterpreter:   yes\r\n\tLLVM:          supported, not enabled.\r\n\tGC:            sgen (concurrent by default)\r\n\r\nMono JIT compiler version 5.11.0\r\n```\r\n\r\n## Expected Behavior\r\n\r\nBuild without exceptions\r\n\r\n### On which platforms did you notice this\r\n\r\n* Recently updated Antergos linux\r\n  * gcc 7.2.1\r\n  * automake 1.15.1\r\n  * pre-existing mono: 4.5 (official arch package, though arch has it marked outdated and has trouble building newer versions)--however I don't think pre-existing mono was being used due to the following make output:\r\n```\r\n*** The runtime 'mono' doesn't appear to be usable.\r\n*** Trying the 'monolite-linux/1051100001' directory.\r\nMicrosoft (R) Visual C# Compiler version 2.6.0.62309 (d3f6b8e7)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n\r\n### Stacktrace\r\n```\r\n[ERROR] FATAL UNHANDLED EXCEPTION: System.MissingMethodException: Method 'System.Globalization.CultureInfo.set_CurrentUICulture' not found.\r\n  at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc+<>c__DisplayClass1_0.<Run>b__0 (System.IO.TextWriter tw) <0x409d90f0 + 0x0002e> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CommandLine.ConsoleUtil.RunWithUtf8Output[T] (Boolean utf8Output, System.IO.TextWriter textWriter, System.Func`2 func) <0x409d8ff0 + 0x0004b> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run (System.String[] args, BuildPaths buildPaths, System.IO.TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader) <0x409b5cf0 + 0x0025f> in <filename unknown>:0 \r\n  at (wrapper delegate-invoke) <Module>:invoke_int_string[]_BuildPaths_TextWriter_IAnalyzerAssemblyLoader (string[],Microsoft.CodeAnalysis.BuildPaths,System.IO.TextWriter,Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)\r\n  at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation (System.String[] arguments, BuildPaths buildPaths, System.IO.TextWriter textWriter) <0x409b5c70 + 0x00053> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation (IEnumerable`1 originalArguments, BuildPaths buildPaths, System.IO.TextWriter textWriter) <0x409b24c0 + 0x00306> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run (IEnumerable`1 arguments, RequestLanguage language, Microsoft.CodeAnalysis.CommandLine.CompileFunc compileFunc, IAnalyzerAssemblyLoader analyzerAssemblyLoader) <0x409ae4f0 + 0x0013b> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.MainCore (System.String[] args) <0x409acfa0 + 0x000a3> in <filename unknown>:0 \r\n  at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main (System.String[] args) <0x409acd80 + 0x0001b> in <filename unknown>:0 \r\nmake[6]: *** [build/profiles/basic.make:116: build/deps/basic-profile-check.exe] Error 1\r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rjlimardo": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6278", "title": "There is an error in XML document (0, 0). System.InvalidOperationException:", "body": "## Steps to Reproduce\r\n\r\n1. Create a Serializer to Read type of Object(\"Class\")\r\n2. Run Serializer to Deserialize an Existing XML\r\n3. Throws an Internal Error Message of (\" There is an error in XML document (0, 0) \")\r\n\r\n## Current Behavior\r\n\r\nWhat is the current behavior?\r\nthrowing an exception while deserializing .\r\n\r\n## Expected Behavior\r\n\r\nPlease describe the behavior you are expecting\r\nDeserialize output of an existing build XML\r\n\r\n### On which platforms did you notice this\r\n\r\n[ X ] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\nYou can use `mono --version` or About dialog to obtain this information.\r\n```\r\nMono JIT compiler version 5.4.1.7 (2017-06/e66d9abbb27 Wed Oct 25 12:10:41 EDT 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n```\r\n\r\n### Stacktrace\r\n\r\nPlease paste the stacktrace here if available.\r\n\r\n```\r\nSystem.InvalidOperationException: There is an error in XML document (0, 0). ---> System.InvalidProgramException: Method Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderReturn:InitIDs () is too complex.\r\n  at System.Xml.Serialization.XmlSerializationReader.Init (System.Xml.XmlReader r, System.Xml.Serialization.XmlDeserializationEvents events, System.String encodingStyle, System.Xml.Serialization.TempAssembly tempAssembly) [0x00207] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/System.Xml/System/Xml/Serialization/XmlSerializationReader.cs:162 \r\n  at System.Xml.Serialization.TempAssembly.InvokeReader (System.Xml.Serialization.XmlMapping mapping, System.Xml.XmlReader xmlReader, System.Xml.Serialization.XmlDeserializationEvents events, System.String encodingStyle) [0x0001e] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/System.Xml/System/Xml/Serialization/Compilation.cs:585 \r\n  at System.Xml.Serialization.XmlSerializer.Deserialize (System.Xml.XmlReader xmlReader, System.String encodingStyle, System.Xml.Serialization.XmlDeserializationEvents events) [0x00084] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/System.Xml/System/Xml/Serialization/XmlSerializer.cs:420 \r\n   --- End of inner exception stack trace ---\r\n  at System.Xml.Serialization.XmlSerializer.Deserialize (System.Xml.XmlReader xmlReader, System.String encodingStyle, System.Xml.Serialization.XmlDeserializationEvents events) [0x000d7] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/System.Xml/System/Xml/Serialization/XmlSerializer.cs:432 \r\n  at System.Xml.Serialization.XmlSerializer.Deserialize (System.Xml.XmlReader xmlReader, System.String encodingStyle) [0x00000] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/System.Xml/System/Xml/Serialization/XmlSerializer.cs:396 \r\n  at System.Xml.Serialization.XmlSerializer.Deserialize (System.IO.Stream stream) [0x0001c] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/System.Xml/System/Xml/Serialization/XmlSerializer.cs:366 \r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6274", "title": "Default Interface Methods issues", "body": "## Steps to Reproduce\r\n\r\n1.  Open mono/tests/Makefile.am and remove dim-* items from KNOWN_FAILING_TESTS (line 959)\r\n2.  Run runtime tests or just invoke ilasm directly  \r\n\r\n## Current Behavior\r\n\r\nThe feature is supported in CoreCLR in a special branch and these tests were copied from there. You can find IL-tests (and initial CS-files [here](https://github.com/dotnet/coreclr/tree/dev/defaultintf/tests/src/Loader/classloader/DefaultInterfaceMethods)). Some tests pass on mono, some don't - see https://github.com/mono/mono/pull/6252\r\n\r\n## Expected Behavior\r\n\r\nAll tests passed\r\n\r\n### On which platforms did you notice this\r\n\r\n[x] macOS\r\n[x] Linux\r\n[x] Windows\r\n\r\n**Version Used**:\r\n\r\nMono JIT compiler version 5.11.0 (http-tests/d8045abe9fc)\r\n\r\n### Stacktrace\r\n\r\n**dim-simple**:\r\nUnhandled Exception:\r\nSystem.MethodAccessException: Method `IBlah.Blah_Protected_GetC()' is inaccessible from method `FooBar.CallBlahProtected()'\r\n  at (wrapper managed-to-native) System.Object.__icall_wrapper_mono_throw_method_access(intptr,intptr)\r\n  at FooBar.CallBlahProtected () [0x00001] in <94a7a387cd2a42e7a342a503b3dfbcb5>:0 \r\n  at Program.Main () [0x0007e] in <94a7a387cd2a42e7a342a503b3dfbcb5>:0 \r\n[ERROR] FATAL UNHANDLED EXCEPTION: System.MethodAccessException: Method `IBlah.Blah_Protected_GetC()' is inaccessible from method `FooBar.CallBlahProtected()'\r\n  at (wrapper managed-to-native) System.Object.__icall_wrapper_mono_throw_method_access(intptr,intptr)\r\n  at FooBar.CallBlahProtected () [0x00001] in <94a7a387cd2a42e7a342a503b3dfbcb5>:0 \r\n  at Program.Main () [0x0007e] in <94a7a387cd2a42e7a342a503b3dfbcb5>:0 \r\n\r\n**dim-diamondshape:\r\ndim-constrainedcall**:\r\nSIGSEGV\r\n\r\n**dim-methodimpl**:\r\nFAIL: Calling IFoo.Foo(1-5) on IBlahImpl\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/056a267752c32819005d521c22da944309802dee", "message": "Fix watchos tests for system.data (#6600)"}, {"url": "https://api.github.com/repos/mono/mono/commits/acea63a9c1e845f66253a79835b5fb10086910a1", "message": "Improve GetArgumentName in MonoOptions. Fixes bug-60904 (#6506)\n\n* Rewrite Options.GetArgumentName to use Regex\r\n\r\n* code cleanup\r\n\r\n* code cleanup"}, {"url": "https://api.github.com/repos/mono/mono/commits/15fad0dac29d4dc6f453c188dbaa88c832d2e760", "message": "fix system.data ssl-bug on linux"}, {"url": "https://api.github.com/repos/mono/mono/commits/dee8dc3245e7ab9164d1c86350f4d153120b60bb", "message": "change messages for some system exceptions (consistency with .net)"}, {"url": "https://api.github.com/repos/mono/mono/commits/10ab6b7753e74da6910220fbe7bde264f049290a", "message": "skip dim-valuetype test in interp mode"}, {"url": "https://api.github.com/repos/mono/mono/commits/64ecc5d064f6a11b44c3629b3f8db622ae3f19d2", "message": "change return value from 100 to 0 (for success)"}, {"url": "https://api.github.com/repos/mono/mono/commits/95f4da3358494a21061f10ea60ebf504dc81eda8", "message": "add \"dim-\" prefix for the tests and ignore failed ones"}, {"url": "https://api.github.com/repos/mono/mono/commits/8668a855526dd9c1ced5a0954e05c9c9769c5903", "message": "Default interface methods IL tests from CoreCLR"}, {"url": "https://api.github.com/repos/mono/mono/commits/cae8dd6dbd9253c0abbe2ab0a000ac617f116a78", "message": "[System.Core] Use corefx System.Linq tests (~25k tests) (#5515)"}, {"url": "https://api.github.com/repos/mono/mono/commits/e9e17e069e6949600a382341e8888d7486553f21", "message": "[System] System.Net.* tests from corefx (+RemoteExecutorTestBase) (#6136)"}, {"url": "https://api.github.com/repos/mono/mono/commits/50b6a2e823812ac5f4ac4cde074b482d42bdaf39", "message": "Fix genproj.cs (make update-solution-files) (#6162)\n\nmake update-solution-files works but actually throws an ArgumentOutOfRangeException and as a result - corrupted csproj (fails on System.Runtime.CompilerServices.Unsafe -\r\nSystem.Runtime.CompilerServices.Unsafe.dll.sources is empty)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6040", "title": "[System.IO] In some cases '/' is not a valid root directory - fixes 60138", "body": "https://bugzilla.xamarin.com/show_bug.cgi?id=60138\r\nif `Environment.GetLogicalDrives` doesn't contain '/' item - `Path.GetPathRoot` should return the longest suitable drive `Environment.GetLogicalDrives` contains (currently it always returns '/').\r\n\r\nfor example `Environment.GetLogicalDrives`:\r\n\r\n- \"/foo\"\r\n- \"/foo/boo\"\r\n- \"/tmp\"\r\n\r\nthen\r\n\r\n- `GetPathRoot(\"/foo/some/dir\")` => \"/foo\"\r\n- `GetPathRoot(\"/foo/boo\")` => \"/foo/boo\"\r\n- `GetPathRoot(\"/foo/booo\")` => \"/foo\"\r\n\r\nnot sure how to test such fixes - I need to mock `Environment.GetLogicalDrives`.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583", "body": "and probably worth mentioning that it is possible to attach files to github issues via drag-n-drop? (Cause it's unclear and there is no \"attach\" button) \ud83d\ude42 ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/156244583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148930279", "body": "I use some bash functions like [[ - will fail on sh. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/148930279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149102969", "body": "@marek-safar @akoeplinger btw, all .net core build scripts also use \"/usr/bin/env bash\". I actually changed sh to bash because of linux build machine - macOS and windows(cygwin) work with sh as a first line just fine (as well as my local linux machine). I'll try to rewrite it to sh if it's possible.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/149102969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "emptyVoid": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6236", "title": "Graphics.FillRegion produces an incorrect result in excluded area", "body": "## Steps to Reproduce\r\n\r\n```c#\r\nusing System.Drawing;\r\nusing System.Drawing.Drawing2D;\r\n\r\nnamespace graphicstest\r\n{\r\n  class MainClass\r\n  {\r\n    public static void Main(string[] args)\r\n    {\r\n      var image = new Bitmap(400, 400);\r\n\r\n      using (var graphics = Graphics.FromImage(image))\r\n      {\r\n        graphics.Clear(Color.Gray);\r\n\r\n        var rectPath = new GraphicsPath();\r\n        rectPath.AddRectangle(new Rectangle(50, 50, 300, 300));\r\n        var polyPath = new GraphicsPath();\r\n        polyPath.AddPolygon(new Point[] { new Point(100, 100)\r\n                                        , new Point(200,  75)\r\n                                        , new Point(300, 100)\r\n                                        , new Point(325, 200)\r\n                                        , new Point(300, 300)\r\n                                        , new Point(200, 325)\r\n                                        , new Point(100, 300)\r\n                                        , new Point( 75, 200) });\r\n\r\n        var region = new Region();\r\n        region.MakeEmpty();\r\n        region.Union(rectPath);\r\n        region.Exclude(polyPath);\r\n\r\n        var brush = new SolidBrush(Color.Lime);\r\n        //var brush = new HatchBrush(HatchStyle.DiagonalCross,\r\n        //                           Color.FromArgb(0x30, Color.White),\r\n        //                           Color.Transparent);\r\n        graphics.FillRegion(brush, region);\r\n      }\r\n\r\n      image.Save(\"test-image.png\");\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Current Behavior\r\n\r\nFills the excluded area with some brighter color.\r\n![produced](https://user-images.githubusercontent.com/13639229/33934884-b7eaf5a8-e02c-11e7-8daa-b2ee612e4148.png)\r\n\r\n## Expected Behavior\r\n\r\nShould not fill the excluded area at all.\r\n![expected](https://user-images.githubusercontent.com/13639229/33934896-bfed19de-e02c-11e7-8409-a77c1b5c6609.png)\r\n\r\n**Version Used**:\r\n\r\nIn C/C++ (via GDI+ Flat API):\r\nlibgdiplus 5.6 (built from sources with prerequisites from the official Ubuntu 16.04 repository)\r\n\r\nIn C#:\r\nMonoDevelop\r\nVersion 7.1 Preview (7.1 build 1291)\r\nInstallation UUID: 04a4b1cc-4f29-44d8-93a0-9553c98dd681\r\nRuntime:\r\n\tMono 5.2.0 ((HEAD/da80840 Sat Aug 12 16:24:35 UTC 2017) (64-bit)\r\n\tGTK+ 2.24.29 (Ambiance theme)\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6236/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "migueldeicaza": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6230", "title": "mkbundle missing features", "body": "Few issues found while demoing mkbundle:\r\n\r\n- [x] The list of the downloaded targets keeps the `zip` extension, it should be plain (example: `~/.mono/targets/mono-5.4.0-ubuntu-12.04-x64.zip/bin`).   We should ask Jo to rename the files on the server\r\n- [x] Not clear that we distribute the Boring TLS native payloads on the packages\r\n- [ ] Needs to infer the native libraries and issue a warning for those that are not included, currently there is no way of knowing that you are missing `libMonoSupport` or the Boring TLS payload.\r\n- [ ] Automatically bundle `machine.config` for `--simple` and `--cross` targets.\r\n\r\n**Version Used**:\r\n\r\n5.4.0.\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d1649e90fcb80410b888edd6e5d20493c08e9a56", "message": "[corlib] Use Environment.Platform to access the platform, rather than probing the file system (#6535)\n\nAlternatve patch to: #6533"}, {"url": "https://api.github.com/repos/mono/mono/commits/e9913fdc487622073a0827f32f845b637163590d", "message": "Improve sgen error reporting for assemblies it attempts to process (#6463)\n\nMakes it simpler to see what is wrong with an assembly."}, {"url": "https://api.github.com/repos/mono/mono/commits/fc2d278cc4f73f55c75a2f85a3433ff90617834e", "message": "Add capability to list more than one method to be verbose, document some internal APIs, update man page with more explanations (#6426)"}, {"url": "https://api.github.com/repos/mono/mono/commits/406b40bb77345c9a1ed2a118cf755f6c4b37d0ad", "message": "Implement a couple of SocketAsyncEventArgs methods"}, {"url": "https://api.github.com/repos/mono/mono/commits/e0e185d70abd73e82bbde7520edcb3bb0c68f1c8", "message": "Adds support for nanosecond resolution file information where available (Fixes: 6283) (#6307)\n\n* Adds support for nanosecond resolution file information where available.\r\n\r\nThis patch adds support to the runtime to use the nanosecond\r\ninformation available on Mac and Linux on `struct stat`.\r\n`stat.st_Xtimespec` strucutre on OSX, and `stat.st_Xtime` and\r\n`stat.st_Xtim.tv_nsec` pair on Linux.\r\n\r\nAdditionally, this adds support in `Mono.Posix` for MacOS nanosecond stat\r\ndata, it already had Linux support before.\r\n\r\n* Use ULL here to prevent the computation from overflowing"}, {"url": "https://api.github.com/repos/mono/mono/commits/4f6e01edcdff3311de272716c81752996a2205e1", "message": "Create ISSUE_TEMPLATE.md"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3510", "title": "[PATCH] SemaphoreSlim, fail faster for timeout 0", "body": "This brings the patch: https://github.com/dotnet/coreclr/pull/6898\n\nFail faster for `Wait(0)` when no counts available.\n\nDon't allocate in the `Wait(0)` and `WaitAsync(0)` fail paths.\n\n1M iters Server GC\n\n| method | pre (ms) | post (ms) | improvement |\n| --- | --- | --- | --- |\n| Wait(0) | 33,788.25 | 12.28 | x 2751.5 |\n| WaitAsync(0) | 360.79 | 24.38 | x 14.8 |\n\nMemory allocations, saves 360MB over the 1M ops\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/156628", "body": "I would love to see this ;-)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/156628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/219723", "body": "Reverted, and reopened bug.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/219723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/219729", "body": "Thanks, this has been fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/219729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/219733", "body": "Good point.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/219733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/311294", "body": "Thanks, backported this to 2.10\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/311294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/321802", "body": "Atsushi, does this affect System.Json?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/321802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/668261", "body": "Hello!\n\n```\nThanks, I have applied that patch!\n```\n\nMiguel\n\nOn Mon, Oct 3, 2011 at 11:15 AM, sehe <\nreply@reply.github.com>wrote:\n\n> Miguel... wouldn't it appear that the assebmlyArgs are getting passed\n> nicely to the ServiceRunner but subsequently ignored on the OnStart call? Or\n> is that by design?\n> \n> I found that while answering\n> http://stackoverflow.com/questions/7636395/passing-command-line-arguments-to-mono-service\n> \n> I have a suggested edit over at my fork (against master):\n> https://github.com/sehe/mono/commit/4273a6e14f723301e7c9e7cedaece45e1b156864\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/mono/mono/commit/64ecfe59e7cffb1bbef54be2e9fc32bdc755fd12#commitcomment-626721\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/668261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1478355", "body": "LOVED THIS CHANGE!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1478355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/134371348", "body": "Since this is user-visible change, could we update README.md as well to list this new option?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/134371348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2956037", "body": "This looks great.\n\nJust one tiny request, instead of:\n\n#if !HAVE_FOO\nold_code\n#else \nuse_foo\n#endif\n\nAvoid the \"!\" and do:\n\n#if HAVE_FOO\nuse_foo\n#else\nold_code\n#endif\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2956037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72647923", "body": "For Alpine, perhaps we can detect and disable Boehm?\n\nI am not crazy about adding libc-specific defines.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72647923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/63458008", "body": "That is entirely under our control, and TBD.   \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/63458008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "NattyNarwhal": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6228", "title": "Infinite loop of infinitely increasing wait times upon termination of runtime", "body": "<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Mono's core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/mono/help\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `mono --version`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected assembly or subsystem\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you are able.\r\n-->\r\n\r\n* **Version**: Mono JIT compiler version 5.11.0 (master/2b90049bcce Mon Dec 11 17:05:00 AST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n        TLS:           normal\r\n        SIGSEGV:       normal\r\n        Notification:  Thread + polling\r\n        Architecture:  amd64\r\n        Disabled:      none\r\n        Misc:          softdebug\r\n        Interpreter:   yes\r\n        LLVM:          supported, not enabled.\r\n        GC:            sgen\r\n* **Platform**: Haiku shredder 1 hrev51662 Dec  8 2017 18:40:07 x86_64 x86_64 Haiku [x86 is affected too]\r\n* **Subsystem**: `mono/utils/mono-threads.c`\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nThe function `suspend_sync_nolock` causes an infinite loop after the program terminates and runtime cleanup is performed, For some reason, the conditions that break the loop (related to threading) are not met, and the sleep duration raises infinitely making any chance of breaking out of the loop increasingly unlikely.\r\n\r\nTo fix, the cause of the loop being unbroken must be found. (It may be prudent to just give up on the loop after a while too.) I'm uncertain if the problem is within Mono or Haiku either; I'm leaning towards Mono, which is why I'm filing here.\r\n\r\n(NOTE: When debugging, I had to make this function non-static so I could set breakpoints properly on the function body, or Haiku's debugger was unaware of it. You can make the makefiles start Mono attached to the debugger by prefixing the mono executable name in `runtime/mono-wrapper` with `\"Debugger \"`.) (ALSO NOTE: If you want to reproduce this yourself, the build dependencies needed for Mono on Haiku are `gettext` and `libtool`. Note on x86 you will have to run `setarch x86` to get GCC5.)\r\n\r\nIf this bug is fixed, then Roslyn should be able to successfully terminate and we may be able to successfully build the managed parts of Mono for a working Haiku build.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/83a809553f1e4e7da73cbc232ec97240bdda6f86", "message": "Unbreak XMM register handling on platforms without MonoContextSimdReg (#6219)\n\n* Unbreak XMM register handling on platforms without MonoContextSimdReg\r\n\r\nPlatforms like Haiku (and glibc-less Linux, but that was unbroken a few\r\nweeks ago) don't have this implemented on Mono. (yet?) Restore old\r\nbehaviour behind an #ifdef (same one as on mono-context.h) - perhaps it\r\ncould be a nicer ifdef, but I'm keeping this consistent for now.\r\n\r\n* Attempt at a universal ifdef for MonoContextSimdReg presence\r\n\r\nSuggestion of @kumpera. I've put #ifdefs in the obvious places, and\r\nverified that the commit ensures we're still in the same position as\r\nbefore.\r\n\r\n* Fix non-MonoContextSimdReg calls in tramp-amd64.c\r\n\r\nFollow advice of @joncham wrt the type and function to use instead."}, {"url": "https://api.github.com/repos/mono/mono/commits/5a581fb229331e0ebb0fd08065ff6d6164b8af85", "message": "Compile on amd64 Haiku (#4473)\n\n* Compile on amd64 Haiku\r\n\r\nUse sigcontext (somewhat like win32, or x86) on Haiku amd64.\r\n\r\nOn amd64, Haiku doesn't have issues with marshalling 64-bit values,\r\nbut it currently does have issues with SGen either causing a stall\r\nor a core dump. As such, while it can compile the stdlib (further\r\nthan x86 got), it's still a work in progress.\r\n\r\n* Use set_real_time_clock for sys-time.c on Haiku\r\n\r\n* Get mono-boehm compiling on Haiku again\r\n\r\nIt still doesn't work. Initialization will call GC_mark_from, which\r\nwill cause a segmentation fault as it decrements pointers. (Mono\r\nwill enter an infinite loop in mono_get_hazardous_pointer as a result.)\r\n\r\nFor now, mono-sgen will continue to be used by default."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nealef": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6208", "title": "Finalizer Segment Fault", "body": "1. Application Version: Trunk\r\n2. redhat 6.5\r\n3. intel x86\r\n4. Description:\r\nRunning nunit runner we are getting a segment fault when the nunit running is exiting. After painful debugging of commits to the trunk I found the commit that was causing the problem. It was this one.\r\n\r\nhttps://github.com/mono/mono/commit/be9821f888281a347b3128912c6dc94c294b9017\r\n\r\nI commented out the `cached_module_cleanup()`; and magically the segment faulting went away.\r\n\r\nWhat I found was when nunitrunner was exiting , this method would get executed and in the middle of the executing I noticed the finalizers were running and in our finalizers we do c++ interop calls\r\nTo do c++ memory cleanup and its during the c++ cleanup it ends up crashing related to what seems to be happening in the cached_module_cleanup() process.\r\n\r\nI put some debugging around the call and this is what I got:\r\n```\r\nTests run: 306, Errors: 0, Failures: 0, Inconclusive: 0, Time: 54.5821201 seconds\r\nNot run: 0, Invalid: 0, Ignored: 0, Skipped: 0\r\n\r\n11MpiNUnitWrapper MPI Finalize called\r\n1a\r\nDeleting ObjectCatalog...\r\n\r\nStill holding on to 11 objects\r\nSegmentation fault (core dumped)\r\n[root@cgy-itsec2 Release]# ls *core*\r\n```\r\nNote that the message 1a is printed just before the cached_module_cleanup() is called and 2a is called just after. Note there is no 2a message printed and the 'Deleting ObjectCatalog' message\r\nIs coming from c++ and was initiated by one of our c# object finalizers.\r\nSo It looks like this cached_module_cleanup() method is getting called and in the middle of it .net finalizers are getting called and somehow this cleanup is messing up the finalizer calls.\r\n\r\nMy question is shouldnt it wait for the finalizers before doing this cleanup?\r\n\r\nThis is the dump of the core dump file:\r\n```\r\n(gdb) backtrace\r\n#0 0x00007f9dd333878b in boost::detail::sp_counted_impl_pd<domainmodel::cppobjectcatalog::ObjectCatalog*, domainmodel::cppobjectcatalog::ObjectCatalog::Deleter>::dispose() ()\r\nfrom /build/COFLOW/Bin/redhat6/x64/gcc/Release/libDrms.Server.compute.domainmodel.cppobjectcatalog.so\r\n#1 0x00007f9dd3338691 in boost::shared_ptr<domainmodel::cppobjectcatalog::ObjectCatalog>::~shared_ptr() ()\r\nfrom /build/COFLOW/Bin/redhat6/x64/gcc/Release/libDrms.Server.compute.domainmodel.cppobjectcatalog.so\r\n#2 0x00007f9e1d5a0dba in __cxa_finalize () from /lib64/libc.so.6\r\n#3 0x00007f9dd3336c83 in __do_global_dtors_aux () from /build/COFLOW/Bin/redhat6/x64/gcc/Release/libDrms.Server.compute.domainmodel.cppobjectcatalog.so\r\n#4 0x00007ffc586b5e40 in ?? ()\r\n#5 0x00007f9e1e47d829 in _dl_close_worker () from /lib64/ld-linux-x86-64.so.2\r\nBacktrace stopped: frame did not save the PC\r\n```\r\n\r\nNote that its in the middle of some c++ code that was initiated by a c# objects finalizer when it crashed and the `ObjectCatalog::Deleter` is doing some cleanup related to some pinned objects on the .net side that are shared with c++.\r\n\r\nThat's are far as I could go without really knowing what the purpose of this `cached_module_cleanup()` is and why its happening here.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3125", "title": "Enhanced logging", "body": "Rework previous logging enhancements:\n- Reimplement previous mono_trace_set_log_handler so that things dependent on this MONO_API continue to work\n- Rename the new handler to mono_trace_set_log_handler_internal\n- The existing API is reworked to use the new mechanism so that it registers its callback and an adapter is used to invoke it when a log write operation is required. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1258500", "body": "Thanks. I'll back out and rework.\n\nOn 4/25/12 4:56 PM, \"Duncan Mak\"\n<reply+c-1258311-167e2ff978e0c010f08e0a13235052142ab8c533-308986@reply.githu\nb.com> wrote:\n\n> It looks like `CLOCK_MONOTONIC` is not available on OS X (the build\n> machines run 10.6.8)\n> \n> ```\n> handles.c: In function '_wapi_handle_init':\n> handles.c:338: warning: implicit declaration of function\n> 'pthread_condattr_setclock'\n> handles.c:338: warning: nested extern declaration of\n> 'pthread_condattr_setclock'\n> handles.c:338: error: 'CLOCK_MONOTONIC' undeclared (first use in this\n> function)\n> handles.c:338: error: (Each undeclared identifier is reported only once\n> handles.c:338: error: for each function it appears in.)\n> make[4]: *** [handles.lo] Error 1\n> ```\n> \n> The whole log is available here:\n> https://wrench.mono-project.com/Wrench/ViewLane.aspx?lane_id=10&host_id=8&revi\n> sion_id=9213\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/mono/mono/commit/36a57a0e9263d8114f8f2fd67f5eddd5ef118040#c\n> ommitcomment-1258311\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1258500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1705387", "body": "What does it break? This was a result of working with Microsoft. \n\nOn 13/08/2012, at 5:52, Marek Safar notifications@github.com wrote:\n\n> This breaks .net compatibility and probably just hides underlying problem\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1705387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1706031", "body": "Thanks, which API allows you to set the value?\n\nOn 8/13/12 4:38 AM, \"Marek Safar\" notifications@github.com wrote:\n\n> https://wrench.mono-project.com/Wrench/WebServices/Download.aspx?workfile_id=8\n> 96161\n> \n> Secondly, the value is configurable so it should work with any provided value.\n> \n>  \u2039\n>  Reply to this email directly or view it on GitHub\n> <https://github.com/mono/mono/commit/8c2640437118b31b8d2033ec1da4fe0aa0ed4c5a#\n> commitcomment-1705410> .\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1706031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Ailincai-Nicolae-Rares": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6207", "title": "\"\\\\csc.exe\" is invalid", "body": "I want to build the System.Data.SQLite to can work on Linux, but I have this error:\r\n![img](https://i.imgur.com/Uzdr5Av.png)\r\n\r\nhttps://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "colinjneville": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6201", "title": "C# compiler reports CS1540 on protected non-function member access even when there is a matching hidden public member in a base class", "body": "With the following class structure, mcs (tested on Windows 5.4.1.0) fails with error CS1540 \"Cannot access protected member \\`B.Field' via a qualifier of type \\`B'. The qualifier must be of type \\`M.C' or derived from it\", while VS C# 6.0 compiles and runs successfully. Casting to the base class which declared the public member to access the member avoids the error.\r\n\r\n```csharp\r\npublic class A {\r\n\tpublic bool Field;\r\n}\r\n\r\npublic class B : A {\r\n\tprotected new bool Field;\r\n}\r\n\r\npublic class C : B {\r\n\tpublic void Z(B b) {\r\n\t\t// CS1540\r\n\t\tb.Field = true;\r\n\t}\r\n}\r\n```\r\nComplete example at https://gist.github.com/colinjneville/ba7d8ac13c84e135f19df500d1879e20\r\n\r\nThis doesn't affect methods, which resolve to the public version without error. It's not clear to me whether both should be errors or neither; although VS allows both, from my interpretation of the C# 6.0 draft spec, it does seem like the error is technically correct.\r\n\r\n>[If the declared accessibility of T is public, the accessibility domain of T is the program text of P and any program that references P](https://github.com/dotnet/csharplang/blob/master/spec/basic-concepts.md#declared-accessibility)\r\n\r\nThe accessibility domain of A, B, C is the entire example.\r\n\r\n>[If the declared accessibility of M is public, the accessibility domain of M is the accessibility domain of T](https://github.com/dotnet/csharplang/blob/master/spec/basic-concepts.md#declared-accessibility)\r\n\r\nThe accessibility domain of A.Field as also the entire example.\r\n\r\n>[If the declared accessibility of M is protected, let D be the union of the program text of T and the program text of any type derived from T. The accessibility domain of M is the intersection of the accessibility domain of T with D.](https://github.com/dotnet/csharplang/blob/master/spec/basic-concepts.md#declared-accessibility)\r\n\r\nThe accessibility domain of B.Field is the text of B and C.\r\n\r\n>[The scope of a member declared by a class_member_declaration (Class body) is the class_body in which the declaration occurs. In addition, the scope of a class member extends to the class_body of those derived classes that are included in the accessibility domain (Accessibility domains) of the member.](https://github.com/dotnet/csharplang/blob/master/spec/basic-concepts.md#scopes)\r\n\r\nThe scope of A.Field is A, B, and C, and the scope of B.Field is B and C.\r\n\r\n>[A constant, field, property, event, or type introduced in a class or struct hides all base class members with the same name.\r\nA method introduced in a class or struct hides all non-method base class members with the same name, and all base class methods with the same signature (method name and parameter count, modifiers, and types).\r\nA declaration of a new member hides an inherited member only within the scope of the new member.](https://github.com/dotnet/csharplang/blob/master/spec/basic-concepts.md#hiding-through-inheritance)\r\n\r\nC is in the scope of B.Field, so B.Field should hide A.Field in C.\r\n\r\n>[When a protected instance member is accessed outside the program text of the class in which it is declared, ... the access must take place within a class declaration that derives from the class in which it is declared. Furthermore, the access is required to take place through an instance of that derived class type or a class type constructed from it. This restriction prevents one derived class from accessing protected members of other derived classes, even when the members are inherited from the same base class.](https://github.com/dotnet/csharplang/blob/master/spec/basic-concepts.md#protected-access-for-instance-members)\r\n\r\nThis clause prevents access to B.Field with a B instance from C, but does not prevent hiding.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PeteLewisUnity": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6200", "title": "[Unix] w32process-unix.c mono_w32process_signal_finished breaks all child process status queries", "body": "This issue refers to this code here: https://github.com/mono/mono/blob/dd34edb9076b05cefd37b53bb8f0fb1b8f1884a3/mono/metadata/w32process-unix.c#L1408-L1414\r\n\r\nThis change severely impacts process management for Unix-based applications.\r\n\r\n`waitpid(-1,...)` reaps _all_ zombie child processes of the calling process. See `man waitpid`. After a child process is reaped, it can no longer be queried. Because this reaping step is [invoked via the `SIGCHLD` signal](https://github.com/mono/mono/blob/dd34edb9076b05cefd37b53bb8f0fb1b8f1884a3/mono/metadata/w32process-unix.c#L1383), all zombie children of the calling process are reaped every time any child process terminates, regardless of whether that child process was tracked by Mono. \r\n\r\nThe impact of this is that apps using Mono that spawn their own child processes (outside of Mono's `w32process` API) cannot call `wait` on children, cannot query exit codes, and so on. A call to `waitpid(my_child_pid,...)` will return `ECHILD` for \"no such child\" because Mono has already cleaned up the child the moment `SIGCHLD` was raised.\r\n\r\nA suggested fix would be to only wait on processes that Mono owns, rather than all child processes for the calling process:\r\n\r\n```c\r\n\tfor (process = processes; process; process = process->next) {\r\n\t\tdo {\r\n\t\t\tpid = waitpid (process->pid, &status, WNOHANG);\r\n\t\t} while (pid == -1 && errno == EINTR);\r\n\r\n\t\tif (process->pid != pid) // catches both no-change status (0) and error codes (-1)\r\n\t\t\tcontinue;\r\n\t\tif (process->signalled)\r\n\t\t\tcontinue;\r\n\r\n\t\tprocess->signalled = TRUE;\r\n\t\tprocess->status = status;\r\n\t\tmono_os_sem_post (&process->exit_sem);\r\n\t\tmono_memory_barrier ();\r\n\t\t/* Mark this as freeable, the pointer becomes invalid afterwards */\r\n\t\tprocess->freeable = TRUE;\r\n\t\tbreak;\r\n\t}\r\n```", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/8c9c37c45bb3302f917fe345004a5076c21d5ba1", "message": "Only call `waitpid` for processes that Mono tracks, rather than all child processes owned by the calling process. (#6202)\n\nwaitpid(-1,...) reaps all zombie child processes of the calling process (see `man waitpid`). After a child process is reaped, it can no longer be queried. Because this reaping step is invoked via the `SIGCHLD` signal, all zombie children of the calling process are reaped every time any child process terminates, regardless of whether that child process was tracked by Mono.\r\n\r\nThe impact of this bug is that apps using Mono that spawn their own child processes (outside of Mono's `w32process` API) cannot query the exit state of its children. For example, a call to `waitpid(my_child_pid,...)` will return `ECHILD` for \"no such child\" because Mono has already cleaned up the child the moment `SIGCHLD` was raised."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nddipiazza": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6187", "title": "mkbundle Linux - program doesn't run on system unless `mono-core` is installed", "body": "Bugzilla ticket:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60753#bug_status_bottom\r\n\r\nSome more info on Stackoverflow: https://stackoverflow.com/questions/47384100/c-sharp-application-built-with-mkbundle-doesnt-work\r\n\r\nBasically I cannot launch a c# app built and bundled using mkbundle unless `mono-core` is installed.\r\n\r\nI run `mkbundle --simple --static --deps -o ./SpFetcher bin/Release/SpPrefetchIndexBuilder.exe`\r\n\r\nBut I get this as a result:\r\n\r\n```\r\n\r\n    The URI prefix is not recognized.\r\n          at System.Net.WebRequest.Create (System.Uri requestUri, System.Boolean useUriBase) [0x000ae] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n          at System.Net.WebRequest.Create (System.String requestUriString) [0x00014] in <50d80b08c1a5449282b22aedf03ce925>:0 \r\n          at Microsoft.SharePoint.Client.SPWebRequestExecutor..ctor (Microsoft.SharePoint.Client.ClientRuntimeContext context, System.String requestUrl) [0x0002e] in <c0e6dcb0d2c7447bb9d4f89eec39d654>:0 \r\n          at Microsoft.SharePoint.Client.DefaultWebRequestExecutorFactory.CreateWebRequestExecutor (Microsoft.SharePoint.Client.ClientRuntimeContext context, System.String requestUrl) [0x00021] in <c0e6dcb0d2c7447bb9d4f89eec39d654>:0 \r\n          at Microsoft.SharePoint.Client.ClientContext.GetFormDigestInfoPrivate () [0x0000d] in <e2eb771f808b400bbe60d58b69acf7f0>:0 \r\n          at Microsoft.SharePoint.Client.ClientContext.EnsureFormDigest () [0x0001f] in <e2eb771f808b400bbe60d58b69acf7f0>:0 \r\n          at Microsoft.SharePoint.Client.ClientContext.ExecuteQuery () [0x00008] in <e2eb771f808b400bbe60d58b69acf7f0>:0 \r\n          at SpPrefetchIndexBuilder.SpPrefetchIndexBuilder.getSubWebs (System.String url, System.Collections.Generic.Dictionary`2[TKey,TValue] parentWebDict) [0x00266] in <8afd075a89d9457b827aef736e8e1c09>:0 \r\n          at SpPrefetchIndexBuilder.SpPrefetchIndexBuilder.Main (System.String[] args) [0x00018] in <8afd075a89d9457b827aef736e8e1c09>:0 \r\n\r\n```\r\n\r\nThis is an unexpected error that doesn't happen when running on Windows in normal circumstances, and it doesn't happen when you run it on a machine with mono-core installed. Why is this error happening does anyone know? ", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivancitin": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6165", "title": "mono_os_mutex_lock: pthread_mutex_lock failed (failing in mac mono 5.8.0.88, but not in linux mono  5.8.0.22)", "body": "Hello,\r\n\r\nI'm trying to integrate mono and C, and everything looked good on linux, but when trying the same thing in mac i'm getting the failure:\r\n\r\nmono_os_mutex_lock: pthread_mutex_lock failed with \"Invalid argument\" (22)\r\n\r\nOn mac, i'm able to compile everything the same way as in linux, using gcc and msbuild, but when executing with mono it fails.\r\n\r\nI then found this example https://github.com/xplicit/PInvokePerf and give it a try, again it worked just fine in linux, but failed the same way in mac.\r\n\r\nIs this something anyone out there has seen and maybe can help me figure what i'm doing wrong?\r\n\r\nThis is the mono i'm using on mac:\r\n<pre>\r\n$ mono --version\r\nMono JIT compiler version 5.8.0.88 (2017-10/ddeba6e1bab Tue Nov 28 09:38:13 EST 2017)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n\tTLS:           normal\r\n\tSIGSEGV:       altstack\r\n\tNotification:  kqueue\r\n\tArchitecture:  amd64\r\n\tDisabled:      none\r\n\tMisc:          softdebug \r\n\tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\r\n\tGC:            sgen (concurrent by default)\r\n</pre>\r\n\r\nOn linux i'm using 5.8.0.22\r\n\r\nThe trace i get when running [Sergey Zhukov's example](https://github.com/xplicit/PInvokePerf) on Mac (i only changed his makefile to use msbuild instead of xbuild) is:\r\n<pre>\r\nmono_os_mutex_lock: pthread_mutex_lock failed with \"Invalid argument\" (22)\r\nStacktrace:\r\n\r\n  at <unknown> <0xffffffff>\r\n  at (wrapper managed-to-native) PInvokePerf.PerformanceTest.InitInternals () [0x00002] in <e8439fc2097d4f138154be044dbb6e70>:0\r\n  at PInvokePerf.MainClass.Main (string[]) [0x00005] in <e8439fc2097d4f138154be044dbb6e70>:0\r\n  at (wrapper runtime-invoke) <Module>.runtime_invoke_void_object (object,intptr,intptr,intptr) [0x0004e] in <e8439fc2097d4f138154be044dbb6e70>:0\r\n\r\nNative stacktrace:\r\n\r\n\t0   mono                                0x000000010736bdc1 mono_handle_native_crash + 257\r\n\t1   libsystem_platform.dylib            0x00007fffa692bb3a _sigtramp + 26\r\n\t2   ???                                 0x00007fff5894fde0 0x0 + 140734679547360\r\n\t3   libsystem_c.dylib                   0x00007fffa67b0420 abort + 129\r\n\t4   libmonosgen-2.0.1.dylib             0x000000010a6acb39 monoeg_log_default_handler + 105\r\n\t5   libmonosgen-2.0.1.dylib             0x000000010a6acc0e monoeg_g_log + 206\r\n\t6   libmonosgen-2.0.1.dylib             0x000000010a572981 mono_add_internal_call + 161\r\n\t7   libperf.so                          0x0000000109a9ade7 init + 23\r\n\t8   ???                                 0x000000010999f227 0x0 + 4456051239\r\n\t9   mono                                0x00000001072c1c57 mono_jit_runtime_invoke + 1383\r\n\t10  mono                                0x00000001074821a4 do_runtime_invoke + 84\r\n\t11  mono                                0x00000001074857c9 do_exec_main_checked + 137\r\n\t12  mono                                0x000000010732ecbf mono_jit_exec + 287\r\n\t13  mono                                0x00000001073314b4 mono_main + 9140\r\n\t14  mono                                0x00000001072b163d main + 253\r\n\t15  mono                                0x00000001072b1534 start + 52\r\n\t16  ???                                 0x0000000000000002 0x0 + 2\r\n\r\nDebug info from gdb:\r\n\r\n(lldb) command source -s 0 '/tmp/mono-gdb-commands.2ZOmzM'\r\nExecuting commands in '/tmp/mono-gdb-commands.2ZOmzM'.\r\n(lldb) process attach --pid 50560\r\nwarning: (x86_64) /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/4.5/mscorlib.dll.dylib empty dSYM file detected, dSYM was created with an executable with no debug info.\r\nwarning: (x86_64) /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/libglib-2.0.0.dylib empty dSYM file detected, dSYM was created with an executable with no debug info.\r\nProcess 50560 stopped\r\n* thread #1, name = 'tid_307', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n    frame #0: 0x00007fffa684b3ee libsystem_kernel.dylib`__wait4 + 10\r\nlibsystem_kernel.dylib`__wait4:\r\n->  0x7fffa684b3ee <+10>: jae    0x7fffa684b3f8            ; <+20>\r\n    0x7fffa684b3f0 <+12>: movq   %rax, %rdi\r\n    0x7fffa684b3f3 <+15>: jmp    0x7fffa6843cd4            ; cerror\r\n    0x7fffa684b3f8 <+20>: retq   \r\n\r\nExecutable module set to \"/Library/Frameworks/Mono.framework/Versions/Current/Commands/mono\".\r\nArchitecture set to: x86_64h-apple-macosx.\r\n(lldb) thread list\r\nProcess 50560 stopped\r\n* thread #1: tid = 0x7df80, 0x00007fffa684b3ee libsystem_kernel.dylib`__wait4 + 10, name = 'tid_307', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n  thread #2: tid = 0x7df81, 0x00007fffa684abf2 libsystem_kernel.dylib`__psynch_cvwait + 10, name = 'SGen worker'\r\n  thread #3: tid = 0x7df82, 0x00007fffa6843386 libsystem_kernel.dylib`semaphore_wait_trap + 10, name = 'Finalizer'\r\n  thread #4: tid = 0x7df83, 0x00007fffa684b44e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n  thread #5: tid = 0x7df85, 0x00007fffa684b44e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n  thread #6: tid = 0x7df88, 0x00007fffa684b44e libsystem_kernel.dylib`__workq_kernreturn + 10\r\n(lldb) thread backtrace all\r\n* thread #1, name = 'tid_307', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP\r\n  * frame #0: 0x00007fffa684b3ee libsystem_kernel.dylib`__wait4 + 10\r\n    frame #1: 0x000000010736be4e mono`mono_handle_native_crash(signal=<unavailable>, ctx=<unavailable>, info=<unavailable>) at mini-exceptions.c:2726 [opt]\r\n    frame #2: 0x00007fffa692bb3a libsystem_platform.dylib`_sigtramp + 26\r\n    frame #3: 0x00007fffa684ad43 libsystem_kernel.dylib`__pthread_kill + 11\r\n    frame #4: 0x00007fffa6938457 libsystem_pthread.dylib`pthread_kill + 90\r\n    frame #5: 0x00007fffa67b0420 libsystem_c.dylib`abort + 129\r\n    frame #6: 0x000000010a6acb39 libmonosgen-2.0.1.dylib`monoeg_log_default_handler(log_domain=<unavailable>, log_level=<unavailable>, message=<unavailable>, unused_data=<unavailable>) at goutput.c:234 [opt]\r\n    frame #7: 0x000000010a6acc0e libmonosgen-2.0.1.dylib`monoeg_g_log [inlined] monoeg_g_logv at goutput.c:115 [opt]\r\n    frame #8: 0x000000010a6acbc8 libmonosgen-2.0.1.dylib`monoeg_g_log(log_domain=0x0000000000000000, log_level=G_LOG_LEVEL_ERROR, format=<unavailable>) at goutput.c:125 [opt]\r\n    frame #9: 0x000000010a572981 libmonosgen-2.0.1.dylib`mono_add_internal_call [inlined] mono_os_mutex_lock(mutex=<unavailable>) at mono-os-mutex.h:101 [opt]\r\n    frame #10: 0x000000010a572954 libmonosgen-2.0.1.dylib`mono_add_internal_call [inlined] mono_icall_lock at icall.c:8147 [opt]\r\n    frame #11: 0x000000010a572954 libmonosgen-2.0.1.dylib`mono_add_internal_call(name=<unavailable>, method=0x0000000109a9ab80) at icall.c:8205 [opt]\r\n    frame #12: 0x0000000109a9ade7 libperf.so`init at libperf.c:152 [opt]\r\n    frame #13: 0x000000010999f227\r\n    frame #14: 0x00000001072c1c57 mono`mono_jit_runtime_invoke(method=<unavailable>, obj=<unavailable>, params=0x00007fff589506d8, exc=0x00007f8011042810, error=<unavailable>) at mini-runtime.c:2800 [opt]\r\n    frame #15: 0x00000001074821a4 mono`do_runtime_invoke(method=0x00007f8010c12218, obj=0x0000000000000000, params=0x00007fff589506d8, exc=0x0000000000000000, error=0x00007fff58950718) at object.c:2849 [opt]\r\n    frame #16: 0x00000001074857c9 mono`do_exec_main_checked [inlined] mono_runtime_invoke_checked(method=<unavailable>, obj=<unavailable>, error=<unavailable>) at object.c:3002 [opt]\r\n    frame #17: 0x0000000107485788 mono`do_exec_main_checked(method=0x00007f8010c12218, args=<unavailable>, error=0x00007fff58950718) at object.c:4726 [opt]\r\n    frame #18: 0x000000010732ecbf mono`mono_jit_exec(domain=<unavailable>, assembly=<unavailable>, argc=1, argv=0x00007fff58950a38) at driver.g.c:1040 [opt]\r\n    frame #19: 0x00000001073314b4 mono`mono_main [inlined] main_thread_handler at driver.g.c:1109 [opt]\r\n    frame #20: 0x0000000107331481 mono`mono_main(argc=2, argv=<unavailable>) at driver.g.c:2222 [opt]\r\n    frame #21: 0x00000001072b163d mono`main [inlined] mono_main_with_options(argc=<unavailable>, argv=<unavailable>) at main.c:46 [opt]\r\n    frame #22: 0x00000001072b1629 mono`main(argc=2, argv=<unavailable>) at main.c:339 [opt]\r\n    frame #23: 0x00000001072b1534 mono`start + 52\r\n\r\n...\r\n</pre>\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wordodv": {"issues": [{"url": "https://api.github.com/repos/mono/mono/issues/6161", "title": "Memory leak when marshalling Delegate to native code", "body": "In our project we send callback delegate to native code and found a memory leak at runtime.\r\nThis is a sample project that reproduce the problem.\r\n\r\n```class CallbackOwner\r\n{\r\n   [UnmanagedFunctionPointer( CallingConvention.Cdecl )]\r\n   internal delegate void NativeFunctionCallback(int arg);\r\n\r\n   [DllImport(\"libnative\", CallingConvention = CallingConvention.Cdecl)]\r\n   internal static extern void native_function(int arg, NativeFunctionCallback cb);\r\n\r\n   private NativeFunctionCallback _cb;\r\n\r\n   public CallbackOwner()\r\n   {\r\n      _cb = CallbackImplementation;\r\n   }\r\n\r\n   public void Run(int n)\r\n   {\r\n      native_function( n, _cb ); // Expecting leak here!\r\n   }\r\n\r\n   private void CallbackImplementation( int arg )\r\n   {\r\n      Console.WriteLine( arg );\r\n   }\r\n}\r\n\r\nAnd write some loop to test\r\n\r\nint n = 0;\r\nwhile ( true )\r\n{\r\n   new CallbackOwner().Run( ++n );\r\n\r\n   // Collect managed memory.\r\n   if (n%1000 == 0)\r\n      GC.Collect();\r\n}\r\n```\r\n\r\n\"libnative\" is a simple test programm that only execute callback.\r\n\r\nFull test project added to attachement.\r\nThis leak reproduced on Mac and Linux on Windows all fine. With mono-boehm leak not reproduced, only with SGen.\r\n\r\nProfiler show memory leak at:\r\n\r\nLeak: 0x7f81e74001c0  size=16  zone: DefaultMallocZone_0x1068f1000\r\n\t0x03b0600e 0x00000000 0x00000000 0x00000000 \t.`..............\r\n\tCall stack: [thread 0x7fffb321e340]: | start | main | mono_main | mono_jit_exec | do_exec_main_checked | do_runtime_invoke | mono_jit_runtime_invoke | 0x106a0d427 | mono_delegate_to_ftnptr | mono_jit_compile_method_with_opt | mono_jit_compile_method_inner | mini_method_compile | mono_save_seq_point_info | mono_seq_point_info_new | monoeg_malloc0 | calloc | malloc_zone_calloc\r\n\r\nWe really like the Mono project and enjoy using it on our servers, but because of the leaks we have to restart the server every 24 hours.\r\n\r\nPlease help us :)\r\n\r\n[leaks_mono-sgen.zip](https://github.com/mono/mono/files/1531500/leaks_mono-sgen.zip)\r\n[MonoPInvokeLeak2.zip](https://github.com/mono/mono/files/1531503/MonoPInvokeLeak2.zip)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/6161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexanderkyte": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3363ec9cc4160bba07339d5c5337011a793652bd", "message": "[runtime] Apply cctor filters to callees of cctors (#6562)"}, {"url": "https://api.github.com/repos/mono/mono/commits/c996dac676e47265e0b65b0e56d3f857c5990471", "message": "[runtime] Bring jemalloc to mono (#6166)\n\n* [runtime] Bring jemalloc to mono\r\n\r\nJemalloc is known to have much better performance than system memory\r\nallocators, and is safe in concurrent/re-entrant situations.\r\n\r\nTo use, provide the following options to configure:\r\n\r\n--with-jemalloc to enable optionally. To use at runtime,\r\nexport MONO_USE_JEMALLOC to the environment.\r\n\r\n--with-jemalloc-always to enable and make the default\r\n\r\n--with-jemalloc-assert to enable with assertions to catch memory\r\nunsafety. It adds overhead, but an overhead that's much less than\r\nvalgrind or asan.\r\n\r\nIf you export\r\nMONO_JEMALLOC_CONF=\"stats_print:true\"\r\n\r\nYou will see detailed memory statistics for mono at exit.\r\n\r\nNow note that jemalloc is used through an explicit registration, so\r\nC libraries called through pinvoke calls will not use jemalloc unless\r\nthey configure themselves to do so separately.\r\n\r\nTo understand the build work, I'm statically linking jemalloc.a into\r\nthe compilation unit for mono/utils/mono-jemalloc.c, which is\r\nresponsible for registering it with mono at startup. No further\r\ncopying out of the submodule is necessary at installation time.\r\n\r\n* [runtime] Fix OSX 32-bit build definition"}, {"url": "https://api.github.com/repos/mono/mono/commits/6ca7b346cd3fc52318caccc182f35b8425439a07", "message": "[runtime] Fixes issue when compiling with -no_weak_imports (#6276)"}, {"url": "https://api.github.com/repos/mono/mono/commits/63a49e9eb8b569c6d5265168101982f5557c52bb", "message": "[runtime] Fix OSX 32-bit build definition"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6626", "title": "[tests] Fix csc/mcs specific GetMethodBody logic", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6625", "title": "[tests] Fix csc/mcs specific GetMethodBody logic", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6456", "title": "[DONTMERGE] Add locking around tls->frames usage/freeing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6310", "title": "[sdks] Script lldb android integration", "body": "Read PR message here: https://github.com/mono/mono/pull/6309", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6309", "title": "[sdks] Add managed debugger tests to sdks", "body": "This adds the Managed debugger tests to the sdks. A couple of the tests are failing, but everything related to the setup of the runtime appears to be passing. We have 5 failures right now. \r\n\r\nNote also that this adds support for running an arbitrary .exe if someone is willing to edit the boostrap file and indicate their class main, and pass the args themselves. They can also set the args with the managed debugger. \r\n\r\nThis functionality is linked to https://github.com/mono/mono/pull/6310 . That PR has the lldb integration that was necessary to debug this into working. If combined with the ability to run an arbitrary .exe, it allows us to more easily take an android reproduction and run it in an sdks environment with different monos. \r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5877", "title": "[runtime] Fix OSX 32-bit build definition", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5361", "title": "[runtime] Support AppleTLS on fullaot, and disable on non-mac net4x", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5211", "title": "[runtime] Implement inflated method and wrapper dedup", "body": "This PR deduplicates code between AOT'ed assemblies. These calls to inflated methods from other assemblies and wrappers start to add up with projects that have many assemblies. \r\n\r\nThis system works with two passes:\r\n1) Skip emitting code that might be duplicated for all normal AOT invokes \r\n2) Emit another AOT module that acts only as a \"container\" or \"dedup dummy\" and move all of the deduplicated methods into that AOT module. Using a unique name derived from the mangler, we ensure that these deduplicated methods are unique with respect to one another. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4890", "title": "[WIP][runtime] Use mkbundle to test statically-linked AOT", "body": "Supporting infrastructure to test dedup changes", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4827", "title": "[runtime] Write bidirectional mangler", "body": "The old mangler was unique, but it was considered difficult to interpret. This is a slightly-modified mangler which now has a demangler which explains the mangled names.\r\n\r\nValgrind seems happy that there are no leaks, and I've given this some testing when executing the mangler+demangler on every function in the BCL.\r\n\r\nExample of input/output is included in the comments", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4518", "title": "[unmergable][bitcode] Directly call normal methods in other AOT modules", "body": "The last two commits are new, the rest are from my linkonce PR. This depends on linkonce to work.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4268", "title": "[bitcode] Implement generic and wrapper deduplication", "body": "Here we use the COMDAT/linkonce linker features to deduplicate methods. When two wrappers or generic instantiations with the same name are linked together statically, the linker will remove the extra versions of method bodies. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4232", "title": "[runtime] Fix EH backend with libgcc", "body": "Libgcc (used by stack unwinding internals on linux) will stop unwinding at\r\nthe first frame marked not unwindable. If we compile the C portions of mono with\r\nexceptions disabled, some functions are marked as not unwindable. This causes stack walking\r\nto terminate.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4231", "title": "[runtime] Use length of stacktrace rather than SP for bitcode watermark", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4229", "title": "[runtime] Skip fast TLS on ARM with bitcode", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4228", "title": "[llvmonly] Handle bitcode exception object manipulation racing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4216", "title": "[runtime] Fix clang line to AOT bitcode on ARM", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4211", "title": "[runtime] Throw initialization EE exceptions, don't assert", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3551", "title": "[runtime] Use explicit protected regions to handle more EH edge cases", "body": "Some of the edge cases for llvmonly exception handling were only exposed by the mono/tests tests, not the bcl tests. It seems that a few things were broken. Throwing in a protected region's clauses could break when there was nesting. Finally clauses also didn't necessarily chain with nesting. This is a fix to both, also bringing with it an explicit interval tree (a bit of a hack at one, due to the queries we're making) in order to make this kind of thing a lot easier to write than the offset manipulation of the previous implementation. This fixes crashes or asserts in exception7, exception4, and a lot of other exception tests. Not everything is perfect, but this implementation started by mimicking the old control flow, so there shouldn't be regressions. \n\nLet's see what CI thinks of this. This will only apply to the mobile_static bitcode lane, other failures should be outside the scope of my changes. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3405", "title": "[mobile_static] Merge changes for valgrind bitcode lane", "body": "This injects valgrind into the places where we run entirely AOT, and fixes a memory mapping thing. This is what the bots have been building, with frequent rebases onto master. Valgrind appears to run on our AOT pipeline pretty well. After merge the lane will be changed to point to master.\n\nThis also offers a framework to use gcov and similar tools, by changing what RUNTIME_TOOLING_INJECT is. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3392", "title": "[mobile_static] Don't pass gsharedvt option to fullaot", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3167", "title": "[runtime/llvmonly] Fix off-by-one error in get_frame_info", "body": "Corlib's test harness on the bitcode mobile_static profile had the following failures:\n\n```\n1) TestGetMethod (MonoTests.System.Diagnostics.StackFrameTest1.TestGetMethod)\n     Class declaring the method (1)\n  Expected: <MonoTests.System.Diagnostics.StackFrameTest1>\n  But was:  <System.Reflection.MonoMethod>\n\n  at MonoTests.System.Diagnostics.StackFrameTest1.TestGetMethod () <0x10857d850 + 0x0028c> in <filename unknown>:0\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x104d38790 + 0x00103> in <filename unknown>:0\n\n\n2) TestGetMethod (MonoTests.System.Diagnostics.StackFrameTest2.TestGetMethod)\n     Class declaring the method (1)\n  Expected: <MonoTests.System.Diagnostics.StackFrameTest2>\n  But was:  <System.Reflection.MonoMethod>\n\n  at MonoTests.System.Diagnostics.StackFrameTest2.TestGetMethod () <0x10857ef40 + 0x00271> in <filename unknown>:0\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x104d38790 + 0x00103> in <filename unknown>:0\n\n\n3) TestGetMethod (MonoTests.System.Diagnostics.StackFrameTest3.TestGetMethod)\n     Class declaring the method (2)\n  Expected: <MonoTests.System.Diagnostics.StackFrameTest3>\n  But was:  <System.Reflection.MonoMethod>\n\n  at MonoTests.System.Diagnostics.StackFrameTest3.TestGetMethod () <0x1085807c0 + 0x0038a> in <filename unknown>:0\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x104d38790 + 0x00103> in <filename unknown>:0\n```\n\nThese were fixed by skipping one less frame. It appeared that the \">=\" was causing us to skip one more frame than was desired in a consistent manner. \n\nAll of the above tests are now passing.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3166", "title": "[runtime] Fix stacktrace creation on llvmonly backend", "body": "This got corlib exception tests passing \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3164", "title": "[runtime] Make external executables use full path", "body": "The issue of using the name \"mono\" without an absolute path\nmeans that if the PATH is changed during scripted runs,\none can end up using the wrong mono.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/1577", "title": "[Runtime] Added optional canaries to mempool allocation.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/66097437", "body": "We're using an environment variable to make it easy to inject config flags into the build.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66097437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66814958", "body": "Renamed to \"all\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66814958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66821734", "body": "Added below\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66821734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73039763", "body": "These are basically the trampoline counts and the directory for the bitcode output files. These values are part of AOT_BUILD_FLAGS. The reason we're passing this here is to allow someone to run both llvmonlycheck and fullaotcheck with the same checkout. It will need to be defined in configure.ac anyways. We can define it twice, or we can add an AC_SUBST. Which would you prefer?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73039763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95833805", "body": "It looks like what happens is that we're actually removing an attribute, \"nounwind\". I was informed on #gcc on freenode that enabling exceptions on C code is supposed to be the default, otherwise interop with C++ unwinding breaks. I didn't notice significant size changes, but I can do a comparison if you'd like.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95833805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95843460", "body": "When I looked into it, it seemed that the functions didn't have that attribute on x64 when `-fexceptions` wasn't given. Perhaps it is a different platform default, I do not know. ", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95843460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66849040", "body": "Because if it's \"=\" then this is done lazily. If this were computed when another script had changed the PATH, then the external mono might end up pointing to something else. We'd have the same problem we have when using a relative path.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66849040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "BrzVlad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/d3763c6c1e1971fce5863e0147dea74911ecb990", "message": "[interp] Decrease stack usage (#6580)\n\nAvoid inlining some functions with high stack frame locals usage (ex functions that use MonoLMFExt which is a big structure).\r\n\r\nNo performance cost was observed on microbenchmarks, while stack usage decreased by over 3 times on amd64 and over 4 times on arm."}, {"url": "https://api.github.com/repos/mono/mono/commits/672efa3ef31d6fa18c6963c44f5c3296eb183beb", "message": "[interp] Disable tests on arm due to known issue\n\nDue to clobbering of R8 by interp entry."}, {"url": "https://api.github.com/repos/mono/mono/commits/117468d740a1dc0eea58cc2b020185cf5c5f8b7d", "message": "[interp] Add check for class failure"}, {"url": "https://api.github.com/repos/mono/mono/commits/0b398d63b0c3d5006bc698c5852a20f9e3189ca5", "message": "[tests] Change test to use less stack\n\nThe interpreter uses a lot of stack and the stack overflows on this test."}, {"url": "https://api.github.com/repos/mono/mono/commits/4490aa5112e6fa9c64ed1db222b880fbce31e176", "message": "[runtime] Fix jit info leak when having aot images loaded\n\nWhen we had a jit info table for aot images loaded in the domain, we would queue jit infos for freeing at domain unload time. This means leaking during entire application life.\n\nAdd comment for jit info freeing when having multiple tables.\n\nFixes #60986."}, {"url": "https://api.github.com/repos/mono/mono/commits/f162931e25c4cc1ad3d1a21117bb085089f168cd", "message": "[mini] Fix seq point info leak (#6522)"}, {"url": "https://api.github.com/repos/mono/mono/commits/cdecb851ff6bbf2d0602104d4db0df86b0c4b7ba", "message": "[sgen] Fix overflow on large arrays (#6542)"}, {"url": "https://api.github.com/repos/mono/mono/commits/51c200c71fb2a105ffc93ae3d1e320d3ba62c0ff", "message": "[test] Rename test\n\nThere were 2 vararg.exe"}, {"url": "https://api.github.com/repos/mono/mono/commits/6381b6608c60a5704650ff774d7fbf83bab64352", "message": "[interp] Add support for ldflda with remoting\n\nField access for classes like MarshalByRefObject need to go through a wrapper."}, {"url": "https://api.github.com/repos/mono/mono/commits/baaf49441cd69117e9968657427f5b14e3c5134d", "message": "[interp] Allow interp stack to be greater than il stack"}, {"url": "https://api.github.com/repos/mono/mono/commits/6ae3e4795cc5f17285327df4d8d0ac501a85f26c", "message": "[interp] Add missing param support for floating types in interp_entry (#6427)\n\n* [interp] Add missing param support for floating types in interp_entry\r\n\r\nRemove some duplicated code\r\n\r\n* [interp] Reenable thunks.exe on arm\r\n\r\nIt fails due to the known RGCTX register clobbering by trampolines."}, {"url": "https://api.github.com/repos/mono/mono/commits/bb17db90a19b5abe5cca20108edd0e87879c0d1a", "message": "[interp] Interp fixes (#6334)\n\n* [interp] Check for exception at field address failure\r\n\r\nFor example if the static constructor throws an exception\r\n\r\n* [interp] Run class cctor before allocating objects\r\n\r\nOtherwise we could end up throwing TypeInitializationException from the finalizer thread. We do the same with jit (emit_class_init).\r\n\r\n* [interp] Check for method access failure when doing a call"}, {"url": "https://api.github.com/repos/mono/mono/commits/60b180d24f32b0879d729bc47a3cf92d5a0ba25e", "message": "[interp] Rename functions to be clearer"}, {"url": "https://api.github.com/repos/mono/mono/commits/e4272665017389f60aa6001bbc418240315afe58", "message": "[interp] Enable most pinvoke tests"}, {"url": "https://api.github.com/repos/mono/mono/commits/929e4b08a4af7c8ef81e66de56d7b03aa1162588", "message": "[arm64] Rework native entry tramp from interp"}, {"url": "https://api.github.com/repos/mono/mono/commits/23ea930161baa93d36924cfbf1860b7dd13282bd", "message": "[arm] Interp support for pinvoke"}, {"url": "https://api.github.com/repos/mono/mono/commits/6b86787945c282b246c6c83c8e1e4bc054cc4783", "message": "[interp] Don't abort during finally blocks\n\nUnlike on the jit (where we set a local variable on the stack frame of the last finally block), use the simple explicit abort protecting code which is used also for cctors. We can't use handler block guard logic since we can't async unwind from the interpreter."}, {"url": "https://api.github.com/repos/mono/mono/commits/9f8e2cd16a2baa93ea23208953e6aef9775b465d", "message": "[interp] Remove duplicated code"}, {"url": "https://api.github.com/repos/mono/mono/commits/edba55b88342e1ea92c6e368b03ca1fffd0d4092", "message": "[interp] Check for interruption after class initialization\n\nWe can have a pending abort that needs throwing"}, {"url": "https://api.github.com/repos/mono/mono/commits/3495c6054f5414f719693e107f8689bd8546b20b", "message": "[interp] Replace old and dead EH code"}, {"url": "https://api.github.com/repos/mono/mono/commits/a02ef6352de8573ecd7ed1182abbb106b0252c6a", "message": "[interp] Check for class failure when emitting constructor\n\nAs we do with the jit."}, {"url": "https://api.github.com/repos/mono/mono/commits/08938db840bb6f7953f0befdb6bc27be3756a323", "message": "[sgen] Fix behavior of forced collections\n\nTriggering a forced collection means that it should to an immediate full collection of that generation. If we were having a running concurrent collection we were only finishing it. We should also trigger a new serial gc."}, {"url": "https://api.github.com/repos/mono/mono/commits/4bce944f45342253f66dc6e2cb72bcdae3ccc5c0", "message": "[profiler] Trigger heapshots only on major serial collections\n\nAfter minor or concurrent collections, we can have dead objects (can not be referenced starting from the current root set) still alive on the heap which can confuse profiling tools.\n\nIf we have a heapshot requested and we can't do it on the current collection, defer it to the finalizer."}, {"url": "https://api.github.com/repos/mono/mono/commits/b9b639c6a51e4a9c045d88eab57a5f7547ddbc93", "message": "[profiler] Report roots from ephemerons\n\nThe ephemeron array is an array of (key, value) pairs where value is alive (root) if key is alive."}, {"url": "https://api.github.com/repos/mono/mono/commits/6d018681eefe6277d7df066aab275d92be472269", "message": "[amd64] Rework native entry tramp from interp"}, {"url": "https://api.github.com/repos/mono/mono/commits/43e0e6b941bf1ce9afac6c3c022cc18b5c8e1bb5", "message": "[interp] Restore valuetype copying for pinvoke case.\n\nReverts 65a94cb15f4085ed3ed456f12785da692c9f950f for native struct copying."}, {"url": "https://api.github.com/repos/mono/mono/commits/61dde4b1de75993ce45bc1046ec7d474ffa337d3", "message": "[interp] Add some missing icall signatures\n\nFor mono_marshal_asany and mono_marshal_free_asany"}, {"url": "https://api.github.com/repos/mono/mono/commits/f0bfd787e39fc1b7dfcce6375afecb9741d9fadc", "message": "[interp] Replace define\n\nIt's confusing"}, {"url": "https://api.github.com/repos/mono/mono/commits/710149b90a73c60636fefb8db74c87ac9c6984ca", "message": "[interp] Fix delegate invocation of native functions\n\nFor a m2n transition we expect that we are already in managed (interp) and the delegate's method_ptr expects an InterpMethod. Refactoring will be needed in the future."}, {"url": "https://api.github.com/repos/mono/mono/commits/8aafd8660e0bdea9c7b24820e8f8772f99fa4922", "message": "[marshal] Avoid using CEE_UNBOX for struct marshaling\n\nMirror mono_marshal_get_struct_to_ptr. These methods can also handle non valuetypes (with certain attributes), which CEE_UNBOX doesn't logically handle."}, {"url": "https://api.github.com/repos/mono/mono/commits/a90d5c78650655ea3a47a2b339463e164345a20b", "message": "[metadata] Remove unused ldloc\n\nFixes stack warnings in interp"}, {"url": "https://api.github.com/repos/mono/mono/commits/5a7ff666c535718c36b897ee3121c15abf92357b", "message": "[interp] Remove assert"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6630", "title": "[interp] Disable mixed mode tests", "body": "When an exception is thrown from jitted code, the EH mechanism correctly sets the interp resume data to the right interp frame that should catch the exception, but it resumes to the interpreter by force, setting the MonoContext. This context has invalid data (for example the SP points to a InterpFrame and it is not the real sp at interp exit)\r\n\r\nThis bug was exposed by inlining changes from d3763c6c1e1971fce5863e0147dea74911ecb990", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mandel-macaque": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/668c90e2b67d532302f4f2e09381364c68656ef5", "message": "[Tests] Skip a subset of the System.IdentityModel for iOS and Mac. (#6594)"}, {"url": "https://api.github.com/repos/mono/mono/commits/12d676563e7f233897f866c6150c6755ef3d46d1", "message": " [Tests] Skip System.ServiceModel tests that are not supported on XamMac 4.5 (#6574)"}, {"url": "https://api.github.com/repos/mono/mono/commits/3f372d06eeb4b924a26871c91a2100205fb10550", "message": "[Tests] Skip some of the System.ServiceModel tests when using MOBILE (#6545)\n\nMobile does not support all clases found in System.ServiceModel, we skip\r\nthose tests of the not supported classes yet run all the others."}, {"url": "https://api.github.com/repos/mono/mono/commits/001d4d5082197f57cd5b70e7d26fbc86b0212966", "message": "[Tests] Ensure that tests are runnable on xamarin-macios (#5875)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vargaz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/40adef8a03a234e3f579889074c8f54a1d5a8a19", "message": "[jit] Move more declarations to mini-runtime.h. (#6586)"}, {"url": "https://api.github.com/repos/mono/mono/commits/5e72bd6d01c90ad37231c9a16099abc90c575440", "message": "[sdks] Set more ios version variables to empty to fix the build. (#6571)"}, {"url": "https://api.github.com/repos/mono/mono/commits/511c2fd59cf12ad86e36bbae70ba2cf4e7d1a982", "message": "[sdks] Set XCODE_VERSION to 'Xcode' for now to fix the ios build. (#6568)"}, {"url": "https://api.github.com/repos/mono/mono/commits/902626bb807ae9657231ca3b5ba07bd6d5ca614b", "message": "[runtime] Disallow casts between int[] and IList<int?> etc. Fixes #6401."}, {"url": "https://api.github.com/repos/mono/mono/commits/faecfce5d0c29dec56a18f10473a81e52d6acad5", "message": "[runtime] Fix some default interface method problems. (#6484)\n\n* [runtime] Allow access to protected default interface methods from classes which implement the interface.\r\n\r\n* [interp] Add some automatic conversations between virtual and non-virtual calls that .net has. Fixes dim-valuetype.il.\r\n\r\n* [bcl] Sort the MethodImpl table in PEAPI.\r\n\r\n* [runtime] Enable dim-methodimpl.exe test.\r\n\r\n* [runtime] Fix vtable construction tracing.\r\n\r\n* [interp] Fix null checks on the receiver when converting virtual calls to non-virtual."}, {"url": "https://api.github.com/repos/mono/mono/commits/48badade213adc79d039d670a7e7346518b12762", "message": "[jit] Convert stores into sign/zero extensions for small ints during alias-analysis. Fixes gh #6414. (#6440)"}, {"url": "https://api.github.com/repos/mono/mono/commits/ab04c61b60553e07be0b93c7d921ba288424e9d9", "message": "[runtime] Add CallContext to the list of cross offset types to fix the cross compiler build. (#6337)"}, {"url": "https://api.github.com/repos/mono/mono/commits/6b58f1317732b9cbf6ec61921e76d7d48e362104", "message": "[runtime] Avoid padding classes with an explicit size. Fixes #60298. (#6223)"}, {"url": "https://api.github.com/repos/mono/mono/commits/bf3d8ce52d96da13ed403e4d05c8a7fdb8dfb548", "message": "[bcl] Avoid rebuilding test libs all the time if the corresponding assembly doesn't exist because of the NO_BUILD flag. (#6318)"}, {"url": "https://api.github.com/repos/mono/mono/commits/9527a8e4dd7953ab5e2a7210be798bbc7951f276", "message": "[ios-sdk] Split non working assemblies into non-compiling and non-working, compile the ones which can be compiled. (#6319)"}, {"url": "https://api.github.com/repos/mono/mono/commits/a2407ac76a50cc1b5fdfbea83adb135d9be40356", "message": "IOS SDKs (#6257)\n\n* [ios-sdk] Rename test-runner directory to 'runtime' to be consistent with xamarin.ios.\r\n\r\n* [ios-sdk] Add missing xamarin_log () icall used by Console.Write ().\r\n\r\n* [ios-sdk] Change the run-ios-sim target so it works on ios11 as well, the --console option to simctl appears to be broken.\r\n\r\n* [ios-sdk] Add a test harness.\r\n\r\nThe test harness is resposible for starting the emulator, installing the app on the emulator, running it, and\r\ncollecting application output using the osx logging facilities.\r\n\r\n* [ios-sdk] Fix detection of the app exiting with an unhandled exception.\r\n\r\n* [ios-sdk] Add CI support for running some test suites on the simulator.\r\n\r\n* [ios-sdk] Kill the log reader process on shutdown.\r\n\r\n* [ios-sdk] Disable android on CI because the make targets error out if the android sdk is not installed.\r\n\r\n* [ios-sdk] Fix error checking in make targets.\r\n\r\n* [ios-sdk] Remove accidently commited binary.\r\n\r\n* [ios-sdk] Switch to using os_log instead of NSLog (), the latter doesn't seem to show up in the logs anymore. Switch to using the default ios sdk instead of hardcoding 11.1.\r\n\r\n* [ios-sdk] Don't hardcode the ios version when creating a simulator.\r\n\r\n* [ios-sdk] Parse the output of simctl list runtimes as json.\r\n\r\n* [ios-sdk] Use 'syslog' style logging, its supported by older osx versions.\r\n\r\n* [ios-sdk] Fix logfile parsing.\r\n\r\n* [ios-sdk] Fix log filtering.\r\n\r\n* [ios-sdk] Add test exclusions file for System.\r\n\r\n* [ios-sdk] Redirect runtime logging to os_log ().\r\n\r\n* [ios-sdk] Link libMonoPosixHelper and zlib into the test runner.\r\n\r\n* [ios-sdk] Fix the target64 and cross64 builds.\r\n\r\n* [ios-sdk] Build target64/cross64 on CI.\r\n\r\n* [ios-sdk] Add device support to the runtime lib. Mark strings in os_log () calls as public.\r\n\r\n* [ios-sdk] Log stdout messages using a separate subsystem for easier filtering.\r\n\r\n* [ios-sdk] Add an 'appbuilder' tool which can generate simulator and device apps.\r\n\r\n* [ios-sdk] Build device tests on CI.\r\n\r\n* [ios-sdk] Add a test-runner instead of using nunit-lite-console.exe. The two are identical right now, but they might diverge in the future.\r\n\r\n* [ios-sdk] Add a script to download prebuild llvm binaries.\r\n\r\n* [ios-sdk] Run the runtime initialization on a separate thread, not the UI thread.\r\n\r\n* [ios-sdks] Fix the build.\r\n\r\n* [ios-sdk] Build the cross compiler against llvm.\r\n\r\n* [ios-sdk] Add missing file.\r\n\r\n* [ios-sdk] Add llvm support, enabled by passing LLVM=1 to make build-ios-dev-<app>.\r\n\r\n* [bcl] Enable System.Security tests on the MOBILE profile.\r\n\r\n* [ios-sdk] Enable more test suites.\r\n\r\n* [ios-sdk] Fix device builds.\r\n\r\n* [ios-sdk] Make some test steps non-fatal.\r\n\r\n* [ios-dev] Use ad-hoc signing to sign device apps.\r\n\r\n* [ios-sdk] Decrease the timeout on run-sim to 20m.\r\n\r\n* [ios-sdk] Send back the test results using a tcp connection, parsing the ios logs is too fragile.\r\n\r\n* [ios-sdk] Mark System.Net.Http tests as notworking, they seem to fail on CI.\r\n\r\n* [ios-sdk] Compile the 32 bit cross compiler against llvm as well.\r\n\r\n* [ios-sdk] Package up the binaries which can be uploaded to storage.\r\n\r\n* [ios-sdk] Fix the download-llvm.sh script.\r\n\r\n* [ios-sdk] Compile cross32 on CI.\r\n\r\n* [ios-sdk] Use Options.cs from the mcs sources instead of making a copy.\r\n\r\n* [ios-sdk] Avoid hardcoding the xcode sysroot, obtain it using 'xcode-select -p'.\r\n\r\n* [ios-sdk] Fix the previous change.\r\n\r\n* [ios-sdk] Add an option to appbuilder to cache aot compilation results between building different apps.\r\n\r\n* [ios-sdk] Build device apps with llvm as well on CI.\r\n\r\n* [ios-skd] Use XCODE_ROOT in a few more places, update README.md."}, {"url": "https://api.github.com/repos/mono/mono/commits/1b249d561e8541d419f46fcd56b509e412b5b7dd", "message": "[bcl] Allow conversion from enums and their basetypes in both directions with Delegate.CreateDelegate (). Fixes https://github.com/mono/mono/issues/6255."}, {"url": "https://api.github.com/repos/mono/mono/commits/2aadbf1724c7588a276a83f0ec0f4b8753215deb", "message": "[s390x] Fix errors in cpu-s390x.md which are exposed by the new genmdesc. (#6233)"}, {"url": "https://api.github.com/repos/mono/mono/commits/c90690310cec16b897a1a68febf002800a817d4a", "message": "No mem needs (#6210)\n\n* [jit] Remove unused mono_arch_instrument_mem_needs () function.\r\n\r\n* [jit] Remove unused mono_arch_instrument_epilog_full () function, only the non-full version is used.\r\n\r\n* [jit] Remove some unused arch specific functions previously used by the global regalloc prototype."}, {"url": "https://api.github.com/repos/mono/mono/commits/5ec0243196d7a127c0e3a472ca0b70a9ba0d1e42", "message": "[aot] Fix aot+llvm after the weak field changes."}, {"url": "https://api.github.com/repos/mono/mono/commits/db05a2523c085b2c590d6a544ff8abfb4e711353", "message": "[llvm] Update the llvm backend to work with the 2017-12-01-31d7f39423874d52922c06484f2c2af216844b4d branch of the mono llvm fork. (#6143)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6587", "title": "[jit] Clear cfg->error after inlining, the error can be ignored, it will happen when the called method is JITted.", "body": null, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6501", "title": "[sgen] Use sgen_is_object_alive_for_current_gen () instead of sgen_is_object_alive (), the latter doesn't work for oldspace objects, causing the gc handle to be freed even through the object is still alive.", "body": "Fixes https://github.com/mono/mono/issues/6490.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6429", "title": "[runtime] Avoid building a separate static library, use the shared ob\u2026", "body": "\u2026ject files for the static library as well. (#5233)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6285", "title": "[WIP][jit] Implement --trace using the profiler infrastructure.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/6036", "title": "[runtime] Avoid an assert in mono_thread_detach_internal () when thre\u2026", "body": "\u2026ad->thread_info is NULL.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5837", "title": "[runtime] Rework how the native-to-managed eh callback is called.", "body": "Instead of catching all exceptions in the native-to-managed wrapper and calling the callback from the catch clause, call it directly from the EH code. The\r\nprevious approach caught all exceptions, which messed up debugging, since the debugger wouldn't break on uncaught exceptions raised from native-to-managed\r\ncallbacks.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5475", "title": "[amd64] Disable an assertion which is hit for llvm code.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5133", "title": "[WIP] [w32handle] Refactor calls to mono_w32handle_lookup () to reduce code\u2026", "body": "\u2026 duplication. Assert instead of returning an error if the handle doesn't exist or its not the proper type.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4731", "title": "[jit] Enable float32 by default.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4484", "title": "[runtime] Implement support for embedded ppdb, when the ppdb blob is \u2026", "body": "\u2026compressed and embedded into the pe image.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4307", "title": "[aot] Add a DisableProfiler icall to Mono.Runtime, enabling apps to d\u2026", "body": "\u2026isable profile data collection after startup is finished for example.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4305", "title": "[aot] Add new Mono.Profiler.Aot assembly to read .aotprofile files.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/134015", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/134015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/147407", "body": "Szia,\n\n Ez ki lett javitva 671551a7caf172189ce9f0b277d272aec4b58b1b-ben.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/147407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/150377", "body": "Miert van arra a valtoztatasra szukseg ? Az #ifdef-en beluli kod nem hivatkozik az UNCONTEXT_GREGS-re.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/150377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/172151", "body": "Should be fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/172151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/178332", "body": "Shouldn't *lockTaken be set to FALSE at the start ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/178332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/282887", "body": "Yeah, thanks for noticing it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/282887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/636032", "body": "Sorry about that. Should be fixed now.\n\n```\n          Zoltan\n```\n\nOn Fri, Oct 7, 2011 at 1:09 AM, Rolf Bjarne Kvinge <\nreply@reply.github.com>wrote:\n\n> I get this while building on OSX now:\n> \n> ld: duplicate symbol _mono_native_thread_id_get in\n> ../utils/.libs/libmonoutils.a(mono-threads-mach.o) and\n> ../utils/.libs/libmonoutils.a(mono-threads-posix.o) for architecture i386\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/mono/mono/commit/b9e19b0301777ea670f2e731b8fb791239a09ca3#commitcomment-635983\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/636032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/707109", "body": "This should be an inline function.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/707109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/759747", "body": "find_seq_points () asserts, this one shouldn't.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/759747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/840576", "body": "This is not a good idea, this function can have other GC refs in its stack frame, or more can be added later. Also, mini/ should be free of GC dependencies, i.e. boehm-gc.c and null-gc.c should contain a dummy mono_gc_set_stack_end ().\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/840576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1290112", "body": "This broke API compatibility, along with the debugger test suite.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1290112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/66054934", "body": "Why is this line needed ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66054934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66055059", "body": "Why is this needed ? The user can just pass the same flag to autogen.sh.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66055059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66098337", "body": "I don't think we should add an env variable for one of the mirriad configure options we have.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66098337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73039208", "body": "It would be easier to put these flags directly into the Makefile, unless we want to share it between makefiles.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73039208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73039968", "body": "If they are used in two places, it makes sense to share them, but in general, the less auto*, the better.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/73039968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/90552372", "body": "I agree we should just ifdef it out of MOBILE.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/90552372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95842472", "body": "This will definitely increase code size.\r\nAlso, why doesn't this break on x86/amd64 linux ?\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95842472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/142071416", "body": "This should use dashes instead of underscores I think.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/142071416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72892205", "body": "Won't this add a lot of overhead ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/72892205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/74003377", "body": "Can't this version be used on all platforms ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/74003377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112272122", "body": "Yes, it would be better to check for the actual function which is required.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112272122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112275783", "body": "You can either force push, or do a squash merge in the end.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112275783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/130634421", "body": "This shouldn't be done in the basic profile, which uses system mcs/csc which we don't control.\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/130634421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131524945", "body": "Because LIB_MCS_FLAGS is also used to compile the test assemblies.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131524945/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ramin-zaghi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/947d0bc0ef63c9e9304b760d333b4cb7ed06df94", "message": "[mini] Make sure mkbundle executables work if they are run from a path on the PATH environment variable. (#6147)\n\n* Make sure mkbundle executables work if they are run from a path on the PATH environment variable.\r\n\r\n* Review\r\n\r\n* Fix build on Windows"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radical": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/06b9b48420c2dc4b5d4928217797efb34a56779b", "message": "Bump msbuild (#6569)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/1243408", "body": "A better fix would be to add a property like:\n\n<SkipCopyUnchangedFiles Condition=\"'$(SkipCopyUnchangedFiles)' == ''\">true</SkipCopyUnchangedFiles>\n\nAnd change all\n\n  SkipUnchangedFiles=\"true\"\nto\n  SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n\nAnd add the same for the *PreserveNewest target.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1243408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/1247955", "body": "You missed the other instances of - SkipUnchangedFiles=\"true\" in the targets files. Basically, all the 3 targets files should have SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\" instead of SkipUnchangedFiles=\"true\" .\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1247955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/1251568", "body": "Committed the (squash merged) fix.  Thanks for the patch.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/1251568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/3037431", "body": "Github seems to be having some trouble with merges. I'll try again tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/3037431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/18121830", "body": "Could you please explain how to reproduce this issue?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/18121830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/18404648", "body": "I tested the case mentioned by Ventero and the case of a common output dir for a full solution, and the patch seems to be fine for  those. But I don't have windows or any decent projects to try it out properly. @mhutch had hit some Clean target issues earlier, so I would also prefer to have him try it out once.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/18404648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/49023511", "body": "This needs test cases to go with this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/49023511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/49025667", "body": "From the diff or the commit log, it is not clear what this change is really doing or why it works.\nBased purely on reading the code on github, I think the real issue is that, even though the BuildEngine.BuildProjectFile(..) call in CallTarget.cs, passes a null globalProperties, later in the \ncode[1], it still overrides all the properties.\n\nThe patch passes a null project filename, which causes that path to be skipped. Based on this\ncursory reading, I would suggest that the correct fix might be to change [1] to pass null instead\nof bpg, if globalProperties is null. This would cause the code at (Engine.cs:BuildProjectFileInternal) [2] \nto not override the global properties.\n\nI haven't tried this out, this is just based on reading the code.\n\n---\n1. https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/BuildEngine.cs#L85\n2. https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/Engine.cs#L275\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/49025667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/64786283", "body": "> When the projectFileName is null, we don't create a new project in ..\n\nThis sounds like a different issue. Could you please share a test case for the issue that you are trying to fix with this patch?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/64786283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/202899125", "body": "What is the use case for this? Why is this really required? I'm not sure this is a good idea.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/202899125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/216428946", "body": "@Ventero the prefix that mono is running from decides where xbuild picks up the GAC assemblies from. So, if you run `/tmp/bin/xbuild`, then it will pick up the correct assemblies from `/tmp/lib/mono/gac`\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/216428946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/143348194", "body": "@atsushieno is correct. This `Create(..)` method does not load the project. `Open(..)` OTOH, does load the project. So, this patch is incorrect.\n\nI confirmed this with a test program on .NET . And the released msbuild source also confirms this ( https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Construction/ProjectRootElement.cs#L949 ).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/143348194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/143359080", "body": "Fix looks fine. Could you please add some tests for this like:\n1. xml file loaded from a path!=current_dir\n2. xml loaded from a string\n3. xml loaded and ProjectRootElement.DirectoryPath set explicitly\n\nAnd change the commit message to be a little descriptive.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/143359080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/203119619", "body": "Don't close this, I'll add the tests.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/203119619/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/161343349", "body": "Yes, I have a variation of the patch.\n\nWe already have the caching that @slluis' patch implements, but it gets looked up very late. So, I have moved it up the call stack. But it is still a little slower than Llluis' patch. I am doing a bit more work for correctness, but it should not cause the slowdown. So, trying to investigate and fix that. Then maybe Lluis can test it out :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/161343349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/164831758", "body": "@slluis My patch doesn't help very much. And I figured out the reason for that - XS seems to be invoking the build with `BuildSettings.None`, effectively clearing the cache before every project build! Your patch worked because it was effectively ignoring that request and _always_ using the cache, which is also incorrect.\n\nIn `main/src/core/MonoDevelop.Projects.Formats.MSBuild/MonoDevelop.Projects.Formats.MSBuild/ProjectBuilder.cs`, I found:\n\n```\n 86  // We are using this BuildProject overload and the BuildSettings.None argument as a workaround to\n 87  // an xbuild bug which causes references to not be resolved after the project has been built once.\n 88  buildEngine.Engine.BuildProject (project, runTargets, new Hashtable (), BuildSettings.None);\n```\n\nDo you remember the details of the bug mentioned here? If we can change this to use `BuildSettings.DoNotResetPreviouslyBuiltTargets`, then it will utilise the existing caching and that should definitely improve build times. Once that works, we can make do the cache lookups earlier, like I was trying to, to get some additional performance.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/164831758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/202900927", "body": "This PR can probably be closed. @slluis, do you want a bug for this? I could cleanup and commit the patch that I had, if that is still required or was the change in XS enough? My patch essentially moved the cache lookup to be a little earlier in the code path, but relied on the existing caching. I am not sure how much _more_ it would help on top of the XS change.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/202900927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/185254824", "body": "Does this fix a bug? Could you please include details about that too?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/185254824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/185283212", "body": "Could you please explain what the issue was and how this commit fixes it, in the commit message? The current commit message seems to suggest that this is just making the code simpler.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/185283212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/187220050", "body": "@ludovic-henry Looks OK. Though I wasn't able to get to testing it out.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/187220050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/194496505", "body": "Updated the commit message to include @akoeplinger's comment.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/194496505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/195037413", "body": "@monojenkins test\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/195037413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/196429575", "body": "Updated based on the feedback, thanks.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/196429575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/204437810", "body": "Any thoughts on this?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/204437810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/206014922", "body": "Updated to return AssemblyName from `ReadCustomAttributesFromTemplateFile` .\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/206014922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/218023940", "body": "@mfilippov Could you please provide reasoning for the patches, in the commit messages? What are they trying to solve? And test cases for BuildProperty patch.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/218023940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/218599916", "body": "@ludovic-henry ^\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/218599916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/219557954", "body": "Any thoughts on this?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/219557954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/219718208", "body": "build\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/219718208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/233459720", "body": "LGTM!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/233459720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/248038343", "body": "Thanks, opened a PR for that!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/248038343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/261140473", "body": "@akoeplinger oops! I created the original branch against 4.8, but in the PR.. thanks :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/261140473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/261260044", "body": "Test failures are not related to xbuild\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/261260044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/302212497", "body": "Clone msbuild from `git@github.com:mono/msbuild.git`, use `xplat-2017-02` or `xplat-master` branch if you are on mono `5.0.0` or `5.[23].0`, respectively.\r\nAnd:\r\n```\r\n$ ./cibuild.sh --scope Compile --host Mono --target Mono --config Release\r\n$ ./install-mono-prefix.sh <your_mono_prefix>\r\n```\r\n\r\nAnd we have a man page for `msbuild` too.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/302212497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/286176792", "body": "Opened a PR for that https://github.com/mono/mono/pull/4517", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/286176792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/286233242", "body": "The failures are not related to this change.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/286233242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/294677565", "body": "Failures are not related to this PR.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/294677565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/294677273", "body": "Failing tests are not related to this PR.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/294677273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/314182714", "body": "It would pick up because of this bump in bockbuild - https://github.com/xamarin/bockbuild/pull/94/commits/c7b3331940d3e3fb52e87e0b6ec5cb4afa87a0c6 .", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/314182714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/314202835", "body": "@akoeplinger @mrward ^\r\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/314202835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/314282504", "body": "@akoeplinger opened a request with QA for this. They will decide whether or not to merge, I guess!", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/314282504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/314840367", "body": "I will apply the update to 2017-06 instead since it is too late for QA to accept this.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/314840367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/315878273", "body": "More information:\r\n\r\nWe got a mono build with unintended change (https://github.com/mono/msbuild/commit/985f169ccd08008a52f2550373eebaafa90fc48f) from msbuild's\r\n`d15.3` branch. That commit was reverted (https://github.com/mono/msbuild/commit/874807de8383bba5674434c99c709489d0701366) and `bockbuild`\r\nsuitably updated (https://github.com/xamarin/bockbuild/commit/a1306761bc725e177415fa2e3db39e5e2ba966cf).\r\n\r\nThis empty commit is to get a new mono pkg build without that unintended change.\r\n\r\n(Forgot to include this in the commit message!)", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/315878273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/317111942", "body": "@marek-safar  `roslyn-binaries` needs an update to include all the files from the nuget package. And then this can be merged, along with https://github.com/mono/msbuild/pull/21 .\r\n\r\nAlso, question: Should `Microsoft.DiaSymReader.Native.{amd64,x86}.dll` be included, for use on windows? AFAICS, it is used by `Microsoft.CodeAnalysis.dll` .", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/317111942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/321026339", "body": "I updated the patch based on the discussion. Does this look fine now?", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/321026339/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/321285136", "body": "@akoeplinger yeah, I need to figure out how to get that version from `msbuild.py` at that step! Or since the version here is not of any real consequence, AFAIK, we just use a fixed value. Or we manually clone the script and fix the path whenever that changes.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/321285136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/321296005", "body": "heh yeah, I was hoping for something cleaner! But yeah, sure.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/321296005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/321296235", "body": "I will check with @alexischr anyway!", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/321296235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/328024436", "body": "Am I correct in understanding that the roslyn version from https://github.com/dotnet/cli/blob/release/2.0-vs/build/DependencyVersions.props#L6 is the version of Roslyn that VS would be using? We are using the SDK versions from this same file, same branch for the bundled sdks in msbuild: https://github.com/mono/msbuild/pull/24", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/328024436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/328197789", "body": "Opened https://github.com/mono/mono/pull/5536 for 2017-06 . 2017-08 already has the update.\r\nWill the update from 2017-06 branch be picked up by QA for 15.4? This is related to the other sdk and nuget version update PRs for 15.4 .", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/328197789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/328979468", "body": "Ok to merge this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/328979468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/328979500", "body": "Ok to merge this?", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/328979500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/329783263", "body": "@migueldeicaza This is a global change that disables it for all projects. Though XA already has it disabled. This PR is for 2017-06 branch, meant for 15.4 mono. So, QA just needs to cherry pick this.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/329783263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/329790148", "body": "My thinking was that this `sgen` code path hasn't really been tested in msbuild/mono and considering that it wasn't available at all in xbuild, it suggests that maybe nobody was depending on it. And were getting tripped because suddenly msbuild enabled it. This makes it opt-in, till we fix `sgen`. The user can still override the property and use this.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/329790148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/332985705", "body": "@akoeplinger Can we merge this? The changes here don't affect a mono build. They will take effect with bockbuild on the CI.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/332985705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/333001210", "body": "@akoeplinger correct. opened https://github.com/mono/mono/pull/5662 .", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/333001210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/353460267", "body": "@Ailincai-Nicolae-Rares Could you please attach the full diag build log? Add `/fl /flp:v=diag` to your `msbuild` command line. And then attach the generated `msbuild.log`.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/353460267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/236318", "body": "Or I could add this and the pkgconfig change to the xbuild wrapper script. But direct consumers of the msbuild assemblies won't get it. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/236318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/a717f377f0b773ffa99dc711ab4e687b50be991a", "message": "Fix bug 60848: Incorrect unicode custom attribute decoding (#6481)"}, {"url": "https://api.github.com/repos/mono/mono/commits/7eb8a585970dbba9d6f19c2656ea18144f11b4ee", "message": "Fix bug 60359"}, {"url": "https://api.github.com/repos/mono/mono/commits/4051586e6f636e84dd59a1d48748eae5e441cfd1", "message": "Replace explicit make invocations with uses of the MAKE variable"}, {"url": "https://api.github.com/repos/mono/mono/commits/1f174145d1e6efa7008e353083f4d1ed0c8b0e69", "message": "Fix a race condition in TcpListenerTest caused by sockets' accept queue not filling instantly when machine is under load"}, {"url": "https://api.github.com/repos/mono/mono/commits/252d61d0558b0bfa3461f3339ce617e2e4c285bb", "message": "Fix bug 60568: SynchronizationContext.Wait not implemented or invoked by runtime (#6062)\n\n* Checkpoint: Implement SynchronizationContext.Wait\r\n\r\n* Add missing check for null synchronization context\r\n\r\n* Update bug 60568 fix to cover WaitAll and add test cases\r\n\r\n* Add missing file"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6326", "title": "Fix xamarin-android issue 1130 and add test", "body": "https://github.com/xamarin/xamarin-android/issues/1130 is caused by us not properly storing/restoring the Thread.CurrentPrincipal context when execution contexts are stored. Task (and I think ThreadPool?) store the current context when a job is queued and restore it when running the job, which carries over state like the thread's current principal.\r\n\r\nRight now we have a weird hand-rolled implementation of CurrentPrincipal that I don't quite understand. I think we should be using the CurrentPrincipal value stored in the BCL's CallContext, so I tried doing that and it seems to fix this without breaking anything.\r\n\r\nI'd appreciate getting suggestions on how we should go about doing this for real. Does anyone know why the old implementation works the way it does? I assume the serialization logic has something to do with appdomains, but I would not have expected principals for the current thread to be shared between domains.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5345", "title": "Experimental bug 43172 fix", "body": "Creating PR to test an alternative socket behavior that fixes bug 43172, since the behavior here is likely platform-dependent.\r\n\r\nIn my testing so far on x64 Linux, it seems like performing the socket close before manually aborting threads that are in an i/o operation works fine (with the exception of intermittently changing the behavior of one test, but in a way that seems permissible based on documentation). Of course, the big question is whether this is okay on Mac, Windows, and x86 Linux.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "radekdoulik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/9a183f2c833a54e10fdcb09a3300d86e89ee85ae", "message": "[Tests] Do not assume order of returned interfaces\n\nUpdated the System.Reflection.Emit/SaveTest to not depend on order of\ninterfaces returned from the System.Type::GetInterfaces method, as the\norder is not guaranted. As described in the [documentation][0].\n\nAlso see github [issue][1] for more information and reasoning.\n\n[0]: https://msdn.microsoft.com/en-us/library/system.type.getinterfaces(v=vs.110).aspx#Anchor_2\n[1]: https://github.com/xamarin/xamarin-android/issues/1186"}, {"url": "https://api.github.com/repos/mono/mono/commits/69f99f1633940e093962d2c3a0fee1126e34f5c7", "message": "[linker-analyzer] Added man page for the linker analyzer"}, {"url": "https://api.github.com/repos/mono/mono/commits/c7acb025f53142b7403d58f0a24953f4a5a84ada", "message": "[linker-analyzer] Rename the tool to illinkanalyzer\n\nAs per discussion in https://github.com/mono/mono/pull/6168"}, {"url": "https://api.github.com/repos/mono/mono/commits/ff76904cbe7f47b76c064f277e587b058a2f62b3", "message": "[monodroid] Build linker-analyzer tool for monodroid\n\nWe would like to include linker analyzer in the Xamarin.Android\ninstallation (https://github.com/xamarin/xamarin-android/issues/1093)"}, {"url": "https://api.github.com/repos/mono/mono/commits/85e33cfdba90ef10de87633b8b140b8fb9f0e56f", "message": "[linker-analyzer] Added to the scripts"}, {"url": "https://api.github.com/repos/mono/mono/commits/6a867bd856a0310e63aacc6f4a7cc81dcd8294b0", "message": "[linker-analyzer] added --flat option (#5629)\n\n* [linker-analyzer] added --flat option\r\n\r\nThis options allows to see all dependencies per vertex at once, with\r\ndisplayed distance in the graph between the vertex and dependent\r\nvertex.\r\n\r\nAn example of flat output:\r\n\r\n    Loading dependency tree from: linker-dependencies.xml.gz\r\n\r\n    --- Type dependencies: 'Android.App.Activity' --------------------------\r\n\r\n    Distance | TypeDef:Android.App.Activity [total deps: 7]\r\n    ------------------------------------------------------------------------\r\n           1 | TypeDef:XA.App.MainActivity\r\n           2 | Assembly:XA.App, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n           3 | Other:Mono.Linker.Steps.ResolveFromAssemblyStep\r\n           3 | Other:Mono.Tuner.CustomizeActions\r\n           3 | Other:MonoDroid.Tuner.MonoDroidMarkStep\r\n           2 | TypeDef:XA.App.MainActivity/<>c__DisplayClass1_0\r\n\r\n* [linker-analyzer] Get back to using \"unnamed\" tuples\r\n\r\nUse unnamed tuples to workaround mcs bug. We can revert this change,\r\nonce mcs is updated.\r\n\r\nThe build with mcs was failing like this, because of mcs bug:\r\n\r\n```\r\nMacBook:linker-analyzer rodo$ make\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make all-local\r\nMCS     [net_4_x-darwin] linkeranalyzer.exe\r\n\r\nUnhandled Exception:\r\nSystem.NotImplementedException: named tuples for .interfaceimpl\r\n  at Mono.CSharp.TypeDefinition.Emit () [0x00028] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.ClassOrStruct.Emit () [0x00025] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeDefinition.Emit () [0x002e8] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.ClassOrStruct.Emit () [0x00025] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.Class.Emit () [0x00000] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeDefinition.EmitContainer () [0x0000f] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeContainer.EmitContainer () [0x0001e] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.NamespaceContainer.EmitContainer () [0x00007] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeContainer.EmitContainer () [0x0001e] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.NamespaceContainer.EmitContainer () [0x00007] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeContainer.EmitContainer () [0x0001e] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.ModuleContainer.EmitContainer () [0x0009c] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.AssemblyDefinition.Emit () [0x00098] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.AssemblyDefinitionStatic.Emit () [0x00126] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.Driver.Compile () [0x002f3] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.Driver.Main (System.String[] args) [0x00052] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: named tuples for .interfaceimpl\r\n  at Mono.CSharp.TypeDefinition.Emit () [0x00028] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.ClassOrStruct.Emit () [0x00025] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeDefinition.Emit () [0x002e8] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.ClassOrStruct.Emit () [0x00025] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.Class.Emit () [0x00000] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeDefinition.EmitContainer () [0x0000f] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeContainer.EmitContainer () [0x0001e] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.NamespaceContainer.EmitContainer () [0x00007] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeContainer.EmitContainer () [0x0001e] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.NamespaceContainer.EmitContainer () [0x00007] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.TypeContainer.EmitContainer () [0x0001e] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.ModuleContainer.EmitContainer () [0x0009c] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.AssemblyDefinition.Emit () [0x00098] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.AssemblyDefinitionStatic.Emit () [0x00126] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.Driver.Compile () [0x002f3] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\n  at Mono.CSharp.Driver.Main (System.String[] args) [0x00052] in <e953cb7042ea446195951c3e14c2cc5a>:0\r\nmake[1]: *** [../../class/lib/net_4_x-darwin/linkeranalyzer.exe] Error 1\r\nmake: *** [do-all] Error 2\r\n\r\n```"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "monojenkins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/7fa82690762511ae5ac0df82dcc679dc7cbb0fb0", "message": "[msvc] Update csproj files (#6538)"}, {"url": "https://api.github.com/repos/mono/mono/commits/5929e348e940ed1b433eb112d90a63394301a624", "message": "[msvc] Update csproj files (#6516)"}, {"url": "https://api.github.com/repos/mono/mono/commits/ec09d13a8e16b1418f298c217fdb1863dba65aeb", "message": "[msvc] Update csproj files (#6473)"}, {"url": "https://api.github.com/repos/mono/mono/commits/6dd4ff09f6fde7b25a39f599ca339617c2e10224", "message": "[msvc] Update csproj files"}, {"url": "https://api.github.com/repos/mono/mono/commits/ad179f61d75d4b2cc4c1e44935c47f517b70f493", "message": "[msvc] Update csproj files"}, {"url": "https://api.github.com/repos/mono/mono/commits/99e3bc890442eebbf99aee0a139d1e9f8ef99302", "message": "[msvc] Update csproj files"}, {"url": "https://api.github.com/repos/mono/mono/commits/2b90049bcce708d313e6e6462df47e21aff155ca", "message": "[msvc] Update csproj files (#6206)"}, {"url": "https://api.github.com/repos/mono/mono/commits/657ff6d38aead8669c67e2147ec79ccbd3ee4746", "message": "[msvc] Update csproj files (#6163)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vladimir-kazakov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/89c76cdfa1cbb358bb6353f886351280bd80eafc", "message": "Add System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior. (#6508)"}, {"url": "https://api.github.com/repos/mono/mono/commits/d0369589868f971fd13668906b178b158541344e", "message": "XMLDSIG from .NET Core. (#6154)"}, {"url": "https://api.github.com/repos/mono/mono/commits/05e8f2b8d73149e57dfbdbb4d126335a0e17a2bf", "message": "Add a possibility to use empty X.509 certificates.\n\nFixes #6264."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lateralusX": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/52db7f6ae71dc8bb7db54541b15b215668cdd77e", "message": "Merge pull request #5964 from lateralusX/lateralusX/add-pending-joinable_support\n\nWait on runtime threads to complete detach/unregister during shutdown."}, {"url": "https://api.github.com/repos/mono/mono/commits/be683c14b90cc8629891e3b8d6e54b6e2d3ade41", "message": "Wait on runtime threads to park on joinable thread list during shutdown.\n\nhttps://github.com/mono/mono/pull/5599 fixed a race condition during shutdown\nwhen runtime threads have come parts of their way through detach, but still\ndepend on runtime resources, like GC memory. The fix added runtime threads\nto the joinable thread list just before they vanished from mono_thread_manage\nradar making sure shutdown waited upon the thread before cleaning up.\n\nThe above fix slightly changed the behavior of the finalizer thread since it\nwaits on joinable threads and will now potential block on threads still\nexecuting code (that involves runtime resources). There\u2019s was an assumption\naround the threads on the joinable thread list that they should be very close\nto complete when added, so join calls coming from the finalizer thread should\nalmost never block and if it does, the code that remains to execute should not\ninvolve runtime operations risking deadlock situations. Adding the thread to\nthe list earlier than previously done expose the shutdown to some potential\ntheoretical problems.\n\nTo mitigate the risk and still solve the race condition this commit adds a\nmechanism to keep track of active runtime threads until they park on joinable\nthread list. The pending counter will be waited upon by the shutdown\nthread, just before it does its regular wait on all joinable threads\n(after finalizer thread has stopped) to make sure all runtime threads have\nbeen added to the joinable thread list before waiting upon them. Threads are\nadded to the joinable thread as late as possible, exactly how it\u2019s been done\nin the past by sgen_client_thread_detach_with_lock. Shutdown thread will wait\non runtime threads to appear on the list for a short time and if timeout (pending\nruntime thread count not reaching 0 before timeout), it will just print a warning\nand continue shutdown.\n\nGetting into a wait state during shutdown due to runtime threads not yet added to\njoinable threads list should be very rare (hitting previous race condition that was rare),\ntriggering the timeout should be even more rare, and if that ever happens, we are exposed\nto shutdown race condition as we have had in the past, but now we at least get a warning in\nthe log making it simpler to analyze further.\n\nThis commit also fixes a problem with the debugger thread hitting the same race condition as above.\nThe shutdown thread stopping the debugger thread didn't completely wait for it to stop using runtime\nresources before continue shutdown sequence. This triggers the same race condition as when shutting\ndown regular runtime threads. This commit makes sure stop_debugger_thread waits on the debugger thread\nhandle to become signaled (happens at the very end of thread lifetime) before continuing the shutdown\nlogic."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/80654259", "body": "OK\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80654259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80654271", "body": "OK\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80654271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80736879", "body": "Right now you can do this manually (by changing winconfig.h) and this is how it is currently tested. Windows builds have never used the result from configure steps, it uses the checked in version of winconfig.h. This file uses the winapifamily.h to set the right API family based on build targets and it is possible to manually override just to test mono API Surface. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80736879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903053", "body": "My original suggestion was to put the macro in eglib so it could be used from eglib as well, but Rodrigo didn't want it in eglib but in mono-compiler.h (libmonoutils) and we can't reference from eglib into libmonoutils.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903086", "body": "See above comment.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903109", "body": "See above comment.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903130", "body": "See above comment.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84903130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "cshung": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/57a2cce4b1f9783b25d59335e755b3c24fc25af9", "message": "Fix a typo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/3277e2be43031d1e03e934b9334ec811ee851e04", "message": "[profiler] Fixed GCResizeEvent value overflow (#6335)\n\nIn case application was using more than 2GB of heap memory it started reporting minus values because `emit_value` accepts `int`"}, {"url": "https://api.github.com/repos/mono/mono/commits/db5f38402f39f6aeb30a5f12b4e90d7c943f6761", "message": "[PerfCounters] Added \"Page File Bytes\" which shows VmSwap and made few MacOS counters more accurate"}, {"url": "https://api.github.com/repos/mono/mono/commits/2bab8fa49ecfbc861b6368477c52bc9ba19377cb", "message": "[Profiler] Fix parsing bug when `jit` is enabled\n\nBug was caused by wrong values in enum because `string` is parsed only when type is `SpecificTrampoline` but with mismatching values between C and C# enums it didn't parse string when it should causing parsing next event throwing random exceptions because there was still unexpected string data."}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6514", "title": "Bug 60088 - Assertion at ../../../../external/mono/mono/mini/debugger\u2026", "body": "\u2026-agent.c:4765, condition `array->len == 1' not met\r\n\r\nProblem was that I didn't consider `async void` method when adding that assert", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ermshiperete": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/63a8b08dd75165622babbf67a92635c0b63407d1", "message": "[System] Improve ApplicationSettingsBase behavior (#6272)\n\n* [System] Add unit test for Xamarin-2315\r\n\r\n* [System] Use temporary directory for saving settings files\r\n\r\nThis change modifies the ApplicationSettingsBaseTests so that they\r\nstore the settings files in a temporary directory. This reduces\r\nthe risk of failed tests because of stale files from previous test\r\nrun, or from a build that runs in parallel.\r\n\r\n* [System] Improve Settings behavior (Xamarin-15818)\r\n\r\nImprove behavior of ApplicationSettingsBase class to match Windows .NET\r\nmore closely.\r\n* Implement Upgrade to allow Upgrading of settings\r\n* Make SettingsPropertyValue serialization work for complex objects\r\n* Make Save and Update throw in unimplemented configurations\r\n* Changed Reload to clear PropertyValues so they are reloaded\r\n  and fire PropertyChanged event for all Properties\r\n* Modified Reset to do what Reload used to do.\r\n* Added a backup Type loading for custom SettingsProviders\r\n* don't call SettingsSaving on Reset()\r\n\r\n* [System] Fire SettingsSaving event (Xamarin-2315)\r\n\r\nWhen calling ApplicationSettingsBase.Save() the SettingsSaving\r\nevent has to be fired.\r\n\r\n* [System] Add unit tests for Xamarin-15818"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/51345204", "body": "Good point. Done.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/51345204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/10179721", "body": "It's done this way elsewhere in this file, so it should be changed there as well.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/10179721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "alexischr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/83d6abd2191de0e6b3bc73dafb06fb202a151daa", "message": "Merge pull request #6385 from akoeplinger/bump-gtksharp\n\nBump gtksharp in bockbuild"}, {"url": "https://api.github.com/repos/mono/mono/commits/381d11c97eb5fbeca9afbbefc518f79dc0eb8c4f", "message": "Merge pull request #6332 from directhex/fixbuild\n\nAdd file missed from e0b1d6651915c395eca637ed172399354ee0fa17 to Makefile.am"}, {"url": "https://api.github.com/repos/mono/mono/commits/84c9542f15b90e7ce458bd39d267593082eaf508", "message": "Merge pull request #6215 from YuriyGS/bug15051\n\n[System.Windows.Forms] DataGridView throw exception when trying to remove a row. Fixes #15051."}, {"url": "https://api.github.com/repos/mono/mono/commits/7758f54dcf8681c85e34c76b35e437fdc51ec285", "message": "Merge pull request #1450 from echampet/session\n\nSystem.Web.SessionState: simplify sessions retrival polling"}, {"url": "https://api.github.com/repos/mono/mono/commits/233212bd24bb4b930834538234c07cf085283090", "message": "Revert \"Merge pull request #5643 from alexanderkyte/jemalloc\"\n\nThis reverts commit 3dac926be3c94926da61f0f64b2b94acb1bda1f6, reversing\nchanges made to 50b6a2e823812ac5f4ac4cde074b482d42bdaf39."}, {"url": "https://api.github.com/repos/mono/mono/commits/3dac926be3c94926da61f0f64b2b94acb1bda1f6", "message": "Merge pull request #5643 from alexanderkyte/jemalloc\n\n[DONTMERGEruntime] Bring jemalloc to mono"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6034", "title": "[class] Fix resolution of interface implementation for 'special inter\u2026", "body": "\u2026faces'. Fixes #59400\r\n\r\nCredit to @lambdageek for catching the typo in the original commit (https://github.com/mono/mono/commit/1b9659a1d2c26c2be7714c946e3a45a350905945)", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5973", "title": "CoreFX FileSystemWatcher (Mac)", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/5910", "title": "[coop] Convert ves_icall_System_Environment_GetEnvironmentVariableNames icall \u2026", "body": "\u2026to use coop handles", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/4290", "title": "[WIP] FSEvent FileSystemWatcher port from CoreFX", "body": "* Depends on https://github.com/mono/mono/pull/4491 or your own build of System.Native dylib. While the above is being merged the easiest way to test the FSW is to first checkout the above PR, build, then switch to this one and build.\r\n* The 'SR' class fields had to be manually extracted from CoreFX resx definitions, as otherwise they clashed with existing definitions from `ReferenceSources/SR.cs`\r\nBehavior changes versus kqueue():\r\n* no limit on watched files/directories, lower memory usage \r\n* renaming the watched directory will stop events from firing until renamed back; scope is path-string based. \r\n* Rapid-fire renames (A->B->C->D) may not all get an event but are 'eventually consistent' (you will see A and D)\r\n* Mono's FSW (at least the kevent one) could watch a single file. This one only watches directories, and that also seems to be the .NET behavior.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/2929", "title": "[TEST] Let's see if any of our g_assert() use is problematic", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/67743701", "body": "I'd drop this change since this is an invalid target (see https://download.mono-project.com/runtimes/raw/target-list.txt and mcs/tools/mkbundle/mkbundle.cs). It's just an example anyway, and the valid target list can be retrieved via mkbundle itself.\n\nAnd I forgot that the need for the winconfig.h bump was removed, so the configure.ac change is all we need. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/67743701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "nosami": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/492f66c60f7ca3bb7b88b231e2d8f42f8347f1ee", "message": "Bump F# to 4.1.29. Fixes #6281 (#6295)\n\n* Bump F# to 4.1.29. Fixes #6281"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mathieubourgeois": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/29428d951637ff85b593ea5c9cc5d5236579906d", "message": "* Generalize commit 0c6932a985175a5cf0cbc59ffd3af4abf3db248e to support LDARG{0|1|2|3}, LDLOC{0|1|2|3}, LDARGS, LDLOCS, LDARG and LDLOC instead of LDLOC and LDLOCS. Improves generated code similar to issue #60945"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atsushieno": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/05d5204da8f26549cf2e8ae387d907f6a4748823", "message": "[mono-api-html] do not warn about removal of [Obsolete] member. (#5294)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/115348", "body": "> What about using [Category (\"NotDotNet\")]?\n> Thought about that before making the change, but I'm not sure this code + nunit 2.4.8 should really work under any system.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/115348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/123074", "body": "umm, if it's something critical, let's please revert the change. I got my second dev. laotop (macbook) broken(!!) and am unable to do it by myself :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/123074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/128272", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144442", "body": "For reference, the correct bug # is 638098.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144475", "body": "Looks like this caused dist failure on 2.6 http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5020269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/177750", "body": "x XamlLanguage.Items is not correctly supported in XamlObjectReader.\no XamlLanguage.Items is now correctly supported in XamlObjectReader.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/177750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/255540", "body": "This sort of mistake can indeed be a typo e.g. you forgot to type ctrl+v or p (on vim).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/255540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/435346", "body": "This change broke Windows build:\n\ndebugger-agent.c:966: error: `EWOULDBLOCK' undeclared (first use in this function)\ndebugger-agent.c:966: error: (Each undeclared identifier is reported only once\ndebugger-agent.c:966: error: for each function it appears in.)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/435346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/881296", "body": "Whoa, wasn't aware that --author=\"Curtis Wensley\" --author=\"Atsushi Eno\" didn't work to add two authors. The code change is from http://bugzilla.xamarin.com/show_bug.cgi?id=2927 thanks to Curtis.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/881296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1031457", "body": "I reverted it at 9c9546c (see workaround on the commit msg).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1031457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1117031", "body": "This commit broke the build.\nhttp://wrench.mono-project.com/Wrench/WebServices/Download.aspx?work_id=111681&filename=System.Runtime.Serialization-4.5.log\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1117031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1259937", "body": "Of course it is because everyone including you find it worthy to take time to implement it by self. And of course it is wrong way to add such comment on a specific commit.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1259937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1398555", "body": "This caused regression in MonoTests.Microsoft.Build.BuildEngine.ImportCollectionTest.TestAdd2().\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1398555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1415796", "body": "It might not be Mac acos() but System.Double.Epsilon which is broken by design.\nhttp://www.johndcook.com/blog/2012/01/05/double-epsilon-dbl_epsilon/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1415796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1553848", "body": "jchambers is right, my patch fixes the issue when the sln file path is _not_ rooted. But the original entire patch (previous to mine) has to be reverted at all, to not extend the disaster more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1553848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "CNAmira": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/c0e6ecb6c2ced241811e5569bfd483acd9cf6d94", "message": "[System.Windows.Forms] Fix CJK Encoding on Window Title"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "resurrexit": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/4a8adbd8dc4233d5bcdc0e19fe451aa94dd28745", "message": "[I18N] Include missing subset of shift_jis characters  (#6232)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grendello": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/e3ffc2e984bce6fe4ae8d1a86206000083a73972", "message": "[android] Android NDK does not contain API level/platform 12\n\nLack of it causes a build error in XA:\n\n   CMake Error at [..]mono/external/boringssl/util/android-cmake/android.toolchain.cmake:800 (message):\n         Specified Android native API level 'android-12' is not supported by your\n\nThe set of minimum API levels in `configure.ac` is incorrect. The current\nNDK (r16) requires minimum API level of 14 for the 32-bit targets and level 21\nfor the 64-bit targets."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121619", "body": "So I did, sorry about that. Fixed in 9e0162ea534e2dc49d3f134b80efc6d88670434b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/122578", "body": "This commit breaks two tests in System.Web (both 2.0 and 4.0 profiles):\n\n```\nTest Case Failures:\n1) MonoTests.System.Web.HttpUtilityTest.UrlEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlEncode () [0x00007] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:718\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n\n2) MonoTests.System.Web.HttpUtilityTest.UrlPathEncode : System.ArgumentException : Insufficient Space\nParameter name: bytes\nat System.Text.UTF8Encoding.InternalGetBytes (System.Char* chars, Int32 count, System.Byte* bytes, Int32 bcount, System.Text.EncoderFallback  fallback, System.Text.EncoderFallbackBuffer& buffer, System.Char& leftOver, Boolean flush) [0x002fa] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:357\nat System.Text.UTF8Encoding.GetBytes (System.Char* chars, Int32 charCount, System.Byte* bytes, Int32 byteCount) [0x00070] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/UTF8Encoding.cs:432\nat System.Text.Encoding.GetBytes (System.String s) [0x00069] in /home/src/build/mono/mono/mcs/class/corlib/System.Text/Encoding.cs:255\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncodeChar (Char c, System.IO.Stream result) [0x00010] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:647\nat MonoTests.System.Web.HttpUtilityTest.UrlPathEncode () [0x00037] in /home/src/build/mono/mono/mcs/class/System.Web/Test/System.Web/HttpUtilityTest.cs:744\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod*,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d0] in /home/src/build/mono/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:223\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/158540", "body": " I know, but I think the checks are still in order - the code should not NREX because of a bug elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/158540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/158864", "body": "Of course we shouldn't do that, but in this case the call to ReleaseResources affects code of the class all over the place and I think it's sloppy code to allow for NREX in situations like this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/158864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/178443", "body": "thanks for the heads-up - will fix in a few, as soon as I can update\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/178443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/178449", "body": "Fixed in 4b528bc0ed196f1285ec0891559a0c53587bf7ca\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/178449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/183823", "body": "Please always make sure to always commit files with uniform line endings. This commit had files with mixed newlines which causes problems for people pulling the changes:\n\nwarning: CRLF will be replaced by LF in mcs/class/corlib/System.Security.Cryptography/RSACryptoServiceProvider.cs.\nThe file will have its original line endings in your working directory.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/183823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/183825", "body": "Forgot to add that I fixed the issue in 70f77d14ac86087636321b54ef7d95c36532f37c :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/183825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/860166", "body": "Marek, there's is quite a lot of noise here. What is the actual fix?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/860166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/860172", "body": "I think you should revert the commit and ask for a new pull request with clean set of changes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/860172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1147764", "body": "Windows bot needs to perform git submodule update with:\n\ngit submodule init\ngit submodule update\n\non Unix this is done from configure\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1147764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1148136", "body": "Please file a bug in bugzilla at bugzilla.xamarin.com, thanks\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1148136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "joshpeterson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/58a491b96c11f4d02ac03cf6d57bfd28e073e4a1", "message": "Avoid using BSTR for conversion of a SecureString\n\nThere is no need to use BSTR marshaling to convert a SecureString to a\nstring. On some platforms, BSTR marshaling is not implemented, but we\nstill want to be able to convert a SecureString to a string on those\nplatforms.\n\nSo instead, use Unicode string marshaling."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/112274045", "body": "I agree, this is an over-zealous check. I don't recall why we needed it when I originally did this, but it seems to be unnecessary on the platforms we care about now. I'll remove it.\r\n\r\nShould I squash this new commit into the previous one and do a force push to this branch so that we only see one commit? Or is it acceptable to have two commits on this branch if/when it is merged?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112274045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112276417", "body": "Thanks, I'll remove this and force push a squashed commit.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112276417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "baulig": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/cd09ddbc55c9866703d43fb8b089978dec2c4ef3", "message": "New PR for the new web stack (#6125)"}], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4972", "title": "[System]: Use HttpListener from corefx.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/161635", "body": "I fixed it in f17f424 and 3d577e4.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/161636", "body": "Sorry for me messup in f17f424, I already had everything ready, then changed the name of the conditional and didn't realize that I also need to invert the condition.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/161878", "body": "Yeah, you're right.  Already fixed that last night.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1444733", "body": "I don't have SQL Server 2008 to test this with.\n\nThe main reason for the conditional is that I didn't want to break anything in existing code.\n\nI'll see whether I can get the server version tomorrow and also try to figure out how to send null / DBNull for integers to that server.  SQL Server 2012 accepts neither a length of 0 or -1, but I'm not sure whether that only applies to that @Handle field or to integers in general.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1444733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1446711", "body": "isReadOnly is a private field that I added last week when implementing.NET 4.5 async support in System.Xml.\n\nAccording to the MSDN documentation, you must not modify any of the properties in XmlReaderSettings / XmlWriterSettings after the XmlReader / XmlWriter has been constructed.\n\nHowever, we don't have any tests for that in Mono and I also wasn't sure whether earlier versions of .NET may have allowed changing these properties afterwards.  I did not want to break any existing code, so I only did the read-only check for the 'IsAsync' property that I added.\n\nIdeally, EnsureWritability (new private method that I added) should be called in all of the property setters, but we need nunit tests for that and also test with older versions of .NET.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1446711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1446721", "body": "Oh good.  I wasn't sure whether you can have both on the same machine.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1446721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1447857", "body": "Ok, tested and fixed in 901938bfd86f113671d2ccce533562e1225e246f\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1447857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1503228", "body": "Sorry, new repo on my mac.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1503228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1883427", "body": "Well, this is a bit confusing, but Version=1 is _not_ newer than Version=0 - it simply means to strictly follow [RFC 2109](http://tools.ietf.org/html/rfc2109) (from '97, so it's very old and does not reflect how cookies are actually used on the internet).\n\nQuoting [Wikipedia's Cookie article](http://en.wikipedia.org/wiki/HTTP_cookie):\n\n> The specification produced by the group was eventually published as RFC 2109 in February 1997. It specifies that third-party cookies were either not allowed at all, or at least not enabled by default.\n> \n> At this time, advertising companies were already using third-party cookies. The recommendation about third-party cookies of RFC 2109 was not followed by Netscape and Internet Explorer. RFC 2109 was superseded by RFC 2965 in October 2000.\n> \n> A definitive specification for cookies as used in the real world was published as RFC 6265 in April 2011.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1883427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262", "body": "Fixed, thank!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81158262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81139384", "body": "Ok, let me explain how this works - as this is not strictly speaking a managed define, while still serving a managed purpose.\n\nThe problem is that on mobile, we are building the class libraries once on the host system, then copy them to the cross-compiled targets.  So a purely managed `#define` would not tell us whether the runtime actually supports BTLS.\n\nBTLS will be added to the runtime as a intern-calls and the native `HAVE_BTLS` conditional controls whether these intern-calls will be available.  However, one intern-call will be available unconditionally - and it will return either `true` or `false` based on this conditional.  The managed code can then call a special static `IsSupported()` method to find out whether runtime support is available or not.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81139384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81146945", "body": "Oh, yeah.  I simply have `-define:HAVE_BTLS` in my work branch at the moment, but the managed conditionals will most likely just go away completely.\n\nHaving them in C# just makes it easier for me to run patches and copy files between the branches and I can also easily run `git grep HAVE_BTLS` to find all the places which need editing once we land.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/81146945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114902399", "body": "We should use the new naming scheme everywhere, then we can get rid of of the conditional fallback.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114902399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114902512", "body": "We cannot have both `intermediate` and `LIBRARY_SUBDIR` defined at the same time.  This should still be cleaned up, though.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114902512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114902539", "body": "Debugging spew.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114902539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "YuriyGS": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/61588a1d534345720def542f2708ee8976093cbd", "message": "Second issue of bug #15051. first_row_index was corrupted by MoveCurrentCell call."}, {"url": "https://api.github.com/repos/mono/mono/commits/09ea581914001866ce05f9c60cb638a21d24e02b", "message": "Fixed a crash when deleting a row containing a selected cell"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "slide": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mono/mono/commits/8be2726e127a969cd73e4e92ed03b053f13ed5d5", "message": "Add install of Visual Basic compiler (#6127)\n\nThis is a follow on to mono/roslyn-binaries#3 which adds the Roslyn VB.NET compiler to the roslyn-binaries repo. This will then install the binaries to the mono installation."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mderoy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6633", "title": "Fixes an issue where a pipestream handle may be closed twice", "body": "The PipeStream class has its own Dispose implementation, but it passes a dangerous handle internally to a FileStream, and tells the filestream that it also owns this handle. As a result the finalizer for filestream also closes the handle, which causes problems when the handle has been reused", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VsevolodSauta": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/6613", "title": "[WindowsBase] Use case-insensitive extension match in System.IO.Packaging.ZipPackage", "body": "Using DocumentFormat.OpenXml I've found that these files cause crashes or NullReferenceExceptions depending on the usage scenario. And the actual bug fix was in changing the matching policy from case-sensitive to (limited) case-insensitive. I did not consult any documentation on Open Package convention, so I leave the decision, whether this commit is 'good' or not to the reviewer's responsibility.\r\n\r\nThe file with required case insensitive match (as an example):\r\n[06fzbx7qh8.docx](https://github.com/mono/mono/files/1648791/06fzbx7qh8.docx)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Geotha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5448", "title": " Import System.IO.Pipes.PipeStream from CoreFX for Gsoc 2017", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rogierhofboer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5418", "title": "[runtime] Fix regression in bugfix 38666", "body": "When fixing bug 38666 in commit https://github.com/mono/mono/commit/71d181c3b39b754ca6b6849a0d7dfa30c9b22cf4 mono_100ns_ticks() was changed to mono_100ns_datetime().\r\nThis causes System.Threading.Tasks to timeout (too) early if the system time is changed when a task is running. Also related to comments in https://github.com/mono/mono/pull/4446.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "urisimchoni": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5329", "title": "[profiler] add a test for selectively profiling inlined code", "body": "This test includes a custom profiler that decides at JIT time\r\nwhich code to profile, base on method name. It then counts\r\nnumeber of invocations and compares with expected value.\r\n\r\nThe main objective of the test is to check that code that otherwise\r\nwould be inlined can be profiled, and that profiled code can have\r\nnon-profiled inlined code inside it.\r\nIf the first commit of PR#5321 is applied, fixing the inlining in general, then this test fails without the second commit.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/132625564", "body": "Removed that in update to PR", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/132625564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nishant21gupta": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5315", "title": "[WIP][GSoC]Import FileStream from CoreRT", "body": "This is part of the GSoC project and still a work in progress..right now the primary purpose of this PR is to run tests on CI and fix the errors that come up. \r\nCC: @alexischr ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ztzg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5148", "title": "[aot] Do not mix amodule->shared_got and ELF-backed GOT lifetimes", "body": "The AOT GOTs, 'amodule->got' and 'amodule->llvm_got', are backed by\r\nthe corresponding shared object's .bss section.\r\n\r\nUnloading a domain causes its assemblies and images to be closed and\r\nfreed.  The shared object, however, is not closed; it--and its\r\nGOTs--are kept around.\r\n\r\nLoading a previously-unloaded assembly in a new domain can thus result\r\nin a fresh module whose ELF GOT is already initialized while the\r\n'shared_got' is empty.\r\n\r\nThis typically results in a crash: 'decode_patches' looks at the GOT\r\nand silently ignores the patches, thinking they have already been\r\nloaded, but 'init_amodule_got' then happily passes these zeroed data\r\nstructures to 'mono_resolve_patch_target'.\r\n\r\nThis patch adds a flag to 'decode_patches', to force it to use the\r\n'shared_got'.  Another solution would perhaps be to initialize the\r\n'shared_got' from the ELF GOT instead of zeroing it out.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dampir": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5054", "title": "[WIP] [GSOC-2017] Import EventWaitHandle, AutoResetEvent, ManualResetEvent, Mutex and Semaphore", "body": "In this post, I want to summarize what has been done during my participation in GSoC 2017.\r\nI'm going to send the link to this post as my work product submission for final evaluation of GSoC 2017.\r\n\r\nWhat has been done:\r\n- [x] Added additional platform specific dll.sources files to handle the CoreRT approach when platform specific code is placed in its own file.\r\n- [x] Ported all needed managed classes of CoreRT source code. It includes classes that must be ported to integrate Semaphore, Mutex and EventWaitHandle synchronization primitives into Mono.\r\n- [x] The CoreRT runtime library System.Private.CoreLib.Native was integrated into Mono as a dynamic library.\r\n- [x] Started a work on an adaptation of Mono runtime to handle of CoreRT's managed class instead of Mono's ones.\r\n\r\nWhat should be done next:\r\n- [ ] As was found, imported sync primitives are tightly connected with the Thread class from CoreFX project. The Thread class must be imported first, but it means that all System.Threading (the Tasks classes, etc) must be imported next. I tried to import them but the attempt was failed. Here is a link to the commits I did: [gsoc-import-thread-class](https://github.com/dampir/mono/commits/gsoc-import-thread-class).\r\n- [ ] The work on an adaptation of Mono runtime should be done next.\r\n\r\nI want to say big thanks for all people that helped me during GSoC 2017. I got a very valuable experience, especially in C# and Mono internals.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xmcclure": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/5047", "title": "Print error message when $cross_compiling is nonsense", "body": "In tests cross-compiling in Bash for Ubuntu for Linux, the value of the autoconf variable $cross_compiling was found to be \"maybe\". Our code as written assumes this variable is always \"yes\" or \"no\". It appears autoconf only does this when --build is autodetected and that this is intended behavior. It's not clear how to handle this at our end, so our solution is to detect the \"maybe\" case and print an error message recommending an explicit value for --build.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/75548736", "body": "Do we even still use this file?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/75548736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112271441", "body": "Checking for `X_OK` seems odd. Do you really have a platform which defines access() but not the `X_OK` symbol? Would it make more sense to add access to configure.ac and use HAVE_ACCESS?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112271441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112278279", "body": "Two commits, or a force push, would either one be acceptable.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/112278279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114208076", "body": "Will correct the text, thanks.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114208076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hharyono": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4943", "title": "Fixing on WriteContentType when extension is empty.", "body": "When I create package the result should be like Windows result. Linux Result is not correct.\r\nSo to correct it, I added a condition in the code.\r\n\r\n![xml result](https://cloud.githubusercontent.com/assets/28587808/26567052/52c49378-4522-11e7-8bfc-f3dfa966b9b5.png)\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meee1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4829", "title": "misc fixs", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rolfbjarne": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4654", "title": "[runtime] Make mono_set_pending_exception public.", "body": "Xamarin.Mac uses mono_set_pending_exception to convert Objective-C exceptions\nto managed exceptions.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/312303", "body": "This has been fixed now, I changed it to use a MonoSemType instead of a sem_t.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/312303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/635983", "body": "I get this while building on OSX now:\n\nld: duplicate symbol _mono_native_thread_id_get in ../utils/.libs/libmonoutils.a(mono-threads-mach.o) and ../utils/.libs/libmonoutils.a(mono-threads-posix.o) for architecture i386\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/635983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/645149", "body": "I must have forgotten to push it, done now.\n\nOn Tue, Oct 11, 2011 at 3:04 PM, Alex Henning Johannessen <\nreply@reply.github.com>wrote:\n\n> I wondered if this is making it into the 2.10 branch?\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/mono/mono/commit/bdb46ecfc9c9990225719c30ff26cad76d0a1d5a#commitcomment-643874\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/645149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1354609", "body": "Definitively. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1354609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "evincarofautumn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4529", "title": "[ward] Annotate SGen permissions.", "body": "This introduces the following [Ward](https://github.com/evincarofautumn/Ward) permission annotations in SGen:\r\n\r\n| Permission | Meaning |\r\n| --- | --- |\r\n| `sgen_stop_world` | Allows stopping the world. |\r\n| `sgen_world_stopped` | Requires the world to be stopped. |\r\n| `sgen_lock_gc` | Allows taking the GC lock. |\r\n| `sgen_gc_locked` | Requires the GC lock to be held. |\r\n\r\nMainly getting this out for visibility. I have started annotating other parts of the code, but the SGen bits happen to be fairly small and self-contained. I plan to use this PR to test running Ward as part of the static analysis CI.\r\n\r\nQuestions:\r\n\r\n* Is the annotation burden too high? I know @kumpera was concerned about this. @lambdageek, do you have any thoughts on how to safely reduce the number of required annotations? I\u2019m happy to do the grunt work if necessary, and Ward could be extended to add annotations interactively to make that easier. However, we don\u2019t want to infer everything, because it may mask legitimate errors.\r\n\r\n* Should Ward handle indirect calls, or are we fine with wrapping such calls in annotated functions? I\u2019ve done some such wrapping in this PR, e.g., `major_collector_iterate_objects` instead of `major_collector.iterate_objects`, but Ward still gives several warnings about unhandled calls.\r\n\r\n* Should Ward handle conditional permissions? Previously, `sgen_perform_collection` took a Boolean indicating whether to stop the world; in order for Ward to check this, I had to split it into two functions: one that assumes the world is stopped, and a `_stw` variant that stops the world and calls the original. (I think this is better style anyway.)\r\n\r\n* More generally, what do we want to enforce? What has relatively high value for relatively low annotation cost? Ward should be able to handle things like:\r\n\r\n  * Locking (e.g., loader, image, AOT) to make our `LOCKING:` comments machine-verified\r\n  * Async signal safety\u2014we would need to differentiate sync from async signals\r\n  * Allocation\u2014enforcing who can call `malloc` or allocate on the GC heap\r\n  * Program phases\u2014enforcing which functions are allowed/required to run during init, shutdown, &c.\r\n\r\nIn particular, the loader lock is used *everywhere*, directly and indirectly, and so requires significant annotation work. I don\u2019t know how much value this would have, especially because it\u2019s already a recursive mutex, so we don\u2019t need to prevent nesting.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/95678254", "body": "So this causes the compiler to emit `.eh_frame` info even for C code? How does this affect code size?", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/95678254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66873948", "body": "In fact most of our Makefile variables could use `:=`, not `=`, and this would probably improve build performance. A separate PR is probably in order.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/66873948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "OleksiiYatsenko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4366", "title": "Add more dash punctuation to regex", "body": "To avoid problem with dashes punctuation with ASCII 8211(en dash), 8212\r\n(em dash), regex was extended. For example: It could appeare when make copy paste from MS Word.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PiotrCW": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4247", "title": "[System.Windows.Forms] Ignore non-visible controls when computing ScrollableControl canvas size", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nerzhulart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4164", "title": "Soft debugger invocations refactoring", "body": "New IInvocableMethodOwnerMirror interface to avoid duplicating of Invoke*, BeginInvoke*, EndInvoke* methods in invocable mirrors. All the API is now static methods taking IInvocableMethodOwnerMirror as the 1st parameter. This refactoring allows to avoid multiple 'if (obj is *) else' in SoftDebuggerAdaptor.\r\n\r\nThis PR already merged in MonoDevelop/debugger-libs\r\nhttps://github.com/mono/debugger-libs/pull/84", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dagrooms52": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/4058", "title": "Invalid format returns the invalid key & value when an invalid header is added", "body": "I came across this issue in the past day using Xamarin Android, which runs on a Mono compiler. Adding an \"If-Match\" header with value `null` resulted in the `FormatException` being thrown, but no message pointed me to the issue. The application was running on nugetized code that had been built and tested on the built-in Visual Studio C# compiler, which allows `null` as a value for \"If-Match\" headers, so the invalid format was not caught in any tests from that repository, and could not be reproduced. This adds a simple message to the exception for debugging purposes.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "elw00d": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3990", "title": "Fixed #16892", "body": "Reworked pull request https://github.com/mono/mono/pull/1265\r\n\r\nfixes https://bugzilla.xamarin.com/show_bug.cgi?id=16892", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ylatuya": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3772", "title": "Fix bug #46971", "body": "The removed validation does not seems to be correct, for example\nthe generated Onvif media client has a GetVideoSources function that\nis a combination of a first message with an input parameter and\na second message with the reply that is not void.\nRemoving this checks makes the client work correctly\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3472", "title": "Fix WS-Discovery and other protocols using duplex channels", "body": "This fixes several issues for [1468](https://bugzilla.xamarin.com/show_bug.cgi?id=1468) and WS-Discovery finally works in mono\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "madewokherd": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3610", "title": "Use the correct function signature for MonoThreadStart consistently.", "body": "Trying to use a cdecl function when stdcall is expected can crash on x86 Windows when the function returns.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3391", "title": "Support native-to-managed thiscall wrappers", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pascalhaakmat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3465", "title": "Uncomment and fix ServiceHost creation via ServiceFactory in SvcHttpHandler.cs", "body": "This commit allows customization of WCF service creation via the Factory attribute in an .svc file:\n\n`<%@ ServiceHost Language=\"C#\" Service=\"CustomService\" Factory=\"CustomServiceHostFactory\" %>`\n\nAll the patch does is uncomment a few lines that were already there and fix a small error. I am not sure why these lines were commented. Possibly the code is not sufficiently robust or it was just never given another look. But this works for me and it seems better than no support at all. For example, a custom ServiceHostFactory appears to be the only way to create a WCF service in a managed host which customizes EndpointDispatcher.AddressFilter and EndpointDispatcher.ContractFilter. This in turn is useful for proxied WCF services.\n\nSee also http://mono.1490590.n4.nabble.com/Mono-WCF-ServiceHost-Factory-option-td4251992.html (from 2012; never posted on the mailing list for some reason).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "esdrubal": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3425", "title": "[runtime] test_op_il_seq_point.sh, test code and check determinism", "body": "test_op_il_seq_point.sh was only checking generated native assembly for\nsize mismatches. Nonetheless some optimizations may produce different\nnative assembly with the same size.\n\nWhen mismatches are found between compilation with and without\nOP_IL_SEQ_POINTS, now the script checks it is not due to indeterministic\nJIT compilations.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/24997259", "body": "Fixed, thanks! \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/24997259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70480440", "body": "yes, it was shipped in a release. It was used in order to mono-symbolicate to work. We can keep it but it won't do anything. @kumpera what do you think, should we keep it? \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70480440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70603389", "body": "thanks for the input. In the new commits both `MONO_DEBUG=gen-compact-seq-points` and `--aot=gen-seq-points-file=<dir>` are still available but with deprecated warning.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/70603389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "krytarowski": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3379", "title": "Add NetBSD support in GetLogicalDriveStrings()", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/74008982", "body": "No. It will build on NetBSD and warn/error for others.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/74008982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ThadHouse": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3368", "title": "Fixes socket timeout on non-blocking Connect()", "body": "Previously, a non-blocking Connect() call using the IPAddress[] overload would block forever. This does not match either the mono Connect(IPEndPoint) overload or the .NET Core and Windows .NET Framework implementations, which throw the socket exception immediately on a Connect() error. This fixes that error, and allows for a timeout on the Connect() method.\n\nError reported at https://bugzilla.xamarin.com/show_bug.cgi?id=13416\n\nThis change is released under the MIT license.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dunati": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3309", "title": "[Runtime] Fixed several memory leaks", "body": "re-request for https://github.com/mono/mono/pull/3218\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3255", "title": "Mono cleanup", "body": "This patch aims to clean up some allocated memory when shutting down the runtime.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/69597109", "body": "The problem is that the system vasprintf allocates memory with malloc, which which is a problem if you then try to free that memory with a overridden g_free\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69597109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69598133", "body": "yes, g_getenv returns a g_malloc'd string on win32\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69598133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "schani": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3278", "title": "Bugs found with PVS Studio", "body": "Please check all of these.\n\nThe comments are obviously not meant to be merged, just to point out the issues.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3146", "title": "Fix internal allocator header size", "body": "The header is always just a pointer.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/427747", "body": "I think if we do need a memory barrier here at all (which I'm not sure we do), then what we need for ENTER_CRITICAL_REGION is a store-store one after the write, not before it, as mono_atomic_store_release() does.  From the GC point's of view no critical region store must happen in a thread before the IN_CRITICAL_REGION flag is set.  The non-critical region stores are not relevant.  Also, from the critical region's thread's point of view, no critical-region load must happen before the flag has been set, otherwise the GC could have interrupted in between.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/427747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "rhylaun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3215", "title": "Fix for http chuncked mode", "body": "I have discovered an issue that sending data with HttpListenerResponse using OutputStream.Write(buffer, offset, **0**) in chunked mode results in write timeout exception. That happens because of mono sending chuncked header and **crlf** without any data and another side takes it as end of stream according to [wiki](https://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example). Microsoft realization send nothing in that case.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/pulls/3206", "title": "fixed the bug that was preventing HttpWebRequest to go through digest authentication ", "body": "Fixed the bug that was preventing HttpWebRequest to go through digest authentication if authentication type wasn't specified. \nI have attached code example with comments that can reproduce problem under mono.\n[Program.zip](https://github.com/mono/mono/files/329940/Program.zip)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olegbelousov77": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/3048", "title": "Synchronous execution of asynchronous web api stack.", "body": "It covers including the following questions:\n\nhttp://stackoverflow.com/questions/33026799/mono-net-support-for-async-await\nhttp://stackoverflow.com/questions/37012143/mono-with-owin-authentication\nhttp://stackoverflow.com/questions/34834346/404-response-appended-to-webapi-response\nhttp://stackoverflow.com/questions/34629192/mono-the-view-index-or-its-master-was-not-found\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "razzfazz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/2876", "title": "use Interrupt instead of Abort to shut down handler thread", "body": "The only place where the handler thread should block is in the\nkqueue_notimeout() call; interrupting the thread should cause\nthat call to exit with EINTR, and allow the thread to exit.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gusmanb": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/2817", "title": "Disabled client certificate request for HttpConnection (HttpListener)\u2026", "body": "Enforcing HttpListener connections to validate client certificates by default render HttpListener unusable for most cases.\n\nIt was hardcoded to request the certificate, now it's disabled.\n\nIt should be extended to be configurable.\n\nAlso an small typo on x509 chain is corrected.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "manuel-sugawara": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/2771", "title": "Infinite loop on SSL handshake", "body": "While doing the SSL handshake if the server closes the connection then mono goes into an infinite loop.\n\nThe problem is in `RecordProtocol.cs`, when `EndRead` and `Read` from the Socket return 0, the resultingBuffer is set to a null value which is indistinguishable from the case when the record is incomplete. Therefore `SslClientStream:SafeEndReceiveRecord` simply assumes  that the record is incomplete and keeps trying to read the server hello over and over.\n\nThe solution is to throw an exception as in the `ReadRecodBuffer` (line 550) method when `Read` returns 0.\n\nMore information (and a test case to reproduce the problem) can be found in the bug report https://bugzilla.xamarin.com/show_bug.cgi?id=39626\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AvolitesMarkDaniel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/2728", "title": "Fixed sending the wrong packet length", "body": "In System.ServiceModel.Channels.NetTcp.TcpBinaryFrameManager it was incorrectly calculating the number of bytes required to represent the length of the argument list for certain ranges of values (between 128 bytes and 256 bytes)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gofman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/2639", "title": "[jit] Relax assembly checking for 64 bit targets to allow running mix\u2026", "body": "Relax assembly checking for 64 bit targets to allow running mixed-mode MSVC code.\n\nFixes [#37913](https://bugzilla.xamarin.com/show_bug.cgi?id=37913)\nMSVC generated mixed mode IL code is different for x64 and x86. Bug description has standalone app & test case illustrating the issue. \n\nA test case included in iltests.il in this patch bypasses actual checking function if ptr size is not 8 and should always succeed on 32 bit arch.\n\nThe patch is checking for SIZEOF_VOID_P in method_to_ir.c (original patch attached to the bug had apparently wrong check). There was already a comparison (SIZEOF_VOID_P == 8) in the code to allow I8 and PTR comparison operation for 64bit targets, so it looks like my patch just extends this approach to more cases.\n\nI would be grateful for comments on how this patch can be improved.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jpbruyere": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/2443", "title": "[Mono.Cairo] Add OpenGL texture Surface support ", "body": "Add Device class.\nAdd GLSurface class, created for texture.\nAdd Surface types\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "saper": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1984", "title": "check for iconv only once", "body": "It is enough to check for iconv\ndependencies once in the eglib/configure\n- just use the generated libtool\n  library file to automatically\n  add additional dependencies (if any).\n\nWhile here, make sue libeglib.a\nhas libraries returned by LTLIBTOOL\nas a libtool dependency.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vlomshakov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1910", "title": "Keventwatcher throws exceptions", "body": "FileSystemWatcher with KeventWatcher backend throws excpetions under MacOS (kernel 14.3.0).\nI added tests and straightforward fixes.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carlokok": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1581", "title": "This change introduces \"overlapping\" indexes for locals debug info in mo...", "body": "This change introduces \"overlapping\" indexes for locals debug info in mono for the runtime. The debug info format and the soft debugger have logic already that makes this work, the only thing missing was to make mono return the index of locals with debug info instead of just of just one item by index.\n\nThis change should be backward/forward compatible (ie older debugger/newer debugger and same for runtime).\n\nWhat this fixes:\nCode like\n\n```\nvoid test() {\n  {\n    int a = 0;\n    Console.WriteLine(\"Got \" + a);\n  }\n  {\n    int b = 0;\n    Console.WriteLine(\"Got \" + b);\n  }\n}\n```\n\nWhere \"a\" and \"b\" reuse the same local variable slot.\n\nBefore this change \"a\" will show as a debug entry when it's in that scope. And in the scope for \"b\" nothing is shown at all. After this change both show as they should.\n\nThis change is released under the MIT license.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tcptr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1344", "title": "[Microsoft.Build.Evaluation] Fix Project.DirectoryPath", "body": "Project.DirectoryPath should return the root directory for the related project.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lucianoc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1331", "title": "Update BaseCompareValidator.cs", "body": "Current Culture Specific Validation\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "psni": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1293", "title": "sql_variant", "body": "sql_variant reading ability\n\ntype BigNVarChar unsupported - reason:\ntcp data for sql_variant type BigNVarChar has max length 8000 and no info about it's real length\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "madrang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1283", "title": "Pull 1281 test only", "body": "Test add and changes of https://github.com/mono/mono/pull/1281\n\n```\nTests run: 10018, Failures: 32, Not run: 99, Time: 130.704 seconds\n\nTest Case Failures:\n1) MonoTests.System.Security.Cryptography.HashAlgorithmTest.Hash_DisposedException : An unexpected exception type was thrown\nExpected: System.ObjectDisposedException\n but was: System.Security.Cryptography.CryptographicUnexpectedOperationException : No hash value computed.\nat System.Security.Cryptography.HashAlgorithm.get_Hash () [0x0001b] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/System.Security.Cryptography/HashAlgorithm.cs:133\nat MonoTests.System.Security.Cryptography.HashAlgorithmTest.Hash_DisposedException () [0x0000b] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/Test/System.Security.Cryptography/HashAlgorithmTest.cs:518\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00054] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:230\n\n2) MonoTests.System.Security.Cryptography.HashAlgorithmTest.Hash_NoExternalChanges :   ExternalChanges\n  Expected: not < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 >\n  But was:  < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 >\n\nat MonoTests.System.Security.Cryptography.HashAlgorithmTest.Hash_NoExternalChanges () [0x00051] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/Test/System.Security.Cryptography/HashAlgorithmTest.cs:509\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00054] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:230\n\n3) MonoTests.System.Security.Cryptography.HMACMD5Test.Hash_DisposedException : An unexpected exception type was thrown\nExpected: System.ObjectDisposedException\n but was: System.Security.Cryptography.CryptographicUnexpectedOperationException : No hash value computed.\nat System.Security.Cryptography.HashAlgorithm.get_Hash () [0x0001b] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/System.Security.Cryptography/HashAlgorithm.cs:133\nat MonoTests.System.Security.Cryptography.HashAlgorithmTest.Hash_DisposedException () [0x0000b] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/Test/System.Security.Cryptography/HashAlgorithmTest.cs:518\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00054] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:230\n\n4) MonoTests.System.Security.Cryptography.HMACMD5Test.Hash_NoExternalChanges :   ExternalChanges\n  Expected: not < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 >\n  But was:  < 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 >\n\nat MonoTests.System.Security.Cryptography.HashAlgorithmTest.Hash_NoExternalChanges () [0x00051] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/Test/System.Security.Cryptography/HashAlgorithmTest.cs:509\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00054] in /home/madrang/WorkSpace/CSharp/Online/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:230\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "egorovmv": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1265", "title": "Fixed #16892", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RyanMelenaNoesis": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1244", "title": "Correct creation of SecurityKeys", "body": "Correct creation of SecurityKeys when provided key is null.  Generate random 128-bit symmetric key as specified in class remarks ( http://msdn.microsoft.com/en-us/library/hh137856(v=vs.110).aspx ).\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ventero": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1215", "title": "[xbuild] Honor MONO_GAC_PREFIX in AssemblyResolver.", "body": "This commit adds the GAC directories specified in MONO_GAC_PREFIX to the AssemblyResolver's implicit search path, allowing it to automatically resolve binaries that are in secondary GACs.\n\nThis patch assumes that the order in which the GAC paths are specified does not matter. From what I can tell, the AssemblyResolver always uses the newest file if duplicates are found, so this assumption should be valid - but I might be missing something.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattleibow": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/1170", "title": "Mono.Data.Sqlite for Windows Store Apps", "body": "Adding support for ADO.NET and SQLite for ADO.NET to Windows Store Apps:\n- Silverlight for Windows Phone 8.0/8.1\n- Windows Runtime for Store 8.0/8.1 and Windows Phone 8.1\n\nChanges:\n- Added new pre-processor directives:\n  -- WINDOWS_STORE_APP for any Windows device build\n  -- WINDOWS_PHONE for Silverlight for Windows Phone\n  -- NETFX_CORE for Windows Runtime\n- Removed WinForms designer attributes\n- Removed Binary serialization (SerializableAttribute and ISerializable)\n- Added C++ project to build the managed sqlite3.dll bindings (DllImport is unavailable in Silverlight for Windows Phone)\n- Removed Microsoft.SqlServer.Server and System.Data.SqlClient namespaces due to Mono.Data.Tds being unavailable at this time\n- Improvised support for IConvertible by checking the actual type\n- Using the String.Compare overload that accepts StringComparision\n- Added XML serialization attributes to SqlTypes\n- Removed LCID support from SqlString\n- Removed the old NUnit method of using the Assertion base class for tests\n- Removed the NUnit [ExpectedException] attribute as this hides any erroneous exceptions of the same type\n- Using StringComparision.OrdinalXXX instead of StringComparision.InvariantCultureXXX\n- Using using statements when creating XmlReaders/Writers instead of try/catch/finally\n\nTo Do:\n- Add back MS SQL Server  support\n- Complete SqlString LCID\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "soju-hananim": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/999", "title": "Allows CustomErrors redirect attribute to specify paths w/QueryStrings.", "body": "Currently, with the following configuration, `error_page` is generated as `~/error.aspx?type=404?aspxerrorpath={REQUEST_PATH}`:\n\n```\n<customErrors mode=\"RemoteOnly\" defaultRedirect=\"~/error.htm\">\n    <error statusCode=\"404\" redirect=\"~/error.aspx?type=404\" />\n    <error statusCode=\"500\" redirect=\"~/error.aspx?type=500\" />\n</customErrors>\n```\n\nThe proposed fix will only append `aspxerrorpath` to the QueryString when a custom QueryString isn't provided.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AxlPr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/919", "title": "Fixes TimeZoneInfo.Local on Windows", "body": "Fixes bug #11817. There is a problem with the build where Linux code is\ncompiled for the Windows build due to the LIBC flag being set.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wasabii": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/745", "title": "FilledIn, Required and Editable should all be locked if the character is...", "body": "... a Literal. Otherwise user entry is expected, but not provided, causing MaskFull and MaskCompleted to always return false.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "knocte": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/643", "title": "[HttpConfigurationSystem] Proxy to previous system if section is empty", "body": "If the new HttpConfigurationSystem was put in place, there was no way to\naccess the old system for accessing non-System.Web settings, even though\nthe ChangeConfigurationSystem method was providing it as a return value.\n\nProxying to previous system fixes bxc#11972:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=11972\n\n(A unit test is added as well.)\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/164640", "body": "I created a new assembly for these tests because this assembly needs to be an .exe instead of a .dll (to be able to call itself through S.D.Process), so I didn't want to be too disruptive to change the extension of the assembly of the current test suite.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/164640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/221206", "body": "Good point, it sounds like that way it could work too.\n\nBut feel free to work on it, unfortunately I cannot spend more working hours on this :(\n\nSorry for my late reply.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/221206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "miraclespain": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mono/mono/pulls/436", "title": "Preserving state of CheckBoxList across postbacks", "body": "In NET 4.0 values are rendered in checkbox lists however when recovering their state the hardcoded value \"on\" is currently used in CheckBoxList, this commit has a testcase for this situation and a fix to the CheckBoxList class, furthermore a few testcase is expanded because they used the hardcoded \"on\" value to. They are differed so they use the value itself if NET_4_0 is set.\n\nAll tests in System.Web pass using both net_2_0 profile and default on OpenSuse\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409", "body": "Great work.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/4570409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418", "body": "This is an important set of fixes to get into Mono for F# support\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25295418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350", "body": "Yes, that's correct. The .fsproj formulation supported by this change is suitable for both F# 3.0 and F# 3.1.\n\nSeparately, we will work on getting the F# 3.1 language updates into the code drop,\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25298350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256", "body": "Hi @knocte, xbuild needs to \"do the same thing\" as MSBuild. Since MSBuild sets VisualStudioVersion, then xbuild needs to set it too. The question is what it gets set to by default and what the ramifications of that are.  The guiding principle should be to do what MSBuild does by default.\n\nWhy does this matter to F#? As of F# 3.1 (== VisualStudioVersion 12) , the F# SDK is located in \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nFor F# 3.0 it was located in \n\n```\n$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets\n```\n\nI agree it is frustrating that the F# 3.1 targets file has moved to a location that includes the word \"VisualStudio\" let alone \"VisualStudioVersion\". But that's how it is - from the Microsoft perspective F# releases are aligned with VisualStudio releases (although in-place updates of F# may happen).\n\nThe relevant part of F# 3.1 (and upgraded F# 3.0) project files is: \n\n```\n<Choose>\n  <When Condition=\"'$(VisualStudioVersion)' == '11.0'\">\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </When>\n  <Otherwise>\n    <PropertyGroup>\n      <FSharpTargetsPath>$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets</FSharpTargetsPath>\n    </PropertyGroup>\n  </Otherwise>\n</Choose>\n```\n\nFor fsharp/fsharp I think this means we have to fix the Mono/Linux/Mac installation of F# 3.1 to lay down the targets at\n\n   $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v12.0\\FSharp\\Microsoft.FSharp.Targets\n\nAnyway, the commit under discussion needs to at least ensure that VisualStudioVersion is set, preferably to the same value used by MSBuild by default. \n\nCheers\nDon\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25553256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099", "body": "Hi @ovatsus \n\nI wonder If we should just drop the setting of VisualStudioVersion. MSBuild seems to set it depending on the actual minimal VS installed on the machine - you get 10.0 with VS2010 installed, 11.0 with VS2012, 12.0 with VS2013 etc.  \n\nIf xbuild continues to leave VisualStudioVersion  unset, then we can adjust the F# install to put a copy of the targets at  the path that we get if VisualStudioVersion  is empty, i.e. \n\n```\n$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets\n```\n\nwhich on Linux becomes \n\n```\n/usr/lib/mono/xbuild/Microsoft/VisualStudio/v/FSharp/Microsoft.FSharp.Targets\n```\n\nThis isn't too bad, as it is suitable for VisualStudio assets that on Linux/Mac are referenced independent of Visual Studio version.\n\nI'll submit an adjustment to the F# install on Linux/Mac to put the Targets in the above location.  \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25669099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705", "body": "OK, @knocte is this PR good to go? The fixes are becoming increasingly important for F# users of xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25690705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984", "body": "The F# parts of this problem are tracked at https://github.com/fsharp/fsharp/issues/163\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/25709984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902", "body": "Two questions\n- any idea when a new mono containing this fix will be available? 3.2.4 doesn't seem to have it?\n- I added a Xamarin Studio bug to cover the same problem in the IDE, I presume it is a different code path which needs to be fixed. https://bugzilla.xamarin.com/show_bug.cgi?id=16085\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28140902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331", "body": "@knocte Very sorry. We must be more careful.\n\nAnd I understand why GetAssemblyIdentity and some other classes left unimplemented for several years.\n\nIn the Mono's rules, I think I must re-send this pullreq after the original [GetAssemblyIdentity.cs](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs) is published with a full implementation.\n\nWithout knowing how the `GetAssemblyIdentity` works, I don't know how to implement it...\n\n@akoeplinger My codes are written by only looking [this post on Nemerle forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) and some from [referencesource-beta.microsoft.com](http://referencesource-beta.microsoft.com/#Microsoft.Build.Tasks.v4.0/Microsoft/Build/Tasks/GetAssemblyIdentity.cs).\n\nI've not used Reflector, Monodis, or MonoDevelop or other reverse engineering tools (even though I mentioned about these in [Nemerle Forum](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/L-g7RYdiCLkJ)).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962", "body": "``` diff\n- Reflector, Monodis, or MonoDevelop or other reverse engineering tools\n+ Reflector, Monodis, nor MonoDevelop nor other reverse engineering tools\n```\n\nSorry my not being good at English\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36126962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523", "body": "@akoeplinger but the original code on [this post](https://groups.google.com/d/msg/nemerle-en/xNrjBBqtoYE/ynSgKYqoXlsJ) might be from ILSpy\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36127523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428", "body": "It is true what you said.\nI've looked and based on the disassembled code anyway.\nI close this thanks :(\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36128428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921", "body": "Hi, I wrote an [unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) and I've re-implemented that from scratch without looking any MS's code.\nHere: https://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nThis implementation is based on [the document in MSDN](http://msdn.microsoft.com/en-us/library/ms164296.aspx), and I made it to have parameters named `Version`, `PublicKeyToken`, and `Culture`. \nAnd also, I made `PublicKeyToken` well-formed by looking original MSBuild's output of the unit test,\n\nbut I don't know how to get trusted...\nYes, we can't forget what we once seen.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996", "body": "Oh,\n\n```\nbase.Log.LogErrorWithCodeFromResources (\"GetAssemblyIdentity.CouldNotGetAssemblyName\", new object[] {} )\n```\n\nis not good.\n\nIt comes from my memory, which is the original MS's code.\nIt should be re-writed.\n\nIs\n\n```\nLog.LogErrorFromException (ex);\n```\n\nOk?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36456996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657", "body": "I see. I've made it so.\nhttps://gist.github.com/lambdalice/5087a9799d1f8f1020d3\n\nbut... I don't know how to include [this unit test](https://github.com/lambdalice/GetAssemblyIdentityTest) into Mono sources.\n\nI think it should be located [here](https://github.com/mono/mono/tree/master/mcs/class/Microsoft.Build.Tasks/Test) but it can't be tested like [CreateItemTest.cs](https://github.com/mono/mono/blob/master/mcs/class/Microsoft.Build.Tasks/Test/Microsoft.Build.Tasks/CreateItemTest.cs)...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/36511657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351", "body": "Sorry, invalid account. I'll make a new pull request.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/59161351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584", "body": "@kumpera, @migueldeicaza,\n\nFWIW, this was the only stopper I encountered while building mono on FreeBSD 10.1 x86 and ia64, fresh installed with llvm+clang v3.7: https://github.com/dotnet/roslyn/issues/2844#issuecomment-129221304. \nPlease consider this PR for merging.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/129377584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/131878514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562", "body": "@alexrp, will this patch be available in mono v.next tagged release code? FreeBSD support is varying between 99-100% with current master. These small but tricky patches stick it to 100% and above. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141413562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031", "body": "@atsushieno, can this land in next release of mono?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/141217031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355", "body": "@saper, seems like the exception is coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024, which has a caller that implicitly appear at one instance in the call stack you provided which leads to https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1274 (which implicitly relies on your changes in `ParseTZBuffer` method).\n\nLooking the the reference resource for `CreateAdjustmentRule` method: http://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,43a6662ca1445f1f,references, it seems like `startDate` and `endDate` are assigned to the `AdjustmentRule()` object as is and the object is returned. Which means there is something weird going on with `time_types` etc. that is somehow confusing the `TimeSpan` and further affecting the dst_end/dst_start `.Year` resolution. \n\nMight be a good idea to assert dst_start/end for equality before calling `CreateAdjustmentRule` (or write to console/file etc.) to find out if the `.Year` differs.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135808355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876", "body": "As noted in my previous comment, it is `InvalidTimeZoneException` coming from https://github.com/saper/mono/blob/9ad5fc5/mcs/class/corlib/System/TimeZoneInfo.cs#L1024\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/135814876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877", "body": "@akoeplinger, once the assertion failures are sorted out, will it make sense to have a submodule to dotnet/coreclr tests directory so CI can also test the future PRs. Probably with a thin wrapper to translate error codes.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/134935877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulcbetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035", "body": "(This diff is hard to read, but it simply removes the `using` statement and fixes the code indentation)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098", "body": "Arguably, you could push this onto the client and say, \"You must cancel the token _and_ Dispose the `HttpMessageResponse.Content` to truly cancel the network connection\", but this ends up being fairly difficult in practice since most people will end up using `ReadAsString` which doesn't offer cancelation, and I suspect the vast majority of people would mess this up.  Activating the cancelation token that you pass into SendAsync should close the underlying network connection, regardless of whether the call has returned or not. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27158098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761", "body": "You're technically correct but this is much more difficult to program against. Now there are two separate ways to cancel the same underlying network connection that was created in this operation (the other being to dispose the HttpContent), depending solely on time. This makes for race-conditiony code that has been pushed up to every client of HttpClient, instead of having a single, guaranteed way to cancel the underlying network connection as long as it's open.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27266761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653", "body": "@akoeplinger No clue\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27356653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803", "body": "So, here's an even more compelling reason that the existing behavior is Problematic, it also makes handling cancellation very difficult for _clients_ of HttpClient. Consider the following code:\n\n``` cs\npublic Task<string> DownloadTwoUrls(string file1, string file2, CancellationToken ct)\n{\n    var resp1 = await myHttpClient.Get(\"/foo/\" + file1, ct);\n    var content1 = resp1.Content.ReadAsStringAsync();\n\n    // ct was **Disposed** because of the Disposal of the linked token, ct is now trashed\n    // The second half of this is now silently uncancelable. \n    var resp2 = await myHttpClient.Get(\"/foo\" + file2, ct);\n    return content1 + (await resp2.Content.ReadAsStringAsync());\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/27457803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931", "body": "@marek-safar (Sorry about the blast from the past), It actually does, in `UnregisterLinkedTokens`: https://github.com/mono/mono/blob/a31c107f59298053e4ff17fd09b2fa617b75c1ba/mcs/class/corlib/System.Threading/CancellationTokenSource.cs#L269\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/30955931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569", "body": "Hm. Apparently my princess is in another castle.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32076569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bratsche": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/45455847", "body": "Thanks @migueldeicaza. I have one other question: I'm calling `fcntl` in here, but I'm passing the `F_GETPATH` flag to it. This is a BSD-specific flag still (at least, it's on Mac and when I Googled I found it in a FreeBSD header as well).  Is this something we'd want to put into the Mono.Posix Syscall class, or should it stay like this since it's not really portable?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/45455847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/56871508", "body": "@alexischr I finally got the creation/deletion tests working with that last commit. The main issue for the create test seemed to be that as soon as I created and setup the FSW I would create the file almost immediately and in most cases that was too soon. `Thread.Sleep` fixes it.\n\nThe delete test has the same issue and solution, but also needed to sleep between creating the file and setting up the FSW.\n\nIt sucks to have these sleeps in there slowing down our test suite, but I can't find a better solution. If you can, have at it. :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/56871508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/56921252", "body": "@alexischr I added a test for changing files now. It works, but it's using `Process.Start (\"touch\", path)` so it's not portable. I couldn't get it to work any other way (the other ways I tried are commented out below). Maybe I was doing something wrong, or maybe there's another bug in `StreamWriter` or something? If you have any suggestions on this test I would appreciate them.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/56921252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/60698268", "body": "This is on master now.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/60698268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/305002344", "body": "As an example, here's an open source project that had to remove this from their config: https://github.com/OctopusDeploy/Issues/issues/2107", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/305002344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/322828893", "body": "Thanks!", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/322828893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/331200824", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/331200824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/331201446", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/331201446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/331203784", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/331203784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/331537483", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/331537483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/331675302", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/331675302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/332951683", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/332951683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/333156383", "body": "build pkg", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/333156383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/334200187", "body": "@alexischr Thanks, updated to remove xz", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/334200187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "johan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/339333319", "body": "On github, @johan does not notify who you think it does.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/339333319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alistair": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/28086808", "body": "yes, done on mailing list as well.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/28086808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/31971569", "body": "Thanks for the comments.\n\nI will get a unit test together in the next couple of days ( before the end of the weekend lets say ). and fix the commit message with the license comment.\n\nAs for kumpera's question about CopyFile failures.   I implemented it this way as you could run into the case where the assembly exists but the actual copy fails, due to running out of hdd space as an example.  If you can find the assembly then IIHO any failure in actually copying it would be a runtime exception.  Also currently if I can't copy the file I return the orig filename, doing so with a file that did actually exist (but failed to copy) would end up locking the original file.  I would need to investigate whether I could return NULL in this case then.  But i'm not religious on this point so if you like I can change it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/31971569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/32093038", "body": "Amended the pull request to include unit tests.and MIT license comment.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/32093038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "EdwardBetts": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/281309495", "body": "@akoeplinger: Done.", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/281309495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "duncanmak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mono/mono/issues/comments/20763007", "body": "If we're okay with not using libgdiplus (mono's implementation) on Windows, then this patch is ready to go.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/20763007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/issues/comments/253824168", "body": "build\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/issues/comments/253824168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1145825", "body": "I think this commit broke the build on Windows?\n\n```\nmake[7]: Entering directory `/sources/mono/mcs/class/System.Json'\nmake all-local\nmake[8]: *** No rule to make target `../../../external/aspnetwebstack/src/RS.cs', needed by `../../class/lib/net_4_0/System.Json.dll'.  Stop.\nmake[8]: Entering directory `/sources/mono/mcs/class/System.Json'\nmake[8]: Leaving directory `/sources/mono/mcs/class/System.Json'\nmake[7]: *** [do-all] Error 2\n../../build/rules.make:133: recipe for target `do-all' failed\n```\n\nhttp://wrench.mono-project.com/Wrench/WebServices/Download.aspx?workfile_id=111447\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1145825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1258311", "body": "It looks like `CLOCK_MONOTONIC` is not available on OS X (the build machines run 10.6.8)\n\n```\nhandles.c: In function '_wapi_handle_init':\nhandles.c:338: warning: implicit declaration of function 'pthread_condattr_setclock'\nhandles.c:338: warning: nested extern declaration of 'pthread_condattr_setclock'\nhandles.c:338: error: 'CLOCK_MONOTONIC' undeclared (first use in this function)\nhandles.c:338: error: (Each undeclared identifier is reported only once\nhandles.c:338: error: for each function it appears in.)\nmake[4]: *** [handles.lo] Error 1\n```\n\nThe whole log is available here: https://wrench.mono-project.com/Wrench/ViewLane.aspx?lane_id=10&host_id=8&revision_id=9213\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1258311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1719158", "body": "This build doesn't work in the build bots. It doesn't compile on my Lion machine running Xcode 4.4 with the latest Command Line Tools installed also.\n\n```\nduncan@dynamic-050:mono (master)$ ./autogen.sh --enable-nls=no --prefix=/Library/Frameworks/Mono.framework/Versions/2.11.4 --with-ikvm=yes --with-moonlight=no --build=i386-apple-darwin11.2.0 --enable-loadedllvm\nRunning libtoolize...\nglibtoolize: putting auxiliary files in `.'.\nglibtoolize: copying file `./ltmain.sh'\nglibtoolize: putting macros in AC_CONFIG_MACRO_DIR, `m4'.\nglibtoolize: copying file `m4/libtool.m4'\nglibtoolize: copying file `m4/ltoptions.m4'\nglibtoolize: copying file `m4/ltsugar.m4'\nglibtoolize: copying file `m4/ltversion.m4'\nglibtoolize: copying file `m4/lt~obsolete.m4'\nRunning aclocal -I m4 -I .  ...\nconfigure.in:3287: warning: macro `AM_COND_IF' not found in library\nconfigure.in:3288: warning: macro `AM_COND_IF' not found in library\nconfigure.in:3289: warning: macro `AM_COND_IF' not found in library\nconfigure.in:3290: warning: macro `AM_COND_IF' not found in library\nRunning autoheader...\nRunning automake --gnu  ...\nRunning autoconf ...\nconfigure.in:3288: error: possibly undefined macro: AM_COND_IF\n      If this token and others are legitimate, please use m4_pattern_allow.\n      See the Autoconf documentation.\n**Error**: autoconf failed.\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1719158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1719164", "body": "```\n\nduncan@dynamic-050:mono (master)$ aclocal --version\naclocal (GNU automake) 1.10\nWritten by Tom Tromey <tromey@redhat.com>\n       and Alexandre Duret-Lutz <adl@gnu.org>.\n\nCopyright (C) 2006 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1719164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jbevain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/116030", "body": "Short version: as per Paolo's request.\nLong version: I started a discussion by asking why the branch cost was so high, wondering why we couldn't inline properties such as:\n\nget { return is_foo ? foo : bar; }\n\nAnd if we couldn't include the displacement in the cost rather. Paolo said there was no need for that, just to reduce the branch cost which was set to high.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/116030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/138529", "body": "Well, the test case is the unit test which passes on .net. But I'll revert this one as well as the runtime support, as it triggers regressions: #635349 and #605936. Will have to investigate more.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/138529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139373", "body": "Actually it's \u00abjust\u00bb a regression introduced by my change, and it's not specific to moonlight. I'm working on fixing it for everyone. Thanks for reporting the issue.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139401", "body": "This should be fixed in master by 85c0976c3d913ba16a13d44159f8e7591732df56. Could you try to run the moon-unit test with it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/164638", "body": "Is it possible to have that better integrated in the current system? Currently run-test will trigger two nunit launch, even if FIXTURE is specified.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/164638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/164676", "body": "You could make a fixture that will compile the test assembly using codedom and run its tests as part of run-test test suite.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/164676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/177752", "body": "s/method/field, no?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/177752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/215843", "body": "You can avoid this alltogether by simply using ca.AttributeType.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/215843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/640035", "body": "I don't think this is correct. You do want to define NET_4_0 for 4.\\* profiles for Cecil.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/640035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/914886", "body": "That probably doesn't work: generic method names don't contain a back tick indicating their generic arity. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/914886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/915125", "body": "I don't think that works either. Name here should simply be a MonoMethod\\* name, and not a constructed reflection full name.\n\nI don't think there's a way to accurately fallback if we can't query its \u201cgenericness\u201d. I'd throw.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/915125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1230188", "body": "That's pretty cool, what did you do to mirror the commits from upstream to her? I usually run update.rb, but we could update it to mirror the commits as well.\n\nAlso, could you point me to the code that break with the removal of the MethodReturnType.Parameter setter and GlobalAssemblyResolver? I can fix them and make sure mcs/class/Mono.Cecil and jbevain/cecil are 1:1.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1230188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/24995865", "body": "hrm :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/24995865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ajorg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121447", "body": "This commit breaks the build http://build.mono-project.com/ViewLane.aspx?lane_id=62&host_id=23&revision_id=90989\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/122189", "body": "This commit breaks the build:\n\nSystem.Collections.Concurrent/BlockingCollection.cs(54,17): error CS0246: The type or namespace name `ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\nSystem.Collections.Concurrent/BlockingCollection.cs(55,17): error CS0246: The type or namespace name`ManualResetEventSlim' could not be found. Are you missing a using directive or an assembly reference?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/128154", "body": "This commit breaks the build.  It appears you neglected to add a file:\n\nmake[8]: **\\* No rule to make target `System.ServiceModel.Discovery.Version11/IDiscoveryProxyContract11.cs', needed by`../../class/lib/net_4_0/System.ServiceModel.Discovery.dll'.  Stop.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/128154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144680", "body": "MCS     [net_4_0] Microsoft.CSharp.dll\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1502: The best overloaded method match for `Mono.CSharp.Expression.MemberLookup(Mono.CSharp.ResolveContext, Mono.CSharp.TypeSpec, Mono.CSharp.TypeSpec, string, int, Mono.CSharp.Expression.MemberLookupRestrictions, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,56): error CS1503: Argument`#6' cannot convert `bool' expression to type`Mono.CSharp.Expression.MemberLookupRestrictions'\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(55,25): error CS0825: The contextual keyword `var' may only appear within a local variable declaration\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,66): error CS0841: A local variable`expr' cannot be used before it is declared\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1502: The best overloaded method match for `Mono.CSharp.BoolConstant.BoolConstant(bool, Mono.CSharp.Location)' has some invalid arguments\n/home/builder/lanes/mono-master-test/2bded0cb/source/mono/mcs/class/lib/net_4_0/Mono.CSharp.dll (Location of the symbol related to previous error)\nMicrosoft.CSharp.RuntimeBinder/CSharpIsEventBinder.cs(58,39): error CS1503: Argument`#1' cannot convert `object' expression to type`bool'\nCompilation failed: 6 error(s), 0 warnings\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/144716", "body": "sgen-gc.c:202:37: fatal error: metadata/sgen-cardtable.h: No such file or directory\nPlease remember to dist new files. Fixed in 5cab581.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/146235", "body": "Something is wrong w/ this commit http://build.mono-project.com/WebServices/Download.aspx?workfile_id=5124512\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/146235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/173289", "body": "Fixed dist breakage in 3d877ae (README.tests was in DISTFILES)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/173289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/121594", "body": "It looks like grendel forgot to backport the configure.in portion of 8de7037b16020bb919579c75e3be981152a37ff8\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/121594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/144697", "body": "@eno\n\nIt looks like git didn't cherry-pick the fakepoll.h.  Fixed\n\n@gonzalop\n\nsupport cannot dep on mono.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/161599", "body": "This commit breaks the MonoTouch and MonoDroid profiles, since it doesn't guard the usage of System.Configuration for our 2.1 based hosts.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/161627", "body": "You probably want:\n\nifneq (2.1, $(FRAMEWORK_VERSION))\n\nand then to introduce a monotouch_bootstrap_System.Transactions_test.dll.sources which #include's a new monotouch_System.Transactions_test.dll.sources which doesn't have the dependent files in it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/161628", "body": "Its very easy to test, configure your mono --with-monotouch=yes\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/169122", "body": "Its pretty trivial to fix sgen, we just need to store the tid in the SgenThreadInfo struct and introduce a sgen_thread_kill function, the reason I have the g_assert there for now is we need to do other tuning before sgen will be ready on android, so there isn't much point doing this work at this stage until we have the cycles to tune sgen to embedded platforms.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/169122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/255176", "body": "Bleah, I copied my pseudo patch not the one I tested.\n\nFixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/255176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/312035", "body": "Don't we still return PlatformID.Unix on OSX?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/312035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/312042", "body": "Oh nevermind, I see how this works.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/312042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/759740", "body": "Couldn't this just be a direct call to find_seq_points as well?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/759740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "garuma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/122230", "body": "Fixed in af30815fc99adaa315c2\n\nSorry\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/122230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/133975", "body": "I think that the change here is responsible for blocking the corlib test suite with Semaphore tests still only on 32bits. I can't verify that myself (everything here is x86-64) but I'm guessing from the commit log and wrench results.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/133975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/218615", "body": "Fixed in later commit, thanks for the catch.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/218615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/662361", "body": "A reason for that barrier (inlining issue?) cause afaict it shouldn't be necessary\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/662361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/662375", "body": "Unless you use that code somewhere else than Task, the way it is used shouldn't need the extra check as single is filled before completed\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/662375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/662385", "body": "No need for that barrier (same in Reset) normally\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/662385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1552676", "body": "Break System.Web tests https://wrench.mono-project.com/Wrench/WebServices/Download.aspx?workfile_id=769315\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1552676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1552678", "body": "Break corlib tests https://wrench.mono-project.com/Wrench/WebServices/Download.aspx?workfile_id=769103\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1552678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1554975", "body": "More compilation issues https://wrench.mono-project.com/Wrench/WebServices/Download.aspx?workfile_id=771809\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1554975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1554990", "body": "See https://github.com/mono/mono/commit/2ff00fae018a18c30d8f2cc251306bfec770879a#commitcomment-1552676\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1554990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1620699", "body": "Doesn't matter\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1620699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "spouliot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/135556", "body": "Got a test case for it ? you added 2 unit tests but marked them [Category(\"NotWorking\")]\nhttp://lists.ximian.com/archives/public/mono-patches/2010-August/175767.html\n\nActually the instance case got the NotWorking removed later... but the static case (still NotWorking in mcs) fails a unit test in moonlight which works on SL\nRemoving lines 193-196 fix this (as far as moonlight is concerned)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/135556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/137401", "body": "This commit breaks the moonlight profile (and likely other similar profiles) since moonlight depends on gmcs (before using smcs) to build corlib\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/137401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/139451", "body": "Fixed, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/139451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/172145", "body": "This commit is causing a lot (hundreds) of crashes in peverify while fuzzing because it cannot handle an empty/blank AssemblyName structure (where aname->name is NULL).\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x08052786 in mono_stringify_assembly_name (aname=0x8273160) at assembly.c:760\n760     const char *quote = g_ascii_isspace (aname->name [0]) ? \"\\\"\" : \"\";\n(gdb) p aname\n$1 = (MonoAssemblyName *) 0x8273160\n(gdb) p aname->name\n$2 = 0x0\n(gdb) bt\n#0  0x08052786 in mono_stringify_assembly_name (aname=0x8273160) at assembly.c:760\n#1  0x08066224 in mono_assembly_name_from_token (image=0x82691b8, type_token=33554436) at class.c:6547\n#2  0x080665ad in mono_class_get_full (image=0x82691b8, type_token=33554436, context=0x0) at class.c:6642\n#3  0x080667de in mono_class_get (image=0x82691b8, type_token=33554436) at class.c:6713\n#4  0x080a07c7 in do_mono_metadata_parse_type (type=0xbfffe5b8, m=0x82691b8, container=0x0, transient=0, ptr=0xb7fd8009 \"\\005(\", rptr=0xbfffe604)\n\n```\nat metadata.c:3158\n```\n#5  0x0809db93 in mono_metadata_parse_type_internal (m=0x82691b8, container=0x0, mode=MONO_PARSE_TYPE, opt_attrs=0, transient=0,\n\n```\nptr=0xb7fd8007 \"\\022\\020\\005(\", rptr=0xbfffe67c) at metadata.c:1613\n```\n#6  0x0809dced in mono_metadata_parse_type_full (m=0x82691b8, container=0x0, mode=MONO_PARSE_TYPE, opt_attrs=0, ptr=0xb7fd8007 \"\\022\\020\\005(\",\n\n```\nrptr=0xbfffe67c) at metadata.c:1666\n```\n#7  0x080a0433 in mono_metadata_parse_generic_inst (m=0x82691b8, container=0x0, count=1, ptr=0xb7fd8007 \"\\022\\020\\005(\", rptr=0xbfffe6bc) at metadata.c:2967\n#8  0x080a054b in do_mono_metadata_parse_generic_class (type=0xbfffe71c, m=0x82691b8, container=0x0, ptr=0xb7fd8007 \"\\022\\020\\005(\", rptr=0xbfffe700)\n\n```\nat metadata.c:3003\n```\n#9  0x080a09b6 in do_mono_metadata_parse_type (type=0xbfffe71c, m=0x82691b8, container=0x0, transient=0, ptr=0xb7fd8004 \"\\022U\\001\\022\\020\\005(\",\n\n```\nrptr=0xbfffe724) at metadata.c:3196\n```\n#10 0x080a3d1a in mono_type_create_from_typespec (image=0x82691b8, type_spec=452984833) at metadata.c:5248\n#11 0x0806495d in mono_type_retrieve_from_typespec (image=0x82691b8, type_spec=452984833, context=0x0, did_inflate=0xbfffe7b4, error=0xbfffe7ec)\n\n```\nat class.c:5850\n```\n#12 0x08064a86 in mono_class_create_from_typespec (image=0x82691b8, type_spec=452984833, context=0x0, error=0xbfffe7ec) at class.c:5887\n#13 0x08066510 in mono_class_get_full (image=0x82691b8, type_token=452984833, context=0x0) at class.c:6629\n#14 0x080a1ccc in mono_metadata_interfaces_from_typedef_full (meta=0x82691b8, index=33554438, interfaces=0xbfffe94c, count=0xbfffe950, heap_alloc_result=0,\n\n```\ncontext=0x0) at metadata.c:4011\n```\n#15 0x0806338d in mono_class_create_from_typedef (image=0x82691b8, type_token=33554438) at class.c:5291\n#16 0x080664cb in mono_class_get_full (image=0x82691b8, type_token=33554438, context=0x0) at class.c:6623\n#17 0x080667de in mono_class_get (image=0x82691b8, type_token=33554438) at class.c:6713\n#18 0x080a07c7 in do_mono_metadata_parse_type (type=0xbfffeb58, m=0x82691b8, container=0x0, transient=0, ptr=0xb7fd6a17 \"\\a\\006\\025\\022i\\001\\022\\020\\b \",\n\n```\nrptr=0xbfffeba4) at metadata.c:3158\n```\n#19 0x0809db93 in mono_metadata_parse_type_internal (m=0x82691b8, container=0x0, mode=MONO_PARSE_FIELD, opt_attrs=17, transient=0,\n\n```\nptr=0xb7fd6a15 \"\\022\\030\\a\\006\\025\\022i\\001\\022\\020\\b \", rptr=0xbfffec04) at metadata.c:1613\n```\n#20 0x0809dced in mono_metadata_parse_type_full (m=0x82691b8, container=0x0, mode=MONO_PARSE_FIELD, opt_attrs=17,\n\n```\nptr=0xb7fd6a15 \"\\022\\030\\a\\006\\025\\022i\\001\\022\\020\\b \", rptr=0xbfffec04) at metadata.c:1666\n```\n#21 0x0806aec8 in mono_field_resolve_type (field=0x827cf5c, error=0xbfffec74) at class.c:9395\n#22 0x0805a63a in mono_class_setup_fields (class=0x827ce94) at class.c:1426\n#23 0x0805aade in mono_class_setup_fields_locking (class=0x827ce94) at class.c:1528\n#24 0x08068932 in mono_class_get_fields (klass=0x827ce94, iter=0xbfffedd0) at class.c:7931\n#25 0x0811ad54 in verify_class_fields (class=0x827ce94) at verify.c:5828\n#26 0x0811b336 in mono_verifier_verify_class (class=0x827ce94) at verify.c:5994\n#27 0x0806191a in mono_class_init (class=0x827ce94) at class.c:4616\n#28 0x08050c19 in verify_image_file (fname=0xbffff2a4 \"bin/System.Net.sigsegv.10239.dll\") at pedump.c:466\n#29 0x0805150d in main (argc=4, argv=0xbffff044) at pedump.c:693\n\n(gdb) p *aname\n$3 = {name = 0x0, culture = 0x0, hash_value = 0x0, public_key = 0x0, public_key_token = '\\000' <repeats 16 times>, hash_alg = 0, hash_len = 0, flags = 0, \n  major = 0, minor = 0, build = 0, revision = 0}\n\nReplacing the new checks\n-       const char *quote = g_ascii_isspace (aname->name [0]) ? \"\\\"\" : \"\";\n-       const char *quote = aname->name && g_ascii_isspace (aname->name [0]) ? \"\\\"\" : \"\";\n  will fix the crashers, unless we want to return something else in the particular case ?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/172145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/579942", "body": "I like the change but it needs to be tested (or adjusted in this case).\n\n2) MonoTests.System.IO.FileTest.Delete_File_ReadOnly : An unexpected exception type was thrown\nExpected: System.UnauthorizedAccessException\n but was: System.IO.FileNotFoundException : Could not find file \"/var/folders/fI/fIDK1klFH6yDR8NRb2cq-++++TI/-Tmp-/MonoTests.System.IO.Tests/DeleteReadOnly\"\nat System.IO.File.SetAttributes (System.String path, FileAttributes fileAttributes) [0x0001c] in /Users/sebastienpouliot/git/mono/mcs/class/corlib/System.IO/File.cs:427\nat MonoTests.System.IO.FileTest.Delete_File_ReadOnly () [0x0003e] in /Users/sebastienpouliot/git/mono/mcs/class/corlib/Test/System.IO/FileTest.cs:507\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d5] in /Users/sebastienpouliot/git/mono/mcs/class/corlib/System.Reflection/MonoMethod.cs:226\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/579942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/981227", "body": "This breaks Cecil ability (and all the associated tooling) to read/write debugging symbols. e.g.\n\nCould not link assemblies: System.ArgumentException: An element with the same key already exists in the dictionary.\n  at System.Collections.Generic.Dictionary`2[System.Int32,Mono.CompilerServices.SymbolWriter.MethodEntry].Add (Int32 key, Mono.CompilerServices.SymbolWriter.MethodEntry value) [0x00163] in /Users/poupou/git/mono/mono/mcs/class/corlib/System.Collections.Generic/Dictionary.cs:450 \n  at Mono.CompilerServices.SymbolWriter.MonoSymbolFile.read_methods () [0x00072] in /Users/poupou/git/mono/mono/mcs/class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs:594 \n  at Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetMethodByToken (Int32 token) [0x00019] in /Users/poupou/git/mono/mono/mcs/class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs:608 \n  at Mono.Cecil.Mdb.MdbReader.Read (Mono.Cecil.Cil.MethodBody body, Mono.Cecil.Cil.InstructionMapper mapper) [0x0000c] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil.Mdb/Mono.Cecil.Mdb/MdbReader.cs:71 \n  at Mono.Cecil.Cil.CodeReader.ReadMethodBody () [0x000a6] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil.Cil/CodeReader.cs:109 \n  at Mono.Cecil.Cil.CodeReader.ReadMethodBody (Mono.Cecil.MethodDefinition method) [0x0001f] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil.Cil/CodeReader.cs:66 \n  at Mono.Cecil.MetadataReader.ReadMethodBody (Mono.Cecil.MethodDefinition method) [0x00000] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/AssemblyReader.cs:1983 \n  at Mono.Cecil.MethodDefinition.<get_Body>m__34 (Mono.Cecil.MethodDefinition method, Mono.Cecil.MetadataReader reader) [0x00000] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/MethodDefinition.cs:141 \n  at Mono.Cecil.ModuleDefinition.Read[MethodDefinition,MethodBody] (Mono.Cecil.MethodDefinition item, System.Func`3 read) [0x00018] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/ModuleDefinition.cs:815 \n  at Mono.Cecil.MethodDefinition.get_Body () [0x00035] in /Users/poupou/git/mono/mono/mcs/class/Mono.Cecil/Mono.Cecil/MethodDefinition.cs:141 \n  at Mono.Linker.Steps.MarkStep.ProcessMethod (Mono.Cecil.MethodDefinition method) [0x00163] in /Users/poupou/git/mono/mono/mcs/tools/linker/Mono.Linker.Steps/MarkStep.cs:817 \nFailed to link /Developer/MonoTouch/Source/monomac/samples/AnimatingViews/bin/Debug/AnimatingViews.exe\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/981227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gonzalop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/144644", "body": "mono-poll.[ch] have a mono_poll() that can be based on either select() or poll() depending on the system...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/144644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/158405", "body": "If HttpResponse is used after ReleaseResources is called, there is a real problem right there. This patch just hides one of the symptoms...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/158405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/158738", "body": "Why not? Should we add null-checks to every internal method that expects the parameters to be checked somewhere else? I would leave things as they were and find the actual bug. The invariant here is that once ReleaseResources() has been called nobody should hold a reference. The point of releasing those resources is to free memory after all...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/158738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/159118", "body": "It sloppy to call ReleaseResources and then try to use resources released. Again, that is the actual bug that this patch is hiding.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/159118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/160859", "body": "Done in http://github.com/mono/mono/commit/7698d421b244116bf5b4ea3e588ee5584a690df1\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/160859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/215462", "body": "93483a4b fixed this on 2010-11-18\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/215462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/515605", "body": "This patch broke the built. I have reverted it.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/515605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/639374", "body": "Yeah, I had to fix a few problems because of that. Any suggestion? :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/639374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/639506", "body": "Yes! Perfect. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/639506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/669227", "body": "Robert, I am going to change that to do the same as Environment.IsRunningOnWindows. https://github.com/mono/mono/pull/185\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/669227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pruiz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/161605", "body": "I have no clue about what you mean.. can you give me a hint so I can fix it?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/161608", "body": "I guess you mean using an ifeq/endif at Makefile to avoid referecing System.Configuration on such profiles, but which conditions should I test on ifeq?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/161634", "body": "Thanks.. jb just asked something simiar at irc.. I'm testing it right now.. ;)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/161643", "body": "Doesnt the 'MOBILE' define used when building for _non_ mobile profiles seems a bit confusing? (Maybe I'm missing something..)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/161645", "body": ";)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/161707", "body": "Looks like Makefile should be modified too.. swapping '/define:MOBILE' from the last one MCS_FLAGS to the first, so it ends up like:\n\n<pre>\nifdef MOBILE_PROFILE    \nLIB_MCS_FLAGS = /r:$(corlib) /r:System.dll /define:MOBILE\nelse\nLIB_MCS_FLAGS = /r:$(corlib) /r:System.dll /r:System.Configuration.dll\nendif\n</pre>\n\n\nInstead of the current changes.. Am I correct?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/161707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "koush": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/169118", "body": "Awesome! Cleaner way to do what I proposed. :) Thanks!\nI've actually not tried sgen on Android; but I did notice pthread_kill calls in there. I'll take a look and see what needs fixing.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/169118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/174285", "body": "Oh. This is handy. You can connect to Android devices via a combination of \"adb forward\" and initiating a debugger connection against localhost. It'll remove the need for wifi.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/174285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/332287", "body": "seems sizeof would have prevented this\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/332287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "robert-j": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/178441", "body": "s/Strng/String/ at line 357\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/178441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/574215", "body": "I agree with everything you wrote, but the check was there because the DeleteFile API behaves like this. Moreover, System.IO.File.Delete() is documented to not delete RO files.\n\nLet's hope that some poor soul's code isn't depending on this semantic ;)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/574215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/668994", "body": "Gonzalo, do we really need another platform check?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/668994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/668997", "body": "There are no null checks for strProxyServer, strProxyOverrride. Maybe we should use Registry.GetValue(\"...\", String.Empty) to get a sane default.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/668997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/809964", "body": "This is breaking the Windows build because $(CURDIR) is a cygwin path (e.g. /cygdrive/c/local/src/mono/mcs/...), and jay, as a a non-cygwin app, is tripping up on this path.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/809964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/915058", "body": "Name.EndsWith(\"]\")\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/915058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "alanmcgovern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/206704", "body": "Hey, this didn't fix the moonlight crasher when running with sgen. Still getting this issue. (Note, i monobinned it because it screws up when displaying on github)\n\nhttp://monobin.com/__m2f10e43b\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/206704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/598123", "body": "Shouldn't it be:\n\nif (value == null)\n    throw new ArgumentNullException (\"value\");\n\nChecking the existing value is pointless, we should be checking the new value.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/598123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/598125", "body": "Also should everywhere we assign to 'name' field (i.e. the constructors) perform the same validation?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/598125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1150181", "body": "you need \"git submodule update --init --recursive\" to be 100% safe and it should be executed before every build just in case the submodule version has been modified. The mono root level configure.in does:\n\n # If this is a git checkout and not a source tarball, update the submodules\nif test -d .git; then\n        git submodule update --init --recursive\nfi\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1150181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1238948", "body": "You need to contact the maintainer of mono for your distro. The tarballs for all the releases (including 2.11.1) are available here. The maintainer just has to put them through your distros packaging system in order to get you a newer version of mono.\n\nhttp://download.mono-project.com/sources/mono/\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1238948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1481511", "body": "This commit broke compilation of xbuild projects for commandlines like:\n\nxbuild ngit/ngit.sln /t:NGit\n\nCould you issue a new pull request with some additional unit tests covering the change to ensure that it does what you wanted?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1481511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1552421", "body": "Did the original patch that enos commit attempted to fix come with unit tests? If not maybe we should just back it out as it is definitely not doing what it is supposed to be doing.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1552421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1787819", "body": "The main reason was i didn't want to spend ages hacking through the makefiles to get the solution compiling as part of the build. I can commit the sln/csproj/cs files to git and we can figure out the integration after.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1787819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "darbio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/214822", "body": "There is an error here.\n\n`Console.Error.WriteLine (\"(info) Auto generated encryption keys not saved: {0}\", e);`\n\nshould be\n\n`Console.Error.WriteLine (\"(info) Auto generated encryption keys not saved: {0}\", ex);`\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/214822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "thomasgoldstein": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/218570", "body": "The edit of the first comment doesn't look intentional (\"its own value\" -> \"itimeout own value\").\nLooks like you did a mass text replace to turn \"ts\" parameters into \"timeout\". :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/218570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/220417", "body": "Typo: \"This requests\" -> \"This request\".\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/220417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/233450", "body": "Oops. I think this is due to line-ending differences. :\\\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/233450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/323946", "body": "For what it's worth, you got the wrong bug number in the commit comment. Should be 683290.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/323946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/453159", "body": "More typos:\n\"The major different\" -> \"The major difference\"\n\"a type different that this\" -> \"a type different than this\" (or better: \"different from this\")\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/453159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/534172", "body": "Nit: first letter of const name should be uppercased (even if private), following C# naming conventions.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/534172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/564842", "body": "Typo: scenerios -> scenarios\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/564842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/597129", "body": "Shouldn't it be the other way around? Ie: shouldn't the null check be for value, rather than name?\n\"ArgumentNullException\" implies the passed argument is null, while you're not actually checking the passed value, but a private field.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/597129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/668528", "body": "Typo here.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/668528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1483538", "body": "It's already in 2.11.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1483538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1494142", "body": "Why not just use String.IsNullOrEmpty(var), as already done elsewhere in the same method?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1494142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1496926", "body": "I have not noticed any regression. This might be something on your end. Feel free to file a bug report with all the details.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1496926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1705582", "body": "This patch indentation is wrong (uses spaces rather than tabs).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1705582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1714577", "body": "This is the exact same fix that Steven Boswell proposed on the mailing list not long ago. I told him that the fix got committed, and he had to say about it:\n\n\"it's not good -- the main reason I haven't submitted a new patch #10, or pushed for its commitment, is that I've found a lot of shutdown bugs in mono-winforms, and was going to wait until I'd found and fixed them all.\n\nThat particular \"fix\" is a hack; the real solution involves checking if GDI+ has been disposed of before trying to use it.\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1714577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jpobst": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/219614", "body": "This commit caused a test to fail:\n\n```\n1) MonoTests.System.Windows.Forms.DataBinding.CurrencyManagerTest2.TestInsertRowAtCurrent :   2\n  String lengths are both 112. Strings differ at index 91.\n\n  Expected: \"...ged (index = -1)\\n3: PositionChanged (to 2)\\n4: Binding.Format\\n\"\n  But was:  \"...ged (index = -1)\\n3: PositionChanged (to 1)\\n4: Binding.Format\\n\"\n  -------------------------------------------------------^\n```\n\nhttp://build.mono-project.com/WebServices/Download.aspx?workfile_id=7271965\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/219614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/219618", "body": "This commit caused a test to fail:\n\n```\n2) MonoTests.System.Windows.Forms.TextBoxTest.ReadOnly_BackColor_NotSet :   #D2\n  Expected: Color [Window]\n  But was:  Color [Control]\n```\n\nhttp://build.mono-project.com/WebServices/Download.aspx?workfile_id=7290531\n\n(Probably the removal of line 375.)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/219618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "monoman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/219668", "body": "Should this file instruct how to get sources from github instead of svn?\n\nIt still says:\n\n```\nsvn co svn+ssh://USER@mono-cvs.ximian.com/source/trunk/mono\nsvn co svn+ssh://USER@mono-cvs.ximian.com/source/trunk/mcs\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/219668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mhutch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/236121", "body": "This will not work - see https://bugzilla.novell.com/show_bug.cgi?id=515570\n\nSee the .cctor of [MonoDevelop's PropertyService](https://github.com/mono/monodevelop/blob/master/main/src/core/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs) for a solution\n\nAlso, we need to make xbuild's PcFileCache respect the External/pkgconfig dir, and sync the other PcFileCache and LibraryPcFileCache fixes from MD to xbuild.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/236121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/236784", "body": "Yup, I considered suggesting that but I think it's best to ensure consistency.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/236784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/282527", "body": "Shouldn't this be \"armv6\"?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/282527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/454653", "body": "Also similiar -> similar\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/454653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/462714", "body": "This will always be false. On MacOS we always return PlatformID.Unix for historical reasons.\n\nhttps://bugzilla.novell.com/show_bug.cgi?id=433108\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/462714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/462716", "body": "Why try to reflect into MonoTouch on desktop MacOS?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/462716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1290121", "body": "Maybe we could add back Dispose but mark it obsolete?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1290121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1628925", "body": "Won't this make it impossible to drill down into members of the value?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1628925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1629076", "body": "We should revert the DebuggerBrowsable parts of this patch. I filed a bug to fix the issue better on the SDB side: https://bugzilla.xamarin.com/show_bug.cgi?id=6282\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1629076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "txdv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/255128", "body": "mono_thread_detach requires one argument since 2004-03-15\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/255128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/255186", "body": "A typo? Really? 15 characters which form a perfectly well function call with a proper name is a typo? :D\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/255186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/255192", "body": "Well commit messages are part of the development and I'm just not very happy with this one.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/255192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/295810", "body": "Very nice.\nA lot of my unsafe pointers in the 2.8 and 2.10 are recognized as marshaled structures. Is that already?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/295810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/467185", "body": "https://github.com/mono/mono/pull/131\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/467185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/480578", "body": "Just for future reference, linquize, open up \"an issue\", I can then attach a \"pull request\" then it can get marked as \"closed\".\nNo need to write 4 times the same thingy :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/480578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/69568271", "body": "style nit: there should be a space after g_memdup, it is a function after all\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/69568271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jacksonh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/255189", "body": "Commit notes should only be used to discuss development.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/255189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "tjphilpot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/311947", "body": "sem_timedwait doesn't compile for me on MacOSX. Should this be mono_sem_timedwait?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/311947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ischyrus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/312068", "body": "I am also having issues with this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/312068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dickp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/322524", "body": "Don't know what happened here, but this merge is my sgen-enabling Solaris patch (configure.in, mono/metadata/sgen-archdep.h, mono/utils/mono-sigcontext.h)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/322524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "follesoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/352047", "body": "And so the journey begins - pure awesomeness - looking forward to getting this onto the iPhone in MonoTouch 5 (?) ;) \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/352047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sehe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/460052", "body": "I just noted something else here; I was looking at the code due to this [StackOverflow answer by Marc Gravell](http://stackoverflow.com/questions/6570545/whats-the-most-performant-way-to-compare-two-values-for-equality/6570570#6570570).\n\nFrom inspecting the IL generated in `GenericEqualityComparer<T>.Equals` I spotted boxing occurring (due to comparing to null?). Wouldn't it be even better to have a separate default `GenericStructComparer<T>` implementation to be used for value-types that implement `IEquatable`?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/460052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/626721", "body": "Miguel... wouldn't it appear that the assebmlyArgs are getting passed nicely to the ServiceRunner but subsequently ignored on the OnStart call? Or is that by design?\n\nI found that while answering http://stackoverflow.com/questions/7636395/passing-command-line-arguments-to-mono-service\n\nI have a suggested edit over at my fork (against master): https://github.com/sehe/mono/commit/4273a6e14f723301e7c9e7cedaece45e1b156864\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/626721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/668518", "body": "Cheers Miguel! Great to see open source working in the most practical sense of the word\n\nGood luck with all the changes going from Novell to Xamarin\n\nSeth\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/668518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "myeisha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/460701", "body": "Then one would need a `GenericClassEqualityComparer<T> where T : class, IEquatable<T>` and `GenericStructEqualityComparer<T> where T : struct, IEquatable<T>`. One case wouldn't need null checking, the other wouldn't need boxing.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/460701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/821264", "body": "Then it is broken. Perhaps that should be checked, too? ;)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/821264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "toshok": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/463781", "body": "so we still need this call to add_method?  it looks like it's going to cause problems doing it twice.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/463781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jstedfast": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/464129", "body": "probably not, just didn't think to do it\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/464129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/464141", "body": "yea, I've fixed this a different way\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/464141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/464144", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/464144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/914945", "body": "Have a better idea for a fallback?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/914945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/914964", "body": "Hmm, is there a better way? This is just a fallback, so it doesn't have to be perfect.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/914964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "linquize": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/467105", "body": "should be in lower case \"utf_16le\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/467105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/467106", "body": "should be in lower case \"utf_32le\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/467106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/467107", "body": "should be in lower case \"utf_32be\"\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/467107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/480327", "body": "already fixed in master\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/480327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/480328", "body": "already fixed in master\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/480328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/480329", "body": "already fixed in master\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/480329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/480330", "body": "already fixed in master\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/480330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/820706", "body": "What if the GetEnumerator() cannot be called twice?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/820706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/822009", "body": "Also, what if the result set is different for the second time?\n\nCan we simply add a try-catch block between the foreach loop?\n\n``` C#\np (output, \"{ \");\n\ntry {\nforeach (object item in (IEnumerable) result) {\nif (i++ != 0)\np (output, \", \");\n\nPrettyPrint (output, item);\n}\n}\ncatch { }\n\np (output, \" }\");\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/822009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/822092", "body": "Anyway, which solution is better to handle exception during the iteration?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/822092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/872806", "body": "Will this commit be cherry-picked to 2.10 branch?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/872806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/910428", "body": "Please at least add for zh-HK, Chinese (Hong Kong S.A.R., China)\nlcidCodes[0xc04] = 950;\n\nso varchar, char will not fail\n\nFor completeness, could you gen all LCID mapping from following? It is correct?\nvar laCultures = CultureInfo.GetCultures(CultureTypes.AllCultures).OrderBy(a => a.TextInfo.LCID)\n                .Select(a => string.Format(\"lcidCodes[0x{0:x}] = {1};  //{2}, {3}\", a.TextInfo.LCID, a.TextInfo.ANSICodePage, a.TextInfo.CultureName, a.EnglishName)).ToArray();\n            string lsCulture = string.Join(Environment.NewLine, laCultures);\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/910428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1238482", "body": "But when will \"2.10.10\" be released? Many Linux distributions only ship official release version of mono, not from branch head mono-2-10\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1238482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1240330", "body": "But 2.10.x is considered stable, as bug/security fixing release. 2.10 branch has no release for 4 months! According to past experience, distros like debian/ubuntu delayed more than 1 year before 2.10 is shipped because many new modules are added since 2.8 (still using 2.6.7). Unlike bug fixing release, they cannot simply build the package using the same script for 2.11. Lots of efforts are required to include the new modules in the package. May be the next version they ship would be 2.14.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1240330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1259885", "body": "Upgrading config file still not implemented for 7 years?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1259885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1259892", "body": "Upgrading config file still not implemented for 7 years?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1259892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1259900", "body": "Still not implemented for 7 years???\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1259900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1401988", "body": "Does anyone fail to compile the class libraries? The C# compiler crashed with mono_method_to_ir() in stack trace. I filed Xamarin bug 5429 for this.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1401988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1407432", "body": "Why return the first window in the list if the type is not NativeWindow?\nWhen type is not NativeWindow, the type cannot be ControlNativeWindow neither.\n\nNativeWindow.FromHandle (hWnd) calls NativeWindow FindFirstInTable (IntPtr handle),\nSee Control.ControlNativeWindow class, in\nControl ControlFromHandle(IntPtr hWnd), it calls NativeWindow.FromHandle (hWnd)\nBut try to cast it as ControlNativeWindow\nwindow = (ControlNativeWindow)NativeWindow.FromHandle (hWnd);\nTherefore, InvalidCastException may be thrown if type does not match.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1407432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1444549", "body": "SQL Server 2012 does not require .NET 4.5, so the conditional should not be there.\nDoes -1 also work in SQL Server 2008 R2? Do we need to get server version?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1444549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1445064", "body": "You can install both SQL Server 2008 R2 and 2012 on the same machine. They can run side-by-side. It is important not to break compatibility to older version of SQL Server.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1445064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1445205", "body": "It is not .NET 4.5 specific. Even .NET 2.0 has the same behavior to set isReadOnly = false.\nPlease remove #if NET_4_5 directive.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1445205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1445512", "body": "I found this behaviour in .NET's implementation of System.Xml 2.0.0.0.\nisReadOnly is a private field so it can be added / changed anytime.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1445512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1446316", "body": "This is mono 2.10, should not have 4.5 stuff\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1446316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1447482", "body": "Oh, I see, your \"readonly\" here only refers to \"Async\" property. (4.5) You may rename it as something like \"readonlyAsync\"\nBut .NET implementation (starting from 2.0) has another \"readonly\" field which refers to all other properties\n(such as IgnoreComments, IgnoreWhitespace, ValidationFlags, etc...) should be readonly or not.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1447482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1667507", "body": "Long waited mono 2.10.10 !!!\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1667507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1754737", "body": "moonlight is dead so smcs in obsolete.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1754737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dragan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/537329", "body": "Do you plan on including this in the 2-10 branch?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/537329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ahjohannessen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/643874", "body": "I wondered if this is making it into the 2.10 branch?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/643874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/645284", "body": "Cool :)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/645284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/878617", "body": "Are you sure you want to do a\n\nnewInstance = instance\n\n?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/878617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "konrad-kruczynski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/663705", "body": "Great! So quickly done.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/663705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Shamar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/732432", "body": "Something is still broken here. try with\n\ne = () => new Node() { Name = \"test\", Parent = { Name = \"Parent\" }, Values = { new Node(), new Node() } };\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/732432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/732433", "body": "@marek-safar something is still broken: the expression\n\ne = () => new Node() { Name = \"test\", Parent = { Name = \"Parent\" }, Values = { new Node(), new Node() } };\n\nstill gives different compilation errors:\n\ngtest-etree-27.cs(50,38): error CS0826: The type of an implicitly typed array cannot be inferred from the initializer. Try specifying array type explicitly\ngtest-etree-27.cs(50,27): error CS1502: The best overloaded method match for `System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, params System.Linq.Expressions.MemberBinding[])' has some invalid arguments\n/opt/mono/lib/mono/2.0/System.Core.dll (Location of the symbol related to previous error)\ngtest-etree-27.cs(50,21): error CS1502: The best overloaded method match for`System.Linq.Expressions.Expression.Lambda<System.Func<Node>>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])' has some invalid arguments\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/732433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/733674", "body": "@marek-safar here is the new report: http://bugzilla.xamarin.com/show_bug.cgi?id=2103\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/733674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "viniciusjarina": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1118031", "body": "Ok\nI will see this\n\nOn Thursday, March 22, 2012, Atsushi Eno <\nreply@reply.github.com>\nwrote:\n\n> This commit broke the build.\n> \n> http://wrench.mono-project.com/Wrench/WebServices/Download.aspx?work_id=111681&filename=System.Runtime.Serialization-4.5.log\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/mono/mono/commit/32b939f496383a47c535cef1b38424c5a848681f#commitcomment-1117031\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1118031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/comments/1118657", "body": "I am so sorry.\nI tested each test separated.\n\nThis will fix the build. https://github.com/mono/mono/pull/254\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1118657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sinm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1148093", "body": "Just figured out a bug:\n\n```\nclass foo {public bool bar;}\nvoid test() {\n    string foo_json = \"{\\\"bar\\\" : true\\n}\";\n    foo foo_obj = (new JavaScriptSerializer).Deserialize<foo>(foo_json);\n}\n```\n\nThrows \"Invalid json primitive : true\" while there is trailing whitespace just after the 'true'.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1148093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "shana": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1179922", "body": "Bah, lost the commit message.\n\nThis is a merge commit of:\n\n84c2edcfa8: __ComObject.cs (Initialize) : Ensure that the static ctor has been called\n28525ec041: cominterop.cs : Unit test to ensure that the static ctor has been called\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1179922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "martinpotter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1203826", "body": "This should include a check for `pos >= s.Length`, as int.Parse now throws an IndexOutOfRangeException for int.Parse(\"100\", System.Globalization.NumberStyles.Any).\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1203826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "spencerhakim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1284582", "body": "This commit broke class definitions in REPL for partial/multi-line inputs, since the class name is added to DefinedNames before the full input is available. Easily tested with\n\n```\nclass Test{\n}\n```\n\nwhich reports\n\n```\n(1,8): error CS0101: The namespace `global::' already contains a definition for `Test'\n(1,8): (Location of the symbol related to previous error)\n```\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1284582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Zeex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1352336", "body": "typo?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1352336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "robwilkens": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1407436", "body": "Thanks for cleaning this up.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1407436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1555721", "body": "It is probably obvious and i probably shouldn't say this, but from the above, it looks like \"/\" is being used for parameters, when i think in general something like \"-\" or \"--\" or both is more often used for this reason, at least on most unix programs i've used.  I don't know whether changing that is reasonable at this stage (a lot probably depends on xbuild working 'as is').  I am only looking at the above code sample and may be missing something bigger picture, though.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1555721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "carlosalberto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1441415", "body": "Forgot to mention it: this change was approved by Marek Habersack ;-)\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1441415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "KindDragon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1482987", "body": "Please someone backport this changes to 2.11 or even to 2.10\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1482987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mono/mono/comments/1484304", "body": "Cool. Waiting for beta verion\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1484304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "JamesB7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1496875", "body": "I couldn't help but notice that in the most recent Mono trunk, menus and toolbars now lack XP-type styling (they all look like Windows 2000). Any idea if this change is why?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1496875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1496976", "body": "Aha, it appears I had done git pull before this patch. It is now fixed.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1496976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1607118", "body": "Shouldn't the second constructor set the length?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1607118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ianbattersby": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1673282", "body": "Just to add another voice to the chorus above, this is causing me great pain at the moment and seems stalled. The problem is easily fixed but am unsure of the original motivation for the \"invalid switch\" logic that caused this. Anyone handling this?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1673282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/comments/1673324", "body": "Understood. Leave it with me.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1673324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Mblkolo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mono/mono/comments/1881501", "body": "BUG?\nShould the domain cookies version 1 REALLY starts with dot?\nMy code crashes on this\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/comments/1881501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ntherning": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/80648128", "body": "I believe we should define the other `HAVE_<family>_WINAP_SUPPORT` defines to 0 here as well.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80648128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80648198", "body": "I believe we should define the other `HAVE_<family>_WINAP_SUPPORT` defines to 0 here as well.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/80648198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895422", "body": "Use MONO_EMPTY_SOURCE_FILE macro here?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77433547", "body": "Thanks for taking a look! You are right, there seems to be a bug in the `configure.ac` in the root. It never passes on any defines at all to `eglib/configure`, like it does when invoking `libgc/configure`. Mingw does have the required header file and knows about `SHGetKnownFolderPath()` but only when `_WIN32_WINNT` is set to at least Vista. I'll see if I can sort that out too...\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/77433547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895454", "body": "Use MONO_EMPTY_SOURCE_FILE macro here?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895473", "body": "Use MONO_EMPTY_SOURCE_FILE macro here?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895502", "body": "Use MONO_EMPTY_SOURCE_FILE macro here?\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/84895502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "henricm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/97089054", "body": "It should actually work already. I will test changing this.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97089054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97806135", "body": "Thanks for the input. I've updated now, please see if it looks better.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/97806135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "oittaa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/146727040", "body": "I'm not 100% sure, but my understanding is that if you have glibc >= 2.25 and Linux kernel older than 3.17, getrandom will return -1 and set errno to ENOSYS and AC_CHECK_FUNCS won't catch that.\r\n\r\nEDIT: And I think this implementation might work with other Unix-like platforms as well, because it doesn't test anything Linux specific.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146727040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146731237", "body": "OK, that sounds reasonable.\r\n\r\nCan you clarify what `HAVE_CRYPT_RNG` does in `configure.ac`? I just assumed it's required for something, but I can't figure it out.\r\n\r\nWe probably shouldn't define `HAVE_CRYPT_RNG` if `AC_CHECK_FUNCS` finds `getrandom`, because we don't know at that point if it really works.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/146731237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "abbradar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/103899128", "body": "Ouch, thanks for noticing. Fixed.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/103899128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tritao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/41525807", "body": "It does exist in Glib, see https://developer.gnome.org/glib/2.28/glib-Byte-Arrays.html#g-byte-array-set-size.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/41525807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "cherusker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/131704912", "body": "Usually, I trust the man pages - I guess that's a safe bet? In addition, it also makes a lot of sense that these strings are immutable; the custom string buffer will only be used for personalised messages.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/131704912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "deplinenoise": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/2954505", "body": "Yeah, you're right. I figured most code (including the one in libgc) uses `volatile` anyway so I put it in the test too.\n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/2954505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "angeloc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/68930286", "body": "~~Yes, I know. While here when `__GLIBC__` is not defined it mimics the behaviour of a modern libc, in exceptions-arm.c instead I had the problem that sigcontext was defined elsewhere, so removing the include fixed the problem.~~\nI have to be really tired today! \nThe meaning of the patches here is to NOT include `<asm/sigcontext.h>` because it's not needed on musl.\nHere is not included why when `__GLIBC__` is not defined we are on the TRUE banch of the if and the nested if `if 2 == __GLIBC__ && 0 == __GLIBC_MINOR__` is simply false, so in the end `<asm/sigcontext.h>` will not be included. \n", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/68930286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jkotas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mono/mono/pulls/comments/114201579", "body": "Which \"standard\" is this referring to ? I do not think there is one that requires the strict behavior.", "reactions": {"url": "https://api.github.com/repos/mono/mono/pulls/comments/114201579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}