{"_default": {"1": {"jrgcubano": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/385", "title": "Update to NHibernate 5+ and net framework", "body": "", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/386", "title": "Update NHibernate and net framework", "body": "Implements #385\r\nReferences #383 #365 #381 \r\n\r\nFirst of all, \r\n\r\nThank you all the contributors for maintaining this project for so many years. It has been amaizing to be able to use it.  \ud83d\udc4d \r\n\r\nI needed too urgently to use the project with the the lastest NHibernate, so I have updated the project to the lastest version of NHibernate and projects to the new world of .net.\r\n\r\nI think I speak for many when saying that the project should not die. I am open to sharing the project administration and help with its updates from now on if necessary. You can give me access to the repo and I can configure the required steps to integrate this PR.\r\n\r\nI have tried everything with an \"Unofficial\" fork version of the whole process (Cake, AppVeyor, Nuget, etc) in my account. [jrgcubano fluent-nhibernate github](https://github.com/jrgcubano/fluent-nhibernate)\r\n\r\n ## General updates:\r\n\r\n### Projects:\r\n- Updated to SDK csproj style\r\n- TargetFramework: net461.\r\n### NHibernate: \r\n- Update to lastest version (5.0.3)\r\n### Tests and Specs\r\n- Nunit 3+: new runners and update all tests.\r\n- MachineSpecifications 0.12+: new runners and update all specs.\r\n### Build system: \r\n- Cake build: Moved to Cake system because ripple is not longer maintained. We can implement any needed task easily in the feature.\r\n- Nuget package and publish.\r\n- Github Release Manager: It allows us to automate the creation of releases and publication on github.\r\n- AppVeyor as CI/CD. We can use teamcity also if necessary. Just need VS2017 image or netcore2.0 and set the powershell step.\r\n\r\n** Note: When NHibernate upgrade the project to NetStandard and NetCore, it will be a matter of small changes to update the projects and the build pipeline.\r\n\r\nIn case the PR be well received and can be taken into account to accept it. We need some steps to follow and enviroment vars to be defined on appveyor by the repo owner and minor badges changes.\r\n\r\n### AppVeyor steps:\r\n- Appveyor.yml: definition already created.\r\n- Add the repo to appveyor\r\n- Required enviroment vars:\r\n   - GITHUB_USERNAME: jagregory or other with repo access\r\n   - GITHUB_TOKEN:  We need a token with almost full access (read, write, create releases, create release notes, etc).\r\n   - NUGET_API_URL: https://www.nuget.org/api/v2/package\r\n   - NUGET_API_KEY:\r\n- Accept PR on master, increase git version with a tag (maybe v2.1.0)\r\n- Define github known labels and attach this ones to issues, so we can group notes on automatic relases (feature, bug, improvement, breaking change, documentation, technical debt). \r\n\r\n### Pending:\r\n- Coverage and publish to coveralls with Cake task.\r\n- Generate docs with Cake task.\r\n- Update build wiki documentation\r\n- Implement NHibernate new features on other PR.\r\n\r\n@jagregory @chester89 Please, let me know what you think about all these changes.\r\n\r\nThanks.\r\n  \r\n  \r\n  \r\n  ", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160631292", "body": "I tend to think that it is better to use the idea of resilient builds. We should always know what version we are using. What do you think?\r\n\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160631292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160631344", "body": "Nice! I'll wait a bit for someone else to pronounce with code reviews and then I'll fix what's necessary. Thank you\r\n  ", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160631344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160640382", "body": "Sounds good to me", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160640382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160640342", "body": "Not at the beginning. So I think we can safely remove the dependency from tests and example projects. \ud83d\udc4d \r\n  ", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160640342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "iiian": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/384", "title": "Possible to get support for Fluent mapping class constructors with parameters?", "body": "For instance, I'd like to be able to create some class:\r\n\r\n```\r\npublic class MyClassMap : ClassMap<MyType>\r\n{\r\n   public MyClassMap(object argumentOne, object argumentTwo)\r\n   {\r\n      // leverage arguments to further customize creation of fluent mapping.\r\n   }\r\n}\r\n```\r\n\r\nUnderstand if this is an unachievable design constraint.\r\n\r\nThis is an issue because I have an issue with not being able to do this.", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MKiCD": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/383", "title": "Fluent-NHibernate does not work with the current NHibernate (5.0)", "body": "NHibernate 5.0 is released since October 2017! Certainly with great improvements.\r\nI asked one of the developers here about the risk to use NH 5 with Fluent and he found out, that the current fluent-nhibernate does not compile in this combination.\r\nInitially I was surprised that the fluent nuget added NH 4 to my project, where NH5 was already present.\r\nI think some people besides me would be happy to see this winning combination (FL-NH-5)!", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/383/reactions", "total_count": 14, "+1": 14, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phiree": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/380", "title": "confused exception message when  SubclassMap duplicated  map  a property of baseclass.", "body": "```\r\nentity-----------------\r\n class Base\r\n {\r\n    public string Id{get;set;} \r\n    public string Name{get;set;}\r\n}\r\nclass MyClass:Base\r\n{\r\n    public int Age{get;set;}\r\n}\r\nmapping----------------\r\nclass BaseMap:ClassMap<Base>\r\n{\r\n     Id(x=>x.Id);\r\n    Map(x=>x.Name);\r\n}\r\nclass MyClassMap:SubClassMap<MyClass>\r\n{\r\n    Map(x=>x.Name);   <---------------------Wrong in runtime.\r\n}\r\n\r\n```\r\n\r\nthis incorrect map throw  System.ArgumentOutOfRangeException . it is confused. \r\nit maybe \" don't mapping same property of base class\".,,", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mwpowellhtx": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/378", "title": "Add Sql Server LocalDb support", "body": "Hello,\r\n\r\nDon't know if this is a covered use case or not.\r\n\r\nI'd like to determine how to connect with an ***MsSqlLocalDb***. Am I able to do so using, for example, [*MsSql2012*](http://github.com/jagregory/fluent-nhibernate/blob/1dff2abe031adf7caeccdbb4c134c3937672cb2b/src/FluentNHibernate/Cfg/Db/MsSqlConfiguration.cs) configuration? Or do I need another [*dialect*](http://github.com/nhibernate/nhibernate-core/blob/af6129e0bd8eca887ab7925c223a6dba7175d201/src/NHibernate/Dialect/MsSql2012Dialect.cs)?\r\n\r\nNever mind more up to date Sql Server dialects (i.e. to 2014, or perhaps even 2016, if necessary); however, I'm not in a position to be upgrading those in the near future.\r\n\r\nAny suggestions?", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/372", "title": "SetupConventionFinder and IConventionFinder do not implement IList", "body": "Whatever should be the underlying type, say ``IConvention``, then ``IList<IConvention>`` should be implemented. I don't know why it wouldn't be.", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/371", "title": "Add comments to SetupConventionFinder and IConventionFinder", "body": "", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/357", "title": "Instruct NHibernate how NOT to delete base class record", "body": "I made a design decision in my database to delete a base class table record via after delete trigger on the child class table record. However, what I am finding is that NHibernate first deletes the child record, which is correct, but then also deletes, or attempts to delete, the now-deleted base class record.\n\nAt minimum I need to somehow instruct, perhaps via the `Extends<BaseClass>()` call, however, such a mechanism does not presently exist it seems.\n\nI may do something with `SqlDelete()`, provided that would potentially bypass the multiple delete SQL statements being generated, as a workaround.\n\nWorst case I remove the after delete trigger statement(s), but I am loathe to do something like that in this instance because the model integrity is maintained through the database as much as possible.\n\nOpen to suggestions, first of all, or potentially does this require some work in either Fluent and/or NHibernate itself?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/289", "title": "Add AsBag with OrderBy property Expression", "body": "Might benefit from having AsBag, and/or other collection extensions, configure based on property expressions.\n\nProposed extension method signature would look something like this:\n\n``` C#\npublic static OneToManyPart<T> AsBag<T>(this OneToManyPart<T> part,\n    Expression<Func<T, object>> orderBy)\n{\n    // ...\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6159121", "body": "I think I answered my question. Downloading through NuGet is the way to go at least for now.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6159121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bounav": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/377", "title": "QuoteTableAndColumns setting not honoured when mapping IList<KeyValuePair> to a table", "body": "I've recently discovered the `SchemaMetadataUpdater.QuoteTableAndColumns` setting when you configure fluent nhibernate.\r\n\r\nThis options tells nhibernate to escape all table and column names. For example a column named `Key` will be surrounded by _[_ and _]_ if you are using T-SQL or _`_  (backtick) if your database is mysql.\r\n\r\nExample on how you could turn on the _Quote Table and Columns_ options.\r\n\r\n```csharp\r\nIPersistenceConfigurer configuration = MsSqlConfiguration.MsSql2012\r\n                                                         .ConnectionString(connectionString)\r\n                                                         .AdoNetBatchSize(1000);\r\n\r\nvar fluentConfig = Fluently.Configure()\r\n                           .Database(configuration)\r\n                           .ExposeConfiguration(SchemaMetadataUpdater.QuoteTableAndColumns)\r\n                           .Mappings(m => m.FluentMappings.Add(fluentMappingTypes));\r\n```\r\n\r\nThis setting seems to work fine until you try to map a `IList<KeyValuePair>` using the fluent table mapping as follow:\r\n\r\n```csharp\r\n// Domain object\r\npublic class Foo\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n    public IList<KeyValuePair> Parameters { get; set; }\r\n}\r\n\r\n// Mapping class\r\npublic class FooMap : ClassMap<Foo>\r\n{\r\n\tpublic FooMap()\r\n\t{\r\n\t\tId(x => x.Id).GeneratedBy.Assigned();\r\n\t\tMap(x => x.Name);\r\n\t\tHasMany(x => x.Parameters)\r\n\t\t\t.Table(\"FooParameter\")\r\n\t\t\t.KeyColumn(\"Foo_id\")\r\n\t\t\t.Component(c =>\r\n\t\t\t{\r\n\t\t\t\t// Without the Column name override trying to save an instance of Foo will fail\r\n\t\t\t\tc.Map(x => x.Key).ColumnName(\"[Key]\"));\r\n\t\t\t\tc.Map(x => x.Value);\r\n\t\t\t})\r\n\t\t\t.Cascade.AllDeleteOrphan();\r\n\t}\r\n}\r\n```\r\n\r\nAm I wrong to assume that the `c.Map(x => x.Key)` and `c.Map(x.Value)` should automatically quote the column names?", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonathanburrows": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/376", "title": "Modify Entity.Equals to Return False When Both IDs are Zero", "body": "May I request that the method Equals on the class FluentNHibernate.Data.Entity return false when both have 0 ids, since that indicates they have not been created yet, and are not equal?\r\n\r\nThe main reason I would like this is because of when intializing a class which has a hashset property:\r\n```cs\r\nclass ChildEntity: Entity { }\r\n\r\nclass ParentEntity: Entity\r\n{\r\n    public ICollection<ChildEntity> MyProperty { get; set; } = new HashSet<ChildEntity>();\r\n}\r\n\r\n...\r\n\r\n// Will have only one child.\r\nvar myVariable = new ParentEntity\r\n{\r\n    MyProperty = { new ChildEntity(), new ChildEntity() }\r\n}\r\n```\r\n\r\nThe function which would be modified can be found [here](https://github.com/jagregory/fluent-nhibernate/blob/master/src/FluentNHibernate/Data/Entity.cs#L22).\r\n\r\nNo biggy if it shouldn't be the case though, as it's virtual. But would be nice if an additional class didn't have to be added over-top of it.", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "csharpdeveloper12": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/375", "title": "Inject parameters to FluentMapping", "body": "Hello :),\r\n\r\ni needed a posibility to distinguish in the FluentMapping-Files -> Call constructor with parameters.\r\n\r\nSo i have developed an function for inject parameters into a mapping (FluentMapping). I have customized among others the files \"FluentMappingsContainer\" and \"PersistenceModel\". So i can invoke `map.AddFromAssembly(System.Reflection.Assembly.GetExecutingAssembly(), args.ToArray());`\r\nAnd it works :)\r\n\r\nNow is my question whether you can implement this funtion directly in FluentNHibernate for this behavior so\r\n- i dont need to customize on every new release\r\n- and the solution is checked and nothing is forgotten in the source ;)\r\n\r\nThanks in advance\r\ncsharpdeveloper", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fassadlr": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/370", "title": "Unable to set field or property \"Access\" on nested components", "body": "As the heading states, I am unable to set Access on nested components. Consider the following scenario:\r\n```\r\n\r\n            Component(a => a.houses, b =>\r\n            {\r\n                b.Access.Field();\r\n                b.HasMany(c => c.Tenants)\r\n                    .AsSet()\r\n                    .Cascade.AllDeleteOrphan()\r\n                    .ForeignKeyConstraintName(\"fk_house_tenant\")\r\n                    .KeyColumn(\"houseid\")\r\n                    .Not.LazyLoad()\r\n                    .Component(comp=> \r\n                    {\r\n                        comp.Access.Field();\r\n                    });\r\n            });\r\n```\r\ncomp.Access.Field(); is not available?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/368", "title": "PropertRef generates extra Left Outer Join", "body": "Hi,\r\n\r\nWhen specifying a PropertyRef on a HasMany to join onto another table the SQL that gets generated includes an extra left outer join which skews the result set.\r\n\r\n**This relates to NHibernate's 4.1 release.**\r\n\r\nI.e. I want to join table \"House\" to \"People\" but on \"TaxNumber\" and not ID:\r\n\r\nHasMany(x => x.People).ForeignKeyConstraintName(\"none\")\r\n.KeyColumn(\"TaxNumber\")\r\n.PropertyRef(\"TaxNumber\")\r\n.Cascade.AllDeleteOrphan()\r\n.Access.NoOp();", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/349", "title": "Formula does not work", "body": "It appears that the formula() method does nothing\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "minherz": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/364", "title": "Mapping property by Generated.Insert() does not allow providing generating logic", "body": "The mapping of the property (e.g. Guid) as generated on insert result in exception thrown at a time of saving a new entity instance in a case the property is mapped as not nullable.\r\n\r\n`Map(x => x.PublicId, \"host_public_id).ReadOnly().Insert().Not.Nullable().Unique().Generated.Insert()`, given an entity has a property `virtual public System.Guid PublicId`, will result in exception at a time of insert into a table. It happens because NH tries to insert NULL while the schema (generated from the mapping) does not provide \"default\" value. Due kind of duplication of the functionality (there is `Default()` method) one would expect to inject a logic that \"generates\" a value on insert as part of the call to `Generated.Insert(Action<T>)`.\r\nPlease, advise whether the current implementation is a designed behavior which expects from a developer to define `Generated.Insert().Default(\"<some SQL here>\")`. Mind that in case of the `System.Guid` type this code breaks the principle of universal mapping since other DBs do not support Guid in the same way as SQL does.\r\nThank you.", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "carpics": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/363", "title": " fluent nhibernate unable to create valid mysql utf8mb4 encoded tables from Dictionary mapping", "body": "I have created auto mapping which maps Dictionary into table like this:\r\n\r\n```\r\npublic class PostOverrides : IAutoMappingOverride<Post>\r\n{\r\n    public void Override(AutoMapping<Post> mapping)\r\n    {   \r\n        mapping.HasMany(x => x.Properties).AsMap<string>(\r\n            index => index.Column(\"PropertyKey\").Type<string>(),\r\n            element => element.Column(\"PropertyValue\").Type<string>().Length(5000)\r\n        ).Table(\"PostProperties\").Cascade.All();\r\n    }\r\n}\r\n```\r\n\r\nWhich results in table `PostProperties` with columns:\r\n\r\n```\r\nPostProperties => int(11)\r\nPropertyKey => VARCHAR(255)\r\nPropertyValue => Text\r\n```\r\n\r\nThe issue is that this mapping by default creates Index column as `VARCHAR(255)`. But it fails to create the table entirely for databases which use `utf8mb4` encoding, because the maximum `VARCHAR` size on an index column is `191` with `utf8mb4` encoding (the recommended encoding).\r\n\r\nThis should be able to be resolved by adding a `Length` property to `IndexPart` and using it like `ElementPart` does.", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OlteanuRadu": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/362", "title": "Modify IdentityPart object for a Model at runtime", "body": "Hello,\r\n\r\nNot sure if this is an issue or not ... but I'm trying to achieve the following scenario and I'm struggling:\r\nI need to change at run-time in an isolated scenario the IdentityPart object for a Model, from GuidComp to Assigned.\r\nWhat I tryed, was to change the IdentifierGeneratorStrategy in my isolated place to \"assigned\" but it had no effect.\r\nIs this possible in NHibernate ? \r\n\r\nNote: My scenario is that I'm receving an entity with a ID(Guid) and I'm trying to save the same entity with the same Id(Guid) to another database using NHibernate.Right now, NHibernate overwrites the desired Id(Guid) with a new one.\r\n\r\nThanks\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "govorovvs": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/361", "title": "Added .NET Core support", "body": "Need to change projects' types from .csproj to .xproj, change the code to make it compatible with .NET Core and update building scripts.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yoshidahiro": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/360", "title": "Manually set ID sometimes and allow for generated at others", "body": "We have table that has its ID?PK generated by a trigger\nId(x => x.Cable_RL_ID).GeneratedBy.Sequence(\"S_CABLE_RL_ID\")\nthe trigger is here\nBEGIN\n   if :NEW.cable_rl_id is NULL then\n      :NEW.cable_rl_id := s_cable_rl_id.nextval;\n   end if;\n END\n\nI know if I use the following to manually set the id\n Id(x => x.Cable_RL_ID).GeneratedBy.Assigned();\n\nHowever the problem arises that we are converting data over from an older system\nwe wanted the newer data to be generated by the sequence and the older data to be manually set\n\nis there anyway to accommodate this?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marcelNgan": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/358", "title": "Mapping of a table with two foreign keys", "body": "Currently learning how to use fluent-nhibernate mapping and got stuck on an issue which I can't seem to find an answer to. I have a table in my SQL database that stores the relation between two different table. The code for creating the tables looks like this:\n\n```\nCREATE TABLE Person(\n   Id int  NOT NULL,\n   Name nvarchar(255)  NOT NULL,\n   CONSTRAINT Person_pk PRIMARY KEY  (Id)\n)\n\nCREATE TABLE Shop(\n   Id int  NOT NULL,\n   Name nvarchar(255)  NOT NULL,\n   CONSTRAINT Shop_pk PRIMARY KEY  (Id)\n)\n\nCREATE TABLE PersonShopRelations(\n   Id int  NOT NULL,\n   FK_PersonId int  NOT NULL,\n   FK_ShopId int Not NULL,\n   RelationDescription nvarchar (255) Not NULL\n   CONSTRAINT PersonShopRelations_pk PRIMARY KEY  (Id),\n   CONSTRAINT PersonShopRelations_Person FOREIGN KEY (FK_PersonId ) REFERENCES Person(Id),\n   CONSTRAINT PersonShopRelations_Shop FOREIGN KEY (FK_ShopId ) REFERENCES Shop(Id)\n)\n```\n\nHow do you map this to Fluent-NHibernate?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kgreen24": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/355", "title": "Updating an entity that violates a unique constraint gives no indication the violation occurred", "body": "I have an entity that has a unique constraint on a name property:\n\n`Map(x => x.Name).Unique();`\n\nMy backing database is SQL Server 2014.\n\nWhen I try to add a new record with a name that already exists in the db, I get a nice exception that I can catch and deal with. However, if I update an entity with the name of an already existing entity and try to persist it, there is no exception thrown anywhere or otherwise any indication given that the constraint was violated. Code execution continues as normal, and the row in the db is just not updated.\n\nThere should be a way to catch and deal with constraint violation errors on update as there is with add.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stachenov": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/351", "title": "Shouldn't two-way mappings have one end set as Inverse() when automapping?", "body": "Take `Examples.FirstAutomappedProject` from the solution. It has\n\n```\n    public virtual IList<Employee> Staff { get; set; }\n```\n\nin `Store` and\n\n```\n    public virtual Store Store { get; set; }\n```\n\nin `Employee`. Now, with default mappings it generates a lot of INSERTs for employees, followed by a lot of UPDATEs to set the store. Quoting NHibernate Reference, \u201cThis is not only inefficient, but also violates any NOT NULL constraint on the parent_id column\u201d. In this case there is no NOT NULL constraint, but it is sure nice to have one when you need it! Doing `.ExportTo` on the generated mappings confirms the suspicion that Fluent NHibernate does _not_ set any end of the relationship as `Inverse()`.\n\nOf course, adding\n\n```\n            .Override<Store>(store => store.HasMany(s => s.Staff).Inverse());\n```\n\nto the mapping helps, but why isn't it the default setting for such relations? Is it by design or is it a bug/limitation?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SYoungPB": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/350", "title": "TypeReference.IsNullable false for nullable enum", "body": "I am writing a simple IPropertyConvention to map certain property types to Not.Nullable(). When I have a nullable enum property IPropertyInstance.Type.IsNullable returns false.\n\nHere is my sample code:\n\n``` c#\npublic class NotNullPropertyConvention : IPropertyConvention {\n    public void Apply(IPropertyInstance instance) {\n        if (instance.Type.GetUnderlyingSystemType().IsPrimitive ||\n            (instance.Type.IsEnum && !instance.Type.IsNullable) ||\n            (instance.Type == typeof(DateTime)) ||\n            (instance.Type == typeof(Guid))) {\n            instance.Not.Nullable();\n        }\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "peetw": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/344", "title": "Multiple named check constraints", "body": "Currently it's possible to specify multiple check constraints for an entity by just joining each constraint together with `\"AND\"`,`\"OR\"`, etc. and passing the concatenated string to `mapping.CheckConstraint()`.\n\nHowever, this results in a single check constraint in the database. For cases where there are multiple constraints it would be very useful to be able to specify them separately so that they appear as multiple check constraints within the database. This would make it much more obvious why an insert has failed as the check constraint would be much more specific.\n\nWould this be something that can be easily implemented?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fernandopaiva": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/340", "title": "How to create database and tables ?", "body": "I'm trying create database using FluentNHibernate. I want to create the database and tables. I want to create database but after create does not drop tables it only make update.\n\nIn Java has `createDatabaseIfNotExist=true` but I'm not finding it to C#\n\nThere's any way to do this ?\n\ntrying.\n\n```\n\nprivate static ISessionFactory createConnection() {\n\n            if (session != null)\n                return session;\n\n            //database configs\n            FluentConfiguration _config = Fluently.Configure().Database(MySQLConfiguration.Standard.ConnectionString(\n                                                                       x => x.Server(HOST).\n                                                                          Username(USER).\n                                                                          Password(PASSWORD).\n                                                                          Database(DB)\n                                                                        ))\n                                                                        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<PerfilMap>())\n                                                                        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<ModuloMap>())\n                                                                        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<PermissaoMap>())\n                                                                        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<UsuarioMap>())\n                                                                        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<CategoriaMap>())\n                                                                        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<SubcategoriaMap>())\n                                                                        .ExposeConfiguration(cfg => new SchemaUpdate(cfg).Execute(false, true));\n\n            session = _config.BuildSessionFactory();\n            return session;\n        }\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fubar-coder": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/322", "title": "Enhance IPropertyInstance to detect automatically generated column names", "body": "An enhancement of `IPropertyInstance` would be useful to detect the situation where the column name was generated automatically by fluent-nhibernate. This would allow a distinction in situations where the property name really equals to the column name and where the column name is automatically generated and has to be modified in a way that matches (most) of the databases convention.\n\nI know that working with legacy databases are a PITA, but I have no chance to change the legacy database in question.\n\nEDIT: The current workaround is using the column name `auto` instead which doesn't seem the ... right solution to me.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/321", "title": "bag/key doesn't support property-ref", "body": "It seems that the following situation isn't covered by FluentNHibernate:\n\n``` xml\n    <bag name=\"SubItems\" lazy=\"extra\" generic=\"true\" inverse=\"true\">\n      <key property-ref=\"LegacyId\">\n        <column name=\"KeyCol1\" not-null=\"true\" />\n        <column name=\"KeyCol2\" not-null=\"true\" />\n      </key>\n      <one-to-many class=\"SubItem\" />\n    </bag>\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ivaylo5ev": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/319", "title": "Cannot access schema when creating custom IJoinedSubclassConvention implementation", "body": "Currently I am in need of implementing the `IJoinedSubclassConvention` where I need to override the schema, by deriving from the original schema name. The `IJoinedSubclassInstance` interface exposes a `Schema` method for that, but it does not allow you to access the current value of the schema.\n\nFor reference, it is possible when implementing `IClassConvention` to access the member `Schema` by the following line:\n`var schema = ((IClassInspector) instance).Schema;`, where `instance` is the `IClassInstance` object.\n\nDoing so with `IJoinedSubclassInstance` as follows:\n`var schema = ((IJoinedSubclassInspector) instance).Schema;`\ndoes not work, as there is no such property, nor it seems that the `IJoinedSubclassInstance` exposes that in any other way. Thus, I was forced to use reflection to get my thing done.\n\nI think there should be a `Schema` property there, for the sake of consistency with the other convention interfaces which are applicable.\n\n---\n\nI am willing to personally provide a patch if you would agree such functionality is necessary in the future development of the project.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/320", "title": "Exposed `Schema` property for the `IJoinedSubclassInspector`  interface, and implementation class.", "body": "This is supposed to fix self-defined issue: https://github.com/jagregory/fluent-nhibernate/issues/319.\nAdding pull request for peer review. \n\nIf I accidentally missed other implementations of `IJoinedSubclassInspector`, do not accept, I will correct myself.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/38585683", "body": "I hesitated over using explicit implementation (`string IJoinedSubclassInspector.Schema`) instead, but went for direct implementation. \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/38585683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/42094606", "body": "In reference to below comment, the usage would become:\n`var values = ((Dictionary<ColumnMapping, ColumnMapping>) layeredValues[maxLayer]).Keys`\n`foreach (var value in values) ...`\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/42094606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/42094610", "body": "I might suggest a closer to the hash set implementation like this:\n`layeredValues[layer] = new Dictionary<ColumnMapping, ColumnMapping>();`\n`((Dictionary<ColumnMapping, ColumnMapping>) layeredValues[layer]).Add(mapping, mapping);`\n\nThe idea is to use the dictionary.Keys collection, as it is essentialy effective as a hash set. I do not know however, if Mono does work well with dictionaries.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/42094610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kobbikobb": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/318", "title": "Can't map value object(component) as Id", "body": "Is it possible to map a value object as a Id?\n\nHere I am mapping a value object as component.\n\n```\npublic class ProcessingCodeMap : ClassMap<ProcessingCode>\n{\n    public ProcessingCodeMap()\n    {\n        Component(x => x.Code, p => p.Map(x => x.Value).Not.Nullable());\n        ... other properties\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kingjuk": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/316", "title": "Can't use Unique and Length with MySQL database", "body": "I can't use Unique and Length with MySQL database. It will work with one or the other, but not both. `Map(x=> x.Name).Length(4001).Unique()` won't event create the table for that class\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chester89": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/314", "title": "Add outer-join option for collections", "body": "Per discussion in #296\nApparently, Fluent has no way of saying \"outer-join\"=true when specifying a collection mapping\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/293", "title": "Migrate to albacore v2.x", "body": "The build script now uses albacore 1.0.0.rc2, I'd like to update it to 2.0. May be [this](https://github.com/schambers/fluentmigrator/pull/565) can help. My initial attempt to do this failed, now there are more documentation on v2 and OSS projects that use it\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/269", "title": "Setup NDepend integration in TeamCity", "body": "Would be nice to have a nightly build that applies R# inspections and NDepend code analysis.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/268", "title": "Setup integration with coveralls.io", "body": "I found the service lately that allows to track code coverage of a project - https://coveralls.io/.\nIt's free for open-source projects.\nI thinks it'll be very nice to have coverage reports stored NOT on the build server, especially since I screwed up builds on codebetter TeamCity server.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/254", "title": "Move to Ripple - latest version possible - and update the readme.md", "body": "<a href=\"https://github.com/darthfubumvc/ripple\">Ripple</a> is a dependency management tool developed by Fubu team. It was built to ease the pain of using NuGet, especially it's hilarious \"Enable package restore\" command (frankly, I go nuts every time I have to download an earlier version of a package). \nRipple is already in the repository - it's an old version from a year ago with some upgrades of mine. Now I'd like to have the newest version (v2 or v3, not really sure). \nFubu guys have 2 options for Ripple - .NET executable and a Ruby gem. I would prefer the former, cause not every contributor has Ruby installed.\nAs I heard, it got a convert command that turns every package.config file in your solution into Ripple friendly format.\nAlso, when done, it would be wonderful to update Readme.md with instructions on how to build Fluent NHibernate source code using Ripple.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/236", "title": "Fluent generates a column for a calculated property", "body": "This is situation to research, actually - courtesy of @robscottnh via email conversation.\nIf you specify a formula to create a calculated property in a mapped class, fluent always adds a <column> element to the mapping (even though it's a calculated property and there is no column in the table).  If I generate the hbm.xml file and remove the <column> tag, all is well, if I try to run with the <column> tag in place nhibernate generates an error saying the column doesn't exist (actually it's the db that generates the error based on the generated sql).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/217", "title": "Add configuration option for polymorphism in SubclassMap<T>", "body": "", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/214", "title": "Check for duplicate mappings", "body": "We need to validate all the mappings and search for duplicates. For example, there can't be more than 1 ClassMap/SubclassMap for a particular class. Should be pretty easy\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/209", "title": "Component is incompatible with automapping", "body": "Currently wiki says: \"Note: ComponentMap's are incompatible with the automapper. If you're using the automapper then your ComponentMap's will be ignored.\" My idea is to find out why that is and how can it be fixed (if at all).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/206", "title": "Session.Merge causes NHibernate.LazyInitializationException : illegal access to loading collection", "body": "Details here: https://groups.google.com/forum/?fromgroups=#!topic/fluent-nhibernate/Rjzmenll3Fo\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/166", "title": "A desperate need for an end-to-end tests", "body": "After reading about bugs and  other issues here and on the mailing list, I see that it's common when the problem, being fixed in one version, comes back two versions later to bite developers in the ass. So I'd like to propose that we have integration tests - that means going all the way from configuring the mapping to creating ISessionFactory/ISession and doing some basic operations. \nI think this can grant us at least two things - \na) bugs won't come back, or at least, these situations will pop up with less frequency\nb) we'll be able to pin point the problems when upgrading to future versions of NH\nAny thoughts? Of course such goal can't be accomplished in a month, that's a long term investment. \nWhat's more interesting about it - I think we can even turn some current unit-tests into integration tests by adding code to [TestFixtureTearDown] method.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f610cde52c66c11c40d3d4b414fe7cf32cdf9c0f", "message": "upper bound version for nokogiri"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1dff2abe031adf7caeccdbb4c134c3937672cb2b", "message": "Merge pull request #345 from samiraguiar/patch-1\n\nUpdates README.md with build instructions for Windows"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f54801921c61751a7a391de78280e0da00f8c3f2", "message": "bumped to 2.0.3 - wrong version number"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6fb2bce430999b71c388ccdad441a3f793e5bde1", "message": "update package version to 2.0.2.0"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/0ac6335d2068798f6b38b98aacade07bc702d68f", "message": "Merge pull request #326 from chester89/v2.0.2\n\nversion 2.0.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f509243332bc09a16221dade069f199d1a32259a", "message": "change version to 2.0.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e9bb4a74524e8078240cfa6fa48da7dea7a23a6b", "message": "downgrade to NHibernate 4.0.0.4000 - it appears client of the Fluent nuget package can't specify version of NHibernate higher than the one we use when building Fluent"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4ca3033ba9adc100fa23466c17823f2d311d4f62", "message": "remove Clean target from MSBuild step"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c0f7b748cfb783ff742f65cb547e5d6c27dc1c12", "message": "rake task to update NH version across solution; update to 4.0.3.4000 - all tests pass"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4fb107ba64831077c18932b042dd602f8b3eb141", "message": "Merge branch 'pr-307' into docu-update"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/03d47dc9cb8349775dbed0284549050a9c1ec5f0", "message": "removed lots of unused files"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/91a01437ae9be5d6e2a75523c192400ee9494082", "message": "Merge branch 'pr-304' into v2.0.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c196818d3c8bf8cf19641bf17e40a1b3d2b76a27", "message": "Merge branch 'pr-298' into v2.0.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3f38ee9b765a021cdcdc4e0570f86fbf565e6c4f", "message": "Merge branch 'pr-297' into v2.0.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6302b200c349ca5c5c61ad5f829fbf14b9ba123b", "message": "trying to overcome ssl connection problem"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b2d297a9597d0b7721b6bdba22cdaeefc8ba7451", "message": "Closes #303"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/30edae28f113a56d29dd24f3df7be3d373d29907", "message": "Update year to 2015"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cccb58de3b98d5b83fabe3fa40f2e41edc35733e", "message": "Added links to NuGet packages\n\nLinks to NuGet packages in readme"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/21f0b8660002b679e23a3e83f7913d38e15f422c", "message": "test with latest stable NH 4.x, update to stable version"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/53980c601ef3028a304024467bf771550f38b990", "message": "Merge pull request #286 from jaxx/master\n\nappend cascade options instead of overwriting + added missing cascade options"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cec3322788f30a173f6c81ccbcdb60325d3cab3d", "message": "Merge pull request #291 from bertvansteen/issue#280\n\nAdded support for Managed Oracle Driver"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/754cce80210ae69d628fceeb3c39e480f1564b2f", "message": "Merge pull request #281 from chester89/migrateTo40\n\nMigration to .NET 4.0 and NHibernate v4"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f56b2d55bdb5a324f2730dee8f4aa6ea467517cc", "message": "restore dependencies in CI build"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a16f85c8f0d50084327b627f32765591c26c4891", "message": "fix albacore version to 1.0.0.rc2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/195d9b6bed0720471640b3b9b43ace7821df758d", "message": "rake tasks to tag the release"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cd8ab87d04f82da5a30440cef61eff79b0ae9e61", "message": "update NuGet to 2.8.x"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/900c673ad8319cddefe06e35cb5e93d230298230", "message": "specify rake version"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/0f31f31abf366316770b19b177ac831664a5cd1f", "message": "informational version"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a6a544af45467b98386bad211af7c30eae16d6f4", "message": "add title attribute to nuspec"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8d5dc18c80cd2d12a6c36a1406de31841232ca12", "message": "delete 3.5 nuspec file"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/99770e677ff09b63a3ee5325117086d4ceb08bae", "message": "read and package title from config"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b377d9a03c32278786a7bd300858085564bb8ed0", "message": "refactored build script a bit"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/657a70f8f51cd90749ccb0266fcb6bbcc2352d51", "message": "ignore Gemfile.lock"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/851df5d80ef993213c49b6d3f4af5e5bb6284dba", "message": "updating .nuspec file from Rake, update gem versions, get rid of AssemblyInfo.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4130bad0ec8efee93e89aad004228921bd8ea18c", "message": "minor fixes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/798bca9df213e64f2e47f35b885201a406f3422e", "message": "do not store CommonAssemblyInfo in git"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/671bc3fcc36530ceceb0e7f57ba2168797abe0f5", "message": "brought back Sqlite configuration for tests"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c336bcfedf38354c0e4d02a87a80bf2acb549b42", "message": "all code ported to .NET 4.0\nseparate nuspec file for .Net 3.5\nchange Rake script to call CLR4 version of MSpec"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7a2c7bf51bda4cc231c3382a5a3754cbf2538900", "message": "Merge pull request #279 from hazzik/tc-build\n\nFix TeamCity build"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/de8fd45ab6e72a2506001b17c307c9aa5f62d359", "message": "separate nuspec for .NET 3.5"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/109d7265004422e10b285f8550e3ea1ec4f39d52", "message": "Merge pull request #277 from oskarb/nh3-dependency\n\nLock Nuget NHibernate versions to < 4.0."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/641c52826e005da24f20638c56c9e029f0b9cec4", "message": "merged latest changes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ff1a7b08b646682ab8e50429aed6d47703d74c4b", "message": "latest NH version - all tests pass"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d222066431e4902f80c2caaf3e7728e2ce11855d", "message": "upgrade MSpec reference to .NET 4"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/df86a709019313913c1cbea21504b19f65debb52", "message": "Merge pull request #273 from oskarb/remove-user-files\n\nGreat, thanks"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6de09106969a3273e2d88e59c1201cb7a2861c3d", "message": "got nhibernate latest - all tests pass"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3ed89524425b0b642829ed19025278f4bbeed0cc", "message": "updated one more project to use local NH build; added new NH binaries; all tests pass"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6da35d417b5fa806fff076e5e452df1fa65815be", "message": "fixed reflection problem by applying SecurityRules attribute to FNH main assembly"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/032ce972154c72751e8bdfc4c778806a39bbf4d1", "message": "everything compiles, but many tests fail because of reflection"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/19cbc3801d8bcc7060fd66d74f00f3ed4c977e36", "message": "removed references to Iesi.Collections"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/027398ba7419b3ef23b3c46b4638b327e483e4c1", "message": "changed all projects to .Net 4.0 - some issues remain"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4d2348d560b952abba72179b3c4097acf02f4b99", "message": "Merge pull request #267 from Micha-kun/master\n\nFix for bug #231"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5101705584ff9d8b364c8e93147dd00331937376", "message": "Merge pull request #265 from Micha-kun/master\n\nsql-insert, sql-update, sql-delete into join"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6c5429df1b57d2fdb3347561af5a425682d1ce9d", "message": "Merge pull request #264 from twiernik/master\n\nAdd pdb files to the nuspec #262"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a6c6b7d08b77c047dc3dafa30e8dffa714289f9c", "message": "Update README.md\n\nExtended year range"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/65884f115cfc1e2d517603d89084a3fdaacfaacd", "message": "Merge pull request #255 from twiernik/master\n\nMoving from RhinoMocks to FakeItEasy"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2cadff41a62323753eef5174c71111d971848e74", "message": "Merge branch 'master' of github.com:jagregory/fluent-nhibernate"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/38b8ff37729dc21195eace43d9335d414689e610", "message": "changed version in nuspec to 1.4.0.0"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8882a26defee1635c7af1b214300c194b2c86fb0", "message": "Update README.md\n\nfixed NDepend logo link"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6cbc9331f58dbfac8f1e4b152ae2b29342286944", "message": "changed version to 1.4.0.0"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2d247ab5fb6f7c125634c78af9a560e527a5c318", "message": "forgot Iesi.Collections dependency in nuspec"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8ea272d36812c0ab963fb853d4d57ce497c7bfad", "message": "added nuspec file - preparing for 1.4 release"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/90eef13f1de25c560629d000c32f91d233e2d24c", "message": "Update README.md\n\nedited logo link"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/9fb4532acb3b56e75a365a48c2502b8c178d6974", "message": "Update README.md\n\nAnother attempt to add NDepend logo"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3aebd66e62917c6ad065cde05a24e418d66aaa9a", "message": "Update README.md\n\nadded NDepend logo"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/433c858d3b1caacdde8958fc6ab5456aeeb39812", "message": "fixing NHibernate project reference"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8698fdc6e18f21a519ba0b8927de6e5a11be96c7", "message": "Merge pull request #250 from chester89/issue57\n\nFix for #57 - ForeignKey.EndsWith messes up multiple one-to-many relationships"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/72c2b0135c8689f9150b14b8e647ac5cfc1758bf", "message": "Merge branch 'master' of github.com:jagregory/fluent-nhibernate into issue57"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6f293a248e3557e34add6be7b74484d211fc68dc", "message": "Merge pull request #249 from chester89/issue210\n\n#210 - Multi-column IUserType fails in SubclassMap<>"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c55bdc8213a1926f99802258a09ed196287649cc", "message": "pulled in latest master changes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5b55c42a4a66ed6af91537661d6c9b903569cd4e", "message": "latest changes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/9b5e54a54e7f6b39cb1eddaa172ff0a718a2efd5", "message": "added sybase sql anywhere 12 config option + some tests for it"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5cffcc09736a993273f6386e49a4fed0931a238f", "message": "Merge pull request #246 from chester89/nugetMigration\n\nNuget migration"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4fde19301cd0d84a2a885cf5925ad48e7424b205", "message": "merged latest changes from master branch"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/774297f6b065d33408ec330697b863a7b9a4d612", "message": "Merge pull request #248 from chester89/informixDialect\n\nInformix dialect"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f394a4a9265e21ef579992678d1b5489afe4ade4", "message": "Merge branch 'master' of github.com:jagregory/fluent-nhibernate into informixDialect"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1b99e865e88e5ebd74622ec1414c7901f5cc899e", "message": "added test case for informix dialect"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/003f252d07613d7124aea4ce3162b8694cbba745", "message": "Merge branch 'master' of https://github.com/lodrial/fluent-nhibernate into informixDialect"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/138801ef1b84378e01f193660e878e2d257515a7", "message": "Merge pull request #247 from jagregory/pr/118\n\nMsSqlCe40 dialect"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/601a99da7d91776c04bcbf78877b0829fc740670", "message": "added a test case for PR 118"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b4319eb07fdd0bd2402e0c4240ed2e10125797d7", "message": "Merge pull request #243 from daspn/master\n\nAdded Cascade.Replicate option"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/650e2f4874852cb59fbbcd372c2d2c25ed3bea03", "message": "fixed MSpec executable path"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3f14c680fde8ef475457dd87241907ac29409692", "message": "updated MSpec version in rakefile"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f3384383cd13374a830f35e07ce31cff321a35b7", "message": "Merge branch 'pr/243' into nugetMigration"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2b3ae29ac15244bbbf2847f602664d2cccb56bcf", "message": "updated to latest enforce version of ripple; NHibernate 3.3.3.4001 compiles and passes all the tests"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1efd1e877427536ac8da1ed397a8876291ad1ed6", "message": "updated to ripple with enforce command + gitignore packages"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/13d1877e533a120d53d9b124133d8ec22c8532b8", "message": "Merge branch 'master' into nugetMigration"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4f9ab2e364fa09e1ace5200fd4209d6f2e063282", "message": "Merge pull request #195 from HermanSchoenfeld/master\n\nMono-compatability bug fix"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/edc4140069caadb51692868b84c529f0e55196f4", "message": "Merge pull request #241 from guillink/patch-1\n\nFixed typo on PropertyPart.Unique documentation"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b2f784a56a870d5aff0a5dd314d1bd22e4d47118", "message": "Merge pull request #240 from kyjan/patch-1\n\nMade Fluently instantiable"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/75f5c2a89c4364d0d07715238ada69c0fd02ecf5", "message": "fixed reflection problem by applying SecurityRules attribute to FNH main assembly"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8f94944af49083d235a6b4c1611ee7fa00d62184", "message": "everything compiles, but many tests fail because of reflection"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3eba4ecebefc0a52495d5eb094c114d93ef8515c", "message": "removed references to Iesi.Collections"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6abbbd165f9e07962324b17f32a4ecf1d71e0597", "message": "changed all projects to .Net 4.0 - some issues remain"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/91b117954fea7bb86d8cc1e134f1e485a8057b39", "message": "updated MSpec version"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/bc6be037dd2884081f6ae6a12e1fe9739e9dc949", "message": "applied fix - all the tests pass"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/11954d7db696244e5ae8edba3a5b2890cc451f5b", "message": "added a test which describes the issue"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/dcc57d8d6463002dab34dc7101010baf87b6ecfa", "message": "Update README.md\n\nlogo update"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ab7aeabb06581a95e918465a63ffc9a89e792b91", "message": "Update README.md\n\nupgraded years range"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b8aa3ea394504af2ed7f00ef287699ca07410f82", "message": "Merge pull request #228 from alexDevBR/whereInheritedProperty\n\nExpressionToSql: Allow using an inherited property when using a lambda"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/74e3a5a98675c56917e3424e48cd89bcc8812821", "message": "Merge pull request #227 from BluewireTechnologies/automapping-speed\n\nRemoves unnecessary expression in favour of a compiled lambda."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/12bae2f82ec308144694cb87e9c4345da4218040", "message": "Merge pull request #233 from chester89/issue232\n\ncloses #232 - batch size option specified on a subclass map is honored in a TPH strategy;"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/adf012878496884486bc706b1c44110720826358", "message": "formatting"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/68377cb2d12e564f2bed2bc16b83604e93c0dd67", "message": "forgot a fix"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cfda9afa3a0c39014781b9883b5d2169cc2d61d1", "message": "closes #232 - batch size option specified on a subclass map is honored in a TPH strategy; have to add tests for this"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8f182a3d883892337fb4258f1042f63a744a5dab", "message": "ignore merged"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b80ef043bdb7fef2f1dd902fd6fd7a25d9e86bc4", "message": "changed SQLite from local assembly to Nuget in examples"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3abe8d67ac14cfd5f9e020741219f4b397524787", "message": "merge changes from master"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/61e5ac7088d5e59a1b3604b2c237800060bfd530", "message": "forgot to merge packages.config files"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/492e706a88f348d5b69eba563ee7d618eb6ef6d5", "message": "adding nuget to examples projects"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c5583ebfd104a608e57ff6e1f542e0e36b64d021", "message": "Merge pull request #216 from chester89/testsFor113\n\nTests for #113"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/31541411030033d9ed2a0b606a54f03246af8017", "message": "missed packages.config files"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d5d9f91eba1387317bf4c53183f2f46051c718c8", "message": "more tests for automapping inheritance hierarchies #113"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ebed4c30467ac446a798c974730c3c6218bd2046", "message": "moved test classes around"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f5cde37e949bf13cdd7a59c7a1f4c263e7ee57cc", "message": "basic tests for #113 - mapping simple properties in inheritance hierarchy"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/334315c8e761eb1a78cff1b246944ca14ce48eae", "message": "migrated Examples project to NuGet"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1daf18a46838ed52e6d6caf551b78c9c37ac9fde", "message": "Merge pull request #115 from tbushell/patch-2\n\nFix for issue #113"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5a0c099c15771705748a7b9b7aaa4e36bbd6872c", "message": "the hell happened with NuGet yet again. CHECKPOINT - everything compiles"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/23f67a3209ba3cd43a59961f0ff0056aeb0d6627", "message": "Merge pull request #211 from tgmayfield/SubclassInterfaces\n\nSubclass interfaces. Fixes NullReferenceExceptions caused by a null type.BaseType when the subclass type is an interface."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b6c5738f251757025f779b9b1411cea7bb3657c2", "message": "added ripple to pull nuget dependencies, edited Rake build script to leverage ripple"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b0d5314ed92dd948eac4a8e64ab16ec0446a37b1", "message": "some references cleanup"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5731b3bc96ad218bffbd1845b715c47dc8a43386", "message": "deleted binaries from tools folder"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/55fd0a043dbe1522e8d8490cb4716bd157744460", "message": "moving all dependencies to be pulled from NuGet. NH version stays 3.3.1 for the time being, MSpec, NUnit and RhinoMocks are upgraded to higher versions"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4421b05a2b0f883114121bfd89dba0e71e305abe", "message": "Merge pull request #188 from W1N9Zr0/master\n\nFix exception when mapping nested generic classes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1754fa3c60f22ad30990ffe6a4038aaa2264cdc0", "message": "Merge pull request #186 from chester89/investigating-110\n\nI think this one should close both #110 and #194"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/09470134c97318a9aef3a73e2955cf469a2a9e97", "message": "added Not to ElementPart - enables scenario like .Not.Nullable"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/21cb167be700966b99c49e59d298a5533a67ac3f", "message": "fixing #190 - should recognize byte and short as identity"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1e82f304cfbb05ecd9348b6d4be6617e598631b2", "message": "added unit-tests for edge-case of compiler-generated class being mapped"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8b3d62ba175e31701b26cef053eb9d2ccf6c0f31", "message": "Merge branch 'master' of https://github.com/firo222/fluent-nhibernate into 127combinedWith146"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/56d130e1ac4707ec9df506993bc0ac4a293511d3", "message": "added specs for user type convention appliance"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ce3722de6040efca42c1c541ab570e283dd9f1e6", "message": "can't find a way to write a proper test - need to test the applicability of a convention to particular IUserType"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/182e05c52148d5343b807d225edb62b9de95a87d", "message": "Merge branch 'user-type-convention' of git://github.com/WalkerCodeRanger/fluent-nhibernate into issue172"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a94796cd57770283c8a42cf0afedad0518e68489", "message": "Merge pull request #205 from chester89/175additions\n\nclosing #175 completely"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8ee3d873216c2291ce955c671d4d45feefefb323", "message": "adding @anuroopa fixes regarding #175"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/9d37e283148d6f11c0bada9286db6fb3e106c0e3", "message": "Merge pull request #178 from chester89/anotherShotAt175\n\none more try to close #175"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/262e78a843af0064ac25810de22e1a8330bf3687", "message": "I think #110 is finally fixed"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/70b4eff1861d6e9ff57e8be5b0e2d963b7e2655f", "message": "some weird stuff happening - test passes if it's configured with SQLite and to output result sql script"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b8c0869f18f3432caf1e57b4f1fca123d6f1a543", "message": "applied changes. 1 MSpec test broken"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f9ed1e5d485fad76e08ba235b53f2e3dfeec6aa5", "message": "one more try to close #175"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3302718fd801a050f943db0cf2d1c842f2f7b501", "message": "now AutoPersistenceModel recognizes multiple mapping overrides when declared on the same type"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ffa35caca3f922789dd5526681779c7878f4e5c4", "message": "added iteration over all implementations of IAutoMappingOverride - so far all existing tests pass"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e47a6ae032dea9cd4a90dee369b99a13e5f78ddb", "message": "second attempt to get #37 working"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c9d31f7fa4418ea5c376fc123cf9c384f2547706", "message": "fixing #105 - only public nested classes automapped by default"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cefb7daab82157c3c58aa365d43d88e87a69580e", "message": "#105 - exclude only private nested classes from auto mapping"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2cd181924ba7bb297ce0dc816d774642cfa299ab", "message": "almost got #105 working, one tests still fails"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/0411f6b90f7b587a1c42a23d62d8ab3145bf77a6", "message": "deleted the unneccesary file"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/0a2cb9325ef8766b655b6df3c30bfb95f317091c", "message": "feature is implemented, all tests pass, now let's cover it with unit tests and specs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/81bdbc00bb823c298dfb83ef0f732b948051f558", "message": "think I found a bug, need to refactor - Member property never set in ComponentMapping"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/63c77073fd7e0f577bbfeb5be0620062f117facb", "message": "added an ability to specify column prefix when mapping a component from a field"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/326bec31e2498b7f5c28b9431a40176314ee4ac4", "message": "added configuration option for Sql Server 2012"}], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/287", "title": "Code coverage report for TeamCity", "body": "", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7680657", "body": "Ok, that's really odd - I found a spec that checkes this specific case (mapping component from a field). I don't have MSpec Resharper plugin installed right now, and the field in the spec is public. Need to run all the tests including the specifications again.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7680657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7704765", "body": "I must have misunderstood something, I'm closing this\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7704765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717690", "body": "oh, I didn't realise that when you push to master in the fork the changeset is added to the pull request. Too bad - I didn't provide any tests for column prefix :( will do 2night\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717977", "body": "I see. I'll try to rewrite the history, but I'm not sure this will remove the commit from the pull request\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7718196", "body": "so I just add tests and fire another pull request? \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7718196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7718282", "body": "from the right branch, this time \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7718282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7766238", "body": "Since nobody objected, I'm taking this one in :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7766238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7835699", "body": "I guess that this particular scenario just wasn't tested. But you're making a point, I think it would be a good default to use only public classes out of the box and be able to override this behaviour at will. I'll take this one in, unless someone has other suggestions\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7835699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8143152", "body": "I think the current behaviour makes perfect sense\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8143152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247034", "body": "I'll get to it\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247160", "body": "May be that's because you have a method called GetAssets(), not a property? NHibernate does look for property with that name, and can't find it, indeed. Try changing method to a property and I think it should be ok.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247286", "body": "it seems to me that ability to map private non-nested classes was intended, but private nested classes wasn't\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247807", "body": "I've got a question - does this change need to be reflected in documentation somewhere?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8247807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8248446", "body": "I think I got it working - but one test fails, it says public nested class shouldn't be automapped by default\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8248446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8253571", "body": "What I did is completely ignored only private nested classes when doing automapping. Public and protected nested classes are being mapped. Is this the desired behaviour? May be we should exclude protected classes also\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8253571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8439560", "body": "I'll look into it\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8439560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8465182", "body": "can you please provide more detail, I'm not sure I understand the issue\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8465182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8465480", "body": "oh, I think I understand - you mean, when automapping entities that contains a collection with the same property name and different element type, these collections are being mapped to the same table? like here: https://gist.github.com/3699969 ?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8465480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8468566", "body": "Crap, I did something wrong - somehow my commits from another branch got here\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8468566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8481961", "body": "yes, I think so\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8481961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8504974", "body": "I'm being really dumb - git keep telling me that I have nothing to commit, since I did a push yesterday. how do I fix this situation? I'm sure I did all the work concerning this pull request in separate branch\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8504974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8505748", "body": "I understand the problem, but I'm not sure how to approach this. Also, breaking change isn't a good idea for a minor release. If only @jagregory can give some advice\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8505748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8628001", "body": "I'm not an expert in mapping inheritance hierarchies, but if you use table-per-type, shouldn't all types in hierarchy be mapped, including abstract ones? Although I'm not sure what's Fluent default behaviour in this particular case\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8628001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8648272", "body": "@Shihayazad I agree - I'll try to merge these changes and see what's going on there\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8648272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8671968", "body": "After I applied deep copy changes, 1 MSpec test failed - \"when subclass has a has-many to another entity, should only use one column in the target entity's key'. that being said, I haven't applied second commit concerning ColumnMapping and null references\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8671968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8680394", "body": "it seems I was a bit off yesterday and didn't notice that the failed test indicates exactly the problem shown above. Should we change it? Because I think we should - the test clearly expresses the requirement that has changed since it was written\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8680394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8722315", "body": "Not at all. By the way, what's the main use-case on this - key that consists of multiple columns (composite)?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8722315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8728264", "body": "I meant that we can either change it or throw it away, the second option is less preferrable, of course\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8728264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8903178", "body": "You got the point. I'll get to it tomorrow\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8903178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9274389", "body": "just sent proper PR - this can be closed\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9274389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9274599", "body": "finally got to it - now trying to figure out how to write a proper UT\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9274599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9311062", "body": "You meant TriggerIdentityGenerator class from NH?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9311062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9316343", "body": "done - I sent a pull request\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9316343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9316709", "body": "I think this behaviour should be optional. But I agree that such behaviour should be present, it makes perfect sense. I'll investigate\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9316709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9317321", "body": "maybe you meant Type.FullName (cause your example is 100% not an assembly name)? \nalso, I'm no expert at .NET file API, but I think if Windows set its limits to <n> characters for a filepath, there's no way we can overcome it. even if that's possible - that wouldn't be portable in a sense that this project is built on machines with different configurations and OS versions. \nif I'm wrong, please correct me\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9317321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9317548", "body": "just looked into it - it seems that the only way to overcome this is via Win32 API. that's just not good. btw, it'll be more easy to use a guid instead of full name, and then append a class name to it.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9317548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9320316", "body": "oh, I see. I'll get to it\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9320316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9331565", "body": "@jagregory I see. Can you take a look at PRs when you have some time?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9331565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9337595", "body": "nice :) thx\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9337595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9342203", "body": "I wouldn't count on particular deadline - if I get this to work, it'll take some time for PR to be merged and next version released since project is not very active. you can, of course, build from source code and use resulting binaries - but I can't commit to a particular date either. sorry\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9342203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9351438", "body": "something really wrong with me - again I have unrelated commits. will fix this\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9351438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9419369", "body": "@jagregory removed VS 2008 solution in August. See 1118239dae. If you need it, I guess you can just rollback to this commit\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9419369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9456606", "body": "Looks good to me. Except I would also rename parameter names in a class that implements an interface, not just the interface itself. \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9456606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9461717", "body": "On it. Shouldn't be too hard to fix\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9461717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9463529", "body": "Well, I don't know why, but given the code provided, I can't even get the derived type to be automapped - the ClassMaping I receive from AutoPersistenceModel is null. Need to revisit tomorrow\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9463529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9504391", "body": "I'm an idiot - forgot about AutoMap. Closing this\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9504391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9504565", "body": "That's really strange - when I created the sample project with the configuration provided, generated sql shows that the problem exists, as described. But in tests I can't reproduce it - at all.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9504565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9554822", "body": "Yes, but I can't say when it will be posted.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9554822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9560429", "body": "Although, If I can figure out how to write a good test for that situation, it may as well be done before the end of the month\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9560429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9567997", "body": "yeah, that situation need proper debugging, from what I understand. Somewhere in there joined subclass isn't honored. There's more - FNH doesn't even generate ClassMapping instance in that case, which is really weird\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9567997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9568051", "body": "can u please post full example of your code?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9568051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9750341", "body": "giving it a second look - I was completely wrong about a failing test. it doesn't cover this particular use-case (having more than one key column), but it still fails. anyone volunteers to debug? =)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9750341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9752057", "body": "@jagregory may be you have an idea - why AutoPersistenceModel generates two identical columns when mapping one-to-many from a derived class (derived extends base with a collection of other entity)? config is here https://gist.github.com/3948140\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9752057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9752719", "body": "and the most weird thing is that when I write the resulting sql script to a file, it's perfectly valid. so the trouble is in object model\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9752719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9752979", "body": "oh no. two possibilities - either I'm crazy or this is just magic. the failing test included MySql configuration and output of  a sql script. when I commented that part - test became green. need someone to double check if I'm sane here. pull request will be up tomorrow\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9752979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9753217", "body": "also, I think the spec for this particular scenario would be nice. if I'm not lazy tomorrow, will definitely do\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9753217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9753873", "body": "I think I know what's the problem - when inside a web app, Assembly.GetExecutingAssembly would return null (there's a reason for this, not sure what it is though). if Fluent is using this method, that may as well be the problem.\nIs this resolved @jagregory - it's not clear from discussion whether the fix was applied\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9753873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9861919", "body": "I think the default behaviour should be GetExportedTypes. And if different behaviour is needed, may be Fluent should provide one or two shortcuts (like GetTypes mentioned above). Any thoughts?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9861919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9868323", "body": "If I'm not too busy this week, I'll do it\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9868323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9896501", "body": "I see. In that case, I think that adding a line in docs will do for now\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9896501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9917678", "body": "so, I believe I got it working as intended. the below test passes:\n[Test]\npublic void Can_Have_Multiple_key_Columns()\n{\n    var provider = (IIndeterminateSubclassMappingProvider)new TestMap();\n    provider.GetSubclassMapping(SubclassType.JoinedSubclass).Key.Columns.Count().ShouldEqual(2);\n}\n\npublic class Test\n{\n    public int Id { get; set; }\n}\n\npublic class TestMap : SubclassMap<Test>\n{\n    public TestMap()\n    {\n        KeyColumn(\"col1\");\n        KeyColumn(\"col2\");\n    }\n}\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9917678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9989193", "body": "What kind of exception? May be you can post a stacktrace? I'm not quite following, I'm sorry\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9989193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9991474", "body": "I'm not sure that Persistence Specification can figure out that you're using a component. May be there are some specific way to tell it about that, like CheckReference method that verifies that you have a n-to-one relationship?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9991474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9991664", "body": "I'm having a look at the code - it seems strange that CheckComponentList exists, but CheckComponent doesn't :(\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9991664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10010342", "body": "I'm thinking that writing your own extension method like CheckReference is a way to go.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10010342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10088684", "body": "this one should be closed - it was fixed not so long ago\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10088684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10104382", "body": "seems that one is already covered too\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10104382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10104793", "body": "this is already done & merged - in pull request number 25\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10104793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10111163", "body": "what I meant is I can't get to the page on lighthouse - it says \"it's not a public project\"\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10111163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10111301", "body": "well, I looked through the commit list from June 4, 2011 till the end of 2011 - and haven't found this fix\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10111301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10112051", "body": "I'll give it a try - although I'm not sure if I can reproduce it without having the exact config of yours\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10112051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10265018", "body": "I'm not an expert in this either, but I'll look into how NHibernate handles different data types of identity columns\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10265018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10281769", "body": "if that's so, I'll get to it this week\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10281769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10286308", "body": "I'm afraid that the behaviour will be the same as with byte and short - no identity\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10286308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10296935", "body": "I think that byte and short wasn't considered as id types just because they are too short for Id. For example, I always use int as my Id. But that's just me\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10296935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10302916", "body": "I added byte and short types to be recognized as identity, but I can't figure out how to write a proper unit test that will describe a situation. \nSince the method GetDefaultGenerator doesn't depend on anything in IdentityStep class, may be it would be more appropriate to turn it into extension method to Member class and be able to test it in and out? Suggestions @jagregory?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10302916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10304617", "body": "thanks - that should do\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10304617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10306427", "body": "I'm afraid Git made me again - I created a new local branch, made changes, then did a commit and a push - and Github doesn't know anything about it. No branch, no commit. I'll take another look at it tomorrow after I get some sleep\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10306427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11084365", "body": "I agree. I'll think about where to start on this, cause it's rather ambitious task\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11084365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11289617", "body": "I guess that Not property should be also added. If I'm not busy, I'll do it\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11289617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11430528", "body": "May be you can tell what DBMS you're using - Sql Server, Oracle, MySql, any other one?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11430528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12599444", "body": "then may be it's NHibernate problem? Because NH generates DDL itself, Fluent is just a convenient way to do the mapping without xml\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12599444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13087799", "body": "would you please provide unit-tests or specifications that confirm that code is correct\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13087799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13091672", "body": "Agreed @firo222\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13091672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13091789", "body": "I don't think that's possible. Any other NH users know about this?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13091789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13091989", "body": "Then go ahead and show the code, because without it it's different to say what exactly has gone wrong\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13091989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092233", "body": "Can you please provide a test for this?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092292", "body": "will have a look tomorrow\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092484", "body": "Closing this one, already done\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092602", "body": "Done a long time ago\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13093117", "body": "I see. If you provide the NHibernate part of the solution, I'll try to expand the Fluent API to allow this scenario\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13093117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13152015", "body": "trying to crack it, wasn't able to do so far\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13152015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13200502", "body": "fixed. Although, the docs addition will be nice\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13200502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13256093", "body": "Pulled this one\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13256093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13256122", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13256122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13256150", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13256150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13572007", "body": "Really need to learn to keep my promises - I will research this, guys.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13572007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13572927", "body": "How did you solve this? Extension method?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13572927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13629106", "body": "The problem is confirmed, but I believe it's on NHibernate side. They don't have a ticket for this currently, so I took a liberty of creating one https://nhibernate.jira.com/browse/NH-3400\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13629106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13786191", "body": "can you post your code along with an exception message, please? I understand the problem, but that would be a good start\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13786191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13786512", "body": "can you post generated hbm files for this? It just got to me that errors in SQL may have to do with NHibernate\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13786512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13798460", "body": "Closing this for now, as I think a mistake of using method instead of property in mapping definition is the source.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13798460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13799133", "body": "can you please clarify a little bit on this? There's a Subclass method that takes only the discriminator, without the lambda expression, in AutoMapping<T> class, which is provided when doing override.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13799133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13799357", "body": "Nice workaround :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13799357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13801981", "body": "May be I'm doing this wrong, but with this config https://gist.github.com/chester89/4990411 my convention isn't even called :(\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13801981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/4871098", "body": "TeamCity Fluent NHibernate :: Regular build [Build 1.3.6.102](http://localhost:1000/viewLog.html?buildId=176&buildTypeId=bt2) is now running\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/4871098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/4871136", "body": "TeamCity Fluent NHibernate :: Regular build [Build 1.3.6.102](http://localhost:1000/viewLog.html?buildId=176&buildTypeId=bt2) outcome was **SUCCESS**\nSummary: Tests passed: 3343, ignored: 20 Build time: 0:3:26\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/4871136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/32576991", "body": "Why InternalsVisibleTo?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/32576991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/32577265", "body": "Oh, I see - because you used PropertyMember\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/32577265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/32577348", "body": "I believe abstract class is not necessary here. If we had several test cases that can share the functionality - sure\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/32577348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "igitur": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/312", "title": "Throw exception (or do something) when cascading is set on element map with composite key", "body": "Currently, an element map with composite key cannot have cascading set. Refer to https://nhibernate.jira.com/browse/NH-2515\n\nBut I keep forgetting that and when I have my mapping as e.g.\n\n``` c#\n  HasMany<double>(v => v.Cashflows)\n                .AsMap<DateTime>(\"CashflowDate\")\n                .Table(\"MonthlyLiabilityCashflows\")\n                .Element(\"Cashflow\")\n                .KeyColumns.Add(\"Scheme_Id\", \"ValuationDate\", \"Type\")\n                .Inverse()\n                .Cascade.AllDeleteOrphan() \n                .LazyLoad();\n```\n\nthen I keep expecting that it should work. Surely this will confuse other users too. My suggestion is that FNH throw an exception or shows some other kind of warning when the schema builder tries to set the cascade property on an element map.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dittodhole": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/310", "title": "Connection to MS Access database with database password", "body": "I tried to use the following construct and expected that the connectionString will contain a `Jet OLEDB:Database Password`-section\n\n```\nJetDriverConfiguration.Standard.ConnectionString(arg => arg.DatabaseFile(\"foo\")\n                                                           .Password(\"foo\"));\n```\n\nThis was not the case, so I've implemented two classes to extend the `JetDriverConfiguration`-scenario by replacing it like so:\n\n```\npublic sealed class AccessConnectionStringBuilder : ConnectionStringBuilder\n{\n    private string databaseFile;\n    private string databasePassword;\n    private string password;\n    private string provider;\n    private string username;\n\n    public AccessConnectionStringBuilder()\n    {\n        this.provider = \"Microsoft.Jet.OLEDB.4.0\";\n    }\n\n    public AccessConnectionStringBuilder Provider(string provider)\n    {\n        this.provider = provider;\n        this.IsDirty = true;\n        return this;\n    }\n\n    public AccessConnectionStringBuilder DatabaseFile(string databaseFile)\n    {\n        this.databaseFile = databaseFile;\n        this.IsDirty = true;\n        return this;\n    }\n\n    public AccessConnectionStringBuilder Username(string username)\n    {\n        this.username = username;\n        this.IsDirty = true;\n        return this;\n    }\n\n    public AccessConnectionStringBuilder Password(string password)\n    {\n        this.password = password;\n        this.IsDirty = true;\n        return this;\n    }\n\n    public AccessConnectionStringBuilder DatabasePassword(string databasePassword)\n    {\n        this.databasePassword = databasePassword;\n        this.IsDirty = true;\n        return this;\n    }\n\n    protected override string Create()\n    {\n        var str = base.Create();\n        if (!string.IsNullOrEmpty(str))\n        {\n            return str;\n        }\n        var stringBuilder = new StringBuilder();\n        if (!string.IsNullOrEmpty(this.databasePassword))\n        {\n            stringBuilder.AppendFormat(\"Provider={0};Data Source={1};Jet OLEDB:Database Password={2};\",\n                                       this.provider,\n                                       this.databaseFile,\n                                       this.databasePassword);\n        }\n        else if (!string.IsNullOrEmpty(this.password))\n        {\n            stringBuilder.AppendFormat(\"Provider={0};Data Source={1};User Id={2};Password={3};\",\n                                       this.provider,\n                                       this.databaseFile,\n                                       this.username,\n                                       this.password);\n        }\n        else\n        {\n            stringBuilder.AppendFormat(\"Provider={0};Data Source={1}\",\n                                       this.provider,\n                                       this.databaseFile);\n        }\n\n        return stringBuilder.ToString();\n    }\n}\n\n\npublic class AccessDriverConfiguration : PersistenceConfiguration<AccessDriverConfiguration, AccessConnectionStringBuilder>\n{\n    protected AccessDriverConfiguration()\n    {\n        this.Dialect<JetDialect>();\n        this.Driver<JetDriver>();\n    }\n\n    public static AccessDriverConfiguration Standard\n    {\n        get\n        {\n            return new AccessDriverConfiguration();\n        }\n    }\n}\n```\n\nIs this a legit replacement, or is there anything alike in your library?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cristian-eriomenco": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/306", "title": "Question: Unique() constraint that allow NULLS ?", "body": "There is an interesting situation when is needed that a UNIQUE CONSTRAINT to take into account a WHERE clause.\neg for _SQL Server 2008_:\n\n```\nCREATE UNIQUE NONCLUSTERED INDEX idx_yourcolumn_notnull\nON YourTable(yourcolumn)\nWHERE yourcolumn IS NOT NULL;\n```\n\nThere is a topic on StackOverflow regards this situation :  \nhttp://stackoverflow.com/questions/767657/how-do-i-create-a-unique-constraint-that-also-allows-nulls\n\nSo I'm wondering if there is some way of acheiving conditional unique constrains with fluent nhibernate.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rocky3598": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/302", "title": "PostgreSQL Schema Name ToLower", "body": "If a user has created a schema in posgres that has an upper case letter in it fluent will not see it as it seems to mark the mapped schema name to lower variant. \n\nThe following exception is thrown when i have a schema name of \"Internal\". Within my map class i have also specified `Schema(\"Internal\");`\n\n`{\"An invalid or incomplete configuration was used while creating a SessionFactory. Check PotentialReasons collection, and InnerException for more detail.\\r\\n\\r\\n\"}`\n\nInner Exception:\n`{\"ERROR: 3F000: schema \\\"internal\\\" does not exist\"}`\n\nIf i change the schema name within postgres to \"internal\" it works fine. \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vagtborg": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/300", "title": "Unable to set command_timeout on Update", "body": "Hi,\n\nI am trying to set the command_timeout but it looks like it only affects Insert actions. Can you confirm if I am using the fluent API correct or if it is not related to fluent API.\n\nA) I set the command_timeout to 10 seconds (just for testing the real value should be higher)\nB) I set a trigger on the table to do a wait\n\n1) I do a Insert and that times out after 10 seconds\n2) I do a Update and that times out after 30 seconds (default NHibernate value I assume)\n3) I tested the same with delete and the timeout is also 30 seconds\n\nShouldn't the command_timeout affect all commands?\n\nThanks\nMikkel\n\nBelow is the example I used:\n\nI setup a factory like so:\n\nA)\nvar factory = Fluently.Configure()\n                   .Database(MsSqlConfiguration.MsSql2008.ConnectionString(conString).ShowSql())  \n                   .Mappings(m =>\n                       m.FluentMappings.AddFromAssemblyOf<Program>())\n                    .ExposeConfiguration(cfg => cfg.SetProperty(NHibernate.Cfg.Environment.CommandTimeout, \"10\"))\n                   .BuildSessionFactory();\n\nB)\nOn my test table I added a trigger (INSERT, UPDATE and DELETE) that just have \"WAITFOR DELAY '00:00:45'\"\n\n1) When I do a Insert:\nusing (var session = factory.OpenSession())\n                {\n                    using (var transaction = session.BeginTransaction())\n                    {\n                        var test = new Testtable() { Time = DateTime.Now };\n                        session.Save(test);\n                        transaction.Commit();\n                    }\n                }\n\nThis times out after 10 seconds.\n\n2) When I do an Update:\nusing (var session = factory.OpenSession())\n                {\n                    using (var transaction = session.BeginTransaction())\n                    {\n                        var test = session.Get<Testtable>(1); //Id = 1 is in the DB\n                        test.Time = DateTime.Now;\n                        session.Update(test);\n                        transaction.Commit();\n                    }\n                }\n\nThis timeout after 30 seconds\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alex-davidson": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/299", "title": "Id override is ignored if a property called 'Id' exists.", "body": "The following test fails:\n\n```\n[Test]\npublic void CanOverrideIdProperty()\n{\n    var model = AutoMap.Source(new StubTypeSource(new[] { typeof(EntityWithAlternateIdProperty) }))\n        .Override<EntityWithAlternateIdProperty>(o =>\n        {\n            o.Id(e => e.AlternateId);\n        });\n\n    HibernateMapping hibernateMapping = model.BuildMappings().First();\n\n    ClassMapping classMapping = hibernateMapping.Classes.First();\n    ((IdMapping)classMapping.Id).Name.ShouldEqual(\"AlternateId\");\n}\n\npublic class EntityWithAlternateIdProperty\n{\n    public int Id { get; set; }\n    public int AlternateId { get; set; }\n\n    public string Name { get; set; }\n}\n```\n\nIt seems that AutoMapper#TryMapProperty considers only whether or not the property has already been seen, rather than considering the type of mappings being generated by the rule. The sequence of events seems to be something like:\n1. Override is applied, creating an IdMapping referring to AlternateId and applied at Layer.Defaults. AlternateId is marked as 'seen'.\n2. Begins applying defaults. Properties are iterated.\n3. The Id property is encountered. It has not yet been mapped, so the mapping steps are run against it.\n4. IdentityStep creates an IdMapping referring to Id and applies it at Layer.Defaults. This obliterates the IdMapping created by the override.\n\nAdding `o.Map(e => e.Id);` to the override works around the problem because it prevents IdentityStep being executed for that property.\n\nI would expect overrides to be applied at Layer.UserSupplied but this does not appear to be the case. Is this a bug, or intended behaviour?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/beee728ce28ee86b4e14a2fd093c9dc023b8ead2", "message": "Removes unnecessary expression in favour of a compiled lambda.\n\nIncreases initial configuration speed considerably when using significant\nnumbers of conventions."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nomoresocks": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/296", "title": "NHibernate 4 update - Cannot simultaneously fetch multiple bags", "body": "I'm updating my current codebase to use NHibernate 4, and I've run into an issue with the fluent configuration on the current upgrade.  I have the following call to configure my mappings:\n\n```\nISessionFactory _SF = Fluently.\n        Configure(configuration).\n        Cache(x => x.UseSecondLevelCache().UseQueryCache().ProviderClass<NHibernate.Caches.SysCache.SysCacheProvider>()).\n        Mappings(m =>\n        {\n            m.FluentMappings.AddFromAssemblyOf<VenueLocationMap>().Conventions.Add(DefaultCascade.None());\n            m.AutoMappings.Add(AutoMap.AssemblyOf<SMSGroup>(new AutomappingConfiguration())\n                .Override<Communication>(x =>\n                    {\n                        x.References<Communicator>(y => y.PreviousMessage).Cascade.None();\n                        x.References<Communicator>(y => y.CurrentMessage).Cascade.None();\n                    })\n                .Conventions.Add(DefaultCascade.All())\n                );\n        }).CurrentSessionContext<HybridWebSessionContext>().BuildSessionFactory();\n```\n\nWhen I run that, I get a `QueryException` stating `Cannot simultaneously fetch multiple bags`.  I'm sure this is the result of some kind of deprecation that occurred in NHibernate 4, but it's not clear what transition should be made to make my mappings work.  What is the recommended course of action for this upgrade?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AqlaSolutions": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/276", "title": "Null instance.Property is passed to Id conventions when using inherited from base primary key with concrete entity mapping override", "body": "Example project:\nhttps://github.com/vbprogr/nhmapinheritancebug.git\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/275", "title": "Postgresql Schema Export: do not make integer id column serial if non native generator is specified", "body": "See http://stackoverflow.com/questions/24614778/do-not-make-integer-id-column-serial\n\nIn our project we need to create a db entry with assigned primary key but it becomes replaced with autoincremented value which is wrong.\n\nThe test project requires a postgres db server. https://github.com/vbprogr/nhpgserialbug.git\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "futurechan": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/274", "title": "Fluent nHibernate map HasMany to Entity/Table with no Primary Key", "body": "I am having the worst trouble trying to setup a `HasMany` relationship to an entity backed by a table with no primary key. \n\n`ClassA` has a `CompositeId`. To circumvent the lack of a `primary key` on `ClassB`, I tried to create a `CompositeId` on `ClassB` that was comprised all of the columns in the table. No matter what I've tried, nothing has worked.\n\nThese are my classes and mappings. \n\n```\n    public class ClassA\n    {\n        public virtual int a_1_id {get;set;}\n        public virtual string a_2_id {get;set;}\n\n        public virtual IList<classB> ClassBs { get; set; }\n\n        public override int GetHashCode()\n        {\n            int hashCode = 0;\n            hashCode = hashCode ^ a_1_id ^ a_2_id.GetHashCode();\n            return hashCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var toCompare = obj as ClassB;\n\n            return (toCompare != null) && (this.GetHashCode() != toCompare.GetHashCode());\n        }\n    }\n\n    public class ClassAMap : ClassMap<ClassA>\n    {\n        public ClassAMap()\n        {\n            Schema(\"dbo\");\n\n            Table(\"ClassA\");\n\n            Not.LazyLoad();\n\n            CompositeId()           \n                .KeyProperty(x => x.a_1_id, \"a_1_id\")\n                .KeyProperty(x => x.a_2_id, \"a_2_id\");      \n\n            HasMany(x => x.ClassBs)\n                .Table(\"ClassB\")\n                .KeyColumn(\"a_2_id\")\n                .Not.LazyLoad();\n        }\n    }\n\n    public class ClassB\n    {\n        public virtual string a_2_id {get;set;}\n        public virtual string b_field1 {get;set;}\n\n        public override int GetHashCode()\n        {\n            int hashCode = 0;\n            hashCode = hashCode         \n                ^ a_2_id.GetHashCode() \n                ^ b_field1.GetHashCode();\n\n            return hashCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var toCompare = obj as ClassB;\n\n            return (toCompare != null) && (this.GetHashCode() != toCompare.GetHashCode());\n        }\n    }\n\n    public class ClassBMap : ClassMap<ClassB>\n    {\n        public ClassBMap()\n        {\n            Schema(\"dbo\");\n\n            Table(\"ClassB\");\n\n            Not.LazyLoad();\n\n            CompositeId()           \n                .KeyProperty(x => x.a_2_id, \"a_2_id\")\n                .KeyProperty(x => x.b_field1, \"b_field1\");      \n        }\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codearoo": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/272", "title": "Not able to join on a joined table because not able to change Foreign key column", "body": "Hi..  I was thrilled when I found out how to use the Join() mapping method, but then was sad when I tried to nest it to join to another table for creating of a report object map. One of those situations where I need a report and the data I need is in bunch of tables, and also some of those tables will not have records (OUTER JOIN).\n\nIt seems the major thing missing (and easy to add?) is the ability to change the Foreign Key Column.. I construct the Join inside another Join's code and it \"works\" but it still uses the root table's ID field to link to the other table, which in my case is wrong. If I could just change that, it seems it should be OK.  Even if it used the primary ID of the table that was joined it would be OK (though not ideal)\n\n```\n        Table(\"`TABLE_1`\");\n        Schema(\"SCHEMA_1\");\n        Id(x => x.XYZ, \"XYZ\").GeneratedBy.Native();\n\n        Join(\"TABLE_2\", j =>\n        {\n            j.Schema(\"SCHEMA_1\");\n            j.Optional();\n            j.Fetch.Join();\n\n            j.KeyColumn(\"XYZ\");\n\n            // TABLE_2 is a linking table between TABLE_1 and TABLE_3.\n            // assume fields: TABLE_2.XYZ,  TABLE_2.ABC\n\n            Join(\"TABLE_3\", j2 =>\n            {\n                j2.Schema(\"SCHEMA_2\"); // It happens to be in another schema, but shouldn't matter.\n                j2.Optional();\n                j2.Fetch.Join();\n                j2.KeyColumn(\"ABC\");\n\n                // This table ends up being joined by  TABLE_1.XYZ:\n                //   ON TABLE_1.XYZ = TABLE_3.ABC\n                // but it needs to use TABLE_2.ABC so that we end up with:\n                //   ON  TABLE_2.ABC = TABLE_3.ABC\n            });\n\n        });\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasondentler": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/270", "title": "Unable to automap a simple collection of IUserTypes", "body": "Using an `IHasManyConvention` convention as follows, I can almost generate the correct mapping. However, I can't remove the `one-to-many` element.\n\n```\ninstance.AsSet();\nvar tableName = Inflector.Inflector.Pluralize(instance.EntityType.Name + instance.Member.Name);\ninstance.Table(tableName);\ninstance.Key.Column(instance.EntityType.Name + \"Id\");\ninstance.Element.Column(\"RoomId\");\ninstance.Element.Type<RoomUserType>();\n```\n\nThe `one-to-many` element is added by this code:\nhttps://github.com/jagregory/fluent-nhibernate/blob/master/src/FluentNHibernate/Automapping/Steps/CollectionStep.cs#L73\n\nThis is the closest I've been able to come to my desired mapping. I can't kill off the one-to-many with a convention.\n\n```\n<set name=\"Rooms\" table=\"TestEntityRooms\">\n  <key>\n    <column name=\"TestEntityId\" />\n  </key>\n  <element type=\"JobService.Core.Enumerations.RoomUserType, JobService.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n    <column name=\"RoomId\" />\n  </element>\n  <one-to-many class=\"JobService.Core.Enumerations.Room, JobService.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" />\n</set>\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charlbrink": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/261", "title": "ColumnPrefix only applied to first Component mapping inside a ComponentMap", "body": "When nesting Components, the ColumnPrefix is only applied to the first nested Component.\n\nExample Mapping follows:\nClassMap\n\n```\nComponent(x => x.Invoice).ColumnPrefix(\"Invoice\");\n```\n\nand \n\n```\npublic class InvoiceMap : ComponentMap<Invoice>\n{\n  public InvoiceMap()\n  {\n        Map(x => x.Guid);\n        Component<Text>(x => x.IssueLocation, n =>\n        {\n            n.Map(x => x.Content).Column(\"IssueLocation\");\n            n.Component<Code>(x => x.Language, c =>\n            {\n                c.Map(x => x.CodeListGuid).Column(\"IssueLocationLanguageCodeList\");\n                c.Map(x => x.Content).Column(\"IssueLocationLanguageContent\").Length(2);\n            });\n        });\n        Component<Text>(x => x.AuthenticationLocationName, n =>\n        {\n            n.Map(x => x.Content).Column(\"AuthLocationName\");\n            n.Component<Code>(x => x.Language, c =>\n            {\n                c.Map(x => x.CodeListGuid).Column(\"AuthLocationNameLanguageCodeList\");\n                c.Map(x => x.Content).Column(\"AuthLocationNameLanguage\").Length(2);\n            });\n        });\n```\n\nThe mapping above will result in database table column names:\nInvoiceGuid\nInvoiceIssueLocation\nInvoiceIssueLocationLanguageCodeList\nInvoiceIssueLocationLanguageContent\nAuthLocationName\nAuthLocationNameLanguageCodeList\nAuthLocationNameLanguage\n\nAuthLocationName\\* should also be prefixed with \"Invoice\"\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SirCmpwn": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/257", "title": "Unable to build on Mono", "body": "Problem's what it says on the tin. Couldn't build master, or 1.4.0.1. [xbuild output here](http://ix.io/a9R), Rakefile output here:\n\n```\nrake aborted!\nuninitialized constant Platform::CLR_TOOLS_VERSION\n/home/sircmpwn/sources/fluent-nhibernate/Rakefile:16:in `runtime'\n/home/sircmpwn/sources/fluent-nhibernate/Rakefile:46:in `block in <top (required)>'\n/home/sircmpwn/sources/fluent-nhibernate/Rakefile:44:in `<top (required)>'\n(See full trace by running task with --trace)\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Cristina-Alboni": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/251", "title": "Extend a mapping containing a composite key, and define a HasMany - doesn't work", "body": "I have the following scenario:\n- entity <b>UserRole</b> (UserRoleIdentifier - composite key described below, User, Role)\n- entity <b>AppUserRole</b> - extends the UserRole class\n- entity AppUserRole - <b>one to many</b> - UserRoleAdministrativeUnit\n\n<b>UserRoleIdentifier</b>\npublic virtual int UserId { get; set; }\npublic virtual int RoleId { get; set; }\n\nThe following code defines the one-to-many relation.\n\n[Serializable]\n    public class <b>AppUserRole</b> : UserRole\n    {\n        public virtual IList<UserRoleAdmUnit> UserRoleAdministrativeUnits { get; set; }\n    }\n\npublic class <b>AppUserRoleMap</b> : SubclassMap&lt;AppUserRole\n    {\npublic AppUserRoleMap()\n        {\n            HasMany(u => u.UserRoleAdministrativeUnits).KeyColumns.Add(\"UserId\", \"RoleId\").Cascade.Delete().Inverse();  \n        }\n}\n\nThere is an crash on this configuration when Fluent initializes:\n<b>collection foreign key mapping has wrong number of columns: Business.Model.UsersManagement.AppUserRole.UserRoleAdministrativeUnits type: component[UserId,RoleId] </b>\n\n<b>Stack Trace: </b>\n[MappingException: collection foreign key mapping has wrong number of columns: Business.Model.UsersManagement.AppUserRole.UserRoleAdministrativeUnits type: component[UserId,RoleId]]\n   NHibernate.Mapping.Collection.Validate(IMapping mapping) +390\n   NHibernate.Cfg.Configuration.ValidateCollections() +121\n   NHibernate.Cfg.Configuration.Validate() +38\n   NHibernate.Cfg.Configuration.BuildSessionFactory() +74\n   FluentNHibernate.Cfg.FluentConfiguration.BuildSessionFactory() +73\n\n[FluentConfigurationException: An invalid or incomplete configuration was used while creating a SessionFactory. Check PotentialReasons collection, and InnerException for more detail.\n- Database was not configured through Database method.\n  ]\n  FluentNHibernate.Cfg.FluentConfiguration.BuildSessionFactory() +117\n  Common.Library.NHibernate.Data.HibernateManager.Initialize() in d:\\Projects\\Infobest.Library\\src\\Projects\\Components\\Common.Library.NHibernate.Data\\HibernateManager.cs:125\n  Web.MvcApplication.Application_Start() in d:\\Projects\\3R\\Development\\RALInterfaceEditor\\Web\\Global.asax.cs:52\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tenninebt": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/244", "title": "Duplicate join exception thrown even with tables coming from different schemas/catalogs", "body": "Here is an example explaining the issue: \n\nWhen we do the following :\n\nJoin(\"tablename\", join =>\n                                    {\n                                        join.Schema(\"schema1\").Catalog(\"catalog1\");\n                                        join.Optional();\n                                        join.KeyColumn(\"somekeycolumn\");\n                                    });\n\nJoin(\"tablename\", join =>\n                                    {\n                                        join.Schema(\"schema2\").Catalog(\"catalog2\");\n                                        join.Optional();\n                                        join.KeyColumn(\"somekeycolumn\");\n                                    });\n\nFluent throws an exception : \nif (joins.Exists(x => x.TableName == mapping.TableName)\n                throw new InvalidOperationException(\"Tried to add join to table '\" + mapping.TableName + \"' when already added.\");\n\nThe check should look more like : \n\nif (joins.Exists(x => x.TableName == mapping.TableName && x.Schema == mapping.Schema && x.Catalog == mapping.Catalog))\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/4441781", "body": "Here, we should also check if the schema and catalog are equal to the mapping ones. Actually, when you try to map the different tables having the same name but coming from different catalogs you will have an exception while you shouldn't.\nThe check should be something like :\nif (joins.Exists(x => x.TableName == mapping.TableName && x.Schema == mapping.Schema && x.Catalog == mapping.Catalog))\nDon't you agree?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/4441781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hashemp206": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/242", "title": "Automapping a Tree Model with with FluentNhibernate", "body": "I have a tree structured model and designed it with composite Pattern. for iterating through the entire hierachy Im using Composite Iteration.\nhere is the source code:\n\nhttp://www.mediafire.com/download/v78f97mt51y27j6/Fluent-NHibernate-MVC-3_Combat.rar\n\nbut when I want to AutoMap the model, I encounter this problem:\n\n> {\"The entity '<<GetEnumerator>GetEnumerator>d__0' doesn't have an Id mapped. Use the\n> Id method to map your identity property. For example: Id(x => x.Id).\"}\n\nbut getEnumerator is a method. I don't know why handle this like an Entity!!\n\n```\npublic IEnumerator<CombatElement> GetEnumerator()\n        {\n             foreach (CombatElement child in combatElements)\n                yield return this;\n        }\n```\n\nhere is my AutoMapping Configuration :\n\n```\npublic class AutomappingConfiguration: DefaultAutomappingConfiguration\n    {\n        //As we do not explicitly map entities or value objects, we define conventions or exceptions \n        //for the AutoMapper. We do this by implementing a configuration class.\n\n        //this method instructs the AutoMapper to consider only those classes for mapping \n        //which reside in the same namespace as the Employeeentity.\n        public override bool ShouldMap(Type type)\n        {\n           return type.Namespace == typeof(CombatElement).Namespace;\n\n        }\n\n\n    }\n```\n\nUploaded the sample code:\n\n```\npublic abstract class CombatElement\n{\n    public virtual string Name { get; set; }\n    public virtual Guid Id { get; set; }\n\n    public virtual void Add(\n        CombatElement element)\n    {\n        throw new NotImplementedException();\n    }\n\n    public virtual void\n        Remove(CombatElement element)\n    {\n        throw new NotImplementedException();\n    }\n\n    public virtual\n        IEnumerable<CombatElement>\n            GetElements()\n    {\n        throw new NotImplementedException();\n    }\n\n\n\n    public abstract void Fight();\n    public abstract void Move();\n}\n```\n\n//////\n\n```\n using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nusing System.Diagnostics;\n\nnamespace FluentNHibernateMvc3.Models\n\n{\n    public class Formation : CombatElement\n    {\n        private List<CombatElement> _elements;\n        public virtual IEnumerable<CombatElement> Elements { get { return _elements; } }\n\n        public Formation()\n    {\n        _elements = new List<CombatElement>();\n    }\n\n    public override void Add(\n        CombatElement element)\n    {\n        _elements.Add(element);\n    }\n\n    public override void\n        Remove(CombatElement element)\n    {\n        _elements.Remove(element);\n    }\n\n    public override void Fight()\n    {\n        Debug.WriteLine(this.Name + \" Formation is fighting\");\n    }\n\n    public override void Move()\n    {\n        Debug.WriteLine(this.Name + \" Formation is moving\");\n    }\n\n    public override\n        IEnumerable<CombatElement>\n            GetElements()\n    {\n        // yield up this current object first\n        yield return this;\n\n        // iterate through all child elements\n        foreach (CombatElement fe in\n            _elements)\n        {\n            // + iterate through each of its elements\n            foreach (CombatElement feInner\n                    in fe.GetElements())\n                yield return feInner;\n        }\n    }\n}\n```\n\n}\n\n/////////\n\n```\npublic class Soldier : CombatElement\n{\n    public virtual int Rank { get; set; }\n\n    public override void Fight()\n    {\n        Debug.WriteLine(this.Name + \" soldier is fighting\");\n    }\n\n    public override void Move()\n    {\n        Debug.WriteLine(this.Name + \" soldier is fighting\");\n    }\n\n    public override\n        IEnumerable<CombatElement>\n            GetElements()\n    {\n        yield return this;\n    }\n}\n```\n\nand here how I create session factory\n\n```\n // Returns our session factory\n    private static ISessionFactory CreateSessionFactory()\n    {\n        //m => m.FluentMappings.AddFromAssemblyOf<FormationMap>()\n        return Fluently.Configure()\n            .Database( CreateDbConfig )\n            .Mappings(m => m.AutoMappings.Add(CreateMappings()))\n            .ExposeConfiguration( UpdateSchema )\n            .CurrentSessionContext<WebSessionContext>()\n            .BuildSessionFactory();\n    }\n\n    // Returns our database configuration\n    private static MsSqlConfiguration CreateDbConfig()\n    {\n        return MsSqlConfiguration\n            .MsSql2008\n            .ConnectionString( c => c.FromConnectionStringWithKey( \"testConn\" ) );\n    }\n\n    // Returns our mappings\n    private static AutoPersistenceModel CreateMappings()\n    {\n        var cfg = new AutomappingConfiguration();\n        return AutoMap\n            .Assemblies(cfg,System.Reflection.Assembly.GetCallingAssembly()).IncludeBase<CombatElement>()\n            .Conventions.Setup( c => c.Add( DefaultCascade.SaveUpdate() ) );\n    }\n\n    // Updates the database schema if there are any changes to the model,\n    // or drops and creates it if it doesn't exist\n    private static void UpdateSchema( Configuration cfg )\n    {\n        new SchemaUpdate( cfg )\n            .Execute( false, true );\n    }\n```\n\nDoes anyone has any idea?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "svallory": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/239", "title": "User type convention isn't applied to primary keys", "body": "Hi,\n\nIs it by design that a UserTypeConvention isn't applied to primary keys? If so, I think it should be advertised somewhere. If not, I just found a bug.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fennekit": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/234", "title": "Dictionary mapping maps to interfaces instead of implemention", "body": "I have a IDictionary<IA, IB> dictionary in my class. I try to map this with FluentNHibernate but it creates a wrong mapping. The application shows that it generates a map using IA and IB instead of classes A and B. This is also clearly visible from the exported *.hbm.xml files. I am using Fluent-nhibernate 1.3.\n\nThe following code shows the problem:\n\n``` c#\nusing FluentNHibernate.Cfg;\nusing FluentNHibernate.Mapping;\nusing NHibernate;\nusing NHibernate.Cfg;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApplication2\n{\n    public interface IA\n    {\n        int Id { get; set; }\n        string PropA { get; set; }\n    }\n\n    public interface IB\n    {\n        int Id { get; set; }\n        string PropB { get; set; }\n    }\n    public interface IC\n    {\n        int Id { get; set; }\n        IDictionary<IA, IB> Dictionary { get; set; }\n    }\n    public class A : IA\n    {\n        public virtual int Id { get; set;}\n        public string PropA { get; set; }\n    }\n    public class B : IB\n    {\n        public virtual int Id { get; set; }\n        public string PropB { get; set; }\n    }\n\n    public class C : IC\n    {\n        public virtual int Id { get; set; }\n        public virtual IDictionary<IA, IB> Dictionary { get; set; }\n    }\n\n    public class AMapper : ClassMap<A>\n    {\n        public AMapper()\n        {\n            Id(x => x.Id).GeneratedBy.Identity().Column(\"id\");\n            Map(x => x.PropA).Column(\"propa\");\n        }\n    }\n    public class BMapper : ClassMap<B>\n    {\n        public BMapper()\n        {     \n            Id(x => x.Id).GeneratedBy.Identity().Column(\"id\");\n            Map(x => x.PropB).Column(\"propa\");\n        }\n    }\n    public class CMapper : ClassMap<C>\n    {  \n        public CMapper()\n        {     \n            Id(x => x.Id).GeneratedBy.Identity().Column(\"id\");\n            HasMany<C>(x => x.Dictionary).Table(\"dict_table\").AsEntityMap(\"C_id\").KeyColumn(\"B_id\");\n        }\n    }\n\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration conf = new Configuration().Configure();\n            //configuration.AddAssembly(typeof(Program).Assembly);\n\n            var nhConfig = Fluently.Configure(conf)\n            .Mappings(mapping => \n                {\n                    mapping.FluentMappings.AddFromAssembly(typeof(A).Assembly);\n                    mapping.FluentMappings.ExportTo(@\"c:\\temp\\\");\n                })\n                .ExposeConfiguration(cfg =>{});\n\n            Configuration configuration = nhConfig.BuildConfiguration();\n            ISessionFactory sessionFactory = configuration.BuildSessionFactory();\n            sessionFactory.OpenSession();\n\n\n        }\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/237", "title": "extended the API for EntityMaps", "body": "extended the API to allow for specification of index Type and value type in case of EntityMaps.\n\nI tried to create test, but unfortunately I could not find how to test if the types are set correctly. It works in my test application.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Trinition": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/230", "title": "GeneratorBuilder.Identity() unnecessarily restricting to integral types", "body": "GeneratorBuilder.Indentity() internalls calls EnsureIntegralIdenityType() to enforce that the identifier's type be integral.  However, NHibernate itself doesn't have that restriction.\n\nIn my case, I'm using a custom NHibernate IUserType for my identifier:\n\n```\n        Id(x => x.Id)\n            .GeneratedBy.Identity()\n            .CustomType<BaseIdUserType<FooId>>()\n            .UnsavedValue(0);\n```\n\nFluent NHibernate throws the exception from EnsureIntegralIdenityType().  However, if I cheat and work-around Fluent NHibernate's restriction, everything works just fine:\n\n```\n        Id(x => x.Id)\n            .GeneratedBy.Custom(\"identity\")\n            .CustomType<BaseIdUserType<FooId>>()\n            .UnsavedValue(0);\n```\n\nIn my case, my custom type is, in fact, convertible to an int, although I'm not sure that NHibernate itself would care if I instead were convertible to a GUID, or other supported type.\n\nI'm not sure I understand the spirit of why Fluent NHibernate goes this far in trying to enforce restrictions.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/223", "title": "Table name conventions thwarted by defaults", "body": "This issue originated as a discussion on the fluent nhibernate google group: https://groups.google.com/d/msg/fluent-nhibernate/ZgZwAYggeJY/eSPreHRWzhcJ\n\nI believe this is new in Fluent NHibernate 1.3 due to this change: https://github.com/jagregory/fluent-nhibernate/commit/f3186cba6182178c01377f7218df21317ca577de#diff-156\n\nAs I understand it, the table name determination behavior should be this:\n1. If there is an explicitly set table name on a ClassMap, use that table name.\n2. Else, if there is a convention, use that convention's table name.\n3. Else, use a sensible default value (e.g. \"`MyEntity`\")\n\nHowever, in practice, the logic isn't being honored in that order.  I do not have an explicit table name on my Classmap, but I do have a convention.  However, my convention is finding that there is already a table name implicitly set -- to the sensible default.  That is, when I debug and watch my convention's criteria -- Is.Not.Set -- execute, it finds there is in fact a table name set, so my convention skips setting one.  but that table name it found already set is the one from the sensible default!\n\nSo if you have a convention like this:\n\n```\nvar myConvention = ConventionBuilder.Class.When(\n            c => c.Expect(x => x.TableName, Is.Not.Set),\n            x => x.Table(string.Format(\"tbl{0}s\", x.EntityType.Name)));\n```\n\n...and a ClassMap like this:\n\n```\npublic class EventMap : ClassMap<Event> {} // No explicit table name set\n```\n\n...then the default table name for this class mapping should be \"tblEvents\".  However, the actual table name determined at runtime is \"Events\", not \"tblEvents\".  I'm fairly certain this originates from the \"default\" being applied and NOT overridden by the convention.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "avolgin": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/222", "title": "Fluent NHibernate table-per-inheritance (TPH) mapping for multi class in the hierarchy", "body": "Hello everyone,\n\nI'm struggling with one Fluent NHibernate issue. I have following template of class structure in the my solution:\n\nclass OneClass\n{\n    public virtual string OneProp {get; set;}\n}\n\nclass TwoClass : OneClass\n{\n     public virtual string TwoProp {get; set;}\n}\n\nclass ThreeClass : TwoClass\n{\n     public virtual string ThreeProp {get; set;}\n}\n\nAnd I want to use table-per-inheritance hierarchy strategy for my classes for contains all data in one table in a database.\n\nHow it possible to do via Fluent NHibernate?\n\nI have posted this question to StackOverflow too:\nhttp://stackoverflow.com/questions/16563530/fluent-nhibernate-table-per-inheritance-tph-mapping-for-multi-class-in-the-hie\n\nSincerely,\nVolgin Alexey\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chilversc": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/219", "title": "Allow mapping columns by convention", "body": "When mapping an IUserType or an ICompositeUserType by convention there is no ability to specify defaults for the column names.\n\nI would like to be able to do something like\n\n```\npublic class DateTimeOffsetConvention : IPropertyConvention, IPropertyConventionAcceptance\n{\n    public void Accept (IAcceptanceCriteria<IPropertyInspector> criteria)\n    {\n        criteria.Expect (x => x.Type == typeof (DateTimeOffset));\n    }\n\n    public void Apply (IPropertyInstance instance)\n    {\n        instance.CustomType<DateTimeOffsetType> ();\n        instance.Columns.Add (\"Utc\");\n        instance.Columns.Add (\"Offset\");\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/151", "title": "Default enum type mapping prevents using imported type in HQL queries", "body": "# Problem\n\nMapping an enum property without specifying a custom type prevents using the imported enum type in HQL queries.\n\ne.g.\n\n``` C#\npublic class Foo { public Bar Status { get; set; } }\npublic enum Bar { X, Y }\n\npublic class FooMapping : ClassMap<Foo>\n{\n    public FooMapping()\n    {\n        Map(x => x.Status);\n        ImportType<Bar>();\n    }\n}\n\nsession.CreateQuery(\"FROM Foo WHERE Status = Bar.Y\").List<Foo>();\n```\n\nSee, https://github.com/chilversc/FNH-EnumError for a sample project that reproduces this error.\n# Expected behaviour\n\nThe query should work and return a list of foo's that have their status equal to Y.\n# Actual behaviour\n\nThe query fails with an exception from the database driver with the message, \"Column Y not found\".\n# Workaround\n\nIn the mapping specify `Map(x => x.Status).CustomType(\"\")`\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/109", "title": "IgnoreProperty does not ignore overridden properties in sub-classes", "body": "`mapping.IgnoreProperty (x => x.IsOverriden)` does not ignore properties that are overriden in sub-classes.\nFurther more, it cannot ignore properties that are overriden in sub-classes.\n\nEg\n\n``` csharp\n    public class ItemBase { public virtual bool IsOverriden { get { return false; } } }\n    public class Item : ItemBase { public override bool IsOverriden { get { return true; } } }\n```\n\nThis partially works, it will ignore `ItemBase.IsOverriden` but not `Item.IsOverriden`\n\n``` csharp\n    public void Override (AutoMapping<ItemBase> mapping) {\n        mapping.IgnoreProperty (x => x.IsOverriden);\n    }\n```\n\nThis does _not_ work, Item.IsOverriden will not be ignored.\n\n``` csharp\n    public void Override (AutoMapping<Item> mapping) {\n        // This does not work, it will not ignore Item.IsOverriden\n        mapping.IgnoreProperty (x => x.IsOverriden);\n    }\n```\n\nAs a work around the following does work:\n\n``` csharp\n    public void Override (AutoMapping<Item> mapping) {\n        mapping.IgnoreProperty (Reveal.Member<Item> (\"IsOverriden\"));\n    }\n```\n\n---\n\nThe following example reproduces the error with FNH 1.3.0.717 and earlier: https://gist.github.com/1358583\n\n``` csharp\n// uses NHibernate 3.2.0.4000\n// uses FluentNHibernate 1.3.0.717\n\nnamespace ConsoleApplication1\n{\n    using System;\n    using System.IO;\n    using FluentNHibernate;\n    using FluentNHibernate.Automapping;\n    using FluentNHibernate.Automapping.Alterations;\n    using FluentNHibernate.Cfg;\n    using FluentNHibernate.Cfg.Db;\n\n    public class Program\n    {\n        public static void Main()\n        {\n            var cfg = new AutoMappingConfiguration ();\n            var mapping = AutoMap\n                .AssemblyOf<AutoMappingConfiguration> (cfg)\n                .UseOverridesFromAssemblyOf<AutoMappingConfiguration> ()\n                .Conventions.AddFromAssemblyOf<AutoMappingConfiguration> ();\n\n            using (var file = File.CreateText (\"mapping.xml\"))\n                Fluently.Configure ()\n                    .Database (SQLiteConfiguration.Standard.InMemory)\n                    .ProxyFactoryFactory<NHibernate.Bytecode.DefaultProxyFactoryFactory> ()\n                    .Mappings (m => m.AutoMappings.Add (mapping).ExportTo (file))\n                    .BuildConfiguration ();\n        }\n    }\n\n    public class AutoMappingConfiguration : DefaultAutomappingConfiguration\n    {\n        public override bool ShouldMap(Type type)\n        {\n            return type == typeof (ItemBase) || type == typeof (Item);\n        }\n    }\n\n    public class ItemBaseOverride : IAutoMappingOverride<ItemBase>\n    {\n        public void Override (AutoMapping<ItemBase> mapping)\n        {\n            mapping.IgnoreProperty (x => x.IsOverriden);\n        }\n    }\n\n    public class ItemOverride : IAutoMappingOverride<Item>\n    {\n        public void Override (AutoMapping<Item> mapping)\n        {\n            // Fails:\n            mapping.IgnoreProperty (x => x.IsOverriden);\n\n            // Works:\n            //mapping.IgnoreProperty (Reveal.Member<Item> (\"IsOverriden\"));\n        }\n    }\n\n    public class ItemBase\n    {\n        public long Id { get; set; }\n        public string Name { get; set; }\n\n        public virtual bool IsOverriden\n        {\n            get { return false; }\n        }\n    }\n\n    public class Item : ItemBase\n    {\n        public override bool IsOverriden\n        {\n            get { return true; }\n        }\n    }\n}\n```\n\nExample Result (cleaned up a little)\n\n``` xml\n<hibernate-mapping xmlns=\"urn:nhibernate-mapping-2.2\">\n  <class xmlns=\"urn:nhibernate-mapping-2.2\" name=\"ConsoleApplication1.ItemBase, ConsoleApplication1\" table=\"`ItemBase`\">\n    <id name=\"Id\">\n      <generator class=\"identity\" />\n    </id>\n    <property name=\"Name\" />\n    <joined-subclass name=\"ConsoleApplication1.Item, ConsoleApplication1\">\n      <key>\n        <column name=\"ItemBase_id\" />\n      </key>\n      <property access=\"property\" name=\"IsOverriden\" />\n    </joined-subclass>\n  </class>\n</hibernate-mapping>\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2744714", "body": "Ideally I think auto-mapping should ignore properties in sub-classes that are already mapped by a super-class rather than mapping the same property twice.\n\n### Cases\n1. super-class is not mapped, thus property is not mapped, sub-class _must_ define the property.\n2. super-class is mapped, thus the property is mapped, sub-class _must not_ define the property.\n3. super-class is mapped but property was ignored, thus property is not mapped, sub-class _must_ define the property.\n4. super-class is mapped but property was ignored for all sub-classes, thus property is not mapped, sub-class _must not_ define the property.\n\n---\n\n3 could be optional if 4 is always assumed. I.E. ignores are always inherited, though this would be a breaking change.\n4  would require adding an extra ignore method to `AutoMapping<T>`, e.g. `mapping.IgnorePropertyForAllSubClasses (x => x.IsOverriden)`\n\nIt might also be worth while looking at how inheritance as a whole is handled rather than just ignoring properties as a similar problem occurs when declaring a super-class' abstract property as `Access.ReadOnly()`, you then have to ignore that property from each of the sub-classes.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2744714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7611446", "body": "Tested out some other types:\n\n``` C#\n// This works\nMap (x => x.Bar).CustomType (\"\");\nMap (x => x.Bar).CustomType (typeof(NHibernate.Type.EnumType<Bar>));\n\n// This does not work\nMap (x => x.Bar);\nMap (x => x.Bar).CustomType (typeof(FluentNHibernate.Mapping.GenericEnumMapper<Bar>));\nMap (x => x.Bar).CustomType (typeof(NHibernate.Type.EnumStringType<Bar>));\n```\n\nLooking at the various types, the key seems to be NHibernate.Type.PersistentEnumType, which seems to be the default class NHibernate uses if you don't specify.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7611446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brantb": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/212", "title": "CheckList fails on unidirectional one-to-many relationships", "body": "Given the following domain model and mappings:\n\n```\npublic class Order {\n    public virtual Guid Id { get; set; }\n    public virtual ICollection<LineItem> LineItems { get; set; }\n}\npublic class LineItem {\n    public virtual Guid Id { get; set; }\n}\n// OrderMap.cs\nId(x => x.Id).GeneratedBy.GuidComb();\nHasMany(x => x.LineItems)\n  .Not.Inverse()\n  .Not.KeyNullable()\n  .Not.KeyUpdate()\n  .Cascade.AllDeleteOrphan();\n// LineItemMap.cs\nId(x => x.Id).GeneratedBy.GuidComb();\n```\n\nThe following code will throw a PropertyValueException when `CheckList()` is called:\n\n```\nvar order = new Order() { LineItems = new List<LineItem>() };\norder.LineItems.Add(new LineItem());\nnew PersistenceSpecification<Order>(session)\n  /* NHibernate.PropertyValueException: not-null property references \n   * a null or transient value LineItem._Order.LineItemsBackref */\n    .CheckList(o => o.LineItems, order.LineItems)\n    .VerifyTheMappings();\n```\n\nThis happens because `CheckList()` [tries to immediately save the LineItems in the list](https://github.com/jagregory/fluent-nhibernate/blob/40d05ae2096811246719470a47d1d30d14c57147/src/FluentNHibernate/Testing/Values/ReferenceList.cs#L16), which doesn't work because the relationship is unidirectional.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajoka": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/207", "title": "Problem with conventions when combining AutoMap and Fluent mappings", "body": "Ive tried to combine auto-mapping with fluent mapping and hbm.xml\n\nIve added the same conventions for the autoMAp as for the fluent.\nEveryting was ok.\nIf I removed the conventions from the AutoMap part, the conventions were not applied for the Fluent either.\n\n_configuration = Fluently.Configure()\n    .Database(persistenceConfigurer)\n    .Mappings(m =>\n    {\n        m.AutoMappings.Add(\n            AutoMap.AssemblyOf<Entita>(new AutoMappingConfiguration())\n    .Conventions.AddFromAssemblyOf<AutoMappingConfiguration>()\n    // If you ommit conventions here, .FluentMappings.Conventions won't work either!\n);\n                        m.FluentMappings.Conventions.AddFromAssemblyOf<IMappingNamespaceMarker>();              m.FluentMappings.AddFromAssemblyOf<IMappingNamespaceMarker>();\n                    m.HbmMappings.AddFromAssemblyOf<IMappingNamespaceMarker>();\n                    })\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "techniq": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/204", "title": "Map collection as QueryOver<>", "body": "I've grown accustomed in SQLAlchemy (Python) to map a relationship/collection with `lazy=\"dynamic\"` which maps the property as a Query object instead of a populated list/collection (or Proxy for lazy loaded properties).  This mapped property then allows you to further refine the query used to fetch the collection before doing so (apply an order, limit, filter, etc).\n\nFor example, in SQLAlchemy I can map a relationship like so:\n\n```\nclass Post(Base):\n    ...\n\nclass User(Base):\n    ...\n    posts = relationship(Post, lazy=\"dynamic\")\n```\n\nAnd then when I retrieve a user, I can apply an order on posts, or only retrieve the last 5, etc.\n\n```\nuser = session.query(User).get(1)\n\n# Fetch the last 5 posts by user 1\nposts = user.posts.order_by(Post.create_date.desc()).limit(5).all()\n```\n\nhttp://docs.sqlalchemy.org/en/rel_0_7/orm/collections.html\n\n---\n\nI would love to find a way to do this using Fluent NHibernate, mapping the collection as a QueryOver or IQueryable (LINQ) such as:\n\n```\npublic virtual QueryOver<Post> Posts {get; set;}\nor\npublic virtual IQueryable<Post> Posts { get; set; }\n```\n\nand in the mappings do something like:\n\n```\npublic class UserMap : ClassMap<User>\n{\n    public UserMap()\n    {\n        ...\n        HasMany(u => u.Posts).Fetch.Dynamic\n    }\n}\n```\n\nIs this currently possible using Fluent NHibernate (or just NHibernate)?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092893", "body": "I originally asked this on StackOverflow (http://stackoverflow.com/questions/13979131/map-collection-as-queryable), and received this response:\n\n> **It is possible using NHibernate, however it's not quite out of the box.**\n> \n> You would need to write your own collectionwrapper implementing IQueryable, inject it with your own CollectionFactory and delegate the query generation to the session which loaded the containing object.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13092893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13093221", "body": "Sounds good, I'll see what I can do.  It will probably be a while for me to get around to this (jumping between a lot of projects lately), but I'll update this issue when I do (or if something updates my StackOverflow question with a full solution).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13093221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "be-philippe": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/203", "title": "Reintroduce virtual protected methods", "body": "In version 1.1, I designed classes deriving from MapClass and SubmapClass to handle default behaviours in my class library.\nAmong other things, this implied to override protected methods such as\n\n```\n    protected override OneToManyPart<TChild> HasMany<TChild>(Member member)\n    {\n        return MapHelper.HasMany<TChild>(member, base.HasMany<TChild>(member));\n    }\n\n    protected override PropertyPart Map(Member property, string columnName)\n    {\n        return MapHelper.Map(property, base.Map(property, columnName));\n    }\n```\n\nMapHelper then adds what is needed to the xxxPart.\n\nIn version 1.3, these are now private.\nIs is possible to modify these back to virtual protected ?\nIs there now another way to handle these situations ?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "infoquestsolutinos": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/199", "title": "When using Custom identity generator fluent nhibernate stops generating tables", "body": "I have been successful using Custom identity generator my code is as below Id(x => x.Id).GeneratedBy.Custom(p => p.AddParam(\"ENT\", \"5\"))\n\nBut when ever custom id generation is turned on for any of my Map class fluent nhibernate stops creating new tables. When i comment this code and moves all the entities to Id(x=>x.Id) it start working .Any one knows some thing about it.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11430549", "body": "I am using Sql Server 2008.\n\nThanks\nGaurav\nhttp://www.infoquestsolutions.com\nTurning Imagination To Reality\nSkype:- infoquestsolutions\nYahoo:- info_quest_solutions\nGtalk:- infoquestindia\n\nOn Mon, Dec 17, 2012 at 3:56 PM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> May be you can tell what DBMS you're using - Sql Server, Oracle, MySql,\n> any other one?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/199#issuecomment-11430528.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11430549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11600623", "body": "Any Luck chester89 ?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11600623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AndrewMayorov": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/198", "title": "Ability to fluently map subclass for class mapped by hbm files", "body": "In our project we have a lot of classes that are already mapped by \"traditional\" method - hbm.xml file for each class. In new subprojects we started to introduce fluent nhibernate and encountered the problem - one can not map fluently a class that should be a joined-subclass of a class mapped with a file. \n\nGenerally it shouldn't be a problem. In configuration XML it is possible to separate sublclasses to different files.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "heraclex": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/197", "title": "Data not found error when mapping property (object) to Function(return type table)", "body": "Hi all,\n\nI have a problem, when I'm trying map function from DB to property (obj).\n- Design from database [Contact] has many [ContactDetail]\n  ![tttt.png](https://f.cloud.github.com/assets/3005971/3125/8e49def2-42a8-11e2-85de-ca18099b1e53.png)\n\nAnd only one ContactDetail was in current which will be loaded in first time connect to DB with Contact, but in progress the data result throw an exception \" Data not found\" although the data in DB always be available.\n\nthis is my code below:\n\nMy interfaces defination\n\n``` D\npublic interface IContact\n    {\n         int id {get;set;}\n         string NINumber { get; set; }         \n         IList<IContactDetailActive > ContactDetailList {get;set}\n\n         // Only one contact detail in current\n         IContactDetailActive ContactDetailActive {get;set;}\n    }\n\npublic interface IContactDetail\n    {\n         int id {get;set;}\n         string Description{ get; set; }         \n         IContact Contact {get;set;}\n    }\n```\n\nImplementation classes\n\n``` D\npublic interface Contact : IContact\n    {\n         public virtual int id {get;set;}\n         public virtual string NINumber { get; set; }         \n         public virtual IList<IContactDetailActive > ContactDetailList { get; set; }\n         public virtual IContactDetailActive ContactDetailActive {get;set;}\n    }\n\npublic interface ContactDetail : IContactDetail\n    {\n         public virtual int id {get;set;}\n         public virtual string Description{ get; set; }         \n         public virtual IContact Contact {get;set;}\n    }\n```\n\nClass map\n\n``` D\n    /// <summary>\n    /// Contact mapping class.\n    /// </summary>\n    public class ContactMap : ClassMap<Contact>\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ContactMap\"/> class.\n        /// </summary>\n        public ContactMap()\n        {\n            this.LazyLoad();\n            this.Id(x => x.Id).GeneratedBy.Native().Column(\"ContactID\");\n            this.Map(x => x.NINumber).Length(20).Nullable();\n            this.HasMany<ContactDetail>(x => x.ContactDetailList).KeyColumn(\"ContactID\").Cascade.All().Inverse();\n            this.Reference<ContactDetail>(x => x.ContactDetailActive).KeyColumn(\"ContactID\").Formular(\"dbo.GetContactDetailActive(ContactID)\").Not.Insert().Not.Update();          \n        }\n    }\n\n    /// <summary>\n    /// Contact detail mapping Definition.\n    /// </summary>\n    public class ContactDetailMap : CxEntityWithEffectiveDateMap<ContactDetail>\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ContactDetailMap\"/> class.\n        /// </summary>\n        public ContactDetailMap()\n        {\n            this.LazyLoad();\n            this.Id(x => x.Id).Column(\"ContactDetailId\").GeneratedBy.Identity();\n            this.Map(x => x.Description).Nullable();        \n            References<Contact>(x => x.Contact).Column(\"ContactId\");\n        }\n    }\n\n```\n\n``` SQL\nCreate FUNCTION [dbo].[GetContactDetailActive](@ContactId int)\nRETURNS TABLE\nAS RETURN\n(\n    SELECT TOP 1 * FROM ContactDetail WHERE ContactId = @ContactId ORDER BY ContactDetailId DESC\n);\n```\n\nSomeone else has the same problem ? I need your help\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmu75": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/193", "title": "Support for CustomType Parameters", "body": "Unfortunately it is not possible to configure CustomType implementations using parameters directly in fluent nhibernate.\nI'm aware of that this is possible using hbm.xml files but i don't like the idea of spreading the mapping configuration over multiple files.\n\nTherefore I would rather prefer one of these solutions:\n\n<pre>\npreferred syntax:\nc.Map(...).CustomType&lt;MyType&gt;(myTypeInstance => {\n  myTypeInstance.MyProperty1(\"value1\");\n  myTypeInstance.MyProperty2(\"value2\"))\n\nalternative syntax:\nc.Map(...).CustomType&lt;MyType&gt;(new Dictionary&lt;string, object&gt; {\n  { \"MyProperty1\", \"value1\" }, \n  { \"MyProperty2\", \"value2\" }})\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adamdallis": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/192", "title": "Duplicated filter-def named exception when having multiple mappings", "body": "I have followed the instructions in the link below. It seems to compile xml fine when I have 1 mapping but if I add 2 I get an exception. below find my config the link with code and the exception. If you need anything please contact me.\n\nhttp://stackoverflow.com/questions/960625/syntax-to-define-a-nhibernate-filter-with-fluent-nhibernate\n\n.Mappings(m => m.FluentMappings.AddFromAssemblyOf<AgentMap>())\n.Mappings(m => m.FluentMappings.AddFromAssemblyOf<HotelMap>())\n\n[MappingException: Duplicated filter-def named: ]\n   NHibernate.Cfg.Mappings.AddFilterDefinition(FilterDefinition definition) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Mappings.cs:472\n   NHibernate.Cfg.XmlHbmBinding.MappingRootBinder.AddFilterDefinitions(HbmMapping mappingSchema) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\XmlHbmBinding\\MappingRootBinder.cs:75\n   NHibernate.Cfg.XmlHbmBinding.MappingRootBinder.Bind(HbmMapping mappingSchema) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\XmlHbmBinding\\MappingRootBinder.cs:26\n   NHibernate.Cfg.Configuration.AddDeserializedMapping(HbmMapping mappingDocument, String documentFileName) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:522\n\n[MappingException: Could not compile the mapping document: (XmlDocument)]\n   NHibernate.Cfg.Configuration.LogAndThrow(Exception exception) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:342\n   NHibernate.Cfg.Configuration.AddDeserializedMapping(HbmMapping mappingDocument, String documentFileName) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:530\n   NHibernate.Cfg.Configuration.AddValidatedDocument(NamedXmlDocument doc) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:499\n   NHibernate.Cfg.Configuration.ProcessMappingsQueue() in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:1832\n   NHibernate.Cfg.Configuration.AddDocumentThroughQueue(NamedXmlDocument document) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:1823\n   NHibernate.Cfg.Configuration.AddXmlReader(XmlReader hbmReader, String name) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:1816\n   NHibernate.Cfg.Configuration.AddInputStream(Stream xmlInputStream, String name) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:632\n   NHibernate.Cfg.Configuration.AddDocument(XmlDocument doc, String name) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:483\n   NHibernate.Cfg.Configuration.AddDocument(XmlDocument doc) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:455\n   FluentNHibernate.PersistenceModel.Configure(Configuration cfg) in d:\\Builds\\FluentNH-v1.x-nh3\\src\\FluentNHibernate\\PersistenceModel.cs:283\n   FluentNHibernate.Cfg.MappingConfiguration.Apply(Configuration cfg) in d:\\Builds\\FluentNH-v1.x-nh3\\src\\FluentNHibernate\\Cfg\\MappingConfiguration.cs:88\n   FluentNHibernate.Cfg.FluentConfiguration.BuildConfiguration() in d:\\Builds\\FluentNH-v1.x-nh3\\src\\FluentNHibernate\\Cfg\\FluentConfiguration.cs:249\n\n[FluentConfigurationException: An invalid or incomplete configuration was used while creating a SessionFactory. Check PotentialReasons collection, and InnerException for more detail.\n\n]\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "faboudib": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/189", "title": "ManyToMany Mapping using conventions", "body": "I am using FluentNH with automapping and conventions. I set up a Many-to-Many convention as such:\n\n```\n    public class HasManyToManyConvention : IHasManyToManyConvention\n    {\n        public void Apply(IManyToManyCollectionInstance instance)\n        {\n            instance.Key.Column(instance.EntityType.Name + \"Id\");\n            instance.Relationship.Column(instance.Relationship.StringIdentifierForModel + \"Id\");\n        }\n    } \n```\n\nAssuming these are my tables:\n        User(Id,Username,Password), \n        Role(Id,Name)\n\nUpon database generation, the associative table is being generated fine: \n        UserInRole(UserId,RoleId)\n\nHowever, it has no composite primary key set (containing UserId and RoleId). Any way to set this from the convention?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexjamesbrown": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/187", "title": "PersistenceSpecification not working with Compenents mapped", "body": "I've got the following PersistenceSpecification:\n\n``` c#\nnew PersistenceSpecification<MyClass>(session)\n        .CheckProperty(c => c.Name, \"Testing\")\n        .CheckProperty(c => c.Address.Address1, \"Address 1\")\n        .CheckProperty(c => c.Address.Address2, \"Address 2\")\n        .CheckProperty(c => c.Address.Address3, \"Address 3\")\n        .VerifyTheMappings();\n```\n\nWhen this is run, the `.CheckProperty(c => c.Address.Address1, \"Address 1\")` throws an error.\n\nUpon looking in my database, I see the Name column has been set (to \"Testing\") however the columns mapped to the component are not\n\nI've mapped the Address component like this (In MyClassMap)\n\n``` c#\n  Component(x => x.Address, m =>\n  {\n    m.Map(x => x.Address1);\n    m.Map(x => x.Address2);\n    m.Map(x => x.Address3);\n  });\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9986086", "body": "As it turns out, this is because my `Address` was null\n\nAdding this to the ctor of `MyClass` fixed this:\n\n``` c#\n  Address = new Address();\n```\n\nBut...\n\nShouldn't PersistenceSpecification of thrown an exception?\n\nIf I tried to manually create it like this:\n\n``` c#\nvar myClass = new MyClass();\nmyClass.Address.Address1 = \"Something\";\n```\n\nThen I get an exception...\n\nSomething not right somewhere?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9986086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9990842", "body": "Sorry..\nWhen I say 'then i get an exception'\nI mean that I (quite rightly) get object not set to an instance of an object....\n\nBut that's in 'my' code - not using PersistenceSpecification\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9990842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10009606", "body": "Yeah.. that's what I thought...\n\nThere should be a way of testing this mapping though I think?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10009606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10110390", "body": "@hotgazpacho perfect, thanks\nI think the wiki page should be updated to show that....?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10110390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cbp123": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/185", "title": "In class AssemblyTypeSource, use of Assembly.GetTypes is breaking change", "body": "In FluentNH 1.2 and prior the class AssemblyTypeSource implemented the ITypeSource.GetTypes method using Assembly.GetExportedTypes. The new implementation in FluentNH uses Assembly.GetTypes.\n\nGetExportedTypes only requires dependent DLLs to be in the application bin directory when types from that DLL are exposed publicly, where GetTypes requires all dependent DLLs to be in the appication's bin directory, even if they are only used privately.\n\nThis change in behaviour can be annoying. I'm not sure if it was intended or if there is a work around.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9865241", "body": "Yes I think .GetTypes would be unusual. Perhaps an overload to the FluentMappings.AddFromAssemblyOf<T>() methods would have been better, e.g. FluentMappings.AddFromAssemblyOf<Foo>(getNonPublicTypes: true)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9865241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wilsonhut": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/183", "title": "OneToManyPart's Where method uses property name instead of column name from ClassMap", "body": "- In the ClassMap<Order>...\n\nMap(o => o.IsDeleted, \"deleteFlag\");\n- In the ClassMap<Customer>...\n\nHasMany(c => c.Orders).Where(c => c.IsDeleted == false);\n\n ... results in \"Invalid column name 'IsDeleted'\"\n- If I change the PROPERTY name from \"IsDeleted\" to \"DeleteFlag\", it doesn't fail. Shouldn't the Where go to the ClassMap<Order> for that property to get the column name from the mapping instead of using reflection to get the property name?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CapnAndy-xx": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/174", "title": "Issue with new Configuration inserting records", "body": "I'm trying to use Fluent for a 400-series IBM iSeries server. I discovered that there are currently no configurations that use the DB2400 driver and dialect, so I created one and named it ISeriesConfiguration (and ISeriesConnectionString for the connection string class). To make it I just copied DB2Configuration and DB2ConnectionStringBuilder and changed the Driver/Dialect calls to DB2400Driver and DB2400Dialect. This works in all respects except for inserting/updating records. \n\nWhen I try to do that, I either get SQL error that it could not insert values [?,?,?](for Save) or that it could not go checking for a record with value ? (for SaveOrUpdate). When I do exactly the same thing except for a SqlServer2012 database, it works flawlessly. \n\nI think I missed something somewhere when I made my new classes. What would that be? I'll post any code you need.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tigerhaolu727": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/171", "title": "Self Reference Table With Composite Key", "body": "I just want to know if this is possible to do with fluent nhibernate.\n\nI got a self reference table in my database. \n\nTable Service\n{\n     int Season (PK) (FK)\n     int Service_No (PK)\n     int ParentService_No (FK)\n}\n\nThe table has a composite key as Season and Service_No, and Foreign Key for Self Reference as Season and ParentService_No\n\nI try to create a collection property called ChildServices in my Service Class as many to many relations.\n\nHasManyToMany<Service>(x => x.ChildServices )\n                  .Table(\"SERVICE\")\n                  .Access.Property()\n                  .AsBag()\n                  .Cascade.SaveUpdate()\n                  .LazyLoad()\n                  .Generic()\n                  .ParentKeyColumns.Add(\"SEASON\")\n                  .ParentKeyColumns.Add(\"SERVICE_NO\")\n                  .ChildKeyColumns.Add(\"SEASON\")\n                  .ChildKeyColumns.Add(\"P_SERVICE_NO\");\n\nIf I use above mapping, it will throw my exception saying Repeated column in mapping for collection: Service.ChildServices column: SEASON\n\nHow can I do this? Is this a limitation of fluent nhibernate?\n\nThanks for answering my question.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lakario": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/167", "title": "Problems with generated SQL", "body": "I'm having a bit of trouble with some SQL generated by my FluentNHibernate mappings. I'm not doing anything too complex, but unfortunately it's not behaving the way I would have expected.\n\nI have a table-per-type hierarchy relating a _ContentModule_ table to several sub-type tables. For the _CategoryContentModule_ and _EventContentModule_ types, there is an additional one-to-many relationship to the _ContentItem_ table.\n\n![Mapping](http://i.imgur.com/khi0p.png)\n\nHere's the class definition for my tables; make note of the intermediary abstract type _ContentItemContentModule_:\n\n```\npublic abstract class ContentModule\n{\n    public virtual string Name { get; set; }\n    public virtual ModuleStatus Status { get; set; }\n    public virtual DateTime? ExpirationDateTime { get; set; }\n    public virtual DateTime? LastPublishedDateTime { get; set; }\n    public virtual DateTime? LastUnpublishedDateTime { get; set; }\n}\n\npublic class CustomContentModule : ContentModule\n{\n    public virtual string ViewPath { get; set; }\n}\n\npublic abstract class ContentItemContentModule : ContentModule\n{\n    public virtual ContentItem ContentItem { get; set; }\n}\n\npublic class EventContentModule : ContentItemContentModule\n{\n    public virtual Event Event { get; set; }\n}\n\npublic class CategoryContentModule : ContentItemContentModule\n{\n    public virtual Category Category { get; set; }\n}\n```\n\nFinally, my mappings:\n\n```\npublic class ContentModuleMapping : ClassMap<ContentModule>\n{\n    public ContentModuleMapping()\n    {\n        Map(x => x.Name);\n        Map(x => x.Status).CustomType<ContentModule.ModuleStatus>();\n        Map(x => x.ExpirationDateTime);\n        Map(x => x.LastPublishedDateTime);\n        Map(x => x.LastUnpublishedDateTime);\n    }\n}\n\npublic class CustomContentModuleMapping : SubclassMap<CustomContentModule>\n{\n    public CustomContentModuleMapping()\n    {\n        Map(x => x.ViewPath).Not.Nullable();\n    }\n}\n\npublic class EventContentModuleMapping : SubclassMap<EventContentModule>\n{\n    public EventContentModuleMapping()\n    {\n        References(x => x.ContentItem).Nullable().Cascade.None();\n        References(x => x.Event).Not.Nullable().LazyLoad().Cascade.None();\n    }\n}\n\npublic class CategoryContentModuleMapping : SubclassMap<CategoryContentModule>\n{\n    public CategoryContentModuleMapping()\n    {\n        References(x => x.ContentItem).Nullable().Cascade.None();\n        References(x => x.Category).Not.Nullable().LazyLoad().Cascade.None();\n    }\n}\n```\n\nAs you can see, the intermediary type _ContentItemContentModule_ is never mapped and exists only to provide the _ContentItem_ property of its sub-types. In the mappings for each sub-type I explicitly map the _ContentItem_ property.\n\n---\n\nWhen this mapping is registered and I attempt to retrieve a collection of _ContentModule_ items via NHibernate, the generated SQL produces a non-existent column called _ContentItemContentModuleId_. \n\nI've attempted explicitly setting the column name of the _ContentItem_ reference to 'ContentItemId' (matching the table structure), but this did not work. After some experimentation I determined that referencing the _ContentItem_ property was not the problem, but rather having the intermediary class _ContentItemContentModule_ was. If I remove the intermediary abstract class and move the _ContentItem_ property into each sub-type, the SQL is generated correctly and everything works.\n\nThe solution I came up with was simply to eliminate the intermediary abstract type and instead use an interface to achieve the same result in my code, but this is obviously a workaround.\n\n---\n\n**TL;DR** For some reason, FluentNHibernate is having problems with there being an unmapped abstract type between a mapped base abstract type and a mapped concrete type in a table-per-type hierarchy.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8643332", "body": "@chester89 While I do not disagree, the intermediary type is not intended to have its own table and if I map it, FluentNHibernate will assume that it does.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8643332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jagregory": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/161", "title": "Component convention and column prefix mayhem", "body": "See: http://stackoverflow.com/questions/11051515/fluentnhibernate-doubles-columnname-when-using-icomponentconvention-maps-v1-3-0\n\nThis works in v.717 (IComponentConvention) :\n\n``` csharp\npublic void Apply(IComponentInstance instance)\n{\n  if (instance.Type == typeof(EmailAddress))\n  {\n    instance.Properties.First(property => property.Name == \"FullAddress\")).Column(instance.Name);\n  }\n}\n```\n\nUsing the above convention I can map the name of my database column to the name of the component property. But in v.727 the hbm suddenly looks like this:\n\n``` xml\n<component name=\"DefaultMailAddressForAlerts\" class=\"EmailAddress\"> \n  <property name=\"FullAddress\" type=\"System.String\"> \n    <column name=\"DefaultMailAddressForAlertsDefaultMailAddressForAlerts\"/>          \n  </property> \n</component>\n```\n\nMaking the column name in the database the name of the component property x 2. Is there a new way of creating component conventions in v727 of fluent nhibernate?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/75", "title": "Merge Fluent Interface and AutoMap ", "body": "Merge the Fluent Interface and AutoMappings into one awesome mapping.\n\n> What I envision is inspired by StructureMap. Something like the PersistenceModel is equatable to the Repository in StructureMap, where you supply it with mappings (analogous to types). Mappings can be supplied either as instances (or by type) or they can be automapped (analogous to Scanning).\n\n```\npublic class MyPersistenceModel : PersistenceModel\n{\n  protected override void Initialise()\n  {\n    ForType<Person>\n      .UseMapping<PersonMap>();\n\n    ForTypes\n      .InNamespace(\"My.Entities\")\n      .UseMappingsInNamespace(\"My.Mappings\");\n\n    ForTypes\n      .InNamespace(\"My.SimpleEntities\")\n      .AutoMap();\n\n    ForType<Product>\n      .AutoMap();\n  }\n}\n\npublic class PersonMap : ClassMap<Person>\n{\n  protected override Initialise()\n  {\n    DiscoverDefaults();\n\n    Map(x => x.Name)\n      .ColumnName(\"PersonName\");\n  }\n}\n```\n\n_This ticket should be separated closer to the time of development!_\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/74", "title": "Clean up handling of multiple columns ", "body": "If the user defined a mapping as follows:\n\n```\nHasMany(x => x.Children)\n  .KeyColumns.Add(\"one\") .Unique() .KeyColumns.Add(\"two\");\n```\n\nThen the behaviour is to have two column mappings created, each with the unique set to true. This is somewhat counter-intuitive. It would be better to handle multiple columns with something like\n\n```\n.KeyColumns.Add(\"name\", c => { optional column mapping });\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/74/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/73", "title": "Remove the explicit mapping model build step ", "body": "Mapping parts have a method that looks something like this:\n\n```\npublic ClassMapping GetClassMapping()\n{\n    mapping.Name = typeof(T).AssemblyQualifiedName;\n\n    foreach (var property in properties)\n        mapping.AddProperty(property.GetPropertyMapping());\n\n    ....\n}\n```\n\nIdeally, the underlying mapping model would always be \"up to date\" rather than requiring this explicit build step.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/72", "title": "Automapping strategies ", "body": "Rewrite the automapper to allow substitutable behaviour.\n\nThe automapper currently uses a bunch of \"setup\" funcs that define how it behaves; however, this isn't very flexible as it's only capable of working in the set few ways we allow it to.\n\nRewrite the automapping internals to use a strategy that can be passed in by the user (or a default implementation provided by us).\n\n```\nAutoMap.AssemblyOf<X>()\n  .WithStrategy(new MyCustomAutomappingStrategy());\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/72/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/71", "title": "Clean up how conventions are applied to the model ", "body": "Conventions are currently applied to the final model, with some hacks to stop them from overwriting any of the user's fluent-interface defined mappings; this needs to be changed so conventions are applied before the user's stuff.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/70", "title": "Move assembly-wide automapping into PersistenceModel ", "body": "With the advent of #13, the AutoMap/AutoPersistenceModel should be depreciated in favour of creating your own PersistenceModel which can be used to specify any automappings along side your other mappings.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/70/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/69", "title": "Multiple database support ", "body": "Need to put some thought into how to support multiple databases. Some people switch between oracle and sql server (or sqlite) which have different defaults for id generators and naming conventions. We should be able to determine what each DB likes and give it that, instead of making the user duplicate stuff.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/68", "title": "Deprecate Fluently.Configure ", "body": "Fluently.Configure is a hacky mess and not very intuitive. It should be deprecated in favour of a simpler extension method approach. Something like this:\n\n```\nnew Configuration()                        // Regular NHibernate config\n  .ApplyMappingsFrom<MyPersistenceModel>() // Our extension method\n  .BuildSessionFactory();                  // Back to NHibernate again\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/68/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/67", "title": "Conventional automappings ", "body": "Allow conventions to create new mappings; should be able to map new properties, create components, collections, etc in a conventional manner.\n- Is this really the automapping?\n- Should there be a distinction between conventions and automappings? (No?)\n- How do we handle the lack of a generic type? (no equivalent to ClassMap<Entity>)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/66", "title": "Refactor towards one PeristenceModel-per-domain ", "body": "Currently we have to deal with multiple PersistenceModels, this is a bit weird. Refactor towards a single PersistenceModel, unifying all conventions and automapping.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/66/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/65", "title": "Allow top-level convention specifying ", "body": "The conventions are currently supplied at the individual mapping types level (FluentMappings and AutoMappings) within the Fluently.Configure API. I'd prefer it if you could specify conventions across the board more easily.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/65/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/64", "title": "Extend ComponentMap to work with composite-element collections ", "body": "ComponentMap currently only works for normal components, it would be very useful to use it with composite-element collections too.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/64/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/63", "title": "Fluent index creation", "body": "Patch from Robert, not sure why this never got applied. Will review post-1.1.\n\n```\npublic class Indexes : FluentIndexBase\n{\n  public Indexes(Configuration configuration)\n      : base(configuration)\n  {\n      AddDialectScope(\"NHibernate.Dialect.MsSql2005Dialect\");\n\n      ClusteredIndex<Person>().OnPrimaryKey();\n      UniqueNonClusteredIndex<Person>().OnProperty(x => x.SSN);\n\n      ClusteredIndex<SuperClass>().OnProperty(x => x.Person);\n      UniqueNonClusteredIndex<SuperClass>().OnProperty(x => x.SomeProperty);\n      NonClusteredIndex<SuperClass>().OnDiscriminator();\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/62", "title": "<sql-query> and <loader> support ", "body": "", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/62/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/61", "title": "Create Clustered Index on Column of Choice ", "body": "There does not currently (in v1.0 RTM) seem to be a way to choose which field can have a clustered index created.\n\nI believe that previously, before the rewrite, it was possible to set this. Now the clustered index always appears to be set on the first column of the primary key.\n\nI suggest modifying either IClassInstance or IPropertyInstance to support this functionality.\n\nEspecially when using Guids for primary keys, it useful to cluster on something other than that key.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/61/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/60", "title": "Split mapping testing stuff out into separate project", "body": "We should maintain this stuff independently of Fluent NHibernate core, as it's orthogonal to the main codebase. This could potentially be ported to EF if there's interest too.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/60/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/59", "title": "PersistenceSpecification CheckList fails on Many-to-Many relationship ", "body": "It seems that CheckList enforces ordering on the lists that it checks. I have a many-to-many relationship between Users and Roles as follows:\n\n```\npublic UserMap()\n{\n  Id(x => x.Id);\n  Map(x => x.UserName);\n  Map(x => x.Email);\n  HasManyToMany(x => x.Roles)\n      .Access.CamelCaseField()\n      .Inverse();\n}\n\npublic RoleMap()\n{\n  Id(x => x.Id);\n  Map(x => x.Name);\n  HasManyToMany(x => x.Users)\n      .Access.CamelCaseField();\n}\n```\n\nMy testing is as follows:\n\n```\n/* Create test Users list */\nnew PersistenceSpecification<Role>(session)\n  .CheckProperty(u => u.Name)\n  .CheckList(u => u.Users, users, (role, user) => role.AddUser(user))\n  .VerifyTheMappings();\n```\n\nSometimes this fails and sometimes it passes. From some debugging, it seems that it is retrieving the Users in a different order than which they were added. I imagine it because the generated Guid (using Guid.Comb) is altering the order on the database query. (I think it is because the guid is not sequential on the association table.) So basically, even though the list contains the same elements, since they are in a different order, fails the test because the source appears to compare elements by index position. So my question is, should I be enforcing an order on my queries or should CheckList not assume ordering on the list?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/59/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/58", "title": "Automapper support for dictionaries ", "body": "Support dictionaries in the automapper. Should default to Map I guess, unless we can work out a way to support dynamic-components.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/58/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/56", "title": "Many-to-any support ", "body": "We still don't support `many-to-any`\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/56/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/55", "title": "Collection refactoring", "body": "The mapping methods for collections are a mess. We should refine them greatly. This will probably mean a `HasMany` call for each of `bag`, `set`, `list`, and `map`.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/55/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/54", "title": "Logging", "body": "We should piggy-back on NHibernate's logging facilities and use it to write out our own diagnostic logging.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/54/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/52", "title": "More diagnostics", "body": "Diagnostics were started in 1.2 but never really completed or tested. They should be refined and made more useful for the next release.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/52/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/51", "title": "SubclassMap is incompatible with automapping ", "body": "SubclassMap doesn't work with automapping.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/50", "title": "ImportType not working in overrides ", "body": "Automapping overrides don't seem to accept ImportType calls.\n\n> Needs a significant refactor of the automapping code to get this to work\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/50/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/49", "title": "HasMany interfaces ", "body": "HasMany doesn't work well with collections of interfaces (especially when using Reveal)\n\n```\npublic class Episode\n{\n  private IList<IContributor> contributors = new List<IContributor>();\n}\n\npublic static OneToManyPart<T> ChildType<T>(this OneToManyPart<T> part, Type type)\n{\n  part.GetType()\n    .GetField(\"valueType\", BindingFlags.Instance | BindingFlags.NonPublic)\n    .SetValue(part, type);\n  part.GetType()\n    .GetField(\"isTernary\", BindingFlags.Instance | BindingFlags.NonPublic)\n    .SetValue(part, true);\n\n  return part;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/49/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/48", "title": "Automapper maps base types even when they're excluded by the Where clause ", "body": "The automapper should ignore base classes by default that fall outside of the where criteria.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/48/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/47", "title": "Table name of automapped value collection isn't correct ", "body": "The table name that's generated by the automapper for element collections is the property name of the collection. If different entities use the same collection name then there'll be conflicts. We should prefix the table name with the Entity name or something.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/47/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/46", "title": "Filter FluentMappings ", "body": "Should be able to filter the assembly that gets scanned for Fluent mappings. Sometimes not all the ClassMaps are needed by the current SessionFactory.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/46/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/44", "title": "How to map a list of an interface to a concrete class", "body": "I'd like to map a list of an interface This is my object:\n\n```\npublic class Foo\n{\n  public virtual IList<IBar> Bars { get; protected set; }\n}\n```\n\nI have several implementations of IBar in my domain model. How do I specify which IBar implementation Foo is using with Fluent NHibernate? I'm using auto mapping and would love if there was a solution with overrides.\n\nI feel like there's a missing Class() method somewhere, but I don't know how to map this with NHibernate, so I'm not sure what I want to do is even possible.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/44/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/43", "title": "OrderBy property in the mapping file ", "body": "See: https://groups.google.com/forum/#!topic/fluent-nhibernate/dXljvDmkRyU/discussion\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/43/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/42", "title": "Can't override key colum name in JoinedSubClass ", "body": "See: https://groups.google.com/forum/#!topic/fluent-nhibernate/xblilnwhGWE/discussion\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/42/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/41", "title": "SubclassMap + SqlInsert/SqlUpdate/StoredProcedure ", "body": "See: https://groups.google.com/forum/#!topic/fluent-nhibernate/riiX6umHLhQ/discussion\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/38", "title": "Conventions regression ", "body": "See: https://groups.google.com/forum/#!topic/fluent-nhibernate/gs-wnmjiZ-M/discussion\n\nCouldn't reproduce, but could be something to do with `ExportTo` being called first.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/38/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/37", "title": "ElementPart is missing Nullable ", "body": "\"Regression\" from master functionality.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/37/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/35", "title": "AddMappingsFromThisAssembly doesn't work with inherited PersistenceModels", "body": "If you inherit from PersistenceModel, the AddMappingsFromThisAssembly doesn't work because it (incorrectly) assumes the calling assembly is in FluentNHibernate.dll.\n\nSee: https://groups.google.com/forum/#!topic/fluent-nhibernate/-MDmyisPt_E/discussion\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4900f065537142e6f36e6520840195a65ef8d10f", "message": "Merge branch 'issue169' of https://github.com/chester89/fluent-nhibernate into chester89-issue169"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/640ae3152377d8d54fd209933467a9b7ccaae96b", "message": "Merge branch 'anotherPassAt37th' of https://github.com/chester89/fluent-nhibernate into chester89-anotherPassAt37th"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/63593b5de28a42beb429ab4d4569a4a8658a432a", "message": "Merge pull request #158 from CV1/patch-3\n\nUpdate src/FluentNHibernate/MappingModel/AttributeStore.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7d55aae96cc5a9888643b5c111e48f78c0868156", "message": "Merge pull request #157 from CV1/patch-2\n\nUpdate src/FluentNHibernate/MappingModel/EqualityExtensions.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/705a055071446effcafeb8cdee93c7e938cdc9dd", "message": "Merge pull request #160 from chester89/componentFieldPrefix\n\nAdded ability to use a prefix when a component is mapped using backing field"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4c7832c6b61907d03d3fd9c0c5f7d035f6abd07d", "message": "Merge pull request #154 from pcrockett/master\n\nRemoved a ton of build warnings"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5984ded98516abe95241c04d0d2d700d8a3a42e6", "message": "Tiny cleanup refactoring of AutoPersistenceModel"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f1f0a2eb3912725f2a7f7ad6fa0777b99ba707eb", "message": "Remove compiler warnings on CI box"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1118239dae3a9c00bb3e482a0beadbf2e374c89e", "message": "Removed vs 2008 solution. Not used"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3fc91115cce1af6d024decec180da3fe257bb5f9", "message": "Merge pull request #139 from CedricYao/master\n\nEdits to the Persistence Specification class."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b326c46fc554b21a90fc78b71918cb3d37dfc766", "message": "Merge pull request #106 from hazzik/override-component\n\nFix for issue #104"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/83698ed28ceae2ee406ffc6e54bac8e506a313ac", "message": "Merge pull request #147 from hazzik/convention-key-update\n\nICollectionInstance - add method KeyUpdate() to handle 'update' attribute on a key"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/56432598e7b2bfb01e4697010e13fb39cd66ded4", "message": "Merge pull request #152 from chester89/master\n\nAdded configuration property for Sql Server 2012"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2f6328ed823f8f90dd6ece5a000f2e5087d90666", "message": "Merge pull request #148 from AlexZeitler/master\n\nFixed broken wiki links in README"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d3232ef6c259b7de400b2bcc22b6f684006ad37f", "message": "Merge pull request #144 from oskarb/NH3.3.1\n\nUpdate to NHibernate 3.3.1."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/9bdc9d3235e6aba87618ef24f3237f5292294296", "message": "Fix for rakefile pointing to the wrong mspec path since switch to use nuget"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a26c2eef3cf51c75cf176d459fe154139cf64846", "message": "Upgraded to NHibernate 3.3"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2fc284fcb0f8a76be0f16c36e7b98100f42dbf5b", "message": "Switched to using bundler for gem management"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3acc7b5e19d755ae42d93f5e192dd9c7451f84c4", "message": "Revert \"Merge pull request #116 from firo222/master\"\n\nThis reverts commit 3c48bf83044a1572f442c235fc6ee8ca41a46cd4, reversing\nchanges made to dbbdb3f12a4617fc84735e3c81bae7fc319af2dc."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3c48bf83044a1572f442c235fc6ee8ca41a46cd4", "message": "Merge pull request #116 from firo222/master\n\nFix for Issue #110"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/dbbdb3f12a4617fc84735e3c81bae7fc319af2dc", "message": "Fix for failing test"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/31e3e3ec75f20a8e6d1a93f3ea12103a3a0ab6a7", "message": "Merge pull request #108 from tchrikch/master\n\nAdded cascade.merge option"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1c793e0873277b15eff751570a62f9c12c31a2f8", "message": "Merge pull request #112 from Saulis/master\n\nChanged the Id setters visibility to protected in the Examples."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/090117e9191ee3bd9f9c2d7d497cac79c261d2ee", "message": "Merge pull request #100 from hazzik/one-to-many-OtherSide\n\nAdded OtherSide property to one-to-many"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/bda9e198841b0c22526b9b16a30d4d42212e2366", "message": "Merge pull request #99 from MaciejSzczepanski/master\n\nFixed Formula with ManyToOne"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4c7424acb6ddd3555f88f3bf74197b866820ad14", "message": "Merge pull request #98 from hazzik/convention-key-nullable\n\nAdded ability to set key as (not)nullable via convention"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/17e99770b9c651c6d03327121f2ba75abfd3233c", "message": "Merge pull request #97 from mbp/filter-condition-applied-to-name\n\nFilter condition applied to name"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e87693a7a4cabaf59fa15030df0afdfedcb336fd", "message": "Merge pull request #96 from mbp/remove-obsolete-and-unused-method\n\nRemove obsolete method which has been obsolete since 2010-12-26 11:53:09,"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/12c782b17ba5ef4fd36adf65065982ce7da31275", "message": "Merge pull request #95 from mbp/getlogicalparent-performance\n\nFix performance issue searching in list of 'availableTypes'. GetLogicalPa"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/408fb8b74b42115f896a57b58f9c6dc473aae067", "message": "Merge pull request #94 from firo222/master\n\nfixed: cant change from bag to list in convention"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c546ebe6503a21f2601f66eec38d7fbb07ee95ef", "message": "Merge pull request #92 from icambron/composite_key_types\n\nadded ability to set a custom type on composite keys"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e390f4fc35731fad173807cd234bb8bd63f88256", "message": "Merge pull request #91 from hazzik/many-to-many-where\n\nAdded generic version of `ChildWhere` for many-to-many part."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/714b290d1540364bf69b9f32298a7cd97371d758", "message": "Merge pull request #90 from RyanHauert/master\n\nSmall fix in Property.GetInequalityComparisonMessage()"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ba11797ab2313d5522ad0ed93d09ed2a199e8132", "message": "Merge pull request #88 from hazzik/issue-39\n\nFix for issue #39 and also covers #53."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ab5cac74b1434dda440b3d7f23ebac07126a695e", "message": "Merge pull request #87 from asbjornu/master\n\nAdded readme file and tweaked RakeFile"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cc57cf2d2ec33923e08512cf46651b897dd837d6", "message": "Merge pull request #83 from MarkJPerry/master\n\nFIX for : https://github.com/jagregory/fluent-nhibernate/issues/45"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c24de5a65874a5c9e812395cd491eab0fd79d2e9", "message": "Similar to the previous commit. Refactored columns into layers so\ndifferent sets of columns can be supplied by various systems whilst\nstill allowing the user to fully control the end result."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f3186cba6182178c01377f7218df21317ca577de", "message": "Refactored \"attribute\" values into multiple layers instead of just\ndefaults and non-defaults. We've now got three layers: defaults,\nconventions, and user-supplied. This distinction allows us to provide\nsensible default values which get overwritten by conventions, and\nuser supplied values that override conventions."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ddd15d485a84607c65a89a997ae184c45a3b4aa5", "message": "Fixed conventions overwriting component column prefixes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1a83268fec0584141efc815f8282ec05e381292f", "message": "Updated nuget dependency to point to NH 3.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5386c2d94c47060269ff9c3c4344069552b14bd2", "message": "Merge pull request #81 from hazzik/patch-1\n\nAdded missed reference to System.Transactions"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/654e03fb89cef2ca0504f99e4a2b4c0a44756486", "message": "Merge pull request #22 from jochenjonc/master\n\nPersistenceSpecification in a TransactionScope"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f22a011aaba0d68a0fd901afa397511547ce8858", "message": "Merge branch 'cleaner_override' of https://github.com/icambron/fluent-nhibernate into icambron-cleaner_override\n\nConflicts:\n\tsrc/FluentNHibernate/Automapping/Alterations/AutoMappingOverrideAlteration.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/de40e896bbe346a4812e2496ddfd96ce6a8385aa", "message": "Removed configuration methods which were obsoleted in the previous\nrelease."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7334656b1cc97b3759a2a5c6abe497fc20683875", "message": "Removed references to the Castle proxy factory"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6a73a7b42748d0bd257b8b2343fc7f43a03e410c", "message": "Upgraded SQLite to fix some breaking change introduced by NH3.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ff750122cc3cbed8236221aedb281fc8599b722d", "message": "Updated NHibernate 3.x assemblies to 3.2"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ffc08e2c33367c7959821885fa21b3e35e4863d9", "message": "Removed broken xml doc comment"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/90c5d47246238fad38e6f46e89f8cd05eadcd9a8", "message": "Added warning disable for ProxyFactoryFactory test"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c81830bebff0291887b34c7fd63b38eb096c070a", "message": "Merge branch 'master' of https://github.com/benfulton/fluent-nhibernate into benfulton-master"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8e7d91b1939fdb1fb24081c7d51ba1451a4198ad", "message": "Well that was silly. Fixed unresolved conflict"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/65f16d0b3d2414987c3a1a93bc9dd6e7216abbaa", "message": "Merge commit 'bebb9da'\n\nConflicts:\n\tsrc/FluentNHibernate/FluentNHibernate.csproj\n\tsrc/FluentNHibernate/Mapping/Builders/MapBuilder.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/37156dcbc6fc20a82597600741a73076e3d11439", "message": "Merge branch 'fkcascade' of https://github.com/sonix1977nl/fluent-nhibernate into sonix1977nl-fkcascade"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/0c76901ee02203d84db92cf3cfa328ac74bc41e2", "message": "Merge branch 'expose_entity_type' of https://github.com/icambron/fluent-nhibernate into icambron-expose_entity_type\n\nConflicts:\n\tsrc/FluentNHibernate/Mapping/ManyToManyPart.cs\n\tsrc/FluentNHibernate/Mapping/ToManyBase.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/9375fefec078744833be79961ea93cc463ff6053", "message": "Merge branch 'master' of https://github.com/tangbiao/fluent-nhibernate into tangbiao-master\n\nConflicts:\n\tsrc/FluentNHibernate.Testing/FluentNHibernate.Testing.csproj\n\tsrc/FluentNHibernate/FluentNHibernate.csproj"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ea41a9e9cdf51b8e7913000244e82bb1a38948b0", "message": "Merge pull request #29 from icambron/automapped_filters\n\nadded convenience for adding filters to automaps"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3bf3266543463da55d1c96b32d8f787dcdadf7f0", "message": "Merge branch 'fix216' of https://github.com/icambron/fluent-nhibernate into icambron-fix216\n\nConflicts:\n\tsrc/FluentNHibernate.Testing/FluentNHibernate.Testing.csproj"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/473872", "body": "This is my first \"new\" pull request I've dealt with, so bear with me :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/473872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/473902", "body": "Done. Changes are in master and v1.x branch. Thanks Paul\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/473902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/648873", "body": "Merged, thanks :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/648873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/648874", "body": "An alternate implementation was provided and has been merged, thanks for the contribution though. Either way, this should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/648874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/666976", "body": "Ah, nice one. I think we just do it in the InstallGems.bat file, but obviously that won't work if you've installed albacore separately. I'll pull this asap.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/666976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/684467", "body": "Sweet! Thanks. I've merged this into master and the v1.x branch.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/684467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/684470", "body": "Merged. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/684470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/948959", "body": "Merged into v1.x branch. Will be integrated with master after release. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/948959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/948961", "body": "This has been merged into the v1.x branch and will be integrated with master once our release is out. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/948961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/948970", "body": "Starting to integrate this now. Will have to alter it somewhat to be a non-breaking change though; will probably leave the old methods around and just mark them as obsolete.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/948970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/949093", "body": "Merged into v1.x, will be integrated into our master branch after 1.2 release. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/949093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/949255", "body": "Integrated into v1.x (will be merged into master after the release). Thanks, this has been bugging me for ages!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/949255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/950786", "body": "v1.x branch is running on 3.1. I'll merge the changes into master after the release. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/950786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1477587", "body": "Thanks! I'll get this merged asap.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1477587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627655", "body": "Patch here: https://gist.github.com/1098406\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627721", "body": "Just a quick note to say thanks for the contribution, and sorry that I haven't got around to merging it yet. I'll hopefully get some time soon to clean up all these outstanding issues.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627723", "body": "Just a quick note to say thanks for the contribution, and sorry that I haven't got around to merging it yet. I'll hopefully get some time soon to clean up all these outstanding issues.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627729", "body": "Hey, thanks for the test. I'm a bit stacked right now, but I do intend on fixing this at some point soon. I appreciate the effort either way.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627732", "body": "Thanks for the contribution. I haven't managed to get around to merging it yet, but I'll hopefully be catching up with all this stuff soon.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627742", "body": "Hey, sorry I haven't got around to merging this in yet. Will hopefully get time soon.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627747", "body": "Hey, thanks for the contributions. No need to apologise for the flood, it's much appreciated. I've been stacked lately but should hopefully get some time soon to start merging these in. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627750", "body": "Hi, thanks for the patch. I'm stacked right now, but I should hopefully get some time soon to get on top of this stuff.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627756", "body": "Cool, thanks. Much appreciated. I've got a bit of a backlog of pull requests, but hopefully should get around to them soon. Thanks for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1627756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1662050", "body": "Good catch. I'll close this.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1662050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1662051", "body": "Closed as duplicate of #28\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1662051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1662058", "body": "Hey Ben, it looks like you've got your `core.autocrlf` setting set wrong. Both the files you changed have come up as everything changed, which normally signifies all the line endings have changed. Could you take a look?\n\nOtherwise, this change looks fine.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1662058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1664638", "body": "I meant to say that your `core.autocrlf` setting should be set to `false` as per the [contributing guide](http://wiki.fluentnhibernate.org/Contributing).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1664638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1765520", "body": "Hey Ben, thanks for the fix! For some reason I didn't get notified that you'd made the extra changes I asked for... Oh well. It's merged in now, thanks.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1765520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1793697", "body": "Hi. I've finally managed to get around to this (and other pull requests). Is there a reason the `Mixed_TPCH_Child` and `Mixed_TPS_Child` classes don't inherit from `Mixed_Parent`? Changing that makes the test pass.\n\nAs for your actual StackOverflow question, which I should've had a closer look at, can't you use the `Join` method in your subclass to achieve the same result as what the XML is doing?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1793697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2318416", "body": "It's all good ;)\n\nI'm hoping to do a major cleanup of the dsl for 2.0, so inconsistencies like this (and other places) can be ironed out then; until then, \"just don't do that\" is an acceptable answer to why something acts strangely!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2318416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3094530", "body": "Fixed merged, cheers.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3094530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5371506", "body": "Thanks, I've made some changes to the rakefile myself that've incorporated this.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5371506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5371670", "body": "Done. Published new nupack package.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5371670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5371985", "body": "As you might have guessed, support for Medium Trust isn't high on my priority list. I'm happy to accept a fix for this, but it's unlikely I'll get around to doing it myself any time soon (in the life of FNH, I've never once used a medium trust environment).\n\nThanks for raising the issue though, it's good to know.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5371985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6478687", "body": "Sorry guys. Something weird's going on here, as I haven't been notified of any of these discussions. I'll get this sorted now.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6478687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6678991", "body": "I'm working on it now. Our TeamCity server wasn't feeling very well when I\nlast had the chance to do this, so I didn't manage to get a successful\nbuild. As that's obviously happened now, I'll push the nuget to the repo.\n\nOn Sat, Jun 30, 2012 at 4:48 AM, Thomas G Mayfield <\nreply@reply.github.com\n\n> wrote:\n> \n> Any chance the NuGet package for #1.3.0.733 could get published? I\n> downloaded it from TeamCity and stored it in my custom repo, but it'd be\n> nice not to have that crutch.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/jagregory/fluent-nhibernate/pull/144#issuecomment-6673391\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6678991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6722769", "body": "There's a new release out with NH 3.3.1 suport.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6722769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6722778", "body": "There's been a tag created for the latest Nuget release.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6722778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6722797", "body": "Thanks, but I don't think this helps with the clarity of the examples. The examples are kept overly simplistic to focus on what's happening with Fluent.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6722797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7501008", "body": "Unfortunately, TeamCity doesn't contain enough builds to actually verify this - but when I merged in these changes tests were failing (I foolishly used Githubs auto-merge, which of course made the build break when the tests failed).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7501008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7682739", "body": "You are correct Paul.\n\nOn Mon, Aug 13, 2012 at 12:31 PM, Paul Batum notifications@github.comwrote:\n\n> If I recall correctly, the rake script should run all the specs. So if you\n> have ruby installed you should be able to run the specs without installing\n> a VS plugin.\n> \n> On Sun, Aug 12, 2012 at 3:41 PM, Gleb Chermennov\n> notifications@github.comwrote:\n> \n> > Ok, that's really odd - I found a spec that checkes this specific case\n> > (mapping component from a field). I don't have MSpec Resharper plugin\n> > installed right now, and the field in the spec is public. Need to run\n> > all\n> > the tests including the specifications again.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/jagregory/fluent-nhibernate/issues/153#issuecomment-7680657>.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/153#issuecomment-7682438.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7682739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717065", "body": "Merged at last!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717112", "body": "The release binaries are now only available through Nuget and our CI server, we don't host the binaries stand alone anymore.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717154", "body": "Closing. Supporting Medium Trust support isn't important to me. Contributions are welcome though.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717167", "body": "Can't reproduce. This sounds like a setup issue on your machine.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717186", "body": "Hey Tom. I hate this area of the codebase, it's very vague as to how it should behave, so I understand your hesitance/suspicion. I'll review and apply.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717205", "body": "@ckalan Could you supply a pull request with your changes? What you've done _sounds_ correct, we do something similar to support pseudo-ids.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717843", "body": "My bad, I didn't see that commit either. Would you prefer I back it out if\nit isn't ready?\n\nFor future reference, a pull request is associated with a particular branch\nnot a specific set of changes. It's a good idea to create a new branch to\nsend the request from.\n\nOn Tue, Aug 14, 2012 at 4:49 PM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> oh, I didn't realise that when you push to master in the fork the\n> changeset is added to the pull request. Too bad - I didn't provide any\n> tests for column prefix :( will do 2night\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/pull/152#issuecomment-7717690.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7718100", "body": "It won't as I've now merged it in. All the tests still pass, so nothing has broke. Don't worry about it. I should pay more attention when merging! :)\n\nOn 14 Aug 2012, at 17:06, Gleb Chermennov notifications@github.com wrote:\n\n> I see. I'll try to rewrite the history, but I'm not sure this will remove the commit from the pull request\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7718100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7836829", "body": "I agree, I can't see why a private nested class should be mapped _by default_. @chester89 if you're happy to work on this, that's great; I think it should just be a case of pulling @doerig's changes into the `DefaultAutomappingConfiguration`.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7836829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7836841", "body": "I'm guessing this change was never applied because of the line endings issue in the commit. I'll pick this up and clean it.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7836841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837017", "body": "Great stuff, thanks!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837340", "body": "After some investigation, this work has already been done previously. Sometime after this issue was raised, a refactoring was done to move the `ProxyFactoryFactory` configuration out of the database configuration and into the `FluentConfiguration`; looking at that class now, you can already specify the ProxyFactoryFactory by passing it a Type or a String.\n\nAs far as I can tell, this is working.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837376", "body": "@SamuelMarks The bundle file already contains albacore, I don't think this change is necessary.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837393", "body": "@CV1 I'm happy to merge these changes, but as we don't have a Mono CI build running I have no way to know if they actually work (only that they don't break the .Net side).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837620", "body": "I can't merge this. There's a spec failure, `when_subclass_map_has_a_has_many_to_another_entity.should_only_use_one_column_in_the_target_entity_s_key` (see: [SubclassSpecs.cs#L54](https://github.com/jagregory/fluent-nhibernate/blob/master/src/FluentNHibernate.Specs/PersistenceModel/SubclassSpecs.cs#L54)).\n\nLooks like there's something relying on the uniqueness provided by the Hashet.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7837620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7839959", "body": "This request also doesn't pass all specs for the same reason as https://github.com/jagregory/fluent-nhibernate/pull/156\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7839959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7840084", "body": "Updated the wiki with a reference to nuget.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7840084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7840123", "body": "cc @yngvebn\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7840123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8144279", "body": "I agree. I would expect last-call to win.\n\n@dlwiii What do you expect should happen? Why are you calling Id multiple times?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8144279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8248749", "body": "So with this change, no nested classes would be mapped by default?\n\nAs for docs, there isn't any mention of nested classes in the docs currently; it might be worth adding a note to the [automapping wiki page](https://github.com/jagregory/fluent-nhibernate/wiki/Auto-mapping) when this is resolved. Just so we've got the behaviour explicitly stated somewhere.\n\nThanks for your help on this.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8248749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8248821", "body": "Adding `<sql-query>` support would be a fairly large task, not in terms of difficulty just breadth as it'll touch FNH end-to-end.\n\nCompletely new mappings require the following steps:\n1. Create Builder/Part class for the fluent interface\n2. Add methods to the builders that can contain the mapping (for example a property can be within a class, a subclass, a join, etc...)\n3. Create the \"mapping\" class, this is the semantic model representation of the mapping. This is instantiated and populated by the builder\n4. Create the mapping serializer, this transforms our semantic model into NHibernate's XML format\n5. Test all of the above!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8248821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8476021", "body": "It looks like you didn't create your branch from a clean copy of master. Shall I close this and you send another pull request?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8476021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9324303", "body": "The main considerations are: Make sure the filename is unique, and make\nsure the file can easily be identified as entity it represents.\n\nUsing a GUID appended to the class name sounds like a good compromise.\n\nOn Thu, Oct 11, 2012 at 7:06 AM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> just looked into it - it seems that the only way to overcome this is via\n> Win32 API. that's just not good. btw, it'll be more easy to use a guid\n> instead of full name, and then append a class name to it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/84#issuecomment-9317548.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9324303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9324332", "body": "If I remember, FNH does some wrapping of nullable types in a\nNullableGenericType(?) wrapper, this might be causing issues. It has in the\npast.\n\nOn Thu, Oct 11, 2012 at 6:43 AM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> I think this behaviour should be optional. But I agree that such behaviour\n> should be present, it makes perfect sense. I'll investigate\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/172#issuecomment-9316709.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9324332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9332575", "body": "All merged :)\n\nOn Thu, Oct 11, 2012 at 6:54 PM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> @jagregory https://github.com/jagregory I see. Can you take a look at\n> PRs when you have some time?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/172#issuecomment-9331565.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9332575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9428498", "body": "Yep, I hadn't used it for at least a year.\n\nWhat's the need for a VS 2008 solution? Is there any reason why you need to\nbuild from source?\n\nOn Mon, Oct 15, 2012 at 12:17 AM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> @jagregory https://github.com/jagregory removed VS 2008 solution in\n> August. See 1118239https://github.com/jagregory/fluent-nhibernate/commit/1118239dae\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/180#issuecomment-9419369.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9428498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9429067", "body": "The content was already in the main Automapping wiki page, I don't know why\nthis other page was created.\n\nHowever, I've extracted it now so have a look at the link you posted and\nthere should be some content.\n\nOn Sat, Oct 13, 2012 at 1:28 AM, faboudib notifications@github.com wrote:\n\n> Hi, I'm new to Fluent and NHibernate and loving it so far. Thanks for the\n> great library. However, I'm having issues using Automapping feature with\n> inheritance using discriminators. I went to the following link, but it\n> seems to be empty:\n> https://github.com/jagregory/fluent-nhibernate/wiki/Automapping-inheritance\n> Is what I'm after supported? If it is, can you provide a small sample?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/179.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9429067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9584608", "body": "The \"fluent\" lambda based Where method is limited at best (I think the\ndoccomments state that?), it only does very primitive translations. I'd\nrecommend using the string-based overload if the lambda one isn't working\nfor you.\n\nOn Fri, Oct 19, 2012 at 2:14 AM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> can u please post full example of your code?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/183#issuecomment-9568051.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9584608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9888566", "body": "The change to use GetTypes was deliberate. One of the most common beginner\nmistakes was making their mappings private, and them not being picked up by\nFNH.\n\nThere's also a set of users don't like making their mappings public, and\ntherefore exposing them as part of the assembly's external API; so\nGetExportedTypes wouldn't pick up those mappings, while GetTypes does.\n\nHappy for there to be an overload/switch somewhere though. I'm undecided on\nthe default though, as the reason for this still stands (users not making\ntheir mapping public).\n\nOn Tue, Oct 30, 2012 at 1:19 AM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> If I'm not too busy this week, I'll do it\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/185#issuecomment-9868323.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9888566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10094728", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10094728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10129886", "body": "That sounds like a good idea Alex.\n\nOn Wed, Nov 7, 2012 at 12:28 AM, Alex Brown notifications@github.comwrote:\n\n> @hotgazpacho https://github.com/hotgazpacho perfect, thanks\n> I think the wiki page should be updated to show that....?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/187#issuecomment-10110390.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10129886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10275930", "body": "Without looking at the FNH source, I'd bet we'll have a check somewhere\nthat's looking at the PropertyType to determine whether or not to set the\nId as identity; that check is probably too restrictive.\n\nOn Sun, Nov 11, 2012 at 9:30 PM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> I'm not an expert in this either, but I'll look into how NHibernate\n> handles different data types of identity columns\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/190#issuecomment-10265018.\n\n## \n\nJames Gregory\n\nTel: +61 (0) 411 619 513\nWebsite: http://jagregory.com\nTwitter: @jagregory http://twitter.com/jagregory\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10275930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/526643", "body": "Once the actual build passes.\n\nOn 11 Aug 2011, at 18:40, hazzikreply@reply.github.com wrote:\n\n> So, when fnh build for NH 3.2.GA would be available in nuget?\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/jagregory/fluent-nhibernate/commit/ff750122cc3cbed8236221aedb281fc8599b722d#commitcomment-526636\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/526643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "ckalan": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/150", "title": "Support Fake Relationships", "body": "I'm an Orchard developer and in Orchard, AutoMapping can add dynamic fake relationships because of the old Fluent API. In the latest version of FluentNhibernate, \"References\" methods require expressions which prevents creating dynamic relationships.\n\nSay for instance, in Orchard there is a \"ContentItemRecord\" class , and each module creates a \"PartRecord\" table. Then Orchard creates dynamic ManyToOne references on ContentItemRecord for each PartRecord mapped by each module.\n\nThis may indeed be a requirement for many modular projects. I've added a new \"References\" method on the ClasslikeMapBase<T> class which gets a propertyName as a string parameters and calls the \"ManyToOnePart<TOther> References<TOther>(Member member, string columnName)\" method using a DummyPropertyInfo instance. \n\nI've achieved migrating Orchard to FluentNHibernate's latest release with this but I'm not sure this is the right place to make this change.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MichaelLogutov": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/141", "title": "NaturalId and Map.Unique result in duplicate property mapping", "body": "I want to map this simple class:\n\n```\npublic class Country\n{\n    public virtual int Id { get; protected set; }\n    public virtual string Code { get; protected set; }\n    public virtual string Name { get; protected set; }\n}\n```\n\nThe \"Code\" property is actually unique so I thought to use it as natural id. But I wanted to specify the length of it. So I've created this map:\n\n```\npublic class CountryMap : ClassMap<Country>\n{\n    public CountryMap ()\n    {\n        this.Id (x => x.Id);\n\n        this.NaturalId ().Property (x => x.Code);\n        this.Map (x => x.Code).Length (2).Unique ();\n\n        this.Map (x => x.Name).Length (255);\n    }\n}\n```\n\nAnd I got this exception:\nNHibernate.MappingException: Duplicate property mapping of Code found in Domain.Model.Geo.Country\n\nThe resulting HBM is this:\n\n```\n<hibernate-mapping xmlns=\"urn:nhibernate-mapping-2.2\" default-access=\"property\" auto-import=\"false\" default-cascade=\"all\">\n  <class xmlns=\"urn:nhibernate-mapping-2.2\" dynamic-insert=\"true\" dynamic-update=\"true\" mutable=\"false\" optimistic-lock=\"none\" name=\"Domain.Model.Geo.Country, Parts.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" table=\"`Country`\">\n    <cache usage=\"read-only\" />\n    <id name=\"Id\" type=\"System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">\n      <column name=\"Id\" />\n      <generator class=\"identity\" />\n    </id>\n    <natural-id>\n      <property name=\"Code\" type=\"System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">\n        <column name=\"Code\" />\n      </property>\n    </natural-id>\n    <property name=\"Code\" type=\"System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">\n      <column name=\"Code\" length=\"2\" unique=\"true\" />\n    </property>\n    <property name=\"Name\" type=\"System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">\n      <column name=\"Name\" length=\"255\" />\n    </property>\n  </class>\n</hibernate-mapping>\n```\n\nPackages I use:\n\n```\n<package id=\"FluentNHibernate\" version=\"1.3.0.727\" />\n<package id=\"Iesi.Collections\" version=\"3.2.0.4000\" />\n<package id=\"NHibernate\" version=\"3.3.0.4000\" />\n<package id=\"NHibernate.Caches.SysCache\" version=\"3.2.0.4000\" />\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "macrosblackd": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/140", "title": "ICompositeUserType no longer generates correct mapping.", "body": "After upgrading to NHibernate 3.3 and FluentNHibernate 1.3.0.727 the ICompositeUserType from https://gist.github.com/2837045 no longer generates the correct mapping. Both the *.717 and *.727 generated files are included in the gist for comparison. \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nsorochan": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/138", "title": "PersistenceSpecification.Checkproperty", "body": "When I use the method in writing test cases. It fails if one of my properties is a double, and using Oracle as my datasource. \nmy oracle field is defined as Number(6,2), my c# property is defined as a double.\n\nIf i set the property to 4.35, the number coming back is 4.34999......which is basically the same number, however, the checkproperty fails.\n\nAny ideas?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iGeX": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/134", "title": "No DiscriminatorValue method in ClassInstance", "body": "Hi\n\nClass mapping can have \"discriminator-value\" as well as subclass, but there is no way to specify it in automapping class convention inherited from IClassConvention. Reason for this is lack of DiscriminatorValue setting method in ClassInstance class and it's corresponding IClassInstance interface.\n\nProblem can be solved by adding following method in ClassInstance class, and it's signature in IClassInstance interface\n\npublic new void DiscriminatorValue(object value)\n{\n    mapping.Set(x => x.DiscriminatorValue, Layer.Conventions, value);\n}\n\nP.S. Method taken from similar SubclassInstance class\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cremor": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/130", "title": "DynamicInsert/Update doesn't work for subclasses", "body": "The short conventions DynamicInsert/Update.AlwaysTrue/False only apply to classes. They should also apply to subclasses and joined-subclasses.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/101", "title": "Use the MemberAccessResolver for properties mapped with a CompontentMap", "body": "Currently the `MemberAccessResolver` isn't used for component properties mapped with a `ComponentMap`. Additionally there is no way to use the `Access` object which is returned from the `MemberAccessResolver` to specify the access strategy in a convention (the access strategy can only be specified with the fluent methods).\n\nEither one of this two ways should be possible, preferably the first (`MemberAccessResolver`).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marufbd": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/128", "title": "Diagnostics not working without complain", "body": "This code snippet produces the exported hbm without any error, even i can execute the sql prom schemaexport.\nThe only thing that is not working and without any complain is the Diagnostics whereas it should produce output like:\nhttps://gist.github.com/592679\n\nI have tried changing the OutputToConsole which should register a listener. And its taking any invalid path to OutputToFile and does not produce any exception. Just not working.\n\n``` C#\nvar cfg = new NHibernate.Cfg.Configuration();\n//nhibernate config from config file\ncfg.Configure(dataConfig.NHibConfigPath);\n\nFluentConfiguration fConfig = Fluently.Configure(cfg)                \n                .Mappings(m =>\n                              {\n                                      //get default persistent model generator\n                                      var model =\n                                          new AutoPersistenceModelGenerator(overrideAssembly)\n                                              {AutoMappingAssemblies = autoMappingAssemblies};\n\n\n                                      if (config.ExportHbm)\n                                      {\n                                          var hbmExportPath = dataConfig.HbmExportPath;\n                                          m.AutoMappings.Add(model.Generate).ExportTo(hbmExportPath);\n                                      }\n                              });\n\n//this line does not provide any output\nfConfig.Diagnostics(x => x.Enable().OutputToFile(\"D:/tmp/fluentNHibernate_log.txt\"));\n\nConfiguration = fConfig.BuildConfiguration();\n\nFactory = Configuration.BuildSessionFactory();\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oskarb": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/126", "title": "Support component as index for dictionary (composite-index)", "body": "The composite-index tag is used to map dictionaries using components as index. This does not appear to be accessible using fluent nhibernate.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/086a9798d1ad67ff35063986459e0e225eb32cb7", "message": "Lock Nuget NHibernate versions to < 4.0."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cb0cdb0faa6033a585afed317f107187be63d2e2", "message": "Remove user-specific files that don't belong in version control."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d93b6373914a64c54eb39c08907af33b7ec7520c", "message": "Update to NHibernate 3.3.1."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6461091", "body": "@mxmissile Your comment seems a bit off-topic for this pull request, but considering the regression fixes and LINQ features in 3.3.1, I suggest that you rather configure assembly bindings, than force downgrade to 3.3.0. I submitted this pull request in the hope that there could be a swift \"official\" fluent nhibernate build.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6461091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6461230", "body": "@paulbatum It seems according to the wiki I should've made sure you got notified, but I'm not sure that happened. Any chance of applying this?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6461230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11287855", "body": "This change seems to be unusable. This change allows settings not-null==false for the 'element' tag, but this is already the default. There is no Not property on ElementPart, nor is the nullability exposed in IElementInstance, available when implementing the ICollectionConvention.\n\nSo in summary, I can find no way to specify not-null=\"true\".\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11287855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "NOtherDev": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/125", "title": "Nice to have: HasMany/HasManyToMany PropertyRef with expression parameter", "body": "In Fluent NHibernate 1.3, `HasMany`/`HasManyToMany` chain offers setting `PropertyRef` option using string-typed other side property name. It'll be nice to have strongly-typed `Expression<Func<TChild, object>>` parameter, as it's in `References` chain.\n\nIt is:\n\n```\nHasMany(x => x.Users).PropertyRef(\"OtherProperty\");\n```\n\nNice to have:\n\n```\nHasMany(x => x.Users).PropertyRef(u => u.OtherProperty);\n```\n\nSee also: http://notherdev.blogspot.com/2012/01/mapping-by-code-set-and-bag.html\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/124", "title": "OptimisticLock in HasMany/HasManyToMany broken", "body": "In Fluent NHibernate 1.3, when trying to use `OptimisticLock` option in `HasMany`/`HasManyToMany` chain, it's not possible to set boolean value there, expected by NHibernate. Fluent NHibernate offers choosing one of options available only at entity level. Choosing any value results in `XML validation error` exception when creating session factory.\n\nIt is:\n\n```\nHasMany(x => x.Users).OptimisticLock.Version();\n```\n\nIt should be:\n\n```\nHasMany(x => x.Users).OptimisticLock();\n```\n\nSee also: http://notherdev.blogspot.com/2012/01/mapping-by-code-set-and-bag.html\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/122", "title": "HasMany/HasManyToMany options missing", "body": "In Fluent NHibernate 1.3 there are some collection mapping options missing in `HasMany`/`HasManyToMany` chains:\n- `Catalog`\n- `Unique`\n- `Loader`\n- `SqlInsert`, `SqlUpdate`, `SqlDelete`, `SqlDeleteAll`\n\nSee also: http://notherdev.blogspot.com/2012/01/mapping-by-code-set-and-bag.html\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/121", "title": "Missing Key options for SubclassMap<T> and Join mapping", "body": "In Fluent NHibernate 1.3 there's no way to set up key column options other than name in `SubclassMap<T>` maps for joined subclass inheritance strategy. It'll be useful to define different DDL options, like `on-delete`, `foreign-key`, `unique`, etc.\n\nThe only key-related method in `SubclassMap<T>` is:\n\n```\npublic void KeyColumn(string column);\n```\n\nSimiliar issue is with `Join` mapping - there's no possibility to map DDL-level key column options apart for name.\n\nSee also: http://notherdev.blogspot.com/2012/01/mapping-by-code-inheritance.html and http://notherdev.blogspot.com/2012/01/mapping-by-code-join.html\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/120", "title": "Component's ParentReference Access type can't be defined", "body": "In Fluent NHibernate 1.3 there's no way to set up Access property for Component's ParentReference option.\n\n```\nComponent(x => x.Test, m =>\n{\n    m.ParentReference(c => c.Parent).Access.Field();\n});\n```\n\nThis code set access strategy for `x.Test` property. Setting access strategy for `c.Parent` is not possible.\n\nSee also: http://notherdev.blogspot.com/2012/01/mapping-by-code-component-and-odd-cases.html\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/119", "title": "SqlInsert, SqlUpdate, SqlDelete, SqlDeleteAll should not be available in Component and DynamicComponent mappings", "body": "Fluent NHibernate 1.3 allows to map custom SQL queries in the Component and DynamicComponent mappings even if it's not supported by NHibernate. Setting SqlXYZ methods has no effect.\n\n```\npublic class Group\n{\n    // ...\n    public virtual Test Test { get; set; }\n}\n\npublic class Test\n{\n    public virtual string TestProperty { get; set; }\n}\n\npublic class GroupMap : ClassMap<Group>\n{\n    public GroupMap()\n    {\n        Component(x => x.Test, m =>\n        {\n            m.SqlInsert(\"select 1\"); // should not be here\n            m.SqlUpdate(\"select 1\"); // should not be here\n            m.SqlDelete(\"select 1\"); // should not be here\n            m.SqlDeleteAll(\"select 1\"); // should not be here\n        });\n    }\n}\n```\n\nSee also: http://notherdev.blogspot.com/2012/01/mapping-by-code-component-and-odd-cases.html\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hazzik": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/107", "title": "Lamda version on Where on one-to-many and many-to-many should apply conventions", "body": "I have following mapping:\n\n```\nHasMany(x => x.Items).Where(x => x.IsDeleted == false);\n```\n\nIt is translated to SQL like `WHERE  (items0_.IsDeleted = 0)`\nIt is icorrect In case I'm using convention which converts camel case to underscores notation (eg. `IsDeleted` -> `IS_DELETED`). \n\nSo, correct sql should be `(WHERE items0_.IS_DELTED = 0)`\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2e9e452e214a5163580d6962326ecf653d696128", "message": "Set current year for copyright in assembly info"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4fa5e6e16fcb9c8132a89ba76c7f604b06c81fa4", "message": "Fix build script"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ffd4c39762959f1560a99af84edc32c056924d61", "message": "ICollectionInstance - add method KeyUpdate() to handle 'update' attribute on a key."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/79c51b787d2798a79d0758f1b0dc130bb919305f", "message": "Fix for issue #104: FNH should mark ReferenceComponent as mapped when it is overridden in IAutoMappingOverride"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1637830b9512515691b4457baaa7c1e230dd7f61", "message": "Added OtherSide property to IOneToManyCollectionInspector and IOneToManyCollectionInstance"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/213ace369a8ffea64624149ce962364de25dcf68", "message": "Added ability to set key as (not)nullable via convention"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/fb2d288309096df6feba71c83eed8b0f2b170ad6", "message": "Generic version of `Where` method moved from `ToManyBase` into one-to-many part, because on many-to-many part produces incorrect SQL (trying to access column on reference table instead of child table).\n\n* Added generic version of `ChildWhere` for many-to-many part."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/787092f9b9ebb2d2334daeecf34df81c6fec3f16", "message": "Fix for issue #39."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c7961053abfc89204d037d756403b434ff1ec2a8", "message": "Failed test for check that component Column name convention does not broke ColumnPrefix\n\nhttps://groups.google.com/d/msg/fluent-nhibernate/-/4nrGcERCVJQJ"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/20d6f03f7a7970388242a1bbcfede18ddbc75993", "message": "Added missed reference to System.Transactions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1784555", "body": "opened new request to master\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1784555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1970627", "body": "Should we allow a uni-directional self-referental inverse mapping? \n\n``` csharp\npublic class TreeNode\n{\n    public virtual int Id { get; set; }\n    public virtual IEnumerable<TreeNode> Descendants { get; set; }\n}\n\npublic class TreeNodeMap : ClassMap<TreeNode>\n{\n    public TreeNodeMap()\n    {\n        Id(x => x.Id)\n            .GeneratedBy.Native();\n\n        HasManyToMany(x => x.Descendants)\n            .AsSet()\n            .Table(\"TreeNode_hierarhy\")\n            .ParentKeyColumn(\"ParentID\")\n            .ChildKeyColumn(\"ChildID\")\n            .Inverse();\n    }\n}\n\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1970627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2236354", "body": "Also covers #53\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2236354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3195773", "body": "Is anybody here?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3195773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3224956", "body": "@tbushell you can edit the file online with github and then make pull request\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3224956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5374843", "body": "I've rewrited pull request to reflect refactoring in 45efeca9cdf7e2a9dcae80df55a19677fe14a7e4\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5374843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6727293", "body": "Please merge it.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6727293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7126945", "body": "http://stackoverflow.com/questions/5410252/overriding-component-columns-in-iautomappingoverride\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7126945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7502046", "body": "Hello, @jagregory please merge it! \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7502046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717501", "body": "Woohoo!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7717501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/526636", "body": "So, when would fnh build for NH 3.2.GA be available in nuget?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/526636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/526793", "body": "Please accept pull request 81!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/526793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "doerig": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/105", "title": "Automapper tries to map private class", "body": "After Upgrading from FNH 1.2 to 1.3 my project threw some runtime exceptions. It turned out that fnh 1.3 tries to map a private nested class. Is this intended behaviour or a bug?\n\nI fixed the problem within the AutomappingConfiguration (checking for IsPublic).\n\n``` C#\n    public class AutomappingConfiguration : DefaultAutomappingConfiguration\n    {\n        public override bool ShouldMap(Type type)\n        {\n            return type.IsPublic && type.IsSubclassOf(typeof(ModelBase));\n        }\n    }\n```\n\nSimplified class-setup:\n\n``` C#\npublic class MappedClass : ModelBase\n{\n}\n\npublic class NotMappedClass\n{\n    private class WhyDoesThisClassGetsMapped : MappedClass\n    {\n    }\n}\n\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergey-legenkiy": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/93", "title": "FNH 1.3: Mapping to the ICompositeUserType broken", "body": "Yesterday I grab last available sources of FNH to make it possible to use it with NH 3.2.0.4GA. But after update to new version (1.3) I start getting the following error:\n\nFluentNHibernate.Cfg.FluentConfigurationException: An invalid or incomplete configuration was used while creating a SessionFactory. Check PotentialReasons collection, and InnerException for more detail.\n- Database was not configured through Database method.\n  ---> NHibernate.MappingException: property mapping has wrong number of columns: CashDepartment.Server.DomainModel.Enities.Service.Rate type: component[RateType,PaymentCondition,FixedAmountData,FixedCostOfArivalData,PercentageData]\n   at NHibernate.Mapping.PersistentClass.Validate(IMapping mapping) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Mapping\\PersistentClass.cs:line 954\n  at NHibernate.Mapping.RootClass.Validate(IMapping mapping) in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Mapping\\RootClass.cs:line 371\n  at NHibernate.Cfg.Configuration.ValidateEntities() in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:line 1030\n  at NHibernate.Cfg.Configuration.Validate() in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:line 958\n  at NHibernate.Cfg.Configuration.BuildSessionFactory() in d:\\CSharp\\NH\\NH\\nhibernate\\src\\NHibernate\\Cfg\\Configuration.cs:line 1250\n  at FluentNHibernate.Cfg.FluentConfiguration.BuildSessionFactory()\n  --- End of inner exception stack trace ---\n  at FluentNHibernate.Cfg.FluentConfiguration.BuildSessionFactory()\n\nThis happens then I map ICompositeUserType: \n`C#   Map(m => m.Amount).CustomType<MoneyCompositeType>();`\n\nAfter call CustomType method, returned PropertyPart object contains correct number of columns, but then FNH visitor visit this property during NH mapping generation it Columns collection contains only one column named as Property.\n\nMay be this information will be useful: this property located in class that mapped as Component.\n\nI think this is the bug. How can I fix it?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/93/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2144856", "body": "Any news? I must migrate to the NH mapping from code?\nIssue not closed... this is mistake!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2144856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "icambron": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/89", "title": "ToManyBase.Key() gone?", "body": "I noticed that ToManyBase.Key() disappeared from the trunk. Fiddling with git, I was unable to figure out what happened to it, but then again, my git skills aren't that sharp. I suspect the change wasn't on purpose, though...\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/89/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3cd8858d091af343fad9d12064a97353f4eae7ae", "message": "added ability to set a custom type on composite keys"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1476953", "body": "I reverted the commit to move it to its own branch, and in the process, it closed the pull request. New request here: https://github.com/jagregory/fluent-nhibernate/pull/28\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1476953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2032500", "body": "Ah, thanks! On the same note, it looks like InstallGems.bat is quite a bit out of date wrt the Albacore version.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2032500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2032582", "body": "I'd modify `CheckList()` to be indifferent about the order. OTOH, I'm sometimes forced to add ordering in situations like this to fix paging (my database server is sometimes not even consistent about the order of results on a query against the _the same data_).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2032582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2032627", "body": "Some discussion here: http://groups.google.com/group/fluent-nhibernate/browse_thread/thread/617eeaa8fb31935d\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2032627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2318375", "body": "Haha, or just merge it :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2318375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/59409", "body": "This is never used, and it's a bit confusing as to what it means.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/59409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/59416", "body": "Exposing the entity. Looks like I have tabs vs. spaces wrong; I'll be sure to fix that before making more pull requests\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/59416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Philo": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/86", "title": "Unable to add overrides when using an inherited PersistenceModel", "body": ".UseOverridesFromAssemblyOf<>() and .UseOverridesFromAssembly() when used within an inherited PersistenceModel cause an \"Object reference not set to an instance of an object\" exception at line 366 of FluentNhibernate/automapping/AutoPersistenceModel.cs.\n\nThe attempt to retrieve a reference to the \"OverrideHelper\" method via this.GetType() returns null:\n\n```\n                    var overrideInstance = Activator.CreateInstance(overrideType);\n                    GetType()\n                        .GetMethod(\"OverrideHelper\", BindingFlags.NonPublic | BindingFlags.Instance)\n                        .MakeGenericMethod(entityType)\n                        .Invoke(this, new [] {x, overrideInstance});\n```\n\n---\n\n```\n    private void OverrideHelper<T>(AutoMapping<T> x, IAutoMappingOverride<T> mappingOverride)\n    {\n        mappingOverride.Override(x);\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1880271", "body": "Possible fix would be to alter the OverrideHelper access modifier from private to protected.  Trying this resolved my own problem\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1880271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "m4cx": {"issues": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/78", "title": "Defining a CustomType for KeyReference in CompositeId()", "body": "Hey Guys, \n\nI opened this topic within stackoverflow already, but until now there is no answer. Maybe you can have a look:\n\nhttp://stackoverflow.com/questions/6827154/mapping-compositeid-keyreference-on-interface\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/78/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "owerkop": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/aea486a3c1ffe79141669f57f8c7859712358d9e", "message": "Fixed RelationshipKeyPairingVisitor - all many-to-one relations with two ends will use the same (single) foreign column name at children table.\n\nBefore that fix such relations were mapped this way: \"one\" side used childtype.Name+\"_id\", \"many\" side used referenceToParentProperty.Name+\"_id\".\nIt seemed to work just because usually referenceToParent property name is equal to parent's type name."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d7054055d4db3b744993c6053ad7a4d72048f763", "message": "Fixed RelationshipPairingVisitor - added missing check for property types correspondence to avoid pair wrong properties."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ffe9772d38fb898e8abce5783e8adb57404f7651", "message": "Added failing test for pairing relation ends.\n\nPairing should check property types correspondence to avoid pair collection with reference property if their types does not match."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ignition": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2ae80148e957f5955d9f63a40f2adce953554cbb", "message": "Changed ComponentMapping with IComponentMapping"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/781ebf5a5350bc92e1f56da99b7cf66c930831cd", "message": "Removed unneeded abstract class and fixed naming of variables"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/24af69b7611c247527c88ef598e5f1bfe8abc157", "message": "Fixed RakeFile for the new RelationshipPairingVisitor test"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a836fea6dd6ffbb68e85af5a3e807ee6f5e0939c", "message": "Fix for PairOneToManys"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f85556d3541184bd8bc2a5bcc5469b8e7c4872d4", "message": "Added a test for RelationshipPairingVisitor that fails"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mcliment": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/450674ee4339b1a6fa05b082f5b801e749dcbedd", "message": "Updated docu\n\ndocu updated to shortsn/docu fork, with .NET 4.0 support"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scardetto": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/535e9783b4eaf1988c0f8cb2dceea27e730f057f", "message": "Fixed issue #261\nAdded zero length string prefix to the stack to prevent it from being\nreset after the first nested commit."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rattlemouse": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ffc2c196521d0dd8b9655e003d5d3a31de23e665", "message": "Performance: Added specific IndeterminateSubclassMappingProviderCollection"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bertvansteen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/354e3669573e5511b8786e24f0123b28e8790c37", "message": "Added support for Managed Oracle Driver"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaxx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7c9d388cea14fd9afbd2a43203d1015215e3decd", "message": "added missing cascade options"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b11153268314e2566123dab59a42589a5205141a", "message": "Merge pull request #1 from degert/master\n\nQuick fix for #123: Append cascade options instead of overwriting."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Micha-kun": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/3ab2f594713a3cbed204b7c6780efdb65e2e2e16", "message": "Fix for bug #231"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4d2286d618fb4bda2e079ac4c962fcd5541fe5e7", "message": "sql-insert, sql-update, sql-delete into join"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "twiernik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2610fb33cfad8beaad2e5899aca39b7e5a48f767", "message": "Add pdb files to the nuspec #262"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/b779ae19dc4cfc3167b781b399f3cb6ec87d56a7", "message": "Moving from RhinoMocks to FakeItEasy"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daspn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/839c65e954ee356e207cc1ee077bd160beb41356", "message": "Added Cascade.Replicate option"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guillink": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e49a08b5e28c555f884c5679998553895f5c35ab", "message": "Fixed typo on PropertyPart.Unique documentation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janpantel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/21c1225339ee3244e72671fb84b9ca88f235d822", "message": "Made Fluently instantiable\n\nFluenty can not be injected via IoC-Containers, making it hard to test classes, that use it."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexDevBR": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d82ab3a58c8ac525b076f36c88edf98f95406f29", "message": "ExpressionToSql: Allow using an inherited property when using a lambda"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tgmayfield": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d6dd56a4041351597500862c01fd1c259630b080", "message": "Treat subclasses with interface types the same as parent classes with interface types\n\n- All tests passing"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/325cf1e83fed55fa15e524ff060b6a7c29ae42c7", "message": "Flesh out the tests to verify that the expected subclasses exist in the generated mapping"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/102240e7795d36d522c93222f9e5f239a520e474", "message": "If no base type is discernable (or can't be pulled from the Extends<T>() option), then don't set a default key mapping"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/9ab797033e3334adfeecf1f52e975a63070fdcca", "message": "Test showing the same situation but with classes that passes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2f1b5fe52c9f71077eefa203c0645c3d0f84ac91", "message": "Test exposing null-reference exceptions caused by mapped interface types for table-per-type hierarchies"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6673391", "body": "Any chance the NuGet package for #1.3.0.733 could get published? I downloaded it from TeamCity and stored it in my custom repo, but it'd be nice not to have that crutch.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6673391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lodrial": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cd925f95315c0d7c8af55d19ec255f03ade3e89c", "message": "Update src/FluentNHibernate/Cfg/Db/DB2Configuration.cs"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f12c7d794f3a380995f6ebd9a0da2a1fc613a0a3", "message": "Update src/FluentNHibernate/Cfg/Db/DB2Configuration.cs\n\nDB2 Provider is a faster DRDA provider for Informix 11.50+"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "firo222": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/8fb5c43d3b00e7821aac25d6fa3e242675975fa9", "message": "fix #146"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e0f27c7ce3b72d6b7820f3b55d6e79f6d6cd208b", "message": "fix Issue #127"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/2d8bdbf94afd18e3815e514e51bc1cb4422c19a1", "message": "fix: Equals(ColumnMapping) broken for null references"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/1f12d0f66352cdb70143a6eaa819a672539a285e", "message": "fix: Extensions.DeepCopy broken for classes containing AttributeLayeredValues\n\nwhile deserializing a hashset containing AttributeLayeredValues AttributeLayeredValues.ContentEquals is broken because the content isnt deserialised which results in all values of the Hashset being collapsed to one."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/bf983fdd6fa55c7d3a7bb1d2f420fa208eca9416", "message": "fixed: changing bag to list in convention"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/6c1df20da9619f8f4a099a6d5c8e87d1bd4398f6", "message": "added failing test for CollectionInstance.AsList()"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/40fe0d48603dca254a8bde58bc879e9b1c7aed11", "message": "extended ColumnInstance for Conventions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2836626", "body": "failing test\n\n```\n    [Test]\n    public void Test()\n    {\n        var set = new HashSet<ColumnMapping>(new ColumnMappingComparer());\n\n        set.Add(new ColumnMapping(\"foo\"));\n        set.Add(new ColumnMapping(\"bar\"));\n        Assert.Equal(2, set.Count);\n\n        Assert.Equal(2, set.DeepClone().Count); // fails here with 2 != 1\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2836626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7499408", "body": "the changes just fix the root cause of it, the deserialization of the inner Dictionary. It should be safe. no idea why it was reverted, no info to me yet.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7499408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7834458", "body": "IMO the fix proposed in the discussion is good enough, why not applying it?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7834458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072509", "body": "Same as https://github.com/jagregory/fluent-nhibernate/issues/110 and https://github.com/jagregory/fluent-nhibernate/issues/140. It was fixed in 110 but reverted. Dont know if it is applyed already\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072577", "body": "this is a change in NHibernate. It was introduced for Lazy Properties since they can't be intercept if the setter is private. Protected is fine\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072673", "body": "this should work too\n\nMap (x => x.Status).CustomType<Bar>();\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072752", "body": "if someone is interested I found another workaround which does the same\n\n```\npublic FooMap()\n{\n    Map(x => FakeProperty);\n}\n\nprivate int FakeProperty { get; set; }\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11072752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073057", "body": "i also would like to contribute, but since my time is very limited ATM it would be nice to have some checklist what to test first\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073332", "body": "is this still wanted? IMO this ticket can be closed because there is already an API for defining mappins with the .Mappings() extension method for Configuration\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073364", "body": "can be closed since the layered property model was introduced\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073378", "body": "was this applied already?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073491", "body": "implementing ICollectionConvention would be it, but i don't know how to know if the collection is a element collection (maybe instance.Element is null or something)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11073491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12163958", "body": "there were several fixes as pull request. i thought it was included but i can't find it right now\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12163958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12164118", "body": "This happens because of code generation and FluentNHibernate doesn't do that. It must be the Entity Designer which generates the invalid code. I vote for closing this ticket.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12164118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12164170", "body": "pull request https://github.com/jagregory/fluent-nhibernate/pull/186 would fix it, but it wasn't applied\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12164170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "HermanSchoenfeld": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/62b0136085603707be1ddff6f88d0df0e9446fab", "message": "Mono-compatability bug fix\n\nMono-compatability bug fix -- HashSet enumeration returned null for\nunknown reason.\n\nThis fix was tested on a commercial application using 30+ fluent\nmappings. It works now."}], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/354", "title": "Generate table columns in same sequence they were mapped (long awaited feature)", "body": "This patch will finally do what many users have long asked for - generate table columns, references & everything else in the same sequence they were mapped. Highly recommended pull.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11067455", "body": "PS: it was also tested on Windows with the same mappings.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11067455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "W1N9Zr0": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/748847a5450c53db48bb90230a01f7a9c7f3e4e8", "message": "Test for mapping nested generic classes"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cb53d04a170d363956759912b50c8cba050f0f74", "message": "Fix exception when mapping nested generic classes\n\nIf the generic is declared in the outer class and the inner class is\nmapped, there is no ` in the name of the inner class."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anuroopa": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ade1bfda2ee6926b66aa99a2406de6f0625afacc", "message": "#175\nAdd Trigger Identity to Id Convention\nAlso, add some more the missing identity generators to IGeneratorInstance"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9319983", "body": "public class CustomTriggerIdentityGeneratorConvention : IIdConvention\n    {\n        #region Implementation of IConvention<IIdentityInspector,IIdentityInstance>\n        public void Apply(IIdentityInstance instance)\n        {\n            instance.GeneratedBy.TriggerIdentity(); // This is not currently available in 733 build\n        }\n        #endregion\n    }\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9319983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9341513", "body": "Thanks, appreciate it! Really need this for a project with deadline looming soon, when would this be incorporated in a build?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9341513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9454969", "body": "I added some more details, and a test, could you please review?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9454969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "WalkerCodeRanger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/70aa5eedf71b7d54b8bcef50ad26007cac9678f7", "message": "Fix issue #172 UserTypeConvention does not apply to nullable types"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9339640", "body": "I'm pretty sure the problem isn't the \"NullableGenericType\" wrapper, whatever that is.  The problem is that the accept method expectations only match the type exactly, not the nullable variant.  It would work if the code were:\n\n``` csharp\n    public virtual void Accept(IAcceptanceCriteria<IPropertyInspector> criteria)\n    {\n        var userType = Activator.CreateInstance<TUserType>();\n        var returnedType = userType.ReturnedType;\n        if(returnedType.IsValueType)\n        {\n            var nullableReturnedType = typeof(Nullable<>).MakeGenericType(returnedType);\n            criteria.Expect(x => x.Type == returnedType || x.Type == nullableReturnedType);\n        }\n        else\n            criteria.Expect(x => x.Type == returnedType);\n    }\n```\n\nNot really sure why that needs to be optional.  Not clear when you would ever not want that behavior.\n\nI'll try to get a pull request in with the above code soon.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9339640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9341025", "body": "Pull Request #177 contains the fix for this\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9341025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "CV1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/cf8cef80d700215bfff98ca2662857f014c00762", "message": "Update src/FluentNHibernate/MappingModel/AttributeStore.cs\n\nChanged Equals implementation to default Equals() implementation"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/06c20b7cc2e219cd7e279d9171e0b7465c03ed83", "message": "Update src/FluentNHibernate/MappingModel/EqualityExtensions.cs\n\nFixed incorrect implementation of ContentEquals methode"}], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/159", "title": "Patch 4", "body": "Fixed issues in mono (2.10) with BinaryFormatter\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/156", "title": "Update src/FluentNHibernate/MappingModel/Collections/LayeredColumns.cs", "body": "This class uses a Hashset intern. This is no problem with .Net, but mono (at least version 2.10.8 and sooner) has a incorrect Hashset implementation, so this class is not workin correct with the mono runtime. As long the hashset in mono is not fixed, I suggest to use a Dictionary here.\n\nUsing a Dictionary in this class instead\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcrockett": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a5f3365f6fb5af902f038e8256bf6dd1aa6b9e54", "message": "Ignored majority of unnecessary build warnings"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexZeitler": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/4a3a66ed6fb837705aae43b9ae434ffd87998b38", "message": "fixed broken wiki links in README"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CedricYao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7311bc672ad802efefa19982c133d8bbc7c3811a", "message": "added ReferenceBag object to be able to test on an unordered bag.\nCreated the PersistenceSpecification Extentions for the ReferenceBag\nobjects"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d79203a751a495e75850208d04be30093a876b21", "message": "Adding an extension method to allow inverse list for the PersistenceSpecification test.\nThis prevents the issue with Brownfield apps where check foreign key constraint is enabled"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "citizenmatt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/60e8fac55d3a8ff47c0d30eb079668e652ec2755", "message": "Nuget package contains intellisense file instead of pdb"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebastienros": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7c284d5224eaf9b2cd4609490833b1e2140759cf", "message": "Adding MsSqlCe40 dialect configuration option"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbushell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d01cf18b56a39357995a684cd34620a533ed715e", "message": "Fix for issue #113"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2777440", "body": "You're correct - the fix was simple for you and me because we already have FNH/NH experience.\n\nHowever, these example projects are explicitly mentioned in the FNH wiki, and will probably be mainly used by FNH/NH noobs, so I think it's very important that they \"just work\".\n\nI have very clear memories of how painful it was to start using FNH/NH because of poor or out of date documentation, incomprehensible error messages, and the lack of good working sample projects.  I almost gave up in disgust a couple of times, but am now glad I stuck with it.\n\nThe situation is better now than a couple of years ago, but it would be a shame to discourage people trying FNH for the first time because of such a simple glitch.\n\nI'd fix it myself, but assume I'd have to install and learn to use git, \n\nI'm reluctant to do this, because I don't really have time, and my perception (gleaned from other people's comments) that git is \"user hostile\". \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2777440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2777468", "body": "Accidently closed the issue - reopened.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2777468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3221468", "body": "Problem is in AutoPersistanceModel.AddMapping.\n\nIt calls GetTypeToMap, which returns the root base class.  The base class gets mapped multiple times - but the type that was passed in never gets mapped.\n\nHere's the fixed code (but see my comments below):\n\n```\n    private void AddMapping(Type type)\n    {\n        Type typeToMap = GetTypeToMap(type);\n\n        // Fixes https://github.com/jagregory/fluent-nhibernate/issues/113,\n        // where 'type' would not be mapped if 'GetTypeToMap' returned the\n        // base type\n        if (typeToMap != type)\n        {\n            log.BeginAutomappingType(type);\n            var derivedMapping = autoMapper.Map(type, mappingTypes);\n\n            Add(new PassThroughMappingProvider(derivedMapping));\n        }\n\n        log.BeginAutomappingType(typeToMap);\n        var mapping = autoMapper.Map(typeToMap, mappingTypes);\n\n        Add(new PassThroughMappingProvider(mapping));\n    }\n```\n\nThis fixes my problem, and all the unit tests still pass.  But I'm somewhat suspicious about the GetTypeToMap method, which always (as far as I can tell) returns the root base class, no matter how many levels of inheritance are in between.\n\nBut I have multiple levels of inheritance, and all the classes are now being mapped, so I obviously don't understand how it all works.  Might be worth a look, though.\n\nAlso, I looked at the unit tests, and did not see any that checked for more than one or two levels of inheritance.  Tried to create some, but without success.\n\nAnyway, please review and add to the trunk.\n\n-Tom Bushell\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3221468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3221954", "body": "Hazzik,\n\nI see James Gregory did some code pulls a couple of weeks ago, but he doesn't seem to be very active these days.  \n\nHope he's not burned out, but couldn't blame him if he is - I imagine maintaining open source code on your own time is not much fun after a while.\n\n-Tom Bushell\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3221954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3225358", "body": "@hazzik - Done! Thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3225358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3225441", "body": "Problem is in **AutoPersistanceModel.AddMapping**.\n\nIt calls GetTypeToMap, which returns the root base class. The base class gets mapped multiple times - but the type that was passed in never gets mapped at all.\n\nThis change fixes my problem, and all the unit tests still pass. But I'm somewhat suspicious about the GetTypeToMap method, which always (as far as I can tell) returns the root base class, no matter how many levels of inheritance are in between.\n\nBut I have multiple levels of inheritance, and all the classes are now being mapped, so I obviously don't understand how it works. Might be worth a look, though.\n\nAlso, I looked at the unit tests, and did not see any that checked for more than one or two levels of inheritance. Tried to create some, but without success.\n\nAnyway, please review and add to the trunk if it's up to snuff.\n\nThanks,\n\n-Tom Bushell\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3225441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Saulis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/5750d669cdfe504534cdd5ed00cfccb235937f23", "message": "Changed the visibility of Id setters from private to protected on entities used on Examples."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3094159", "body": "This should fix it: https://github.com/jagregory/fluent-nhibernate/pull/112\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3094159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tchrikch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/a79bd8d3235fc15c8ea87ceb0fce5d68a6681dec", "message": "added the cascade.merge convention. It is present in nhibernate engine so\nchanges are only in the interface"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mbp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/022aec2c7a621cde98f8cb3ea96a034365e27ddc", "message": "Fix wrong assignment of name to Condition."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/c7c56e4cd308cdf757d94fdbf5802c34b76da933", "message": "Fix wrong specification which should apply to Condition."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/7447a2e441541f474fb262203f837a81408ecc3d", "message": "Remove obsolete method which has been obsolete since 2010-12-26 11:53:09, and which is not even used by class."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/69435f36329883f8d1255767e7a5b468dbcf277a", "message": "Fix performance issue searching in list of 'availableTypes'. GetLogicalParent would be called n^2 times at worst."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asbjornu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f0c7399664cbd77e601146bde9998a53909e2f0f", "message": "Safeguards and GetHashCode implementation"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/40adca59ad867ad5a17c469f10c502a739c863c8", "message": "Treating warnings as errors is a bit harsh, no?"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f71357be8e0da2a8c7d3d4c76d9557e68977f5e5", "message": "Output XML documentation for FluentNHibernate.Testing"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/84bad5bc61ad95f3ec0d76e8311f76df4b2193b4", "message": "\"despatcher\" renamed to \"dispatcher\""}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/ffa4938c6bf55ef4464a99f419df1334eb516341", "message": "Since AutoPersistenceModel can be inherited, we can't do reflection on GetType(), since it will return the derived class' type and not typeof(AutoPersistenceModel)."}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/d42e1d0ba7fec075861a609c49a54b3e0cd106ed", "message": "Fixed LICENSE link in README"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/0613648ef8fb5115d5997fbeadbe11d7969266b2", "message": "Added README file"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/04d3f80bc3babc895c56431a11d96cd52024a074", "message": "Added README file"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e474c884c90cfe0e769b6b6d9099cb23db2ff58e", "message": "Added README file"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/e925a36fee0762007923b99ab12fe3a28f0cf7da", "message": "Make the nuspec_patch require relative"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/fc3ffb227e6d56c482b8a2a59004c2ad5cf62142", "message": "Changed albacore dependency from '=0.2.4' to '> 0.2.4' and removed the 'tools/albacore/nuspec_patch' require to get rake to build happily."}], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/111", "title": "Separated FluentNHibernate.Testing utility classes into a separate project", "body": "I've separated `FluentNHibernate.Testing` utility classes into a separate project (`FluentNHibernate.Testing.Core`)  so they can be referenced in external projects using Fluent NHibernate without all the baggage the `FluentNHibernate.Testing` assembly currently drags with it, like a hard requirement on x86 due to a dependency on SQLite. Having a light-weight library without all of the actual tests also makes it more fit for a library that can be referenced.\n\nI also added documentation for the classes I moved to this new project.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RyanHauert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/51f0b85ca788aed553e6e19ffa9e06573a838c0c", "message": "Fixed possible NullReferenceException when using PersistenceSpecifications."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarkJPerry": {"issues": [], "commits": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/commits/f638a8930ed8411813c4630afc73f2da7f07bc34", "message": "Now merging conventions before export of mappings."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1815533", "body": "I came across the Convention problem today after upgrading to V1.3 from NuGet. I have included a small test project below which reproduces the issue. Some ideas that I had.found whilst debugging the source attempting to find the problem.\n\n1.) The Apply/Accept methods in my \"Convention\" classes are simply not being called. They are being found however. Looks like perhaps you are missing a call to the Accept/Apply methods inside the convention classes themselves.\n2.) In FluentMappingsContainer.cs line 139 it looks like you are \"Merging\" the conventions after writing the mappings which means anyone looking in the XML which is produced is not going to see their conventions applied.\n\nIf I have this totally wrong then apologies in advance just trying to help.\n\n```\n    public class AnsiStringConvention : IPropertyConvention, IPropertyConventionAcceptance\n{\n    public void Apply(IPropertyInstance instance)\n    {\n        instance.CustomType(\"AnsiString\");\n    }\n\n    public void Accept(IAcceptanceCriteria<IPropertyInspector> criteria)\n    {\n        criteria.Expect(x => x.Type == typeof(string));\n    }\n}\n\npublic class AnsiStringIdConvention : IIdConvention, IIdConventionAcceptance\n{\n    public void Apply(IIdentityInstance instance)\n    {\n        instance.CustomType(\"AnsiString\");\n    }\n\n    public void Accept(IAcceptanceCriteria<IIdentityInspector> criteria)\n    {\n        criteria.Expect(x => x.Type == typeof(string));\n    }\n}\npublic class User\n{\n    public virtual string Id { get; set; }\n    public virtual string Name { get; set; }\n}\n\npublic class UserMap : ClassMap<User>\n{\n    public UserMap()\n    {\n        Id(x => x.Id).GeneratedBy.Assigned();\n        Map(x => x.Name).Length(50);\n    }\n}\n\npublic class ConventionTest\n{\n    [Test]\n    public void Setup()\n    {\n        Fluently.Configure()\n            .Database(MsSqlConfiguration.MsSql2000.ConnectionString(x=>x.FromConnectionStringWithKey(\"connstr\")))\n            .Mappings(m =>\n                        {\n                            m.FluentMappings\n                                .AddFromAssemblyOf<ConventionTest>()\n                                .Conventions.AddFromAssemblyOf<ConventionTest>()\n                                .ExportTo(\"d:\\\\\");\n                        }).BuildSessionFactory();\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1815533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1815584", "body": "Further to my last comment. It does seem that moving line 139 : `model.Conventions.Merge(conventionFinder);` above the export mappings stuff to line 129 seems to fix the problem and all the tests pass.\n\nThis is also only an issue if you are exporting the mappings which I was doing in my test project.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1815584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "DiogoBarros90": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/382", "title": "Changed the MySQL ConnectionString builder.", "body": "This builder needed to be extended to allow port specification.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BrunoJuchli": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/381", "title": "Have NuGet install newest NHibernate version when installing FLuentNHibernate in an empty project", "body": "Changing the NHibernate dependency to be any 4.X, with Nuget trying to install always the latest NHibernate version.\r\nI've clarified this behavior in [my comment here](https://github.com/jagregory/fluent-nhibernate/issues/365#issuecomment-330136149).\r\n\r\nI'd like to put the change up for discusson. It changes the behavior of what dependency-version nuget installs, but I guess it doesn't make BindingRedirects unnecessary.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "norrbacka": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/379", "title": "Implementation for cascade all-delete-orphan for Has-one mapping", "body": "Accordingly to Xhafan on https://stackoverflow.com/questions/13864384/fluent-nhibernate-one-to-one-doesnt-have-cascade-all-delete-orphan/44026508#44026508 who wrote:\r\n\r\n\"_This is now supported in NHibernate 4.1 - one to one relation ship cascade \"all-delete-orphan\" is now properly supported (issue NH-1262 has been fixes in 4.1). I tested that and can confirm it's working - once you set the child one-to-one property to null, it issues sql delete command for the child.\r\n\r\nUnfortunately, fluent nhibernate does not support it, as it has been last updated in 2015. But, you can build fluent nhibernate yourself from the source code (https://github.com/jagregory/fluent-nhibernate, How to build Fluent NHibernate? ; I struggled with this a bit - you need to install ruby, rubygems, run InstallGems.bat, manually run \"bundle install\" (was not executing for me for some reason), and build the solution using \"rake\" command).\r\n\r\nThen all you have to do is to move method AllDeleteOrphan from CollectionCascadeExpression class to CascadeExpression class and build it (you can also build it using visual studio 2010+ opening FluentNHibernate.sln, but you have to run \"rake\" command at least once).\r\n\r\nenter image description here\r\n\r\nCustom built (by me) FluentNHibernate.dll version 2.0.3.1 with HasOne AllDeleteOrphan support can be downloaded from here_\"\r\n\r\nI've not tested my changes because I am not familiar with ruby and rubygems so I have not tried to build it, yet doing a pull request maybe could encourage someone else to bring this change to existence by reviewing my change, building and test it.. At the very least it can be inspiration for others struggling with the same mapping issue. Xhafan also linked a compiled version with this change, however some may find it a bit risky to just use someone else's dll.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sebazzz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/367", "title": "Allow setting class type of keyreference", "body": "This allows interfaces or abstract classes to be mapped. Fixes #78.\r\n\r\nIn addition I'd like to add a TODO to [CompositeIdentityPart](https://github.com/jagregory/fluent-nhibernate/blob/1dff2abe031adf7caeccdbb4c134c3937672cb2b/src/FluentNHibernate/Mapping/CompositeIdentityPart.cs#L153). FluentNHibernate should *not* set the class at all because this causes NHibernate to ignore `entity-name`, thereby making the method of [`EntityName`](https://github.com/jagregory/fluent-nhibernate/blob/1dff2abe031adf7caeccdbb4c134c3937672cb2b/src/FluentNHibernate/Mapping/KeyManyToOnePart.cs#L62-L66) useless. Removing the class could however be a breaking change. I have not done this, because I'd like to discuss that first.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "banias": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/348", "title": "Automapper overrides joins for sub classes", "body": "Currently Fluent Nhibernate ignores Automapping overrides for subclasses that uses in a class hierarchy with discriminator column.\n\nThus, it's impossible to produce an hibernate mapping that mixes Table-per-subclass and Table-per-hierarchy like:\n\n```\n<class name=\"Payment\" table=\"PAYMENT\">\n    <id name=\"Id\" type=\"Int64\" column=\"PAYMENT_ID\">\n        <generator class=\"native\"/>\n    </id>\n    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n    <property name=\"Amount\" column=\"AMOUNT\"/>\n    ...\n    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n        <join table=\"CREDIT_PAYMENT\">\n            <property name=\"CreditCardType\" column=\"CCTYPE\"/>\n            ...\n        </join>\n    </subclass>\n    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n        ...\n    </subclass>\n    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n        ...\n    </subclass>\n</class>\n```\n\nMy commit fixes this problem: Join override can now be used both for class and subclass automapper overrides. \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "visubesy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/347", "title": "Use Type as PropertyPart CustomType instead of only name", "body": "Currently, Fluent NHibernate uses only the **case-insensitive** name of the type in PropertyPart.CustomType<T>() because it uses the constructor TypeReference(string) instead of TypeReference(Type). This leads to problems if there are two types in the same namespace which only differ in upper case or lower case, e.g. MyProject.Abc and MyProject.AbC. CustomType<Abc>() may result into a wrong mapping which uses AbC instead of Abc (or vice versa). The result depends on the order of the types in the assembly.\n\nMy commits fix that problem.\n\nIt looks like that the other classes of Fluent NHibernate already use the correct constructor of TypeReference.\n\nI don't know if there are further places in the Fluent NHibernate code which use only case-insensitive names although a concrete Type was passed.\n\nI didn't change the constructor TypeReference(string) to work case-sensitively because someone could depend on its case-insensitive behaviour.\n\nCould you please pull my changes?\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TAkkerman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/343", "title": "Removed invalid cast in ClassInspector.Components.", "body": "Similar issue to PR #324: ClassInspector.Components had some leftover casts that are no longer valid.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcpreston26": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/334", "title": "Automapper: union-subtree not propagating through class hierarchy", "body": "I am converting a project from using ClassMaps to using the AutoMapper in order to simplify the existing project and any future changes.  One class inheritance tree in the project is built using UnionSubclassMapping and when attempting to build the NH configuration using the automapper, the following error is thrown:\n\n> NHibernate.MappingException: (XmlDocument)(267,8): XML validation error: The element 'union-subclass' in namespace 'urn:nhibernate-mapping-2.2' has invalid child element 'joined-subclass' in namespace 'urn:nhibernate-mapping-2.2'. List of possible elements expected: 'property, many-to-one, one-to-one, component, dynamic-component, properties, any, map, set, list, bag, idbag, array, primitive-array, union-subclass, loader, sql-insert, sql-update, sql-delete, results\n> et, query, sql-query' in namespace 'urn:nhibernate-mapping-2.2'.\n\nThis inheritance tree has three layers. The AutoMapper was not carrying the knowledge that union-subtree was to be used down to the grandchild object, which caused it to switch and start using joined-subtree, which is not allowed.\n\nI have assembled a patch and a test for checking the issue.  I don't know if a similar issue exists for other subclassing strategies.  I can also confirm that the patched version of Fluent works with my project and it is now generating correct HBM files.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fru": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/330", "title": "Respect existing table name", "body": "When a table name is already set it shouldn't be overriden.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atharaxia": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/258", "title": "EnsureMappingsBuild is called in PersistenceModel.ImportProviders to pre...", "body": "I have to map a legacy database with the following (simplified) structure\n\nActiveRecord        Root Table and Class\nTypeInfo            Child Table and Class with foreign key to ActiveRecord\nMessageType     Class that is also mapped to the TypeInfo table\n\nAs it is not possible to mix table per subclass and table per hierarchy in one inheritance tree, \nI mapped TypeInfo to a view and made it a new root table. To accomplish this, a FluentMapping was used\nin addition to the other automapped tables.\nWith the current FNH version this causes a DuplicateMapping exception as MessageType is also mapped as joined subclass of the ActiveRecord class.\nI fixed that, calling EnsureMappingsBuild in PersistenceModel.ImportProviders.\nI'm not sure if this is the exactly correct place - nevertheless all existing UTs succeed.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alberto-chiesa": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/168", "title": "Property Formula mapping override fix", "body": "Fix Property.Formula mapping override: if a Formula is specified, the Columns collection should be ignored.\n\nWithout this, if I use automap+overrides, the property will already have a Column property set, and it will not be possible to overcome this.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5725778", "body": "I checked out the source code and saw I was on an OLD version. I'm now checking if the problem is still around on master.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5725778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5726470", "body": "Ok. I'm closing the issue because I cannot verify the status of the problem on the current release.\nI'm bound to an older one for my project (and, sadly, I don't understand the layered new code...).\n\nThank you so much for this wonderful library.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5726470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/163", "title": "FluentNHibernate \"Object reference not set to an instance of an object\" on MONO", "body": "i just avoid the question of hashset bug of mono :)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "paulbatum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/430742", "body": "Thanks Lee, its all good. I've applied your changes to my repository, it'll be in the official trunk before long.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/430742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/840981", "body": "Nice! +1 for WTF reduction!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/840981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6470381", "body": "Hi there Oskar, the wiki page on contributing was out of date (I've updated\nit just now). I am no longer active on the Fluent NHibernate project. You\nwill need to get James' attention to get this pull request applied.\n\nSorry for the inconvenience,\n\nPaul\n\nOn Wed, Jun 20, 2012 at 10:25 AM, Oskar Berggren <\nreply@reply.github.com\n\n> wrote:\n> \n> @paulbatum It seems according to the wiki I should've made sure you got\n> notified, but I'm not sure that happened. Any chance of applying this?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/jagregory/fluent-nhibernate/pull/144#issuecomment-6461230\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6470381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7682438", "body": "If I recall correctly, the rake script should run all the specs. So if you\nhave ruby installed you should be able to run the specs without installing\na VS plugin.\n\nOn Sun, Aug 12, 2012 at 3:41 PM, Gleb Chermennov\nnotifications@github.comwrote:\n\n> Ok, that's really odd - I found a spec that checkes this specific case\n> (mapping component from a field). I don't have MSpec Resharper plugin\n> installed right now, and the field in the spec is public. Need to run all\n> the tests including the specifications again.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/153#issuecomment-7680657.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7682438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8984876", "body": "Do you have a UserID property on your object with a private setter? That's\nwhat the error is actually complaining about. The error is not complaining\nabout the ID property (it would say set_ID if that was the case).\n\nOn Fri, Sep 28, 2012 at 3:22 AM, Haroon notifications@github.com wrote:\n\n> I don't really understand this, in your example (\n> https://github.com/jagregory/fluent-nhibernate/wiki/Getting-started) it\n> says we should make the ID setter private i.e.\n> \n> public virtual int Id { get; private set; }\n> \n> But i get the exception:\n> \n> Message :The following types may not be used as proxies:\n> Foo.Model.User: method set_UserID should be 'public/protected virtual' or\n> 'protected internal virtual'\n> \n> I have downloaded the latest fluent nhibernate and nhibernate from nuget,\n> I am new to nhibernate so please bear with me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/jagregory/fluent-nhibernate/issues/170.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8984876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/53245", "body": "Levenshtein for the pairing! Cool idea!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/53245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Ieuan81": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/527393", "body": "Any news on this?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/527393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mirapalheta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/719980", "body": "Some other changes, looks a mess but the final result is ok, almost midnight, need to sleep.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/719980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/949001", "body": "Great, thanks.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/949001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "knocte": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/903593", "body": "ping? can this be pulled upstream?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/903593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/310901", "body": "Hey, have you guys reported this bug into Mono's bug tracker?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/comments/310901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ashmind": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/922776", "body": "Found a duplicate mapping exception, so too early to pull.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/922776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "danielmarbach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/925811", "body": "Already pull request opened ;)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/925811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Buthrakaur": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/925822", "body": "I see - you were faster, so I'm closing this one.. :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/925822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jochenjonc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1025335", "body": "Hi,\n\nI pulled this change because I had troubles getting it to work if the test was in a Transactionscope.\nBut in fact I'm not sure if it is the correct way to do it. I was hoping you could help me clarify it out.\n\nI started a topic on google groups just for that: https://groups.google.com/forum/#!topic/nhusers/qK6vtJ_QBqU\n\nJochen\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1025335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "benfulton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1628506", "body": "This appears to be the same as issue #28.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1628506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2089225", "body": "I can't find any obvious issues. I think perhaps the assembly from which the user is expecting to add mappings is being optimized right out of the call stack in release mode. If I can find an email address I'll try to contact the OP.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2089225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pleb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1668351", "body": "I'm having a similar problem.\n\nIn the RelationshipPairingVisitor class there's a FindAlternative method which I believe isn't taking care in finding an alternative that also has the same child type.\n\nWhen I change this line\n\n```\n.Where(x => x.ContainingEntityType == current.ContainingEntityType\n```\n\nTo this\n\n```\n.Where(x => x.ContainingEntityType == current.ContainingEntityType &&\nx.ChildType == current.ChildType)\n```\n\nMy problem goes away.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1668351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ermau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1768147", "body": "I think we just discovered a bug in GitHub. I forked, made the changes and submitted the pull request. After a while, I deleted my fork. Recently I recreated the fork (missing my previous changes), before you merged. This pull request now shows as 0 commits and diff, and the changes I made weren't actually merged in.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/1768147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Eskat0n": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2236393", "body": "Fix for this issue is crucial for our developement process.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2236393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rstackhouse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2766780", "body": "I encountered this as well. If you change the visibility to protected, this will work.\n\nA simple \"Replace In Files\" swapping private for protected will fix this.  \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/2766780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mattwang75": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3298169", "body": "Fwiw, we have the exact problem.   We want our overridden property in base class and subclasses ignored.  While it ignores in base class, it doesn't in subclasses.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/3298169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "toddlangdon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5047857", "body": "I am getting this same exception while trying to map an ICompositeUserType - is this an issue with FNH or not?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5047857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "robbygregory": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5998806", "body": "Are there any release notes published anywhere on this?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/5998806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sharique": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6169156", "body": "+1.\nThere should be a zip added for downloads on GitHub download page.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6169156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rohancragg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6271062", "body": "I have a similar problem. After having specifiec .UseOverridesFromAssemblyOf I am then using IAutoMappingOverride. When trying to specify that a string column is a NaturalId.ReadOnly I get the same error.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6271062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6271762", "body": "It occurred to me to try using IgnoreProperty in the Override first...\n\nThis seems to prevent the error message (though the .ReadOnly() still seems not to be having the expected effect - CustomerCode column is still nullable)\n\n```\npublic class CustomerConfigOverride: IAutoMappingOverride<Customer>\n{\n    public void Override(AutoMapping<Customer> mapping)\n    {\n        mapping.Schema(\"MySchema\");\n        mapping.IgnoreProperty(c => c.CustomerCode);\n        mapping.NaturalId()\n               .Property(c => c.CustomerCode)\n               .ReadOnly();\n...\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6271762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mxmissile": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6460296", "body": "`Could not load file or assembly 'NHibernate, Version=3.3.0.4000,`\n\nThis is really annoying when starting a new project or upgrading FNH and using the nuget gui. I dont know much about the Nuget innards but can the NH version to be forced? \n\nhttp://docs.nuget.org/docs/reference/versioning#Constraining_Upgrades_To_Allowed_Versions\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6460296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6461177", "body": "Your right, and I apologize. Just frustrating when it does not \"just work\".  \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/6461177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adriaanp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7390330", "body": "Would also like this to be pulled into the main branch.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7390330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Shihayazad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7422278", "body": "Is there a reason why this was reverted? Or any indication on how this is going to be fixed? The disfunctional DeepCopy is still an issue, even in other places. e.g. when using CompositeUserTypes in SubclassMaps. Since the SuclassMaps get cloned, the additional specified columns are missing.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7422278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7424938", "body": "The fix was being reverted, was something wrong with it? I have a similar issue: In a SubclassMap, I can't use CompositeUserTypes because of this (DeepCopy is not able to deserialize several ColumnMappings). The fix worked for me, and for now it does not seem to have any side effects. But of course, I do not have an overall overview, so any indication why this fix was reverted would be helpful.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7424938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7546683", "body": "So, could we give this changeset another try? I ran all test provided in FluentNHibernate.Testing and they were all green (after applying firo222's changes to my local rep). Are there any other tests that should be checked?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7546683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8646015", "body": "Any update on this? As far as I can tell, this is also affecting https://github.com/jagregory/fluent-nhibernate/issues/140\nSo, even if this would make tests fail, wouldn't it be good to see which ones are failing so that we can fix the potential issues introduced with this change?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8646015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8718902", "body": "Thanks for picking this up! And yeah, sounds like the test needs to be updated\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8718902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8725170", "body": "I don't know the use case of the initial issue, but my issue is that I can't use Composite UserTypes with multiple columns in subclass mappings, because the DeepCopy is not able to deserialize several ColumnMappings\n\nRegarding the test I might have misunderstood something. What did you mean with \"Should we change it?\"\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8725170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nabils": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7582826", "body": "I am having the same issue as well. This version of FluentNHibernate is completely unusable because of it. I have spent a couple of days trying to track it down. It seems to related to the  mapping.DeepClone in GetSubclassMapping method in SubClassMap<T>. The mapping has the correct number before it is serialised and after it does not.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7582826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yngvebn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7842583", "body": "Thanks! A workaround is to replace .Column(instance.Name) with .Column(string.Empty)\nSeema like something has changed with how the ConventionBuilders do their job..\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7842583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeremylcarter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7988623", "body": "What is involved in getting Sql Query to work? I am interested in helping out.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/7988623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dlwiii": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8160624", "body": "Ok, I was just surprised when I accidentally did that, that I did not get a runtime exception.  It does make sense that the second will win, though it does not really make sense to call it twice in the same constructor.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8160624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8160636", "body": "So I will close this out.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8160636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8530042", "body": "I agree this is a good long-term goal.  My team is just getting started with FNH, so likely will not be able to help very soon, but we do want to eventually contribute.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8530042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidcornish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8860212", "body": "@chester89 this appears to be exactly it - https://groups.google.com/forum/?fromgroups=#!topic/fluent-nhibernate/g4M1l3S3YWI - there's a one-line fix there which you can patch your code with.  Presumably this hasn't been applied due to the risk of breaking existing code.\n\nIs there any way I can achieve the same thing with a convention?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/8860212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hahmed": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9028291", "body": "sorry the property name was was actually `UserID`, I renamed and forgot to update the setter, I simply pasted in the example above from the help site. I think the help site should be updated to say:\n\npublic virtual int Id { get; set; } \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9028291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9028293", "body": "and not \n\npublic virtual int Id { get; private set; }\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9028293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11077326", "body": "@firo222 thanks\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11077326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "robscottnh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9546582", "body": "So, I've just run into this as well.  Is a fix for this in the works?\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9546582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9583213", "body": "I'd be happy to provide (most of )a test case for you.  It's actually fairly simple scenario to set up.  I'm just not sure what parts to assert against in your tests..., but I could provide the mappings for you.  As an aside I've been able to make things work with .hbm files, so I have  a workaround, but I'd really like to get the three hbm files out of my solution :)\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9583213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shiznit013": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9566528", "body": "I spent several hours on this problem yesterday, and thought that I was doing something wrong.  It seems that `JoinedSubClass` ignores whatever column name you supply it.  I have a `Person` class with an `Employee` subclass.  Both classes have an `Id` property, but the column names underlying them are different (_PersonID_ and _EmployeeID_).  When automapped, the subclass key column is generated as _ParentClassName_id_ (_Person_id_ in my case), disregarding the column name supplied to the override `mapping.JoinedSubClass<Employee>(\"EmployeeID\");`\n\nBelow is a simplified version of my situation:\n\n``` c#\nnamespace Domain.Model\n{\n    public abstract class Entity<T>\n    {\n        public virtual T Id { get; set; }\n    }\n\n    public class Person : Entity<Guid>\n    {        \n    }\n\n    public class Employee : Person\n    {\n    }\n\n    public class PersonMappingOverride : IAutoMappingOverride<Person>\n    {\n    public void Override(AutoMapping<Person> mapping)\n    {\n        mapping.Id(x => x.Id, \"PersonID\");\n        mapping.JoinedSubClass<Employee>(\"EmployeeID\");\n    }\n    }\n}\n```\n\nWhich generates (I stripped out the fluff):\n\n``` xml\n<hibernate-mapping>\n  <class name=\"Person\">\n    <id name=\"Id\">\n      <column name=\"PersonID\" />\n      <generator class=\"guid.comb\" />\n    </id>\n    <joined-subclass name=\"Employee\">\n      <key>\n        <column name=\"Person_id\" />\n      </key>\n    </joined-subclass>\n  </class>\n</hibernate-mapping>\n```\n\nLuckily, our project is setup to use all 3 flavors of mapping, so I can just map them fluently for now.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9566528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9570546", "body": "If I put an override in the subclass, it does honor those properties in the joined-subclass portion of the mapping file.  It just won't honor the key column name.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/9570546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hotgazpacho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10049955", "body": "The correct way to test this would be to instantiate your own instance of the class you want to persist, then use the overload of PersistenceSpecification.VerifyTheMappings that takes an instance of the class.\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10049955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "laheinzen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10285536", "body": "Dunno if it'll help, but here it goes..\n\nIdentityStep.cs\n\n```\n namespace FluentNHibernate.Automapping.Steps\n public class IdentityStep : IAutomappingStep\n{\n\n    static GeneratorMapping GetDefaultGenerator(Member property)\n    {\n        var generatorMapping = new GeneratorMapping();\n        var defaultGenerator = new GeneratorBuilder(generatorMapping, property.PropertyType, Layer.Defaults);\n\n        if (property.PropertyType == typeof(Guid))\n            defaultGenerator.GuidComb();\n        else if (property.PropertyType == typeof(int) || property.PropertyType == typeof(long))\n            defaultGenerator.Identity();\n        else\n            defaultGenerator.Assigned();\n\n        return generatorMapping;\n    }\n}\n```\n\nI know chester89 said he'd have a look, but since I was the one who opened the issue, and jagregory pointed at the right direction, I decided to go help and tried to help. \n\nI changed to test also for byte and shorts, created two tests and it seemed to work. \n\nI was going to try to contribute but I'm afraid to break something since I'm so new at this. \n\nAlso, you may also want to update the \"CONTRIBUTORS - READE ME!.txt\". It tells me to go to \nhttp://wiki.fluentnhibernate.org/Contributing (404 error) instead of https://github.com/jagregory/fluent-nhibernate/wiki/Contributing\n\nThanks a lot!\n\nPS: Just a question: what happens if a try to use a uint as Id? \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10285536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10297527", "body": "I'm aware that short and (specially) byte may be considered too short for Id. \n\nBut consider the list of states for a country. I don't think it'll ever surpass 256 states. And it seems like a waste of space to store their IDs as an int. I know \n\nI've stumbled upon the problem when creating a employee class. It will never have more than 10.000 employees. To me, it sounds like a waste of space to use a int (4 bytes) when a short can be used. \n\nAnyway, before opening the issue, I questioned jagregory via twitter if it was by design, and he said it wasn't and suggested me opening an issue. I know it can be easily corrected by hand in my code. \n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10297527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10303646", "body": "I think I can help. \n\nI originally stumbled on the Tests before finding the logic - searched for \"identitfy\". But I couldn't get from the tests to the IdentityStep class. I had search for \"generator\" to get there.\n\nAnyway, here are the tests...\n\nTestFixtures.cs\n\n```\nnamespace FluentNHibernate.Automapping.TestFixtures\npublic class ClassWithIntId\n{\n    public virtual int Id { get; set; }\n}\n\npublic class ClassWithLongId\n{\n    public virtual long Id { get; set; }\n}\n```\n\nAutoPersistenceModelTests.cs\n\n```\nnamespace FluentNHibernate.Testing.AutoMapping.Apm\n[TestFixture]\npublic partial class AutoPersistenceModelTests\n{\n    [Test]\n    public void ShouldUseIdentityGeneratorForIntIds()\n    {\n        var autoMapper = AutoMap.Source(new StubTypeSource(typeof(ClassWithIntId)));\n\n        new AutoMappingTester<ClassWithIntId>(autoMapper)\n            .Element(\"class/id/generator\").HasAttribute(\"class\", \"identity\");\n    }\n\n    [Test]\n    public void ShouldUseIdentityGeneratorForLongIds()\n    {\n        var autoMapper = AutoMap.Source(new StubTypeSource(typeof(ClassWithLongId)));\n\n        new AutoMappingTester<ClassWithLongId>(autoMapper)\n            .Element(\"class/id/generator\").HasAttribute(\"class\", \"identity\");\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/10303646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "silversens": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11327316", "body": "Same thing here, would be great if a \".Unique\" was added to \".Property\"\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/11327316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alexrc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12144846", "body": "I have the same problem!\nDo you know if its already fixed?!\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12144846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jasminsehic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12579502", "body": "I have the same issue with MSSQL. HBM generated contains the correct length specified in mapping of the KeyProperty but looking at generated schema I see varchar(255).\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/12579502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jamesklett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13099830", "body": "Yes, they fixed the bug already in Entity Designer\n", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/issues/comments/13099830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andreas-eriksson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160628869", "body": "Might be better to use this this syntax [5.0.3, 6.0)", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160628869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160629053", "body": "Change to 2008-2018", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160629053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160634046", "body": "Do we need a reference to EntityFramework?", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160634046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160634399", "body": "Remove?", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/160634399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/161182037", "body": "I don't think that would affect builds since the specific version of NHibernate will be specified in the projects packages.config anyway. I think it will only affect the version that is initially installed into a project the first time someone adds FluentNHibernate.\r\n\r\nI am not sure if specifying the upper limit on the NHibernate version is a good idea or not as we don't know if version 6.0 will break any functionality with fluent.", "reactions": {"url": "https://api.github.com/repos/jagregory/fluent-nhibernate/pulls/comments/161182037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}