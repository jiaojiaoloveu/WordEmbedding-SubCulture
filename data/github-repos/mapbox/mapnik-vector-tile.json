{"_default": {"1": {"dylanede": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/266", "title": "How are projections meant to be handled?", "body": "I'm trying to see how to take a given map (with styling), \"render\" it to a vector tile, then load that vector tile in as a data source and render an image. This last step requires that the data sources of the map style are edited to point to the vector tile layer data sources. I have this mostly working - I get a rendered image, but the projection is wrong. It looks like I must alter the projections in the layers as well.\r\n\r\nAs an example, I have an original map that renders like so, with a **longlat** projection:\r\n\r\n![image](https://user-images.githubusercontent.com/10339269/34569341-650ffd2a-f160-11e7-9a2e-6bf28eb2471d.png)\r\n\r\nAfter writing it to a vector tile (using `create_tile`, passing in the extent of the map) and loading it back in then correcting the map layers to point to the vector tile data sources, I get this output:\r\n\r\n![image](https://user-images.githubusercontent.com/10339269/34569392-8a99f4f6-f160-11e7-8178-c31320be57e8.png)\r\n\r\nIt appears that as well as being projected wrong (despite still specifying **longlat**), the geometry is getting clipped - the southern tip of the Faroe islands is now not visible at all, and less of France is visible.\r\n\r\nI suspect that the problem is due to me using\r\n\r\n```c++\r\nstd::make_shared<tile_datasource_pbf>(layer, 0, 0, 0)\r\n```\r\n\r\nto create the data sources, since it appears that the `x`, `y` and `z` parameters are specific to web mercator tiling.\r\n\r\nWhat do I need to do to get this to render correctly in longlat, with tiles also generated in longlat? I would like to retain the ability to specify tile extents explicitly in whatever projection I choose. Would this require a custom data source implementation?\r\n\r\nAlso, what coordinate system are the vector tiles stored in? Is it the same as the input map?\r\n\r\nThanks in advance.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lihuadong1988": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/265", "title": "mapnik-vector-tile is very slow when data is too big?", "body": "", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remster": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/261", "title": "build error (box2d.hpp changed location)", "body": "with the basic flow: clone + make\r\n```\r\nIn file included from ../src/vector_tile_raster_clipper.cpp:1:0:\r\n../src/vector_tile_raster_clipper.hpp:8:10: fatal error: mapnik/geometry/box2d.hpp: No such file or directory\r\n #include <mapnik/geometry/box2d.hpp>\r\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\nwhen i fix the location of box2d.hpp this is immediately followed with:\r\n```\r\nIn file included from ../src/vector_tile_processor.ipp:6:0,\r\n                 from ../src/vector_tile_processor.cpp:2:\r\n../src/vector_tile_strategy.hpp: In member function \u2018void mapnik::vector_tile_impl::transform_visitor<TransformType, NextProcessor>::operator()(const mapnik::geometry::polygon<double, mapnik::geometry::rings_container>&)\u2019:\r\n../src/vector_tile_strategy.hpp:217:33: error: there are no arguments to \u2018begin\u2019 that depend on a template parameter, so a declaration of \u2018begin\u2019 must be available [-fpermissive]\r\n         for (auto const& ring : geom)\r\n\r\n```\r\nWhat seem to be able to see is a version mismatch, the polygon in my mason_packages/.link/include/mapnik/geometry.hpp:\r\n```\r\ntemplate <typename T, template <typename> class InteriorRings = rings_container>\r\nstruct polygon\r\n{\r\n    using coord_type = T;\r\n    using rings_container = InteriorRings<T>;\r\n    linear_ring<T> exterior_ring;\r\n    rings_container interior_rings;\r\n\r\n    inline void set_exterior_ring(linear_ring<T> && ring)\r\n    {\r\n        exterior_ring = std::move(ring);\r\n    }\r\n\r\n    inline void add_hole(linear_ring<T> && ring)\r\n    {\r\n        interior_rings.emplace_back(std::move(ring));\r\n    }\r\n\r\n    inline bool empty() const { return exterior_ring.empty(); }\r\n\r\n    inline std::size_t num_rings() const\r\n    {\r\n        return 1 + interior_rings.size();\r\n    }\r\n};\r\n```\r\nIs not iterable, whilst on mapnik master it [migrated to mapbox geometry](https://github.com/mapnik/mapnik/blob/master/include/mapnik/geometry/polygon.hpp#L35).\r\nIs this a known issue?", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/261/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "haoziluo": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/260", "title": "0.6.x polygon clip error", "body": "when clip polygon geometry to vt is error with boundary, I convert vt to geojson, like this:\r\n![2017-11-28 16 00 45](https://user-images.githubusercontent.com/2647388/33308478-90b1193c-d455-11e7-883c-eb5015114f75.png)\r\nbut clip polyline geometry is ok.\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rinigus": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/258", "title": "vector tiles from sqlite datasource - getting rid of rowid", "body": "I am generating vector tiles using tilelive copy (from bridge to mbtiles). Data is served from SQLite database(s) that were generated from OSM data (ogr2ogr) and preprocessed to arrange for simplifying import. While tiles seem to be fine, all layers have an additional `rowid` key that seem just to waste space in the tile. I wonder whether I am missing some parameter in Mapnik XML to disable rowid propagation into the generated tile. \r\n\r\nUsed Mapnik XML:\r\n\r\n```\r\n<?xml version='1.0' encoding='utf-8'?>\r\n    <!DOCTYPE Map>\r\n    <Map srs=\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\">\r\n  <Parameters>\r\n    <Parameter name=\"attribution\">Data (c) OpenStreetMap (and) contributors, ODbL</Parameter>\r\n    <Parameter name=\"bounds\">-180,-85.0511,180,85.0511</Parameter>\r\n    <Parameter name=\"center\">0,20,4</Parameter>\r\n    <Parameter name=\"format\">pbf</Parameter>\r\n    <Parameter name=\"maxzoom\">20</Parameter>\r\n    <Parameter name=\"minzoom\">0</Parameter>\r\n  </Parameters>\r\n  <Layer name=\"landcover\" srs=\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\">\r\n    <Datasource>\r\n      <Parameter name=\"file\">data/europe-estonia.sqlite</Parameter>\r\n      <Parameter name=\"key_field\">rowid</Parameter>\r\n      <Parameter name=\"table\">(SELECT rowid, geometry, class, subclass FROM\r\nosm_landcovers\r\nORDER BY area DESC\r\n) AS data</Parameter>\r\n      <Parameter name=\"type\">sqlite</Parameter>\r\n      <Parameter name=\"use_spatial_index\">true</Parameter>\r\n    </Datasource>\r\n  </Layer>\r\n</Map>\r\n```\r\n\r\n`tileinfo --verbose example.pbf`:\r\n\r\n```\r\nmessage: gzip compressed\r\nlayer: landcover\r\n  version: 2\r\n  extent: 4096\r\n  keys: class,rowid,subclass\r\n  values: grass,1547,park,441,meadow,wood,28343,forest,2428,28567,26360,28322,483,28319,28873,29816,rock,29068,bare_rock,28327,2426,29702,31058,39964,28803,28815,28309,38198,28872,32711,28310,28870,28337,28308,28311,wetland,28554,28345,32993,32989,29386,29375,980,35723,29704,39536,32983,32984,29376,33629,34250,32987,35716,32244,28871,33681,28335,35728,28778,34251,35720,32991,28338,38463,35721,33641,35730,32985,29418,33647,31800,29661,32986,33648,38462,32243,32990,28606,35731,34252,33244,35733,29383,38469,35734,33676,29531,30333,32992,29379,33680,33624,35724,32601,33622,33241,32995,35713,29378,28804,652,33653,29663,29377,35710,29381,28816,33626,35744,28809,28607,33628,28802,29385,33247,32996,38461,35747,28321,30334,33242,35676,34248,33643,34249,32994,38495,33673,34088,35675,30335,33649,33636,650,38497,28814,38775,35748,38776,33665,33243,33677,33620,33679,35749,38498,35735,29382,33246,33618,35630,35718,35714,651,33675,33664,33682,35729,38471,32519,33668,33672,38489,35742,1081,33625,33655,1250,38481,33619,33634,29380,38492,38491,38482,28320,30022,33645,35743,33238,38487,28808,33237,38484,33621,33632,32988,1249,38488,33667,33251,33674,32804,33638,33631,33630,29384,33644,38483,33654,32997,33663,38485,33627,33652,35711,35741,36858,38486,38494,33635,32520,29374,38774,38467,33248,33670,33666,33646,38464,38496,35726,35739,38470,33669,29533,33240,33678,35715,33671,35746,38773,33633,35712,35745,33236,33623,38772,32998,38465,31059,31060,33252,33245,38480,38479,38477,38490,38475,38466,38478,33637,33259,38472,33639,38473,33258,35727,38474,35719,35740,33239,38493,38468,30336,33642,35750,33254,33253,33250,33249,33257,33640,35717,33255,35722,35725,33256\r\n  feature: 1547\r\n    type: Polygon\r\n    tags: 0,0,0,0,0,0\r\n    geometries: 9,3981,1432,354,267,640,136,5,88,17,184,41,238,73,486,205,13,93,332,39,64,100,182,368,279,186,564,612,650,662,465,512,67,250,1233,934,429,170,67,46,169,148,97,128,1019,123,405,91,2075,727,415,133,17,25,20,135,78,26,166,501,92,161,252,199,144,67,56,57,414,235,50,41,694,419,275,447,59,21,43,79,288,175,272,123,256,73,572,129,414,111,242,85,15\r\n  feature: 441\r\n    type: Polygon\r\n    tags: 0,0,0,0,0,0\r\n    geometries: 9,5720,5941,546,124,6,132,34,176,62,144,96,46,54,302,73,154,10,76,40,168,158,8,136,114,50,122,15,34,57,94,33,44,46,210,99,126,31,136,75,154,53,266,17,144,45,224,37,88,36,180,22,168,7,140,19,34,109,486,48,138,24,522,160,1,220,661,165,293,2206,123,182,149,104,1733,728,55,175,295,104,66,180,857,360,127,5,37,26,35,66,1463,654,153,86,51,47,112,171,184,99,154,119,101,165,214,511,273,181,164,4,202,34,138,163,112,195,70,143,13,103,50,53,20,61,110,58,726,1155,173,473,507,433,141,193,147,111,31,223,150,319,15,9,742,2274,226,95,58,133,130,28,110,74,50,53,86,11,68,104,102,144,52,84,16,120,43,82,52,104,44,4,56,59,60,27,102,76,98,124,10,50,75,17,93,73,67,19,89,0,99,369,105,179,151,58,67,5,113,36,73,38,43,15,9,2664,703,154,137,8,97,42,65,56,43,104,68,52,74,80,20,74,116,15,76,6,58,72,108,44,98,58,26,77,41,83,71,95,119,39,89,13,1,95,32,91,15\r\n  feature: 28343\r\n...\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "springmeyer": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/255", "title": "Integrate mvt-fixtures@3.0.0", "body": "Once the upcoming release of mvt-fixtures is out, we should upgrade mapnik-vector-tile to use them.", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/206", "title": "Use `box2d<value_type>` in `decode_geometry`", "body": "The bbox used in decode_geometry is currently hardcoded to `double`. It should be using the `value_type` for best performance: https://github.com/mapbox/mapnik-vector-tile/blob/69d0d8e9df0c27521f685d730a8fd10a190d8dbb/src/vector_tile_geometry_decoder.ipp#L775-L784\n\nWaiting on https://github.com/mapnik/mapnik/issues/3405\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/205", "title": "Visual comparisons instead of geojson text comparisons", "body": "We need to add support for visual comparisons of changes in geometry outputs. Minor changes in floating point differences currently trigger the need for massive updates to the test fixtures like https://github.com/mapnik/geometry-test-data/commit/65abcf0600d25aefebfe77c62261d4c1d7ac4d31 which is dangerous because:\n- The diff is way to big for github to show\n- Meaningful changes can too easily go unnoticed.\n\nA visual approach (rendered png) would make it viable to review all the changes efficiently rather than just hope for the best.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/201", "title": "Add 'upgrade=bool' option to composite", "body": "To force upgrading v1->v2 tiles in the composite function you can currently pass `reencode:true`. However, that will trigger all tiles to be re-encoded, at all zoom levels, including v2 tiles. Ideally one could pass `upgrade:true` to the code and have only v1 tiles re-reencoded. Any v2 tiles would be appended with `append_layer_buffer` for best performance.\n\nThis is important now that we anticipate wanting to/having to handle mixed v1 and v2 at the same time.\n\n/cc @flippmoke @jakepruitt @yhahn \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/200", "title": "vtile-fuzz should generate testcase for re-running", "body": "", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/192", "title": "Test coverage for src/vector_tile_load_tile.hpp", "body": "We have 0% test coverage for https://coveralls.io/builds/5659740/source?filename=src%2Fvector_tile_load_tile.hpp. This is a pretty important file (heavy usage via node-mapnik) so we should prioritize adding some tests of it.\n\nNote: coveralls has an epic bug (or is it the way we generate coverage data?) whereby 0% shows as 100%. So not funny it's almost funny.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/159", "title": "Start running tests on appveyor", "body": "Currently mapnik-vector-tile is only tested via node-mapnik on windows and therefore we only test the code in `src/`. But we should ideally start testing per commit on appveyor.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/126", "title": "Avoid clipping overhead when geometry is fully within clipping box", "body": "This is an obvious optimization, but was not possible before the new mapnik::geometry structure. Now it should be easy to check the bbox of a geometry (or even a single part of a multigeometry) and skip running it through clipping when not needed.\n\nThis should help performance significantly when rendering dense data at low zoom levels (when the majority of the features are not getting clipped even when run through the clipping pathway).\n\nSteps toward this:\n- [ ] write a benchmark harness\n- [ ] add some sample data that represents cases that would benefit from this optimization and sample data that would not (like clipping large polygons that span the whole earth no matter the zoom level)\n- [ ] optimize appropriately for each geometry type\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3eabc257748fe1bcf1a434bc47f06576b166a69d", "message": "Merge pull request #256 from mapycz/add-inline\n\nadd inline attribute to functions implemented in header file"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/259ff557f1757c4bd6ecc7350bcd278514bbdfa7", "message": "bump to v1.5.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/02494691fa7b1ba788d992a61aa90f72d4a36d7b", "message": "stop comparing geojson strings, only Approx geometries - refs #205"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3a5e1120b438a3ff3136c880642d7ec6127e011e", "message": "fix timing of pre_build_check"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e0756d5744b3949a4530e528bfecc1a27529ede5", "message": "more all mason specific logic into Makefile wrapper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f73e2049d2954d0c19b45e4dfb8395f4fcf893d1", "message": "fix coverage build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a72d82322744540f08d623fb66d06cc826a06323", "message": "Merge pull request #248 from CartoDB/pass-query-variables\n\nPass variables to replace tokens in query"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/06ee39f9f74eff6dab5d8b4eba0252049fdd9aab", "message": "Merge pull request #253 from mapbox/fix-external-build\n\nadd back ability to build against external mapnik - refs #227"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3d6ea56b242fb528b7d7c45874773ff57bad0b9f", "message": "Actually fix coverage buildg"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/09a6366e205e224847b14fd362d35a5679d35176", "message": "fix coverage build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8828c73de838835379544fb7de31107261ddcf68", "message": "more build fixes"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/eb2c3e8f19a14888fbae9e6d85461f7aa6ee0d84", "message": "fixup build logic"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/4b4aa608a38b90aa4661c7d213ad67305e506a39", "message": "fix mapnik install logic via mason"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e6773b9ef6be86e8a9147f738d5cb3a5befc2193", "message": "fix mason version"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/708b54e15a9de256f55e2db67f1601bda5b9d2ef", "message": "upgrade deps, fix build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7eed5321d9c016029c985751dc8605062a76376e", "message": "fix undefined varg"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/75dee8f21e4a0adbf1ea6ba835a537ab640a65e2", "message": "add back ability to build against external mapnik - refs #227"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a0f66c8496f9009e62af3917ffe222d9bc73a70a", "message": "Merge pull request #252 from mapbox/fix-build\n\nFix build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7c11aa5f01567539033395fad2548a43b7e08fba", "message": "fix another undefined variable"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1992b88a638078c5b6060a27fed56c87fe763b4e", "message": "no longer need bootstap called independently"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f3b552dc6eb0c289eaaed6852f7454dc9e0e4f4d", "message": "add test runner"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d4cc513cdda3028c8c9d7fe8a1e8dd2bc6f0f251", "message": "ensure protoc is on PATH for build"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8966bc5ccae2e2f0e6181532df855887d5d95169", "message": "fix unbound variables"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/907846dbef12de55c71a132e917ef191dd23188d", "message": "Merge pull request #251 from mapbox/tileinfo-display-unset-id\n\nTileinfo: disable feature id as unset, when it is"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/cfebfae541aa93893ef950c9bea95b34c9e0adc1", "message": "display unset feature id"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2faa9fbc34edee37c1487316aba28da7af129579", "message": "Merge pull request #242 from mapycz/scale-denom-layer-test\n\nadd test - filtering by scale denominator on layer level"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f32294ae99b1fadca5246e429f6a28501add91fe", "message": "Merge pull request #243 from mapycz/duplicate-code\n\nDuplicate code elimination"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/bfc0e249634bebaf0750dbfc05c45a45057c4730", "message": "Merge pull request #244 from mapbox/xcode-upgrade\n\nUpgrade to latest Xcode"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/55ec07d17d3d0494dfbfc56b1f8c6a4d15315581", "message": "Upgrade to latest Xcode \n\nAvoids hitting https://github.com/mapbox/mason/issues/389"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8a558d0cb95c67c2fe2d288400a89afd984cbc35", "message": "switch out codecov badge [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/fe1979ce0291fdaaa6b5c940fb112a5afd939623", "message": "Merge pull request #237 from mapbox/cov\n\nRepair code coverage checking and reporting"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/bafa814f50fc18a059ec6cb14bf56f2d95f11152", "message": "add codecov ignores"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/70b4af4c8fa909e6a4b3ea879fefb89122b45e1e", "message": "download codecov command"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/dbe6066282dc0793935c963bf5225ee372f0923e", "message": "re-enable coverage builds, switch to posting to codecov"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8fbca551fda01f9b44512299c79bf9f16595f7f9", "message": "remove unneeded c++14 related flags"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/dd7099a4f623fb85f368177b5a547a8c91f6202b", "message": "more compile fixes in tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/74d04ec41083eef7d8908a5609fdc5a7c97d8570", "message": "We also need geometry.hpp"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/724e5c096237342c475bec60f3718c190b30dc45", "message": "upgrade to latest protozero (1.5.1)"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/461e2b06c25070a2f05c49d1fd1da0ace0105edc", "message": "Merge pull request #234 from mapbox/proto2-syntax\n\nMark the .proto as proto2 syntax"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/0616f8362fabe81ef65e80890a0929c2c74325a6", "message": "Mark the .proto as proto2 syntax\n\nThis allows the .proto to be used with libprotobuf >= 3.x without warnings."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/55eebb5b4439edec8fb8c1455e5ad9e1dc59670d", "message": "Point as latest mason rather than branch"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/4e29fec6d088d6ca277910031449a2e92f70526b", "message": "bump to v1.2.2"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/79acb20d26cb05ad049a693398059841771bad81", "message": "Merge pull request #222 from mapbox/protozero-v1.4.2\n\nProtozero v1.4.2"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/437f8efd9809973122b5d20ae6ee0e87711889be", "message": "add dynamic include dirs support ala mapbox/protozero#59"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/de6628c00c1b757f397450f2ea3ae20018fe0e4b", "message": "port to protozero v1.4.2"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2ac762171c741fbc054a01adf0793872cf17b3f1", "message": "avoid unused variable warning"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2bf4f9a8923a9bc5997fec202cff1a106ff9fa4f", "message": "xutils dev for g++ build too"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/bdf4aa13b11bb3919db2428079d8ff248d659f02", "message": "Merge pull request #221 from mapbox/update-deps\n\nUpdate deps"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1a867f51e66af933d1fad9413da576a3ce825c6f", "message": "install xutils-dev for lndir"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b987a3a71aa52f65142952205bb1057120660cbd", "message": "update mason/deps"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d1d8362b576ccc80bb61a768d28e45b84002912e", "message": "Merge pull request #220 from mapbox/gcc5\n\nTest building with g++-5"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e639605b82bdd88ab39e5a66a1bdf2f758b44540", "message": "remove -Qunused-arguments flag for g++-5"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/22abf171132ef0329c0b9f8cb36f213277bf4124", "message": "test building with g++-5d"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/353ee003c37b80206f4d408011dd054b2d4a0411", "message": "also install gdal for GDAL_DATA"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d992c4771e6b6c20fc9bf30ad44c260f6291207b", "message": "fix #217"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/395b92f7c14a94c95c4649f7ae663f5ab1015c4c", "message": "trim apt packages [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/934b5089078c22b0c384bc4aa681be3a2577db0c", "message": "update contributing doc [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e78a30ab06585b42bfae3d4454f73e352ec41995", "message": "parallelize mason install + update boost libs"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/090e0ab21fdcd05a05b6cd0d8474c1e77ee0bb8a", "message": "use clang++-3.8"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/670a6b307040a813938da76d7d8f504635064881", "message": "upgrade compiler + mason deps to match mapnik master"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/34d1b8e3311efbc432f89abc2a7d8de38c2dd6d6", "message": "regenerate test/fixtures/rasterize-expected-1.png"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/69d0d8e9df0c27521f685d730a8fd10a190d8dbb", "message": "amend e6e85ce4716 - remove unneeded use of std::move"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b8bd2abd70bbae6bc58196893af695c0263bb0bc", "message": "cleanup unused debugging code"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/308b9723f5f8e7fcab893a7177548804358f9092", "message": "also fuzz fill types and extents"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e38b322decda1525fb775938f61a1ec3729bbc9e", "message": "fuzz all the options to mapnik::vector_tile_impl::geometry_clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/41ead7171cfbef4561360242895c06080ac8b22a", "message": "Merge pull request #203 from mapbox/fix-slow-raster-allocation\n\nFix slow raster allocation"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/69aab12cca534fced2aefd2ecce5f4c08facf1ad", "message": "port https://github.com/mapnik/mapnik/commit/66160e9754764e0ce3dbb2065071ba883f51ee58"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/59a0868e695cec1e4f9684af32475e17c453cb8f", "message": "bump to v1.1.2"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a98d9dac56be1cffb48691dfb061156eb3d674b9", "message": "fix test result since tile is upgraded"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/df00aea3fea6540816f30cc0876db5ce0948f6a1", "message": "Add test coverage of loading raster data - refs #192 (indirectly #202)"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c7b4aa002fd06ca3f23d92ddc38c9e4fe7fea362", "message": "Removed unused header"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/dba0faf29bd4bf65dd7d470311f0989e28e1150d", "message": "avoid excessive allocation of rasters internally"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9cbed798604fe9b54489d39f28545e898b4e378d", "message": "Add vtile-fuzz - refs mapnik/clipper#3"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ca78ccbfa84ec53df24724ba8ca0625ba7313182", "message": "fix invalid protozero usage - closes #197"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3481fb2783163e09100c34b09f14398f4b835c70", "message": "Fix Debug builds by stripping release flags from mapnik-config"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b5037dbb27e34249dd48d49c39c0ba4d97d363e0", "message": "bump to v1.1.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/68a87d3fd00e74bcf7ce6786a95e8fc1b6e91b1a", "message": "Add slack notifications [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e83fb802038933ce9ccbb2d4f829f63424c5c831", "message": "make code resiliant to upstream mapnik geometry changes"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1e5631a62992f147dae73f5146c11b0bf51cec4d", "message": "simplify code: don't throw in case of upgrading non v1 tiles"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/314880434815be9001988acda1f5581d46ec6b58", "message": "Start on test coverage of tile loading - refs #192"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/62e9ad924953b201e12912e4bfee521e6e3e0d7e", "message": "fix test so that the files are actually loaded and the right error is checked"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/84f14ca6f6fbf9a28691bb8b6cc82405bf5d2843", "message": "c++ style: use const& where possible"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/4c7355a44c0a12ccf57779f23bdac25eeeafc6c8", "message": "Merge branch 'master' of github.com:mapbox/mapnik-vector-tile into upgrade-opt-in"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8bc2f9874d2d98cdb04f02f9f14c29fc5ee02670", "message": "make validation opt-in"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/896a5271de9f448916e589535ede5a328dbb867d", "message": "make expensive v1 -> v2 auto-upgrade opt-in / default off"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f4004999e2f0409c8e99e85c66ce67e3687bcbf9", "message": "remove dead/usused code"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/0c724f1b9497feb10f77c1a63d7bf0d2b94f02d6", "message": "back to shared_ptr - reverts f8e60ab4372"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/dfad31dd17dc3ec3f79127796ac299851bb5c800", "message": "iwyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/119b71620dc5efa9189f02881d3839c859931be1", "message": "c++ style: always catch std::exception not ..."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f8e60ab4372a3a55e3b8fc6c33aaca51b9eebc9f", "message": "for best perf prefer unique_ptr over shared_ptr"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/85cba87b3a91e4ee31f245cc8d8a780725c23a27", "message": "fix spelling in code comment"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9ebcdf713aec9fecf8dedd6239b809e4ad7d927b", "message": "fix spelling and grammar in code comments"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/127a4c848c309e40f6b7a635a56bd109be563298", "message": "keep image_buffer in tigher scope"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2a87de4ab18aa034b71aa747667df872ca860751", "message": "[travis] key linux caches"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/dd83c4cf8301c90583d9a8c8c03d4877b58502bd", "message": "ccache+convert coverage to linux"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1ab33002e77e8c7d3a271c251d1dc2a17a66b5f7", "message": "try xcode7 rather than xcode7.3"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/26967b68607ee0932a292435b55d391ae487dd7d", "message": "[travis][osx] also upgrade pip to avoid http://stackoverflow.com/questions/6200056/pip-broke-how-to-fix-distributionnotfound-error"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9edbb2c423464dadd2c916c5a7223418c0496a70", "message": "[travis][osx][debug] xcode 7 images don't have pip installed..."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d3cb1d14c9550adaed824af0c02017d615824f2f", "message": "fix DYLD_LIBRARY_PATH inheritance on OS X"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/03624fc580daca7b213162bacc4ee8141a41b92e", "message": "fix mason checkout"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/0a2ab92708297c53ecd29080d2a1b6e3ef37c2ca", "message": "upgrade clang to avoid segfault with older,buggy clang"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5969c45518542737048e3b965efe186314a86b63", "message": "pin mason to avoid breakage from upcoming improvements - refs mapbox/mason#131"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/42bbab4e44376979f95e762c571095d939759f02", "message": "avoid -Wheader-hygiene warning"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/85c16a2cd9bccaa132c3c799d4777bdb554200dc", "message": "Add missing includes (fixes compile against latest mapnik)"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/bf5cf15c330e2824d4937e2d3cfd6bd105fa7ade", "message": "upgrade to protozero v1.3.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/002f8a5fe6e62da3a97e6321451355b3339f3af2", "message": "use mapnik/warning_ignore to consistently suppress boost warnings [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/db25964db2b2d7dcde26a68832159320b6330f74", "message": "make threading mode (launch policy) runtime configurable"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8ecbe0bd9cbe70e93e751acd8284fb756707f671", "message": "include <mapnik/global.hpp> for M_PI on windows"}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/213", "title": "Stop allowing and tracking empty layers", "body": "/cc @flippmoke to merge if this looks good.\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17813212", "body": "ah, thanks for catching the typo. It should be `3857`, aka 900913, `3785`, while often equivalent (it is in latest proj4 files), is actually the deprecated/ first try of the epsg to describe the projection. `3857` is what I meant to type.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17813212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17890525", "body": "awesome, thanks for the suggestion.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17890525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/18691619", "body": "There are not yet python bindings. Tracking this at #9\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/18691619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20696511", "body": "will look into this, thanks.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20696511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20715599", "body": "Regarding the immediate problem: Mapnik should not be built with an external agg anymore as we've started relying upon critical changes to the bundled agg (as of Mapnik v2.1). Are you building against an external agg or is the Mapnik fedora package somehow packaging Mapnik's AGG?\n\nOverall your change looks reasonable, to avoid issues with differently named `libicuuc` or `libboost-system`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20715599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20716096", "body": "working on this in a branch: https://github.com/mapbox/mapnik-vector-tile/compare/cull-layers\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20716096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20778431", "body": "okay, thanks good to know.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20778431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21078305", "body": "implemented basic bbox filtering in v0.2.0 / 86de9909169ac43a01194b605244f2ede86ad63e. An rtree might be interesting for overzooming if the node-mapnik API allowed for creating the `tile_datasource` once, then caching it, since in that case the query return time would be purely based on how fast the features are looked up since construction would be  done already. But I really doubt this is a meaningful bottleneck yet. closing therefore.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21078305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21155773", "body": "should be solved - all tests are passing now on 32 bit ubuntu raring (launched an instance on aws to debug).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21155773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885098", "body": "done, ran: `npm publish && npm owner add yhahn`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885223", "body": "thanks readme fixed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21885223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22132081", "body": "logging notes:\n- looks like upb is starting to get some love again (and actually compiles): https://github.com/haberman/upb/commit/61109fca1f967771c21dc7184aee35f3b439c577\n- faster version of protobuf encode/decode: https://github.com/bumptech/palm\n- re-implementation of protobuf messages for json-like data: https://github.com/dcodeIO/PSON \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22132081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22141869", "body": "@kkaefer - yes, exactly, thank you - I am in fact working from that gist which you shared last month. Currently writing a python implementation of a full decoder to get an exact sense of all the pieces involved. Will eventually look at porting back to C++\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22141869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22770757", "body": "Interesting. Sounds like a bug. Would it be possible to post a small testcase so I can take a closer look?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22770757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22774428", "body": "@durandt - sounds fine. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22774428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23423683", "body": "Thanks. Not had a chance to look at the original testcase yet and am traveling until next week. So if you have something simpler and easier to run then please post it or email me. \n\nOn Aug 27, 2013, at 5:05 AM, durandt notifications@github.com wrote:\n\n> Hi Dane,\n> \n> Patrik sent you an email with a test-case last week, but I have been trying today to build a simpler test-case based on one shape-file with only one line that is divided in two tiles.\n> But as far as I can see from my test-case the line information appears in both generated tiles so I'll try to locate the problem (ie the \"line\" appears on the north tile but not on the south tile) and come back to you with a focused test case if I can find any problem.\n> \n> Regards,\n> \n> Thibault\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23423683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23978218", "body": "Thanks for helping upgrade catch. As far as distributing catch in its non amalgamated form, wouldn't that make sense only for a catch .deb itself. Why would a test framework need to be modified?\n\nAlso, in general are you thinking of packaging mapnik-vector-tile as a .deb? If so can you explain why? I would prefer this not be packaged. It should rather be considered to be part of node-mapnik.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23978218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24761690", "body": "> node-mapnik deb out of multiple source tarballs, that are node-mapnik.tar.gz + mapnik-vector-tile.tar.gz.\n\nThat would be excellent. The idea of the repo being external on github is so that it can have its own test suite and because this code is a candidate for inclusion in mapnik core at some point. But as I said, and as it sounds like you understand, currently this code should functionally be considered sources of node-mapnik only (or sources of whatever app uses it - in the future I plan standalone python bindings). So I really do not want the situation where this repo is it own .deb because that would be _very_ hard to keep in sync. Right now its dead easy to keep in sync because of the way npm/package.json works but I can't imagine that working as well with .debs.\n\nAnyway, thanks for packaging mapnik and node-mapnik in debian, which is awesome.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24761690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24762043", "body": "The code looks correct to me `if (layer_buffer_size)` should return true if the optional holds `0` (based on the way that boost::optional works). If not then there must be a bug somewhere. Can you provide a failing testcase?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24762043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283778", "body": "sorry, what was the problem you hit exactly?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283789", "body": "ah `error: could not open: '--verbose'`, thanks.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283923", "body": "hmm, that does look odd. Anyway, your fix looks good, merging!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25497664", "body": "Correct, there are no python bindings yet. It's on my list, but my list is long.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25497664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26454982", "body": "HI @flippmoke - thanks for your interest and effort! Boost python is the way to go, unless we want to wrap things in pure c (to allow ctypes bindings). I will try to find time to review what you've done and think more about this, but will not have time for a few weeks. Feel free to ping with questions however here if any come up.\n\n> Do you think a tile cutting script has its place in this library?\n\nFeel free to do that in your fork if useful. My preference would be for such a script to be in a separate repo however, not this one.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26454982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26602143", "body": "Yes, I will add that Mapnik is well suited to working with tile concepts, whether the output is rendered images or not. So, you are right that there is no \"rendering\" going on it this module.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26602143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/27613794", "body": "perhaps a signed/unsigned problem: #18\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/27613794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28237126", "body": "The apparent doubling is due to zigzag encoding: https://developers.google.com/protocol-buffers/docs/encoding#types\n\n``` js\n> tile_size = 256\n> path_mult = 16\n> extent = tile_size * path_mult\n4096\n> center = extent/2.0\n2048\n> (center << 1) ^ (center >> 31)\n4096\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28237126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28239134", "body": "@zdila `vector_tile_processor.hpp:252:18: error: \u2018Point\u2019 is not a member of \u2018mapnik\u2019` indicates that headers from Mapnik 3.x (current master) are being found. You need to stick with Mapnik 2.3.x branch for now. The [c++11](https://github.com/mapbox/mapnik-vector-tile/tree/c++11) branch is tracking master currently.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28239134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/31800235", "body": "https://github.com/mapbox/mapnik-vector-tile/commit/39f907fd3d1c95c7ecc61298130c274741ff2776 moves to implementing the one potential fix I see. This has the drawback of now incorrectly splitting single polygons with holes, but this seems like a lesser problem than completely flattening multipolygons.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/31800235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34583305", "body": "Wow, thanks for catching this. It looks like I published v0.3.4 over a month ago: https://npmjs.org/package/mapnik-vector-tile but certainly forgot to tag. I've now tagged and pushed the tag to github.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34583305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35032336", "body": "Can no longer replicate this. I thought it was as simple as doing:\n\n``` diff\ndiff --git a/src/vector_tile_processor.hpp b/src/vector_tile_processor.hpp\nindex bdf0d9a..272860f 100644\n--- a/src/vector_tile_processor.hpp\n+++ b/src/vector_tile_processor.hpp\n@@ -304,8 +304,8 @@ namespace mapnik { namespace vector {\n                         buffered_query_ext.maxx(),\n                         buffered_query_ext.maxy());\n #endif\n-                    typedef mapnik::coord_transform<mapnik::CoordTransform, poly_clipper> path_type;\n-                    path_type path(t_, clipped, prj_trans);\n+                    typedef mapnik::coord_transform<mapnik::CoordTransform, mapnik::geometry_type> path_type;\n+                    path_type path(t_, geom, prj_trans);\n                     path_count = backend_.add_path(path, tolerance_, geom.type());\n                 }\n                 break;\n```\n\nand then running the tests. But that no longer triggers the problem. Also this change against node-mapnik also does not trigger any new failures. So, I must be forgetting the exact case. Going to close for now until I remember.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35032336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35052227", "body": "@artemp - when you are up, take a look at my progress. Please work by branching master `mapnik-vector-tile` and developing against Mapnik 2.3.x. Trying to maintain patches against Mapnik 3.x is too much trouble right now. Also: feel free to branch out before my changes or revert if you see a better solution. My goal was to chip away incrementally while I developed testcases for the simple but critical cases we know about, before worrying about polygons with holes. If you see better solutions/re-writes to the backend `add_path` at least the testcases I've added should be viable.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35052227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35092965", "body": "Okay. So dropping 'length == 0' check means we can drop a first line_to if is is not a major move past the first move_to? I wonder in that case if we should watch the total length and drop the move_to as well in the case it was a two point line?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35092965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35107791", "body": "re-opening, hitting this with tilelive-bridge tests.\n\n```\n\n  tiles\n    1) should render a (0.0.0)\n    2) should render a (1.0.0)\n    3) should render a (1.0.1)\n    \u2713 should render a (10.0.0) \n    4) should render a (10.765.295)\nlibc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Unknown command type (is_solid_extent): 0\nAbort trap: 6\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35107791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35110307", "body": "A command of `0` is showing up right [https://github.com/mapbox/mapnik-vector-tile/blob/266471825645a937fd92ae3e9b86f91590f44070/src/vector_tile_util.hpp#L175]. But after https://github.com/mapnik/node-mapnik/commit/8ecc6a5e72ee8301c9ffae6cc596763f3bb2f85f this is not longer showing up in the test runs.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35110307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35116376", "body": "great, will work to create testcases for the above cases. btw, It think I found a subtle bug in the above patch (which I'm testing right now). I think we need this:\n\n``` diff\n- current_feature_->set_geometry(last_index - 2, (dx << 1) ^ (dx >> 31) + last_x);\n+ current_feature_->set_geometry(last_index - 2, ((dx << 1) ^ (dx >> 31)) + last_x);\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35116376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35143822", "body": "@artemp - I ended up tagging v0.3.5 with mapnik-vector-tile as of yesterday. So, I've not applied your additional fixes yet - in testing them I ran into unexplainable oddities when trying to update the test results. Some tests results were different and clearly better, but others were weird to me. So, on Monday I'll pick this back up to try to understand what is wrong and will plan to tag another release.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35143822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35146262", "body": "re-closing, in this case it  was a bug in latest work as part of #36 now fixed in 79efc20\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35146262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35175344", "body": "@artemp - had a chance today to dig deeper.\n- I created a new test runner in in `test/geometry_encoding.cpp` that can be run with `make geom`. I tried using json input and output, but aborted due to compile times. This string based approach is simplistic but I'm liking it - compiles fast and is easy to read and reason (even more so for me than wkt/json).\n- I found that the removal of the `length == 0` check is what triggers a bug in the code. While it certainly improves some test results it causes a case where x,y end up scrambled. See this testcase: https://github.com/mapbox/mapnik-vector-tile/blob/50bb89cd43ea8db59b2ab964e47e99c2067b6191/test/geometry_encoding.cpp#L133-L146. If the `length == 0` test is removed then this case ends up outputting a `move_to(0,1)` which is certainly wrong.\n- I found that the remainder of your patch is solid and I pushed it to master in d31bd62d588e31210dbe614e3a4eca\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35175344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35309657", "body": "Still seeing a case in TM2 rendering tests where some geometries see a major shift. With a world borders testcase it appears to be only a few of the large multipolygons (canada and russia) that are shifted. So my guess is that these are invalid somehow and we are not handling that case.\n![screen shot 2014-02-17 at 10 18 56 am](https://f.cloud.github.com/assets/20300/2188091/10b67884-9800-11e3-8b70-c74299af41e4.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35309657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35312381", "body": "this fixes the above problem:\n\n``` diff\ndiff --git a/src/vector_tile_geometry_encoder.hpp b/src/vector_tile_geometry_encoder.hpp\nindex bd2b7ee..568f1ad 100644\n--- a/src/vector_tile_geometry_encoder.hpp\n+++ b/src/vector_tile_geometry_encoder.hpp\n@@ -103,6 +103,8 @@ namespace mapnik { namespace vector {\n                 int32_t last_dy = ((last_y >> 1) ^ (-(last_y & 1)));\n                 int32_t dx = cur_x - x_ + last_dx;\n                 int32_t dy = cur_y - y_ + last_dy;\n+                x_ = cur_x;\n+                y_ = cur_y;\n                 // FIXME : add tolerance check here to discard short segments\n                 current_feature.set_geometry(skipped_index - 2, ((dx << 1) ^ (dx >> 31)));\n                 current_feature.set_geometry(skipped_index - 1, ((dy << 1) ^ (dy >> 31)));\n```\n\nBut, still trying to work up a testcase that can replicate it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35312381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35454411", "body": "All cases listed above are fixed + testcases covering. Will track future ideas like #38 and #39 in other tickets.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35454411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36168297", "body": "Testing this more in tm2. Seeing excellent results even with a tolerance of 32 and 64 (the upper thresholds you would ever want visually, since more is too simplified).\n\nBefore:\n![screen shot 2014-02-26 at 11 08 15 am](https://f.cloud.github.com/assets/20300/2274567/04c10970-9f1e-11e3-82ef-fa311bae01cb.png)\n\nAfter:\n\n![screen shot 2014-02-26 at 11 08 54 am](https://f.cloud.github.com/assets/20300/2274569/0822e462-9f1e-11e3-983d-04c7e918ade4.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36168297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36169488", "body": "I benchmarked with this testcase:\n- water polygons from http://openstreetmapdata.com/data/water-polygons\n- z0-6\n- hardcoded tolerance of 32 in tilelive-bridge\n\n![screen shot 2014-02-26 at 11 57 58 am](https://f.cloud.github.com/assets/20300/2274794/7687a526-9f20-11e3-9a6b-d233ff7d2a2f.png)\n\nAnd did not see repeatable differences in timing when switching between the `sharp_turns` branch and `master`. I did see that master produced an mbtiles of `11.9` MB while `sharp_turns` produced an mbtiles of `12MB` (which is good).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36169488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36170622", "body": "For reference: with current tolerance settings in tilelive-bridge `Math.max(0, Math.min(5, 14-z))` the export ends up at 17MB (and takes roughly the same time).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36170622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36171640", "body": "merged and closed by #40.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36171640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36172080", "body": "Closing. Discussed with @artemp that this is unlikely to help much. Now that more aggressive simplification is possible (without artifacts) with higher tolerance (#36 and #40) collinear points that are close together will be dropped anyway. And we assume collinear points that are far apart are not likely common enough to matter much to size. The only case where detecting and throwing out collinear points might help significantly is when tolerance/simplification is low, but this is not the target usecase. Also, trying to detect collinear points would be more expensive (likely requiring trig) than anything else we currently do during encoding.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36172080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41866462", "body": "I don't know what is happening, but your idea about perhaps the tile being incorrectly determined as empty is a good lead. node-mapnik does a check for whether tiles look \"solid\" meaning either empty or a single square polygon (like a clipped ocean tile). The check is right here: https://github.com/mapnik/node-mapnik/blob/master/src/mapnik_vector_tile.cpp#L1966 which calls into here: https://github.com/mapbox/mapnik-vector-tile/blob/master/src/vector_tile_util.hpp#L131-L209.\n\nA first step might be to check whether is `vtile.isSolid` check is returning true for this unrendered tile, which you can do by console logging right after this line: https://github.com/mapbox/tilelive-bridge/blob/master/index.js#L127\n\nAlso, one question: you say `tm2 displays nothing, but the tile's json shows data`. So you mean that calling `vtile.toJSON()` shows data?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41866462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44018137", "body": "Curious error. I've been testing with gdal 1.11 on osx and Ubuntu and not seen this yet. \n\n> On May 23, 2014, at 6:29 AM, Tom Hughes notifications@github.com wrote:\n> \n> I'm not 100% sure if gdal 1.11.1 is the cause here, but on Fedora 20 with gdal 1.10.1 the tests pass fine but on Fedora Rawhide with gdal 1.11.1 I am getting a failure:\n> \n> ./test/run-raster-test\n> ERROR 1: Only OGC WKT Projections supported for writing to GeoTIFF.\n> Z not supported.\n> \n> run-raster-test is a Catch v1.0 b26 host application.\n> Run with -? for options\n> \n> ---\n> \n> ## vector tile output 1\n> \n> test/raster_tile.cpp:21\n> ...............................................................................\n> \n> test/raster_tile.cpp:52: FAILED:\n>   CHECK( 1 == tile.layers_size() )\n> with expansion:\n>   1 == 0\n> The initial error about the projections seems to be a gdal error.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44018137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44092750", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44092750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44894763", "body": "See https://github.com/mapbox/mapnik-vector-tile/pull/40\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44894763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52810455", "body": "Thanks, yes, this needs revisited. We are using only AGG-based clipping still which - by design - leads to the edges you see. Not a blocker if the tile is slightly buffered and they can be discarded out of sight but yes, certainly not ideal for the reasons you detail. The intended plan early on was to use Clipper or Boost.Geometry but we ran into blocking hangs and crashing bugs, respectively. However both toolkits have had a number of releases since so hopefully we can move to Clipper or Boost.Geometry in upcoming releases.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52810455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52870580", "body": "Want to provide a patch?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52870580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/53465266", "body": "@mourner - Definitely seems ideal to fix on the generation side. That said ideally i'd take a closer look at this not till end of sept/early oct - given other things in the pipeline.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/53465266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54235346", "body": "sorry I missed this, thanks for catching - tagged from https://github.com/mapbox/mapnik-vector-tile/commit/62ea9dca6a5f9158ca2658381e4194974ad97a8a\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54235346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54249755", "body": "@yhahn and I chatted this morning and concluded that:\n- Is is important to be able to quickly check if a tile contains any data - e.g. if it is empty. Just added a new method to answer this question: https://github.com/mapnik/node-mapnik/commit/17b87f2bc94eda1cddde3d6742237e9afbdb65b5.\n- Overall `isSolid` is useful for image tiles but less so for vector tiles. With regard to images a \"solid\" tile is any rendered tile with a solid color - which could have resulted from either lack of data or just rendered features looking all the same (like ocean tiles).\n\nHowever with vector tiles it currently means:\n- Is the tile empty, or;\n- Do all the layers in the tile contain only features which look like a square (the result of clipped polygons).\n\nHowever two problems exist:\n\n### intersections\n\nThe square detection logic failed to check intersections correctly. So a layer with a feature geometry like this could look solid:\n\n```\n     +----------------------+     \n     |                      |     \n     |                      |     \n     |                      |     \n     |                      |     \n     |        tile          |     \n     |                      |     \n     |                      |     \n+--------------------------------+\n|    |                      |    |\n|    |                      |    |\n|    +----------------------+    |\n|                                |\n|                                |\n+--------------------------------+\n             geometry             \n```\n\nThough in practice the testcase we isolated actually looks like this (due to clipping artifacts surrounding the geometry but outside of the visual extent):\n\n#### actual failing intersections test\n\n```\n+                                    +\n|                                    |\n|      +----------------------+      |\n|      |                      |      |\n|      |                      |      |\n|      |                      |      |\n|      |                      |      |\n|      |        tile          |      |\n|      |                      |      |\n|      |                      |      |\n| +--------------------------------+ |\n| |    |                      |    | |\n| |    |                      |    | |\n| |    +----------------------+    | |\n| |                                | |\n| |                                | |\n+-+--------------------------------+-+\n               geometry               \n```\n\n### buffers\n\nThe isSolid check does not know about the buffer originally used to render the layer. So this data is \"solid\" if you consider the just extent of the tile. But it's not \"solid\" if you consider the buffered extent of the originally renderer layer(s) (and yes, layers can have different buffers!):\n\n```\n   +---------------------+\n+--+                     |\n|                        |\n|  +------------------+  |\n|  |                  |  |\n|  |                  |  |\n|  |                  |  |\n|  |                  |  |\n|  |                  |  |\n|  |                  |  |\n|  |                  |  |\n|  |                  |  |\n|  +------------------+  |\n|                        |\n+------------------------+\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54249755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54249994", "body": "As far as the problem 1) above resulting from clipping artifacts + lack of line intersection tests, this really bugged me so I fixed it: https://github.com/mapbox/mapnik-vector-tile/commit/b450ae154e59cbdc54371ee9b1b0e62e60b15be7. However, buffers still make `isSolid` of dubious so lets always prefer the use of `vt.empty()` over `vt.isSolid()` and even consider deprecating `isSolid()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54249994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54250013", "body": "closing: `vt.empty()` is the way forward.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54250013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54250047", "body": "vt.empty added to node-mapnik in https://github.com/mapnik/node-mapnik/commit/17b87f2bc94eda1cddde3d6742237e9afbdb65b5\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/54250047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56745720", "body": "> How can we use the same zoon-related rules to keep 0-level zoom as simple as it rendered on png?\n\nThe zoom related rules in the XML are being used (Min/MaxScaleDenominators). So the fact that the  .pbf contains a lot of data indicates that the stylesheet actually queries a lot of data at z0. What I've found in rendering various stylesheets to vector tiles is that the process exposes sometimes large inefficiencies (querying more data than is needed for rendering the desired visual result) that were previously invisible when simply rendering to png tiles. The `openstreetmap-carto.xml` stylesheet is not a good place to start for experimenting with vector tiles because it queries a lot of data and will likely need serious optimization to be viable. I recommend starting with a very simple dataset to get a feel for things first.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56745720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56875888", "body": "@pnorman ah, thanks, I overlooked the fact that all zoom conditions in the openstreetmap-carto.xml are style-level and not layer-level and therefore my earlier comment was incorrect. So my corrected answer would be: the mapnik-vector-tile converter respects only layer-level min/max zoom level conditions. They are in the same units as the style-level ones (Min/Max ScaleDenominator) but need to be set in the XML to be respected. For some details on how to set them in a way that works with tilemill/carto see https://github.com/mapbox/carto/issues/248. See also https://github.com/mapnik/mapnik/issues/1447\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56875888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58469553", "body": "Yes, this is needing fixed / known issue. Use `clang++` instead of `g++` for now to avoid the problem.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58469553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58477915", "body": "What Mapnik version are you using? If v2.2.0, then try with the 2.3.x branch: https://github.com/mapnik/mapnik/tree/2.3.x\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58477915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59595488", "body": "planning on working around this by updating to the latest vector tile spec protobuf which includes\n- https://github.com/mapbox/vector-tile-spec/pull/17\n- https://github.com/mapbox/vector-tile-spec/issues/2\n\nStarted here: https://github.com/mapbox/mapnik-vector-tile/commit/1532ccce20df6b8ec031873ea59b6bd364689818\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59595488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59595511", "body": "looks like your problem is that `-lprotobuf-lite` is not working and protobuf is not getting linked. Slightly different than #58 but likely related, lets track at #58\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59595511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59596433", "body": "Check out https://github.com/mapbox/mapbox-studio and specifically https://www.mapbox.com/mapbox-studio/source-quickstart/\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59596433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59596577", "body": "@ericfischer as discussed on chat, I think a good solution is to add a new mapnik symbolizer for fast rendering of multipoints. Let's call it the `dot` symbolizer for now. I've stubbed out:\n- A new branch of Mapnik you can experiment with: https://github.com/mapnik/mapnik/compare/dots\n- A corresponding `dots` branch of `mapnik-reference`: https://github.com/mapnik/mapnik-reference/compare/dots\n\nAfter you've got Mapnik to a point you'd like to test then we'd together create new node-mapnik packages via a `dots` branch (https://github.com/mapnik/node-mapnik/compare/dots) and then point Mapbox studio at it like:\n\n``` diff\ndiff --git a/package.json b/package.json\nindex 81b2f62..0ca8dd3 100644\n--- a/package.json\n+++ b/package.json\n@@ -31,8 +31,8 @@\n     \"js-yaml\": \"https://github.com/mapbox/js-yaml/tarball/scalar-styles\",\n     \"fstream\": \"0.1.x\",\n     \"tar\": \"0.1.x\",\n-    \"mapnik\": \"1.4.17\",\n-    \"mapnik-reference\": \"~6.0.1\",\n+    \"mapnik\": \"https://github.com/mapnik/node-mapnik/tarball/dots\",\n+    \"mapnik-reference\": \"https://github.com/mapnik/mapnik/-reference/tarball/dots\",\n     \"carto\": \"0.14.0\",\n     \"speedometer\": \"0.1.2\",\n     \"tilelive\": \"5.2.3\",\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59596577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59597458", "body": "fixed by #66\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59597458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60013530", "body": "why is this needed?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60013530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60014445", "body": "thanks for catching this, will fix shortly.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60014445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60014768", "body": "cf86f8fa4b213fd0d9c2d8abb25bfef73a2b6952\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60014768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60346586", "body": "f95271d brings this back to life in a cleaner and optional way. going to keep open for a while to ponder longer term strategy on multigeoms.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60346586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61502945", "body": "noting that the cause of the clashing `vector` namespace may eventually get fixed upstream: https://github.com/google/protobuf/pull/72\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61502945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61931176", "body": "@veejaykrishnan yes, but can you provide more details about what you are asking?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61931176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/66845328", "body": "@mpickell high on the list of priorities so this will get attention soon, but I don't have an ETA yet.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/66845328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67279684", "body": "tl;dr: Closing this, next actions at https://github.com/mapnik/mapnik/issues/2611.\n\nTo recap:\n- Currently MarkersSymbolizer expects multigeometries to be split into multiple paths `feature.paths()` (https://github.com/mapnik/mapnik/blob/1dfdfb3b2267aaad6c3c61198095a3753fb4ce48/include/mapnik/marker_helpers.hpp#L331) for correct handling. Therefore the report here of MarkersSymbolizer only rendering the first point of a multipoint is not a mapnik bug but rather a known and intended byproduct of the vector_tile_datasource decoding multi\\* geoms into single geometry arrays for performance reasons. One workaround is to pass `multi_geom=true` to the `tile_featureset` constructor: https://github.com/mapbox/mapnik-vector-tile/blob/5394eed6f3bcbbc16337414f08b054612b2c27c4/src/vector_tile_datasource.hpp#L105. However this is not viable or recommended when best performance is critical and therefore it is not default.\n- The ideal solution would be to rework geometry storage in Mapnik so that multigeometries could be supported with less overhead. This is tracked at https://github.com/mapnik/mapnik/issues/2612.\n- In the meantime a great solution for rendering multipoints that dodges all of the above issues is to create a new symbolizer specialized for the task. This is the `dot` symbolizer and is being tracked at https://github.com/mapnik/mapnik/issues/2611.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67279684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67283180", "body": "> If we encoded the buffer-size used to originally clip vtile geometries then we could easily know this extent upon decoding without decoding and introspecting each geometry.\n\nStill thinking this is a good idea. The usecase is for compositing multiple vector tiles together: one might have been rendered with a buffer-size of 0 while another might have been rendering with a buffer-size of 512. When re-rendering and clipping we need to be able to respect the original buffer-size used. Storing `buffer-size` as a metadata attribute would make this cleanly doable. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67283180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67574801", "body": "Would need a testcase/example of this actually being needed. Until then closing.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67574801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67575066", "body": "closing as this appears resolved by https://github.com/MapQuest/avecado/issues/37#issuecomment-61643996\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67575066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67575561", "body": "please create a pull request when you have a patch ready.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67575561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67597009", "body": "landed in mapnik master/3.x: https://github.com/mapnik/mapnik/pull/2608\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67597009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67705223", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67705223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67705305", "body": "#74\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67705305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/69296388", "body": "Your changes in MapQuest/avecado@a398a9c do not look correct. The `mapnik::vector_tile::foo` namespace is no longer valid and you should use just `vector_tile::foo` now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/69296388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71527214", "body": "> where's the spec for what needs supporting?\n\n@pnorman - no spec yet, we're still experimenting before forming up a concrete plan for the spec.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71527214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73070884", "body": "looks good for testing your optimization. we should also consider the alternative design of accepting a list of fields to include. I'd need to mull on this more to have a strong opinion. \n\nwhile I'm brainstorming: The other thing we should add is filtering support such that you could pass down a 'mapnik::expression' string to be evaluated and throw out features not matching. the goal of this would be to allow rudimentary filtering support for datasource other than Postgres. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73070884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73562152", "body": "@tomhughes: `std=c++11` is expected to be provided by `mapnik-config --cflags`. Can you share the output of `mapnik-config --cflags` for you and if you have any knowledge of whether mapnik-config has been customized in packaging so it differs from a normal mapnik build?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73562152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73612904", "body": "> Note that this is a snapshot from the mapnik 2.2.x branch which may make a difference?\n\nooooooh, right. Mapnik v2.2.x will not be using c++11 (and may not actually support it). So I think your solution is good. The alternative (avoiding c++11 features) would be more work.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73612904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73616334", "body": "Nevermind, reverted since this breaks travis (which tests with non-c++11 capable compiler).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73616334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73778278", "body": "this is now in place, closing.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73778278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73959678", "body": "clarifying that master will now move to 0.7.0\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73959678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/74793061", "body": "solved by 3621e20ec02afc87a43539075d7601cbdf44ce94\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/74793061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/75309670", "body": "So, my sense is that you're never going to hit this limit (the vtiles would be too big) in practice. But we could consider blocking against this case nevertheless and throwing an error to prevent the value from ever overflowing.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/75309670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76649605", "body": "@ShibaBandit - thanks for reporting. Can you share (the first time you hit the error) how you built mapnik ?\n\nAlso can you try this patch:\n\n``` diff\ndiff --git a/gyp/build.gyp b/gyp/build.gyp\nindex feb1532..8f031a2 100644\n--- a/gyp/build.gyp\n+++ b/gyp/build.gyp\n@@ -106,6 +106,7 @@\n         'libraries':[\n           '<!@(mapnik-config --libs)',\n           '<!@(mapnik-config --ldflags)',\n+          '<!@(mapnik-config --dep-libs)',\n           '-lprotobuf-lite',\n           '-lz'\n         ],\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76649605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76649757", "body": "I intended to address this in https://github.com/mapbox/mapnik-vector-tile/commit/fef084c2b3d4966b817174ea8338c933db9c056f#diff-04c6e90faac2675aa89e2176d2eec7d8. Please push further fixes if you see ways to improve / make the 2.x support issue more obvious.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76649757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76844385", "body": "> Got a './build/Release/obj/gen/vector_tile.pb.cc' with the patch listed above.\n\n@ShibaBandit not following what you mean by the above comment? Do you mean you hit an error?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76844385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76844689", "body": "> Has the preferred build from source method changed to use the bootstrap.sh? Should we be using that primarily?\n\n@ShibaBandit - bootstrap.sh is primarily designed for travis so that we can run tests without using `sudo` and leverage http://docs.travis-ci.com/user/workers/container-based-infrastructure/. So, what you are trying to do should work still (build against external mapnik) as long as you are running the latest Mapnik 3.x from master github.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76844689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76846789", "body": "@ShibaBandit ah, fantastic, I'll push that fix then, thanks.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76846789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87798277", "body": "tracking now at #94\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87798277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87868328", "body": "Workaround I think should be to document how to install clang++ and C++11 toolkit outside of bootstrap needing to do it (as the bug is likely inside `./.mason/scripts/setup_cpp11_toolchain.sh).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87868328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88655262", "body": "Geometry collections are not supported @wibrahim. I recently fixed this in #94 because it was easy now that upcoming Mapnik 3.x supports strongly typed geometries. But the currently release does not handle them properly (as you see). So I've created #98 just to make that super clear and it will be closed once #94 merges.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88655262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88671689", "body": "@pnorman multipoints are supported in the spec and always have been: they are `type` `POINT` and encoded as multiple `move_to` commands rather than just one (for a single point).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88671689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/90339812", "body": "Simplification using DP algo in boost::geometry is working well in testing so far - this is a work in progress in https://github.com/mapbox/mapnik-vector-tile/pull/94. Our plan is to pause on pushing it until Mapnik upstream is ready which will happen when these tickets are closed: https://github.com/mapnik/mapnik/labels/mapnik-geometry\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/90339812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/90348026", "body": "Update here: my plan is to have mapnik-vector-tile ensure:\n- 1) exterior rings are encoded as CCW\n- 2) interior rings are encoded as CW\n- 3) interior rings always follow exterior rings\n\nSo, here are some examples then of how you would decode:\n- `CCW` -> single polygon, no interior rings\n- `CCW,CW,CW` -> single polygon, two interior rings\n- `CCW,CCW,CCW` - > Multipolygon with 3 polygons, each with only an exterior ring\n- `CCW,CCW,CCW,CW` - > Multipolygon with 3 polygons, each with one exterior ring, and the final one with one exterior ring and one interior ring\n- `CW` -> single interior ring: degenerate, throw it out\n\nAs part of this push we need to ensure these winding order expectations are consistently maintained at a variety of steps. To that end I'll update the below set of check boxes as things progress:\n- [x] Respect and/or correct winding order when decoding geometries from postgis, shapefiles, geojson, etc into internal structure. Shapefile window order already matches or expectation so we should not need to do anything. PostGIS and Geosjon make no promises so we'll correct on the fly. - https://github.com/mapnik/mapnik/pull/2739\n- [x] When encoding polygon rings into protobuf geometries\n- [x] When decoding back into internal structure\n- [x] When transforming, reprojecting (no problems here)\n- [x] When simplifying (boost::geometry::simplify does)\n- [ ] When clipping - https://github.com/mapnik/mapnik/issues/2756\n- [ ] Test coverage to explore when/to what extent self-intersections will break the ability to detect winding order\n- [ ] Test coverage to explore when/to what extent degenerate exterior rings might break assumptions of ring order and how geometry culling will need to play this smart: #99\n- Work is happening at #94\n- Depends on https://github.com/mapnik/mapnik/labels/mapnik-geometry\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/90348026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/90353712", "body": "Update here:\n\n### degenerate edges\n\nWe have a plan to fix degenerate edges which is to move away from the agg clipper to a better clipping library (The AGG clipper [ leaves degenerate edges by design](https://github.com/mapnik/mapnik/blob/fc911792982771a1edd674a903e72e02cb932a47/deps/agg/include/agg_conv_clip_polygon.h#L16-L23)). Since we need to support complex/potentially non-simple and self-intersecting polygons we cannot use `boost::geometry::intersection`. The clipping algorithm we choose also needs needs to maintain ring order (per https://github.com/mapbox/mapnik-vector-tile/issues/59#issuecomment-90348026 and https://github.com/mapnik/mapnik/issues/2756). Therefore my sense of the best plan is to use the clipper library along with its custom [clipper.PolyTree structure](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Classes/PolyTree/_Body.htm)\n\nTo mitigate the performance hit of this new clipper, the plan is to simplify before clipping. To simplify before clipping the plan is to use `boost::geometry::simplify` which is working in https://github.com/mapbox/mapnik-vector-tile/pull/94 but needs more of a robust framework to stand on which is being tracked at https://github.com/mapnik/mapnik/issues/2753\n\n### invalid polygons\n\nPolygons with degenerate/colinear eges or self-intersections before they arrive to Mapnik are going to be much harder to fix. My understand from talking with @mourner is that the latest [earcut](https://github.com/mapbox/earcut) library (that we are targeting) is able to handle a variety of self-intersections. But we can consider using clipper `SimplifyPolygon with StrictlySimple`. Once https://github.com/mapnik/mapnik/issues/2753 is in place I'll be in a better place to test plugging in this type of geometry fixing to assess if it is viable (or too slow, not robust enough).\n\nIn the meantime anyone that has small testcases of invalid polygons you think should still be supported, please share them in the form of GeoJSON files.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/90353712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/99941787", "body": "#93 is now merged. It's time to move on this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/99941787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/99998282", "body": "done in https://github.com/mapbox/mapnik-vector-tile/pull/104\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/99998282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/104090922", "body": "arg, this if failing on linux due to new, minor floating point differences:\n\n```\n$ diff -u a.json  b.json \n--- a.json  2015-05-20 18:36:44.000000000 -0700\n+++ b.json  2015-05-20 18:37:02.000000000 -0700\n@@ -465,38 +465,38 @@\n         ],\n         [\n             [\n-                160.3603125,\n-                11.1439105480884\n+                160.34203125,\n+                11.1480497233847\n             ],\n             [\n-                160.363125,\n-                11.1425308098987\n+                160.35046875,\n+                11.1397713138873\n             ],\n             [\n-                160.3603125,\n+                160.34625,\n                 11.1383915560672\n             ],\n             [\n-                160.3603125,\n-                11.1439105480884\n+                160.34203125,\n+                11.1480497233847\n             ]\n         ],\n         [\n             [\n-                160.34203125,\n-                11.1480497233847\n+                160.3603125,\n+                11.1439105480884\n             ],\n             [\n-                160.35046875,\n-                11.1397713138873\n+                160.363125,\n+                11.1425308098987\n             ],\n             [\n-                160.34625,\n+                160.3603125,\n                 11.1383915560672\n             ],\n             [\n-                160.34203125,\n-                11.1480497233847\n+                160.3603125,\n+                11.1439105480884\n             ]\n         ]\n     ]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/104090922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/104715258", "body": "I think we should try to narrow the test failure down first by removing the JSON parsing. Today I ran mapnik-vt and mapnik through `clang -fsanitize=address` and hit https://github.com/mapnik/mapnik/issues/2846 which is being triggered only by `build_geojson_ds` which is only used in this single failing test. So, we should try to rule out that issue as a cause.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/104715258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/107648615", "body": "> It is directly related the use of std::sort rather then std::stable_sort in the clipper\n\nWow, interesting. Do you think this should be provided upstream to clipper? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/107648615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/107678474", "body": "Full support for exploding geometry collections now in place after #106. So, we properly support geometry collections being passed to the encoder, as well as geometry collections inside other geometry collections. They will simply get exploding into features with a single geometry type.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/107678474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/108620217", "body": "capturing chat: @danpat and I have been chatting about this today. The summary and next actions are:\n- we'll keep both datasource implementations around for now, and therefore will test both\n- read-only is all that is needed as this point\n- @danpat is working next on tests to ensure that invalid (like truncated tiles) don't crash but rather produce expected exceptions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/108620217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/109145241", "body": "superseded by https://github.com/mapbox/mapnik-vector-tile/commit/49c11f458e6dee47cdd25c595fac77d001dd12ab\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/109145241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110449719", "body": "Confirmed that this works great in node-mapnik with no futher changes (https://github.com/mapnik/node-mapnik/commit/984718834ae5bff0c52206675181e84baa6f2066), so this is ready to merge.\n\nThe plan will be to include this in the `v0.8.1` tag and allow consumers to start opting-in where appropriate. The `tile_datasource` that operates on `vector_tile::Tile` is still useful and will stick around in parallel for now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110449719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110452313", "body": "Awesome work on #114 @danpat - it is now merged. Will tag `v0.8.1` shortly with this inside.\n\nAs per [overall tasks](https://github.com/mapbox/mapnik-vector-tile/issues/92#issue-62610372) next step is:\n\n> re-write node-mapnik's internals to serialize vector tile objects to a protobuf string everytime a write is made to the vector tile: This would allow all read methods in node-mapnik to use pbf.hpp rather than ever needing to keep around the vector_tile::Tile object that gets created when writing to a vector tile.\n\nThis will be tricky and we'll likely learn some gochas along the way. But I think the mapnik-vt work is enough for now to push on the node-mapnik side. So, closing this and will start pushing on https://github.com/mapnik/node-mapnik/issues/419.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110452313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110500594", "body": "TODO:\n- [x] Ensure clipper throws a valid exception such that Clipper throwing will be handled [here](https://github.com/mapnik/node-mapnik/blob/master/src/mapnik_map.cpp#L1971-L1975) rather than aborting. Done in https://github.com/mapnik/clipper/commit/7c73dedbed7abcbc3aa0acc3bfbd7a62ff75e5ec\n- [x] Tests to try to exercise these exception cases. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110500594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110587236", "body": "Above commits will ensure this exception is handled and does not abort.\n\nHow coordinates are getting through - that are outside the valid range of clipper - is still a mystery. All we know is that this occurred at `z15`. We don't know what kind of geometry triggered this.\n\nOne thought was that doubles were overflowing [here](https://github.com/mapbox/mapnik-vector-tile/blob/9148f8cdb83d6f34c6d43e330ac5f212a038068d/src/vector_tile_strategy.hpp#L67-L68) however that is very unlikely the case. Clipper's `hirange` value of `0x3FFFFFFFFFFFFFFFLL` or `4611686018427387903` is half the size of `std::numeric_limits<std::int64_t>::max()`. So we don't need an `int64` overflow to trigger a value greater than `hirange` and an exception in `ClipperLib::RangeTest`. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110587236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110587771", "body": "Based on 1fba0d2 it does not look feasible for `vector_tile_strategy` alone to produce values greater than `hirange` at `z15` even for a geometry that spans the world.\n\nThe only way I could trigger values beyond `hirange` was with an unrealistic `scaling` factor that is absurdly big (`1000000000000.0`). Even though that test is unrealistic I left it in - if it ever changes behavior we'll want to know.\n\nSo, I think the best way forward is to try to isolate a geometry next time this happens /cc @MateoV. For now I'll close this ticket but will re-open if we find a way to replicate.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110587771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110588299", "body": "there is quite of bit of culling now in place - just look for `< 3` in https://github.com/mapbox/mapnik-vector-tile/blob/1fba0d27762789286783e4718199b7da225d5385/src/vector_tile_processor.ipp. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110588299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110588588", "body": "I hit this\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110588588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110590596", "body": "For future debugging:\n\n``` diff\ndiff --git a/src/vector_tile_strategy.hpp b/src/vector_tile_strategy.hpp\nindex 1f8c045..fd9d030 100644\n--- a/src/vector_tile_strategy.hpp\n+++ b/src/vector_tile_strategy.hpp\n@@ -64,6 +64,16 @@ struct vector_tile_strategy\n         y = y * scaling_;\n         x = std::round(x);\n         y = std::round(y);\n+#if defined(DEBUG)\n+        if (x >= 0x3FFFFFFFFFFFFFFFLL || x <= -0x3FFFFFFFFFFFFFFFLL)\n+        {\n+            std::clog << std::fixed << \" x out of bounds: \" << x << \"\\n\";\n+        }\n+        if (y >= 0x3FFFFFFFFFFFFFFFLL || y <= -0x3FFFFFFFFFFFFFFFLL)\n+        {\n+            std::clog << std::fixed << \" y out of bounds: \" << y << \"\\n\";\n+        }\n+#endif\n         boost::geometry::set<0>(p2, static_cast<p2_type>(x));\n         boost::geometry::set<1>(p2, static_cast<p2_type>(y));\n         return true;\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110590596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110590962", "body": "going to presume this is fixed by #94\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110590962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110591887", "body": "closing as the only good fix is to ensure the same deps are used -> https://github.com/mapnik/mapnik/issues/2662\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110591887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110591960", "body": "made obsolete by #94\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110591960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592425", "body": "nothing to do here, closing.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592509", "body": "stale, we've got a variety of tests now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592605", "body": "not seen this problem in a while, presuming it is fixed by moving the build system to gyp.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592826", "body": "I recommend using a tool like gdal_polygonize to turn your raster data into vectors and then load into https://github.com/mapbox/mapbox-studio to render vector tiles. This is basically how the terrain data (contours) is produced that is available in the mapbox-gl-native default styles. Continuous raster support is not going to be as fast or flexible as true vectors. But descrete rasters may work in vtiles and keep an eye on #73 for experimentations around that.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592968", "body": "Not sure why I re-opened this. Will close now with the parting note that I think openstreetmap-carto now has min/max zoom at the layer level now thanks to @pnorman.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110592968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110964474", "body": "> We need to intelligently skip and coordinates that fail to reproject (!prj_trans_.backward())\n\nWriting unit tests for this in mapnik-vt I hit this unhandled condition: https://github.com/mapnik/mapnik/pull/2901.\n\nIt turns out that `inf` at https://github.com/mapbox/mapnik-vector-tile/blob/0c1dd1699e954f5024525cbd085ba7778d656962/src/vector_tile_strategy.hpp#L67-L68 will flip to `-9223372036854775807` and this will trigger `ClipperLib::AddPath` to throw in `RangeTest`. So, finally we have a valid and likely way to reproduce #111\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110964474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110977158", "body": "9dd2729 adds the new transformer. Due to the ability to call `std::reserve` perf is noticeably better:\n\n```\n$ ./build/Release/vtile-transform \n2192.54ms (cpu 2179.91ms)   | boost::geometry::transform\n1511.22ms (cpu 1500.99ms)   | transform_visitor with reserve\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110977158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110981109", "body": "> How coordinates are getting through - that are outside the valid range of clipper - is still a mystery.\n\nMystery solved: `pj_transform` may set x/y to `HUGE_VAL` while returning no error. This triggers this bug: https://github.com/mapbox/mapnik-vector-tile/issues/116#issuecomment-110964474\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110981109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110982107", "body": "After f6fb9d4 we are now again handling pj_transform failures without throwing.\n\nThe goal is not to perfectly represent shapes with coordinates outside the valid bounds - to do that robustly would require clipping before reprojecting. While we did that before it would now be inconvenient. So the key here is to perfectly represent shapes with 100% valid coords and therefore to:\n\n1) not risk aborting rendering due to invalid ones.\n2) do a decent job at trying to render shapes with some invalid coords\n\nAs an example of what rendering a shape with invalid coords looks like  see the following image (which is the testcase geometry visualized in studio a few ways):\n\n![screen shot 2015-06-10 at 7 48 36 pm](https://cloud.githubusercontent.com/assets/20300/8098841/252c85f6-0faa-11e5-9608-2aac547044d1.png)\n- Red line == the result of the new skipping transform when reprojecting from epsg:4269 -> epsg:3857. This hits `pj_transform` and skips failures resulting in a partially collapsed shape. Not pretty but expected.\n- Blue line == the result of the new skipping transform when reprojecting from epsg:4326 -> epsg:3857. In this case there are no `pj_transform` failures because proj4 is not invoked and invalid bounds are clamped by https://github.com/mapnik/mapnik/blob/352586e9d7f9276fb27c10d5449863fe67450612/include/mapnik/well_known_srs.hpp#L67-L70. So, the shape is not collapsed which is nice. Since this result is nicer we could consider clamping for more projections in the future, but that is pretty low priority in my opinion.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110982107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110999298", "body": "passing on osx (failing only on linux due to an unrelated bug in mason: https://github.com/mapbox/mason/issues/101)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110999298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/111002503", "body": "aha!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/111002503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112479490", "body": "k, so this is likely a mason-latest package bug. Assigning to @flippmoke to take a look.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112479490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112483654", "body": "@flippmoke read https://github.com/mapbox/mason/issues/101. The problem I think is the `proj/proj` duplication which is likely due to the difference in `cp -r` behavior between linux and osx right here: https://github.com/mapnik/mapnik/blob/master/mason_latest.sh#L30-L32. My guess is that `cp -r $PROJ_LIB/ ${MASON_PREFIX}/share/proj/` needs to be `cp -r $PROJ_LIB ${MASON_PREFIX}/share/` to work on linux where `PROJ_LIB` cannot have a trailing slash.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112483654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112500589", "body": "nice work @flippmoke - latest build succeeded: https://travis-ci.org/mapbox/mapnik-vector-tile/jobs/67061048. Next action at https://github.com/mapbox/mason/issues/101#issuecomment-112500531\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112500589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/113319527", "body": ">  How coordinates are getting through - that are outside the valid range of clipper - is still a mystery.\n> \n> Mystery solved: pj_transform may set x/y to HUGE_VAL while returning no error. This triggers this bug: #116 (comment)\n\nNow with the help of @MateoV - we've isolated a testcase for another way this can happen. Which is an extremely invalid coordinate which cannot fit within a 64 bit integer after being scaled to integer space. Will track at #120\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/113319527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114307796", "body": "per chat with @artemp - this fixes the decoders ability to handle agg-clipped geometries in all testcases seen so far where they were previously rendering incorrectly. Before merging this needs:\n- [x] regression testcase (@artemp)\n- [x] a bit more manual testing of styles previously affected in studio (@springmeyer) to ensure it looks good\n- [x] this work will obsolete the untested `treat_all_rings_as_exterior` option which was originally designed to address this issue.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114307796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114576804", "body": "per chat with @artemp - I'll test this later this afternoon and run through some new unit tests I've been writing that:\n- test multiple mapnik versions\n- test multiple versions of vector tiles (generated with agg clipper and angus clipper)\n- using the same style\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114576804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114577723", "body": "@BergWerkGIS - awesome research. My findings are the same. I'd love for `define a valid Web Mercator extent for every projection available with proj4` to be feasible but that is not an easy lift as far as I can tell. So I've been looking into `clip to layer extent`. It solves the immediate problem but for this testcase leads to loss of data at the edges of the geometry (once converted to mercator projection). This is going to be touch to solve elegantly so I'm planning on researching 1) clipping before reprojecting (this is what we did previously), or 2) buffering the layer extent clipping slightly (worry it will still result in bounds going outside the valid layer projection extents)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114577723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114665943", "body": "confirmed this is fixed, awesome work @artemp:\n\nbefore:\n\n![pinterest-stamen-print-3-2-3-3 3 1-offset](https://cloud.githubusercontent.com/assets/20300/8319056/5bde1212-19bf-11e5-9461-73e014b3c208.png)\n\nafter:\n\n![pinterest-stamen-print-3-2-3-3 3 1](https://cloud.githubusercontent.com/assets/20300/8319059/66357fde-19bf-11e5-8e01-77a274cc80a5.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114665943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114748402", "body": "> Web Mercator tile extent was projected to local projection\n> then source was clipped with projected tile extent in local projection\n> then clipped source was projected to Web Mercator?\n\nYes, this is what was dodging this error before.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114748402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114748951", "body": "Will look at this with fresh eyes tomorrow - bbox-finder <-- wow looks handy!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114748951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/115345886", "body": "Interesting, thanks @gravitystorm for reporting. In Mapnik 2.3.x `dy` used to be \"dumb\" and would just push text by the `dy` amount after rotating it. In 3.x now the label geometry is itself offset using the `offset_converter` that attempts to make a truly parallel line. We'll take a closer look and see what is going wrong. Thanks for the fantastic \"perfect\" testcase.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/115345886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10575093", "body": "@mourner just for polygons right now: does that seem okay?. Also I just added tests to ensure that mapnik-vt will cull polygons with holes that have degenerate exterior rings: otherwise upon decoding you would end up with a polygon with an exterior ring == the interior ring: https://github.com/mapbox/mapnik-vector-tile/commit/9be43cfee02c648d241b38d96db603c8882e58d3\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10575093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10577848", "body": "right: is should not be culling valid triangles with a move_to, 2 line_to, and a close_path. I'll need to add a test to ensure this is not happening. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10577848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/11623936", "body": "testing code snuck in ^^ accidentally. Reverted in 0c1dd16\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/11623936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217932", "body": "I think this is a great case for when `shrink_to_fit` might be a win. But it also might not and we should stick to clear wins for now. So I've removed in 1c42332. Tracking next steps at https://github.com/mapnik/mapnik/issues/2984\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12382530", "body": "Does a `testpack` target exist?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12382530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960439", "body": "/cc @flippmoke - reason for this is that all exceptions should be `std::exception` and I've seen a case where catching `...` muffled a c++ stdlib issue that should have prevented the program from running. So I see no benefit to catching `...` and only potential (rarely) weird behavior getting muffled.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960475", "body": "/cc @flippmoke - `shared_ptr` should be fast enough that we'd never be able to prove `unique_ptr` is faster in this case. However using `unique_ptr` prevents copies which caught that the shared pointers were being copied (and therefore unnecessarily reference counted) in the for loop.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16960475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16961260", "body": "Sorry, total brain fade: these obviously need to be shared_ptr to be convertible to `mapnik::datasource_ptr`. Ticketed getting tests that actually ensure this file compiles at https://github.com/mapbox/mapnik-vector-tile/issues/192. Reverted in 0c724f1\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/16961260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17179242", "body": "@artemp - please make it right in mapnik and we can move back - refs #208\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17179242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288693", "body": "Looks like a typo - did you mean to replace the line with `PROTOZERO_REVISION=v1.4.2`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288705", "body": "We are moving to use the`include_dirs.js` method consistently, so you'll want to do this for wagyu right off. See https://github.com/mapbox/protozero/pull/59 for how to do this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288729", "body": "I'd like to stay with `c++11` until Mapnik core moves to `c++14`. So, this is okay during testing, but ideally we change to `boost::optional` to avoid the `std::experimental_optional` from `geometry.hpp` that is needing c++14. I presume that is the only thing needing c++14?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288739", "body": "`r.reserve(input.size())`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288750", "body": "\\o/ \ud83c\udf89 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784455", "body": "^^ looks like that snuck in from the merge. If I'm reading the diff right there is another (correct) `build/Makefile` line down below.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784775", "body": "minor: that `std::vector<mapnik::util::variant<std::string, float, double, int64_t, uint64_t, bool>>` is a little long. I recommend using a `typedef` -- or preferably now that we are using c++11 -- a `using` to create an alias that can be used throughout.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31784775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31836111", "body": "done ^^ in a3d596a\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/31836111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59263333", "body": "@jakepruitt - good eye, yes I did mean `upgrade && version != 1` and therefore this code currently will throw when you try to upgrade a `v2` tile, since that is pointless. But I agree that quietly ignoring this situation would likely be more convenient for calling applications. Otherwise they'd need to check the version themselves and toggle the option to avoid errors in mixed tile cases, which would be painful. So I will change to be quiet. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59263333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263022", "body": "@flippmoke:\n1. What is the reasoning for additional `else` in general? E.g. why set to empty vs what was it before?\n2. I think the `std::move` is useless here since `mapnik::geometry::geometry_empty()` is already a temporary and it can be just `geom = mapnik::geometry::geometry_empty();` /cc @artemp for confirmation.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266067", "body": "@flippmoke curious: did you try regenerating the fixture with the latest code? I'm wondering if regenerating it would allow us to keep the smaller `50` threshold?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60293048", "body": "@flippmoke no, it's not. It is static and only generated if the file does not exist. So I re-created it just now to see if the diff would change. It did change and so I've checked in the new image: https://github.com/mapbox/mapnik-vector-tile/pull/204/commits/34d1b8e3311efbc432f89abc2a7d8de38c2dd6d6\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60293048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rouen-sk": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/230", "title": "Features not filtered by mapnik style", "body": "I am trying mapnik-vector-tile (1.2.0) with Mapnik 3.0.11. And there is one curious problem - in the resulting vector tile, there are ALL the features returned from datasource. I am not sure if I understand this correctly, but I thought they would be filtered the same way as in raster rendering - respecting `maximum-scale-denominator` from `Layer` and `MaxScaleDenominator` from `Style` from XML style loaded in map object. Now my tiles on zoom 9 are 20 MB in size, because they contain every housenumber and unimportant road in huge area... \r\n\r\nI am trying to figure it out from sources - I am looking at `create_geom_layer` in `vector_tile_processor.ipp` and it seems to me, that it is iterating all features from `layer` and encoding them - I dont see any filtering anywhere, but since I am not c++ programmer, I am not really sure :) Thanks for help!\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joto": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/229", "title": "Think about optimizing mercator projection", "body": "The mercator projection code in `src/vector_tile_projection.ipp` could be optimized. See https://github.com/osmcode/mercator-projection .\r\n\r\nI have added the optimized version to libosmium. But OSM data is special, because we know it only has ~1cm resolution. So I am very confident, the optimizations will not lead to any problems, because while they change the numeric value of the mercator coordinates, the difference is way below what is in the OSM data in the first place.\r\n\r\nFor vector tiles that might work with generic GIS data from any source, this is somewhat different. The source data could be much more detailed. Usual uses of vector tiles for rendering are not affected I would think, but who knows what people are using vector tiles for and in what resolutions? There could at least be a compile time option or so to switch mercator projection implementations. Any opinions?\r\n\r\n/cc @springmeyer @oxidase ", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ljbade": {"issues": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/77", "title": "Way to drop certain columns", "body": "I was struggling with `gid` and `fid` columns bloating the size of my vector tiles.\n\n@springmeyer suggested editing [`start_tile_feature`](https://github.com/mapbox/mapnik-vector-tile/blob/master/src/vector_tile_backend_pbf.hpp#L107) to add support to drop certain columns during encoding.\n\nE.g.\n\n```\nvoid start_tile_feature(mapnik::feature_impl const& feature)\n```\n\nto\n\n```\nvoid start_tile_feature(mapnik::feature_impl const& feature, std::vector<std::string> const& fields_to_exclude)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/72992815", "body": "I will take a stab at this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/72992815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73397183", "body": "@springmeyer I will have to read up on Mapnik expressions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73397183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73399067", "body": "@springmeyer not sure why the build is failing with the missing `std::end` `std::begin` on Travis. Compiles fine on my machine.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73399067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73434980", "body": "Ah, @springmeyer this might be why I was having trouble with `std::begin` and `std::end`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73434980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "flippmoke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/68a532edad66f4782a440f5ac45088edddd0ebd8", "message": "Merge pull request #263 from mapbox/reserve_limit\n\nLimit Reserve Size"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/73b0a80bcc3a2f06c2efe360daa6de92c4eef50e", "message": "Changed max reserve to 1mb instead of 10mb"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/50a3c034097e99948ae4375bbca0e4268f642269", "message": "Added reservation limits"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/18737d44612df263cd5a87447195ab5f814d4f8f", "message": "Fix spelling in error messages"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/da7386a95475d0bff6e01b0ed1eaf129d392eb49", "message": "Bump to v1.4.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/81e122afa33d0ccb6887351c0a9712f1c7ea2b1a", "message": "Merge pull request #240 from mapbox/image_fix\n\nRaster Overzooming Fix"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/60e8c993031de79a18e0d88047da47d89edb2b93", "message": "Fix for situations where zero area tile requests result in layers existing that shouldn't for raster layers."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b1fad9fb55a059506b97ef618d15d7b1ed48c9d0", "message": "Merge branch 'master' into image_fix\n\nConflicts:\n\ttest/fixtures/expected-2.jpeg\n\ttest/fixtures/expected-2.png\n\ttest/raster_tile.cpp"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b9ab1f374b9cbacd8951fbb6002155090674f4e8", "message": "Merge pull request #245 from mapbox/query_extent\n\nBuffered Query Resolution Fix"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/0dcac01b17a16026803b1a92dc33eeb96ec66145", "message": "Merge pull request #247 from mapbox/remove_fuzzer\n\nRemoved fuzzer"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/0924cc6f347941df296a1d0cdd8d3be419c177c5", "message": "Update to use mapnik 3.0.14, fixed raster issues"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/75d984d6c28e119a417b8ef18dff1dd432aeb230", "message": "Removed fuzzer, closes #246"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/eec6b4efd24f8e7cb098adf4cdae8d4727918c6f", "message": "Fix for incorrectly using buffered query extent when it was simply a correctly transformed unbuffered extented that was required for vector tile creation."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/938c82c87605e374d64c917c04b5c7deb27b7261", "message": "Fixes #239"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/15d499e3992d6174f423bb775a2404cc0c9c351a", "message": "Updated to use fixed version of mapnik for OSX"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/98bbbb85b400eee51645358f952575af6fa77fa7", "message": "Minor change to npm ignore prior to release"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5cbece3f67dcac9a015e838ec31570ddb87da8ab", "message": "Bump to v1.3.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5ae922aa7f2267c14c6278f5484c118ad436816b", "message": "Removed code coverage tests for now, updated CHANGELOG"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/03fef7017c15338a9ea7660713ccdc33d602577d", "message": "Merge pull request #227 from mapbox/wagyu\n\nReplace Clipper With Wagyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6ec57f78c65ef0be749e4a59f0d1164b14d2e727", "message": "Update raster tests after changes to the resolution parameter are changing outputs"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/98cc5e0951fbaa9fdbf831515288d53bb5f209c4", "message": "Remove unrequired things from Makefile"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6316505aadd76289d6dfae926f0f011339d20a83", "message": "Update from wagyu 0.4.1 to wagyu 0.4.2, update to geometry.hpp 0.9.1 from 0.9.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/efdeaff7b22513a52b1b9190c29da4b1fce9670f", "message": "Fixed mason dependencies for travis"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c63d5a4764c694a357611b9deb08e30a8f072a07", "message": "Add protobuf to mason installs"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e849e1eeaef9ec174d4b5bab5279580eac62fa42", "message": "Updated test output"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6ca467ef316a78f91edc91c10090d98e334ee389", "message": "Updated to use new mapnik builds"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f5d587253b3c39b4e5671cbd59e5ffcb4f014ef7", "message": "Expand the size of x,y,z coordinates to int64 over int32 so that it performs well when dealing with higher zoom levels."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6e1aaf8c74193d621f9018818589e8726a803f60", "message": "Fix build error and added corrected test data"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8bf4c69309f22cab5dd91d30c244ab98c4e9ffe6", "message": "Updated to use 0.4.0 of wagyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3ba4e6e73a606847e6691652e0b4e500c4e5f90d", "message": "Update to newest version of protozero"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9c81013fb9afeab5d455e69edfa6164559dfb76f", "message": "Changed to use pragma once and other small clean up of includes"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/235f6bb01e1cccb05a9c2fd46de4965c84a8327e", "message": "pragma once on boost geometry adapters include and removed old defines"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a34e3450ddacf2a0f4d0a413cb33080fb076a8cd", "message": "Update to bench so that it runs easier on OSX"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3ac833828bf3c7701604408e8d233e5587d41bc7", "message": "Updated to use 0.3.0 of wagyu specifically"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b1c18f8049cbe4a3e7f88d7e1304ad7596d030ca", "message": "Changed path for geometry.hpp so it doesn't include unrequired features, fix for optional in vector_tile_strategy"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9cf3edd71f791481c7c80308765d7a4c580354f9", "message": "Update to use c++11 and remove optional from wagyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5b4d12387012b155ec720dad41410ee342a3b98c", "message": "Properly fix name of clang in mason"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7df2d8bb1532198b905f84fa2b507739c1080bbb", "message": "Perhaps coverage will work now?"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8aeae844ffd2fb2e76a32648b5576c7c37d198a4", "message": "Updated version of mason and version of clang used"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/4f9e7be72adb11f5dbe3b1d4586d2b5303a2ba4b", "message": "Change to using master of wagyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e4b7df1a2b8e4d08f797fe6120d622932b1ebb3b", "message": "Made quick clip a define to change quickly if needed, fixed bug in multipolygon processing"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/26fe4505a4e4814b746d127acdcc1d13e807bdc7", "message": "Removed angus clipper dependencies"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8f4467482f8d0a0b8783a2e2ae3a45bf83bd1a2b", "message": "Updated to use preprocessor directives for 3.0.x vs 3.1.x versions of mapnik"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/22c2399f5d339858eb44d5bb864c23cd5baacd5e", "message": "Added return to appease gcc"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/25bfe905f27201e6f4dcf1239a96df169ab02e22", "message": "Update so that all tests hopefully pass"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5f052aa5f866b7f9ee281664a269af6eaf5707bd", "message": "Updated tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1cb78b823a7d718280d6f05aebfeb01b342ed2a4", "message": "Allow builds with gcc"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6854a2b4222cd429737234a5d75061af21417456", "message": "Updated makefile"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/13f721ad0562d65fa2b06ac82c949a45d191408a", "message": "Updated wagy to use quick clip"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2012a5bbace1ec77ef974457ec646ab3f1a4412e", "message": "Some modifications to completely remove clipper and only use the geometry.hpp that is needed"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9bd87fc1e90a22d167fe95c006faa3bada8e59d4", "message": "Updated test fixtures again"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9f556ff703c69d578a9917d3977b0ddb2551c658", "message": "Some other minor updates to tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/342a3564a28d37707859db54335fffcd4270ac8c", "message": "Updated tests with working version of wagyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a97a5cba1d8898edbb51340f6a2ee9ad6217796c", "message": "Added reserves"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c2d72497e08cf091ac1d76276ec2c18139954c2e", "message": "intial commit for wagyu"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8b9eca746e72d33727cf0faf546e9c9a0acd589f", "message": "Merge pull request #233 from opencounter/fix.postgis_simplification_resolution\n\nuse source layer projection for query resolution"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/81ffe007f9deeb5677d5a7cfb6e5fe272e73bcf1", "message": "Remove old tests #202"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a533c5f8bc07c62f8146b30b356b4a9d6fbe7326", "message": "Updated README and little"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ca409ac5a727274ef6e923d45fbd8cc902816e1b", "message": "Updated the version of the clipper to fix a bug"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ac7b96e2f3d57a6496ffb9d8797994ef3b4dc23a", "message": "Updated the version of the clipper used"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b5ec759fe1b1391bc5b3added01a8b1e8a371a79", "message": "Bump to 1.2.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/77732413ad02f4af3f5451dbb54a619b41ce146d", "message": "Merge pull request #204 from mapbox/clockwise_fix\n\nClockwise fix"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c67607c7dbc39fccbbd361783dffd306c8433b00", "message": "Slight update to test"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/aa0a1d87c04865cef8750d98803f4b85f494bb41", "message": "Merge branch 'master' into clockwise_fix\n\nConflicts:\n\tsrc/vector_tile_geometry_decoder.ipp"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a1b12553f6a33e42011b4d0a28cbe4a7cae5279c", "message": "Fix for winding order problems in decoder"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/182b8887ddbd45ee319eb45cd1665cd02b8c447a", "message": "Updated clockwise code so that it calculates relative to the first point"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/eb12d120b07dc7cc8af9b588e95681e86375b69b", "message": "Bump to 1.1.1"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5f9059bec189e2fc2cd67ae3a25852aaaee638c9", "message": "Use custom is clockwise rather then mapnik is clockwise due to precision issues with mapnik is_clockwise."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/bf7a45b28d4a2883551570142b00d35b13792a73", "message": "Updated clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8c0a27e9fe0cdf38c4d33d3ba7c237e67163dab9", "message": "Merge pull request #194 from mapbox/upgrade-opt-in\n\nPrioritize performance in vtile decoding"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c5a22429129b5ea0416414e5ce3f6fc03ed5db8c", "message": "Added boost license information and small fix for polygons"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/43b400b6daea19232b842f33bbaaf8e643a06576", "message": "Bump to 1.0.6 - added custom simplification algorithm"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/eac9f9052e44109dc07db09439df702e2553224b", "message": "Fixed a bug in clipper around a PointInPolygon optimization the needed to be reverted"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/808f8fc9ec01fb2b8412334978266d53f30a0e07", "message": "Updated the version of the clipper again"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/43f740b9febe349082aca61dbccc5a80b0f0f720", "message": "Updated clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/36bd1859b83ac61d80d8d0a1a3b4e556da3fe804", "message": "Updated clipper again"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e6d09666cf11c462c2bc3277fb0e8763100230cf", "message": "Another update to clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/593cfdef58125be22902006b801fb83422193a13", "message": "Updated clipper again"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7ce5f6e6e95e07214a652e2878f6f3b19247be31", "message": "Added new npm ignore [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b896533febda1cb42fed9d85bca0bd1dec16aab5", "message": "Bump to 1.0.5 [skip ci]"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5ba89b8196e312d6f357405c34a2ac6ece4c06a6", "message": "Removed the requirement for intersects"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/268d46af9ef6b2f425812b6418bd80b78a0e3063", "message": "more fixes for open"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/93e0ccbca2c1b83522744e1c2e178a6da0bac695", "message": "Fix test utils"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c77bac9ecbcb3565e8c6375bd1c2824356642966", "message": "Updated clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/056541dcad95f1947b89e7c2f66c2f9842720daa", "message": "Updated clipper after bug fixes"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9144803f5cb4f7ccc3a00c2bb2fc782b504f9cf6", "message": "Updated again for another version of clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/18fe9b3c6856a3ca892e26890916f9271829707b", "message": "Updated clipper with stable sort"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/eb1d75b28c595ede87459421333790255bae38dd", "message": "Updated clipper again"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c140cb8b8961e93272283bd9475d8eebe0deab8c", "message": "Updated version of clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9f9a366be7188c1c234eaf6119e6000106a7cdac", "message": "Another new version of the clipper dropping some old code in it to make things quicker"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/206ecc5253e9e9b1f648b7d657b27d934fc3f9bd", "message": "Updated to the latest version of the clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5485ef2f1d49b9513243f308f5b83320977e92c1", "message": "Updated clipper again"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c421f1f2b317f15aa6ea9ff6e96d58d921249a26", "message": "Added a new version of clipper with a fix an intersection bug"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/fde67e0891505bebda120d8a632c5f7b085e8946", "message": "Updated version of clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/08ae8014dffa3377482e00561fac739958af106b", "message": "Bump to 1.0.4"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6d42e951d7615b046622c33ce5498574575cff24", "message": "Updated Changelog for next release"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/bea23a198e5dd8bfd8ad858723830578d0058a83", "message": "Updated version of clipper used"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a68d6c63ce366536dceb9f06856edc7e992b1fb4", "message": "Merge pull request #189 from mapbox/segfault-rollback\n\nHandle invalid geometries in layer encoding"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/99e1d95a779c2769b5ad11e040ade5dbc4ffeb58", "message": "Bump to v1.0.3"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7172310157e45ecd602329c49bef6639295068ad", "message": "Update changelog"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/83ef866650c291c9ef8a3319c21afbd5e8ec5316", "message": "Update after a bug is found in the clipper"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/578d2dd124d0e2ab43722ee45c72ab0c2f2d2c40", "message": "Updated for new location of to_utf8 in mapnik core"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1dec06de9d884797738d5c256209726182e9b776", "message": "Doh benchmark should have lowest for bounding box, not min"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f4348d7037f4a32afd52217c80b269fca635470b", "message": "Added more errors to is_valid, Bump to 1.0.2"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/28095036f295bba8d0687e23d7322879fe233909", "message": "Bump to v1.0.1"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ffd27a41748cf9d06202876c3d8d734ce5c96015", "message": "Merge pull request #185 from mapbox/v2_spec\n\nbump to v1.0.0 for v2 push"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e8419d6b0e7c412e851729034a1d5b5f0efcdbe2", "message": "bump to v1.0.0"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9b7c018c8aa80ab20653c88673a1a0a1f27e8e82", "message": "Merge pull request #169 from mapbox/v2_spec\n\nV2 spec"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d270c9316258d30fb6140297f0557de341129668", "message": "Remove vtile-geometry-encode"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9f5ae051fd3eb27a312efbea0a6b15316226c473", "message": "Merge branch 'master' into v2_spec\n\nConflicts:\n\tgyp/build.gyp\n\tsrc/vector_tile_geometry_encoder.hpp"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/30263e7f549a651da77b5798b117d8c8e38ed9a4", "message": "Reverted clipper to previous version, update vtile encode"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/75c4868d0900963c19e0adcd00ec8d5c87572a57", "message": "Removed the concept of image_size and use a constant legacy values for constant scale_denom and pixel width when using vector tiles"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ad3b3ef5d3b5bd2a6341638f45a1dc647b07db3c", "message": "Updated vector tile clipper version, added concept of image_size"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3e79c5d81804e4f28295efbb28563c396a1ff04c", "message": "Remove repeated points from multipoints"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ba74f6c16d6032eaf12cdc7a7558fc94cfce0429", "message": "Encode the geometry type prior to the geometry so that we are backwards compatible with previous (broken) tile decoders"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5a167e71abafec6c348b75a8c48daa6eb551df6a", "message": "Added the ability to set x y and z of a merc tile after initialization"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f6bb0660a97955a061f25c9c6ad1ddd1964d0d7f", "message": "Save space by enabling compression of feature attributtes as floating values when possible"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8246b6cd70c0ca152ddbad6ad17a169ecdba8770", "message": "Speed up simplifier by specifying distance type as std int64 and removing casting"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a5b814cb44ca988e560b97480eb57d5e1db2b4cb", "message": "Remove tag counting"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2a6c745494bdf82f20ed2c03fe3e77365fd3c6ad", "message": "Now skipping invalid v1 feature geometries rather then throwing"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/56f28e43e097f66b0908b5e34626d79289c6f8ba", "message": "Updated vtile-edit"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/19e9e8cf0f75e36c61b4e306228a4012df069664", "message": "Fixed a bug in the encoder and geometry visual tests. Fixed a bug with fill type associated with negative fills. Added the use of rollback and updated protozero"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/407e81e2552caa26f1195b188df9a1aab04788e0", "message": "Another update to the encoding benchmark"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1ad29dc97308793be0aca4c0a036cfc87366df15", "message": "Updated benchmark to repeat layers if required"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9c44a72d0929e208f2fdb36c1a056a1709623707", "message": "Fix bug around negative fill and clipping"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/190f6633c3baee569e3bcaa5f418d0f6e5c3f994", "message": "Added new method for adding images"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ecd583333a9e95277aff6de12cd28e627c829134", "message": "Update so that layer buffer size is 16 times the value previously because originally the buffer size was based on a tile width and height of 256 rather then the actual layer extent size."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a9dc2f9d7e57522a83a62c6680ed489c10262192", "message": "Update default buffer size to 128"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8d5308c0b2425e9cebffc2038082bc80b7d3b90b", "message": "Updated default settings for processor"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e27d87c2231e5598f8a6ae31f9fde7134a7656b1", "message": "Added missing inlines from geometry_encoder"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e8398d4da3d3ea0fa536c9eb49792c494a1f9c97", "message": "Added a bit of reserve to the layer string and fixed bad test name"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a9e306b6f4e2078519e86538c21f42bf782a67dc", "message": "Layers are now passed into async operations rather then being a result from them"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/979816e2e655d784ba5b850d4b4060fe94fa36ce", "message": "Merge pull request #181 from mapbox/geometry-encode-bench\n\n[WIP] Geometry encoding benchmark"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d918509037fe9b9fc1c2beb072afc5c84cebc37f", "message": "Updated inline issue"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6927d04e791a05ee5f46093c959d8d17c8d8b9f9", "message": "Merge pull request #180 from mapbox/recursive-benchmarking\n\nrun benchmarks recursively through input data"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/4426171398c6c375e633b0d0cf1e364bed3b7f30", "message": "Merge pull request #182 from mapbox/v2_perf\n\nUpdate V2 Spec to Use Protozero Writer"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/26ae8b7468955cbe4f3a2bfd7d50d14ea359be1f", "message": "Removed libprotobuf from all non test libraries"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d8f6e986daab9c874a4cc4b36bdc9f130f83b6f6", "message": "Added polygon encoding pbf tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c706c8c461885fecb53a34314224103b7aad230e", "message": "Added encoding tests for linestring pbf"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f8c68dcf8ad1113b86f9db335b3b7a1ac948bca8", "message": "Remove unrequired end in compression"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/661286c7476aa371f09c1284d2c21c865bc6f3da", "message": "Added point pbf encoding tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/556e322a39f66f991a733147d90fe04966f189e3", "message": "Remove possible invalidated memory situation"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/29c99a5d9ceae84ff036bc7e3d9d32a27a8fe0d2", "message": "Reuse feature string memory"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/9ade87c0ddbb463cfd1a035a9baa0dbb8fb5fb2f", "message": "Added some reserves prior to encoding"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/761f0a98ccf4e906b5c2f2691780b4a17f98ddcb", "message": "Updated the library to use protozero writer rather then libprotobuf writer."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f6aa48dd0335f2ca606fbd1c379ef35aab7e94cf", "message": "Prevent copies by calling the next processor along the line, preventing the need to go back to a geometry type object."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/cd6de4e920670411dbcdf31a40dc98c09031be88", "message": "Encoding benchmark for v2"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/836f63162f32b90691a5e0248a67ee95ab53cec2", "message": "Merge branch 'master' into v2_spec"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/1ee31f511e972997f9cb0296c818f2a522b962f8", "message": "fixed bug in vtile encoding"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d922ba5e58f1c1fe1d60750d0aba8be4960637b6", "message": "Merge branch 'master' into v2_spec"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/dab6cb77c869f94f29b945828d52d3250da30398", "message": "Change defaults for vtile encoder"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/fc34270ae734807bf10b5bc0d2b7ccc9a08c777d", "message": "Merge branch 'master' into v2_spec"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b27c3afddc95792ca6a70fc2711768d5f28227f1", "message": "Fix segfault for invalid geojson file used, attempt to use from_geojson for partial geojson files"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b5d77e23c08906299d3ea255ce2a1ef22fdbb7db", "message": "Merge branch 'master' into v2_spec\n\nConflicts:\n\tCHANGELOG.md\n\tbench/readme.md\n\tbench/vtile-transform.cpp\n\tpackage.json"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e0af847d8a58a0c56613415b4b8091bdbefccbdc", "message": "Merge pull request #178 from mapbox/encode-benchmark\n\n[WIP] Add vector-tile encoding benchmark"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ce27699a47c18e9a7f732a9d53bb8d4604d34da0", "message": "Updated benchmark code to process all sorts of geojson"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2e23f36682becc4117931a5b8fed7e1a0c6f32d1", "message": "Added additional option to vtile transform"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a4e5a49c2d5a74fa64442c33defbee79207b2e86", "message": "Updated changelog"}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/209", "title": "Using SSE SIMD in Simplification", "body": "A speed improvement in the simplification code by using SSE code.\n## Master Bench\n\n```\n./build/Release/vtile-encode ./test/geometry-test-data/benchmark/ginormous-polygon.json 0 0 0 -i 100 -p 4326\nz:0 x:0 y:0 iterations:100\n5421.31ms (cpu 5407.38ms)   | encode tile: ./test/geometry-test-data/benchmark/ginormous-polygon.json\n```\n## Pull Request Bench\n\n```\n./build/Release/vtile-encode ./test/geometry-test-data/benchmark/ginormous-polygon.json 0 0 0 -i 100 -p 4326\nz:0 x:0 y:0 iterations:100\n3009.47ms (cpu 2998.82ms)   | encode tile: ./test/geometry-test-data/benchmark/ginormous-polygon.json\n```\n\n/cc @springmeyer @artemp @jakepruitt \n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26300360", "body": "I am interested in doing the python bindings for this properly, but I wanted some guidance on how you guys would like it done. I put together a very hacked together python binding using boost python, but want to redo it all to be well done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26300360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26453342", "body": "Here is my first attempt at something for the python bindings. \n\nhttps://github.com/flippmoke/mapnik-vector-tile\n\nCurrently everything is built using the setup.py, but should eventually roll it all into the Makefile. To get it to build properly, you might have to change some links in the setup.py.\n\nIt was a little tricky because I needed to make a custom \"vector_tile\" class to get around the problem of trying to make python bindings against mapnik::vector::tile which is the protobuffer created class. \n\nAs well this only deals with the datasource creation from the vector tile probuffer, and doesn't make use of the processor for making mapnik vector tiles. \n\nDo you think a tile cutting script has its place in this library? I am likely going to need something for my own uses to create a set of c++ to do threaded tile cutting, and would like to python wrap that as well. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26453342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71526832", "body": "@springmeyer @artemp Added support grayscale images, just needs some new unit tests for round trip.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71526832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76447913", "body": "Is `icu` installed?\n\n`sudo apt-get install icu`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76447913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87686902", "body": "@mourner keep in mind that this is a double edge sword, too much simplification with out proper work can result in some ugly things that we don't want. \n\nImagine a road like this:\n\n![intersection](https://cloud.githubusercontent.com/assets/1794907/6897363/e188832e-d6b8-11e4-8e2d-0da2b7c6d3c4.png)\n\nWith out locking that point for an important intersection we might simplify it out entirely. This will make the map look strange. This might be something we have to process in mapnik internally, or an entire process  prior to handing to mapnik to make this all work out properly. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87686902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/104730390", "body": "@springmeyer we can easily narrow that down by adding a to WKT to the failing unit test.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/104730390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105683106", "body": "@springmeyer After lots and lots of digging I found the reason for this. It is directly related the use of `std::sort` rather then `std::stable_sort` in the clipper. This was fixed in https://github.com/mapnik/mapnik/commit/775fcb53784b0a1cf73b3d5fea2f1b650947e068 and the tests have been updated in https://github.com/mapbox/mapnik-vector-tile/commit/a818ae6181279fbe2f11641af6afa866ba5db429\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105683106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105685696", "body": "I think this ticket is closed?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105685696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105685772", "body": "Is this all related to https://github.com/mapbox/mapnik-vector-tile/issues/103?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105685772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105686800", "body": "@danpat Please coordinate with me on this some, I have some design ideas that I want to talk out with you.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105686800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105935953", "body": "A geometry collection could contain a geometry collection, therefore the logic in the check is not sufficient. I will write something to address this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105935953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106126624", "body": "@ajashton know of any really large OSM tiles?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106126624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112482449", "body": "This will hopefully be fixed with https://github.com/mapnik/mapnik/commit/1377852\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112482449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112485662", "body": "Ah! Sorry, I didn't read that my bad :-1: https://github.com/mapbox/mason/commit/77839564c1851d727daf377d5b599f926bce4bfb\nCorrected this as well, which I thought might have been causing the linking issues, I thought this was simply an issue of the two being different. Now correcting the trailing slashes.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/112485662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/115364601", "body": "I noticed that your test installs two different version of node mapnik, 3.2.0 and 3.3.0, so I think this is related to the differences we have introduced between those two.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/115364601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/115368148", "body": "Using 3.3.1 across the board produces the same results. \n![foo](https://cloud.githubusercontent.com/assets/1794907/8363509/f0c30ece-1b44-11e5-90eb-4ec39b903a38.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/115368148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12205184", "body": "I thought this simply dropped memory off the end of the vector, and free just unused information?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12205184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005329", "body": "@jakepruitt some of this code could probably be lifted above the `SECTION` as it could be shared by the different sections.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005346", "body": "Just for my sanity in these situations and I might be somewhat nit picky :-1: -- Since you are using `feature` below call this `featureset` or something because its almost confusing at glance because you don't pick up the s at the end right away. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15005346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566091", "body": "make a std string and then use std::string::data() and std::string::size()\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569152", "body": "this would not even work with a valid buffer so its somewhat a bad test... the reason being that calling `get_string()` expects a previous length defined and would expect to be calling `next`, which I don't think it could ever do properly because it is missing a variant prior to this in the buffer. Layer reader above checks the layer for a name internally, so this is a little different.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569231", "body": "when you are calling bogus tile here, you are creating a tile object and the `parsefrombuffer` [here](https://github.com/mapbox/mapnik-vector-tile/blob/v2_spec/src/vector_tile_tile.hpp#L138) simply just returns false, we should likely throw if that returns false. The tile information is all just default data. It is important to check `hasVersion` for example in these situations. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15613353", "body": "look at https://github.com/mapbox/mapnik-vector-tile/blob/v2_spec/test/test_utils.cpp#L28-L57\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15613353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15624137", "body": "@springmeyer can you confirm if this fixes the async problems on your system?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15624137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17181437", "body": "This is what the boost code did, so... umm... not certain?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17181437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288957", "body": "yes this is the only thing that I know of currently requiring `c++14`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/19288957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41870685", "body": "@jakepruitt this is due to the reprojection that takes place on the map, you are assuming that your coordinates are in EPSG:4326 for the datasource then the maps extent is in EPSG:3857. Therefore, the extent of the datasource needs to be reprojected as well. Otherwise you are going to be zooming into a location with no data.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41870685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/50714306", "body": "Instead of \"\\n\" you can use `std::endl` which will work for windows as well, not a big deal just a FYI. @jakepruitt \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/50714306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263812", "body": "I believe it actually is useless, in my mind I always wanted geom set in some manner in the code but then I remembered the default initialization for `mapnik::geometry:geometry<>` is `mapnik::geometry::geometry_empty`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60263812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266182", "body": "Isn't it created from the lines above?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/60266182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "artemp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5ed2d7fb8d99b74c26d40c3953c6a9010a408a65", "message": "Merge branch 'master' into make-strict-an-option-master"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3e6125cca0ac6cb4a05ea9010337060f2343d78a", "message": "Merge remote-tracking branch 'origin' into make-strict-an-option-master"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6327e49cf77b94f91263adf44bc86f34d89adcce", "message": "Update for mapnik v3.1.x (master)\n(TODO: update tests)"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6b27f258f616f4e1faf6073141428cd74cb0848a", "message": "bump to v1.2.1"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2e37590ba7eb2ff699cb6f82355c420bd6ebf4af", "message": "update CHANGELOG"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e8cbb732968cd4a4d1d34853127004e2c18b7f07", "message": "cast to correct type"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ceccee553e7c250a0741d95d54104f3563b5d500", "message": "explicit cast"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34984635", "body": "@springmeyer - I can see what's going: we're dropping last vertices if x/y deltas > tolerance \nthere are various way to fix it, I wonder if we should plug-in proper simplification this time even if this will require a second pass over geometries? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34984635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34998980", "body": "@springmeyer - can you pop in on voice, I have a couple questions? It looks to me there are other issues with the current code.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34998980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35090345", "body": "@springmeyer - I fixed couple things in your patch.There are still some issues but it's better than what we had before. Also tests need an adjustment. \n\n``` diff\ndiff --git a/src/vector_tile_backend_pbf.hpp b/src/vector_tile_backend_pbf.hpp\nindex d4d1bbb..32f0ad2 100644\n--- a/src/vector_tile_backend_pbf.hpp\n+++ b/src/vector_tile_backend_pbf.hpp\n@@ -202,8 +202,8 @@ namespace mapnik { namespace vector {\n                     if (cmd == SEG_MOVETO || cmd == SEG_LINETO)\n                     {\n                         // Compute delta to the previous coordinate.\n-                        cur_x = static_cast<int32_t>(std::floor((vtx.x * path_multiplier_)+.5));\n-                        cur_y = static_cast<int32_t>(std::floor((vtx.y * path_multiplier_)+.5));\n+                        cur_x = static_cast<int32_t>(std::floor((vtx.x * path_multiplier_) + 0.5));\n+                        cur_y = static_cast<int32_t>(std::floor((vtx.y * path_multiplier_) + 0.5));\n                         int32_t dx = cur_x - x_;\n                         int32_t dy = cur_y - y_;\n\n@@ -212,7 +212,6 @@ namespace mapnik { namespace vector {\n                         unsigned y_floor = static_cast<unsigned>(std::abs(dy));\n                         if (x_floor >= tolerance ||\n                             y_floor >= tolerance ||\n-                            length == 0 ||\n                             cmd == SEG_MOVETO)\n                         {\n                             // Manual zigzag encoding.\n@@ -221,31 +220,36 @@ namespace mapnik { namespace vector {\n                             x_ = cur_x;\n                             y_ = cur_y;\n                             skipped_last = false;\n-                            length++;\n+                            ++length;\n                         }\n                         else\n                         {\n                             skipped_last = true;\n                         }\n                     }\n-                    else if (cmd == SEG_CLOSE) {\n-                        length++;\n+                    else if (cmd == SEG_CLOSE)\n+                    {\n+                        ++length;\n                     }\n-                    else {\n+                    else\n+                    {\n                         throw std::runtime_error(\"Unknown command type\");\n                     }\n-\n                     ++count;\n                 }\n\n-                if (skipped_last && length > 0)\n+                int last_index = current_feature_->geometry_size();\n+                if (skipped_last && last_index > 1) // at least one vertex + cmd/length\n                 {\n+                    // if we skipped previous vertex we just update it to the last one here.\n                     int32_t dx = cur_x - x_;\n                     int32_t dy = cur_y - y_;\n-                    std::clog << \"adding last \" << dx << \" \" << dy << \"\\n\";\n-                    current_feature_->add_geometry((dx << 1) ^ (dx >> 31));\n-                    current_feature_->add_geometry((dy << 1) ^ (dy >> 31));\n-                    length++;\n+                    uint32_t last_x = current_feature_->geometry(last_index - 2);\n+                    uint32_t last_y = current_feature_->geometry(last_index - 1);\n+\n+                    // FIXME : add tolerance check here to discard short segments\n+                    current_feature_->set_geometry(last_index - 2, (dx << 1) ^ (dx >> 31) + last_x);\n+                    current_feature_->set_geometry(last_index - 1, (dy << 1) ^ (dy >> 31) + last_y);\n                 }\n\n                 // Update the last length/command value.\n@@ -254,10 +258,11 @@ namespace mapnik { namespace vector {\n                     current_feature_->set_geometry(cmd_idx, (length << cmd_bits) | (cmd & ((1 << cmd_bits) - 1)));\n                 }\n             }\n+            // FIXME: discard malformed geometries\n             return count;\n         }\n     };\n\n-    }} // end ns\n+}} // end ns\n\n #endif // __MAPNIK_VECTOR_TILE_BACKEND_PBF_H__\n\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35090345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35090864", "body": "@springmeyer - I'm still working on a different implementation ^^\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35090864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35094978", "body": "If I understand your comment then yes.\nCase 1\n\ninput\n\n``` text\nMOVETO 100 100\nLINETO    101 100\nLINETO    200 200\n```\n\noutput\n\n``` text\nMOVETO 100 100\nLINETO    200 200\n```\n\nCase 2\n\n``` text\nMOVETO 100 100\nLINETO    201 200\nLINETO    200 200\n```\n\noutput\n\n``` text\nMOVETO 100 100\nLINETO    200 200\n```\n\nDropping geometries (or sub-paths) completely is what I'm looking to implement. \n\nFor example \n\ninput\n\n``` text\nMOVETO 100 100\nLINETO    101 100\nMOVETO 150 150\nLINETO    200 200\n```\n\noutput\n\n``` text\nMOVETO 150 150\nLINETO    200 200\n```\n\n^ drop first subpath altogether and save some space\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35094978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35251793", "body": "@springmeyer - 7765746e7ed2b876be154af01e4f2c3c7b918cc1  -- all tests are passing but implementation is difficult to follow and understand. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35251793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35622761", "body": "@springmeyer \n\nLooks like we need this patch to handle skipped last vertices in 'subpaths'. Also, this patch changes how repeated move_to commands are handled, by choosing last move_to as starting point for the path which is more correct\n\n``` diff\ndiff --git a/src/vector_tile_geometry_encoder.hpp b/src/vector_tile_geometry_encoder.hpp\nindex 568f1ad..45e4022 100644\n--- a/src/vector_tile_geometry_encoder.hpp\n+++ b/src/vector_tile_geometry_encoder.hpp\n@@ -92,22 +92,22 @@ namespace mapnik { namespace vector {\n\n                 ++count;\n                 prev_cmd = cmd;\n-            }\n\n-            if (skipped_last && skipped_index > 1) // at least one vertex + cmd/length\n-            {\n-                // if we skipped previous vertex we just update it to the last one here.\n-                uint32_t last_x = current_feature.geometry(skipped_index - 2);\n-                uint32_t last_y = current_feature.geometry(skipped_index - 1);\n-                int32_t last_dx = ((last_x >> 1) ^ (-(last_x & 1)));\n-                int32_t last_dy = ((last_y >> 1) ^ (-(last_y & 1)));\n-                int32_t dx = cur_x - x_ + last_dx;\n-                int32_t dy = cur_y - y_ + last_dy;\n-                x_ = cur_x;\n-                y_ = cur_y;\n-                // FIXME : add tolerance check here to discard short segments\n-                current_feature.set_geometry(skipped_index - 2, ((dx << 1) ^ (dx >> 31)));\n-                current_feature.set_geometry(skipped_index - 1, ((dy << 1) ^ (dy >> 31)));\n+                if (skipped_last && skipped_index > 1) // at least one vertex + cmd/length\n+                {\n+                    // if we skipped previous vertex we just update it to the last one here.\n+                    uint32_t last_x = current_feature.geometry(skipped_index - 2);\n+                    uint32_t last_y = current_feature.geometry(skipped_index - 1);\n+                    int32_t last_dx = ((last_x >> 1) ^ (-(last_x & 1)));\n+                    int32_t last_dy = ((last_y >> 1) ^ (-(last_y & 1)));\n+                    int32_t dx = cur_x - x_ + last_dx;\n+                    int32_t dy = cur_y - y_ + last_dy;\n+                    x_ = cur_x;\n+                    y_ = cur_y;\n+                    // FIXME : add tolerance check here to discard short segments\n+                    current_feature.set_geometry(skipped_index - 2, ((dx << 1) ^ (dx >> 31)));\n+                    current_feature.set_geometry(skipped_index - 1, ((dy << 1) ^ (dy >> 31)));\n+                }\n             }\n\n             // Update the last length/command value.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35622761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35622862", "body": "@springmeyer - closing and posting on #38 #39\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35622862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35623014", "body": "@springmeyer \n\nLooks like we need this patch to handle skipped last vertices in 'subpaths'. <s>Also, this patch changes how repeated move_to commands are handled, by choosing last move_to as starting point for the path which is more correct</s>\n\n``` diff\ndiff --git a/src/vector_tile_geometry_encoder.hpp b/src/vector_tile_geometry_encoder.hpp\nindex 568f1ad..102da0c 100644\n--- a/src/vector_tile_geometry_encoder.hpp\n+++ b/src/vector_tile_geometry_encoder.hpp\n@@ -7,116 +7,132 @@\n\n namespace mapnik { namespace vector {\n\n-        template <typename T>\n-        unsigned encode_geometry(T & path,\n-                                 tile_GeomType type,\n-                                 tile_feature & current_feature,\n-                                 int32_t & x_,\n-                                 int32_t & y_,\n-                                 unsigned tolerance,\n-                                 unsigned path_multiplier)\n-        {\n-            unsigned count = 0;\n-            path.rewind(0);\n-            current_feature.set_type(type);\n-\n-            vertex2d vtx(vertex2d::no_init);\n-            int cmd = -1;\n-            int prev_cmd = -1;\n-            int cmd_idx = -1;\n-            const int cmd_bits = 3;\n-            unsigned length = 0;\n-            bool skipped_last = false;\n-            int32_t skipped_index = -1;\n-            int32_t cur_x = 0;\n-            int32_t cur_y = 0;\n+void handle_skipped_last(tile_feature & current_feature,\n+                         int32_t skipped_index,\n+                         int32_t cur_x,\n+                         int32_t cur_y,\n+                         int32_t & x_,\n+                         int32_t & y_)\n+{\n+    // if we skipped previous vertex we just update it to the last one here.\n+    uint32_t last_x = current_feature.geometry(skipped_index - 2);\n+    uint32_t last_y = current_feature.geometry(skipped_index - 1);\n+    int32_t last_dx = ((last_x >> 1) ^ (-(last_x & 1)));\n+    int32_t last_dy = ((last_y >> 1) ^ (-(last_y & 1)));\n+    int32_t dx = cur_x - x_ + last_dx;\n+    int32_t dy = cur_y - y_ + last_dy;\n+    x_ = cur_x;\n+    y_ = cur_y;\n+    // FIXME : add tolerance check here to discard short segments\n+    current_feature.set_geometry(skipped_index - 2, ((dx << 1) ^ (dx >> 31)));\n+    current_feature.set_geometry(skipped_index - 1, ((dy << 1) ^ (dy >> 31)));\n+    std::cerr << \"Skipped index=\" << skipped_index << std::endl;\n+}\n\n-            // See vector_tile.proto for a description of how vertex command\n-            // encoding works.\n-            while ((vtx.cmd = path.vertex(&vtx.x, &vtx.y)) != SEG_END)\n-            {\n-                if (static_cast<int>(vtx.cmd) != cmd)\n-                {\n-                    if (cmd_idx >= 0)\n-                    {\n-                        // Encode the previous length/command value.\n-                        current_feature.set_geometry(cmd_idx, (length << cmd_bits) | (cmd & ((1 << cmd_bits) - 1)));\n-                    }\n-                    cmd = static_cast<int>(vtx.cmd);\n-                    length = 0;\n-                    cmd_idx = current_feature.geometry_size();\n-                    current_feature.add_geometry(0); // placeholder added in first pass\n-                }\n+template <typename T>\n+unsigned encode_geometry(T & path,\n+                         tile_GeomType type,\n+                         tile_feature & current_feature,\n+                         int32_t & x_,\n+                         int32_t & y_,\n+                         unsigned tolerance,\n+                         unsigned path_multiplier)\n+{\n+    unsigned count = 0;\n+    path.rewind(0);\n+    current_feature.set_type(type);\n\n-                if (cmd == SEG_MOVETO || cmd == SEG_LINETO)\n-                {\n-                    // Compute delta to the previous coordinate.\n-                    cur_x = static_cast<int32_t>(std::floor((vtx.x * path_multiplier) + 0.5));\n-                    cur_y = static_cast<int32_t>(std::floor((vtx.y * path_multiplier) + 0.5));\n-                    int32_t dx = cur_x - x_;\n-                    int32_t dy = cur_y - y_;\n-                    // Keep all move_to commands, but omit other movements that are\n-                    // not >= the tolerance threshold and should be considered no-ops.\n-                    // NOTE: length == 0 indicates the command has changed and will\n-                    // preserve any non duplicate move_to or line_to\n-                    if ( length == 0 ||\n-                         (static_cast<unsigned>(std::abs(dx)) >= tolerance) ||\n-                         (static_cast<unsigned>(std::abs(dy)) >= tolerance)\n-                        )\n-                    {\n-                        // Manual zigzag encoding.\n-                        current_feature.add_geometry((dx << 1) ^ (dx >> 31));\n-                        current_feature.add_geometry((dy << 1) ^ (dy >> 31));\n-                        x_ = cur_x;\n-                        y_ = cur_y;\n-                        skipped_last = false;\n-                        ++length;\n-                    }\n-                    else\n-                    {\n-                        skipped_last = true;\n-                        skipped_index = current_feature.geometry_size();\n-                    }\n-                }\n-                else if (cmd == SEG_CLOSE)\n-                {\n-                    if (prev_cmd != SEG_CLOSE) ++length;\n-                }\n-                else\n-                {\n-                    std::stringstream msg;\n-                    msg << \"Unknown command type (backend_pbf): \"\n-                        << cmd;\n-                    throw std::runtime_error(msg.str());\n-                }\n+    vertex2d vtx(vertex2d::no_init);\n+    int cmd = -1;\n+    int prev_cmd = -1;\n+    int cmd_idx = -1;\n+    const int cmd_bits = 3;\n+    unsigned length = 0;\n+    bool skipped_last = false;\n+    int32_t skipped_index = -1;\n+    int32_t cur_x = 0;\n+    int32_t cur_y = 0;\n\n-                ++count;\n-                prev_cmd = cmd;\n+    // See vector_tile.proto for a description of how vertex command\n+    // encoding works.\n+    while ((vtx.cmd = path.vertex(&vtx.x, &vtx.y)) != SEG_END)\n+    {\n+        if (static_cast<int>(vtx.cmd) != cmd)\n+        {\n+            if (cmd_idx >= 0)\n+            {\n+                // Encode the previous length/command value.\n+                current_feature.set_geometry(cmd_idx, (length << cmd_bits) | (cmd & ((1 << cmd_bits) - 1)));\n             }\n+            cmd = static_cast<int>(vtx.cmd);\n+            length = 0;\n+            cmd_idx = current_feature.geometry_size();\n+            current_feature.add_geometry(0); // placeholder added in first pass\n+        }\n\n-            if (skipped_last && skipped_index > 1) // at least one vertex + cmd/length\n+        if (cmd == SEG_MOVETO || cmd == SEG_LINETO)\n+        {\n+            if (cmd == SEG_MOVETO && skipped_last && skipped_index > 1) // at least one vertex + cmd/length\n             {\n                 // if we skipped previous vertex we just update it to the last one here.\n-                uint32_t last_x = current_feature.geometry(skipped_index - 2);\n-                uint32_t last_y = current_feature.geometry(skipped_index - 1);\n-                int32_t last_dx = ((last_x >> 1) ^ (-(last_x & 1)));\n-                int32_t last_dy = ((last_y >> 1) ^ (-(last_y & 1)));\n-                int32_t dx = cur_x - x_ + last_dx;\n-                int32_t dy = cur_y - y_ + last_dy;\n+                handle_skipped_last(current_feature, skipped_index, cur_x, cur_y,  x_, y_);\n+            }\n+\n+            // Compute delta to the previous coordinate.\n+            cur_x = static_cast<int32_t>(std::floor((vtx.x * path_multiplier) + 0.5));\n+            cur_y = static_cast<int32_t>(std::floor((vtx.y * path_multiplier) + 0.5));\n+            int32_t dx = cur_x - x_;\n+            int32_t dy = cur_y - y_;\n+            // Keep all move_to commands, but omit other movements that are\n+            // not >= the tolerance threshold and should be considered no-ops.\n+            // NOTE: length == 0 indicates the command has changed and will\n+            // preserve any non duplicate move_to or line_to\n+            if ( length == 0 ||\n+                 (static_cast<unsigned>(std::abs(dx)) >= tolerance) ||\n+                 (static_cast<unsigned>(std::abs(dy)) >= tolerance)\n+                )\n+            {\n+                // Manual zigzag encoding.\n+                current_feature.add_geometry((dx << 1) ^ (dx >> 31));\n+                current_feature.add_geometry((dy << 1) ^ (dy >> 31));\n                 x_ = cur_x;\n                 y_ = cur_y;\n-                // FIXME : add tolerance check here to discard short segments\n-                current_feature.set_geometry(skipped_index - 2, ((dx << 1) ^ (dx >> 31)));\n-                current_feature.set_geometry(skipped_index - 1, ((dy << 1) ^ (dy >> 31)));\n+                skipped_last = false;\n+                ++length;\n             }\n-\n-            // Update the last length/command value.\n-            if (cmd_idx >= 0)\n+            else\n             {\n-                current_feature.set_geometry(cmd_idx, (length << cmd_bits) | (cmd & ((1 << cmd_bits) - 1)));\n+                skipped_last = true;\n+                skipped_index = current_feature.geometry_size();\n             }\n-            return count;\n         }\n+        else if (cmd == SEG_CLOSE)\n+        {\n+            if (prev_cmd != SEG_CLOSE) ++length;\n+        }\n+        else\n+        {\n+            std::stringstream msg;\n+            msg << \"Unknown command type (backend_pbf): \"\n+                << cmd;\n+            throw std::runtime_error(msg.str());\n+        }\n+\n+        ++count;\n+        prev_cmd = cmd;\n+    }\n+\n+    if (skipped_last && skipped_index > 1) // at least one vertex + cmd/length\n+    {\n+        handle_skipped_last(current_feature, skipped_index, cur_x, cur_y, x_, y_);\n+    }\n+    // Update the last length/command value.\n+    if (cmd_idx >= 0)\n+    {\n+        current_feature.set_geometry(cmd_idx, (length << cmd_bits) | (cmd & ((1 << cmd_bits) - 1)));\n+    }\n+    return count;\n+}\n\n }} // end ns\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35623014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35643025", "body": "@springmeyer - attempt to preserve right angles and avoid horizontal and vertical spikes :\n\nhttps://gist.github.com/artemp/32f4cec80e217d09adeb\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35643025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35753720", "body": "@springmeyer - https://github.com/mapbox/mapnik-vector-tile/tree/sharp_turns\n\nit works well with `opts.tolerance = Math.max(0, Math.min(10, 2 * (14 - z)));` for me locally. Tiles are smaller too \n\nOriginal skipper\n\n``` text\nsqlite> select zoom_level, sum(length(tile_data)) from tiles where zoom_level=0;\n0|34784\nsqlite> select zoom_level, sum(length(tile_data)) from tiles where zoom_level=1;\n1|67785\nsqlite> select zoom_level, sum(length(tile_data)) from tiles where zoom_level=2;\n2|139533\n```\n\nNew skipper (with tolerance as above ^)\n\n``` text\nsqlite> select zoom_level, sum(length(tile_data)) from tiles where zoom_level=0;\n0|22777\nsqlite> select zoom_level, sum(length(tile_data)) from tiles where zoom_level=1;\n1|42101\nsqlite> select zoom_level, sum(length(tile_data)) from tiles where zoom_level=2;\n2|107536\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/35753720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87638305", "body": "@mourner - what do you mean by \"proper Douglas-Peucker\" ? As oppose to \"just skipping vertices\" currently VT? I think we use DP in postgis queries - maybe we should be more aggressive with simplification ( @aj?) Trying to understand here.\n\n\"Visvalingam simplification\" is great when vertices weighted in advance and weights are stored. Then you just filter vertices using tolerance. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87638305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114521579", "body": "@springmeyer - example data from v4\nhttps://gist.github.com/artemp/5ac35d65e3e89d2cef42\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114521579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12199431", "body": "@flippmoke - `shrink_to_fit` would reallocate vector, maybe better leave allocated size as it's ? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12199431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17174189", "body": "@springmeyer - why this duplication ? We'll be sleeping much better if `is_clockwise` is defined once, no?\nAlso, \n\n``` c++\nif (num_points < 3)\n +    {\n +        return false;\n +    }\n```\n\n^ this is a lie :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17174189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178114", "body": "@flippmoke - why post increment ? (hint: it does creates en extra copy)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178282", "body": "@flippmoke - does 'g` guaranteed to have at least 2 points? If not, should it be discarded ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17178282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17195967", "body": "@flippmoke  Well, not everything in boost::geometry should be taken for granted, you should replace `out++` with `++out`! \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/17195967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "talaj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f41aac77549d26b9f529c04ef05d00ac9637650f", "message": "add inline attribute to functions implemented in header file"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/d4e94b49d839a15759dc3c2951bf958fb379a396", "message": "constness"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e014044efe873c0e1918fca8724d4ed50dbfbdc3", "message": "duplicate code elimination"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/e4c13d233338e65e00f384a3e72740a2b7ceebb7", "message": "add test - filtering by scale denominator on layer level"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GretaCB": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/60ceebc18b7884322333c086430a3669d6b90e1c", "message": "make sure geometry test data are actually installed"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41917895", "body": "I console.logged the `solid` boolean coming back, and there are a number of tiles with `isSolid = true` , which I'm assuming means they are recognized as having data. So, maybe the issue isn't here. I'll keep digging. Thanks @springmeyer ! \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41917895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41918219", "body": "@yhahn  Ah, I see. I was interpreting it as \"fist pump\" solid :) \nWell, either way, something else must be going on because there are a number of tiles with data:\n\n```\nvtile solid check: true\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: true\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: true\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\nvtile solid check: false\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41918219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "rafatower": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3dacce97238a39c8933ef79f0c452b1b8e61b033", "message": "System test for processor vars\n\nSystem test to make sure processor variables fully backwards compatible."}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/250be15204a076c138ce4ac852b7d1f518061781", "message": "Add accessor and a couple simple tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/a963883ceedf86dac1bd4b743b2b39948c8ed0cc", "message": "Add another test and an accessor"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/7d8befd963133851797edcca2f6ba7eebe3340e6", "message": "Add some basic test"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/b3de2a9f023a62634d43e2073d12f91f447db1ec", "message": "Pass variables to replace tokens in query\n\nThis fixes #218"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "YenTheFirst": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/51fa1a890057b203982b56ecfdd765630840a4cc", "message": "use source layer projection for query resolution"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jakepruitt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/0be06e708e7263af21fbd6107f252ed7f3af3f4b", "message": "Change invalid geometry handling in layer encoding"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f4b14f8bb43b897ac2f8f927dc49f21878718cba", "message": "Add test for invalid geometry encoding\n\nThere's currently a segmenation fault when an invalid geometry is\nencoded to a layer builder due to the use of protozero rollback function"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/041aed410dd147b4beeebd1723f452268a018a83", "message": "Change tile query resolution to rely on image size"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/235719da1c0eeed419a8c67eb3e390e6183abca6", "message": "Add more tests for valid features"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/764bd60b0f0e5a603b08806c91f0d9614c2a5c9b", "message": "Add more tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/6ac24bad6d5b8974955a3352a83c226eef25913d", "message": "Add feature_is_valid test"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/be3d15486f8be761a2bc78a582abe79f5eee8357", "message": "Inline all is_valid methods"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/ccf8f2e8662a029047b7fd783f0580a8c87d4b46", "message": "Add value_is_valid tests"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/8ccddbbeb4c422668fc944d50b3c5a00db49d88c", "message": "Add first draft of geometry encoding benchmark"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/3cbcde7abd9288918b08c11994add12b2982cedb", "message": "Recompress output of serialized vt"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/5abb8a47e54ddbe462221e845309ccef683f622d", "message": "Add recompression"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/15efa7ccb1ffcc548be948211441eac08a799e6e", "message": "Add vtile-edit file for changing versions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566333", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15566333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569113", "body": "@flippmoke I was surprised this threw an error and didn't just return `false`. Also surprised that the `name` parameter to this function is compared to the name in the layer's buffer, and not the name provided in the `append_layer_buffer` function. Would it ever be possible to have these two names be different?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569179", "body": "In comparison, when we call `layer_reader` with the index argument, we get a `true` status, and no error is thrown. I don't know what the best result would be here, whether we validate the layer within the `layer_reader` function, or always return a layer reader and `true`, and let the user determine if the layer is valid.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569205", "body": "Also pretty surprised that no errors were thrown on the bogus tile that was parsed from the bogus layer data. Do we want to have any errors throw here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15569205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15606613", "body": "These five lines are probably the worst way to create a dummy `mapnik::feature_impl`. @flippmoke - edits appreciated.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15606613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41115749", "body": "@artemp @flippmoke @springmeyer right now I'm stuck trying to figure out if I have created `new_geom` correctly. It seems that right now the `new_geom` geometry produced by the `apply_visitor` function is a non-initialized geometry that throws an error when passed to `compare`.\n\nThere are most likely plenty of issues with my code as it stands, but I would appreciate some guidance if any of you have the chance. Once I am able to see tiled vector geometries outputted by the above code, I can start seeing what the expected fixtures should look like.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41115749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41791461", "body": "TODO: Don't correct this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41791461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41827188", "body": "@flippmoke if you have a chance, I'm stuck trying to use the datasource's envelope in the geometry clipping. When I try to set the `bbox` to `ds->envelope()`, all of the returned geometries are `null`.\n\nMy goal is to make `clip_geometry` a stand-alone function, that given a bounding box (and eventually simplification parameters) it will produce the clipped geometry. That way, we can create tests that applies this function with a variety of bounding-box queries and simplification queries to produce all of the clipped geometries we're looking for. Does this sound like a good approach? cc/ @springmeyer \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41827188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41891351", "body": "@flippmoke :bow: Thank you, going to implement that change now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/41891351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59240027", "body": "@springmeyer did you mean `upgrade && version != 1`? If so, I think we should probably just quietly ignore the situation of `upgrade && version == 2`, but probably throw or warn when `upgrade && version == 3` or something along those lines comes up.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/pulls/comments/59240027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mapsam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/c89283a053d9ea80832114b72920769526def1b5", "message": "Different command for different iteration flags and numbers"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/fb441d2443820ff3f93082f02276ec5a6a936a8c", "message": "rename script to run-bench.sh"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/f9596398bc4270cd4b68652586a825261c697052", "message": "encode or decode"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/commits/2b413aacd55aaf709f7272793405db34a4bae4f2", "message": "run benchmarks recursively through input data"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15539012", "body": "Clarity! :+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/15539012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kkaefer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934260", "body": "I thought about field ordering too while working on the format, but decided to not have this defined in the protobuf format itself since implementations must not guarantee field ordering anyway, as mentioned on the page you posted. If we want to agree on a particular field ordering, we'd have to further restrict valid protobuf files anyway.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934327", "body": "Thanks; we used to have an implicit first moveto but decided to remove it in the last minute.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17934327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22138286", "body": "https://gist.github.com/kkaefer/4460a5ddf067b572033b is a header-only implementation that does rudimentary pbf parsing. It doesn't convert a .proto file to a parser, rather, you can use it to work directly on the data object, much like node's .readUint32BE() et al functions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22138286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22165084", "body": "@kentonv Oh interesting, I always skipped over that part of the docs...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22165084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26589601", "body": "You're right in that this module does not render image tiles. Rather, it uses Mapnik's extensive data source access, and geometry manipulation and instead of an image at the end, it produces a vector tile. So while it does not produce images, it uses a large part of Mapnik's featureset.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/26589601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34411514", "body": "This may seem like the easiest approach from a server side, but this will make rendering harder because we need to separate the individual layer extents on the client and create separate buckets etc. for them.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/34411514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36232857", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/36232857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "hjanetzek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17943073", "body": "Ok right, the parser should be able to handle any encoding order. One could still have Features defined after keys/values to 'allow parsing code use optimizations'. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/17943073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "yhahn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180826", "body": "@ivancamilov Do you have the libprotobuf dependencies installed?\n\nhttps://github.com/mapbox/mapnik-vector-tile#requires\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41918013", "body": "@GretaCB o, `isSolid` is actually meant to be an indicator that there _isn't_ data. Comes from the days of pixels -- a \"solid\" tile was one that was filled with only a single (possibly transparent) color.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/41918013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44903017", "body": "In general this is not how you want to think about vector tiles.\n\nThey are very much materialized data e.g. there may be 2 million coincident features for a given vector tile and they _should_ be dropped completely. Adding a lookup table and dictionary of 2 million \"just in case you want these\" features pretty much defeats the purpose of using vtiles : )\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44903017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105950941", "body": ":weary: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105950941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ivancamilov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180900", "body": "Ah, of course. My bad, I hadn't installed protobuf properly. Thanks for your help! :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/19180900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tomhughes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20727199", "body": "To answer your question re agg the answer is that for the Fedora packaging bundled libraries are not (by Fedora packaging rules) allowed without special exception and the result of discussions between myself, the agg maintainer and the Fedora Packaging Committee was that we would apply the patches from mapnik to the existing system wide agg and then build against that.\n\nSo that is what we have done - I extracted the patches from mapnik into a separate agg repo (https://github.com/tomhughes/agg/commits/mapnik-2.5) and that patch series is now included in the Fedora agg build.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/20727199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21104867", "body": "There are further 32 bit only failures in the latest release:\n\n```\ntest/vector_tile.cpp:153: 4096 == f.geometry(1) failed for: 4096 == 4094\ntest/vector_tile.cpp:163: fs->next() != mapnik::feature_ptr() failed for: 0 != 0\ntest/vector_tile.cpp:171: fs->next() != mapnik::feature_ptr() failed for: 0 != 0\ntest/vector_tile.cpp:174: fs->next() != mapnik::feature_ptr() failed for: 0 != 0\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21104867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21167084", "body": "Works find on 32 bit Fedora as well - thanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21167084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44062459", "body": "Looks like this was just an unfortunate side effect of boost having been updated and mapnik needing to be rebuilt as it all seems to be working now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44062459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60055719", "body": "I can confirm that the 0.6.0 release appears to fix this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60055719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73567055", "body": "The output is:\n\n```\n-I/usr/include -I/usr/include/polyclipping -I/usr/include/agg2 -I/usr/include -I/usr/include/freetype2 -I/usr/include/libxml2 -I/usr/include/gdal -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/libpng16 -I/usr/include/libdrm -DHAVE_JPEG -DMAPNIK_USE_PROJ4 -DHAVE_PNG -DHAVE_TIFF -DBIGINT -DBOOST_REGEX_HAS_ICU -DLINUX -DMAPNIK_THREADSAFE -DBOOST_SPIRIT_USE_PHOENIX_V3=1 -DNDEBUG -DHAVE_CAIRO -DHAVE_LIBXML2 -ansi -Wall -pthread -ftemplate-depth-300 -O3 -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fno-strict-aliasing -finline-functions -Wno-inline -Wno-parentheses -Wno-char-subscripts\n```\n\nNote that this is a snapshot from the mapnik 2.2.x branch which may make a difference?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/73567055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ccarse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21949736", "body": "Could something like this work? \n\n``` css\n#buildings {\n     polygon-opacity:0.5;\n}\n#data-virginia.buildings {\n     polygon-fill:red;\n}\n#data-DC.buildings {\n     polygon-fill:blue;\n}\n```\n\nTo me this is more logical. Just seems backwards specifying source inside layer. Of course I'm looking at this with very ignorant eyes so feel free to tell me why this is an idiotic suggestion :) \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/21949736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kentonv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22146029", "body": "@kkaefer - FWIW, the protobuf library contains a class google::protobuf::io::CodedInputStream which provides a very similar interface but is highly optimized (as in, I literally put months of work into determining what to inline, what loops to unroll, etc., to get the best performance).  The whole io sub-package has no dependencies on the rest of the library so should be easy to use independently.\n\n@springmeyer - I'd love to see Cap'n Proto v8 bindings more than any other language (aside from C++).  I won't have time to work on it myself for a while, but would be happy to help anyone who wants to take this on.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22146029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "durandt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22773722", "body": "Hi,\nI also work on the same project as Patrik.\nHow would you like the test case to look like?\nOne shape file with the c++ code that divides it up for instance?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/22773722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23330421", "body": "Hi Dane,\n\nPatrik sent you an email with a test-case last week, but I have been trying today to build a simpler test-case based on one shape-file with only one line that is divided in two tiles.\nBut as far as I can see from my test-case the line information appears in both generated tiles so I'll try to locate the problem (ie the \"line\" appears on the north tile but not on the south tile) and come back to you with a focused test case if I can find any problem. \n\nRegards,\n\nThibault\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23330421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23550428", "body": "Hum, maybe I can try to explain you my problem as it may be that I am doing something wrong somewhere. \n\nI have tried to look that up in Mapnik and mapnik-vector-tile source code but it is yet unclear to me and maybe I can get some light from you while I still continue my investigations in the source code. \n\nWe render raster tiles, 256x256 pixels from a map (mapnik::Map). \nThis map has several layers (mapnik::layer) whose datasources (mapnik::vector::tile_datasource) are created upon tile_layers (mapnik::vector::tile_layer) and tile coordinates. These tile_layers are fetched from a mapnik::vector::tile from a protobuf file containing our vector data. \nNothing weird that far. \nIt works well, we have a layer with labels for example, represented as lines with a text attribute. Often the labels are well rendered even when they overlap on a few tiles. We have a similar problem with point data that is then represented by an icon. \n\nBut every now and again a part of the label will be missing on one or two tiles where it should be. This is how far I have been yet: \n- When I look into the protobuf file, it contains the vector information necessary to rendering this line/label\n- When I read the protobuf file and its contents by doing a query with a large extend on the datasource this line/label comes up. \n- When I do a query on the datasource that is limited to the tile's bounds however, the line/label does NOT come with since it's outside of the tile bounds. \n- When the renderer's apply routine queries the datasource, it queries it in the tile's boundaries and that's why it does not come up. \n\nI am trying to understand how the query's extend is built depending on the different values of the map and datasource and layer's envelops and buffer sizes but I haven't succeed yet. \nI have tried without success to modify the map's and layer's buffered sizes. \nOne thing I see is that the tile_datasource's envelop is set to the tile bounds. If I increase it, the query's extend also increases but the region rendered on the image as well, so that does not look like the right approach. \n\nI am not yet familiar with what parameters (buffer size, maximum extend, current extent, envelop, ...) stands for what and would appreciate a little explanation if you have time for it :)\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23550428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23784935", "body": "Ok, \n\nOur problem was miss-use of mapnik::vector::tile_datasource\nThis datasource has an envelop that is restricted to the tile's boundaries by default. \n\nAs a temporary solution I artificially increase the size of the datasource's envelop by a certain factor and it fixes my problem. \n\nI am wondering if i miss-use mapnik::vector::tile_datasource and/or if there's another datasource I should use instead. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23784935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71834529", "body": "Hi, \n\nI remember struggling a bit with that a few months ago. \nOne hint that may help you: \n\nYou have to think about the whole flow when dealing with this issue: \n1. Do your vectortiles contain the data outside of the BBox? (ie: Do you have a buffe when generating the tiles? Buffer size may depend on the type of data you need to render)\n2. During rendering, mapnik queries the data from the tile, make sure that the buffer is also applied there. \nComponents are nested in each other so check how the data is extracted from the tile at every level before it is rendered. \nYou have to distinguish the area that you query the data from, and the area that you want to create an image for. \n\nHope that helps a bit. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71834529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kapouer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23978879", "body": "The single file catch.hpp can be indeed rebuilt from source when there is a catch.deb.\nI postponed packaging Catch just because it looked to be near a 1.0 release (and also\nit needed to be patched to compile).\n\nI'm an early adopter of your great work on vector tiles, so the idea was to\npackage an up-to-date mapnik/tilelive stack. Debian is currently at the start\nof a new release cycle, so there will be plenty of time before those packages\nhit next stable release.\nI understand mapnik-vector-tile is bound to be used only by node-mapnik,\nand suppose you had a reason to externalize it. If that's the case, it is\nperfectly all right to build node-mapnik deb out of multiple source tarballs,\nthat are node-mapnik.tar.gz + mapnik-vector-tile.tar.gz.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/23978879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24472837", "body": "- [x] catch debian package uploaded\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24472837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24475445", "body": "- [x] kept single file catch\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24475445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24792884", "body": "yes, i was wrong and this is clearly fixed by https://github.com/mapbox/tilelive-bridge/commit/ac76e6c94ec246990a0708748160e5c5fbd72907\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/24792884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ericfischer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283813", "body": "But also this:\n\n```\n$ make\ng++ tileinfo.cpp ../../src/vector_tile.pb.cc -o tileinfo -lprotobuf-lite -lz\ntileinfo.cpp: In function \u2018int main(int, char**)\u2019:\ntileinfo.cpp:22:67: error: no matching function for call to \u2018find(std::vector<std::basic_string<char> >::iterator, std::vector<std::basic_string<char> >::iterator, const char [10])\u2019\ntileinfo.cpp:22:67: note: candidate is:\n/usr/include/c++/4.6/bits/streambuf_iterator.h:359:5: note: template<class _CharT2> typename __gnu_cxx::__enable_if<std::__is_char<_CharT2>::__value, std::istreambuf_iterator<_CharT2, std::char_traits<_CharT> > >::__type std::find(std::istreambuf_iterator<_CharT2, std::char_traits<_CharT> >, std::istreambuf_iterator<_CharT2, std::char_traits<_CharT> >, const _CharT2&)\nmake: *** [tileinfo] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283989", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25283989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58590404", "body": "@pnorman They both worked fine for me when I tried, although the multipolygon only gets one label even if you ask for marker-multi-policy: each.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58590404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59599339", "body": "Thank you @springmeyer! It will probably be a few days before I am able to get started on this but I am looking forward to it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59599339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "leplatrem": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25496163", "body": "Would that also mean that currently there is no way to use this vector tile renderer in python ?\n\nBasically, I mean using the renderer the same way as tilelive-bridge : \nhttps://github.com/mapbox/tilelive-bridge/blob/master/index.js#L125\n\nI have been digging around to find a way to render a stylesheet into vector tiles in python. But could not figure much out :( All `render` methods seem to cover agg or cairo only...\n\nLooked for instance at :\nhttps://github.com/mapnik/mapnik/blob/master/bindings/python/mapnik_python.cpp\nhttps://github.com/mapbox/mapnik-vector-tile/blob/master/python/renderer.py\n\nThanks for your feedback ! We may offer help if would not feel so foggy ;)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/25496163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52023508", "body": "Hi there :)\nNow that MapBox GL became the most awesome vector tiles viewer ever, I was wondering if the python renderer was still something you have in mind ?\n\nShould it rely on https://github.com/mapbox/vector-tile-py or should the rendering (stylesheet+data) take place over there ?\n\nSeeing the efforts you put on nodejs bindings, I would definitely understand if it got lower in your list :)\n\nThanks for everything :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52023508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vross": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28237896", "body": "All right, thanks a lot! :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28237896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "zdila": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28238819", "body": "Not sure if this is related to this issue, but I am having problem to compile latest tilemill against latest mapnik for couple of weeks.\n\nCommands and errors are here: http://pastebin.com/QV1yFiE6\n\nNote that there are more commands after compilation failure with other attempts.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28238819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28278595", "body": "Thanks, it works.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/28278595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gravitystorm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/30446427", "body": "@ccarse I'd prefer avoiding repurposing labels like that. If `#buildings` means \"a layer called buildings\" then `#data-virginia` should be a layer called data-virginia, rather than a datasource. Similarly, the `.buildings` would mean a selection of layers with class `.building`, rather than having that name.\n\n@springmeyer yes, since layer names are (typically) not under the cartographers control, there's going to be conflicts. If there's another magic attribute keyword then we need to be careful about confusions with attributes of that layer (e.g. if the layer has name,population,source attributes)\n\nIs there some CSS-ish way to approach it, using descendant selectors? For example, something like this:\n\n```\ndiv.nav ul {font-size:1.1em;}\n```\n\ncould become\n\n```\nsources#data-virginia #buildings { polygon-fill:red; }\n```\n\nIt's of course stretching things slightly, since ids are supposed to be unique and don't need such scoping, but it could also open up more complex behaviour like attaching classes to sources.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/30446427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ajashton": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44323368", "body": "Hi, this is an issue tracker for bugs and feature requests. Please email support@mapbox.com with more details about your question (ie are you referring to the Mapbox.com map editor? TileMill? TM2?)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44323368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44979650", "body": "This probably isn't something that should be in the vector tile implementation itself, since you can already get this sort of thing (with complete control of the exact statistics and aggregations) using PostgreSQL/PostGIS as a pre-processing step. Eg you can group by [st_snaptogrid](http://postgis.net/docs/manual-2.1/ST_SnapToGrid.html) with a grid equivalent to a 256x256 tile, then use whatever [PostgreSQL aggegate functions](http://www.postgresql.org/docs/current/static/functions-aggregate.html) you want over the groups.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44979650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "hallahan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44890527", "body": "I think we need a mechanism where we have a new ID for a coincident point collision and only represent a single point in the PBF. Then, the associated ID can be a separate request to an API which can in turn return meta-data for the set of points that the given coincident point collision represents.\n\nAt least regarding points, I think the simplest way to handle checking for duplication would be to have a hash of the pixel space for a given tile and then have a list of points that draw to the given pixel. Then we would only have 1 point in the PBF and an ID to query about what that represents.\n\nI think having an accompanying UTF8 grid or something like that would make a lot of sense for this use case.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44890527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44902157", "body": "Do you find that having 16x path_multipler and a tolerance of 32 is significantly larger than having a 1x path_multiplier and a tolerance of 2? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44902157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44902639", "body": "How involved do you think it would be to add this functionality and provide some sort of dictionary that allows further lookup of the points that an overlapping vertex represents?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44902639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44918418", "body": "I do understand that it makes no sense to include IDs or data about 2 million coincident features and this is essentially what vector tiles avoids. However, upon certain conditions, it may be important to know something about the source data rather than the rendering. \n\nConsider the situation where someone says: show me 2 million points on the map, in the client. I get asked to do this all the time. Obviously we want to show a representation of those points, but I think it would make sense to create the functionality where clicking on a given pixel will allow a means to lookup the set of overlapping points in that given area--a query to a heat map. Likewise, it is likely we want to know about how many coincident features the rendering consists of--so I can color the pixel or maybe put a label showing how many points are there.\n\nI'm thinking about having a dictionary created when the rendering occurs and have that be completely separate to the vector tiles. The vector tiles would only have something like a GUID and maybe a count in the properties. A click event will tell me what the guid is, and then I can ask my api for further information. My API, however, should know about what features are coincident by mapnik while it is doing the rendering--save doing that extra activity hitting PostGIS.\n\nDo you think this approach is a good idea? If not, what do you suggest? \n\nThanks for the insight!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/44918418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/45048964", "body": "That's a very solid idea. Doing this as a preprocessing step is key. Essentially figuring out all of the coincident points based on the one that actually did get through the vector tile makes a lot of sense.\n\nDropping coincident features, however, remains open. This should be easier to do than my initial idea.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/45048964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tmcw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51332655", "body": "Is this a different question from #20?\n- Protocol Buffers are _not_ an OSM thing. They are like JSON: an encoding for different kinds of data.\n- Many formats that use Protocol Buffers use the `.pbf` extension, just like JSON files use `.json`.\n- Thus, files ending with `.pbf` are not necessarily OpenStreetMap-related, or the OpenStreetMap format.\n- None of the readme materials mention the OSM PBF encoding, and there's no particular relationship except that they use the same container format. Like how TopoJSON and GeoJSON are both JSON.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51332655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51340309", "body": "Yes?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51340309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "strk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51340191", "body": "Ok so you confirm the \"tileinfo\" tool actually reads vector-tile files as per vector-tile-spec ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51340191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51340354", "body": "Ok, all clear now, thanks.\nAnd yes, same question than in https://github.com/mapbox/vector-tile-spec/issues/20\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/51340354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "derekmpeterson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52346345", "body": "I'd like to second this request.  I'm particularly interested in how to implement a hillshade with vector tiles.  I'd love to be able to provide some terrain/elevation context in my maps.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52346345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mourner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52807084", "body": "I'm sorry, this turned out to be a JS issue on our side.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52807084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52810927", "body": "Awesome, looking forward to it!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52810927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/53400113", "body": "@springmeyer btw, any idea of when you might try to approach this? Just wondering if it's worth spending a lot of effort trying to get around the degeneracies on the JS side, or would it be much easier to fix that on the VT side.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/53400113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56509375", "body": "OK, so Artem says we pass winding order as is, so there's no easy way to derive ring status... Could you consider winding order correction for a future release? It's pretty easy, and given that geometries are flattened, it would be extremely useful. Usual accepted order is CCW for outer rings, CW for rings.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56509375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60590752", "body": "Note that closing #53 will also close this issue, since polygon clipping procedure also resets winding order. Although fixing just the latter is much easier.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60590752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60621392", "body": "@pnorman yes, I'm suggesting changing the winding order of polygon rings depending on whether it's a hole or an outer ring. I don't see any problems with this since the original winding order is pretty much random and has no practical use.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60621392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/70696468", "body": "Another thing to note is that Mapnik VT output doesn't have `outer1, inner1, inner1, ..., outer2, inner2, ...` order \u2014 it can have outer rings and holes mixed up in random order, which is a problem when you're [trying to figure out which is which](https://github.com/mapbox/mapbox-gl-js/issues/682#issuecomment-70696189).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/70696468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/75822836", "body": "Another approach is to just split MultiPolygons into several Polygon features. This is how Mapzen solved the issue: https://github.com/mapzen/mapbox-vector-tile/issues/4\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/75822836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87636951", "body": "Also, would it be possible to use @kkaefer's Visvalingam simplification in Mapnik (earlier in the pipeline) instead of doing that in mapnik-vector-tile? What would be the difference? cc @artemp \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87636951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87641225", "body": "I didn't realize that we store the data in spherical mercator coords in the database. Then using the right values in PostGIS ST_Simplify should in theory give us the same result. We probably need to revisit tolerance values then.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87641225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87643113", "body": "Artem says we only need to apply point filtering in mapnik-vector-tile to remove dupes introduces by clipping. But we currently use [tolerance=8 for everything below max_zoom](https://github.com/mapbox/tilelive-bridge/blob/master/index.js#L160), which acts as a bad simplification (spoiling detailed geometry).\n\nThat means that if we do simplification in PostGIS just right (using perfect tolerance values), we can ditch the current routine and just dedupe exact coordinates. This way we'll have smaller tiles and better detailed geometries at the same time.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87643113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87652614", "body": "OK looking at `mapbox-streets-source.tm2source` code that mentions st_simplify (e.g. [this code for roads](https://github.com/mapbox/mapbox-streets-source.tm2source/blob/v6/pgsql/carto_table_updates.sql#L537-L545)), it seems that we don't have proper per-zoom simplification at all. Which is very bad for GL. cc @ajashton \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87652614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10573999", "body": "Do we consider all triangles as degenerate geometries?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10573999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10576671", "body": "> just for polygons right now: does that seem okay?\n\nNot sure about this. Can we safely assume that there can be no real-world triangle polygons in the data? Probably not, so it may prune valid features. Triangles can also be used in third-party datasets, e.g. trizilla weather stuff.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/10576671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pnorman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52874351", "body": "It's on my eventual to-do list, time permitting, but I wanted to get it logged as an issue so that I'd remember it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/52874351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56847035", "body": "> The `openstreetmap-carto.xml` stylesheet is not a good place to start for experimenting with vector tiles because it queries a lot of data and will likely need serious optimization to be viable\n\nThe issue is more that a MML file and hence the XML that carto produces contains no information about what zoom levels a layer is applicable to.\n\nIf someone lets us know the name of the attributes for indicating this, we could add them.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56847035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58588080", "body": "I can definitely confirm this an issue - I've run into it using the API directly, not in MapBox Studio.\n\nMy testcase:\n\nSaved as test/single_multipoint.xml\n\n``` xml\n<Map\n    srs=\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\"\n    maximum-extent=\"-20037508.34,-20037508.34,20037508.34,20037508.34\">\n  <Layer name=\"point\" srs=\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\">\n    <Datasource>\n      <Parameter name=\"type\">csv</Parameter>\n      <Parameter name=\"inline\">\nid|name|wkt\n1|null island|MultiPoint((-1000000 0), (0 0), (1000000 0))\n      </Parameter>\n    </Datasource>\n  </Layer>\n</Map>\n```\n\n``` c++\nvoid test_multipoint() {\n/* This test uses a map file with a CSV source with a multipoint and checks\n * the resulting vector tile at 0/0/0\n */\n  mapnik::Map map;\n  avecado::tile tile;\n  mapnik::load_map(map, \"test/single_multipoint.xml\");\n  map.resize(tile_size, tile_size);\n  map.zoom_to_box(bbox);\n  avecado::make_vector_tile(tile, path_multiplier, map, buffer_size, scale_factor,\n                            offset_x, offset_y, tolerance, image_format,\n                            scaling_method, scale_denominator, boost::none);\n  mapnik::vector::tile result;\n  result.ParseFromString(tile.get_data());\n  test::assert_equal(result.layers_size(), 1, \"Wrong number of layers\");\n  mapnik::vector::tile_layer layer = result.layers(0);\n\n  // Query the layer with mapnik. See https://github.com/mapbox/mapnik-vector-tile/blob/2e3e2c28/test/vector_tile.cpp#L236\n  mapnik::vector::tile_datasource ds(layer, 0, 0, 0, tile_size);\n\n  mapnik::query qq = mapnik::query(bbox);\n  qq.add_property_name(\"name\");\n  mapnik::featureset_ptr fs;\n  fs = ds.features(qq);\n  mapnik::feature_ptr feat = fs->next();\n  std::string json = feature_to_geojson(*feat);\n  test::assert_equal(json, blank, \"Wrong JSON\");\n}\n```\n\nThe geojson contains a Point, not a MultiPoint\nIn this case, `avecado::make_vector_tile` just returns `painted()` from a `mapnik::vector::processor<mapnik::vector::backend_pbf>`, after setting up stuff.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58588080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58588143", "body": "@ericfischer did you have occasion to test with MULTILINESTRINGs or MULTIPOLYGONs?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58588143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58600579", "body": "> the  multipolygon only gets one label even if you ask for marker-multi-policy: each\n\nGiven how polygons interact with tile boundaries, that's probably not an issue for common usages, but may be for other consumption of vector tiles.\n\nI'll see what I get back with vector tiles from a datasource with the other MULTI\\* geometries, so I'll test and serialize the results to something human-readable.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58600579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60085518", "body": "> why is this needed?\n\nCompilation errors. I believe it was not finding the correct namespace. @kevinkreiser might be able to explain better.\n\ncross-ref MapQuest/avecado#29\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60085518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60616494", "body": "> Could you consider winding order correction for a future release?\n\nWouldn't the spec need to change for rings to have a defined winding order, or are you suggesting giving an order that wasn't there in the tile when parsing one?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60616494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60706939", "body": "> @pnorman yes, I'm suggesting changing the winding order of polygon rings depending on whether it's a hole or an outer ring. I don't see any problems with this since the original winding order is pretty much random and has no practical use.\n\nI don't see an issue with it either, but I'm just questioning if it's a mapnik-vector-tile issue or an issue that the [specification](https://github.com/mapbox/vector-tile-spec/tree/master/1.0.1) doesn't require a winding order.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60706939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67760656", "body": "where's the spec for what needs supporting?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/67760656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/69295521", "body": "https://github.com/MapQuest/avecado/commit/a398a9c8e848d7a7f94242498ab6102e2a8ace10\n\nerror is\n\n```\nmake  all-am\nmake[1]: Entering directory `/home/ubuntu/src/avecado'\n  CXX      src/make_vector_tile.lo\nIn file included from mapnik-vector-tile/src/vector_tile_backend_pbf.hpp:18:0,\n                 from ./include/backend.hpp:14,\n                 from src/make_vector_tile.cpp:9:\nmapnik-vector-tile/src/vector_tile_geometry_encoder.hpp:11:46: error: variable or field 'handle_skipped_last' declared void\n inline void handle_skipped_last(vector_tile::Tile_Feature & current_feature,\n                                              ^\nmapnik-vector-tile/src/vector_tile_geometry_encoder.hpp:11:33: error: 'Tile_Feature' is not a member of 'mapnik::vector_tile'\n inline void handle_skipped_last(vector_tile::Tile_Feature & current_feature,\n                                 ^\nmapnik-vector-tile/src/vector_tile_geometry_encoder.hpp:11:33: note: suggested alternative:\nIn file included from src/make_vector_tile.cpp:2:0:\n./include/vector_tile.pb.h:204:7: note:   'vector_tile::Tile_Feature'\n class Tile_Feature : public ::google::protobuf::MessageLite {\n```\n\nThis change fixes _that_ error\n\n``` diff\ndiff --git a/src/vector_tile_geometry_encoder.hpp b/src/vector_tile_geometry_encoder.hpp\nindex 5e7c8c9..ee7f70d 100644\n--- a/src/vector_tile_geometry_encoder.hpp\n+++ b/src/vector_tile_geometry_encoder.hpp\n@@ -8,7 +8,7 @@\n\n namespace mapnik { namespace vector_tile_impl {\n\n-inline void handle_skipped_last(vector_tile::Tile_Feature & current_feature,\n+inline void handle_skipped_last(::vector_tile::Tile_Feature & current_feature,\n                                 int32_t skipped_index,\n                                 int32_t cur_x,\n                                 int32_t cur_y,\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/69295521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87263714", "body": "@zerebubuth, @kevinkreiser and myself have written tests for Avecado which implicitly test m-v-t. We did some tests verifying PBF outputs and examining the Mapnik layers that m-v-t created.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/87263714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88660270", "body": "Does #98 and multipoints not existing in the spec change this?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88660270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/89047252", "body": "I wonder if some of the simplification from Avecado can be unified into m-v-t if you're looking at adding that functionality. We are operating in coordinate space (good) and post-clipping (unsure).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/89047252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106576914", "body": "How big do you want?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106576914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106586727", "body": "http://www.paulnorman.ca/files/5_16_11.pbf 50MB\nhttp://www.paulnorman.ca/files/6_20_20.pbf 10MB\n\nBoth uncompressed sizes, both generated from OpenStreetMap Carto as described in [a blog post of mine](http://www.paulnorman.ca/blog/2015/05/avecado-and-a-stylesheet/).\n\nThis means they are 8x8 metatiles for 8/128/88 and 9/160/160.\n\nThey cover \n![image](https://cloud.githubusercontent.com/assets/1190866/7870317/5882e25a-053d-11e5-840e-65ee6e88cfa4.png)\n![image](https://cloud.githubusercontent.com/assets/1190866/7870321/6235ee96-053d-11e5-9286-4c7a8e9681e1.png)\n\nThey are not optimized for vector tile rendering.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106586727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110963834", "body": "Yes, OpenStreetMap Carto now can be used to create vector tiles. There's still a bunch of big issues like returning areas instead of points for labeling, but nothing blows up. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/110963834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217742", "body": "It **may** cause a reallocation. I suspect in most case it will.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/comments/12217742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ThomasG77": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/53160197", "body": "Maybe less job in the queue for @springmeyer >> The announcement by MapQuest of [Avecado, a library for creating vector tiles](https://groups.google.com/forum/m/#!topic/mapnik/vEN6065BIgU) seems to be \"Python vector tiles bindings\".\nSee the [corresponding github repo for Avecado](https://github.com/MapQuest/avecado)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/53160197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "plashchynski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56748293", "body": "Thank you for the advice!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/56748293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "veejaykrishnan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58477566", "body": "Now i am getting the following error when using clang++\n\nIn file included from vector_tile.cpp:13:\n../src/vector_tile_projection.hpp:12:30: error: redefinition of 'vector' as different kind of symbol\nnamespace mapnik { namespace vector {\n                             ^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: previous definition is here\nusing std::vector;\n           ^\nIn file included from vector_tile.cpp:20:\n../src/vector_tile_processor.hpp:53:30: error: redefinition of 'vector' as different kind of symbol\nnamespace mapnik { namespace vector {\n                             ^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: previous definition is here\nusing std::vector;\n           ^\nIn file included from vector_tile.cpp:20:\n../src/vector_tile_processor.hpp:144:32: error: no matching constructor for initialization of 'mapnik::projection'\n            mapnik::projection proj1(lay.srs(),true);\n                               ^     ~~~~~~~~~~~~~~\n/usr/local/include/mapnik/projection.hpp:56:14: note: candidate constructor not viable: allows at most single argument 'params', but 2\n      arguments were provided\n    explicit projection(std::string const& params = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\");\n             ^\n/usr/local/include/mapnik/projection.hpp:57:5: note: candidate constructor not viable: requires single argument 'rhs', but 2 arguments were\n      provided\n    projection(projection const& rhs);\n    ^\nIn file included from vector_tile.cpp:20:\n../src/vector_tile_processor.hpp:259:32: error: no matching constructor for initialization of 'mapnik::raster'\n                        raster target(target_ext, raster_width, raster_height);\n                               ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/local/include/mapnik/raster.hpp:35:5: note: candidate constructor not viable: requires 2 arguments, but 3 were provided\n    raster(box2d<double> const& ext,image_data_32 const& data)\n    ^\n/usr/local/include/mapnik/raster.hpp:31:8: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 3\n      were provided\nstruct raster\n       ^\nIn file included from vector_tile.cpp:20:\n../src/vector_tile_processor.hpp:261:38: error: no member named 'premultiplied_alpha_' in 'mapnik::raster'\n                        if (!source->premultiplied_alpha_)\n                             ~~~~~~  ^\nIn file included from vector_tile.cpp:21:\nIn file included from ../src/vector_tile_backend_pbf.hpp:10:\n/usr/include/mapnik/value_types.hpp:48:8: error: redefinition of 'value_null'\nstruct value_null\n       ^\n/usr/local/include/mapnik/value.hpp:71:8: note: previous definition is here\nstruct value_null\n       ^\nIn file included from vector_tile.cpp:21:\nIn file included from ../src/vector_tile_backend_pbf.hpp:13:\n../src/vector_tile.pb.h:28:11: error: redefinition of 'vector' as different kind of symbol\nnamespace vector {\n          ^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: previous definition is here\nusing std::vector;\n           ^\nIn file included from vector_tile.cpp:21:\nIn file included from ../src/vector_tile_backend_pbf.hpp:13:\n../src/vector_tile.pb.h:255:20: error: expected a class or namespace\n  inline ::mapnik::vector::tile_GeomType type() const;\n         ~~~~~~~~~~^\n../src/vector_tile.pb.h:255:20: error: reference to 'vector' is ambiguous\n  inline ::mapnik::vector::tile_GeomType type() const;\n         ~~~~~~~~~~^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: candidate found by name lookup is 'mapnik::vector'\nusing std::vector;\n           ^\n../src/vector_tile.pb.h:28:11: note: candidate found by name lookup is 'mapnik::vector'\nnamespace vector {\n          ^\n../src/vector_tile.pb.h:256:34: error: expected a class or namespace\n  inline void set_type(::mapnik::vector::tile_GeomType value);\n                       ~~~~~~~~~~^\n../src/vector_tile.pb.h:256:34: error: reference to 'vector' is ambiguous\n  inline void set_type(::mapnik::vector::tile_GeomType value);\n                       ~~~~~~~~~~^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: candidate found by name lookup is 'mapnik::vector'\nusing std::vector;\n           ^\n../src/vector_tile.pb.h:28:11: note: candidate found by name lookup is 'mapnik::vector'\nnamespace vector {\n          ^\n../src/vector_tile.pb.h:375:26: error: expected a class or namespace\n  inline const ::mapnik::vector::tile_feature& features(int index) const;\n               ~~~~~~~~~~^\n../src/vector_tile.pb.h:375:26: error: reference to 'vector' is ambiguous\n  inline const ::mapnik::vector::tile_feature& features(int index) const;\n               ~~~~~~~~~~^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: candidate found by name lookup is 'mapnik::vector'\nusing std::vector;\n           ^\n../src/vector_tile.pb.h:28:11: note: candidate found by name lookup is 'mapnik::vector'\nnamespace vector {\n          ^\n../src/vector_tile.pb.h:376:20: error: expected a class or namespace\n  inline ::mapnik::vector::tile_feature\\* mutable_features(int index);\n         ~~~~~~~~~~^\n../src/vector_tile.pb.h:376:20: error: reference to 'vector' is ambiguous\n  inline ::mapnik::vector::tile_feature\\* mutable_features(int index);\n         ~~~~~~~~~~^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: candidate found by name lookup is 'mapnik::vector'\nusing std::vector;\n           ^\n../src/vector_tile.pb.h:28:11: note: candidate found by name lookup is 'mapnik::vector'\nnamespace vector {\n          ^\n../src/vector_tile.pb.h:377:20: error: expected a class or namespace\n  inline ::mapnik::vector::tile_feature\\* add_features();\n         ~~~~~~~~~~^\n../src/vector_tile.pb.h:377:20: error: reference to 'vector' is ambiguous\n  inline ::mapnik::vector::tile_feature\\* add_features();\n         ~~~~~~~~~~^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: candidate found by name lookup is 'mapnik::vector'\nusing std::vector;\n           ^\n../src/vector_tile.pb.h:28:11: note: candidate found by name lookup is 'mapnik::vector'\nnamespace vector {\n          ^\n../src/vector_tile.pb.h:378:64: error: expected a class or namespace\n  inline const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature >&\n                                                     ~~~~~~~~~~^\n../src/vector_tile.pb.h:378:64: error: reference to 'vector' is ambiguous\n  inline const ::google::protobuf::RepeatedPtrField< ::mapnik::vector::tile_feature >&\n                                                     ~~~~~~~~~~^\n/usr/local/include/mapnik/stroke.hpp:37:12: note: candidate found by name lookup is 'mapnik::vector'\nusing std::vector;\n           ^\n../src/vector_tile.pb.h:28:11: note: candidate found by name lookup is 'mapnik::vector'\nnamespace vector {\n          ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58477566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58487693", "body": "Springmeyer,\n\n```\n              I have installed mapnik2.3.x version. Still i am getting the below error using compiler clang++.\n```\n\n undefined reference to `google::protobuf::internal::LogMessage::LogMessage(google::protobuf::LogLevel, char const*, int)'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi]+0x69): undefined reference to`google::protobuf::internal::LogMessage::operator<<(char const_)'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi]+0x7f): undefined reference to `google::protobuf::internal::LogFinisher::operator=(google::protobuf::internal::LogMessage&)'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi]+0xa1): undefined reference to`google::protobuf::internal::LogMessage::~LogMessage()'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector12tile_featureEE11TypeHandlerEEERKNT_4TypeEi]+0xdc): undefined reference to `google::protobuf::internal::LogMessage::~LogMessage()'\n/tmp/vector_tile-f4acaf.o: In function`google::protobuf::RepeatedPtrFieldmapnik::vector::tile_layer::TypeHandler::Type const& google::protobuf::internal::RepeatedPtrFieldBase::Getgoogle::protobuf::RepeatedPtrField<mapnik::vector::tile_layer::TypeHandler>(int) const':\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi]+0x55): undefined reference to `google::protobuf::internal::LogMessage::LogMessage(google::protobuf::LogLevel, char const_, int)'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi]+0x69): undefined reference to `google::protobuf::internal::LogMessage::operator<<(char const*)'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi]+0x7f): undefined reference to`google::protobuf::internal::LogFinisher::operator=(google::protobuf::internal::LogMessage&)'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi]+0xa1): undefined reference to `google::protobuf::internal::LogMessage::~LogMessage()'\nvector_tile.cpp:(.text._ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi[_ZNK6google8protobuf8internal20RepeatedPtrFieldBase3GetINS0_16RepeatedPtrFieldIN6mapnik6vector10tile_layerEE11TypeHandlerEEERKNT_4TypeEi]+0xdc): undefined reference to`google::protobuf::internal::LogMessage::~LogMessage()'\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/58487693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61931065", "body": "can we use vector tile pbf and mapbox client to build our own maps?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61931065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61941836", "body": "we have been running our own server to generate vector tile pbf. Can we use the below mapbox client to render maps ?\n\nhttps://github.com/mapbox/mapbox-gl-js\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61941836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "StevenLooman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59437836", "body": "From #63, try using clang++. On Ubuntu you can install clang by running:\n\n```\nsudo apt-get install clang\n```\n\nThen run:\n\n```\nmake clean\nCXX=clang++ make test\n```\n\nWorks for me, using de1d54230233ae332f2dee0fe3aa5958abfadf5f, running Ubuntu 14.04.\n\nAnother fix _might_ (untested!) be editing file `/usr/include/google/protobuf/extension_set.h`. At line 183, change this:\n\n```\n  void AppendToList(const Descriptor* containing_type,\n                    const DescriptorPool* pool,\n                    vector<const FieldDescriptor*>* output) const;\n\n```\n\nto this:\n\n```\n  void AppendToList(const Descriptor* containing_type,\n                    const DescriptorPool* pool,\n                    std::vector<const FieldDescriptor*>* output) const;\n```\n\n(note the `std::` before `vector`)\n\nThen run the tests as you normally would:\n\n```\nmake test\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/59437836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kevinkreiser": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60088365", "body": "I only had enough of a cursory glance at @pnorman 's terminal to see that upon compilation it was looking at `mapnik::vector_tile` and saying that it couldn't find various other classes underneath it. From what @pnorman was saying you guys are movnig `vector_tile` out of the `mapnik` namespace? So I proposed fixing the compilation errors by simply prefixing `vector_tile` with `::` so as to tell the compiler we were asking for `vector_tile` that lived at the top of the global namespace hierarchy.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60088365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60093254", "body": "Wait a sec you guys were asking why the space is needed? Haha, for that one I have no clue!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60093254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jfirebaugh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60655850", "body": ":+1: for having a specified winding order.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60655850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/66208992", "body": "The fix for this would be to update both the specification (to require a winding order), and mapnik-vector-tile (to output spec-compliant windings).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/66208992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "arunkmp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60990036", "body": "For your reference\ntileinfo from openstreetmapdata\n\nlayer: water\n  version: 1\n  extent: 4096\n  keys: [1]FID\nvalues: [34706]0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56...\nfeature: 1\n    type: Polygon\n    tags: 0,1\n    geometries: 9,0,7012,106,0,22,0,114,0,42,0,0,0,82,0,138,0,36,0,0,0,118,0,176,0,200,0,238,0,14,15...\n\ntileinfo from Natural Earth\n\nlayer: water\n  version: 1\n  extent: 4096\n  keys: [2]featurecla,scalerank\n  values: [2]Ocean,0\n  feature: 1\n    type: Polygon\n    tags: 0,0,1,1\n    geometries: 9,4096,4096,10,0,0,15\n  feature: 2\n    type: Polygon\n    tags: 0,0,1,1\n    geometries: 9,4096,4096,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10,0,0,15,9,0,0,10...\n\nsee in Natural Earth same data 10,0,0,15,9,0,0 repeating again and again and also extent 4096 also showing in geometries.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/60990036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stepankuzmin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61640763", "body": "My bad, I didn't build mapnik-vector-tile.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/61640763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mpickell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/66792658", "body": "@springmeyer I was directed to this issue from the mapbox/vector-tile-js#14 issue.  Is there any update?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/66792658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "knutole": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71832584", "body": "Hi. Wondering if I have the same problem - or if it's different. Rendering tiles from vector_tiles (made with geojson extracted from OSM PostGIS). For example roads are \"clipped\" rather weirdly at the tile-edges. So are buildings (when drop-shadow is applied). \n![screen shot 2015-01-28 at 14 09 50](https://cloud.githubusercontent.com/assets/2197944/5938049/89336c98-a6f7-11e4-829b-db31979f2897.png)\n\nIs this due to `buffer_size` settings? I've tried all kinds of `buffer_size` settings (on `vtile.render()`), but the only settings that have visible effects are negative values (like `-64`). \n\nLong story short, how do I go about fixing this? Is it due to lacking `buffer_size` in the `vector_tiles` themselves, yielding no difference in rasters? Any pointers greatly appreciated!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71832584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71834838", "body": "Hi @durandt , thanks!  Indeed, the `vtile` does not have a `buffer` around it - and that is probably an issue. I'm going to try to add a buffer for the `vtile` also, so that the raster render has something to work with in the buffer zone. Thanks for your input!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71834838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71838907", "body": "Indeed, putting a buffer on the `vector_tile` helps! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/71838907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bcamper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/75861339", "body": "@mourner yep, not an ideal solution, it would be nice to have multi-geometries directly supported in the spec.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/75861339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ShibaBandit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76475978", "body": "I have icu-devtools, no icu package in my current repos. icu-config --version = 52.1\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76475978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76481280", "body": "Tried your icu_linking build along with using the bootstrap.sh, fixed icu dependency but then got make errors:\n\b\n\n```\n./Release/obj.target/gyp/../mapnik_vector_tile_impl/src/vector_tile_backend_pbf.o: In function `mapnik::vector_tile_impl::backend_pbf::start_tile_feature(mapnik::feature_impl const&)':\nvector_tile_backend_pbf.cpp:(.text+0x772): undefined reference to `u_strToUTF8_54'\nvector_tile_backend_pbf.cpp:(.text+0x7d4): undefined reference to `u_strToUTF8_54'\nvector_tile_backend_pbf.cpp:(.text+0xa07): undefined reference to `icu_54::UnicodeString::UnicodeString(icu_54::UnicodeString const&)'\nvector_tile_backend_pbf.cpp:(.text+0xb82): undefined reference to `icu_54::UnicodeString::UnicodeString(icu_54::UnicodeString const&)'\nvector_tile_backend_pbf.cpp:(.text+0xbc4): undefined reference to `icu_54::UnicodeString::UnicodeString(icu_54::UnicodeString const&)'\n./Release/obj.target/gyp/../mapnik_vector_tile_impl/src/vector_tile_backend_pbf.o: In function `mapnik::value_adl_barrier::value::operator==(mapnik::value_adl_barrier::value const&) const':\nvector_tile_backend_pbf.cpp:(.text._ZNK6mapnik17value_adl_barrier5valueeqERKS1_[_ZNK6mapnik17value_adl_barrier5valueeqERKS1_]+0xa9): undefined reference to `icu_54::UnicodeString::doEquals(icu_54::UnicodeString const&, int) const'\n./Release/obj.target/gyp/../mapnik_vector_tile_impl/src/vector_tile_backend_pbf.o: In function `unsigned long mapnik::mapnik_hash_value<mapnik::value_adl_barrier::value>(mapnik::value_adl_barrier::value const&)':\nvector_tile_backend_pbf.cpp:(.text._ZN6mapnik17mapnik_hash_valueINS_17value_adl_barrier5valueEEEmRKT_[_ZN6mapnik17mapnik_hash_valueINS_17value_adl_barrier5valueEEEmRKT_]+0x36): undefined reference to `icu_54::UnicodeString::doHashCode() const'\ncollect2: error: ld returned 1 exit status\n\b\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76481280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76832495", "body": "Has the preferred build from source method changed to use the bootstrap.sh? Should we be using that primarily? \n\nI think the install involves roughly most of the internet, we do:\n\nUpdate-get update\nPython\nubuntu-toolchain-r http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu\n\n---------GDAL--------\nPackages:\n\"cmake\", \"swig\", \"libhdf5-dev\", \"libnetcdf-dev\", \"netcdf-bin\",\n\"libjbig-dev\", \"libpng-dev\"\n\ngdal-1.11.0 from source\ngeos-3.4.2 from source\ntiff-4.0.3 from source\nopenjpeg-2.0.0 from source\n\n---------Mapnik--------\nPackages:\n\"gcc-4.9\", \"g++-4.9\",\n\"libboost1.55-all-dev\", \"libcairo-dev\", \"libproj-dev\", \"libxml2-dev\",\n\"libicu-dev\", \"libfreetype6-dev\"\n\nharfbuzz-0.9.37 from source\n\nMapnik from master mapnik/mapnik master branch. g++-4.9, gcc-4.9.\n\n---------Mapnik Vector Tiles--------\nPackages:\n\"libprotobuf8\", \"libprotobuf-dev\", \"protobuf-compiler\"\n\nMapnik vector tiles from master.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76832495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76840945", "body": "Got a './build/Release/obj/gen/vector_tile.pb.cc' with the patch listed above.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76840945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76846050", "body": "@springmeyer Sorry, I mean to say it builds with your patch. Make completes.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/76846050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SebastienTr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88056354", "body": "Hello !\n\nI have a similar problem, after looking into bootstrap.sh and setup_cpp11_toolchain.sh, running with source, when I try to run \"make\", \n\nMy configuration is the following : Ubuntu, x86_64.\n\n``` ssh```\n$ source ./.mason/scripts/setup_cpp11_toolchain.sh \n$ make test\nmake[1]: Entering directory `/srv/vec/vectorial/node_modules/mapnik-vector-tile/build'\n  CXX(target) Release/obj.target/mapnik_vector_tile_impl/src/vector_tile_geometry_encoder.o\nclang: warning: optimization flag '-finline-functions' is not supported\nclang: warning: argument unused during compilation: '-finline-functions'\nIn file included from ../src/vector_tile_geometry_encoder.cpp:1:\n../src/vector_tile_geometry_encoder.hpp:35:28: error: no type named 'no_init' in 'mapnik::vertex<double, 2>'\n    vertex2d vtx(vertex2d::no_init);\n                 ~~~~~~~~~~^\n../src/vector_tile_geometry_encoder.hpp:35:17: warning: parentheses were disambiguated as a function declaration\n      [-Wvexing-parse]\n    vertex2d vtx(vertex2d::no_init);\n                ^~~~~~~~~~~~~~~~~~~\n../src/vector_tile_geometry_encoder.hpp:35:18: note: add a pair of parentheses to declare a variable\n    vertex2d vtx(vertex2d::no_init);\n                 ^\n                 (\n../src/vector_tile_geometry_encoder.hpp:59:34: error: no type named 'no_init' in 'mapnik::vertex<double, 2>'\n            vertex2d v(vertex2d::no_init);\n                       ~~~~~~~~~~^\n../src/vector_tile_geometry_encoder.hpp:59:23: warning: parentheses were disambiguated as a function declaration\n      [-Wvexing-parse]\n            vertex2d v(vertex2d::no_init);\n                      ^~~~~~~~~~~~~~~~~~~\n../src/vector_tile_geometry_encoder.hpp:59:24: note: add a pair of parentheses to declare a variable\n            vertex2d v(vertex2d::no_init);\n                       ^\n                       (\n2 warnings and 2 errors generated.\nmake[1]: *** [Release/obj.target/mapnik_vector_tile_impl/src/vector_tile_geometry_encoder.o] Error 1\nmake[1]: Leaving directory `/srv/vec/vectorial/node_modules/mapnik-vector-tile/build'\nmake: *** [libvtile] Error 2\n```\n\nPS : Sorry for my English ^^\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88056354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wibrahim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88630624", "body": "Was just running some test with `GEOMETRYCOLLECTION` and vector tiles. My geometry collection contains a Polygon and a Point (the point is the centroid of the polygon so that the label could be placed only at that point). I did set the `tile_datasource` `multi_geometry` to true but still when rendering from the vector tile I am only getting the Polygon geometry and not the Point. \n\nAre geometry collections still not supported by vector tile ?  Was that fixed in any release or am I doing something wrong ? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/88630624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "danpat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105436326", "body": "It looks like you're trying to build against a version of `mapnik` that's too old.  `mapnik/include/variant.hpp` doesn't exist in any of the `2.x` series releases or branches, it's a new part of the `3.x` pre-release builds.  Try rebuilding `mapnik` from the `master` branch.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105436326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105686561", "body": "I'm workin' on this one.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105686561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106113492", "body": "As a start on this, I've got a roughly working read-only `vector_tile_datasource` that passes some basic test cases.  It's sitting in `master` in a fork at [danpat/mapnik-vector-tile](https://github.com/danpat/mapnik-vector-tile).  Very much a WIP.  @flippmoke - Are there any big vector tiles lying around to do a memory/speed performance comparison with?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106113492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106579756", "body": "Big enough to make it easy to see affects on memory usage.  How big do they get?  @flippmoke mentioned that 10MB v_tiles consumed 100MB+ memory when read.  That kind of size would work for the tests I have in mind.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106579756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106645474", "body": "@pnorman - thanks.\n\nI wrote two test cases, one that loads the big PBF using the Google protobuf generated API, the other uses the new `pbf.hpp` datasource implementation.  Then, using a minimal (single rule) stylesheet, a single 512x512 tile is generated using the AGG renderer.  The generated tile is blank.\n\nAssuming I got it right, peak memory usage is down by ~65%, tile parsing time down by ~80%.\n\n```\n$ /usr/bin/time -l build/Release/tests \"basic pbf rendering using Google Protobuf\"\n1 test case - passed (no assertions)  \u2713\n        2.23 real         1.87 user         0.31 sys\n491,753,472  maximum resident set size\n\n$ /usr/bin/time -l build/Release/tests \"basic pbf rendering using pbf.hpp\"\n1 test case - passed (no assertions) \u2713\n        0.46 real         0.36 user         0.10 sys\n158,457,856  maximum resident set size\n```\n\nI suspect for big tiles that parsing time will be dwarfed by other factors (actually rendering), but the reduction in peak memory usage is pretty big.  The code is not really any more complex, although we do lose compile-time type checking on the vector tile protobuf API.\n\n@flippmoke - I think I will need a bit more guidance to take this too much further.  I can see the various pieces where `vector_tile::Tile` needs to be pulled out, and I have a very rough understanding of what you were describing the other day, but there's a whole lot more complexity on the compositing side that I have very little insight to at this stage.\n\nThere might be another quick win to create a clone of `vector_tile_backend_pbf.hpp` that operates on a `pbf.hpp::pbf_writer`, but it's not clear to me whether that interface would need to change to support more efficient compositing.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/106645474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/111002152", "body": "the proj package itself looks clean, it looks like mapnik-latest is bundling share/proj, and installing the real proj package complains that share/proj is already linked:\n\n```\n* Loading install script 'https://github.com/mapbox/mason/blob/proj-4.8.0/script.sh'...\n* Downloading binary package linux-x86_64/proj/4.8.0.tar.gz...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 3350k  100 3350k    0     0   998k      0  0:00:03  0:00:03 --:--:--  998k\n* Installed binary package at /home/danpat/mapnik-vector-tile/mason_packages/linux-x86_64/proj/4.8.0\n* linking /home/danpat/mapnik-vector-tile/mason_packages/.link/lib/libproj.a\n....\n* Already linked directory /home/danpat/mapnik-vector-tile/mason_packages/.link/share/proj\n* Already linked file /home/danpat/mapnik-vector-tile/mason_packages/.link/include/org_proj4_Projections.h\n* Already linked file /home/danpat/mapnik-vector-tile/mason_packages/.link/include/proj_api.h\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/111002152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "stefda": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105482842", "body": "Oh, OK. I have been trying to compile `mapnik-vector-tile` form `master` which, as I've just learned, requires `mapnik 3.x`. I will try to compile from 20829192d7fd34b23cc10d3e6731f3773fa03ece and see if I get it to work.\n\nThank's for pointing me in the right direction, @danpat. I'm still rather new to github and yet need to learn the basics.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105482842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "morganherlocker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105946019", "body": "I ran into this recently as well. \n\n![screenshot 2015-05-07 15 21 51](https://cloud.githubusercontent.com/assets/814300/7839305/bddd8a1c-045f-11e5-9480-f20fc5ff8d65.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/105946019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "BergWerkGIS": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114065089", "body": "FYI: \nMinimal test case with data from https://github.com/mapbox/mapbox-studio/issues/1390\nhttps://github.com/BergWerkGIS/mapnik-proj4-crashes\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114065089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114202506", "body": "I stepped thru the New Zealand test case.\n\nI think the problem is due to the fact, that local projections (NZMG in this case) are not always valid for the whole extent of the Web Mercator projection (\u00b120037508/\u00b120037508).\n\nTaking [`NZGD2000 / New Zealand Transverse Mercator 2000`](http://spatialreference.org/ref/epsg/2193/) as an example, the valid bounds are within this small area and are likely to not be projectable to WebMercator.\n![image](https://cloud.githubusercontent.com/assets/4549888/8288548/31d669ae-1917-11e5-998c-822e96aff202.png)\n\nSo the problem is the essentially same as in above referenced https://github.com/mapbox/node-wmshp/pull/9.\n\nIn `vector_tile_impl::backend_pbf` `extent` is defined as `WebMercator \u00b120037508/\u00b120037508`.\nWhich fails to properly project to NZMG `buffered_query_ext`: `-5.19594e+24` / `-3.1224129e+24`.\n\n![image](https://cloud.githubusercontent.com/assets/4549888/8288494/cb18cd7e-1916-11e5-9d55-bf7bff2407d9.png)\n\n### Brainstorming solutions:\n\n#### clip to layer extent\n\nProbably the easiest solution (as already outlined by @springmeyer above) would be to clip with `layer_ext/layer_ext2` as this should have a high probability to be reasonably within the valid bounds of the local projection.\nIt has gone through some other software before and if weren't any problems, we shouldn't have any, too, right? \nAlthough it would have to be verified that the bounds, that are valid for the local projection, are also valid for WebMercator (remember, full WGS84 bounds are not valid for WebMercator).\n\n#### define a valid Web Mercator extent for every projection available with proj4\n\nThis would probably be a nightmare to implement and maintain, but could be automated by either\n- scraping http://spatialreference.org/\n- scraping http://www.epsg-registry.org/ \n- querying the information from the Microsoft Access Database available at http://www.epsg.org/DownloadDataset\n- writing a script that \n  - walks through all projections supported by proj4\n  - performs projection of full bbox from Web Mercator to each local projection and back\n  - compares, if the result is within a reasonable deviation from the original WebM bbox.\n  - if yes, stores that information\n  - if no, varies the size of the bbox till results match. Probably starting at `origin latitude`/`central meridan` and then expanding.\n\n---\n\nAlthough distortion of the bbox would also have to be considered with both ideas (see images https://github.com/mapbox/node-wmshp/pull/9#issuecomment-92816770).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114202506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114202970", "body": "^^ I used latest `mapnik/master` and `node-mapnik/master` as of today.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114202970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114643934", "body": "> 1) clipping before reprojecting (this is what we did previously)\n\nI'm not sure, I understand.\nDo you say:\n- Web Mercator tile extent was projected to local projection\n- then source was clipped with projected tile extent in local projection\n- then clipped source was projected to Web Mercator?\n\n> 2) buffering the layer extent clipping slightly (worry it will still result in bounds going outside the valid layer projection extents)\n\nWell, I think there is still enough room for buffering, because we are talking two extremes here.\n\n1) trying to project whole world Web Mercator bbox into local projection (e.g. intended use for area of NZ only) might not work, because mathematically just not possible\n\n![image](https://cloud.githubusercontent.com/assets/4549888/8317322/d9f4d4e6-19fc-11e5-801f-7bd4b8a539a5.png)\n\n2) but creating a reasonable buffer around the extent of the source layer should still leave plenty of room. Just because the intended, optimal area for a certain local projection is relatively small, doesn't mean it is mathematically impossible to cover a much larger area with it.\n\ne.g. Austria's [MGI/Austria GK M31](http://www.spatialreference.org/ref/epsg/31259/) is only intended to be used covering a small area in the east.\nBut that doesn't mean data, that lies even west of Switzerland, cannot be projected to that coordinate system.\nMathematically it is possible.\n\n![image](https://cloud.githubusercontent.com/assets/4549888/8317203/15790466-19fc-11e5-9220-42122fef9b47.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114643934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114672832", "body": "First finds, using `epsg` file that comes with proj4 and lower left point of full WebMerc bbox:\n- `epsg` contains 4169 proj ini strings\n- 5 fail to even initialize\n- 1532 fail to transform from WebMerc to other\n- from those 2632 left, 1532 fail to transform back to WebMerc within a tolerance of <20m for one or both values of the point\n\nhttps://github.com/BergWerkGIS/bbox-finder\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114672832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114837986", "body": "I did a bit more of research:\nhttps://gist.github.com/BergWerkGIS/097aa7e8137f90329c1c\n\nInteresting that the number of failed transformations (WebM->other) for each vertex of the bbox always have the same number of failures/successes.\nBut the affected EPSG codes are different, e.g:\nhttps://gist.github.com/BergWerkGIS/097aa7e8137f90329c1c#file-trans-failed-ul-txt\nvs\nhttps://gist.github.com/BergWerkGIS/097aa7e8137f90329c1c#file-trans-failed-ur-txt\n", "reactions": {"url": "https://api.github.com/repos/mapbox/mapnik-vector-tile/issues/comments/114837986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}}}}