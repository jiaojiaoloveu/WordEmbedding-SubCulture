{"_default": {"1": {"SergeyIvanov87": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/164", "title": "Possible data corruption when assigning variant to itself", "body": "Hi, Thanks to you variant implementation!\r\nBut i see, that there are issue in member\r\n```\r\nVARIANT_INLINE variant<Types...>& operator=(variant<Types...> const& other)\r\n{\r\n    copy_assign(other);\r\n    return *this;\r\n}\r\n```\r\n\r\n\r\nNow there are no check for `&other ==this` and `copy_assign` can destroy variant member data's before actual copy  to itself\r\n```\r\nVARIANT_INLINE void copy_assign(variant<Types...> const& rhs)\r\n{\r\n    helper_type::destroy(type_index, &data);\r\n    type_index = detail::invalid_value;\r\n    helper_type::copy(rhs.type_index, &rhs.data, &data);\r\n    type_index = rhs.type_index;\r\n}\r\n```\r\n\r\nSo, in result `helper_type::copy(rhs.type_index, &rhs.data, &data);` can operate with invalid data\r\n\r\nBest Regards", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "springmeyer": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/158", "title": "Fixing clang-tidy errors/warnings", "body": "I'm attempting to set up clang-tidy to run on codebases using `variant`. I am consistently seeing most warnings coming from variant. So these need to be addressed here, at the source, by either adding `// NOLINT` where appropriate or fixing.\r\n\r\n@artemp can you please tackle this next week?\r\n\r\nHere are the warnings:\r\n\r\n<details>\r\n```\r\n./include/mapbox/variant.hpp:344:16: warning: Function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]\r\n        return f(unwrapper<T>::apply(v.template get_unchecked<T>()));\r\n               ^\r\ntest/lambda_overload_test.cpp:122:5: note: Calling 'test_match_singleton'\r\n    test_match_singleton();\r\n    ^\r\ntest/lambda_overload_test.cpp:87:5: note: Calling 'variant::match'\r\n    singleton.match([](int) {});\r\n    ^\r\n./include/mapbox/variant.hpp:903:16: note: Calling 'variant::visit'\r\n        return variant::visit(*this, ::mapbox::util::make_visitor(std::forward<Fs>(fs)...));\r\n               ^\r\n./include/mapbox/variant.hpp:871:16: note: Calling 'dispatcher::apply'\r\n        return detail::dispatcher<F, V, R, Types...>::apply(v, std::forward<F>(f));\r\n               ^\r\n./include/mapbox/variant.hpp:344:18: note: Calling 'unwrapper::apply'\r\n        return f(unwrapper<T>::apply(v.template get_unchecked<T>()));\r\n                 ^\r\n./include/mapbox/variant.hpp:344:18: note: Returning from 'unwrapper::apply'\r\n        return f(unwrapper<T>::apply(v.template get_unchecked<T>()));\r\n                 ^\r\n./include/mapbox/variant.hpp:344:16: note: Function call argument is an uninitialized value\r\n        return f(unwrapper<T>::apply(v.template get_unchecked<T>()));\r\n               ^\r\n2 warnings generated.\r\n./include/mapbox/recursive_wrapper.hpp:106:36: warning: Undefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn]\r\n    const T* get_pointer() const { return p_; }\r\n                                   ^\r\ntest/hashable_test.cpp:157:5: note: Calling 'test_recursive_hashable'\r\n    test_recursive_hashable();\r\n    ^\r\ntest/hashable_test.cpp:142:10: note: Calling move constructor for 'variant'\r\n    Tree tree = Node{Node{Empty{}, Empty{}}, Empty{}};\r\n         ^\r\n./include/mapbox/variant.hpp:615:9: note: Calling 'variant_helper::move'\r\n        helper_type::move(old.type_index, &old.data, &data);\r\n        ^\r\n./include/mapbox/variant.hpp:235:9: note: Taking false branch\r\n        if (old_type_index == sizeof...(Types))\r\n        ^\r\n./include/mapbox/variant.hpp:241:13: note: Calling 'variant_helper::move'\r\n            variant_helper<Types...>::move(old_type_index, old_value, new_value);\r\n            ^\r\n./include/mapbox/variant.hpp:235:9: note: Taking false branch\r\n        if (old_type_index == sizeof...(Types))\r\n        ^\r\n./include/mapbox/variant.hpp:241:13: note: Calling 'variant_helper::move'\r\n            variant_helper<Types...>::move(old_type_index, old_value, new_value);\r\n            ^\r\n./include/mapbox/variant.hpp:241:13: note: Returning from 'variant_helper::move'\r\n            variant_helper<Types...>::move(old_type_index, old_value, new_value);\r\n            ^\r\n./include/mapbox/variant.hpp:241:13: note: Returning from 'variant_helper::move'\r\n            variant_helper<Types...>::move(old_type_index, old_value, new_value);\r\n            ^\r\n./include/mapbox/variant.hpp:615:9: note: Returning from 'variant_helper::move'\r\n        helper_type::move(old.type_index, &old.data, &data);\r\n        ^\r\ntest/hashable_test.cpp:142:10: note: Returning from move constructor for 'variant'\r\n    Tree tree = Node{Node{Empty{}, Empty{}}, Empty{}};\r\n         ^\r\ntest/hashable_test.cpp:144:9: note: Calling 'hash::operator()'\r\n    if (std::hash<Tree>{}(tree) != ((5 + (5 + (3 + 3))) + 3))\r\n        ^\r\n./include/mapbox/variant.hpp:1022:16: note: Calling 'apply_visitor'\r\n        return ::mapbox::util::apply_visitor(::mapbox::util::detail::hasher{}, v);\r\n               ^\r\n./include/mapbox/variant.hpp:959:12: note: Calling 'variant::visit'\r\n    return V::visit(v, std::forward<F>(f));\r\n           ^\r\n./include/mapbox/variant.hpp:864:16: note: Calling 'dispatcher::apply_const'\r\n        return detail::dispatcher<F, V, R, Types...>::apply_const(v, std::forward<F>(f));\r\n               ^\r\n./include/mapbox/variant.hpp:311:9: note: Taking false branch\r\n        if (v.template is<T>())\r\n        ^\r\n./include/mapbox/variant.hpp:317:20: note: Calling 'dispatcher::apply_const'\r\n            return dispatcher<F, V, R, Types...>::apply_const(v, std::forward<F>(f));\r\n                   ^\r\n./include/mapbox/variant.hpp:339:18: note: Calling 'unwrapper::apply_const'\r\n        return f(unwrapper<T>::apply_const(v.template get_unchecked<T>()));\r\n                 ^\r\n./include/mapbox/variant.hpp:279:16: note: Calling 'recursive_wrapper::get'\r\n        return obj.get();\r\n               ^\r\n./include/mapbox/recursive_wrapper.hpp:101:17: note: Calling 'recursive_wrapper::get_pointer'\r\n        return *get_pointer();\r\n                ^\r\n./include/mapbox/recursive_wrapper.hpp:106:36: note: Undefined or garbage value returned to caller\r\n    const T* get_pointer() const { return p_; }\r\n                                   ^\r\n./include/mapbox/variant.hpp:555:16: warning: Function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]\r\n        return std::hash<T>{}(hashable);\r\n               ^\r\ntest/hashable_test.cpp:153:5: note: Calling 'test_singleton'\r\n    test_singleton();\r\n    ^\r\ntest/hashable_test.cpp:17:7: note: Calling move constructor for 'variant'\r\n    V singleton = 5;\r\n      ^\r\n./include/mapbox/variant.hpp:615:9: note: Calling 'variant_helper::move'\r\n        helper_type::move(old.type_index, &old.data, &data);\r\n        ^\r\n./include/mapbox/variant.hpp:235:9: note: Taking false branch\r\n        if (old_type_index == sizeof...(Types))\r\n        ^\r\n./include/mapbox/variant.hpp:241:13: note: Calling 'variant_helper::move'\r\n            variant_helper<Types...>::move(old_type_index, old_value, new_value);\r\n            ^\r\n./include/mapbox/variant.hpp:241:13: note: Returning from 'variant_helper::move'\r\n            variant_helper<Types...>::move(old_type_index, old_value, new_value);\r\n            ^\r\n./include/mapbox/variant.hpp:615:9: note: Returning from 'variant_helper::move'\r\n        helper_type::move(old.type_index, &old.data, &data);\r\n        ^\r\ntest/hashable_test.cpp:17:7: note: Returning from move constructor for 'variant'\r\n    V singleton = 5;\r\n      ^\r\ntest/hashable_test.cpp:19:9: note: Calling 'hash::operator()'\r\n    if (std::hash<V>{}(singleton) != std::hash<int>{}(5))\r\n        ^\r\n./include/mapbox/variant.hpp:1022:16: note: Calling 'apply_visitor'\r\n        return ::mapbox::util::apply_visitor(::mapbox::util::detail::hasher{}, v);\r\n               ^\r\n./include/mapbox/variant.hpp:959:12: note: Calling 'variant::visit'\r\n    return V::visit(v, std::forward<F>(f));\r\n           ^\r\n./include/mapbox/variant.hpp:864:16: note: Calling 'dispatcher::apply_const'\r\n        return detail::dispatcher<F, V, R, Types...>::apply_const(v, std::forward<F>(f));\r\n               ^\r\n./include/mapbox/variant.hpp:339:18: note: Calling 'unwrapper::apply_const'\r\n        return f(unwrapper<T>::apply_const(v.template get_unchecked<T>()));\r\n                 ^\r\n./include/mapbox/variant.hpp:339:18: note: Returning from 'unwrapper::apply_const'\r\n        return f(unwrapper<T>::apply_const(v.template get_unchecked<T>()));\r\n                 ^\r\n./include/mapbox/variant.hpp:339:18: note: Passing value via 1st parameter 'hashable'\r\n        return f(unwrapper<T>::apply_const(v.template get_unchecked<T>()));\r\n                 ^\r\n./include/mapbox/variant.hpp:339:16: note: Calling 'hasher::operator()'\r\n        return f(unwrapper<T>::apply_const(v.template get_unchecked<T>()));\r\n               ^\r\n./include/mapbox/variant.hpp:555:16: note: Function call argument is an uninitialized value\r\n        return std::hash<T>{}(hashable);\r\n```\r\n</details>\r\n\r\n\r\nHere is how I'm testing:\r\n\r\n - ` run-clang-tidy` branch: https://github.com/mapbox/variant/compare/run-clang-tidy\r\n - Running `./scripts/clang-tidy.sh` \r\n\r\n/cc @daniel-j-h \r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/19", "title": "sizeof(variant)", "body": "My understanding is that calling `sizeof` on a variant should produce the size of the largest type the variant includes.  And my assumption is that `sizeof` for a given type is not going to be consistent/portable across arches and platforms. However, as we should strive to have the variant use at little memory as possible I wanted to surface this ticket for discussion.\n\nDumb questions that I assume the answer is `duh, no`, but want to know for sure:\n- Would it make sense to try to add tests of `sizeof(variant_instance)` by adapting to how `sizeof(std::string)` and other types might be different per platform? Might catch regressions if we ever made a mistake that increased the variant memory footprint.\n- Are there any optimizations to be had from learning/applying ideas from http://www.catb.org/esr/structure-packing/?\n- For custom types should we add some kind of MAX_VARIANT_SIZEOF flag to allow clamping the size - this would then be able to catch a situation were a poorly aligned custom type is larger than other built-in types used in the variant\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/19/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/550ac2f159ca883d360c196149b466955c77a573", "message": "Merge pull request #143 from tomhughes/catch\n\nUpdate bundled Catch and fix resulting issues"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/05b7612aa86c28f95d39ba786c7b611e811e4bf8", "message": "Merge pull request #135 from mapbox/llvm-3.9.1\n\nTarget llvm 3.9.1 instead of 3.9.0"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/61f8acea1b09de639b46c8af0c5aae29f51dd05c", "message": "upgrade mason"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f5fb4661ebf1ecd0167bce50b00a8339604395b0", "message": "upgrade to llvm 3.9.1"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5baa948fa73313091bc082b9f3d17c5b5f600cac", "message": "fix gyp build"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4923eb527c129060ba970d622d639ad2ada42497", "message": "osx: test that will support both latest (10.12) and oldest with c++11 support: 10.7"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/18a8055fef0e14110c313ca358f0f7c88290bed0", "message": "Merge pull request #134 from lightmare/warnings\n\nremove useless and/or dubious compiler flags"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a9707c3de095c715f84a1855684a3dc8e37a594a", "message": "Merge pull request #133 from mapbox/Werror\n\nStarts building with -Werror"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a80beaafc20c2c015ace5fb1e4c99f6de8c24d75", "message": "disable -Wparentheses for older gcc"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c8ec829ffb4498a0aea8ffa9b62ba4932cdefbdf", "message": "drop -Wstack-protector which gives unhelpful warnings"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7b409402c3cf4a0260aa36ee768ee474aa3683c1", "message": "upgrade libstdc++ for coverage build"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b433986199b7dfbe59fa498eb80791a49c625170", "message": "Add -pthread"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/904dcaee6d0d872eae52578e38199577418f9a32", "message": "limit some flags to clang++"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/1023f2d9adcf0a14be7cb729abab8156ecd962c5", "message": "try without pthreads"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/886377de081dd8099ef4a7869ae3ff5d6c850c8d", "message": "fortification flags + -pthreads for linux where needed"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cf9a534991b5a36f86674975768e0a1600c776be", "message": "build in both release and debug on travis"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/539d712746d08a172e68a47f7aa73ffdda40b70b", "message": "fix conversion warnings"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/253047f53549c3fb1df441859cfd42aecc9f3a8f", "message": "enable -Werror, suppress warnings from non variant headers using isystem"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6317a0b7406395729139327a83a71cfa14513fac", "message": "re-enable older compilers, trim excess"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4fe5ced5db2cb46b23a6e326b5bf9292d95c0642", "message": "more sanitizer options"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d1bb6e54608c6bfe3970b2653971da49b3c15ef8", "message": "-fsanitize=cfi and -fsanitize=safe-stack"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/20d693ed9a04cc6b689f4c6a1ed58c96f964b08a", "message": "fix LDFLAGS"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9b2de45460f4df3a22c6607043d50df730dd42af", "message": "test with clang++ sanitizers and flto"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/702826365d1ea13710b82949c254af5920c92999", "message": "disable clang++ 3.9, will work on getting working in a branch"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e07a533a8f451fe541db683fc713eb0012730115", "message": "fix clang++ PATH"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/84eeb54c9408297db4bc57e3ea5a1b3d9f075a66", "message": "test clang++ via mason"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a760cea8dab53e587498470861b364f1256a5e0d", "message": "upgrade mason"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b9c58d631a22e97f4069a819765f5c157525df6a", "message": "upgrade boost to 1.62.0"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c81b475b40797d503f18ddad4c065f6b1694d341", "message": "makefile improvements"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ce2eea64499cd37eec7932ddf82f72b9f1a1b79e", "message": "travis: fix addons"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/efa75df2735d3f5a5fa2646528d4006bf9b5b3dc", "message": "test with clang 3.9 and g++-6"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cb5635ba2556d76aaba97e4d0fc14b82b48f8b61", "message": "add package.json for publishing to npm"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7e4a01189bb4050524954b2a88c82de7cb82ea4a", "message": "Add include directory"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/13c631a6297d9abc9677c1afc1a3907fec7c16b4", "message": "Update README.md"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f00b24bf65e8af7fddc56ac4a3abe67ed974b0a5", "message": "move headers into include/mapbox folder - closes #99"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/82bb901b6cc0de8c238a07292163dc7c28a26ce4", "message": "run coverage with clang 3.5 - fix clang 3.8 build"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5f6ed7149d737edf9f1f019beb54cbe5289c474c", "message": "remove invalid option for llvm-cov"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f034d5571de987d14b404dba94e7269ac41fa583", "message": "fix clang 3.8 compile, try 3.9"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b0ee4729bfc9ea649abe40f279de384df75b79d1", "message": "fix coverage to avoid warning: unit.gcno:version '402*', prefer '406*'"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/24391a9ea3e4b060c7a62debf6eb4e3515b9a5e6", "message": "Merge pull request #87 from lightmare/noexcept-destructor\n\ndisable noexcept on destructor for MSVC"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c4e864cc122c4fcc9b1f7a8f68a34e465df9f922", "message": "Merge pull request #85 from mapbox/test-all-clang\n\nTest all clang++ versions possible"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/97d95198959f462329a94d4fae644ebe04cc8360", "message": "pull clang++ 3.4, we're not going to try to support"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8c231c88064f9bccf949f50c51fd5ce6b6a4e985", "message": "update list of tested compilers - closes #79"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/597c1b825506ce997691aa3ee19b108fee3b0a7d", "message": "clang 3.4 is default 'clang++' on precise"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8e263aaad568a157f362ae706f23c584ed0e3553", "message": "test all clang versions - refs #79"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/dc899a43d61b27a1332728ab534a2c8eaf3b0eb8", "message": "avoid setting -fvisibility-inlines-hidden for DEBUG builds"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c7d51ce57488daf5fc06d0fba59e7cb22162976a", "message": "Merge pull request #58 from mapbox/sudo-false\n\nTravis testing improvements"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5ca19f382d1838170995306661d24379141195ea", "message": "fix pythonpath"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ccce601fbc270428e543c2d2f3eae79f51f59370", "message": "update readme with more tested compiler versions"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b301a43f48c0592a15f3bc0e6fbc11e39f8409ad", "message": "Merge branch 'master' of github.com:mapbox/variant into sudo-false"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/de094ff529cfbcf6ae87cbbfa7d42999a11d70a7", "message": "fix cpp-coveralls install path"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/36890f713703ba4f99aed283a95546e22acab006", "message": "add gcc 47 alias"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b7c97d37d752bd6ac7a671b044c2ad6184488e66", "message": "test both GLIBCXX_USE_CXX11_ABI modes with gcc 5"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b9b17ebd46705cefe54d2b9730449e4407766e92", "message": "Test more gcc versions"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/21515b8c992eecfa4cee897b548231969578f93e", "message": "minor travis script fixes"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4cacec63f69ffe92dbfab5c3f1b0f18467007937", "message": "request 55 explicitly"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2f71c63b7d32a9b4a981bbd401c4cd35358c8c1b", "message": "try alt boost package name"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b4c30a10966d53827abf51333f5f5bc7a689749b", "message": "fix name of boost latest ppa"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9d005364d28bad7c08c39ea5b0d6a6b5768a7a32", "message": "add boost on include path"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/dd5b1a3c5987c304a2f26c20da3e1e78b5aac70b", "message": "get recent enough boost for boost_timer"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7db419ab2883cf1adef71c6fffc2489bc1bf3179", "message": "Merge branch 'master' of github.com:mapbox/variant into sudo-false"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5111fafb846e7f8b9ab8e0215d416898b9885470", "message": "port travis to docker"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/bb0765eeaffcc32791e494f0de3322fa89369097", "message": "remove 'finline-functions' which clang does not understand"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/41803797", "body": "Awesome, let's do it. \n\n> On Apr 30, 2014, at 7:32 AM, Dennis Luxen notifications@github.com wrote:\n> \n> awesome, it would allow me to ditch yet another boost dependency in OSRM. (not that boost is bad at all)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/41803797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43557494", "body": "This is now in place. Next actions are more tests and small fixups (#13)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43557494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43942322", "body": "removed as part of https://github.com/mapbox/variant/commit/64f8fb4473f3ef6f7117dc02f02a20645e415b72\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43942322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44199345", "body": "Hmm, maybe try (untested):\n\nobject.values[\"pi\"] = std::move(number);\n\nAlso see the recursive wrapper tests using unique_ptr in tests/ for usage hints. \n\n> On May 26, 2014, at 8:20 AM, Dennis Luxen notifications@github.com wrote:\n> \n> The following code snippet is not compiling:\n> \n> #include \"recursive_wrapper.hpp\"\n> #include \"variant.hpp\"\n> \n> #include <iostream>\n> #include <string>\n> #include <unordered_map>\n> \n> struct Number;\n> struct Object;\n> \n> typedef util::variantutil::recursive_wrapper<Number,\n>                       util::recursive_wrapper<Object>> Value;\n> struct Number\n> {\n>     Number() {}\n>     Number(double value) : value(value) {}\n>     double value;\n> };\n> \n> struct Object\n> {\n>     std::unordered_map<std::string, Value> values;\n> };\n> \n> int main() {\n>     Object object;\n>     Number number {3.1415};\n>     object.values[\"pi\"] = number; \n>     return 0;\n> }\n> Fails on clang 3.4 with:\n> \n> $ clang++ test/variant_hello_world.cpp -std=c++11 -I . && ./a.out \n> In file included from test/variant_hello_world.cpp:2:\n> ./variant.hpp:397:9: error: static_assert failed \"Not a valid type for this variant\"\n>         static_assert(detail::is_valid_type<T,Types...>::value, \"Not a valid type for this variant\");\n>         ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n> test/variant_hello_world.cpp:28:27: note: in instantiation of function template specialization 'util::variantutil::recursive_wrapper<Number, util::recursive_wrapper<Object> >::variant<Number &>' requested here\n>     object.values[\"pi\"] = number; \n>                           ^\n> In file included from test/variant_hello_world.cpp:2:\n> ./variant.hpp:398:21: error: cannot allocate reference type 'Number &' with new\n>         new (&data) T(std::forward<T>(val)); // nothrow\n>                     ^\n> test/variant_hello_world.cpp:28:27: note: in instantiation of function template specialization 'util::variantutil::recursive_wrapper<Number, util::recursive_wrapper<Object> >::variant<Number &>' requested here\n>     object.values[\"pi\"] = number; \n>                           ^\n> 2 errors generated.\n> and on GCC 4.8.1 with:\n> \n> $ g++ test/variant_hello_world.cpp -std=c++11 -I . && ./a.out \n> In file included from test/variant_hello_world.cpp:2:0:\n> ./variant.hpp: In instantiation of \u2018util::variant<Types>::variant(T&&) [with T = Number&; Types = {util::recursive_wrapper<Number>, util::recursive_wrapper<Object>}]\u2019:\n> test/variant_hello_world.cpp:28:25:   required from here\n> ./variant.hpp:397:9: error: static assertion failed: Not a valid type for this variant\n>          static_assert(detail::is_valid_type<T,Types...>::value, \"Not a valid type for this variant\");\n>          ^\n> ./variant.hpp:398:9: error: new cannot be applied to a reference type\n>          new (&data) T(std::forward<T>(val)); // nothrow\n>          ^\n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44199345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44436105", "body": ":+1 from @artemp in chat, merging.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44436105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45293352", "body": "@DennisOSRM - had a change to try this out again?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45293352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52215443", "body": "I assume @artemp kept this so that the API matches boost::static_visitor. Is there a benefit you see to dropping it?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52215443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52215653", "body": "I think this was fixed by 854c5a7a115d92b67\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52215653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52216358", "body": "closing, this has been working nicely. Followup at #27 (more tests)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52216358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52216713", "body": "unit tests are in and have been working well. Not ported benchmarks yet, but will keep this in mind for a rainy day.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52216713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52218434", "body": "To clarify, this is only an issue currently for mapnik usage: https://github.com/mapnik/mapnik/blob/8ef6558496e079ee2e307642ec3f8a8663e61d5d/include/mapnik/util/variant.hpp#L38\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52218434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52225107", "body": "okay, thanks. I agree it is simpler but I think its is worthwhile to keep as it for boost compat. But we should move to a separate header so its only needed when boost API is desired /cc @artemp\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52225107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/53541656", "body": "awesome :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/53541656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/69257848", "body": "landed in 3cc2d708e0552ba4ebce11d4d67f798813f15aa2, followup in #35\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/69257848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138653669", "body": "@lordnn - are you seeing a compile error with g++ 5.1? If so, can you share the details?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138653669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139773833", "body": "@kirbyfan64 - hi, thanks for the contribution. However I'm not seeing the benefit of having an install target. These programs are not general purpose utilities - they are rather testing programs that work fine locally.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139773833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139774395", "body": "@kirbyfan64 - I'm sorry, I did not see the ticket until just now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139774395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153783809", "body": "re-opening - needs some kind of unit test (which will be tricky).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153783809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161993609", "body": "No important reason. Feel free to use the catch provided main.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161993609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161994173", "body": "I added this. Not sure what is wrong with hardcoding - this is being done similar to https://github.com/mapnik/mapnik/blob/master/include/mapnik/version.hpp#L26-L30 (which is done like boost/version.hpp). Do you have ideas for alternative ways?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161994173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161994737", "body": ":+1: to custom exception type if you see a benefit (as long as it inherits from `std::exception` of course).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161994737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161998561", "body": "@joto yes, this is fixed. So I will close. The followups needed are just coverage to make sure it does not regress:\n- https://github.com/mapbox/variant/issues/42\n- https://github.com/mapbox/variant/issues/39\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161998561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162016581", "body": "Ah, I see now. Yeah, my assumption is that the comment and test would be updated each time the version is bumped. But I'm open to removing them to avoid drift.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162016581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/163321566", "body": "Per chat with @joto - he is going to take a look at cleaning up overall test coverage to get to 100% and this bit of coverage is the top priority.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/163321566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173672137", "body": "> I support deprecating or removing our implementation.\n\nSame :+1: . For the next tagged release let's remove it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173672137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173949436", "body": "yes\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173949436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173950020", "body": "I'm supportive of this change - yes, we'll just need to carefully upgrade code. How about:\n- [x] @artemp checks for upgrade needs in mapnik\n- [x] @jfirebaugh checks for upgrade needs in mapbox-gl-native\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173950020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175146150", "body": ":+1:  This looks good.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175146150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176299815", "body": "Certainly does, let's chat next steps over at #77\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176299815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176310205", "body": "I've created two new milestones that we can assign tickets to in order to get to releasing:\n- 1.1.0 - current master -> next release, mostly backwards compatible, much better tested across compilers\n- v2.0.0 - we will bump to this when we make major backwards incompatible changes like those tracked in the milestone: https://github.com/mapbox/variant/milestones/2.0.0\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176310205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176312641", "body": "tracking v1.1.0 release at https://github.com/mapbox/variant/issues/78\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176312641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176318319", "body": ":+1: thanks for the suggestion. Once work has settled in master I will grab the `.clang-format` from `osrm-backend` and apply it here before releasing (refs #78)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176318319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176318928", "body": "stale: closing - we are working on test coverage overall right now leading up to release: #78\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176318928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176321102", "body": "> Using an int8_t type_index instead of size_t could lead to considerable space savings for types like std::vector<std::variant<char, uint16_t>>, so I think this is worth pursuing.\n\n:+1 . My gut says space savings will be meaningful for our usecases while I really really doubt any negative runtime perf hit.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176321102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176321596", "body": "@joto @artemp  - is this still relevant? What are the current questions and next actions?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176321596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176324317", "body": "As `visitor-no-copy` is merged, let's close this now and create new tickets for any followups.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176324317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176325131", "body": "@artemp how is this related to #67? Can one be closed in favor of the other?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176325131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176326241", "body": "@aldn - thanks for sharing your experience. Can you update to the latest variant.hpp from master and let us know if you are still seeing this problem?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176326241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176327775", "body": "This is stale, and its unclear if it might still be relevant because the link points to lines of code in master that have shifted.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176327775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176328289", "body": "@artemp - anything more to do here or can we close this up?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176328289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176334371", "body": "Voiced with @artemp and @joto on the state and future of `mapbox::variant`. Summary is:\n- `mapbox::variant` has been a very valuable, lightweight alternative for apps that can use c++11 or c++14 but that do not want a boost dependency (https://github.com/mapbox/geojson-vt-cpp is recent example)\n- `mapbox::variant` has also been useful in apps that do depend on boost, like mapnik, to help (slightly) with compile times and to majorly lessen dependence on boost in core headers.\n- Original goal and near term goal is to maintain external API compatibility with `boost::variant` such that `mapbox::variant` can be a \"drop in\".\n- Other original goal and near term goal is to stay minimal: only implement the features that mapnik, osrm, and mapbox-gl need. So being an \"incomplete\" implementation is just fine.\n- We are going to defer for now on trying to be API compatible with the upcoming variant standard. Because the standard is not finished and it would be too much work. But let's revisit this in 6-8 months. It sure would be nice to eventually be able to ask `mapbox::variant` (via a DEFINE) to go into `std::variant` mode for developers that want to eventually target the standard but can't upgrade their compiler yet.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176334371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176335157", "body": "Based on ^^ I will close this issue since there is nothing actionable right now. But everyone should feel free to continue to use this issue to document ideas and findings in relation to the upcoming standard. We can re-open if any changes are actionable. Or just reference this issue in pull requests.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176335157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177018112", "body": "Added missing compilers above ^^. However clang++3.4 won't work because catch.hpp is broken: https://github.com/philsquared/Catch/issues/535. So, I'll pull clang++3.4 from travis now and the readme.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177018112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178156507", "body": "Going to merge this to unblock Mapnik windows builds (refs https://github.com/mapbox/windows-builds/issues/76).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178156507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178160813", "body": "@lightmare also seeing that. Hrmm. Can you see a way to add a test to mapbox/variant to cover this (so we don't have to depend on mapnik to catch the problem)?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178160813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182527784", "body": "> I switched mapbox-gl-native over to experimental/optional earlier this week. I support deprecating or removing our implementation.\n\n@jfirebaugh I saw you mention that you hit problems with `experimental::optional`? Do you see value in keeping `mapbox::optional` around longer or no?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182527784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182592572", "body": "Thanks @jfirebaugh - re-closing this issue then: We'll stick with the current deprecation and future removal (at v2.x)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182592572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184868664", "body": "The `noexcept` specifier on the destructor creeped into the code in https://github.com/mapbox/variant/commit/46622cbc920f2911c6dd8a285574a4f5f8c66f5f. I presume the easiest solution is to revert back and remove it to dodge https://github.com/mapnik/mapnik/issues/3277#issuecomment-177471394.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184868664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184895745", "body": "@lightmare okay, thanks for clarifying. So do I understand right then that https://github.com/mapnik/mapnik/issues/3277#issuecomment-177471394 is likely fixed / no longer relevant as long as mapnik is using the latest variant (which it is)?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184895745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184896799", "body": "> So do I understand right then that mapnik/mapnik#3277 (comment) is likely fixed\n\nAnswered my own question. https://github.com/mapnik/mapnik/issues/3277#issuecomment-184896603. This issue is therefore resolved, closing!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184896799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184896959", "body": "This is unlikely needed per https://github.com/mapbox/variant/issues/86#issuecomment-184896799\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184896959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188525029", "body": "/cc @artemp @joto\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188525029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188526558", "body": "`GCC 4.7` is not a critical compiler to support. I've been wondering if we should drop support for it. Because its c++11 support is pretty marginal anyway.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188526558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/195094883", "body": "Okay thanks for the details and discussion. Going to close as I agree there is nothing needing fixed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/195094883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/195100654", "body": "Okay, thanks. So this is a misusage. Moving to -> https://github.com/mapnik/mapnik/issues/3357\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/195100654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212522040", "body": "This happened: https://github.com/mapbox/variant/releases/tag/v1.1.0\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212522040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212522742", "body": "We've deprecated for now (https://github.com/mapbox/variant/issues/64#issuecomment-182592572). Not seeing a need to keep this open: we can remove at 2.0 but 2.0 is not actionable yet.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212522742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218233571", "body": "> We should just drop this row from CI, yeah?\n\nYes.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218233571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218241570", "body": "If I recall correctly, this is the way variant was implemented originally (@artemp preferred requiring explicit types). Implicit conversions I think were added at the request of OSRM devs at the time to enable variant being a drop-in replacement for `boost::variant` (which allows implicit conversions) (which is a design goal https://github.com/mapbox/variant#goals).\n\nSo the options I see are:\n- ban implicit conversions, bump to 2.0, come to consensus that the design goals must shift\n- allow implicit conversions, warn against using them in the readme\n- add a MACRO to enable or disable them (support both modes)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218241570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218247347", "body": "excellent, \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218247347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218491905", "body": "\ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218491905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218512616", "body": "I wonder if homebrew provides binaries of g++-5 we could use? Installing g++ from source on OSX travis machines would be a non-starter, but if we could pull binaries from homebrew then testing this might be feasible.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218512616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/variant/comments/5355288", "body": "okay :) :+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/5355288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/comments/6825636", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/6825636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/comments/15593940", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/15593940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/comments/17435758", "body": "\ud83d\udc4d  That need for `-stdlib=libc++` was for older OS X, clang++. Should be good to remove it now like you did.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/17435758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "anandthakker": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/157", "title": "Add API.md documenting all available methods", "body": "Quoting @artemp from https://github.com/mapbox/variant/pull/156#discussion_r127658875:\r\n\r\n> it'll be better to have a separate page listing all available methods while README only mentions basic building blocks\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/126270170", "body": "> Should we document all of variant's api here?\r\n\r\n@daniel-j-h good questions!  I wasn't aware of the other parts of variant's API either.  Motivation for this PR was simply that I found myself wishing for an `is<T>()` method and assuming it didn't exist because it wasn't in the readme (and the header code itself isn't too easy to skim as a reference).", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/126270170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/129057405", "body": "\ud83d\udc4d closing here in favor of opening an issue re: documentation", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/129057405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "BlueSolei": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/155", "title": "Visual Studio debugger support", "body": "I created a Visual Studio Native Visualizer file for variant.\r\nThis file enable the debugger to view the value in a variant variable. \r\nThere are two files here:\r\n\r\n1. Variant.natvis - the XML describe how to view the variant in VS debugger\r\n2. InstallVSDebuggerVariantSupport.bat - simple batch file to copy the nativs file to VS debugger folder\r\n3. One can also just add it to the project itself, the debugger will peek it up from there.\r\n\r\nThe natvis file support up to 20 types, if you think we need to support more, tell me and I will upload a new file.\r\nVS Natvis format requires to explicitly describe each variant (with 1, 2, 3... types).\r\nI use the boost::variant nativs file as a reference, and there it describe up to 20.\r\n\r\nEnjoy :-)\r\n\r\n[VariantVSDebuggerSupoort.zip](https://github.com/mapbox/variant/files/1117851/VariantVSDebuggerSupoort.zip)\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/7a541ba10d2eb9a9da0f11bb27319cd125d43a3d", "message": "recursive_wrapper fail to compile when used with 2 classes which are base and derived #146"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "huanncbg": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/152", "title": "Bug leads to crash program when using .set<T>() and then apply_visitor() ", "body": "\r\n#include <iostream>\r\n#include <mapbox/variant.hpp>\r\n#include <unordered_map>\r\nusing namespace std;\r\nusing namespace mapbox::util;\r\n\r\n// Forward declaration\r\nstruct HPArray;\r\nstruct HPTable;\r\nusing HPVariant = variant<string,float,recursive_wrapper<HPArray>>;\r\n\r\nstruct HPArray{\r\n    template <typename ...Args>\r\n    HPArray(Args ...args){\r\n        values.emplace(std::forward<Args>(args)...);\r\n    }\r\n    unordered_map<int,HPVariant> values;\r\n};\r\n\r\nstruct Visitor{\r\n\r\n    void operator()(const string &str){\r\n        cout << str <<endl;;\r\n    }\r\n\r\n    void operator()(const float &value){\r\n        cout << value <<endl;\r\n    }\r\n\r\n    void operator()(HPArray array){\r\n        for (size_t i = 0; i < array.values.size(); i++)\r\n        {\r\n            apply_visitor(*this,array.values[i]);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nint main()\r\n{\r\n    HPArray ar;\r\n    ar.values[0] = HPVariant(\"String\");\r\n    ar.values[1] = 2.0f;\r\n\r\n    HPVariant var;\r\n    var.set<HPArray>(ar);\r\n    Visitor visitor;\r\n    apply_visitor(visitor,var);\r\n    return 0;\r\n}\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jplatte": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/151", "title": "std::is_copy_constructible::value is always true for variant<Ts...>", "body": "The copy constructor only actually compiles when all member types are copyable, as it should. However, when checking whether the variant type is copy-constructible via SFINAE, e.g. with `std::is_copy_constructible`, you will always get `true`, because the copy constructor always exists, whether or not it is valid. The same applies to move constructors, and copy / move assignment operators.\r\n\r\nI first thought I could fix this with a simple `enable_if` on each of the methods, but as it turns out I can't because if you make templates out of any of these special methods, they are not those special methods anymore. I did find a [solution] on StackOverflow, though I'm not entirely certain if it might introduce unwanted side effects. Could you have a look? In case it seems unproblematic to you, I would be happy to try implementing it here.\r\n\r\n[solution]: https://stackoverflow.com/a/27073263/1592377", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tomhughes": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/148", "title": "Tests fail with gcc 7.0.1 due to new aliasing warnings", "body": "Running `make test` with gcc 7.0.1 fails due to new aliasing warnings, promoted to errors by the `-Werror` switch in the makefile:\r\n\r\n```\r\ng++ -c -o out/binary_visitor_1.o test/t/binary_visitor_1.cpp -Iinclude -isystem test/include -std=c++11 -Werror -Wall -Wextra -pedantic -Wformat=2 -Wsign-conversion -Wshadow -Wunused-parameter -O3 -DNDEBUG -march=native -DSINGLE_THREADED -fvisibility-inlines-hidden -fvisibility=hidden -I/usr/include/catch -pthread\r\nIn file included from test/t/binary_visitor_1.cpp:2:0:\r\ninclude/mapbox/variant.hpp: In instantiation of \u2018T& mapbox::util::variant<Types>::get() [with T = int; typename std::enable_if<(mapbox::util::detail::direct_type<T, Types ...>::index != mapbox::util::detail::invalid_value)>::type* <anonymous> = 0; Types = {int, double}]\u2019:\r\ntest/t/binary_visitor_impl.hpp:180:9:   required from here\r\ninclude/mapbox/variant.hpp:724:20: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\n             return *reinterpret_cast<T*>(&data);\r\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninclude/mapbox/variant.hpp: In instantiation of \u2018T& mapbox::util::variant<Types>::get() [with T = double; typename std::enable_if<(mapbox::util::detail::direct_type<T, Types ...>::index != mapbox::util::detail::invalid_value)>::type* <anonymous> = 0; Types = {int, double}]\u2019:\r\ntest/t/binary_visitor_impl.hpp:187:9:   required from here\r\ninclude/mapbox/variant.hpp:724:20: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\ninclude/mapbox/variant.hpp: In instantiation of \u2018const T& mapbox::util::variant<Types>::get_unchecked() const [with T = int; typename std::enable_if<(mapbox::util::detail::direct_type<T, Types ...>::index != mapbox::util::detail::invalid_value)>::type* <anonymous> = 0; Types = {int, double}]\u2019:\r\ninclude/mapbox/variant.hpp:472:51:   required from \u2018static R mapbox::util::detail::binary_dispatcher<F, V, R, T, Types ...>::apply_const(const V&, const V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; T = int; Types = {double}]\u2019\r\ninclude/mapbox/variant.hpp:893:73:   required from \u2018static decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply_const(v0, v1, forward<F>(f))) mapbox::util::variant<Types>::binary_visit(const V&, const V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; Types = {int, double}; decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply_const(v0, v1, forward<F>(f))) = double]\u2019\r\ninclude/mapbox/variant.hpp:987:27:   required from \u2018decltype (V:: binary_visit(v0, v1, forward<F>(f))) mapbox::util::apply_visitor(F&&, const V&, const V&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; decltype (V:: binary_visit(v0, v1, forward<F>(f))) = double]\u2019\r\ntest/t/binary_visitor_impl.hpp:28:5:   required from here\r\ninclude/mapbox/variant.hpp:737:16: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\n         return *reinterpret_cast<T const*>(&data);\r\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninclude/mapbox/variant.hpp: In instantiation of \u2018T& mapbox::util::variant<Types>::get_unchecked() [with T = int; typename std::enable_if<(mapbox::util::detail::direct_type<T, Types ...>::index != mapbox::util::detail::invalid_value)>::type* <anonymous> = 0; Types = {int, double}]\u2019:\r\ninclude/mapbox/variant.hpp:493:45:   required from \u2018static R mapbox::util::detail::binary_dispatcher<F, V, R, T, Types ...>::apply(V&, V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; T = int; Types = {double}]\u2019\r\ninclude/mapbox/variant.hpp:900:67:   required from \u2018static decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply(v0, v1, forward<F>(f))) mapbox::util::variant<Types>::binary_visit(V&, V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; Types = {int, double}; decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply(v0, v1, forward<F>(f))) = double]\u2019\r\ninclude/mapbox/variant.hpp:994:27:   required from \u2018decltype (V:: binary_visit(v0, v1, forward<F>(f))) mapbox::util::apply_visitor(F&&, V&, V&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; decltype (V:: binary_visit(v0, v1, forward<F>(f))) = double]\u2019\r\ntest/t/binary_visitor_impl.hpp:68:5:   required from here\r\ninclude/mapbox/variant.hpp:713:16: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\n         return *reinterpret_cast<T*>(&data);\r\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninclude/mapbox/variant.hpp: In instantiation of \u2018const T& mapbox::util::variant<Types>::get_unchecked() const [with T = double; typename std::enable_if<(mapbox::util::detail::direct_type<T, Types ...>::index != mapbox::util::detail::invalid_value)>::type* <anonymous> = 0; Types = {int, double}]\u2019:\r\ninclude/mapbox/variant.hpp:401:44:   required from \u2018static R mapbox::util::detail::binary_dispatcher_rhs<F, V, R, T0, T1>::apply_const(const V&, const V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; T0 = int; T1 = double]\u2019\r\ninclude/mapbox/variant.hpp:477:80:   required from \u2018static R mapbox::util::detail::binary_dispatcher<F, V, R, T, Types ...>::apply_const(const V&, const V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; T = int; Types = {double}]\u2019\r\ninclude/mapbox/variant.hpp:893:73:   required from \u2018static decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply_const(v0, v1, forward<F>(f))) mapbox::util::variant<Types>::binary_visit(const V&, const V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; Types = {int, double}; decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply_const(v0, v1, forward<F>(f))) = double]\u2019\r\ninclude/mapbox/variant.hpp:987:27:   required from \u2018decltype (V:: binary_visit(v0, v1, forward<F>(f))) mapbox::util::apply_visitor(F&&, const V&, const V&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; decltype (V:: binary_visit(v0, v1, forward<F>(f))) = double]\u2019\r\ntest/t/binary_visitor_impl.hpp:28:5:   required from here\r\ninclude/mapbox/variant.hpp:737:16: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\n         return *reinterpret_cast<T const*>(&data);\r\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ninclude/mapbox/variant.hpp: In instantiation of \u2018T& mapbox::util::variant<Types>::get_unchecked() [with T = double; typename std::enable_if<(mapbox::util::detail::direct_type<T, Types ...>::index != mapbox::util::detail::invalid_value)>::type* <anonymous> = 0; Types = {int, double}]\u2019:\r\ninclude/mapbox/variant.hpp:407:38:   required from \u2018static R mapbox::util::detail::binary_dispatcher_rhs<F, V, R, T0, T1>::apply(V&, V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; T0 = int; T1 = double]\u2019\r\ninclude/mapbox/variant.hpp:498:74:   required from \u2018static R mapbox::util::detail::binary_dispatcher<F, V, R, T, Types ...>::apply(V&, V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; T = int; Types = {double}]\u2019\r\ninclude/mapbox/variant.hpp:900:67:   required from \u2018static decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply(v0, v1, forward<F>(f))) mapbox::util::variant<Types>::binary_visit(V&, V&, F&&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; R = double; Types = {int, double}; decltype (mapbox::util::detail::binary_dispatcher<F, V, R, Types ...>::apply(v0, v1, forward<F>(f))) = double]\u2019\r\ninclude/mapbox/variant.hpp:994:27:   required from \u2018decltype (V:: binary_visit(v0, v1, forward<F>(f))) mapbox::util::apply_visitor(F&&, V&, V&) [with F = const add_visitor&; V = mapbox::util::variant<int, double>; decltype (V:: binary_visit(v0, v1, forward<F>(f))) = double]\u2019\r\ntest/t/binary_visitor_impl.hpp:68:5:   required from here\r\ninclude/mapbox/variant.hpp:713:16: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]\r\n         return *reinterpret_cast<T*>(&data);\r\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ncc1plus: all warnings being treated as errors\r\nmake: *** [Makefile:100: out/binary_visitor_1.o] Error 1\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/a064940e2ce7e40ef5e4db5710b399c68a71be4b", "message": "REQUIRE_THROWS etc take an expression not a block\n\nThe first argument to REQUIRE_THROWS and REQUIRE_THROWS_AS is\ndocumented as being an expression and recent changes mean that is\nnow being enforced.\n\nhttps://github.com/philsquared/Catch/issues/823"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f9c265d7e7a188aa4437f534d4c0648af0118b51", "message": "Update bundled Catch to v1.9.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "narizhny": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/145", "title": "Wrong AccessModifierOffset", "body": "Code style and \".clang-format\" file don't match.\r\nWe need to change \"AccessModifierOffset\" option to -4, or change offset in files.\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/51fccd755b05ee9d3dec9da239acd15d0823c381", "message": "Add static_variant_cast, dynamic_variant_cast"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111490102", "body": "Because i have 2 versions of dynamic cast - for references and for pointers, but one version for static cast. Constness in both cases is taken from the original object.", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111490102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111495161", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111495161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "joto": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/136", "title": "Coverage report on travis doesn't work", "body": "See for instance https://travis-ci.org/mapbox/variant/jobs/188957587 . You have to expand the \"after_script\" to see this. The job itself doesn't fail, though.\r\n\r\nProtozero has the same problem with Python, but in that case the job fails.\r\n\r\n/cc @springmeyer ", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/88", "title": "Noexcept on operator=() is wrong", "body": "I think the `noexcept` on `operator()` [here](https://github.com/mapbox/variant/blob/c4e864cc122c4fcc9b1f7a8f68a34e465df9f922/variant.hpp#L644) is wrong. There are several operations involved which all might fail.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/84", "title": "Access via type", "body": "Our implementation of variant allows access via `get<type>()` even if the type appears several times in the variant. This can be potentially confusing and error prone, especially when type aliasing is involved. Say, you got a variant `variant<int32_t, int>`. Do you know what `get<int>()` will do? Does the architecture matter?\n\nWhat makes things even more confusing is the addition of special versions of `get` that unwrap `std::reference_wrapper` and `mapbox::util::recursive_wrapper` on the fly. And they get accessed using the underlying type. So having a `variant<recursive_wrapper<int>>` you can access that `int` using the somewhat magical `get<int>()`. What happens when you access a `variant<int, recursive_wrapper<int>>` using `get<int>()`?\n\nI do see the convenience these choices bring, but on the other hand, these could lead to really hard to find bugs. The upcoming standards \"solves\" the first issue by not allowing get-access through the types if the types are not unique. You have to use index-based access then, which we don't have. It doesn't have the second problem because it doesn't have those magic wrappers.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/84/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/83", "title": "Unify special cases for reference/recursive_wrapper", "body": "There are special cases for `std::reference_wrapper` and `recursive_wrapper` in two places. One is in the `get()` call, the other in `unwrapper` helper class used by the visitor apply functions. This looks to me like there should be a way to unify this code, so that there is only once place that has the special code used by `get()` and `apply_visitor()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/83/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/80", "title": "Implement swap.", "body": "In the current code there is no implementation for `swap()` which means `std::swap()` will be used. This should do the right thing (as long as the move constructor and move assignment do the right thing) and the [tests](https://github.com/mapbox/variant/blob/861faa8125ae7c2d9e41e33b3d5d97a17213c415/test/t/variant.cpp#L268-L300) show this.\n\nBut this solution is not optimal, because the default `std::swap()` will always do one move construction and two move assignments (in this case of the variant). If there is a more efficient `swap` for the type in the variant, it will not be used. The upcoming standard [P0088R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0088r0.pdf) describes the effects of swap as: \"if `index() == rhs.index()`, calls `swap(get<i>(*this), get<i>(hrs))` with `i` being `index()`. Else calls `swap(*this, hrs)`.\"\n\nWe might want to implement our own `swap` in the future.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/80/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/61", "title": "Noexcept on constructor", "body": "The constructor for `variant` is declared `noexcept` which is only true if the constructor for the underlying type is noexcept. Because we don't know which type that will be we can only mark the constructor noexcept if all underlying types have a noexcept constructor.\n\nhttps://github.com/mapbox/variant/blob/861faa8125ae7c2d9e41e33b3d5d97a17213c415/variant.hpp#L584-L590\n\nThere is a comment `// nothrow` in there. It is unclear what it means. Maybe it was meant to say that we expect the constructor to be \"nothrow\", but that really must be encoded in code.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/61/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/b3df87f6de5ba5f5955558c37adce3c39e022b1b", "message": "Change implementation of move constructor.\n\nThe new implementation is the same as in boost::recursive_wrapper.\nFixes #50."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/64596e3aa2c0f47ab3e74a50c5c49acd5c57f5d5", "message": "Rename parameter in destroy/move/copy helpers.\n\nRename from (old_)id to (old_)type_index for consistency with other code."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f285cb92548b8a01d204cc9eaeca820d10a487b6", "message": "More tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7c31806109f6c07237ee14a6209409639310107e", "message": "Fixed sentence in README."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b37b9a8e5c679daa228ae2c1d75bf1ed99aef3b0", "message": "Fix ref to issue."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a43ef1eed7f9dc4eb52fda4edb73ffec5e284650", "message": "Add more tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6e6eccf08ad64a63c10117b0be96a8e4b03237dd", "message": "Fix order of function attributes.\n\nClang++ needs this in c++14 version."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4f2fd32cbf21ba41b285fa8ab4c2e429def0555b", "message": "Add more tests for get<>() functions."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a6412b01731929f4194025499f3806cde9a4106a", "message": "Mark get_type_index() as deprecated.\n\nSee #73."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0511b66a5c386f96ebcd1614404a27662f21d3d6", "message": "Mark Jamroot file as \"inofficial\"."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5d45c2e436ff7d7a5177cff844898b1fd768fac0", "message": "Remove unnecessary type alias.\n\nThis looks like a leftover from the time when we didn't have std::result_of."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/93b25d0bcbe49c096a31234bc78b32fce5d5355e", "message": "Remove unused code."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4a9f2d64c45c5804b98dc97f4ad5f257f80705fe", "message": "Extend indexing of duplicate types test."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2e9124bf49b8ebaf5c175f7a6b0ccd06337e9f8e", "message": "Add doc about goal, other implementations and standards effort.\n\nFixes #45."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f68df9346e9cb8932a8e42cf1f3cb0f1816cbb1b", "message": "Simplify template code."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7f7c667f870541c208c07d99a9f2c22dfa1f32de", "message": "Improved compilation failure checks.\n\nExpected patterns are now as comments in the source code.\nBetter detection of failures.\nFixes #77."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d1e3b8aa33a2686899b040594e40a62ba8710c86", "message": "Run the binary visitor tests in several variants for better code coverage."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5d9845c5d387cc81f12857361864320e38a75d57", "message": "Try to test more in binary visitor test."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b9411c228d5c47e712727efa159d2feed0cc4bd8", "message": "Fix for the workaround in 86a78c2adfde1de718231ea8f95af4745e838779."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8805543147a28fac77f2728ef35e84e78d270ab7", "message": "Do not use basename's -s option.\n\nIt is not available on older Linuxes, for instance on travis."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/86a78c2adfde1de718231ea8f95af4745e838779", "message": "Workaround for GCC bug."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6b84ab5552af318dee8671a3c00f1920cf483414", "message": "Add some sizeof(variant<...>) tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/16416618faeae5211f01b9b2eb306639c8509c6c", "message": "Test more branches in binary visitor code."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b16ceaca633c21eafb0c7838482a6136edbe0b9c", "message": "Add more tests to exercise binary_dispatcher_lhs."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/87a85ae574065cc54c96201c9f6bff2a76b2783d", "message": "Add tests for binary_visitor."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/92fffdebb669336aa6488c59ea2cf273227c84f6", "message": "Deprecate static_visitor.\n\nOld versions of the code needed visitors to derive from static_visitor.\nThis is not needed any more and marked as deprecated. The static_visitor\nclass will be removed in future versions."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/38ac1bd541846a26e3ad7f91c651837a692b0541", "message": "Add deprecations section to README."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c31cb12730bac7508e1211e823c37e8b21ad6e28", "message": "Test and document handling of references.\n\nStoring references hasn't worked before. This commit documents the fact, adds a\nstatic check for it and tests this case. We also test the recommended\nalternative, which is to use std::reference_wrapper."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a343be8887c4823c8370a68a26de0bad08c9b018", "message": "Remove spaces and end of line."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b72c68b2474a2f446b4cc4ebbf13bf0bed3f3992", "message": "Add missing test file to gyp build."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/908e28847e9db8a2c43c6ca376f06195a51546a9", "message": "Add more tests for visitor."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f7b63cc1501bf9d9f740e9a8957a25bc9be5f1ca", "message": "Add missing braces in if statement (for consistency)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2b525d887c3ea56c1eb75fb62787c82559d10637", "message": "Add missing forwards."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0d8fb2ee8ae45f971b8956d49ba425043e169ea1", "message": "Some more tests around visitors."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f13a90c71f806e5d1703bc387205e28190a5c572", "message": "Add test for no_init."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9afd6406065440e02b6bf42db4633b815846db0d", "message": "Check for specific exception in tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/93953dd30e4f537c3aa059042e459a7978be2b9e", "message": "Add configuration for YouCompleteMe Vim module."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b12a0f438cf0292196ca9c305bc305a56a2f406e", "message": "Make C++ standard used configurable, also test C++14 on travis.\n\nThe C++ standard used when compiling can be set in the environment\nbefore calling make: CXX_STD=c++14 make.\n\nSee #66."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0e42ef1adb78d4364452c144cf01ab9e03741357", "message": "Mark optional as deprecated.\n\nSee #64."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ccd8a27ba0f270278e89d672fc0a2f3ed7dc858e", "message": "Fix operator<().\n\nThe comparison operator was using the wrong order when variants with different\ntypes in them were compared. Both boost and the upcoming standard order the\ntypes from left to right, but our implementation orders them right to left.\n\nBoost has the function `which()` returning the index of a type in the typelist\nas do we. (The upcoming standard calls this `index()`). But the comparison\noperator was using `get_type_index()` which orders the types the other way\nround."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8e4ad8acf454adcdf7517264a4719f2a86511731", "message": "Add complete set of comparison operators and test them."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/272f91c0962f001021e35811d9bf934fcb2476f4", "message": "Add operator!= and test equality operators."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e0fdbe9ee4a5a16ed07693322359e05e301d587c", "message": "Build unit tests with debug flags."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/fd123755fda3e94fa9d2212a39393a31c186dec4", "message": "Fix test using nullptr."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0212940163acd107db798fab0e569acba8daaf3d", "message": "Add some tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/861faa8125ae7c2d9e41e33b3d5d97a17213c415", "message": "Fix script name in travis script."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/71d18e8aeddcd48b6a8bfa3c332621c32999a6ac", "message": "Simplify Makefile."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cee5a53cfee65387a0509e38b7cc13cf88470cd6", "message": "Run compilation failure tests in travis."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e392bdf26487da6a5b941ed6ffbfd8be0bb5d5a0", "message": "Add static_assert to check type list is not empty."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ddb9bf2e71b3ba28ef43a8c3be62d2dec3df3941", "message": "Nice message when trying to default construct variant without default constructor.\n\nAdds a static_assert in the default constructor to check the first type in\nvariant is default constructible. Not strictly necessary, but makes for a\nnicer error message. Adds test to check for this."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5bb401d312f1ffa2c0285349796a0985dc4c6df2", "message": "Factor out commonly used \"first_type\" type."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/826e8d7af8dc7e458886ba1e3de0a9dc0960b551", "message": "Move static_max and variant_helper into detail namespace."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5eb76a1b1c3f0ee1eea4f4126b7d00c82e7bddf1", "message": "Bugfix: Duplicate call to destructor in set<>() if constructor throws.\n\nFixes #21."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/079298b08402bb1e03abf59eed3cefa9440a0fe9", "message": "Add test case for issue 21.\n\nSee #21."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0c7e4e2c6908d988e216a6a953bf2342ebcac415", "message": "Add script to check for compilation failures.\n\nThe script will try to compile tests and report if they don't fail with the\nright message. Not yet integrated into travis.\n\nSee #43."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c3c7fd3354facce978cf12d2a9a3ad32e8560ca2", "message": "Add missing test to gyp build."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7e6cfd749eb98e693c12934b15cddf9520906141", "message": "Remove static declaration from functions that don't need it.\n\nFixes #56."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0c8fbd4319f6c699cf52610dad855e8c1b61317a", "message": "Change dispatcher to work without runtime error.\n\nThis changes the way the compile time recursion works in the different\ndispatcher classes. The recursion is ended one step earlier than before. This\nway we don't need the code throwing an exception any more that's never called\nanyway."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7e2c6873dbbec540a4ca35d7921f9f4ce58508ae", "message": "Use new bad_variant_access exception instead of runtime_error.\n\nSee #48."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4a6b7b01c3547cfbf4535f390d5bd8e95074d4c1", "message": "Update to newest catch.hpp v1.3.2."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a9ac914746cf5303a196928ef9093082517bf2b7", "message": "Remove commented out test."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6eb8fea08a22b9040011c20f998e1e77bc78e188", "message": "Define recursive_wrapper methods inline and add some docs."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b55877fd3fde2f8087ff49bd3e736b3c34321ff0", "message": "Add back missing copyright info from boost original."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9f1ff005df98ea4bc979c4195a69a2625c4cf052", "message": "Add some recursive wrapper tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/46622cbc920f2911c6dd8a285574a4f5f8c66f5f", "message": "Misc cleanup in recursive_wrapper.hpp."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0a4af4f853900157c29ffdbe503d3c96cbef0e4d", "message": "Remove old Windows build script."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/48b565c1afd5d2481890878b3386417c52220199", "message": "Use int instead of double for testing optional class.\n\nThis avoids equality comparisons on doubles which might not work in all cases."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d29ebd5f4f3872fff41d0afeb16730f0df584ff1", "message": "More tests for optional class."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/054d156086237fc0fb68feebbbebb698265ae532", "message": "More consistent code formatting."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f87f23130a054061131aa922b49fd26a7bcf85ed", "message": "Remove files created for coverage report on make clean."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7883dd1cdee1650a1d8520fe64da88f4d9e7ed8c", "message": "Remove confusing comment.\n\nFixes #49."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b19b7188d5f3b4bbbb3467c4b8d4d94359bc56a4", "message": "Update coverage badge link to make coverage.io happy."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6ab1c69fb3b626d5e14f2e8015287deb457443d8", "message": "More build fixes."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/47f391ab1c1443a4f753b4888bec5862d62b0358", "message": "Add test/include to gyp configuration."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ddf3bc9c8b4b67db1efdef35bf06c3a292a7ff82", "message": "README updates and some small cleanups."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/785b3aea1ef6d5961e47be954c337818fb94ab34", "message": "Git clone quietly in appveyor build."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f136eb0b3e95fd7b50e14cfec50f8df0b4383c18", "message": "Reorganize unit tests."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/1d01e52ec943ab5312280ccce7887894c5cc08bf", "message": "Cleanup includes."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c372b32433057940318ae70669fd9aaedecdc212", "message": "Fix typo."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/53a43c921c89e1e336922d1f00c6abd3f91b4dce", "message": "Enable even more warnings."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d9961ec38f9453ec55783a49c45c89ba34705c85", "message": "Add -pthread option so that bench-variant-debug compiles."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ca7bc1a3a55822ead6323c618b5ae98e014e5679", "message": "Add missing dependencies on variant_io.hpp recursive_wrapper.hpp to Makefile."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/007dbb8119f5c2698ca39f162733a3d03a269a5f", "message": "Rname variant_hello_world to our_variant_hello_world.\n\nShows better the analogy to boost_variant_hello_world."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8aa4fd265dd8758fbc365be2e2b7ea568ad0ad7b", "message": "Make test/[boost_]variant_hello_world.cpp more similar."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/fae2e58bc4afbc1cbf77bff2e9605183d6dd44bb", "message": "More consistent formatting."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9e1a1be2e565885bba14f81f9427a2682d2f98eb", "message": "Take output of result out of timed section in benchmark."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8773150f619b6226cc54d7470af1e383c9c029d5", "message": "Remove minor differences between to benchmarking programs.\n\nBoth programs do the same thing. One using recursive_wrapper, one using\nstd::unique_ptr, but they had some minor differences not related to the\ndifferent types used."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/836b40a2c9e40c5a58bf76783abe25e48c2ade9e", "message": "Fix includes."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/24e9ab1437afc36d3829b84a56b2fae45cd97ea1", "message": "Cleanup include guards."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/be21e73683933c6e16c0251f338674e5e3664c7d", "message": "Consistently use space after \"template\" keyword."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8ddb0dbbf2fa4b82da5cb6dc104bf2921bc1c101", "message": "Consistently use upper case for first character of template parameters."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e130cfe420a31266b5317ea95301bb3aedfbbf54", "message": "Use test runner main function supplied by catch.hpp.\n\nSee #46."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7682ee49123c1f03c8f7024d06d8d463dbc31f2e", "message": "Remove \"hard-coded\" version 100.\n\nFixes #47."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/849d224ab3911442c92d511e825b1e8bb6195cfa", "message": "Update catch.hpp to current version 1.3.0."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a0feef10035c840f59a15bb6cd0daadbe001f56d", "message": "Consistent spacing around ref, refref, constref."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9491c049de8afb5867ac7af9b03468f50e19e99b", "message": "Consistent spacing around ...\n\nNo space before, one space after."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ad7ec321239b0fd96c9ee900d133071411c486ec", "message": "Updated link to MSDN."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2206b65f341900ab87a34d31340ca91a5d62a293", "message": "Add test for swap."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0326a403b9cd628656b98ecaaa23da7b9700c1a5", "message": "Various test cleanups."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/fe5627a1f22f9fdf700338bb9c4ce59e9e59ad40", "message": "Removed comment that doesn't apply any more.\n\nWe still have the operator<<, but it is in a different header which we include\nhere. So all is good."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b01b701f1c405d52ce097943506dc85405c4f10c", "message": "Remove using directive from tests.\n\nForces us to be very explicit in all we do in the tests which hopefully means\nless chances of getting something wrong."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34894120", "body": "data_t and helper_t still in there.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34894120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34894483", "body": "format should be \"T const&\"\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34894483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34959837", "body": "But what if the real type in the variant is not a POD? Then this will not call the right swap.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34959837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47206596", "body": "Currently `class variant` has data members `std::size_t type_index` and `data_type data`. Here `sizeof(data_type)` will be the size of the largest type the variant includes. But together they will be at least `sizeof(size_t) == 8` larger.\n\nPlus there is the alignment issue:\nSay we have a `variant<bool, int32_t>`, it will be 16 bytes long, 8 for the size_t and 8 for the `data_type`, although `max(sizeof(bool), sizeof(int32_t))` is only 4. So for types smaller than 8 a smaller `type_index` would buy us something.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47206596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47232892", "body": "Might have something to do with \"integral promotion\" as the new test case shows.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47232892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52220753", "body": "Just makes the code simpler I'd think. It looked to me like something left over from earlier version where the `static_visitor` class did more than it does now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52220753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161962167", "body": "`operator<<` has been moved to `variant_io.hpp` a while ago in 24dcab23.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161962167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161994825", "body": "I can not reproduce this. I guess this has been fixed as a result of 39a631394e185f527159164c8b0fffae755b8512.\n@lordnn can you confirm this?\n@artemp: anything to add? can we close this and #5?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161994825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162000986", "body": "@hjanetzek just tried. works with that, too.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162000986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162002115", "body": "@springmeyer With hard coding I meant that the comment indicates that it always has to have version 0.1.0 (because only that will result in 100) and the test checks that it has that version. I guess at some point we want to change the version number than the comment will be wrong and the test will fail.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162002115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162003219", "body": "A custom exception type would allow a user to differentiate between an exception thrown by our variant type and an exception that is somehow propagated from a type wrapped in the variant. I am not sure this is strictly necessary, but it would be cleaner in any case.\nBefore I change this: Is there any code checking for this exception somewhere? @artemp ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162003219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/163342044", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/163342044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165780048", "body": "I guess this is okay as long as it is properly documented. It is just one of those things that can trip you up, it is not obvious what is supposed to happen here. I'll document the current behaviour.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165780048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165780765", "body": "I just realized setting the `operand.p_` to `nullptr` leaks the memory allocated in it, so that's definitely not okay. If we use `swap` in both cases, we get defined behaviour and no leaks cheaply. If we use `nullptr`, we get a bunch of special cases which might be more efficient or not, hard to say. But definitely more complex code. In any case this should be consistent for move constructor and move assignment, otherwise that would be very suprising for the user.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165780765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170597965", "body": "There are no decisions yet if and how mapbox::variant will change. The collection above is meant as a basis for that decision, but there are more details we need to look at (especially current use of mapbox::variant) before we can see in what direction it should develop. I think that in the long run everybody probably wants to migrate to a std::variant, but it could be many years before that's widely available.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170597965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171302131", "body": "Documented in 6eb8fea08a22b9040011c20f998e1e77bc78e188.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171302131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171306795", "body": "Looks good to me. But there is more we can do here. All except one of those cases where `select_type` is used access index 0. They can all be replaced by a typedef:\n\n```\nusing FirstType = typename detail::select_type<0, Types...>::type;\n```\n\nor\n\n```\nusing FirstType = typename std::tuple_element<0, std::tuple<Types...>>::type\n```\n\n@artemp ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171306795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171312268", "body": "Looking at the code I find 6 free functions, all at the end: Four versions of `apply_visitor()` and two versions of `get()`. If I understand you correctly, all these functions would be declared `inline`, but not `static`. All other functions declared `static` are in classes, so they must stay the way they are.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171312268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171319782", "body": "Fixed in 6eb8fea08a22b9040011c20f998e1e77bc78e188.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171319782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171326680", "body": "@lightmare So, just remove the `static` in the four `apply_visitor()` declarations?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171326680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171345676", "body": "I have create a new class `bad_variant_access` now derived from `std::runtime_error` and use this in the `get<T>()` functions. This is backwards-compatible. User code using this should switch to the new type and then we can later on switch the parent class to the more correct `std::logic_error` as in the upcoming standard.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171345676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171429522", "body": "I have added a test case for this still unfixed issue.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171429522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171586694", "body": "Looking at this some more I don't see how this could be avoided. The id is only available at runtime, so we have to iterate at runtime.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171586694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171595811", "body": "This is not an issue any more in the current code.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171595811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171614979", "body": "In the current code there is no implementation for `swap()` any more which means `std::swap()` will be used. This should do the right thing (as long as the move constructor and move assignment do the right thing) and the [tests](https://github.com/mapbox/variant/blob/861faa8125ae7c2d9e41e33b3d5d97a17213c415/test/t/variant.cpp#L268-L300) show this.\n\nBut this solution is not optimal, because the default `std::swap()` will always do one move construction and two move assignments (in this case of the variant). If there is a more efficient `swap` for the type in the variant, it will not be used. The upcoming standard [P0088R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0088r0.pdf) describes the effects of swap as: \"if `index() == rhs.index()`, calls `swap(get<i>(*this), get<i>(hrs))` with `i` being `index()`. Else calls `swap(*this, hrs)`.\"\n\nThe current code contains a `direct_swap()` function left over from before which is not used. It should probably be removed.\n\n@artemp any opinions?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171614979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171640825", "body": "What gets constructed is the `target_type`, not `T`. Usually this will be the same, but it doesn't have to be if there is implicit conversion going on.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171640825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171652098", "body": "@lightmare not sure I understand what you mean here. Maybe you can create a real pull request so we can better see what you mean.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171652098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171654938", "body": "@tomilov: interesting approach. But I am not sure it buys us anything. Yes, there is no recursion, but the price is creating this \"lookup table\". I guess it all depends on the code the compilers generate for the different options. Because in most cases types inside variants are probably simple types without any destructors I would expect that most of the code vanishes in the compiler in both cases. Have you looked at the generated assembler code?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171654938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173589259", "body": "Our `optional` implementation is very incomplete compared to the [upcoming standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3848.html), `boost::optional` or [this implementation](https://github.com/akrzemi1/Optional). Do we want to keep working on our own?\n\n/cc @springmeyer \n\nSee also #63.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173589259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173854247", "body": "Optional is deprecated. See #64.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173854247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173855246", "body": "I have added two tests running clang 3.8 and g++ 4.9 in c++14 mode to the travis config. Of course we could do this on all compilers, but it would double the amount of tests to be run for not that much gain.\n@springmeyer re-open or change .travis config yourself, if you think we need to check more variations.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173855246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173862002", "body": "@artemp @springmeyer I have not just checked in this code, but created the pull request, because it does change current behaviour of `variant` which might break some programs, so I want more eyes on this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173862002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175103355", "body": "@lightmare: We very likely will not support references at all. They have not worked in the past and it is unclear to me, why there are a few places in the code using `std::remove_reference`. I have added #70 to fix this.\n\nLooking further, I do think we want proper `noexcept`s at some point, but this needs a lot more tests to make sure every combination of constructors, assignments, swaps, etc. is handled correctly. Extra problem here is that a wrong `noexcept` declaration will not be detected by the compiler.\n\nI think the way forward is to first remove `noexcept` everywhere. We should only keep it on (or add it to) functions where it is a) obviously correct and b) any implementation change we might do in the future will preserve it. This way we get to a correct interface fast. Adding more `noexcept`s later is then backwards compatible and can be done piece by piece. The drawback is that this is an interface change so it might break something in users of variant. On the other hand the wrong `noexcept` were always wrong anyway and nobody noticed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175103355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175669275", "body": "@lightmare re your first comment: Just tested this, and yes, it works with `F` alone, but I think `F&&` makes the intention more clear here. Is there any drawback to using `F&&`?\nre your second comment: I have also thought of pulling the R out. But maybe we could move the derivation of R into the dispatcher function and that might even be better. Not sure yet, have to try.\n\nAnyway, I merged the `visitor-no-copy` branch now and we can try out these things separately.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175669275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175710558", "body": "As per chat with @artemp I committed the changes to master without the wrong removal of std::remove_reference and close this pull request now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175710558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175747260", "body": "I we are only thinking about the size of the index, I think we should just go with `int8_t`. I can't think of a use case where more than 255 types are needed in a variant except maybe very crazy autogenerated code. But even then our implementation would be very costly in compile time and run time. So I think we can safely ignore that case.\n\nUsing an `int8_t type_index` instead of `size_t` could lead to considerable space savings for types like `std::vector<std::variant<char, uint16_t>>`, so I think this is worth pursuing.\n\nWhat I don't know is whether this could impact runtime negatively. Modern processors like their 32bit or 64bit integers, so there might be a penalty when using an `int_8`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175747260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175794877", "body": "@lightmare if I see the pattern of a function parameter declared as `T&& t` and the parameter is then only used in `forward<T>(t)` I stop thinking and just know that this parameter will be forwarded perfectly and I am done. I don't need to know how the function is called or how the function looks, that this call forwards to. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175794877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176170956", "body": "We are currently going through some rapid development and changing quite a lot of things. Once this has settled down a bit, we'll start with proper release management. In the mean time I recommend staying with the known version you have. It would also be helpful (for you and for us) if you test our master version occasionally in a branch of your code to find problems early.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176170956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176354826", "body": "I am reopening this, because I think there is a lot of valuable content here should be documented inside the repository. If it is just in a closed issue, nobody will ever find it again.\n\nI will add some of this to README or in some doc directory or so and then close this again.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176354826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176355760", "body": "It think this is still relevant. I will look at it tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176355760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176356403", "body": "This should be an easy change once we have a more complete set of tests.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176356403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176769580", "body": "Closing. Further discussion in #80.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176769580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176776514", "body": "Currently there is still the public `get_type_index()` function, so this internal index is visible outside. I suggest we mark this function as deprecated and remove it in 2.0 and then revisit this issue. @artemp?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176776514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176948897", "body": "I changed the implementation of the move constructor to what is used in `boost::recursive_wrapper` in this case. I believe this is the right implementation, because it does a move construction of the underlying type, so it is as close as possible to that type.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176948897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176959574", "body": "I agree, the tests were incorrect, that's why I removed them. I am not saying the former implementation was wrong, but, as I explained above, I think the new one is better.\n\n@artemp: do you have an opinion here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176959574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177871777", "body": "Not pretty, but if it is necessary, it is necessary.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177871777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177892147", "body": "I don't feel comfortable having such complex code (especially in areas with compiler problems like #86) without any tests. And it is really easy to get the implementation of the function and the `noexcept()` clause out of sync. How are we going to test this?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177892147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178007925", "body": "The best I can come up with is:\n\n``` c++\n// True if Predicate<F, T> matches for none of the types T from Ts\ntemplate <template<typename, typename> class Predicate, typename F, typename... Ts>\nstruct static_none_of_binary : std::is_same<std::tuple<std::false_type, typename Predicate<F, Ts>::type...>,\n                                            std::tuple<typename Predicate<F, Ts>::type..., std::false_type>>\n{};\n\ntemplate <typename... Ts>\nstruct is_unique;\n\ntemplate <typename T1, typename T2, typename... Ts>\nstruct is_unique<T1, T2, Ts...> {\n    static constexpr const bool value = static_none_of_binary<std::is_same, T1, Ts...>::value &&\n                                        is_unique<T2, Ts...>::value;\n};\n\ntemplate <typename T1>\nstruct is_unique<T1> {\n    static constexpr const bool value = true;\n};\n```\n\nAt least the inner check isn't recursive this way. We'd probably need to benchmark compiling to be sure, though.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178007925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178437772", "body": "If I understand correctly, recursive_wrapper was implemented specifically because it was faster than using unique_ptr. Building recursive_wrapper on top of unique_ptr would defeat that purpose. On the other hand if the recursive_wrapper implementation was incomplete, that's not good either\n\n@artemp can you shed some light on this?\n\nOne other thing to keep in mind: The implementation of recursive_wrapper was basically taken wholesale from boost, just ported to C++11. Keeping compatibility with boost is one of our goals here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178437772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178596996", "body": "Could we keep the discussion in this issue to the question it was started with? It is hard enough to keep track of all the different problems we have as it is.\n\n@artemp what do you refer to in the sentence \"perhaps this should go into 1.1.0\"?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178596996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194767925", "body": "I think this is not fixable if I understand the error correctly. We want to derive our exception class from std::runtime_error which is a virtual class. But this being a header-only library there is no way to define the methods of our class anywhere but in the header. There is no `.cpp` file to define them in.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194767925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194831474", "body": "See #48. I specifically used `std::runtime_error` to be backwards compatible with current user code that might check for it, but I believe this should be `std::logic_error`.\n\nAs for your proposed change: I don't think making exceptions more efficient is really important, but otherwise that change looks okay to me if we are sure we always want a fixed string as the message here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194831474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194833825", "body": "The implementation for `==` is okay. It is outside the scope of `variant` to \"fix\" equality comparison on floating point types. If you are putting floating point values into a variant, you should know not not use `==` on it.\n\nBut we should not use this in our tests. I had removed floating points from our tests for this reason:\nhttps://github.com/mapbox/variant/commit/48b565c1afd5d2481890878b3386417c52220199\n\n@springmeyer What did you compile to get this error? Did a floating point comparison creep back into our test code?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194833825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "daniel-j-h": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/131", "title": "Hashable should take type index into account", "body": "Hashing a variant should take the type index / `.which()` into account in addition to the underlying hash\r\n\r\n- https://github.com/mapbox/variant/blob/02bd1ac4c07e6db9fe0f01267853e43b41637b74/include/mapbox/variant.hpp#L1002-L1011\r\n- https://github.com/mapbox/variant/blob/02bd1ac4c07e6db9fe0f01267853e43b41637b74/include/mapbox/variant.hpp#L536-L544\r\n\r\nWhy? Because of the edge case where the underlying hash is the same but the type index is not.", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/127", "title": "Checks Concepts - Error Messages", "body": "While working on https://github.com/mapbox/variant/pull/126 I tested what happens if `Ts` are not Hashable.\r\nTurns out the error messages are pretty bad - as expected.\r\n\r\nThis is true for all features relying on the underlying types. Could e.g. be comparing variants for equality and then variant's `operator==` fails to compile since the underlying types are not comparable.\r\n\r\nHere is what we could do: emulate Concepts via Expression SFINAE and use them to provide beautiful error messages. Here is a first example of how this could look on the Hashable side:\r\n\r\n```c++\r\nstruct hasher\r\n{\r\n    template <typename T, typename = void>\r\n    struct is_hashable : std::false_type {};\r\n\r\n    template <typename T>\r\n    struct is_hashable<T, decltype((void)std::hash<T>{}(std::declval<T>()))> : std::true_type {};\r\n\r\n    template <typename T>\r\n    std::size_t operator()(const T& hashable) const\r\n    {\r\n        static_assert(is_hashable<T>::value, \"type is not hashable\");\r\n        return std::hash<T>{}(hashable);\r\n    }\r\n};\r\n```\r\n\r\nNow error messages are down to\r\n\r\n    ./include/mapbox/variant.hpp:547:9: error: static assertion failed: type is not hashable\r\n         static_assert(is_hashable<T>::value, \"type is not hashable\");\r\n\r\ninstead of coming from deep down in the stdlib's btree implementation just because you tried to put a variant into an unordered set. Similarly this would work for equality etc.\r\n\r\nNote: I'm not up to date on how far Expression SFINAE support is in Microsoft's VS, a couple of years ago is was a no go. Just something to be aware of. On the GCC / Clang side we're good.", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/9ac8978f5125182ac1bd9a1b68533bf9695f7289", "message": "Adds a test for polymorphic lambdas in match, resolves #140"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d0266436b18ea3b1f15c8a244985b57a0a2b3770", "message": "Adds Documentation for Readme, resolves #98"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/720c23736bb318937d0f53a413a617ff05040b73", "message": "Implements Pattern Matching for Sum Types via `.match` Member Function.\n\nMember function `.match` for accepting an arbitrary number of lambdas\nbuilding a single functor out of the lambdas for visitation.\n\nThis mimics pattern matching as known from languages like Haskell,\nand works with C++ lambdas for convenience. In fact lambdas are the\nprimary if not only use-case for this at the moment.\n\nUsage:\n\n    variant<T, U> v;\n\n    v.match([](T){ cout << \"I'm a T\"; },\n            [](U){ cout << \"I'm a U\"; });\n\nNote: you can use lambda captures (e.g. `[&](T){ ts += 1; }`) to\ninteract with the outside easily.\n\nReferences:\n- https://www.haskell.org/definition/haskell2010.pdf 3.17\n- https://doc.rust-lang.org/book/enums.html\n- https://doc.rust-lang.org/book/match.html\n- http://dl.acm.org/citation.cfm?id=2384686\n- http://stroustrup.com/OOPSLA-typeswitch-draft.pdf"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/97d0379f0afc87cd74a10be56fbccfa04785f568", "message": "Makes variant<Ts...> hashable iff Ts... are hashable, closes #125"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4d462f27b2d852f66a3769e5983691c0f9233c9e", "message": "Adds C++14 SFINAE Test"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2275a61974aaf117fa8d08c08d640ffd05935db8", "message": "Removes ::type Usage"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d09188640b6d5a637f391108f849a962d02dbb40", "message": "Provides Convenient Lambda Overload Visitor Interface, resolves #113.\n\nSee https://github.com/mapbox/variant/issues/113 for details.\n\nThis provides a `make_visitor` function taking lambdas and creating a\nvisitor functor out of it.\n\nThere are three points to conder here:\n\n1/ Eventually we want to provide a convenient member function\nso that we can plug in lambda overloads directly as in:\n\n```c++\nvariant.match([] (Response) { return \"ok\"; },\n              [] (Error)    { return \"error\"; });\n```\n\nat the moment we still have to:\n\n```c++\nauto visitor = make_visitor([] (Response) { return \"ok\"; },\n                            [] (Error)    { return \"error\"; });\napply_visitor(visitor, variant);\n```\n\n2/ At the moment we copy the lambdas. This is fine and follows the\nstdlib but we could take them as forwarding reference instead.\n\n3/ Maybe we should consider edge cases, such as member function pointers\nand provide specializations accordingly. The primary use-case is lambdas,\nthough."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3acecee113cbf642def664e583489c53ae7e84a4", "message": "Rip out custom select_type in favor of tuple_element\n\nThis rips out the custom select type implementation in favor of the\nC++11 conforming std::tuple_element. Note that std::tuple_element is\nalready included by the utility header, which includes the tuple header\nitself. We only add the tuple header to be on the safe side here.\n\nI made sure the tests via `make test` work; from `make bench` I can not\nreally see a difference, as the values are so small."}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/142", "title": "Failing Test Case: std::move-ing out of variant", "body": "@anandthakker and I just had a discussion about move-ing types out of a variant.\r\n\r\nThink:\r\n\r\n```c++\r\nvariant<Container1, Container2> v;\r\n\r\nv.match([](Container1&& c1) { },\r\n        [](Container2&& c2) { });\r\n```\r\n\r\nWhich does not compile.\r\n\r\nI think the issue is [this type alias](https://github.com/mapbox/variant/blob/916139a2e51e125816efce6e19d428385601273f/include/mapbox/variant.hpp#L190) (and related), which do not take rvalue refs into account.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/130", "title": "Promotes Variant to mapbox:: Namespace \u2014 Closes #104", "body": "For https://github.com/mapbox/variant/issues/104 - cc @artemp @jfirebaugh\r\n\r\nIn a future version we want to remove the `mapbox::util::`\r\nnamespace. Until then we provide both adding a deprecation\r\nwarning to the readme.\r\n\r\nImplementation detail: we make the util namespace an `inline`\r\nnamespace - otherwise users could notice us changing the\r\nspecific namespace in which our templates were declared in.\r\n\r\nThe downside here is we can't add a deprecation pragma since\r\nthen the `mapbox::` namespace would contain it, too.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171330704", "body": "Yes, as long as they are not fully specialized. Or be explicit and mark them inline nevertheless.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171330704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178061883", "body": "Great! Feel free to customize it to your own needs (e.g. the osrm 80 col. limit seems limiting in my opinion). It's more important to have a style to rely on than what exactly it looks like.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178061883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/183096889", "body": "Yes, the comment solution is what I'm also usually doing. Integration via `vim-clang` is also great for vim/neovim!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/183096889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212606836", "body": "Thanks for this release, we're using it in osrm-backend already without problems so far!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212606836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/215064910", "body": "Yes please. That's the reason we're [pointing to the Boost.Variant docs](https://github.com/Project-OSRM/osrm-backend/blob/master/include/util/json_container.hpp#L47-L63) for our users.\n\nThere are differences between Boost.Variant and mapbox/variant that are not documented (e.g. member function vs free standing `get`, no `is<T>` in Boost.Variant, and so on). It would be great to document not only the usage but also the differences to popular alternatives such as Boost.Variant.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/215064910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/217857777", "body": "/cc @TheMarex OSRM should probably follow this change here and install to $prefix/mapbox/ (after first checking if the user already has variant installed) and not $prefix/variant as it's currently done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/217857777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88733538", "body": "This got seriously out of hand - not sure what to do about it, though:\n- We need the `auto fn() -> decltype(expr) { return expr; }` pattern to support C++11, therefore we have to repeat `expr` twice. Once for the function's body, once to deduce the function's return type.\n- All the expression does is `return dispatcher<Lambdas, Self, ReturnType>::apply(*this, lambdas);` - we could introduce type aliases in the function body but the `decltype()` part still has to be a single expression\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88733538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88742362", "body": "Um. Ha. Yes. Thanks for catching this ;)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88742362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/92792807", "body": "Why `-Wno-unsequenced`?\r\n\r\nUnsequenced effects are an indicator for Undefined Behavior --- at which source location did this trigger?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/92792807/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99356419", "body": "Is an `unsigned` really needed? Shouldn't a `uint8_t` be good enough as outlined in the ticket?\r\n\r\nAlso should we `static_assert` that users never use more types we can index?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99356419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/109151793", "body": "`lhs ,(void) rhs` required to prevent user overloaded `operator,` to trigger", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/109151793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111481274", "body": "Why do we need a result_type here but not above?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111481274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111481499", "body": "The formatting is a bit weird, did you use clang format?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/111481499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124212335", "body": "Is there a reason you're leaving out the respective assignment operators?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124212335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/126246887", "body": "Should we document all of variant's api here? For example there is an unchecked get, a function valid, and others. Related to that: should we document that get may throw an exception on error?\r\n\r\n(Btw not sure I'm the right person to review or make decisions here, all I did was implement the convenience match function and update the docs with some examples :P probably @artemp is good to tag for these kind of things)", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/126246887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145756811", "body": "I think you forgot `check_{1,2}` here", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145756811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145757254", "body": "Why do we need this with `type = void`?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145757254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lightmare": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/118", "title": "non-static variant::visit", "body": "I'm creating this separate issue to keep the discussion in #113 clean.\n\n> @artemp Because variant::visit doesn't modify internal state and making it static gives compiler some hints on how to generate binary code. Why are you thinking it shouldn't be static ?\n\nWhat hints? Visiting a non-const variant _can_ modify internal state (e.g. comparison operators can give different results after such visit; edit: that's modifying external state, actually).\n\n`visit` is a static member function template only by syntax. Its first argument is always a reference to the class it's defined in. That's identical to non-static member functions under the hood.\n\nWhy this:\n\n``` c++\ntemplate <typename F, typename V>\nauto VARIANT_INLINE apply_visitor(F&& f, V& v) -> decltype(V::visit(v, std::forward<F>(f)))\n{\n    return V::visit(v, std::forward<F>(f));\n}\n```\n\ninstead of this:\n\n``` c++\ntemplate <typename F, typename V>\nauto VARIANT_INLINE apply_visitor(F&& f, V& v) -> decltype(v.visit(std::forward<F>(f)))\n{\n    return v.visit(std::forward<F>(f));\n}\n```\n\n// ignoring for now that `V` should be forwarded as well\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/5141d8d21a5b648e9fef879bfc12b29ffac7288d", "message": "remove useless and/or dubious compiler flags\n\n-D_FORTIFY_SOURCE has no effect under -O0\n    And there's nothing in this repo that _FORTIFY_SOURCE would check.\n\n-fwrapv is a code-generation option\n    Variant, being a header-only library, should work with or without\n    this, and indeed will, because it doesn't rely on signed overflow\n    behavior. For the sake of testing, it makes more sense to test in\n    standard-compliant conditions, i.e. without -fwrapv.\n\n-Wsign-compare is already enabled by -Wall -Wextra\n\n-Wformat-security can be enabled by -Wformat=2\n\n-Wno-unsequenced is unacceptable, unless there's a strong reason for it\n    Note that any warnings suppressed here will pop up in user code\n    using the library, and this one in particular should not be casually\n    suppressed.\n\nThe rest of CLANG_WARNING_FLAGS are redundant, as these warnings aren't\nenabled by default, nor by -Wall -Wextra."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4febf973c2a0fc297869d78fc82368a16ee7f4fb", "message": "avoid expensive instantiation of tuple constructor in noexcept"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2c7ddecdb7ec3b1c1a6bc1797528375e513b7ab0", "message": "use C++17 disjunction for no-references and one-convertible tests"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a1df843200e4e4b3965187cac335281c3784d11b", "message": "ad-hoc recursive_wrapper_traits for is_nothrow_destructible\n\n- suggested by @tomilov\n  https://github.com/mapbox/variant/issues/86#issuecomment-178042973\n\n- instead of adding template parameters, which would require\n  modifications to some variant methods and unwrapper, I added\n  stand-alone traits template, to be specialized for wrapped T\n  whose ~T() is not noexcept(true)\n\n- is_default_constructible, etc. left out, the constructors should\n  probably all be noexcept(false) as they allocate new T"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5b9528c3e8a68f94aa53e49ed5f54bec2a51634c", "message": "disable noexcept on destructor for MSVC"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cfa1f959e0beff6538f2cdb224313b48bb450f39", "message": "attempt to fix MSVC error on conversion constructor SFINAE\n\nPreviously I used value_traits substitution failure for enabling\nthe conversion constructor, but MSVC couldn't get over tuple_element\nwith out-of-bounds index, which I used inside value_traits to make\nit fail for non-convertible types.\n\nSo now value_traits substitution always succeeds, with target_type\nbeing void for non-convertible types, and the constructor is enabled\nvia is_valid flag."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/24f69e1e9586579e8020baea02e9cf2f7d23380e", "message": "avoid std::is_nothrow_destructible if gcc < 4.8"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/244c3b7f0c3c80c805a68b3c806b05781e9d4457", "message": "refine noexcept specifiers on constructors"}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/139", "title": "recursive variant move construction/assignment complexity", "body": "```\r\nout/recursive_wrapper_test 321000000\r\nTYPE OF RESULT-> TYPE_ID=N4test9binary_opINS_3subEEE\r\n1542000us\r\ntotal=321000000\r\n2+3-4=1\r\n----- sum of 1000 ones -----\r\nconstruction 57397us\r\ncalculation 7377us\r\ntotal=1000000\r\n----- sum of 5000 ones -----\r\nconstruction 1485368us\r\ncalculation 256442us\r\ntotal=25000000\r\n```\r\n\r\n```\r\nout/unique_ptr_test 321000000\r\nTYPE OF RESULT-> TYPE_ID=St10unique_ptrIN4test9binary_opINS0_3subEEESt14default_deleteIS3_EE\r\n840123us\r\ntotal=321000000\r\n2+3-4=1\r\n----- sum of 1000 ones -----\r\nconstruction 41us\r\ncalculation 5986us\r\ntotal=1000000\r\n----- sum of 5000 ones -----\r\nconstruction 171us\r\ncalculation 182640us\r\ntotal=25000000\r\n```\r\n\r\nLook at the times for \"construction\" of large trees.\r\nWith `recursive_wrapper` a 5x increase in tree size results in `1485368 / 57397 > 25x` increase in running time.\r\nWith `unique_ptr` the increase in running time is only `171 / 41 > 4x`.\r\n\r\nThere's one strange surprise, though. The first timing below TYPE is from an existing calculation test, and `unique_ptr` is almost twice as fast after the change (which doesn't touch any of that code), whereas before the change, there was no difference:\r\n```\r\nout/recursive_wrapper_test 321000000\r\nTYPE OF RESULT-> TYPE_ID=N4test9binary_opINS_3subEEE\r\n844526us\r\ntotal=321000000\r\n2+3-4=1\r\n```\r\n\r\n```\r\nout/unique_ptr_test 321000000\r\nTYPE OF RESULT-> TYPE_ID=St10unique_ptrIN4test9binary_opINS0_3subEEESt14default_deleteIS3_EE\r\n844189us\r\ntotal=321000000\r\n2+3-4=1\r\n```\r\n\r\nThat's with `gcc-6.2`. I previously tried with 4.8 and 5.4 and there were differences but not really convincing; `recursive_wrapper` was faster, then I slightly changed the code to only construct one `test::calculator` instead of constructing temporaries for every operation, and suddenly `unique_ptr` was faster; then I reverted that change, added the `bench_large_tree` function (without calling it) and the times were almost identical.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/93", "title": "call visitor with no argument if variant is uninitialized", "body": "If called on uninitialized variant, `apply_visitor` leads to dispatcher calling `get<T>` with the last alternative type, which throws.\n\nThis PR changes the behaviour so that the dispatcher either\n- throws with more helpful message \"apply_visitor on uninitialized variant\", or\n- calls the visitor with no arguments, if that is possible\n\nI also considered default-constructing the result type, instead of throwing, if the visitor cannot be called with no argument. That could work in some cases (e.g. when visitor extracts some value and default-constructed is okay; or when it applies some transformation and returns void), but could be very surprising in others, so I didn't include this \"feature\".\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/91", "title": "add noexcept on assignment operators, and a test check those", "body": "You can check how the test ran on master here: https://travis-ci.org/lightmare/variant/builds/106630852\n\nWith this patch Travis/AppVeyor will still fail, that's intended.\n\nExcept for Xcode6 having some issue with `is_nothrow_move_constructible`, all other builds on travis will have only 2 failed `is_nothrow_destructible` checks. Those will go away once `~variant()` is declared `noexcept` (unconditionally), but I didn't wan't to touch that line so that it doesn't conflict with reverting previous commits or any other fix to the destructor issue.\n\nAppVeyor has more than 2 failing `is_nothrow_destructible`, that might mean it's indeed broken on MSVC and so the checks will need to be skipped/removed.\n\nNote: I removed private functions `copy_assign` and `move_assign` -- the names were misleading, they did destroy&construct, not assign -- and copied their bodies to respective operators.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170298988", "body": "This may sound like heresy, as `sizeof...(Ts)` returns a `size_t`, but if instance size is a concern, having `size_t type_index` seems wasteful. For most practical uses, `uint8_t` would be enough; and for extreme uses, `uint16_t` is likely to suffice for a while. I just tried constructing a variant of 1000 `integral_constant`s and got `error: template instantiation depth exceeds maximum of 900 (use -ftemplate-depth= to increase the maximum)`.\n\nI changed my generator template to produce 4 types per recursion and lowered the depth to 500, which postponed the error to the definition of `data_size = static_max<sizeof(Types)...>` (attempting to find the largest of 2000 different integral_constants). So I added -ftemplate-depth=5000 and tried a variant of 4000 types -- it took ~2.5g or memory and 40+ seconds to compile that nonsense ;)\n\nThe smallest type suitable for holding `type_index` can be selected like this:\n\n``` c++\ntemplate <typename K, typename... Constants>\nstruct integral_upper_bound\n{\n    using type = void;\n};\n\ntemplate <typename K, typename C, typename... Constants>\nstruct integral_upper_bound<K, C, Constants...>\n{\n    using type = typename std::conditional<\n                              K::value < C::value,\n                              C,\n                              typename integral_upper_bound<K, Constants...>::type\n                          >::type;\n};\n\ntemplate <typename... Types>\nstruct variant_traits\n{\n    using invalid_index = typename integral_upper_bound<\n                                       std::integral_constant<std::size_t, sizeof...(Types)>,\n                                       std::integral_constant<std::uint8_t, UINT8_MAX>,\n                                       std::integral_constant<std::uint16_t, UINT16_MAX>,\n                                       std::integral_constant<std::uint32_t, UINT32_MAX>,\n                                       std::integral_constant<std::size_t, SIZE_MAX>\n                                   >::type;\n\n    using index_type = typename invalid_index::value_type;\n    static constexpr index_type invalid_value = invalid_index::value;\n};\n```\n\nBut then again, if you put that in a variant that contains something larger than `int`, it's not going to make any difference.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170298988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170414993", "body": "Thanks for putting all these links together. It's been a great read, with a promising ending.\n\nWhat is the fate of mapbox::variant, then? Is it going to remain \"An alternative to boost::variant for C++11.\" // or become a stepping-stone to `std::variant` // or deemed to be replaced by one of the closer-to-std implementations before it's finalized? I'm asking because there are fundamental differences between mapbox::variant and some already-settled features of std::variant.\n\nFor example, both allow repeated types (`variant<T, T>`) but\n- `std::variant` forbids using type-access `get<T>` on that, you need to use index-access, e.g. `get<0>`\n- `mapbox::variant` doesn't have index-access, and allows `get<T>` in this case, picking the first `T` it finds. There's a [test case](https://github.com/mapbox/variant/blob/7883dd1cdee1650a1d8520fe64da88f4d9e7ed8c/test/t/variant.cpp#L234) suggesting that's intended, although it doesn't check duplicate types as it says it would.\n\nAnother is that `std::variant` probably won't have anything like `no_init`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170414993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170415820", "body": "I've found similar index-type shrinking in [anthonyw's implementation](https://bitbucket.org/anthonyw/variant/src/932fe16799f1/variant?fileviewer=file-view-default#variant-140), and a coarser one is optional in boost (BOOST_VARIANT_MINIMIZE_SIZE)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/170415820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171321950", "body": "> The second problem is that variant conditionally toggles between inline and no inline via this macro.\n\nIt only depends on _MSC_VER and NDEBUG, which I don't think can vary between TUs linked together.\n\n> would be declared inline, but not static.\n\nThey should not be static, but also don't need to be declared inline:\n\n> as long as they are non-fully specialized templates, they are inline by default.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171321950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171331570", "body": "Note that if `!_MSC_VER && NDEBUG` the VARIANT_INLINE macro expands to `inline __attribute...`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171331570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171627723", "body": "edit 2: amended for forwarding, is it correct now?\n\nIf `has_type</*remove_reference?*/ T, Types...>` then:\n\n``` c++\nnoexcept(std::is_nothrow_constructible<\n  typename std::remove_reference<T>::type,\n  T&&\n>::value)\n```\n\nIf it needs conversion, then perhaps be something like:\n\n``` c++\nnoexcept(std::is_nothrow_constructible<\n  typename detail::convertible_type_noref<T>::type,\n  T&&\n>::value)\n```\n\nTo reduce clutter I just made up `detail::convertible_type_noref<T>`, which is:\n\n``` c++\ntemplate <typename T>\nusing convertible_type_noref<T> = convertible_type<typename std::remove_reference<T>::type>;\n```\n\nand added member `::type` which should be obvious what it is and that it could be there ;)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171627723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171631045", "body": "Agree, it's up to the compiler to optimize these. If you unwind e.g. destroy it looks like:\n\n``` c++\nif (id == 3) data->~T3();\nelse if (id == 2) data->~T2();\nelse if (id == 1) data->~T1();\nelse data->~T0();\n```\n\n... and that should easily be turned into a switch.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171631045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171645802", "body": "That's what I said, if `has_type<T, Types...>` then `target_type==T` else `target_type==convertible_type_noref<T>::type`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171645802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171662453", "body": "What I tried to convey above was that after the destroy method is recursively inlined, it becomes a cascade of if-else statements, which if the compiler is smart, can be compiled into a jump table. I haven't checked whether compilers actually do this, but if Python can do it, I'd assume others can as well.\n\n@joto [@tomilov](https://github.com/tomilov/variant/blob/master/include/versatile/versatile.hpp#L306) optimizes the all-dtors-trivial case away with a specialization.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171662453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171667479", "body": "Ok, but I'll probably need some help understanding where `std::remove_reference` should be applied and where not.\n\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0086r0.pdf\n\n> `variant<int&>`\n> References are supported as alternative types. Assignment to\n> such a value is ill-formed.\n\nIn anthonyw and tomilov implementations, which use an actual `union` for storage, it's clear what that translates to. But in mapbox::variant using raw byte array and `reinterpret_cast`, it's difficult to grasp. I think currently it just drops the reference and stores an `int`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171667479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171836163", "body": "Hm, so gcc 4.7 doesn't have `./variant.hpp:831:25: error: \u2018is_nothrow_destructible\u2019 is not a member of \u2018std\u2019`. That can be wrapped in `#ifdef`.\n\nBut MSVC has more trouble. Question is: is it the compiler's failure to understand SFINAE, or am I using it wrong? Here's the line where Traits substitution fails (on purpose) if T is not convertible to any stored type: https://github.com/mapbox/variant/pull/62/files#diff-dab208458c807c54b530c13b19c80187R589 . Does anyone know whether deferring the failure until Traits::target_type is needed in noexcept would make MSVC happy?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171836163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175104583", "body": "> We should only keep it on (or add it to) functions where it is a) obviously correct and b) any implementation change we might do in the future will preserve it.\n\nI'll add notes to specific lines in my previous pull req. indicating which are a), b) or neither.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175104583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175181486", "body": "I think the last diff [hunk](https://github.com/mapbox/variant/pull/70/files#diff-dab208458c807c54b530c13b19c80187L584) is wrong. As is explained in the link in the comment above it: since `T` is a deduced type, `T&&` is a universal/forwarding reference, it can bind to rvalue reference or lvalue reference. `T` may be deduced as `X const&` for some type `X`, that's why `remove_reference` is needed -- because (this implementation) variant can only store `X`, not `X const&`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175181486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175186397", "body": "A concrete example for illustration:\n\n``` c++\nint a = 5;\nvariant<int> v(a);\n```\n\nThe conversion constructor will be `variant::variant(T && x)` with `T == int&`. `remove_reference<T> == int`, that's what you want to store.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175186397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175325411", "body": "Notes added to https://github.com/lightmare/variant/commit/244c3b7f0c3c80c805a68b3c806b05781e9d4457\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175325411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175575356", "body": "Rather than making it private, it might be best to just remove it. In the two comparison operators where it still appears it can easily be replaced with `index()`. In `dispatcher` and `binary_dispatcher` it should be replaced with `is`:\n\n``` c++\n    VARIANT_INLINE static result_type apply(V & v, F f)\n    {\n        //if (v.get_type_index() == sizeof...(Types))\n        if (v. template is<T>())\n        {\n            return f(unwrapper<T>::apply(v. template get<T>()));\n        }\n        else\n        {\n            return dispatcher<F, V, R, Types...>::apply(v, f);\n        }\n    }\n```\n\nEdit: syntax error :blush: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175575356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175579777", "body": "In `dispatcher<F, V, R, T, Types...>::apply` (https://github.com/mapbox/variant/commit/fedf7d6a3eede22b9af0ce695deded8c9b45eb45#diff-dab208458c807c54b530c13b19c80187R294), `F` is not deduced type, `F &&` is rvalue reference, not forwarding.\n\nEdit: therefore, it should actually be `apply(V & v, F f)`, because `F` should be a reference type already.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175579777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175587237", "body": "Forwarding must happen in `apply_visitor` as you did in that commit, and also in `variant::visit` (where F is deduced):\n\n``` c++\n    template <typename F, typename V>\n    auto VARIANT_INLINE\n    static visit(V & v, F && f)\n        -> decltype(detail::dispatcher<F&& , V,\n                    typename detail::result_of_unary_visit<F&& ,\n                    first_type>::type, Types...>::apply(v, std::forward<F>(f)))\n    {\n        using R = typename detail::result_of_unary_visit<F&& , first_type>::type;\n        return detail::dispatcher<F&&, V, R, Types...>::apply(v, std::forward<F>(f));\n    }\n```\n\nAlso consider simplifying `visit` by finding `R` just once (not sure MSVC will like that, last time I tried SFINAE it wasn't happy ;)\n\n``` c++\n    template <typename F, typename V,\n              typename R = typename detail::result_of_unary_visit<F && , first_type>::type>\n    auto VARIANT_INLINE\n    static visit(V const& v, F && f)\n        -> decltype(detail::dispatcher<F && , V, R, Types...>::apply_const(v, std::forward<F>(f)))\n    {\n        return detail::dispatcher<F && , V, R, Types...>::apply_const(v, std::forward<F>(f));\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175587237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175644232", "body": "Should've posted this here instead https://github.com/mapbox/variant/issues/71#issuecomment-175579777\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175644232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175654061", "body": "After thinking about it a bit more, why does `dispatcher` have template parameter `F` in the first place? Pushing it down to `apply*` functions would simplify forwarding:\n\n``` c++\ntemplate <typename V, typename R, typename T, typename... Types>\nstruct dispatcher<V, R, T, Types...>\n{\n    using result_type = R;\n\n    template <typename F>\n    VARIANT_INLINE static result_type apply_const(V const& v, F && f)\n    {\n        if (v. template is<T>())\n        {\n            return std::forward<F>(f)(unwrapper<T>::apply_const(v. template get<T>()));\n        }\n        else\n        {\n            return dispatcher<V, R, Types...>::apply_const(v, std::forward<F>(f));\n        }\n    }\n\n    template <typename F>\n    VARIANT_INLINE static result_type apply(V & v, F && f)\n    {\n        if (v. template is<T>())\n        {\n            return std::forward<F>(f)(unwrapper<T>::apply(v. template get<T>()));\n        }\n        else\n        {\n            return dispatcher<V, R, Types...>::apply(v, std::forward<F>(f));\n        }\n    }\n};\n\n// variant::visit\n    template <typename F, typename V,\n              typename R = typename detail::result_of_unary_visit<F && , first_type>::type>\n    auto VARIANT_INLINE\n    static visit(V const& v, F && f)\n        -> decltype(detail::dispatcher<V, R, Types...>::apply_const(v, std::forward<F>(f)))\n    {\n        return detail::dispatcher<V, R, Types...>::apply_const(v, std::forward<F>(f));\n    }\n```\n\nI'd also swap template parameters, making it `detail::dispatcher<R, V, Types...>`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175654061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175716527", "body": "I was thinking about the invalid index value when attempting to use a smaller type for storing the index (#19).\n\nstd/tuple/boost/... use indices `0, ..., N-1`, and `size_t(-1)` as invalid index. I think of that as the invalid type preceding valid types in the list (its index is `-1`, although unsigned).\n\nmapbox::variant internally uses indices `N-1, ..., 0`, and `size_t(-1)` as invalid. In the same line of thinking, the invalid type follows valid types. `index_type(-1)` is awkward in comparisons when `index_type` is an arbitrary unsigned type, so while implementing that, I modified the internal indexing to `N, ..., 1`, and `0` as invalid index. It's simple and reliable with whatever type is used for storing the index.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175716527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175762153", "body": "I think `uint8_t` is fine. At least on x86-64, an operand size prefix is only needed for int16 and int64 (=> longer instructions => longer code => caches not happy), that might be why the BOOST_VARIANT_MINIMIZE_SIZE only considers char and int for the type.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175762153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175765034", "body": "@joto you're right, it probably doesn't make a difference. But I don't see what intention it makes more clear, quite the contrary -- it confused me into thinking that `F` is not a reference type already.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175765034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175767587", "body": "Edited the above snippet, `std::forward<F>(f)` must be used before call as well, otherwise overloading on function ref-qualifiers doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175767587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176275007", "body": "> >  Which version are you using ? It seems to work on AppVeyor\n> \n> I'm not using MSVC. The original commit failed on AppVeyor, I fixed that in cfa1f95\n\nAh I missed it, great !\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176275007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176335262", "body": "Not relevant anymore as there are now explicit overloads for `V const&` and `V &&` in master.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176335262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176781046", "body": "/agree, shouldn't be changed until it's truly _internal_.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176781046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176952726", "body": "I'm confused, what was the problem? The 4 lines removed in b3df87f6de5ba5f5955558c37adce3c39e022b1b were perfectly fine, IMO, They were simply moving `operand.p_` to `this->p_`. The new line allocates a copy of an rvalue, seems unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176952726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176955732", "body": "The tests were incorrect in that they tested a moved-from value. But implementation was fine.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176955732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176967819", "body": "Compare:\n\n``` c++\nunique_ptr<int> pi = unique_ptr<int>(new int(5));\nrecursive_wrapper<int> wi = recursive_wrapper<int>(5);\n```\n\nThe former implementation did 1 allocation and moved the pointer from the temporary, just like unique_ptr. The new does a second allocation and moves the value.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176967819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176974223", "body": "There's another issue: visitors. Once two alternatives become the same type, a visitor overloading `operator()` on both won't compile. That means if you have alternatives that _may_ be the same type on some architecture, you either need to wrap them in a tag struct, or overload visitation on type index. Neither seems ideal to me, but the former can be done even if variant forbids identical types.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176974223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177879932", "body": "Yes, should be\n\n``` c++\nnoexcept(noexcept(variant<Types...>(std::forward<T>(rhs))) &&\n         std::is_move_constructible<std::tuple<Types...>>::value)\n```\n\nThe first part covers `is_constructible<V, T&&> && is_destructible<V>`.\n\nEdit: assignable->constructible, as helper::move calls constructor.\n\nIt'd probably be best to dispatch on rvalue-ness of `T`, so that it doesn't have to make two moves if `T` is an rvalue, but that can be left to a later improvement.\n\nWhile you're looking at it... the copy-assignment below makes an unnecessary second copy; and it is actually redundant -- the universal covers lvalue references as well.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177879932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177916912", "body": "In that case, just remove both conversion-assignment operators, they're not needed -- actually the compiler will generate exactly the code in the first, and better than the second:\n\n``` c++\nv = x; // conversion constructor from decltype(x) must be available\n// the compiler will do\nv = V(x); // i.e. construct a temporary variant and move-assign =(V&&)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177916912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177926067", "body": "Perhaps well-defined, but very dangerous, imo.\n\n``` c++\nusing foo_t = libfoo::unspecified_object_handle_type;\nusing bar_t = libbar::unspecified_object_handle_type;\nusing var = variant<int, std::string, foo_t, bar_t>;\n\nstruct is_scalar_visitor\n{\n    bool operator() (int) const { return true; }\n    bool operator() (std::string const&) const { return true; }\n    template <typename T> bool operator() (T const&) const { return false; }\n};\n\nstruct get_length_visitor\n{\n    int operator() (std::string const& s) const { return int(s.length()); }\n    int operator() (foo_t const& o) const { return libfoo::get_obj_length(o); }\n    // other types don't have a length\n    template <typename T> int operator() (T const& ) const { return -1; }\n};\n\n```\n\nAs long as `libfoo` and `libbar` use something unique, like a pointer to an opaque struct for their handles, everything works fine. The day either of them switches to using an `int` or `std::string`, or when they start using the same type for handle, like `void*`, all hell will break loose.\n\nSure you can write safer visitors with no template fallbacks. Then they won't compile. All in all, having same-type alternatives in variant is pretty useless in my opinion, and dangerous. It should be disallowed at class instantiation level -- unless we want to provide indexed `get<I>` like std.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177926067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177932501", "body": "@artemp Oh, haven't thought about complexity. You're right, it'd be something like `direct_type` over 2 axes, `O(n**2)`. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177932501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177953539", "body": "Found another noexcept on dtor: https://github.com/mapbox/variant/blob/master/recursive_wrapper.hpp#L46\nCan you try without it:\n\n``` c++\n ~recursive_wrapper() /*noexcept*/ { delete p_; };\n```\n\nAnd if that compiles, try explicit:\n\n``` c++\n ~recursive_wrapper() noexcept(std::is_nothrow_destructible<T>::value) { delete p_; };\n```\n\nIf both compile, then maybe commenting out https://github.com/lightmare/variant/commit/5b9528c3e8a68f94aa53e49ed5f54bec2a51634c isn't necessary.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177953539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177998098", "body": "@BergWerkGIS Thanks, I will update the pull with a possible workaround.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177998098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178001768", "body": "Okay, the only quick solution is:\n\n``` c++\n~reference_wrapper() noexcept(false)\n```\n\nbecause if we had:\n\n``` c++\n~variant() noexcept(std::is_nothrow_destructible<std::tuple<Types...>>::value) {}\n// and\n~recursive_wrapper() noexcept(std::is_nothrow_destructible<T>::value) {}\n```\n\nThen there'd be infinite recursion -- variant's nothrow-destructibility depends on recursive_wrapper's, and that in turn depends on variant's.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178001768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178016682", "body": "No, the second commit was (edit: overwritten by forced push) a bad idea, sorry.\n\nIt will break a class that inherits a noexcept(true) virtual destructor and adds a member variant with recursive_wrapper.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178016682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178043274", "body": "They both need to be complete at the point where destructor is instantiated. And I actually got a `template instantiation depth limit reached` error when I tried the above.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178043274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178045038", "body": "> The only workaround thinkable is to forward provide ad-hoc type traits as part of the recursive_wrapper type. I.e. template< typename wrapped_type, bool is_default_constructible, bool is_nothrow_destructible /\\* etc... plenty of them */ > class recursive_wrapper.\n\n:+1: but I think for now I'll \"hot-fix\" that with \"don't put stuff with throwing dtor in recursive_wrapper\"\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178045038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178079971", "body": "Ok, finally got it to compile on gcc4.7 as well as AppVeyor.\n\n@BergWerkGIS can you please test mapnik with this? a1df843 (I did a few force pushes so you'll probably need to git reset --hard if you previously checked out this branch.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178079971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178160406", "body": "Although AppVeyor build succeeded here, it still fails in mapnik: `error C2541: 'delete': cannot delete objects that are not pointers` (obviously MSVC doesn't like my `noexcept(delete std::declval<T*>())`\n\nPreviously when I used `std::is_nothrow_destructible<T>`, it said about `x.~T()` dtor call syntax not being allowed outside function call (which I interpreted as not being allowed in exception specification, and std::is_nothrow_destructible probably uses that...)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178160406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178164287", "body": "@springmeyer I would like to, but I'm running out of ideas. The previous errors/crashes were due to dubious/conflicting `noexcept` specifiers. But this is really weird, my `detail::is_nothrow_destructible` is wrapped in `#elif defined(_MSC_VER)`, both mapnik and variant tests should see that definition so I don't understand why only one complains.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178164287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178312815", "body": "One last note, this could've been `noexcept(true)`:\n\n``` c++\n    recursive_wrapper(recursive_wrapper && operand)\n        : p_(operand.p_)\n    {\n        operand.p_ = nullptr;\n    }\n```\n\nThis can't:\n\n``` c++\n    recursive_wrapper(recursive_wrapper && operand)\n        : p_(new T(std::move(operand.get()))) {}\n```\n\nAnyway, #89 is superior in every way.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178312815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178591649", "body": ":+1: - and as for throwing destructors, they're such a dark matter that I probably shouldn't have added any `noexcept(something complex)` to variant destructor in the first place. Just require that alternatives have non-throwing destructors and be done with it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178591649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178598531", "body": "I'm giving up, it's time to  declare the destructor `noexcept(true)`\n\nhttps://ci.appveyor.com/project/lightmare/variant/build/job/jae1h7b357ebq6te\n\n```\n..\\test\\t\\noexcept.cpp(109): FAILED:\n  CHECK( (mapbox::util::detail::is_nothrow_destructible<variant<int, float>>::value) == true )\nwith expansion:\n  false == true\n```\n\n^ that one should have the same result as `std::is_nothrow_destructible<std::tuple<int, float>>`, and if that is `false`...\n\nbtw: any idea why failing CHECK_NOFAIL aren't in the output?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178598531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178606894", "body": "I'm closing this pull request as its pointless, and suggest reverting https://github.com/mapbox/variant/commit/24391a9ea3e4b060c7a62debf6eb4e3515b9a5e6 completely and declaring `~variant() noexcept // (true)`. All the trouble is not worth it (allowing alternatives with throwing destructors).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178606894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178777479", "body": "I just realized something and need to refute what I wrote previously. The patch indeed fixes undefined behaviour.\n\n> @lightmare The 4 lines removed in b3df87f were perfectly fine, IMO, They were simply moving operand.p_ to this->p_\n\nI was wrong on this one. They were not fine, because they didn't leave the moved-from wrapper in a valid state -- destructible, yes, but any assignment to it, with the exception of move-assignment, would blow:\n\n``` c++\nrwi x = 5;\nrwi y = std::move(x); // x.p_ = nullptr\nx = 6; // *x.p_ = 6\n```\n\nOf course that comes down to the implementation of assigment operators, which would all need to check and allocate if `p_ == nullptr`. The committed solution is simpler.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178777479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184889982", "body": "It was not _this_ noexcept that caused trouble, it was the complicated one involving (broken) `is_nothrow_destructible` that I added later (and was reverted already). Without explicit `noexcept` it's computed from bases' and members' destructors (i.e. everything that happens after this destructor's body), which in this case is the same as `noexcept` or `noexcept(true)`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184889982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184898507", "body": "Shall I rebase this on master? I sooo much hate merge conflicts :spaghetti: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/184898507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188525365", "body": "D'oh! GCC 4.7 doesn't fail to substitute `decltype(void(declval<F>()()))` when `F` doesn't have `operator()()`, and then wants to call it... :boom: No idea how to fix that atm\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188525365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188822500", "body": "> Ideally would be nice not to require writingno-op` code at all.\n\nYes, that is possible if `R` (the return type inferred from the `first_type`) is default-constructible. It's hard to imagine real usage that would rely on the visitor either being called with a value, or exception thrown.\n\nA contrived example could be made from the unit test. `auto a = 12345 / apply_visitor(total_size(), v)` -- currently this throws `bad_variant_access` if `v` is uninitialized. If we default-constructed the result, it would divide by zero.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188822500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88736950", "body": "First step I'd take would be to simplify `dispatcher`. I think I've noted somewhere that it has more template parameters than necessary. `V` and `F` can be moved down, onto the apply function (and then there only needs to be one apply template matching both const and non-const variant). `R`, the result type, should be computed inside the `dispatcher` class.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88736950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88738538", "body": "Um, actually the easiest thing you can do is call `visit` instead of duplicating it here. That'll hide all the dispatch ugliness.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/88738538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jfirebaugh": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/104", "title": "Promote to mapbox namespace (remove \"util\")", "body": "The extra level `util` namespace is unnecessary: we're not going to have a conflict on the name `variant` in the `mapbox` namespace, and `util` does not add any semantic information; all of our `mapbox`-namespaced projects are utilities of some kind.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/104/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/04dc3a46b02d6b8714d00280bb85c88716727862", "message": "Install boost with mason; eliminate boost::timer dependency"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9b2fc858ccd84509fd7164a4847e7dc95e58d5a5", "message": "Remove Xcode 6 from CI matrix\n\nFixes #106"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173657836", "body": "I [switched mapbox-gl-native over to experimental/optional](https://github.com/mapbox/mapbox-gl-native/pull/3616) earlier this week. I support deprecating or removing our implementation.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173657836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173994269", "body": "mapbox-gl-native doesn't use `operator<`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173994269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182536895", "body": "mapbox-gl-native no longer uses `mapbox::optional`. We work around a couple of `experimental::optional` bugs on various implementations:\n- `bool operator!=() const` is sometimes missing (use `!(a == b)` instead)\n- `T* operator->() const` is sometimes broken (use `operator*` instead)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182536895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212608398", "body": "Likewise in mapbox-gl-native. \ud83d\udc4d \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/212608398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/217537519", "body": "@tomilov Correct.\n\nI think the necessary change here is as simple as:\n\n``` diff\ndiff --git a/variant.hpp b/variant.hpp\nindex db5d3c8..1fb57df 100644\n--- a/variant.hpp\n+++ b/variant.hpp\n@@ -585,7 +585,7 @@ class variant\n\n     // http://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers\n     template <typename T, typename Traits = detail::value_traits<T, Types...>,\n-              typename Enable = typename std::enable_if<Traits::is_valid>::type>\n+              typename Enable = typename std::enable_if<Traits::is_direct>::type>\n     VARIANT_INLINE variant(T&& val) noexcept(std::is_nothrow_constructible<typename Traits::target_type, T&&>::value)\n         : type_index(Traits::index)\n     {\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/217537519/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218244284", "body": "`boost::variant` protects against unexpected ambiguous conversions where `mapbox::util::variant` does not:\n\nThis compiles and prints 0 (1 was likely expected):\n\n```\n    mapbox::util::variant<bool, uint64_t> mbv(1234);\n    std::cout << mbv.which();\n```\n\nThis does not compile:\n\n```\n    boost::variant<bool, uint64_t> bv(1234);\n    std::cout << bv.which();\n```\n\n```\n/Users/john/Development/variant/mason_packages/headers/boost/1.60.0/include/boost/variant/variant.hpp:1558:28: error: call to member function 'initialize' is ambiguous\n              initializer::initialize(\n              ~~~~~~~~~~~~~^~~~~~~~~~\n/Users/john/Development/variant/mason_packages/headers/boost/1.60.0/include/boost/variant/variant.hpp:1735:9: note: in instantiation of function template specialization\n      'boost::variant<bool, unsigned long long>::convert_construct<int>' requested here\n        convert_construct( detail::variant::move(operand), 1L);\n        ^\ntest/bench_variant.cpp:186:36: note: in instantiation of function template specialization 'boost::variant<bool, unsigned long long>::variant<int>' requested here\n    boost::variant<bool, uint64_t> bv(1234);\n                                   ^\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218244284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218252894", "body": "`boost::variant` allows conversion, but protects against ambiguity where `mapbox::util::variant` does not:\n\nThis compiles and prints 0 (1 was likely expected):\n\n```\n    mapbox::util::variant<bool, uint64_t> mbv(1234);\n    std::cout << mbv.which();\n```\n\nThis does not compile:\n\n```\n    boost::variant<bool, uint64_t> bv(1234);\n    std::cout << bv.which();\n```\n\n```\n/Users/john/Development/variant/mason_packages/headers/boost/1.60.0/include/boost/variant/variant.hpp:1558:28: error: call to member function 'initialize' is ambiguous\n              initializer::initialize(\n              ~~~~~~~~~~~~~^~~~~~~~~~\n/Users/john/Development/variant/mason_packages/headers/boost/1.60.0/include/boost/variant/variant.hpp:1735:9: note: in instantiation of function template specialization\n      'boost::variant<bool, unsigned long long>::convert_construct<int>' requested here\n        convert_construct( detail::variant::move(operand), 1L);\n        ^\ntest/bench_variant.cpp:186:36: note: in instantiation of function template specialization 'boost::variant<bool, unsigned long long>::variant<int>' requested here\n    boost::variant<bool, uint64_t> bv(1234);\n                                   ^\n```\n\nFurthermore, [the most recent standard proposal](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0088r1.html) uses a similar bounded conversion rule based on overload resolution over a set of imaginary functions `FUN(T_i)`.\n\nI'm \ud83d\udc4d  on implementing this approach too.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218252894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218253027", "body": "Continuing discussion on https://github.com/mapbox/variant/issues/100.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218253027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222738264", "body": "@kkaefer I don't think that example would be fixed by disallowing ambiguous `variant` constructors or assignments, since there's no construction or assignment happening during visits. It's the implicit `std::nullptr_t` \u21e2 `std::string` conversion that's the issue, and AFAIK there's no way to disable that specifically in the visitor context.\n\nI wish there were, because implicit conversion in the visitor context is definitely dangerous. Another case where it comes up is defining a visitor for `mapbox::geometry::geometry`. If the visitor has `operator()(const geometry&)` (e.g. for recursive visits to `geometry_collection` elements), then that overload will be used for any other geometry variant type you forgot, since they all implicitly convert back to `geometry`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222738264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/123798359", "body": "[In this context, `Fn&&` is an rvalue reference, not a universal reference.](https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers) I believe that this will cause constructs such as the following to stop working:\r\n\r\n```\r\nauto lambda = [](...) { ... };\r\nrv.match(lambda);\r\n```\r\n\r\nCan you add a test for this?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/123798359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124063653", "body": "How about:\r\n\r\n```C++\r\ntemplate <typename Fn>\r\nstruct visitor<Fn> : Fn\r\n{\r\n    template<typename T>\r\n    visitor(T&& fn) : Fn(std::forward<T>(fn)) {}    \r\n};\r\n\r\ntemplate <typename Fn, typename... Fns>\r\nstruct visitor<Fn, Fns...> : Fn, visitor<Fns...>\r\n{\r\n    template<typename T, typename... Ts>\r\n    visitor(T&& fn, Ts&&... fns)\r\n        : Fn(std::forward<T>(fn))\r\n        , visitor<Fns...>(std::forward<Ts>(fns)...) {}    \r\n};\r\n\r\ntemplate <typename... Fns>\r\nvisitor<std::decay<Fns>...> make_visitor(Fns&&... fns)\r\n{\r\n    return visitor<std::decay<Fns>...>(std::forward<Fns>(fns)...);\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124063653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tomilov": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/89", "title": "Base recursive_wrapper implementation on std::unique_ptr", "body": "It is simpler to design `recursive_wrapper` as \"wrapper\" over ready-to-use to RAII `std::unique_ptr`. Just add value semantics ([example](https://github.com/tomilov/variant/blob/master/include/versatile/recursive_wrapper.hpp)).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/89/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171643259", "body": "Surely it can be avoided in C++11: https://github.com/tomilov/variant/blob/master/include/versatile/versatile.hpp#L241 . Linear complexity of destructor (at least) became constant.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171643259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171690267", "body": "Lookup table of function pointers is 100% C-array, whereas (just dream up) `if (...) { ... } if (...) { ... } ...` or `switch`/`case` can turn into a number of comparisons and jumps, especially if there are skippings (due to optimized out perfectly inlined destructors for (e.g.) trivially destructible types).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171690267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175775882", "body": "For testing of perfect forwarding of visitor and arguments to visitor I would like to offer [this test](https://github.com/tomilov/variant/blob/master/test/include/test/visit.hpp).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175775882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178040554", "body": "The mission of recursive_wrapper is to wrap incomplete type. One of the two: variant definition or recursive_wrapper's wrapped type definition, \u2014 will be first. Second of them will be just only forward declared at that moment.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178040554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178042973", "body": "The only workaround thinkable is to forward provide ad-hoc type traits as part of the `recursive_wrapper` type. I.e. `template< typename wrapped_type, bool is_default_constructible, bool is_nothrow_destructible /* etc... plenty of them */ > class recursive_wrapper`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178042973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178045514", "body": "@lightmare fair enough.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178045514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178322636", "body": "Only (possible) downside is a [requirement to deleter](http://en.cppreference.com/w/cpp/memory/unique_ptr/~unique_ptr) (hereby destructor) to be `noexcept`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178322636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178324491", "body": "I think it is unlikely that someone will use throwing destructors (properly). It is [very complicated matter](https://akrzemi1.wordpress.com/2011/09/21/destructors-that-throw/).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178324491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178446121", "body": "I always thought that the use of the `std::unique_ptr` does not lead to any run-time performance degradation. It is as simple as possible, I sure. Keeping compatibility with boost in sense of immutability of interface (as opposite to implementation) should be sufficient, is not that so?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178446121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178996916", "body": "Note, that in C++11 and later destructors marked by `noexcept` implicitly (if destructors of all non static members and base classes are `noexcept` in its turn). There no need to mark them intentionally.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178996916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/217534956", "body": "`decltype(1234) == int` and `int` is convertible to `bool` freely. Leftmost alternative type, which is \"convertible from\" chosen.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/217534956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99360031", "body": "On x86/x64 32-bit `int` may grant performance advantages over integers of another size (including `char`).", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99360031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99361772", "body": "I think, for up to 256 alternative types variant's discriminatior type may be clearly expressed in terms of `uint_fast8_t` if speed is priority and `uint_least8_t` otherwise.", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99361772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "artemp": {"issues": [{"url": "https://api.github.com/repos/mapbox/variant/issues/73", "title": "Remove `get_type_index` in favour of more standard `which()`", "body": "`get_type_index` returns index in reversed order which is confusing. \n`which` method is complaint with `boost::variant`. \n\nIn order to remove `get_type_index` we need to address last remaining issue - `invalid_type` value.\n\nProposed solution: \n\n``` c++\ninvalid_type == sizeof(Types...) + 1\n```\n\n``` c++\n// relevant test that needs upgrading\nREQUIRE(variant_type{mapbox::util::no_init()}.get_type_index() == mapbox::util::detail::invalid_value);\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/859a8c933a0c2ab18941acb9dcf834799c0de46c", "message": "Merge pull request #163 from MaxRis/master\n\nRemoves deprecated static_visitor to avoid msvc C4996 compiler warning"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/237f83cad2c76b1717ba4076c30aca32339336a8", "message": "Merge pull request #162 from mapbox/variant_alternative\n\nadd `variant_alternative` and `variant_size` implementations"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/835ebc19321c6a9696a2072b7fbd5ca3de818860", "message": "add `variant_size` helper"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/30560e19e60c23227b29bc3434a163d2343333d3", "message": "fix preprocessor logic"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8b1de314711bff2f9f3c748ac0ed7cd7d6400331", "message": "add compile index in range check for __type_pack_element branch."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ae193141379c1706e17098c67c5b4e4f48b19c48", "message": "add optimized 'variant_alternative' implementation usinh built-in `__type_pack_element` when available (clang++)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3ffef950b005f31961f167242911b2f97d2634c3", "message": "add `variant_alternative_t`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3449d00cf525d8ef98cee0f4a276e2928398a8f9", "message": "alternative implementation of `variant_alternative`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4b98c485cf7d74691f7921145054641daa66936e", "message": "add lost test check + remove stderr"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/43357808cc93e69d2975e31e68986137ac5e88c9", "message": "add intial `variant_alternative` implementation (#161 http://en.cppreference.com/w/cpp/utility/variant/variant_alternative)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ba3085a5eb6e874d43432dc75f3392092e1e7214", "message": "use full sha1"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/75bb549d233eb94c74d2730dc3a8d8ed35c87f3d", "message": "update CHANGELOG\n(git log <tag1>...<tag2> --pretty=format:'* %s [view commit](http://github.com/mapbox/variant/commit/%H)' --reverse)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6497bce683e6e8edf80f80bc4fed65235690b335", "message": "add <sha1> to CHANGELOG entries."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/555436f715e5e0929a13664f0911ecc4931356d1", "message": "add CHANGELOG.md skeleton"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b78b51548743737357e5b3bbe296f465d5f4fdae", "message": "Merge pull request #154 from ricardocosme/forwarding_reference_make_visitor\n\nAdd move semantics to make_visitor and visitor"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/266f68d9f1c3ad65e6d6c264f0130bc4c652618a", "message": "Merge pull request #153 from ricardocosme/boost-build\n\nImprove Boost Build support"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6247207595902dbf898a430346335af2a3485c74", "message": "add test for ref #147 + https://github.com/mapbox/variant/pull/147"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e01b7bf3334e788fb99f4a510d5bc87a4a581342", "message": "Merge branch 'BlueSolei-master'"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/195367cfc19e1e08933487fa7cc56cb7f6d25cc8", "message": "Merge branch 'master' of https://github.com/BlueSolei/variant into BlueSolei-master"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ea106db54b167b8dce7c0b3b9b59bb06b209db33", "message": "recursive_wrapper test - avoid constructing new functor in recursive calls, call itself via `this` pointer."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/291121f6ac682c6cc5a7a69f253492f03ca7324f", "message": "Merge pull request #144 from narizhny/Casts\n\nAdd variant_static_cast, variant_dynamic_cast"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/916139a2e51e125816efce6e19d428385601273f", "message": "Merge pull request #141 from mapbox/match-otherwise\n\nAdds a test for polymorphic lambdas in match, resolves #140"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3d807d31621d52a8b27494c8f80aa50f6464f17d", "message": "Merge pull request #138 from mapbox/sizeof\n\nMaking a sizeof(variant) match `boost` and `std` implementation"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c839c666c324306a252b0fbcadd31e80e02e2898", "message": "add missing <limits>"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/35487cd39400b9a4bd30a18e6dfbf9cb1aaa80cd", "message": "Make `type_index_t` configurable at compile time via `MAPBOX_VARIANT_MINIMIZE_SIZE` and `MAPBOX_VARIANT_OPTIMIZE_FOR_SPEED`. Default is `unsigned int`. (ref #138)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3f6fd131ef07a091338cec81ec8d23d6ca44528d", "message": "Add compile time check to disallow array types as alternatives."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/fa8e124a2367abc9c06f7e83926691085eed45c0", "message": "Ensure internal index type is capable of holding all alternatives (ref #138)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/05ee9aca16c3968e34db3b241c44eecb981344e0", "message": "use `mapbox::util::type_index_t` (#19)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9eec1fd48947d81af3debb82686c593b15f79aad", "message": "make type used for `type_index` configurable via `type_index_t` typdef + use `unsigned int` by default. This addresses `sizeof` discrepancies between boost/std/mapbox variants (ref #19)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/18919174da93165a79ca5fdbfde4b172182c6156", "message": "Merge pull request #132 from lightmare/avoid-tuple-instantiation\n\navoid expensive instantiation of tuple constructor in noexcept"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/02bd1ac4c07e6db9fe0f01267853e43b41637b74", "message": "Merge pull request #129 from daniel-j-h/docs\n\nAdds Documentation for Readme, resolves #98"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/ed84def128ed99a4b3b1ebcde278be7f761e782e", "message": "Merge pull request #128 from daniel-j-h/match\n\nPattern Matching for Sum Types via `.match` Member Function"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3c17c37aea0d7e3d9e860b746d54160ec820e6a2", "message": "Merge pull request #126 from daniel-j-h/hashable\n\nMakes variant<Ts...> hashable iff Ts... are hashable, closes #125"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9a115c5eb3c09509c70a57b25b283b6e1cbba919", "message": "Merge branch 'daniel-j-h-lambda-visitor'"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a5a79a594f39d705a7ef969f54a0743516f0bc6d", "message": "Fix #122 by adding an extra compile check in universal ctor (via @lightmare) + test case"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9b46167f5c42a19a3b66cb92eb60418486b4e424", "message": "nicer stderr"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/84a426a31ad3b63c4b8f8d189841e19af48cda40", "message": "Merge pull request #120 from mapbox/types\n\nexpose `using types = std::tuple<Types...>;`  + add `struct adapted_variant_tag;`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/173a7457952d0f24e2c55d5eb3ea785ad41639fb", "message": "add `struct adapted_variant_tag;`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e5818212a8f7ef89df0aa76d5244eca78b8dbb8d", "message": "expose `using types = std::tuple<Types...>;` - useful for adapting variant to `boost::spirit` (QI,Karma,X3)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/aaddee9270e3956cee98cdd7d04aea848d69f5f0", "message": "Update README\n\n`recursive_wrapper.hpp` is included in `variant.hpp`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8e2f6964157885f1655c1673d65f3aea9b90fe18", "message": "Merge pull request #116 from lightmare/disjunction\n\nuse C++17 disjunction for no-references and one-convertible tests"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/388376ac9f0102feba2d2122873b08e15a66a879", "message": "Merge pull request #114 from mapbox/strict-conversions\n\nStrict conversions"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/075d9636fdfe563b535fa3ba087409f940c018e4", "message": "comment out code"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8be6a2aa8f85e1455198eff31a577a1fb95e1d46", "message": "update tests"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/71ac8fdf96e547dca34fe58c5cd8d1dce2ef0dac", "message": "Re-implement type matching logic to reject ambigious conversions\n\n* Check for direct type match\n* Check for conversions but only accept if one match"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c511b2f34d966c09e02a1b833db33a9a1f9b2196", "message": "add test for b3a002d185afac295486e2ebd6b84c78a2267ba0 (ref #112)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b3a002d185afac295486e2ebd6b84c78a2267ba0", "message": "fix value_traits to be able to match T, T& and T const& to the direct type stored in variant (ref #112)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b5728ad76e1402c130a9330aa44b6f4b655b13b4", "message": "update .mason pkgs"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/eedafd31f9fdbaffcb605d8d34a3a3443a4f7a2d", "message": "use local HAS_EXCEPTIONS #define (__EXCEPTIONS is g++/clang specific macro)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/372d7c88fe796a138d0e578328914ac80e5a949a", "message": "c++ apply formatting"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/20e44accb1edf84d944d44f91ed7401198368aae", "message": "Merge pull request #110 from mapbox/110-get_unchecked\n\nAdd get_unchecked<type>()"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/37acc5a7caef10d2f52dbdcee71be53b79dda027", "message": "uncomment tests ref #82"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/adf0e02bceb74339b8ccc3e9e3f316917cb3cc22", "message": "variant - yield return type of mapbox::util::get<T> automatically and make interface consistent (addresses #82)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/bb8c2d20317191f5228341a87b0c362c4d15be5b", "message": "Merge branch '111-which-constexpr'"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/dca3d967c165de1d0fb3bb5e1c2d6b4bcd76782f", "message": "Merge branch 'master' into 111-which-constexpr"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/48d60445cca1d71fbebb6456b5d45a18bb9cb3b8", "message": "remove unused internal metafunctions"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/2f8a4a381f2ad8f9c2d3d068a757a3e0e9994495", "message": "Merge pull request #109 from mapbox/darwin-build-flags\n\nFix building with GCC (g++-5.2.0) on OS X (Darwin) (ref #108)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/33e27ec4c7cc5e1669f2181d13eacdfff15dfb61", "message": "Update README.md"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/55579f03fba747500b3a105ae73a7dfe6059cfc1", "message": "Fix building with GCC (g++-5.2.0) on OS X (Darwin) (ref #108)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/8bdad6b6d73844ef8437f004654c0745f0cec96a", "message": "Update README.md"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/7f7470fee6a42c3c68f1fa359a28cf762df385c3", "message": "Jamroot - add missing include directory ./test/include for auto_cpu_timer.hpp"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4368d75292ae5149034b59b483fc3f8b3956a839", "message": "remove expected error string - current implementation emits compiler specific error message e.g\n\n```test/compilation_failure/is_type.cpp:8:7: error: no matching member function for call to 'is'\n    x.is<std::string>();\n    ~~^~~~~~~~~~~~~~~\n./include/mapbox/variant.hpp:657:27: note: candidate template ignored: disabled by 'enable_if' [with T = std::basic_string<char>]\n                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n                          ^\n./include/mapbox/variant.hpp:664:26: note: candidate template ignored: disabled by 'enable_if' [with T = std::basic_string<char>]\n                         (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n                         ^\n1 error generated.\n```\n(ref #102)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c6ae1ea0acf8c4392a806ad3abd5b11eb3b8a8ce", "message": "`is<T>()` - add specialisation for recursive_wrapper<T> + update tests (ref #102)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/1bc46e525a9dec71af28f822e5fc031c1352ad2e", "message": "Merge pull request #101 from mapbox/include\n\nMove headers into include/mapbox folder"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/390229a59703d2467347d62f3e134e67ea6835cc", "message": "fix compilation"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/bfe0f19dd14dedad9c0a6f1e211e81bd1233564e", "message": "update remaining `<variant.hpp>` to `<mapbox/variant.hpp>`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/343831611e60e324e311d67f05da953e357df0a1", "message": "ammend include dir"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a606e90243dcf145cf06d46e8e30c447f85af178", "message": "fix typo"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9bd902536f533305186aaf70edb2f0b9713f6b6b", "message": "Merge branch 'master' into include"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/35ca16c74f5712afb4f042f45ea64078fa0b630e", "message": "issue warning `-Wweak-vtables` so this issue is not forgotten (https://github.com/mapbox/variant/issues/95)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3f025adbf599d8dd9bfca02d45b37e49a2cae841", "message": "remove erroneous `;` ref #96"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5aab5df0dc899b484c04ce9c649645787ee0bc5c", "message": "disable clang-format on preprocessor directives"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/0bd70f39a1d12dd8caea055f5ba970d404f4b825", "message": "clang-format => AlignConsecutiveDeclarations: false"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d30113c80237884945ff922516cffa180cef2256", "message": "bump up version to 1.1.0"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5436e10b77544306a2eeaf214525de6562260ca2", "message": "add `.clang-format` + apply format"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c9a662a3b531d8a21055be4e0b4c71dc25fc0d00", "message": "make dtor unconditionally \"noexcept\"  ref https://github.com/mapbox/variant/pull/90"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cc64743760d0b6626cf996a01234139e4b3e73d8", "message": "Revert \"Merge pull request #87 from lightmare/noexcept-destructor\"\n\nThis reverts commit 24391a9ea3e4b060c7a62debf6eb4e3515b9a5e6, reversing\nchanges made to c4e864cc122c4fcc9b1f7a8f68a34e465df9f922."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/1a7713e2a1cca608ad434b88d86481d27797fe6d", "message": "Merge pull request #81 from mapbox/cleanup1\n\nRemove unnecessary type alias."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/d6086c5582ff3b779dad282da5ea427a2c87303b", "message": "Merge branch 'lightmare-noexcept'"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/524e3322fbd1f6565565b9235024024d493159dc", "message": "Merge branch 'noexcept' of https://github.com/lightmare/variant into lightmare-noexcept"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/bb2624cc974e6609a7d6b43e70ae830574cb71b4", "message": "Jamroot - don't enforce c++11 via `<cxxflags>-std=c++11`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cc769eda81faa25de276e0617bbe19ef3a08f00b", "message": "remove redundant std::move (warning: moving a temporary object prevents copy elision [-Wpessimizing-move]) (ref #74)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/694a78454f77be60dda488bdbc38886fb9f05fc9", "message": "Merge pull request #75 from mapbox/deprecate-static-visitor\n\nDeprecate static_visitor."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5ba35cdc02ca2cae944c4e4a3f952ae33704718c", "message": "update test"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/1ce461eeabed1bdc6a47b0bf6d892399676f6a3d", "message": "replace `get_type_index` with `which()` + simplify `apply` methods to use  `is<T>()` via @lightmare  ref #67\nTODO: to remove `get_type_index` completely - fix `REQUIRE(variant_type{mapbox::util::no_init()}.get_type_index() == mapbox::util::detail::invalid_value);` test. E.g make `invalid_type == sizeof(Types...) + 1`"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/fedf7d6a3eede22b9af0ce695deded8c9b45eb45", "message": "pass Visitor functor by universal reference + enable perfect forwarding"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/a31511a26e6285629428f1aa8af9420f481f42f6", "message": "Merge branch 'master' into visitor-no-copy"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/4cfb1a4bb346f3208586158bef52880881146bc6", "message": "pass visitor functor by const/non-const ref"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9a82d6e8a4bbbb6d944f133bd01f26d12126d924", "message": "Merge pull request #65 from mapbox/less-than\n\nFix operator<()."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/720651ddedffa80b77129a008afe4cd3ac8424c9", "message": "Merge pull request #60 from mapbox/detail\n\nMove static_max and variant_helper into detail namespace."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/03da517caa3f7e92d5c1f622f814731026fc1cca", "message": "Merge pull request #59 from mapbox/fix-set\n\nBugfix: Duplicate call to destructor in set<>() if constructor throws."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/f32f7bb7b15789cdbff6de6e900563fb30aab1a2", "message": "Merge pull request #54 from daniel-j-h/use_tuple_element\n\nRip out custom select_type in favor of tuple_element"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/804d957c995d7c9b4c3330559f919836d66606f9", "message": "Merge pull request #57 from mapbox/dispatcher\n\nChange dispatcher to work without runtime error."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/3ac6e46d01f3a8fbf9944e19d806bc3d456d1a0c", "message": "Consistently apply `unwrapper` in dispatch methods + make `unwrapper` use static methods to minimise alloc ref #53"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/922f8169d07d8bf95ce279506dc746cafbde4c27", "message": "Revert \"remove redundant `unwrapper` helper ( `get<T>()` methods have specialisations for T, recursive_wrapper<T> and reference_wrapper<T> and do the unwrapping when required) #53\"\n\nThis reverts commit e8b48bff1febbf902df22769c48811d5be7f3ac2."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/e8b48bff1febbf902df22769c48811d5be7f3ac2", "message": "remove redundant `unwrapper` helper ( `get<T>()` methods have specialisations for T, recursive_wrapper<T> and reference_wrapper<T> and do the unwrapping when required) #53"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/91ba0301a672ea0a3131390d44d304c5493de84a", "message": "add `detail::has_type<T,Types>::value` metafunction + in `is<T>()` check if T is indeed valid type via `has_type` (ref #34)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/6b223bb196a1a6fdad61978ac494c7e3a4a62b75", "message": "add move_assign(&&) and copy_assign(const&)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/cd8fe9ce3f866696471affd8ca52c20a7ed23263", "message": "add move_assign(&&) and copy_assign(const&)"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/1c42a36bcfff1a24b5aff18a6e7d14b30d074542", "message": "make boost and custom variant bench identical + pass by universal reference"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/39a631394e185f527159164c8b0fffae755b8512", "message": "remove `swap` and implement `assign`\n\nhttps://github.com/mapnik/mapnik/issues/3103\nhttps://github.com/mapnik/mapnik/pull/3146"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/c9b88a13f9257fffded85067a0c112dbbe4b02c3", "message": "reduce redundency + set num samples to 3"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/383dd200cb7fe11c728c4d6f551d97a510788377", "message": "assume boost installed in /usr/local by default"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/5ea75a2de1f343c6152b9494b056e718955fbbc5", "message": "test both short and long std::string to cover for potential small-string optimisations by some compilers"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34892647", "body": "fixed in 41d5626bee25a4edd36c2e2d05bde46751417baa\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34892647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34961341", "body": "this ons should be fixed in master \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34961341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/35483792", "body": "`struct` can have private members with `private` keyword. The only differences between `struct` and `class` are _default_ inheritance and members access specifiers are public for `struct` and private for `class`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/35483792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/41803073", "body": "@DennisOSRM - ha I was talking about it with @springmeyer yesterday, you read my mind :)\nDefinitely, we need one too in Mapnik. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/41803073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44269831", "body": "@DennisOSRM - i'll take a look, the interface is a bit awkward at the moment.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44269831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44417620", "body": "@DennisOSRM  interestingly, it compiles with \n`Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)`\nand `clang version 3.5.0 (trunk 208668)` for me\n\nI'll keep digging..\n\n^^ disregard, I had a patched variant. I fails for me too with master\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44417620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44420510", "body": "your test-case compiles with this diff (which is wrong anyway)\n\n``` patch\ndiff --git a/variant.hpp b/variant.hpp\nindex 1885b4e..f7dec88 100644\n--- a/variant.hpp\n+++ b/variant.hpp\n@@ -384,8 +384,9 @@ public:\n     VARIANT_INLINE variant(T && val) noexcept\n         : type_id(detail::type_traits<T,Types...>::id)\n     {\n-        static_assert(detail::is_valid_type<T,Types...>::value, \"Not a valid type for this variant\");\n-        new (&data) T(std::forward<T>(val)); // nothrow\n+        //static_assert(detail::is_valid_type<T,Types...>::value, \"Not a valid type for this variant\");\n+        typedef typename std::remove_reference<T>::type value_type;\n+        new (&data) value_type(std::forward<value_type>(val)); // nothrow\n     }\n\n     VARIANT_INLINE variant(variant<Types...> const& old)\n@@ -524,7 +525,7 @@ auto VARIANT_INLINE static apply_visitor( F f, V const& v0, V const& v1) -> decl\n }\n\n\n-// operator<<\n+// variant operator<<\n template <typename charT, typename traits, typename Variant>\n VARIANT_INLINE std::basic_ostream<charT,traits>&\n operator<< (std::basic_ostream<charT,traits>& out, Variant const& rhs)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44420510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44421043", "body": "``` c++\n//#include \"/Users/artem/Projects/variant/recursive_wrapper.hpp\"\n#include \"/Users/artem/Projects/variant/variant.hpp\"\n\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nstruct Number;\nstruct Object;\n\ntypedef util::variant<util::recursive_wrapper<Number>,\n                      util::recursive_wrapper<Object>> Value;\nstruct Number\n{\n    Number() {}\n    Number(double value) : value(value) {}\n    double value;\n};\n\nstd::ostream& operator<<(std::ostream & out, Number const& num)\n{\n    out << \"Number:\" << num.value;\n    return out;\n}\n\nstruct Object\n{\n    std::unordered_map<std::string, Value> values;\n};\n\nstd::ostream& operator<<(std::ostream & out, Object const& obj)\n{\n    out << \"Object\";\n    return out;\n}\n\nint main() {\n    Object object;\n    Number number {3.1415};\n    object.values[\"pi\"] = util::recursive_wrapper<Number>(number);\n    std::cerr << object.values[\"pi\"] << std::endl;\n    return 0;\n}\n```\n\nI modified your test and it compiles for me. At the moment `recursive_wrapper` need to be passed explicitly. I'll see how to improve syntax.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44421043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45319643", "body": "@DennisOSRM - do you mean automatic conversions from `T` to `recursive_wrapper<T>` in assignment op? I'll take a look how boost is doing it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45319643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45485079", "body": "Note to myself - move_assign implementation and comments https://github.com/boostorg/variant/blob/master/include/boost/variant/variant.hpp#L2080-L2084\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45485079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/46858786", "body": "@kkaefer - thanks for tracking this down!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/46858786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/46973125", "body": "@kkaefer  - non-const visitation 54d07c9\n\n``` c++\ntemplate <typename T>\nstruct mutating_visitor : util::static_visitor<>\n{\n    mutating_visitor(T & val)\n        : val_(val) {}\n\n    void operator() (T & val) const\n    {\n        val = val_;\n    }\n\n    template <typename T1>\n    void operator() (T1& ) const {} // no-op\n\n    T & val_;\n};\n\nutil::variant<int, double, std::string> var(123);\nREQUIRE(var.get<int>() == 123);\nint val = 456;\nmutating_visitor<int> visitor(val);\nutil::apply_visitor(visitor,var);\nREQUIRE(var.get<int>() == 456);\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/46973125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47108982", "body": "implemented in 724a40baec3ded142c631b66521502840d8d183f\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47108982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47231641", "body": "@joto - yes, good catch\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47231641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47324408", "body": "The behaviour is undefined (implementation specific) when `static_cast<T>` does narrowing conversion. 854c5a7a115d92b67698f3654d915edd483456b9 fixes this issue by ensuring numeric value is in valid range for the target (0..255.0) e.g  100.0(double)-> 100(unsigned char)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/47324408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52215188", "body": "@springmeyer - operator<< is very useful, we just need to move it into separate header e.g\n`variant_io.hpp`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52215188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52218646", "body": "@springmeyer - as this is particular use-case for boost::spirit::qi/karma adaptation, I'll remove mpl::vector and the rest from the variant and use specialised derived type in Mapnik instead\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/52218646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/68894844", "body": "fixed in 00ab88117ed25f78cdca2faa00beea0061271e85\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/68894844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/74054225", "body": "@DennisOSRM - this  'combined' `operator=(..)` invokes copy constructor for copyable and move constructor for movable types. At least this is an intent. Copy can be expensive, indeed, but need it for exception safety guarantee.  Can you share you object implementation to see what we can do ?\n\nCanonical implementation for copyable objects would look something like\n\n``` c++\nVARIANT_INLINE variant<Types...>& operator=(variant<Types...> const& other)\n {\n         if ( this == &other) return *this;\n        variant<Types...> tmp(other);  // <-------  this is potentially costly but required for exception safety\n        swap(*this, tmp);\n        return *this;\n }\n```\n\nNote, `expensive` copy ctor ^\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/74054225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/74073081", "body": "@DennisOSRM - having a second look - I think we should introduce separate copy and move operator=\nimplementations \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/74073081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/77142726", "body": "fixed in c117592337cc20c238d4ce9f9d8847aff0cd55ab\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/77142726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153375897", "body": "@jfirebaugh - Should be possible, I'll take a look \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153375897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153384529", "body": "``` bash\n./variant.hpp:646:9: error: static_assert failed \"invalid type in T in `is<T>()` for this variant\"\n```\n\nCould you check this works for you and I'll close this ticket ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153384529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153384730", "body": "fixed in 91ba0301a672ea0a3131390d44d304c5493de84a\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153384730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153687841", "body": "``` c++\n\nmapbox::util::variant<int,double> var;\nif (var.is<std::string>())  // <== compile time error ./variant.hpp:646:9: error: static_assert failed \"invalid type in T in `is<T>()` for this variant\"\n{\n    ....\n}\n```\n\n@jfirebaugh - closing for now, let me know if any issues\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153687841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153789067", "body": "@springmeyer - this is compile time error so unit test won't cut unless we resort to some `make` or meta programming hacks. ^^. It should be possible with c++ concepts hopefully. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/153789067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/154146382", "body": "throwing in `get<T>` is by design. For safe access use `visitor pattern` or check by calling `is<T>()` before calling `get<T>()`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/154146382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162018637", "body": "@joto - sounds good re: custom exception. \nLets derive it from `std::exception` so existing code will continue to work or at least it'll be easy to fix.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162018637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/163326238", "body": "> What if there is a type size_t and uint32_t? Are they the same? \n\nWell it depends (on platform/arch) :)   I think current behaviour is fine and it's consistent with `boost::variant`. If user creates variant with duplicate types so c'est la vie - the best we can do is to have predictable behaviour. \n\n``` c++\n#include <iostream>\n\n#include <boost/variant.hpp>\n\n#include <mapnik/util/variant.hpp>\n#include <mapnik/util/variant_io.hpp>\n\nint main()\n{\n    {\n        using my_variant = boost::variant<int,std::int32_t>;\n        my_variant v(123);\n        std::cerr << typeid(int).name() << \" == \" << typeid(std::int32_t).name() << std::endl;\n        std::cerr << v << std::endl;\n    }\n    {\n        using my_variant = mapnik::util::variant<int,std::int32_t>;\n        my_variant v(123);\n        std::cerr << typeid(int).name() << \" == \" << typeid(std::int32_t).name() << std::endl;\n        std::cerr << v << std::endl;\n    }\n    std::cerr << \"Done\" << std::endl;\n    return 0;\n}\n```\n\n``` bash\nclang++ -std=c++11 -I/opt/mapnik/include variant.cpp -o test\n./test\ni == i\n123\ni == i\n123\nDone\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/163326238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165761187", "body": "@joto - recursive wrapper implementation is borrowed from boost and yes it uses `new T` for performance to avoid default initialising POD members I think. Do you see this might break anything and we need to change it?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165761187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165763190", "body": "@joto - not sure. R-value is 'undefined` after move op by definition so either is correct but swap will be less efficient.  (?) \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165763190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165763771", "body": "@joto - I have no strong opinion regarding this, being consistent sounds like a good approach.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/165763771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/169306820", "body": "We _do_ need an `unwrapper` and it should be used consistently across `dispatch` implementations. Re-opening\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/169306820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173950225", "body": "@joto - I checked all tests are passing (as expected) when using `less-than` branch in mapnik. The ordering using `index` is primarily aimed at supporting associative containers and left-to-right or right-to-left don't make any functional differences. But, being compliant with upcoming standard warrants this change, thanks for digging! \n- [x] -  mapnik https://github.com/mapnik/mapnik\n- [ ] - node-mapnik  https://github.com/mapnik/node-mapnik\n-  _add package needing testing_\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173950225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173951127", "body": "@springmeyer - pls, not ! :) . I'm currently using and planning to use bjam, it doesn't hurt anything does it ?\n/cc @joto\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173951127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175186364", "body": "@joto -  @lightmare is right and that was my motivation: to allow `T` being deduced either to rvalue (move) or lvalue (copy). I'll take a fresh look tomorrow again but the original code looks correct to me.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175186364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175498288", "body": "Initial implementation : https://github.com/mapbox/variant/tree/visitor-no-copy\nIt will require quite a few changes/corrections in mapnik, mostly const/non-const correctness in visitor functors.\n\n/cc @joto @springmeyer @flippmoke \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175498288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175499626", "body": "@joto - I'm not aware of any current usage of optional,  fine to remove on my end.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175499626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175500403", "body": "`operator<` is fixed in https://github.com/mapbox/variant/pull/65. I'm OK with making `get_type_index` private method.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175500403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175598716", "body": "@lightmare - like it ^ !! Will apply, cheers! \n/cc @joto \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175598716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175650047", "body": "@lightmare - all good points! I'm going to defer to @joto on ^ as he was working on similar solutions as of today :) \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175650047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175661375", "body": "Ok, good to remove `get_type_index` once we make\n`invalid_type == sizeof(Types...) + 1` or other fix for\n\n``` c++\nREQUIRE(variant_type{mapbox::util::no_init()}.get_type_index() == mapbox::util::detail::invalid_value);\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/175661375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176215086", "body": "@lightmare - thanks. I can see it will work but I'm a bit hesitant to just go and change internal index to \n`N,...,1` Lets get a consensus on this :) @joto ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176215086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176219581", "body": "@joto - Does https://github.com/mapbox/variant/commit/0c7e4e2c6908d988e216a6a953bf2342ebcac415 address this issue and can it be closed ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176219581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176263493", "body": "> Hm, so gcc 4.7 doesn't have ./variant.hpp:831:25: error: \u2018is_nothrow_destructible\u2019 is not a member of \u2018std\u2019. That can be wrapped in #ifdef.\n\n`std::is_nothrow_destructible` is part of C++11 and this only means gcc 4.7 doesn't confirm to the standard\n\n> But MSVC has more trouble. \n\nWhich version are you using ?  It seems to work on `AppVeyor` \n/cc @lightmare @joto \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176263493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176265025", "body": "Overall looks like move in the right direction thanks again @lightmare. \n\nI'm inclined to merge this PR as it's definitely an improvement from just having `noexcept` :)  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176265025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176353192", "body": "Yep, closing\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176353192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176687239", "body": "closing, tracking this issue in #73\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176687239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176778936", "body": "ok with me \n\n/cc @joto @lightmare @springmeyer \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/176778936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177908915", "body": "re: `get<T>`  - Lets not over engineer here, at least not now :). As stated in https://github.com/mapbox/variant/blob/master/README.md the goal is : \n\n\"..is to maintain external API compatibility with boost::variant such that Mapbox variant can be a \"drop in\".\n\nAdding more compile checks will increase compile times for not much of a value in my view. Happy to revisit this later when std variant becomes a reality. \n\nBoth our variant and boost::variant have well defined behaviour: \n\n``` c++\n#include <iostream>\n\n#include <boost/variant.hpp>\n#include <variant.hpp>\n\nint main()\n{\n    std::cerr << \"testing\" << std::endl;\n\n    { // boost                                                                                                                                                  \n        boost::variant<int,double,int> v;\n        v=123;\n        std::cerr << v.which() << std::endl;\n        std::cerr << boost::get<int>(v) << std::endl;\n    }\n    { // mapbox                                                                                                                                                 \n        mapbox::util::variant<int,double,int> v;\n        v=123;\n        std::cerr << v.which() << std::endl;\n        std::cerr << mapbox::util::get<int>(v) << std::endl;\n    }\n    return 0;\n}\n```\n\n``` bash\n./test \ntesting\n0\n123\n0\n123\n\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177908915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177928984", "body": "@lightmare - I agree, \"same-type alternatives\" are pretty useless. My only concern is that compile check can be relatively expensive (thinking about mapnik::expression_node  -https://github.com/mapnik/mapnik/blob/master/include/mapnik/expression_node_types.hpp#L169-L196).\nHow would you propose checking  type `uniqueness` at compile time? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177928984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177932146", "body": "Found this one : http://stackoverflow.com/questions/18986560/check-variadic-templates-parameters-for-uniqueness\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177932146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177932399", "body": "@BergWerkGIS - could you try compiling the above code ^ ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177932399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177934405", "body": "Maybe some `optimization` ideas are in http://www.boost.org/doc/libs/1_60_0/libs/mpl/doc/refmanual/set.html\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177934405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178013901", "body": "@joto - great, will need to bench it!  How about making this check an optional (default: yes) ? This way it'll protect new users and also will allow power users to turn it off for large type sequences ?\n\n/cc @lightmare \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178013901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178579557", "body": "> One other thing to keep in mind: The implementation of recursive_wrapper was basically taken wholesale from boost, just ported to C++11. Keeping compatibility with boost is one of our goals here.\n\nCorrect ^ . Our `recursive_wrapper` as complete as boost one in this regard.\n\nIf we can alias `std::unique_ptr` to `recursive_wrapper` and performance is not an issue than, yes, by all means lets do it. Not a priority for https://github.com/mapbox/variant/milestones/1.1.0 though. \n/cc @joto @tomilov @lightmare \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178579557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178581766", "body": "Just reading https://github.com/mapbox/variant/issues/50 - perhaps this should go into 1.1.0 it we have a consensus ?\n/cc @joto @tomilov @lightmare\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178581766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178599654", "body": "@joto - I referred to implementing recursive_wrapper as an alias to or based on `std::unique_ptr` in 1.1.0\n(https://github.com/mapbox/variant/milestones/1.1.0). \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/178599654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182290249", "body": "``` c++\n#include <iostream>\n#include \"variant.hpp\"\n#include <boost/variant.hpp>\n\nstruct big\n{\n    double val[10]; // 8 * 10 = 80\n};\n\ni\nint main()\n{\n    {\n        std::cerr << sizeof(mapbox::util::variant<char>) << std::endl;\n        std::cerr << sizeof(mapbox::util::variant<char,int>) << std::endl;\n        std::cerr << sizeof(mapbox::util::variant<char,int,std::string>) << std::endl;\n        std::cerr << sizeof(mapbox::util::variant<char,int,std::string, big>) << std::endl;\n    }\n    {\n        std::cerr << sizeof(boost::variant<char>) << std::endl;\n        std::cerr << sizeof(boost::variant<char,int>) << std::endl;\n        std::cerr << sizeof(boost::variant<char,int,std::string>) << std::endl;\n        std::cerr << sizeof(boost::variant<char,int,std::string,big>) << std::endl;\n    }\n    return 0;\n}\n\n```\n\n``` bash\n./test\n16\n16\n32\n88\n8\n8\n32\n88 \n88\n```\n\nFrom output above it looks like we could do a better job optimising for size when max size stored is sizeof(T) < 16. But this is not a typical use case. \nMoving to the next milestone\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182290249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182447126", "body": "@daniel-j-h @springmeyer - tried to come up with reasonable `.clang-format` that would work across projects. it almost works and integrates OK with emacs but there are couple features that I'm not happy about. \nFor example \n\n``` c++\nadd\n(\"one\",1)\n(\"two\",2)\n;\n```\n\nI'd like it to be as above but `clang-format` insists on changing it to\n\n``` c++\nadd(\"one\",1)(\"two\",2); \n```\n\n@daniel-j-h - do you have some ideas how to fix this ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182447126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182448115", "body": "### Integration\n\n#### Emacs\n\n``` lisp\n;; clang-format integration\n;; set path to `clang-format`\n(setq exec-path (append exec-path '(\"/opt/llvm/bin\")))\n(load \"/opt/llvm/share/clang/clang-format.el\")\n(global-set-key [C-M-tab] 'clang-format-region)\n(add-hook 'c++-mode-hook\n      '(lambda ()\n         (add-hook 'before-save-hook #'clang-format-buffer nil t)))\n```\n\nthis is what I had to put into `.emacs` \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182448115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182449890", "body": "`.clang-format` - this is what I came up with so far\nhttps://gist.github.com/artemp/d59d92d7db407d7a7640  -\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182449890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182453847", "body": "Ok, one `hack-ish` way that works is\n\n``` c++\nBOOST_FUSION_ADAPT_STRUCT(mapnik::unary_function_call,       //\n                          (mapnik::unary_function_impl, fun) //\n                          (mapnik::unary_function_call::argument_type, arg))\n\nadd                           //\n            (\"point\", 1)      //\n            (\"linestring\", 2) //\n            (\"polygon\", 3)    //\n            (\"collection\", 4) //\n            ;\n\n```\n\n*Note empty comments `//` \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182453847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182471591", "body": "Done in 5436e10b77544306a2eeaf214525de6562260ca2, closing\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/182471591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188816305", "body": "@lightmare - I like the general idea around 'no_init`, thanks! Ideally would be nice not to require writing`no-op` code at all. I'll review in over coming days and maybe we'll do a point release ? /cc @springmeyer @joto \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/188816305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194788302", "body": "@springmeyer - :eyes: :+1:  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194788302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194813204", "body": "Yes, as long as we want to derive from `std::runtime_error` or `std::exception` we'll face this issue.\n\nHaving a look at implementation - with our current usage there's no benefit or requirement to derive from `std::runtime_error` and it'll be better to derive from `std::exception` (same as boost::variant)\n\n``` c++\nclass bad_variant_access : public std::exception\n{\npublic:\n    virtual const char* what() const noexcept\n    {\n        return \"mapbox::util::bad_variant_access: FAIL\";\n    }\n}; // class bad_variant_access\n```\n\nAt least the above is slightly more efficient ^ \n\n/cc @joto @springmeyer \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194813204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194814828", "body": "@springmeyer - yes, and yes we know what's going on, aren't we :) .\n\nWe can provide specialisations for floating point numbers using suitable EPS defined in <cfloat> ( for `float`,`double`, `long double`)\n\n``` c++\nstruct equal_comp\n{\n    template <typename T>\n    bool operator()(T const& lhs, T const& rhs) const\n    {\n        return lhs == rhs;\n    }\n};\n```\n\nBut I'm not 100% sure this is worth pursuing \n/cc @springmeyer @joto  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/194814828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/215096261", "body": "@jfirebaugh @daniel-j-h - good call\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/215096261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218397061", "body": "specialisation added + test updated in c6ae1ea\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218397061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218469506", "body": "@springmeyer 55579f0 fixes compilations with gcc on Darwin and all tests are passing https://travis-ci.org/mapbox/variant/builds/129431785\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/218469506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222944207", "body": "@kkaefer - having a `get_unchecked<T>()` internally sounds good, but I'm not at all sure about exposing `get_unchecked` as a public API. I can't imagine unchecked access will be allowed in `std::variant` either.\nThe safe way to access variant's internally stored type is to use visitor pattern, why do you need `get_unchecked` at all ?  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222944207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222947965", "body": "> Only having a checked get() means that you can't use variant without exceptions.\n\n@kkaefer - I'm suggesting \n- add unchecked get() for internal usage\n- only expose checked `get()` when compiled with exceptions enabled\n- If no exceptions available force user to use visitor pattern \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222947965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/variant/comments/15762486", "body": "@joto - good stuff outlining intentions etc\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/15762486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99366655", "body": "`llvm/libc++` `<variant>` implementation uses `unsigned`.  \r\n> Shouldn't a uint8_t be good enough as outlined in the ticket? \r\n\r\nWe probably can but I favour something along `BOOST_OPTIMIZE_SIZE` compile flag to choose min suitable `type_index_t` at compile time. \r\n\r\n>I think, for up to 256 alternative types variant's discriminatior type may be clearly expressed in terms of uint_fast8_t if speed is priority and uint_least8_t otherwise.\r\n\r\nyep, sounds like an idea ^ \r\n\r\n/cc @daniel-j-h  @tomilov  ", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99366655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99367484", "body": "@daniel-j-h - \r\n>Also should we static_assert that users never use more types we can index?\r\n\r\n\ud83d\udc4d  ", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/99367484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/127658875", "body": "@anandthakker - thanks for the PR! I agree with @ricardocosme and @daniel-j-h  - it'll be better to have a separate page listing all available methods while `README` only mentions basic building blocks. ", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/127658875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145783051", "body": ":+1: ", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145783051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145921805", "body": "fixed in 4b98c485cf7d74691f7921145054641daa66936e", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145921805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145921929", "body": "right, here is an alternative implementation 3449d00cf525d8ef98cee0f4a276e2928398a8f9", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/145921929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "MaxRis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/215d64585ef92e16f18f5da81195b0279f53f599", "message": "Removes deprecated static_visitor to avoid msvc C4996 compiler warning"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ricardocosme": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/f0b50062b4fd2bf2b86aeada2efa8e36cfa6cb1c", "message": "Add copy assignment and move assignment operators."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/9f991da78d3146d32be67695a89c2b1197c826b2", "message": "Use forwarding reference in make_visitor and visitor\n\nIt avoids internal copies of closures passed to make_visitor and it\npermits the usage of init capture(feature of C++14) to use movable\nonly types.\n\n - Add test case for lambda with init capture and movable(but not\n   copyable) object\n - Add test case for match() receiving a lvalue reference to a lambda."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/04a6797a6aa2a86dd3eb6517893255c010f6e524", "message": "- Add auxiliar rule exe-test."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/bd0a2d559724b8daa7d1ff33df90976e26a595aa", "message": "- Use of the module 'os' to get BOOST_DIR.\n- Add macro SINGLE_THREADED to single threading mode.\n- Define single threading mode as default.\n- Add lambda_overload_test and hashable_test."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/561a09dd005468f9cdef651030471a1215f1885f", "message": "- Remove the use of boost libraries.\n- Add default build."}, {"url": "https://api.github.com/repos/mapbox/variant/commits/b2471ffc74c163194943b17b2b2c5758c59655ca", "message": "- Add a project mapbox_variant.\n- Use of the 'os' module to capture CXX_STD.\n- Common configs moved to project.\n- Built targets moved to 'out' directory."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/123867732", "body": "Thank you @jfirebaugh, you're right!\r\nYour test gives me a `Fn` deduced as a `lambda&`.\r\nI included your case to `test_match_singleton()` and added some more cases to `test_match_overloads_init_capture()`. \r\n\r\nThere is a fix at d4cd55a897f24feb2a2bdb2a9b16cba7a414c0b7. Can you take a look, please?", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/123867732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/123878803", "body": "### Improvement\r\nIt should be possible to avoid some calls to move ctor using visitor ctor with forwarding references(not rvalue refs.) and decayed types(i.e., `std::decay`) to permit inheritance of Fn and access to Fn::operator(). I believe this is safe here. [A draft to this approach.](https://gist.github.com/ricardocosme/a84fe41206f5ff849eab91463af75650)\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/123878803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124179275", "body": "Nice, it's simpler this way. Pull request has been updated. 9f991da78d3146d32be67695a89c2b1197c826b2", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124179275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124291503", "body": "Thanks @daniel-j-h! We're not actually using the assignment operator in the test, but it's important to an object tagged as movable and/or copyable. Pull request has been updated.", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/124291503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/126253649", "body": "My two cents. I don't think `is<T>()` is so basic to stay here. The section is about basic building blocks. I believe this is more interesting to `mapox/variant.hpp`.", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/pulls/comments/126253649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fxfactorial": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/d2588a8f1d6b5d480d228e6d8a906ce634bdea9a", "message": "Trivial missing comma in README example code"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkaefer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/variant/commits/74ce146d9b96081965d5fcdf53feefab6199468c", "message": "add static which<T>() function to get a contained types' which value"}, {"url": "https://api.github.com/repos/mapbox/variant/commits/434dab048d52e4141146bb95fdabdf7aa62e799b", "message": "Add get_unchecked<T>() to enable use with exceptions disabled"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45321336", "body": "+1 on automatic recursive wrapping\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45321336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/60112307", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/60112307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171607790", "body": "\\o/\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/171607790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222679414", "body": "A simple example where this bit me:\n\n``` cpp\n#include <mapbox/variant.hpp>\n\u200b\n#include <string>\n\u200b\nusing value = mapbox::util::variant<std::nullptr_t, std::string>;\n\u200b\nstruct value_visitor {\n    bool operator()(const std::string& v) const {\n        return !v.empty();\n    }\n};\n\u200b\nint main() {\n    mapbox::util::apply_visitor(value_visitor{}, value{std::nullptr_t()});\n}\n```\n\nThe visitor doesn't have an explicit `operator()` for `std::nullptr_t`, so it gets autoconverted to a `std::string`, which segfaults at runtime.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222679414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222846722", "body": "Note that `.get_unchecked<type>` could also be used internally in the visitor implementation, since all `.get<type>`s are preceded by a `.is<type>` check anyway.\n\nThen, only enable the `.get<type>` overloads in `#ifdef __EXCEPTIONS`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222846722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222945778", "body": "Only having a checked `get()` means that you can't use variant without exceptions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/222945778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mlogan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/160", "title": "Fix the noexcept specifications for move assignment and conversion.", "body": "This should allow variants to be nothrow move-assignable where appropriate.\r\n\r\nI also took a crack at fixing the noexcept spec on the conversion assignment operator, which could previously lie. I definitely don't understand the meta-programming used here, so comments are welcome.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daminetreg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/variant/pulls/119", "title": "Useful traits and Boost.Spirit Qi/Karma support headers for mapbox::variant.", "body": "Dear Mapbox Variant authors,\n\nI would like to contribute support headers for Boost.Spirit.Qi and Karma to mapbox::variant, so that usage of Mapbox::variant with Qi and Karma get really easy. \n## Why ?\n- Currently if you have a really large variant type (e.g. more as 50) with Boost.Spirit you need to re-preprocess the Boost.Mpl headers to enable your type to be compiled with Boost.Variant.\n- Meaning you need a Patched Boost. With all the problems it brings when you are a lib publisher.\n- Bigger mpl::vector<> for a bigger Boost.Variant makes the compile times of qi::rule and karma::rule decrease significantly.\n- It also has strong impact on binary sizes, that with MapBox::Variant gets away. :smile:\n\n| small test program with | Boost.Variant | MapBox.Variant |\n| --- | --- | --- |\n| Boost.Spirit Qi | 75 Kb | 63 Kb |\n| Boost.Spirit Karma | 119 Kb | 83 Kb |\n\n[See benchmark code here](https://github.com/sauter-hq/boost-spirit-mapbox-variant)\n\nSo I updated a big codebase which was using Boost.Variant and Boost.Spirit together with Mapbox::variant. And now it compiles faster, makes smaller binaries and we don't need a patched Boost MPL anymore ! :grinning: Thank you very much for this variant type.\n## Features\n\nThe small supporting headers I wrote might be useful for users of this library, therefore I would like to contribute the following to Mapbox::Variant : \n1. [A metafunction](https://github.com/sauter-hq/variant/blob/8c0cc0315d0d6fbb102d1bbcbf355ded1334e5fe/include/mapbox/traits/is_mapbox_variant.hpp) to detect whether some type is a mapbox::variant\n2. [A metafunction](https://github.com/sauter-hq/variant/blob/8c0cc0315d0d6fbb102d1bbcbf355ded1334e5fe/include/mapbox/traits/is_type_in_variant.hpp) to check if a type is part of a variant.\n3. One supporting header for Boost.Spirit.Qi, defining the required traits\n4. One supporting header for Boost.Spirit.Karma,  defining the required traits.\n\nI would naturally understand that the supporting header for Qi and Karma are not interesting you as part of the library, as they base on the Boost.Spirit traits which are documented only in spirit code but which are used extensively internally by the library and provided as supporting headers since ages (https://github.com/boostorg/spirit/blob/develop/include/boost/spirit/home/support/extended_variant.hpp).\n\nFollowing if you are interested in the supporting headers for Boost.Spirit or not I will publish them as a separate library and remove 3. and 4. from this PR. \n\nBut I really would love to see the `include/mapbox/traits/is_mapbox_variant.hpp` and `include/mapbox/traits/is_type_in_variant.hpp` accepted, as they are in my opinion features that should be part of Mapbox Variant.\n\nYou can test out the supporting headers by running : \n- `make out/boost_spirit_karma && out/boost_spirit_karma`\n- `make out/boost_spirit_qi && out/boost_spirit_karma`\n\nCheers\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DennisOSRM": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34956281", "body": "Yes, this will work. `std::aligned_storage<T>` behaves like a POD:\n\n![bildschirmfoto 2014-02-13 um 09 05 47](https://f.cloud.github.com/assets/1067895/2157806/c12fb9d8-9485-11e3-9b40-4bd4e5083ba7.png)\n\nAdmittedly, the [`using std::swap`](https://github.com/artemp/variant/blob/master/variant.hpp#L264) is overkill as there is not much ADL to do on PODs, but let's consider that good style.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/34956281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/41803188", "body": "awesome, it would allow me to ditch yet another boost dependency in OSRM. (not that boost is bad at all)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/41803188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43558151", "body": "Cool! Thanks for implementing this. I'll give it a try tomorrow. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43558151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43942693", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/43942693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44199553", "body": "still triggers the static assertion. I have the feeling, it will need some `std::remove_reference` massaging.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/44199553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45302631", "body": "Not yet. Will give it another shot this morning. \n\n> Am 06.06.2014 um 03:07 schrieb Dane Springmeyer notifications@github.com:\n> \n> @DennisOSRM - had a change to try this out again?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45302631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45313594", "body": "@artemp @springmeyer it does work, thanks.\n\nHow hard would it be to add an (automatic) casts?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45313594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45320151", "body": "> do you mean automatic conversions from T to recursive_wrapper<T> in assignment op\n\nyes, that's what I meant.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/45320151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/77143852", "body": "cool, upgrading\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/77143852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/variant/comments/8224310", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/8224310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "coveralls": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/87771149", "body": "[![Coverage Status](https://coveralls.io/builds/2225033/badge)](https://coveralls.io/builds/2225033)\n\nCoverage remained the same at 88.79% when pulling **4cab002370d30412e4901840425ebdeac8e5afe5 on kirbyfan64:master** into **587519521ae0d9a24f997ab2dff77f13309aa5d2 on mapbox:master**.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/87771149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kirbyfan64": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/111271391", "body": "Bump?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/111271391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139772698", "body": "@mapbox Guys...really...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139772698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139773995", "body": "@springmeyer If you felt that way, you could've just told me to close it to begin with... ;)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139773995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173966980", "body": ":(\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/173966980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/variant/comments/15764398", "body": "Shouldn't this be \"the upcoming variant standard**,** because\"?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/comments/15764398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lordnn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138713613", "body": "There are no compile error and no runtime error but result is wrong. Pseudo code is below.\nstring s1 (\"small string\"), s2;\nvariant< string > v1, v2;\nv1.set < string >(s1);\nv2=v1;\ns2=v2.get < string >(); // s2 has wrong value\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138713613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138860452", "body": "I think this is exactly the same problem as described in #5 issue.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138860452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138933450", "body": "Non pseudo code is:\n#include \"variant.hpp\"\n#include < string >\n#include < iostream >\n\ntemplate < typename... Types > using variant = mapbox::util::variant<Types...>;\n\nint main(){\n  variant< std::string > a;\n  a = std::string(\"SMALL STRING\");\n  std::cout << a.get< std::string >() << std::endl;\n}\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/138933450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139739398", "body": "Same problem on g++ 5.2.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/139739398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/164518149", "body": "I wrote my own workaround based on std::is_trivially_copyable. But I think your solution works too.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/164518149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hjanetzek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/147694427", "body": "@lordnn, yes #5 seems to be the issue here. The swap method of the new std::string is not that trivial :)\nAs a workaround this works for me: \n\nhttps://github.com/tangrams/variant/commit/94c99d8dba4cd4b03c8baeda78b148ac43c50fef\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/147694427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161999257", "body": "@joto, did you build with -D_GLIBCXX_USE_CXX11_ABI=1? It is enabled by default on Ubuntu 15.10 but not on e.g. Arch\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/161999257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162003035", "body": "Ah right, direct_swap uses the appropriate swap implementation. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/162003035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "BergWerkGIS": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177940445", "body": "Those two alone build fine with VS2015:\n- https://github.com/mapbox/variant\n- https://github.com/lightmare/variant/tree/noexcept-destructor\n\ngoing for a mapnik build with https://github.com/lightmare/variant/tree/noexcept-destructor next\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177940445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177947426", "body": "Nope:\n\n```\n       \"c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik.sln\" (mapnik;csv;gdal;geojson;ogr;pgraster;postgis\n       ;raster;shape;sqlite;topojson target) (1) ->\n       \"c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\gdal.vcxproj.metaproj\" (default target) (7) ->\n       \"c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\gdal.vcxproj\" (default target) (8) ->\n       (ClCompile target) ->\n         c:\\mb\\windows-builds-64\\packages\\mapnik-master\\plugins\\input\\gdal\\gdal_featureset.hpp(71): error C2694: 'gdal_featureset\n       ::~gdal_featureset(void) noexcept(<expr>)': overriding virtual function has less restrictive exception specification than\n       base class virtual member function 'mapnik::Featureset::~Featureset(void)' (compiling source file ..\\..\\plugins\\input\\gdal\n       \\gdal_datasource.cpp) [c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\gdal.vcxproj]\n         c:\\mb\\windows-builds-64\\packages\\mapnik-master\\plugins\\input\\gdal\\gdal_featureset.hpp(71): error C2694: 'gdal_featureset\n       ::~gdal_featureset(void) noexcept(<expr>)': overriding virtual function has less restrictive exception specification than\n       base class virtual member function 'mapnik::Featureset::~Featureset(void)' (compiling source file ..\\..\\plugins\\input\\gdal\n       \\gdal_featureset.cpp) [c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\gdal.vcxproj]\n         ..\\..\\plugins\\input\\gdal\\gdal_featureset.cpp(79): fatal error C1903: unable to recover from previous error(s); stopping\n       compilation [c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\gdal.vcxproj]\n         cl : Command line error D8040: error creating or communicating with child process [c:\\mb\\windows-builds-64\\packages\\mapn\n       ik-master\\mapnik-gyp\\build\\gdal.vcxproj]\n\n    818 Warning(s)\n    4 Error(s)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177947426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177972362", "body": "> `~recursive_wrapper() /*noexcept*/ { delete p_; };`\n\n:white_check_mark:  \n\n> `~recursive_wrapper() noexcept(std::is_nothrow_destructible<T>::value) { delete p_; };`\n\n:x: \n\n```\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector(671): error C3672: pseudo-destructor expression can\n       only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_feature_collection_grammar.cpp)\n       [c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n     C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector(671): error C3672: pseudo-destructor expression can\n       only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_feature_grammar.cpp) [c:\\mb\\wind\n       ows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n\n\n       \"c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik.sln\" (mapnik-json;mapnik-wkt target) (1) ->\n       \"c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj\" (default target) (2) ->\n       (ClCompile target) ->\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0(583): error C3672: pseudo-destructor expression\n       can only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_generator_grammar.cpp) [c:\\m\n       b\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector(671): error C3672: pseudo-destructor expression ca\n       n only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_generator_grammar.cpp) [c:\\mb\\\n       windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0(583): error C3672: pseudo-destructor expression\n       can only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_topojson_grammar.cpp) [c:\\mb\\wind\n       ows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector(671): error C3672: pseudo-destructor expression ca\n       n only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_topojson_grammar.cpp) [c:\\mb\\window\n       s-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0(583): error C3672: pseudo-destructor expression\n       can only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_feature_collection_grammar.c\n       pp) [c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0(583): error C3672: pseudo-destructor expression\n       can only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_feature_grammar.cpp) [c:\\mb\\\n       windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector(671): error C3672: pseudo-destructor expression ca\n       n only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_feature_collection_grammar.cpp\n       ) [c:\\mb\\windows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n         C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector(671): error C3672: pseudo-destructor expression ca\n       n only be used as part of a function call (compiling source file ..\\..\\src\\json\\mapnik_json_feature_grammar.cpp) [c:\\mb\\wi\n       ndows-builds-64\\packages\\mapnik-master\\mapnik-gyp\\build\\mapnik-json.vcxproj]\n\n    0 Warning(s)\n    8 Error(s)\n\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/177972362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dippi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/variant/issues/comments/193314911", "body": "Not sure why it failed to build only with xcode6.\n\nBesides that, I think it needs some adjustments on the `noexcept` specifier.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/193314911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/193320033", "body": "Which brings me to issue #88, so the problem was known and the proposed solution is actually better.\nLooking forward to see those changes applied.\nB.R.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/variant/issues/comments/193320033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}}}}