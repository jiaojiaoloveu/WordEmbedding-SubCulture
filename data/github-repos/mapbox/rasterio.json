{"_default": {"1": {"odormond": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1249", "title": "Cannot get samples from tif with no CRS since 1.0a10", "body": "Hello!\r\n\r\nWhen trying to sample a tif not containing any CRS, rasterio will raise a CRSError since version 1.0a10 while it was working fine up to 1.0a9.\r\n\r\n## Expected behavior and actual behavior.\r\n\r\n### Expected\r\n```\r\n$ ./test.py\r\n[array([ 0.21086692]), array([ 0.21086692])]\r\n```\r\n\r\n### Actual\r\n```\r\n$ ./test.py\r\n/venv/lib/python3.5/site-packages/rasterio/windows.py:483: RasterioDeprecationWarning: use 'width' attribute instead\r\n  RasterioDeprecationWarning)\r\n/venv/lib/python3.5/site-packages/rasterio/sample.py:17: RasterioDeprecationWarning: use 'height' attribute instead\r\n  data = read(indexes, window=window, masked=False, boundless=True)\r\nTraceback (most recent call last):\r\n  File \"./test.py\", line 6, in <module>\r\n    samples = list(rasterio.sample.sample_gen(tif, ((708816.547, 5678449.287), (708816.547, 5678449.287))))\r\n  File \"/venv/lib/python3.5/site-packages/rasterio/sample.py\", line 17, in sample_gen\r\n    data = read(indexes, window=window, masked=False, boundless=True)\r\n  File \"rasterio/_io.pyx\", line 325, in rasterio._io.DatasetReaderBase.read\r\n  File \"rasterio/_warp.pyx\", line 702, in rasterio._warp.WarpedVRTReaderBase.__init__\r\n  File \"rasterio/_base.pyx\", line 991, in rasterio._base._osr_from_crs\r\nrasterio.errors.CRSError: A defined coordinate reference system is required\r\n```\r\n\r\n## Steps to reproduce the problem.\r\n\r\nUnzip the following zip and go into the `rasterio_no_crs_tif_cannot_be_sampled` directory. Then just run `./test.py`.\r\n[rasterio_no_crs_tif_cannot_be_sampled.zip](https://github.com/mapbox/rasterio/files/1642938/rasterio_no_crs_tif_cannot_be_sampled.zip)\r\n\r\nI'm reproducing `test.py` itself for convenience:\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport rasterio\r\n\r\ntif = rasterio.open('test.tif')\r\nsamples = list(rasterio.sample.sample_gen(tif, ((708816.547, 5678449.287), (708816.547, 5678449.287))))\r\nprint(samples)\r\n```\r\n\r\n## Operating system\r\n\r\nUbuntu 16.04.3 LTS\r\n\r\n## Rasterio version and provenance\r\n\r\nrasterio-1.0a10-cp35-cp35m-manylinux1_x86_64.whl installed in a python3 virtualenv with pip 9.0.1\r\n\r\nThe result are the same with version 1.0a11 and 1.0a12 from pypi.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nawendt": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1248", "title": "Georeference metadata not read from some GRIB files", "body": "## Expected behavior and actual behavior.\r\n\r\nI have been working with GRIB (version 2) data and have run into an issue where the georeference metadata are not extracted (i.e., the CRS is missing, affine parameters are incorrect, etc.). However, if I simply use the standard GDAL Python bindings, the metadata are extracted. The data I am working with is from the [NCEP SREF](http://www.nco.ncep.noaa.gov/pmb/products/sref/) weather forecast model.\r\n\r\n## Steps to reproduce the problem.\r\nI use `rasterio` as follows:\r\n```python\r\nimport rasterio\r\ndat = rasterio.open('my_grib_file.grib2')\r\ndat.profile\r\n```\r\nwhich produces the following output\r\n```python\r\n>>> {'affine': Affine(1.0, 0.0, -0.5, 0.0, 1.0, -0.5),\r\n 'count': 523,\r\n 'crs': CRS({}),\r\n 'driver': 'GRIB',\r\n 'dtype': 'float64',\r\n 'height': 129,\r\n 'nodata': None,\r\n 'tiled': False,\r\n 'transform': (-0.5, 1.0, 0.0, -0.5, 0.0, 1.0),\r\n 'width': 185}\r\n```\r\nWith `osgeo.gdal` (in a separate session)\r\n```python\r\nfrom osgeo import gdal\r\ndat = gdal.Open('my_grib_file.grib2')\r\ndat.GetProjectionRef()\r\ndat.GetGeoTransform()\r\n```\r\nwhich produces\r\n```python\r\n>>> 'PROJCS[\"unnamed\",GEOGCS[\"Coordinate System imported from GRIB file\",DATUM[\"unknown\",SPHEROID[\"Sphere\",6371229,0]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic_2SP\"],PARAMETER[\"standard_parallel_1\",25],PARAMETER[\"standard_parallel_2\",25],PARAMETER[\"latitude_of_origin\",25],PARAMETER[\"central_meridian\",265],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0]]'\r\n>>> (-4246424.496915466, 40635.0, 0.0, 4388899.238982436, 0.0, -40635.0)\r\n```\r\n\r\n## Operating systems\r\n\r\nRHEL 6\r\n\r\n## Rasterio version and provenance\r\n\r\nrasterio 0.36.0 via conda-forge\r\ngdal 2.1.3 via conda-forge\r\npython 3.6.4 via conda-forge\r\n\r\n## Other information\r\n\r\nI have verified that both `osgeo.gdal` and `rasterio` are using the same GDAL C library. When I use the same methods as above on another GRIB (this time version 1) from a different weather forecast model, the georeference metadata are read correctly. This would indicate it could be an issue with individual files, but, as I show above, the same GDAL library reads the correct georeference data when not using `rasterio`.\r\n\r\nI determined that the issue occurs when `GDALGetProjectionRef` is called in `read_crs` from `_base.pyx`. What I did then was to create a small C program that uses `GDALGetProjectionRef` to access the georeference information and print it to STDOUT. That worked just fine and produced the same information as when using `osgeo.gdal`. I also built rasterio from source in a separate conda environment and still had the same problem. This is what ultimately led me to believe that the issue has something to do with what is getting passed around in `rasterio` versus the GDAL C library itself or something with my conda environments.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackedbellini": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1242", "title": "Windowed read for a large single-block data", "body": "I have a large data (2gb geotiff image) that I need to process and write to a new image, but the computer I'm going to process it only has 512mb of ram.\r\n\r\nLooking at the windowed read/write from the documentation I wrote a code that reads and writes using a window of 50cols x 50rows. I slide that window through all the image.\r\n\r\nI'm testing the code in my development machine, which has 8gb of ram. I notied that, when doing the processing, the whole image got loaded in the memory, even though I was using windowed  read/write.\r\n\r\nOne thing that I noticed is that the image has only one block. More specifically, if I call `src.block_windows(1)` it will give me only one window, and that window takes the whole image.\r\n\r\nSo, I don't know if this is an issue in rasterio or is something that I'm doing wrong", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mheppner": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1241", "title": "Recreating gdalwarp with alpha band", "body": "I apologize in advance that this is for help and not a bug report, but the rasterio tag on StackOverflow seems to get little traffic, and I couldn't find a Gitter or Slack channel. Are there are places for usage help or examples?\r\n\r\nI'm trying to figure out how to convert a `gdalwarp` command into a rasterio-equivilant, but can't quite figure it out. I'm basically trying to make a tile:\r\n\r\n```sh\r\ngdalwarp \\\r\n    -of PNG \\                                       # output format\r\n    -t_srs EPSG:3857 \\                              # target SRS\r\n    -ts 256 256 \\                                   # target size, width x height\r\n    -te 4696291.0 3757032.8 5009377.0 4070118.8 \\   # target bounds\r\n    -dstalpha \\                                     # add an alpha band to represent nodata\r\n    /tmp/input.tiff \\\r\n    /tmp/output.png\r\n```\r\n\r\nWhich looks something like this (notice the source image is zoomed out, scaled, positioned relative to the bounds, and surrounded by transparency):\r\n\r\n![gdalwarp](https://user-images.githubusercontent.com/2390428/34447122-06bd5fd4-ecaf-11e7-953b-a3a38f2862b2.png)\r\n\r\nI've noticed a few opened issues about adding support for the alpha band in `warp.reproject()`, but I'm wondering if something could be achieved using `WarpedVRT` instead. This is about as close as I can get:\r\n\r\n```python\r\nimport rasterio\r\nfrom rasterio.vrt import WarpedVRT\r\nfrom rasterio.io import MemoryFile\r\nfrom rasterio.windows import Window\r\n\r\n\r\nbounds = [4696291.0, 3757032.8, 5009377.0, 4070118.8]\r\nwidth = height = 256\r\n\r\nwith rasterio.open('/tmp/input.tiff') as src:\r\n    dst_window = Window(*bounds)\r\n\r\n    with WarpedVRT(src,\r\n                   dst_crs='EPSG:3857',\r\n                   dst_window=dst_window,\r\n                   width=width,\r\n                   height=height) as vrt:\r\n        \r\n        vrt_window = vrt.window(*bounds)\r\n\r\n        data = vrt.read(window=vrt_window)\r\n\r\n        profile = vrt.profile.copy()\r\n        profile['width'] = width\r\n        profile['height'] = height\r\n        profile['driver'] = 'PNG'\r\n        profile['transform'] = vrt.window_transform(vrt_window)\r\n\r\n        with open('/tmp/output.png', 'w', **profile) as dst:\r\n            dst.write(data)\r\n```\r\n\r\nWhich results in an image like this:\r\n\r\n![rasterio](https://user-images.githubusercontent.com/2390428/34447359-100e47e0-ecb1-11e7-8269-eaa33d967d44.png)\r\n\r\nDoes a `WarpedVRT` snap to it's own maximum bounds if the `dst_window` is larger? Can it be used to keep an alpha channel for nodata?\r\n\r\n## Operating system\r\n\r\nMac OS X 10.13.2\r\n\r\n## Rasterio version and provenance\r\n\r\nPython 3.6.3\r\nGDAL 2.2.3\r\nnumpy==1.13.3\r\nrasterio==1.0a12\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "whlteXbread": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1240", "title": "`rasterio.mask.mask` masks images with rotation terms in transforms incorrectly", "body": "## Overview\r\n\r\nI've got some images that have rotation terms in their transform. If I attempt to use `rasterio.mask.mask`, I find that the mask is generated incorrectly. It's fairly easy to demonstrate this issue in `rasterio.features.geometry_window`. \r\n\r\nBasically, the code that finds the bounds of the shapes does so in the CRS domain. The `top`, `bottom`, `left`, and `right` are calculated by finding the extrema in the CRS domain, which is a reasonable approach, but assumes that the image transform has no rotation terms (even though north can be up or down!). This results in corners that don't correspond to corners in the raster's pixel domain which causes incorrect and sometimes faulty window generation.\r\n\r\nI was able to get results that made more sense by converting the shape vertices to values in the pixel domain, and then finding the extrema. But of course it's silly to convert to the raster pixel domain only to convert them back to the CRS domain, which is what `rasterio.windows.from_bounds` expects. That said, it's unclear how I would go about addressing this issue.\r\n\r\nInterestingly, the mask itself is generated correctly. I don't know the codebase well enough to know if there is potential for synergy there.\r\n\r\nI will work on creating some data that will reproduce the issues I'm seeing.\r\n\r\n## Expected behavior:\r\nUsing `rasterio.mask.mask` on an image with rotation components in its transform should correctly mask an image based on shape specified.\r\n\r\n## Actual behavior:\r\nIn some cases,  the error `width and height must be > 0` (`rasterio.features`, line 288) is raised.\r\n\r\nIn other cases, a mask is generated (properly) but the window cuts off part of the mask.\r\n\r\n## Steps to reproduce the problem:\r\nUsing an image with rotation terms in the transform, attempt to use `rasterio.mask.mask`.\r\n\r\n## Operating system:\r\n\r\nUbuntu 17.04 (but the bug is OS independent)\r\n\r\n## Rasterio version and provenance\r\nInstalled from source.\r\n\r\n```\r\n>>> import rasterio\r\n>>> rasterio.__version__\r\n'1.0a12'```\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geowurster": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1234", "title": "A color interp test fails when running against GDAL trunk", "body": "`tests/test_colorinterp.py::test_set_colorinterp_all` has been failing for a few months [on Travis against GDAL trunk](https://travis-ci.org/mapbox/rasterio/jobs/315618227).\r\n\r\nhttps://github.com/mapbox/rasterio/blob/5f1c3ed9d2e2b5bc8dabde0f5cb8bdd00759fc7d/tests/test_colorinterp.py#L86\r\n\r\nFor `GDAL<=2.2` the first band could never be `undefined` and GDAL would change it to `gray`, but it looks like `undefined` is now an allowed value on GDAL trunk.  @rouault is this correct?  I couldn't find any recent tickets in trac.\r\n\r\nFailure report:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_________________ test_set_colorinterp_all[ColorInterp.grey0] __________________\r\npath_4band_no_colorinterp = '/tmp/pytest-of-travis/pytest-0/test_set_colorinterp_all_Color1/4band-byte-no-ci.tif'\r\nci = <ColorInterp.grey: 1>\r\n    @pytest.mark.parametrize(\"ci\", ColorInterp.__members__.values())\r\n    def test_set_colorinterp_all(path_4band_no_colorinterp, ci):\r\n    \r\n        \"\"\"Test setting with all color interpretations.\"\"\"\r\n    \r\n        with rasterio.open(path_4band_no_colorinterp, 'r+') as src:\r\n            all_ci = list(src.colorinterp)\r\n            all_ci[1] = ci\r\n            src.colorinterp = all_ci\r\n    \r\n        with rasterio.open(path_4band_no_colorinterp) as src:\r\n>           assert src.colorinterp[1] == ci\r\nE           assert <ColorInterp.undefined: 0> == <ColorInterp.grey: 1>\r\ntests/test_colorinterp.py:96: AssertionError\r\n---------------------------- Captured stderr setup -----------------------------\r\n```\r\n\r\nThe failing test takes an image with no color interpretation and sets the color interpretation of the first band to each of the color interpretation options.  More specifically it takes a 4 band image with color interpretation `gray undefined undefined undefined` because older versions of GDAL silently switched an `undefined` first band to `gray`.\r\n\r\nThis snippet illustrates the problem, succeeds on `GDAL<=2.2` and fails on GDAL trunk:\r\n\r\n```python\r\nimport affine\r\nimport rasterio\r\nfrom rasterio import shutil as rio_shutil\r\nfrom rasterio.enums import ColorInterp\r\n\r\n\r\npath_4band_no_colorinterp = '4band-no-ci.tif'\r\n\r\n\r\n# This seems to be a GDAL default.  GDAL 2.2 allows 'undefined' for first\r\n# band, but older versions silently convert to 'gray'\r\nundefined_ci = (\r\n    ColorInterp.gray,\r\n    ColorInterp.undefined,\r\n    ColorInterp.undefined,\r\n    ColorInterp.undefined)\r\n\r\n\r\nprofile = {\r\n    'height': 10,\r\n    'width': 10,\r\n    'count': 4,\r\n    'dtype': rasterio.ubyte,\r\n    'transform': affine.Affine(1, 0.0, 0,\r\n                               0.0, -1, 1),\r\n    'driver': 'GTiff',\r\n    'photometric': 'minisblack'\r\n}\r\n\r\nwith rasterio.open(path_4band_no_colorinterp, 'w', **profile) as src:\r\n    src.colorinterp = undefined_ci\r\n\r\n# Ensure color interp was set.\r\nwith rasterio.open(path_4band_no_colorinterp) as src:\r\n    if src.colorinterp != undefined_ci:\r\n        raise ValueError(\r\n            \"Didn't properly set color interpretation.  GDAL can \"\r\n            \"forcefully make assumptions.\")\r\n\r\n\r\nfor ci in ColorInterp.__members__.values():\r\n\r\n    with rasterio.open(path_4band_no_colorinterp, 'r+') as src:\r\n        all_ci = list(src.colorinterp)\r\n        # Adjust CI for first band.  This appears to be failing on GDAL\r\n        # trunk for 'ColorInterp.gray' and 'ColorInterp.grey', which are\r\n        # aliases for the same value.\r\n        all_ci[1] = ci\r\n        src.colorinterp = all_ci\r\n\r\n    with rasterio.open(path_4band_no_colorinterp) as src:\r\n        assert src.colorinterp[1] == ci, \"Expected {!r} but found {!r}\".format(src.colorinterp[1], ci)\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1227", "title": "Cleanup doc warnings", "body": "Docs are built with:\r\n\r\n```console\r\n$ cd docs\r\n$ make html\r\n```\r\n\r\nbut emit a ton of warnings.  It looks like some things have moved around.  Switching from `numpydoc` to Sphinx's builtin [`sphinx.ext.napoleon`](http://www.sphinx-doc.org/en/stable/ext/napoleon.html`) [may remove some warnings](https://stackoverflow.com/questions/12206334/sphinx-autosummary-toctree-contains-reference-to-nonexisting-document-warnings).  `napoleon` is a builtin Sphinx extension and supports translating Numpy-style docstrings, which is what we use.\r\n\r\nHere are the current warnings:\r\n\r\n```console\r\n$ cd docs && make html\r\nsphinx-build -b html -d _build/doctrees   . _build/html\r\nRunning Sphinx v1.6.5\r\nloading pickled environment... done\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [html]: targets for 0 source files that are out of date\r\nupdating environment: 0 added, 4 changed, 0 removed\r\nreading sources... [100%] topics/index                                             \r\n/Users/wursterk/code/rasterio/docs/cli.rst:174: WARNING: toctree contains reference to nonexisting document 'calc'\r\n/Users/wursterk/code/rasterio/docs/index.rst:61: WARNING: toctree contains reference to nonexisting document 'topics/nodata'\r\n/Users/wursterk/code/rasterio/docs/python_manual.rst:15: WARNING: toctree contains reference to nonexisting document 'reading'\r\n/Users/wursterk/code/rasterio/docs/python_manual.rst:15: WARNING: toctree contains reference to nonexisting document 'working_with_datasets'\r\n/Users/wursterk/code/rasterio/docs/python_manual.rst:15: WARNING: toctree contains reference to nonexisting document 'writing'\r\n/Users/wursterk/code/rasterio/docs/python_manual.rst:15: WARNING: toctree contains reference to nonexisting document 'topics'\r\n/Users/wursterk/code/rasterio/docs/python_manual.rst:15: WARNING: toctree contains reference to nonexisting document 'osgeo_gdal_migration'\r\n/Users/wursterk/code/rasterio/docs/topics/index.rst:4: WARNING: toctree contains reference to nonexisting document 'topics/nodata'\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... /Users/wursterk/code/rasterio/docs/python_manual.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/rasterio.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/topics/calc.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/topics/configuration.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/topics/index.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/topics/profiles.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/topics/reading.rst: WARNING: document isn't included in any toctree\r\n/Users/wursterk/code/rasterio/docs/topics/writing.rst: WARNING: document isn't included in any toctree\r\ndone\r\npreparing documents... done\r\nwriting output... [100%] topics/index                                              \r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.coords.BoundingBox.count'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.coords.BoundingBox.index'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.is_epsg_code'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.is_geographic'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.is_projected'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.is_valid'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.wkt'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.clear'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.copy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.from_epsg'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.from_string'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.from_wkt'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.fromkeys'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.get'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.items'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.keys'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.pop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.popitem'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.setdefault'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.to_dict'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.to_string'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.update'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.crs.CRS.values'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.Env.is_credentialized'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.Env.can_credentialize_on_enter'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.Env.credentialize'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.Env.drivers'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.GDALVersion.at_least'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.GDALVersion.from_string'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.env.GDALVersion.runtime'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.affine'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.block_shapes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.closed'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.colorinterp'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.compression'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.count'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.descriptions'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.driver'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.dtypes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.files'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.height'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.indexes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.interleaving'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.is_tiled'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.kwds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.mask_flag_enums'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.mask_flags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.meta'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.mode'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.name'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.nodata'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.options'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.photometric'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.profile'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.res'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.shape'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.subdatasets'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.units'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.width'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.block_size'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.block_window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.block_windows'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.build_overviews'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.checksum'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.close'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.colormap'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.dataset_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.get_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.get_gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.get_nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.get_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.index'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.lnglat'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.overviews'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.read'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.read_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.read_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.read_masks'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.read_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.sample'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.set_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.set_description'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.set_gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.set_nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.set_units'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.start'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.stop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.tags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.update_tags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.window_bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.window_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.write'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.write_band'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.write_colormap'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.write_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.write_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.BufferedDatasetWriter.xy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.affine'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.block_shapes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.closed'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.colorinterp'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.compression'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.count'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.descriptions'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.driver'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.dtypes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.files'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.height'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.indexes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.interleaving'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.is_tiled'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.kwds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.mask_flag_enums'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.mask_flags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.meta'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.mode'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.name'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.nodata'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.options'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.photometric'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.profile'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.res'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.shape'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.subdatasets'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.units'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.width'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.block_size'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.block_window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.block_windows'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.checksum'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.close'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.colormap'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.dataset_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.get_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.get_gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.get_nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.get_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.index'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.lnglat'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.overviews'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.read'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.read_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.read_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.read_masks'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.read_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.sample'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.stop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.tags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.window_bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.window_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetReader.xy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.affine'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.block_shapes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.closed'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.colorinterp'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.compression'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.count'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.descriptions'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.driver'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.dtypes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.files'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.height'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.indexes'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.interleaving'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.is_tiled'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.kwds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.mask_flag_enums'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.mask_flags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.meta'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.mode'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.name'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.nodata'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.options'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.photometric'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.profile'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.res'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.shape'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.subdatasets'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.units'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.width'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.block_size'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.block_window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.block_windows'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.build_overviews'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.checksum'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.close'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.colormap'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.dataset_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.get_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.get_gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.get_nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.get_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.index'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.lnglat'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.overviews'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.read'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.read_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.read_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.read_masks'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.read_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.sample'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.set_crs'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.set_description'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.set_gcps'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.set_nodatavals'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.set_units'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.start'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.stop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.tags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.update_tags'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.window_bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.window_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.write'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.write_band'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.write_colormap'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.write_mask'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.write_transform'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.DatasetWriter.xy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.close'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.exists'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.getbuffer'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.open'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.read'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.seek'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.tell'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.MemoryFile.write'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.close'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.exists'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.getbuffer'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.open'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.read'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.seek'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.tell'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.io.ZipMemoryFile.write'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.__call__'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.clear'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.copy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.fromkeys'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.get'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.items'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.keys'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.pop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.popitem'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.setdefault'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.update'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.DefaultGTiffProfile.values'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.__call__'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.clear'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.copy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.fromkeys'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.get'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.items'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.keys'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.pop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.popitem'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.setdefault'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.update'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.profiles.Profile.values'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.transform.TransformMethodsMixin.index'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.transform.TransformMethodsMixin.xy'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.crop'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.flatten'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.from_offlen'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.from_ranges'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.from_slices'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.intersection'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.round_lengths'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.round_offsets'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.round_shape'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.todict'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.toranges'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.Window.toslices'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.WindowMethodsMixin.window'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.WindowMethodsMixin.window_bounds'\r\n/Users/wursterk/code/rasterio/docs/index.rst:: WARNING: toctree contains reference to nonexisting document 'api/rasterio.windows.WindowMethodsMixin.window_transform'\r\ngenerating indices... genindex py-modindex\r\nhighlighting module code... [100%] rasterio.vrt                                    \r\nwriting additional pages... search\r\ncopying static files... WARNING: html_static_path entry '/Users/wursterk/code/rasterio/docs/_static' does not exist\r\ndone\r\ncopying extra files... done\r\ndumping search index in English (code: en) ... done\r\ndumping object inventory... done\r\nbuild succeeded, 310 warnings.\r\ntouch _build/html/.nojekyll\r\n\r\nBuild finished. The HTML pages are in _build/html.\r\n``", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1214", "title": "Add Cloud Optimized GeoTIFF profile", "body": "Relates to #987\r\n\r\nAdd a `rasterio.profile` for Cloud [Optimized GeoTIFF](http://www.cogeo.org/) to make producing compliant images easier.  GDAL includes a [validation script](https://github.com/OSGeo/gdal/blob/b9f7526103b961f8fec87acb75743b1cad14fed3/gdal/swig/python/samples/validate_cloud_optimized_geotiff.py) we can use for testing.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1214/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1203", "title": "Omitting 'driver' when creating a new image does not produce a helpful error", "body": "## Expected behavior and actual behavior.\r\n\r\nAttempting to create an image without a driver produces a cryptic error that does not inform the user of the underlying problem.\r\n\r\n```console\r\nTraceback (most recent call last):\r\n  File \"buh.py\", line 12, in <module>\r\n    with rio.open('image.tif', 'w', **profile) as dst:\r\n  File \"/Users/kevin.wurster/code/rasterio/rasterio/__init__.py\", line 248, in open\r\n    s = get_writer_for_driver(driver)(fp, mode, driver=driver,\r\n  File \"/Users/kevin.wurster/code/rasterio/rasterio/io.py\", line 163, in get_writer_for_driver\r\n    if driver_can_create(driver):\r\n  File \"rasterio/_base.pyx\", line 102, in rasterio._base.driver_can_create (rasterio/_base.c:3871)\r\n    return driver_supports_mode(drivername, 'DCAP_CREATE')\r\n  File \"rasterio/_base.pyx\", line 85, in rasterio._base.driver_supports_mode (rasterio/_base.c:3586)\r\n    drivername = drivername.encode('utf-8')\r\nAttributeError: 'NoneType' object has no attribute 'encode'\r\n```\r\n\r\n## Steps to reproduce the problem.\r\n\r\n```python\r\nimport rasterio as rio\r\n\r\nprofile = {\r\n    'height': 1,\r\n    'width': 1,\r\n    'count': 1,\r\n    'nodata': None,\r\n    'dtype': rio.uint8,\r\n}\r\n\r\n\r\nwith rio.open('image.tif', 'w', **profile) as dst:\r\n    pass\r\n```\r\n\r\nAdding `driver='GTiff'` creates the image without issue.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1187", "title": "Isolate test files", "body": "I learned a lot about `GDALPAMDataset()` in https://github.com/mapbox/rasterio/pull/1134 and the unexpected pains it can introduce when testing against the same file.  One way we can guard ourselves from unexpected behavior is to have all of our `pytest` fixtures copy files from `tests/data` every time they execute.  This copy must be performed with Python's `shutil.copy()` function as using GDAL can trigger a PAM (`.aux.xml`) file to be written.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1187/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1181", "title": "Deprecate '-f' for '--force-overwrite' and '--force-overwrite' in favor of '--overwrite'", "body": "See https://github.com/mapbox/rasterio/pull/1173#discussion_r144642158 for background.  We have `-f` for `--format`, but also `--force-overwrite`.  The plan is to:\r\n\r\n- Deprecate the use of `-f` as a short option for `--force-overwrite` as `-f` is a better short option for `--format`.\r\n- Deprecate `--force-overwrite`.\r\n- Add the more universal `--overwrite`.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1178", "title": "'src.dataset_mask()' ignores alpha band when more than 4 bands are present", "body": "Given a 5 band image where the last band is a valid alpha band, `src.dataset_mask()` will entirely ignore the alpha band and produce a completely unmasked array.\r\n\r\nHere's what's happening:\r\n\r\n1. Create a 5 band image.\r\n2. Write different constant values to bands 1 through 4.\r\n3. Write an alpha band to band 5 that only has a transparent 3 x 3 square in the upper left corner.\r\n4. Force the color interpretation of the file's 5th band to be alpha.\r\n5. Generate a mask with `src.dataset_mask()` and drop that in a new file.\r\n6. Write only the alpha band to a new file.\r\n7. Compare alpha band file to `src.dataset_mask()`.  The latter should be entirely transparent.\r\n\r\n```\r\nfrom osgeo import gdal\r\n\r\nimport numpy as np\r\nimport rasterio as rio\r\n\r\n\r\ndsm_input = 'dsm-input.tif'\r\nalpha_file = 'alpha.tif'\r\nds_mask_file = 'dataset-mask.tif'\r\n\r\n# GDALPAMDataset can get weird.  Make sure none of the test files exist.\r\nfor path in [dsm_input, alpha_file, ds_mask_file]:\r\n    try:\r\n        gdal.Unlink(path)\r\n    except:\r\n        pass\r\n\r\n\r\nprofile = {\r\n    'driver': 'GTiff',\r\n    'height': 10,\r\n    'width': 10,\r\n    'count': 5,\r\n    'dtype': rio.ubyte,\r\n}\r\nwith rio.open(dsm_input, 'w', **profile) as dst:\r\n    data = np.zeros(dst.shape, dtype=profile['dtype'])\r\n    \r\n    # Write a constant value to each band.\r\n    dst.write(data + 1, 1)\r\n    dst.write(data + 2, 2)\r\n    dst.write(data + 3, 3)\r\n    dst.write(data + 4, 4)\r\n    \r\n    # Make a 3x3 square in the upper left corner transparent.\r\n    alpha = np.zeros(dst.shape, dtype=profile['dtype'])\r\n    alpha[:3, :3] = 255\r\n    dst.write(alpha, 5)\r\n\r\n\r\n# Force last band to be alpha.  This may create a '.aux.xml' to set the\r\n# new color interpreation.  That's fine.\r\nds = gdal.Open(dsm_input, gdal.GA_Update)\r\nband = ds.GetRasterBand(5)\r\nband.SetColorInterpretation(gdal.GCI_AlphaBand)\r\nband = None\r\nds = None\r\n\r\n\r\nwith rio.open(dsm_input) as src:\r\n        \r\n    profile = src.profile.copy()\r\n    profile['count'] = 1\r\n    \r\n    # Write the output of 'src.dataset_mask()' and just the alpha band\r\n    with rio.open(ds_mask_file, 'w', **profile) as dst:\r\n        dst.write(src.dataset_mask(), 1)\r\n    \r\n    # Copy just the alpha band to a new file\r\n    with rio.open(alpha_file, 'w', **profile) as dst:\r\n        dst.write(src.read(5), 1)\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1175", "title": "Replace 'src.set_*()' methods with getter/setter properties", "body": "Like `src.colorinterp() -> src.colorinterp` in https://github.com/mapbox/rasterio/pull/1134.  A quick search shows these:\r\n\r\n```\r\n$ git grep \"def set_\"\r\nrasterio/_env.pyx:cpdef set_gdal_config(key, val, normalize=True):\r\nrasterio/_io.pyx:    def set_crs(self, crs):\r\nrasterio/_io.pyx:    def set_nodatavals(self, vals):\r\nrasterio/_io.pyx:    def set_description(self, bidx, value):\r\nrasterio/_io.pyx:    def set_units(self, bidx, value):\r\nrasterio/_io.pyx:    def set_gcps(self, gcps, crs=None):\r\n```\r\n\r\nLooks like `src.gcps` might be a bit harder.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1170", "title": "transform_geom() not properly catching NULL", "body": "I haven't dug into the code, but it looks like we're not catching a `NULL` somewhere in `transform_geom()` in some cases.\r\n\r\nSample code:\r\n\r\n```python\r\nimport rasterio as rio\r\nfrom rasterio.warp import transform, transform_geom\r\n\r\n\r\n# A polygon around 180, 90 with a single point falling outside the bounds\r\n# of EPSG:4326.\r\ngeom = {\r\n    'type': 'Polygon',\r\n    'coordinates': [[\r\n        [178, 83],\r\n        [178, 84],\r\n        [181, 91],  # Out of bounds\r\n        [179, 83],\r\n        [178, 83]\r\n    ]]\r\n}\r\n\r\n\r\n# Everything is fine.  Only 3 out of 4 points are reprojected as expected.\r\nprint(\"---> rasterio.Env(OGR_ENABLE_PARTIAL_REPROJECTION=True)\")\r\nwith rio.Env(OGR_ENABLE_PARTIAL_REPROJECTION=True):\r\n    reproj = transform_geom('EPSG:4326', 'EPSG:3857', geom)\r\n\r\n\r\n# A SystemError\r\nprint(\"---> rasterio.Env(OGR_ENABLE_PARTIAL_REPROJECTION=False)\")\r\ntry:\r\n    with rio.Env(OGR_ENABLE_PARTIAL_REPROJECTION=False):\r\n        reproj = transform_geom('EPSG:4326', 'EPSG:3857', geom)\r\nexcept SystemError as e:\r\n    print(str(e))\r\n\r\n\r\n# Error handler picks up the error\r\nprint(\"---> Default rasterio.Env(), which has OGR_ENABLE_PARTIAL_REPROJECTION=False\")\r\ntry:\r\n    reproj = transform_geom('EPSG:4326', 'EPSG:3857', geom)\r\nexcept Exception as e:\r\n    print(str(e))\r\n```\r\n\r\nproduces:\r\n\r\n```\r\n---> rasterio.Env(OGR_ENABLE_PARTIAL_REPROJECTION=True)\r\n---> rasterio.Env(OGR_ENABLE_PARTIAL_REPROJECTION=False)\r\n<built-in function _transform_geom> returned NULL without setting an error\r\n---> Default rasterio.Env(), which has OGR_ENABLE_PARTIAL_REPROJECTION=False\r\nFull reprojection failed, but partial is possible if you define OGR_ENABLE_PARTIAL_REPROJECTION configuration option to TRUE\r\n```\r\n\r\nThe second and third test cases both use `OGR_ENABLE_PARTIAL_REPROJECTION=False`, but an error is triggered in the second that is not in the third.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1149", "title": "Rasterio's GDAL config value normalization doesn't always work", "body": "Rasterio normalizes creation options like [`str(v).upper()`](https://github.com/mapbox/rasterio/blob/b69f4c061574952dd78ba924b8b3cc64df1122e0/rasterio/_io.pyx#L1873), which works for strings and ints, but not always for `True` and `False`. \r\n GeoTIFF's `ALPHA` creation option requires [`YES` or `NO`](http://www.gdal.org/frmt_gtiff.html) (and some other strings).  Using `True` results in a 4 band image where photometric interpretation is RGB, but the 4th band's color interpretation is `undefined`.  We normalize config options to [`ON` and `OFF`](https://github.com/mapbox/rasterio/blob/master/rasterio/_env.pyx#L141), but that also won't work for this creation option.  Verified on `1.0a9` and `master`.\r\n\r\nExample:\r\n\r\n```python\r\nimport rasterio\r\n\r\n\r\nprofile = {\r\n    'height': 1,\r\n    'width': 1,\r\n    'dtype': rasterio.uint8,\r\n    'count': 4,\r\n    'driver': 'GTiff',\r\n    'photometric': 'rgb',\r\n    'alpha': True\r\n}\r\n\r\n\r\ntrue_profile = profile.copy()\r\ntrue_profile['alpha'] = True\r\nwith rasterio.open('true.tif', 'w', **true_profile) as dst:\r\n    pass\r\nprint(\"True\")\r\nwith rasterio.open('true.tif') as src:\r\n    print([src.colorinterp(i) for i in range(1, src.count + 1)])\r\n\r\n\r\nyes_profile = profile.copy()\r\nyes_profile['alpha'] = 'yes'\r\nwith rasterio.open('yes.tif', 'w', **yes_profile) as dst:\r\n    pass\r\nprint(\"Yes\")\r\nwith rasterio.open('yes.tif') as src:\r\n    print([src.colorinterp(i) for i in range(1, src.count + 1)])\r\n\r\n\r\non_profile = profile.copy()\r\non_profile['alpha'] = 'on'\r\nwith rasterio.open('on.tif', 'w', **on_profile) as dst:\r\n    pass\r\nprint(\"On\")\r\nwith rasterio.open('on.tif') as src:\r\n    print([src.colorinterp(i) for i in range(1, src.count + 1)])\r\n\r\n\r\nfalse_profile = profile.copy()\r\nfalse_profile['alpha'] = False\r\nprint(\"False\")\r\nwith rasterio.open('false.tif', 'w', **true_profile) as dst:\r\n    pass\r\nwith rasterio.open('false.tif') as src:\r\n    print([src.colorinterp(i) for i in range(1, src.count + 1)])\r\n\r\n\r\nno_profile = profile.copy()\r\nno_profile['alpha'] = 'no'\r\nprint(\"No\")\r\nwith rasterio.open('no.tif', 'w', **true_profile) as dst:\r\n    pass\r\nwith rasterio.open('no.tif') as src:\r\n    print([src.colorinterp(i) for i in range(1, src.count + 1)])\r\n\r\n\r\noff_profile = profile.copy()\r\noff_profile['alpha'] = 'off'\r\nwith rasterio.open('off.tif', 'w', **on_profile) as dst:\r\n    pass\r\nprint(\"Off\")\r\nwith rasterio.open('off.tif') as src:\r\n    print([src.colorinterp(i) for i in range(1, src.count + 1)])\r\n```\r\n\r\nproduces:\r\n\r\n```python\r\nTrue\r\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>, <ColorInterp.undefined: 0>]\r\nYes\r\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>, <ColorInterp.alpha: 6>]\r\nOn\r\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>, <ColorInterp.undefined: 0>]\r\nFalse\r\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>, <ColorInterp.undefined: 0>]\r\nNo\r\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>, <ColorInterp.undefined: 0>]\r\nOff\r\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>, <ColorInterp.undefined: 0>]\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1018", "title": "Allow 'rasterio.features.rasterize()' to write to a 'rasterio.band()'", "body": "Some of Rasterio's GDAL algorithm wrappers allow operating on a `rasterio.band()` _or_ a Numpy array.  This would allow for burning geometries into larger than memory images on disk.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1012", "title": "Use CPLGetConfigOptions() in rasterio.Env() when discovering an existing GDAL environment", "body": "GDAL [will offer (in the next release)](https://trac.osgeo.org/gdal/changeset/37273) a function for getting the currently set environment options, with the exception of those set as shell environment variables and the standard `GDAL_CACHEMAX` special case.  Rasterio's threaded environments inherit the main thread's environment (https://github.com/mapbox/rasterio/pull/997), so we should consider where to use `CPLGetConfigOption()` vs. `CPLGetThreadLocalConfigOption()`.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1011", "title": "Better default rasterio.Env() state", "body": "Rasterio imposes some fairly sane GDAL environment defaults, but in a _very_ transparent way:\r\n\r\n```python\r\nimport rasterio as rio\r\nfrom rasterio.env import get_gdal_config\r\n\r\noptions = {}\r\n\r\nwith rio.Env(**options) as env:\r\n    print(env.options)\r\n    print(get_gdal_config('check_with_invert_proj'))\r\n```\r\n\r\nAnd we don't offer an easy way to disable them:\r\n\r\n```python\r\nimport rasterio as rio\r\n\r\nwith rio.Env(**{k: not v for k, v in rio.env.default_options.items()}) as env:\r\n    pass\r\n```\r\n\r\nThe more time I spend poking at Rasterio's management of GDAL's environment, the more I think think its responsible to transparently offer a sane default environment through `@ensure_env`, but a completely empty GDAL environment when the user instantiates their own `rasterio.Env()`.  Those coming from `osgeo.gdal` may get tripped up initially when they need to set something in the GDAL environment and discover the `rasterio.Env()` they explicitly create is different than the one magically provided by `@ensure_env`, but some really solid documentation should lower that initial hurdle.\r\n\r\nSomething like this should do it:\r\n\r\n```python\r\nclass Env:\r\n\r\n    @classmethod\r\n    def default_options(cls):\r\n        return {\r\n            'CHECK_WITH_INVERT_PROJ': True,\r\n            'GTIFF_IMPLICIT_JPEG_OVR': False,\r\n            \"RASTERIO_ENV\": True\r\n        }\r\n    \r\n    @classmethod\r\n    def from_defaults(cls, *args, **kwargs):\r\n        options = Env.default_options()\r\n        options.update(**kwargs)\r\n        return Env(*args, **options)\r\n```\r\n\r\nUsers desiring the defaults can do:\r\n\r\n```python\r\nwith Env.from_defaults() as env:\r\n    ...\r\n```\r\n\r\nAdditional environment options can still be set, and specific defaults can be switched off:\r\n\r\n```python\r\nwith Env.from_defaults(something='else', GTIFF_IMPLICIT_JPEG_OVR=True) as env:\r\n    ...\r\n```\r\n\r\nAnd `@ensure_env` would create its environment with `Env.from_defaults()`.\r\n\r\nThe test cleanup mentioned in https://github.com/mapbox/rasterio/issues/1009#issuecomment-293443234 would need to happen first.\r\n\r\nThoughts?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1009", "title": "Rasterio should not directly instantiate Env() outside of @ensure_env", "body": "Now that `rasterio.env.ensure_env()` only creates an environment if one does not already exist, we should rely on it for creating a GDAL environment only when necessary.  I think the only remaining instances are:\r\n\r\n- `rasterio.transform.transform()`\r\n- `rasterio.open()`\r\n- `rasterio.io.MemoryFile.open()`\r\n\r\nThe hardest is `rasterio.open()` because it needs `Env()` in order to authenticate with AWS.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1009/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/992", "title": "Add --nodata to rio-rasterize", "body": "3 scenarios:\r\n\r\n1. When updating an existing image, use `--nodata` if given, otherwise use the input image.\r\n2. When creating a new image, set nodata to `--nodata` if given, not `--fill`.\r\n3. When referencing a template image with `--like`, pull nodata from `--nodata` if given.\r\n\r\nBe sure to handle `--nodata null` in all cases.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/979", "title": "Windows with zero area", "body": "The first window has zero area in both X and Y dimensions and the second two have zero area in the X _or_ Y dimension.  All three should probably raise an exception.\r\n\r\n```python\r\nimport rasterio as rio\r\nfrom rasterio.windows import Window\r\n\r\nwith rio.open('tests/data/RGB.byte.tif') as src:\r\n    print(src.height, src.width)\r\n    for window in ((0, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 0)):\r\n        window = Window(*window)\r\n        data = src.read(1, window=window)\r\n        print(window, data.shape)\r\n\r\n# Output\r\n718 791\r\nWindow(col_off=0, row_off=0, num_cols=0, num_rows=0) (718, 791)\r\nWindow(col_off=0, row_off=1, num_cols=0, num_rows=0) (0, 791)\r\nWindow(col_off=1, row_off=0, num_cols=0, num_rows=0) (718, 0)\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/871", "title": "Support for datasource connection strings in the CLI", "body": "https://github.com/mapbox/rasterio/pull/364 introduced support for non-file datasources in `rasterio.open()`, but the command line still does a file existence check that raises an exception for drivers like [`PLMosaic`](https://github.com/mapbox/rasterio/blob/709435a79a08849015bce02ca54b945b7e80b2bc/rasterio/rio/options.py#L93-L96).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/818", "title": "Catch BrokenPipeError in CLI and don't log exception", "body": "When piping multiline outputs like feature sequences to another utility that does not fully consume the output an exception is raised and logged to `stdout`.  If its easy, handling `KeyboardInterrupt` would be nice too.  `BrokenPipeError` is ignored by default on Python 3, but Python 2 takes a bit of extra handling like:\n\n``` python\ntry:\n    # CLI logic\nexcept BrokenPipeError as e:\n    if sys.version_info[0] == 2 and 'broken pipe' in str(e):\n        ctx.exit()  # Exit the click context\n    else:\n        raise\nexcept Exception:\n    logger.exception(\"Exception encountered ...\")\n    raise\n```\n\nFor example:\n\n``` console\n$ rio shapes --as-mask tests/data/RGB.byte.tif --sequence | head -1\n{\"bbox\": [-77.7512262305336, 25.260295422963775, -77.7481890014638, 25.26305737092772], \"geometry\": {\"coordinates\": [[[-77.7512262305336, 25.263001895119007], [-77.75116519476539, 25.260295422963775], [-77.7481890014638, 25.260350892010113], [-77.7482499714067, 25.26305737092772], [-77.7512262305336, 25.263001895119007]]], \"type\": \"Polygon\"}, \"id\": \"RGB.byte.tif:0\", \"properties\": {\"filename\": \"RGB.byte.tif\", \"val\": 255.0}, \"type\": \"Feature\"}\nException ignored in: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='UTF-8'>\nBrokenPipeError: [Errno 32] Broken pipe\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/796", "title": "Standardize use of GDAL geotransforms and Affine() in the internal API", "body": "_See https://github.com/mapbox/rasterio/pull/763#issuecomment-224481538 for background_\n\nPart of prepping for 1.0 is to [remove deprecated parameters](https://github.com/mapbox/rasterio/issues/516), which involves switching from GDAL style geotransforms to `affine.Affine()`.  https://github.com/mapbox/rasterio/pull/763 switches the public API over to `transform=affine.Affine()`, but the internal API (i.e. `rasterize -> _rasterize`) still uses GDAL geotransforms, which is fine, but we still call it a `transform`.  For instance, `rasterio._io.InMemoryRaster()` has a property called `transform` that returns a GDAL geotransform, which presents a confusing naming conflict when compared to `src.transform` now returning an `Affine()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/698", "title": "Can we use a pytest fixture to fully teardown the GDAL environment between tests?", "body": "To identify GDAL rasterio + GDAL environment issues like https://github.com/mapbox/rasterio/issues/694.  We already have a `gdalenv` fixture, but it doesn't fully tear down the GDAL shared library - https://github.com/mapbox/rasterio/pull/697#issuecomment-217533026.  This may not be easy, possible, or worth spending a lot of time on.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/432", "title": "MrSID appears to be registered but throws an IOError", "body": "Attempt to call `rio info`:\n\n``` console\nBelafonte:ortho_imagery_NAIPM14_wv003_2931124_01 wursterk$ rio info ortho_imagery-ortho_1-1_1n_s_wv003_2014_1.sid\nERROR:GDAL:CPLE_OpenFailed in `/Users/wursterk/Desktop/ortho_imagery_NAIPM14_wv003_2931124_01/ortho_imagery-ortho_1-1_1n_s_wv003_2014_1.sid' not recognised as a supported file format.\n\nERROR:rio:Exception caught during processing\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/rasterio/rio/info.py\", line 277, in info\n    with rasterio.open(input, mode) as src:\n  File \"/usr/local/lib/python2.7/site-packages/rasterio/__init__.py\", line 118, in open\n    s.start()\n  File \"rasterio/_base.pyx\", line 67, in rasterio._base.DatasetReader.start (rasterio/_base.c:2307)\n  File \"rasterio/_err.pyx\", line 67, in rasterio._err.GDALErrCtxManager.__exit__ (rasterio/_err.c:944)\nIOError: `/Users/wursterk/Desktop/ortho_imagery_NAIPM14_wv003_2931124_01/ortho_imagery-ortho_1-1_1n_s_wv003_2014_1.sid' not recognised as a supported file format.\n\nAborted!\n```\n\nProof of registration:\n\n``` console\nBelafonte:ortho_imagery_NAIPM14_wv003_2931124_01 wursterk$ rio env | grep SID\nJP2MrSID: MrSID JPEG2000\nMG4Lidar: MrSID Generation 4 / Lidar (.sid)\nMrSID: Multi-resolution Seamless Image Database (MrSID)\n\nBelafonte:ortho_imagery_NAIPM14_wv003_2931124_01 wursterk$ gdalinfo --formats | grep SID\n  MG4Lidar (ro): MrSID Generation 4 / Lidar (.sid)\n  MrSID (rov): Multi-resolution Seamless Image Database (MrSID)\n  JP2MrSID (rov): MrSID JPEG2000\n```\n\nWith `gdalinfo`:\n\n``` console\nBelafonte:ortho_imagery_NAIPM14_wv003_2931124_01 wursterk$ gdalinfo ortho_imagery-ortho_1-1_1n_s_wv003_2014_1.sid | head -4\nDriver: MrSID/Multi-resolution Seamless Image Database (MrSID)\nFiles: ortho_imagery-ortho_1-1_1n_s_wv003_2014_1.sid\n       ortho_imagery-ortho_1-1_1n_s_wv003_2014_1.sdw\nSize is 38718, 43134\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/f726753a124764c89edbfc8531c72829cfb2b9ae", "message": "Add C++11 flag when running on GDAL>=2.3"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0defe4af96e12beeb956c22dfab9642043e9e9e7", "message": "Add some clarification to docstring."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/817df2a9546b2f301e1f05dac70bb57280cc83d9", "message": "Shush noisy logs.  This does not need to be 'INFO' level logging."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/af411c1fc390c656c7851b5647c8e6b31e12487d", "message": "Add 2.2.3 to the build matrix."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/079e43a574a423c9c601f61ef42f63ee1f3d4e59", "message": "Merge pull request #1202 from mapbox/no_noci\n\nRemoved spurious line creating NOCI.tif from test"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ccb0ff9442b6ebf700a4997ba993418befbd2ebd", "message": "Use '--colorinterp red,green,blue' instead of '--colorinterp 0=red,2=green,3=blue'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4145d730159c9e1d6ab40d754ec3bfc0eba53b25", "message": "Generalize the 'path_4band_no_colorinterp' test fixture and add a 'path_3band_no_colorinterp'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/84201b1739a8499e53091959f1d07d3831a584bb", "message": "Clarify an error message."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f5b3bc54a9693b12b8b70b3797af6c26b9f3a241", "message": "Small test fixups that were discovered due to the test shuffle between 'test_rio_info.py' and 'test_rio_edit_info.py' pushing a bunch of code into the PR diff."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/06d4f82bcd543efaa9c235e106084a31ffce433c", "message": "Provide a better error when user specifies an invalid band index.  More legible control flow."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/548035480a5a8cd49011b2d9cecf0a0ac4a3fa0e", "message": "Merge master."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e439c1a68740f30200f47b1ffd1796d9216d57ea", "message": "Add GDAL 2.2.2 to the test matrix."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b7d023b5eb6656575c712fb56edc42708c62f6c3", "message": "Simplify a test."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d79647c375589dd3afc9b79377f8783816555582", "message": "Fix GDAL version dependent color interpretation test behavior."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c5bc2c5e83f1c54767cdba4d39774cabdc1b15c4", "message": "Remove duplicate tests."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/90c0099d694dd7d85df152a34c411f62468339dc", "message": "Make colorinterp a tuple for immutability."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/dad4e582bfeec21fb41cc423c3b000e25e992620", "message": "Split CLI tests."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d7b36a18db8bb96831660de2f989f51491622218", "message": "Fix a bug triggered by putting '--all' before '--like' on the commandline."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/15c4d53cd9f11baa16120f67eb152ca7153b6c95", "message": "Add colorinterp to '--all'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c90a79222d3348d5f237f4c6d2a876875a53d32e", "message": "Merge master."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8e1af2b4e7b438ea0278c5b626386c161d7b56d8", "message": "Raise an exception if using '--colorinterp like' and band count differs between template and target."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/18492868acdbafca5cf021a4d253c3e61a904739", "message": "Better errors when parsing '--colorinterp'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/897d0f52929f6c64fecb7f666f3b211aaf64afea", "message": "Need to indicate when '--like' flag has been used."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4be8804a2ea0c4275cf3ae697ea90a8ba1f2f26f", "message": "PR feedback."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/01a2a369c339562eadd1bd4402bc15428d4a0d4e", "message": "More GIL releasing."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ccc45f2902b21977b3e9fe205a5ec10ee40f9f84", "message": "Don't do test I/O in the current directory.\n\nThe 'data' fixture makes this 'os.unlink()' unnecessary.\n\nMissed another 'os.unlink()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8163f2d4edc9d3995a6491853d6e2e6642cee271", "message": "Merge master."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/13c6f4b5cb9ca4640293114f4bff13d9d3a4431b", "message": "Remove a workaround for a circular import error (#1174).  Fixed in #1177."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4e98a8d61e74a3836cc031a73ef504a501c85243", "message": "We already have a 'setup.cfg'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a0c31e67ff85f691765224cfa45e499b39da1a5d", "message": "Merge branch 'master' into shush-test-warnings"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a25bb157a2780bc6b7f44178020924ed8217b98b", "message": "Missed a 'src.colorinterp()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7dc14bb460d5617127848e50ed93201eff3886a0", "message": "Fix import."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fec2c8e6d2cc22044504075216b9ca73ffff0258", "message": "Missed a translation from Python bytes to C string."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/028ae12dae3eeeb3f99e0e61ae3a9c2882be637f", "message": "Merge master."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a6ce62cd228539bb4d39643c253cd5bf3c7e9972", "message": "Switch 'src.colorinterp' to a setter/getter."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/39ba2b63a1db02f785998ff3b07db8d0f0dd4a1b", "message": "I really have no idea whats going on here.  It looks like a namespace is being clobbered or modified but I can't figure out how or where."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e5d3085ccdb8846fd4dbc3de34cce7275385c4cf", "message": "Update docs to use 'rasterio.shutil.copy()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c5da3ed23b1f4479e39d80f316673d7de1483f75", "message": "Switching to 'rasterio.shutil.exists()' for validating paths produces a different exit code, and in some places raises an exception higher in the call stack."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b315a574b69c767ceb7f87f11810ce691f1b56c0", "message": "Ignore noisy Rasterio warnings."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9cb162a05fa03e1d60bf3b2855f891d6fc4d6c70", "message": "Emit 'RasterioDeprecationWarning' instead of 'FutureWarning' for deprecated features."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/36d5e355d5a815e73e0e5eaee389419ad8bad4ac", "message": "Emit 'NotGeoreferencedWarning' rather than 'UserWarning'.  This probably isn't the exact correct behavior as the data could have RPCs, but it at least puts the warning in the correct category for now."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/03e3850795144f470a7924aa16370606575aa3c7", "message": "+ .hypothesis/"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/70b2bc9b808dcea41be5ae9168dd83f232a788b2", "message": "Encapsulate deleting a dataset if it exists in a reusable function."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/79745767ff901efcabfff91b1861f0a1d2cea77f", "message": "Copy files with 'rasterio.shutil.copyfiles()', not 'shutil.copy()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9ed404324fc1881072bfd18babf759916a466624", "message": "+ 'rasterio.shutil.copyfiles()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/19df41c68a8dff8a1bf9ae7c092ff0b29eb06c00", "message": "Raise an exception when 'src.handle()' points to a close dataset."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8afdcca3ba56e2594c5329f78eb1e8f6c7bb99ec", "message": "Add a 'src.files' for getting a list of files associated with the dataset."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/2de20da7b0c30b6dae4e830ceb875a6cd5103bdf", "message": "Split 'tests/test_rio_features.py' into one file per command and rename to 'tests/test_rio_shapes.py'.\n\nMissed a few things in the 'tests/test_rio_features.py' split."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0e4f0a95ed3c483f550213ce364e5578e34964ab", "message": "rasterio._manage renamed to rasterio.shutil"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4acc4b32bb1208b088a8ff22f37590fae4dfc454", "message": "Release the GIL in 'rasterio.copy()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/aefea79606bace66c6f8676770214ca6527f606c", "message": "Rely on 'rasterio.exists()', 'rasterio.delete()', and GDAL rather than the 'os' module.\n\nUse 'rasterio.shutil.exists()', not 'os.path.exists()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a7e4ba07d4c636ec45ed6f8b8820859379e6dcbf", "message": "+ $ rio rm"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/71fcce9585f922abf7ac87c97bd4adcd82a2b420", "message": "Move tests/test_copy.py into tests/test_manage.py"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4dfaf5f82f12932fedcb68a11a39fb27f21eff73", "message": "+ rasterio.exists()\n\nSupport VSI paths in 'rasterio.exists()'.\n\nActually support VSI paths in 'rasterio.exists()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1f4f7cf9b2a7a438a5bcaa4ce8d76b08139814c5", "message": "+ rasterio.delete()\n\nSupport VSI paths in 'rasterio.delete()'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/80b2a746b0d1eb6c17da05f3a1a783e2aa502eb9", "message": "Need a module for generic data management tools."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b83b68c1c63a17c9cbc6b6a814f1877b55076181", "message": "+ Auto-generated Rasterio API RST docs and an 'ignore/' directory for assorted local dev files."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/2069c1e97f82fd00b6b862c8ae14aef538d2a80f", "message": "Only run NetCDF tests if NetCDF driver is installed."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/00dadd9d88a99da5824b11fc4142609cc180ad7f", "message": "Turns out a file with completely undefined color interpretation is possible."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4af241daa15e41b1a2ccf1de8e95dd2060703e2e", "message": "Ensure exceptions are raised for drivers that do not support setting color interpretation."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/05645fc58c7763e51a648450187194ca7dae79c3", "message": "Add note about 'like' to '--colorinterp' help.  Add feature to changelog."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/5e9f0685a791904af243a7976f55dce64109a9be", "message": "Allow setting color interpretation to 'undefined'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/629cc894813ab87c119bd4b7c8b01626a99c6f14", "message": "Do not raise an exception when setting to 'undefined' color interpretation.  Simplified method."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/647a17b3e79a824b2d862719545f52ec890ad5de", "message": "Test using all color interpretations for setting to catch more situations like 'undefined'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1f99ab07df1692bbf8e33b308e250250b92de0a8", "message": "Explicitly disallow setting color interpretation to 'undefined'.  It appears to work until the file is re-opened, at which point the original colorinterp is still present."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/de9d06884d3ab6106d98a21b8002dfd8ed903f99", "message": "Remove some dev cruft."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/25b3a0c7e95c8996792e5b520f22b0723d444b05", "message": "Ignore auto-generated RST docs for Ratserio module."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/897b80cb4adfc459ba6f2171233a89e166b8511f", "message": "Update color interpretation docs."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8d299ac8c8cad9ff17db2e727c544949c5cd57d7", "message": "Run a test that fails on a specific system on Travis instead of permanently skipping."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/5c9b9a34ac08fc41195018c0c874fdb28a690b17", "message": "It's just colorinterp."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d4d47be7bc380dc957e69a676a6bc46452507bd1", "message": "Test for bad colorinterp names."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/340fd5e91b3d70e0e6ae2f28bbe88a143358c67c", "message": "Combine tests for '--like' handlers into parametrized pytests."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/bf35b56aae6fff5c17580dbe69b0dbfa0368a0f7", "message": "Set colorinterp in '$ rio edit-info'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b6f82eab15a21b09fadfb3a3e8e1a34668afd148", "message": "Test setting colorinterp with a non-uint8 image.  A bit of test cleanup too."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/75b9dff8cc91f1f3a1e012f15e30104561fd0c5c", "message": "Track colorinterp when using '--like'."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0f9605bd2af55c1dee95b47addb0e3c0137af187", "message": "A function for creating a small image lacking color interpretation."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fe6bb981cf05882f85926ddb992aa1c6c7ab0cfb", "message": "New 'DatasetWriterBase.set_colorinterp()' method for setting a band's color interpretation."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8dd4271a88da51f7ed2a66dedfcb1643f333a815", "message": "Move '$ rio edit-info' tests into their own file."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a6e24b63f0e5e1e5c28c2a723107db6444755a96", "message": "Add fixture for grabbing the RGBA.byte.tif test file."}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/1079", "title": "[WIP] Support non-path connection strings", "body": "**Not ready**\r\n\r\nCloses #871\r\n\r\nI tried demonstrating this with a PostGIS raster table, but had some problems with my `$ brew install`'ed version of PostGIS lacking `raster2pgsql`.  The only other raster driver I am aware of that uses connection strings is Planet's `PLScenes` driver, although it requires setting up a https://planet.com/explorer account to get an API key.\r\n\r\nCurrently on master:\r\n\r\n```console\r\n$ PL_API_KEY=$(cat planet-api) rio info \"PLScenes:scene=20170602_180403_1008\"\r\nUsage: rio info [OPTIONS] INPUT\r\n\r\nError: Invalid value for \"INPUT\": PLScenes:scene=20170602_180403_1008 is not a valid input file\r\n```\r\n\r\nThe analogous GDAL command: `$ PL_API_KEY=$(cat planet-api) gdalinfo \"PLScenes:scene=20170602_180403_1008\"`\r\n\r\n### Problems ###\r\n\r\nThere are a bunch of `click.Path(exists=True)` that need to be resolved, but before I do that:\r\n\r\nMy initial goal for this PR was to change as little behavior as possible, however because the CLI does an existence check on every input image before executing, the CLI now incurs all of the network overhead associated with a `rasterio.open()` on remote datasets, including S3.  The tradeoff is that the CLI can raise a useful \"the input raster doesn't exist\" but the network overhead is a major drag that translates to real money for heavy users of the CLI in production.\r\n\r\nThe solution is to never do a file existence check and just let `rasterio.open()` fail, but that won't work for ensuring existing output files aren't overwritten, plus the resulting error isn't nearly as useful:\r\n\r\n```console\r\n$ rio info trash\r\nERROR:rasterio._gdal:CPLE_OpenFailed in trash: No such file or directory\r\nAborted!\r\n```\r\n\r\nThe above error is less useful than:\r\n\r\n```console\r\n$ gdalinfo trash\r\nERROR 4: trash: No such file or directory\r\ngdalinfo failed - unable to open 'trash'.\r\n```\r\n\r\n### Solution ###\r\n\r\nAnyone working with remote rasters is probably at least a little bit experienced with this stuff, and the CLI level sanity checks are _most_ useful for those that are inexperienced.  I think I can rework the `click` handlers to just assume a connection string exists, which is how VSI URL's work right now on `master`, so for most cases we still get the errors, but in some cases users will have to parse the CPLE log to figure out what went wrong.  The remaining `click.Path()` instances will all have to be replaced with a smarter callback, but I think we already have a generic one somewhere.\r\n\r\nThis PR does not address write support, but to my knowledge none of the remote raster drivers do, including [PostGIS Raster](https://trac.osgeo.org/gdal/wiki/frmts_wtkraster.html).  I left the `os.path.exists()` checks in the core write code path, so if its actually a problem eventually someone will hit them.", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164419", "body": "Ha!  The icons are a nice touch - I can't believe I just had to google \"poop emoji\" to see if there was one with smell lines.  This seems more \"click-thonic\" too.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164482", "body": "@sgillies I'll do another PR with this in Fiona unless you're not quite settled.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164615", "body": "\ud83d\udca9and all.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/17167088", "body": "@sgillies Might not hurt to check if `_env` is already populated and raise an exception in case users do:\n\n``` python\nimport rasterio.env\n\nwith rasterio.env.Env():\n    with rasterio.env.Env(CONFIG=True):\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/17167088/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25145663", "body": "I thought I opened a PR with this last week, but I must not have pushed it.\nI know I found some additional configuration that may be beneficial. Will\ninvestigate.\n\nOn Mon, Oct 23, 2017, 5:12 PM James McBride <notifications@github.com>\nwrote:\n\n> @sgillies <https://github.com/sgillies> Oh thanks, I was considering a PR\n> with this (perhaps primarily to raise as a point of discussion) after being\n> slightly overwhelmed by warnings in the latest round of testing.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mapbox/rasterio/commit/91a98ecce4f7ed96edba8badca482ccff3072f5e#commitcomment-25143997>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ACjVc_af9WEkYnAYfz212cY9Sd9xu-Plks5svQ9hgaJpZM4QDkVe>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25145663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25170419", "body": "@sgillies @jdmcbr @brendan-ward Found it.  I pushed a branch but never opened a PR until now: https://github.com/mapbox/rasterio/pull/1179", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25170419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26203302", "body": "@jdmcbr Technically GDAL operates on `connection strings`.  For most drivers this is a valid path to a local file on dis, but not for all.  See https://github.com/mapbox/rasterio/pull/1079 for some more background.  One other side effect is that an `os.unlink()` does not check for sidecar files, particularly PAM files (`.aux.xml`) which can get weird.  GDAL puts all kinds of information in these files, so inheriting one from a fundamentally different file that happens to have the same name can cause all kinds of weird problems.\r\n\r\nFixed in https://github.com/mapbox/rasterio/pull/1228.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26203302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34325021", "body": "@brendan-ward The help says this defaults to `EPSG:4326` but the click default is not set.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34325021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34325093", "body": "@brendan-ward maybe note the default resampling method in the help?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34325093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34106488", "body": "@sgillies What do you think about setting `metavar=\"n,n,...|n^n..n\"` here?  Otherwise its only listed in the longer help text and I find its nice to have non-standard syntaxes in an easy to find location.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34106488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34641088", "body": "![transmogrifier_zap](https://cloud.githubusercontent.com/assets/2676083/8689529/b92e474e-2a76-11e5-98f9-c0c40312929f.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34641088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34743969", "body": "@sgillies The help message is kind of ambiguous.  Maybe something like, \"Adds a stroke/fill color for each feature in accordance with the GeoJSON simplestyle specification.\" so users know that the feature is immediately useful in other places and that we're not just arbitrarily modifying the output data.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34743969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34745302", "body": "@sgillies I wasn't aware click would auto-show the default.  Good find.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34745302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34745879", "body": "@sgillies --src-scale-range might be more intuitive.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34745879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34745897", "body": "@sgillies --dst-scale-range might be more intuitive.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34745897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34755585", "body": "@sgillies @brendan-ward I'm not in a place where I can verify this, but won't immediately casting to the output datatype affect the scaling when `dst_dtype` has a smaller bit depth, or when going from float to int w/ the same bit depth?  Consider 16 bit data that is being converted to byte or float16 being converted to int16.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34755585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34755713", "body": "@sgillies If `--src-scale-points` or `--dst-scale-points` is given without a `--scale-linear` then data is still processed but is quietly unscaled.  Consider adding a check here for this condition and raising a `click.BadParameter()` informing the user that they need to supply a scaling method.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34755713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37156458", "body": "@sgillies This won't work if an array is passed in.  No `.name` property.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37156458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37189936", "body": "Ah ok.  Right now we could do that with `Band()` objects but `DatasetReader()` and `RasterUpdater()` objects are not currently supported.  It's probably possible to look into the parent scope for `src`, but that seems kind of hacky and would only be guaranteed to work when using `rio insp`.\n\nI'll try adding support for `DatasetReader()` and `RasterWriter()` so you could throw just about anything at this and get a figure.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37189936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37201448", "body": ":+1: My intention was to make this a BYOD situation.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37201448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49471203", "body": "@sgillies The error message passed to this exception is not properly displayed because `click.FileError()` behaves a little differently than a normal exception.  Right now the error looks like:\n\n``` python\nTraceback (most recent call last):\n  File \"buh.py\", line 5, in <module>\n    print(resolve_inout(files=['LICENSE.txt']))\n  File \"/Users/kwurster/code/rasterio/rasterio/rio/helpers.py\", line 91, in resolve_inout\n    \"Output exists and won't be overwritten without the \"\nrasterio.errors.FileOverwriteError: unknown error\n```\n\nBut modifying the call to the parent `__init__` provides the intended message:\n\n``` python\nclass FileOverwriteError(FileError):\n    \"\"\"Rasterio's CLI refuses to implicitly clobber output files.\"\"\"\n\n    def __init__(self, message):\n        super(FileOverwriteError, self).__init__('', hint=message)\n```\n\n``` python\nTraceback (most recent call last):\n  File \"buh.py\", line 5, in <module>\n    print(resolve_inout(files=['LICENSE.txt']))\n  File \"/Users/kwurster/code/rasterio/rasterio/rio/helpers.py\", line 91, in resolve_inout\n    \"Output exists and won't be overwritten without the \"\nrasterio.errors.FileOverwriteError: Output exists and won't be overwritten without the `-f` or `-o` options.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49471203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58781679", "body": "@sgillies Ah yeah forgot we had that one.  We raise a `ValueError` if `json.loads()` fails - do we want that to be a `CRSErorr` as well?  It's a slightly different problem, but `CRSError` is derived from `ValueError`, so the change seems appropriate and a little more consistent.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58781679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58880578", "body": "@perrygeo Whoops - thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58880578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58881420", "body": "@perrygeo What do you think about this `ValueError` for a bad JSON string?  We raise a `CRSError` everywhere else, and while this is technically a slightly different problem, the intended use and consequences are the same: the user has a string they _think_ contains a CRS they would like to decode.  I'm wondering if this shouldn't be a `CRSError` as well?  An malformed JSON string is also a malformed CRS.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58881420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58882483", "body": "@perrygeo That's my feeling as well, especially since `CRSError` is derived from `ValueError`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58882483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58889570", "body": "@perrygeo Switched to `CRSError`, but will happily revert if anyone changes their mind.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58889570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59435149", "body": "@sgillies I have seen others mention that this should not be done but have never encountered a reason.  Without taking too much of your time, could you briefly describe why `logging.basicConfig()` is bad?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59435149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59480261", "body": "@sgillies Any reason not to use Python's builtin `urllib.parse.urlparse()` for parsing?  It's `urlparse.urlparse()` in Python 2.\n\n``` python\nimport rfc3987\nfrom urllib.parse import urlparse\n\nurl = 's3://landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF'\n\nu = urlparse(url)\nr = rfc3987.parse(url)\n\nassert u.scheme == r['scheme'])\nassert u.netloc == r['authority'])\nassert u.path == r['path'])\n```\n\nHere are the objects both return:\n\n``` python\nParseResult(scheme='s3', netloc='landsat-pds', path='/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF', params='', query='', fragment='')\n{'fragment': None, 'path': '/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF', 'query': None, 'authority': 'landsat-pds', 'scheme': 's3'}\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59480261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59612666", "body": "@sgillies We use Google Cloud Platform at work, so I'll defer to your AWS knowledge.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59612666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59615198", "body": "@sgillies I was thinking about that last night, but couldn't get GDAL 2 installed to poke around.\n\n@schwehr Any plans for `/vsigcs/` to match `/vsis3/` so we can read rasters directly from GCS with GDAL like we can with AWS?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59615198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60004298", "body": "@sgillies Don't need this since we're using `urlparse()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60004298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60004312", "body": "@sgillies Don't need this since we're using `urlparse()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60004312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60006996", "body": "@sgillies I think this needs to be `env = kwargs.pop('env', Env())` to support the behavior below, should we choose to keep it.  I don't see this condition covered by the test suite either.\n\n``` python\nwith rio.Env() as env:\n    with rio.open('tests/data/RGB.byte.tif', env=env) as src:\n        print(src._env.options)\nTraceback (most recent call last):\n  File \"buh.py\", line 5, in <module>\n    with rio.open('tests/data/RGB.byte.tif', env=env) as src:\n  File \"/Users/wursterk/code/rasterio/rasterio/__init__.py\", line 58, in open\n    nodata=nodata, env=env, **kwargs)\nTypeError: open() got multiple values for keyword argument 'env'\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60006996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60007808", "body": "@sgillies Can we make this a public variable with Python's `_private` nomenclature so we can access it for debugging?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60007808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60008227", "body": "@sgillies I think we want `rasterio.open()` to be responsible for handling the optional environment parameter rather than `Env.open()`.  At this point we already have an instantiated `Env()` and the user wants to open a datasource directly with that environment.  The idea that they should be allowed to pass in a _different_ environment seems like something we don't want to support.\n\n``` python\nimport rasterio\n\nwith rasterio.Env() as env1, rasterio.Env() as env2:\n    with env1.open('datasource.tif', env=env2) as src:\n        # Using env1 to open a datasource, but don't actually use that env.  Use this other one instead.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60008227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60008375", "body": "@sgillies On [second look](https://github.com/mapbox/rasterio/pull/665/files#r60008227) I think this is correct and `Env.open()` shouldn't be receiving an optional environment since it is already attached to one.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60008375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60863582", "body": "@sgillies Having some problems with GDAL 2 so I haven't fully confirmed, but I think this will ignore any credentials supplied by an outer `Env()` like:\n\n``` python\nwith rasterio.env.Env(aws_access_key_id='something'):\n    with rasterio.open('data.tif') as src:\n        pass\n```\n\nInstead of setting `AWS_ACCESS_KEY_ID=something` we get whatever value `boto3.Session().get_credentials()` provides.  I think something like `Env(**getenv().options)` would work, but the AWS credentials are not pushed into the GDAL environment until `Env.get_aws_credentials()` is called, which means the outer credentials are almost certainly not present at this point.  Related to https://github.com/mapbox/rasterio/pull/665#discussion_r60863685.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60863582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60863685", "body": "@sgillies The AWS credentials are not pushed into the GDAL environment until `Env.get_aws_credentials()` is called.\n\n``` python\nimport rasterio as rio\nfrom rasterio.env import Env\nfrom rasterio import env\n\n\nwith Env(aws_access_key_id='whatever', CPL_DEBUG=True) as e:\n    print(env.getenv())\n    e.get_aws_credentials()\n    print(env.getenv())\n```\n\nresults:\n\n```\n{'CPL_DEBUG': True}\n{'aws_access_key_id': 'whatever', 'CPL_DEBUG': True}\n```\n\nIt looks like this might cause a problem when instantiating new `Env()`'s that should be inheriting modified credentials from an outer `Env()`, like https://github.com/mapbox/rasterio/pull/665#discussion_r60863582.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60863685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "johanvdw": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1219", "title": "windows 2.7 segfaults", "body": "The following script causes a segfault when run in python 2.7 with version 1.0.0a12:\r\n```\r\nimport rasterio\r\nimport numpy as np\r\nimport affine\r\n\r\nband = np.zeros((5, 5))\r\n\r\ntransform = affine.Affine(25, 0, 1000, 0, -25, 1000)\r\n\r\nwith rasterio.open(\"temp.tif\", \"w\", width=5, height=5, driver=\"GTiff\",\r\n                   count=1, transform=transform, dtype=\"uint8\") as dst:\r\n    dst.write(band, 1)\r\n```\r\n\r\nI have reported similar issues here: https://github.com/conda-forge/rasterio-feedstock/issues/44", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ungarj": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1206", "title": "WarpedVRT resampling behavior", "body": "``WarpedVRT`` shows unexpected behavior when using other resampling methods than ``Resampling.nearest``.\r\n\r\n## Expected behavior and actual behavior.\r\n\r\n``Resampling.bilinear`` returns the same output than ``Resampling.nearest``. However, when resampling with GDAL, the output image is smoothed.\r\n\r\nGDAL bilinear:\r\n![gdal_bilinear](https://user-images.githubusercontent.com/3802285/33208787-3dc1029a-d113-11e7-80a7-bf918cdcb5fb.jpg)\r\n\r\n``Resampling.nearest``:\r\n![rio_nearest](https://user-images.githubusercontent.com/3802285/33208785-3d86cf3a-d113-11e7-8473-ff010bee37d1.jpg)\r\n\r\n``Resampling.bilinear``:\r\n![rio_bilinear](https://user-images.githubusercontent.com/3802285/33208786-3da0bbb6-d113-11e7-9c9b-5b188b9e1910.jpg)\r\n\r\n## Steps to reproduce the problem.\r\n\r\nHere is a zip file containing the example data (a CleanTOPO extract) and the script that reproduces all outputs: [warpedvrt_resampling.zip](https://github.com/mapbox/rasterio/files/1501490/warpedvrt_resampling.zip)\r\n\r\nthis is the code snipped that reads and resamples the window:\r\n```\r\n    with rasterio.open(input_file, \"r\") as src:\r\n        with WarpedVRT(src, dst_crs=tile.crs, resampling=Resampling.bilinear) as vrt:\r\n            bilinear = vrt.read(\r\n                window=vrt.window(*tile.bounds()),\r\n                out_shape=tile.shape(),\r\n                indexes=1\r\n            )\r\n```\r\nNot sure whether I used all of the parameters correctly. I used the [example](https://mapbox.github.io/rasterio/topics/virtual-warping.html) from the docs.\r\n\r\n## Operating system\r\n\r\nUbuntu 16.04\r\n\r\n## Rasterio version and provenance\r\n\r\n1.0a11 installed from PyPI using pip 9.0.1, using Python 2.7\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sgillies": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1204", "title": "Create a mapbox/rasterio team to use GitHub discussions", "body": "We've got nothing quite like GDAL's gdal-dev, but maybe this will be enough: https://github.com/blog/2471-introducing-team-discussions.\r\n\r\nThoughts? Any reservations or concerns @geowurster @brendan-ward @perrygeo ?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1204/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1197", "title": "Document shim module strategy", "body": "A follow up to my work on #1196. The design of the GDAL shim modules and the source juggling in setup.py is under-documented. It's testament to your ingenuity if you can figure out how to contribute to this part of Rasterio.\r\n\r\nI'm on the hook for documenting this in our contributing doc and elsewhere at 1.0.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1190", "title": "URLs and schemes for Rasterio 1.0", "body": "I'd like to update https://github.com/mapbox/rasterio/blob/master/docs/switch.rst#dataset-identifiers for 1.0 and want to run this by everyone before I do. Feedback, please \ud83d\ude4f \r\n\r\n## Datasets in local files\r\n\r\n### Rasterio\r\n\r\n`path/to/file.tif`\r\n\r\nor equivalently\r\n\r\n`file://path/to/file.tif`\r\n\r\n### GDAL translation\r\n\r\n`path/to/file.tif`\r\n\r\n## Datasets within a local zip file\r\n\r\n### Rasterio\r\n\r\nSee https://commons.apache.org/proper/commons-vfs/filesystems.html#Zip_Jar_and_Tar.\r\n\r\n`zip://path/to/file.zip!/folder/file.tif`\r\n\r\nor equivalently\r\n\r\n`zip+file://path/to/file.zip!/folder/file.tif`\r\n\r\n### GDAL translation\r\n\r\n`/vsizip/path/to/file.zip/folder/file.tif`\r\n\r\n## Datasets on the web\r\n\r\n### Rasterio\r\n\r\n`https://example.com/file.tif`\r\n\r\n### GDAL translation\r\n\r\n`/vsicurl/https://example.com/file.tif`\r\n\r\n## Datasets within a zip file on the web\r\n\r\n### Rasterio\r\n\r\nA variation on https://commons.apache.org/proper/commons-vfs/filesystems.html#Zip_Jar_and_Tar. The `protocol+https` pattern (see https://pip.pypa.io/en/stable/reference/pip_install/#git, https://docs.npmjs.com/cli/install) seems to have won out on the web over Apache's `protocol:https`.\r\n\r\n`zip+https://example.com/file.tif&p=x&q=y!/folder/file.tif`\r\n\r\n### GDAL translation\r\n\r\n`/vsizip/{/vsicurl/https://example.com/file.tif&p=x&q=y}/folder/file.tif`", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1190/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1151", "title": "Map zip+https:// to GDAL /vsizip/vsicurl", "body": "As well as `zip+file://` -> `vsizip` and `zip+s3://` -> `/vsizip/vsis3`.\r\n\r\nSee https://trac.osgeo.org/gdal/wiki/UserDocs/ReadInZip#Complexexamplecombiningwithvsizip.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1116", "title": "Eliminate open's deprecated r- mode ", "body": "It's no longer needed and has been deprecated.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1115", "title": "Remove eval_window() etc from __init__.py", "body": "These functions have been deprecated and copied to the windows module.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1083", "title": "Eliminate RasterioDeprecationWarnings", "body": "We're keeping the warning category, but the code and its tests shouldn't produce any of these warnings.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1078", "title": "More control over vsicurl and vsis3", "body": "GDAL 2.2.x will give us more control over vsicurl and vsis3 caching. Up to now, these protocols can't support content that is being updated during the lifetime of the vsicurl session. See https://lists.osgeo.org/pipermail/gdal-dev/2017-June/046802.html.\r\n\r\nIn Rasterio we could clean up the vsicurl filesystem when we exit an `Env`, providing a clean filesystem for the next Env created.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1039", "title": "Use in-memory VRT for boundless reads?", "body": "We have the concept of a 'boundless' reads in Rasterio that has no counterpart in the GDAL API. An in-memory VRT may be an effective way to implement a boundless read, shifting more of the logic and computation to GDAL, and potentially eliminating a lot of complicated Cython code.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/995", "title": "Ensure well-defined behavior of mask/rasterize for shapes extending beyond raster", "body": "See #988, in which I suspect that rasterization and masking behavior is not well-defined when the shapes extend beyond the extents of the raster data.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/991", "title": "Access to Google Cloud data (like S3)", "body": "See http://www.gdal.org/cpl__vsi_8h.html#af80a70fd45cd7a2119f1a2f7da071870. I'm not an expert on Google Cloud, but it looks like datasets would be identified using a 'gs' scheme instead of 's3'.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/987", "title": "Optimize for \"cloud optimized GeoTIFFs\"", "body": "Reference: https://trac.osgeo.org/gdal/wiki/CloudOptimizedGeoTIFF\r\n\r\nBy default, GDAL will try to scan for siblings of a file, which means that if your S3 bucket `my-bucket` contains 1000 objects `rio info s3://my-bucket/wanted.tif` will make 1000 HTTP requests before opening `wanted.tif`. To disable this the `GDAL_DISABLE_READDIR_ON_OPEN` config option can be set to `True`.\r\n\r\nI'm proposing to make this option on by default when accessing objects on S3.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/987/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/985", "title": "Support RGBA to RGB warping in warp.reproject()", "body": "We currently cannot because of this code in _warp.pyx that requires input and output to have the same number of bands:\r\n\r\n```python\r\n    for i in range(src_count):\r\n        psWOptions.panSrcBands[i] = src_bidx[i]\r\n        psWOptions.panDstBands[i] = dst_bidx[i]\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/984", "title": "Add support for alpha band to warp.reproject()", "body": "Currently we only support nodata values. See in _warp.pyx.\r\n\r\n```python\r\n    if src_nodata is not None:\r\n        if not in_dtype_range(src_nodata, source.dtype):\r\n            psWOptions.papszWarpOptions = warp_extras\r\n            GDALDestroyApproxTransformer(hTransformArg)\r\n            GDALDestroyWarpOptions(psWOptions)\r\n            CPLFree(imgProjOptions)\r\n            raise ValueError(\"src_nodata must be in valid range for \"\r\n                            \"source dtype\")\r\n\r\n        psWOptions.padfSrcNoDataReal = <double*>CPLMalloc(\r\n            src_count * sizeof(double))\r\n        psWOptions.padfSrcNoDataImag = <double*>CPLMalloc(\r\n            src_count * sizeof(double))\r\n        for i in range(src_count):\r\n            psWOptions.padfSrcNoDataReal[i] = src_nodata\r\n            psWOptions.padfSrcNoDataImag[i] = 0.0\r\n        warp_extras = CSLSetNameValue(\r\n            warp_extras, \"UNIFIED_SRC_NODATA\", \"YES\")\r\n```\r\n\r\nSort of complicated and requires knowledge of [GDAL warp options](http://www.gdal.org/structGDALWarpOptions.html#a0ed77f9917bb96c7a9aabd73d4d06e08).", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/977", "title": "Accessing datasets located in buffers using MemoryFile and ZipMemoryFile", "body": "Rasterio has different ways to access datasets located on disk or at network addresses and datasets located in memory buffers. This document explains the former once again and then introduces the latter for the first time.\r\n\r\n# Accessing datasets on your filesystem\r\n\r\nTo access datasets on disk, give a filesystem path to `rasterio.open()`.\r\n\r\n```python\r\nimport rasterio\r\n\r\n# Open a dataset located in a local file.\r\nwith rasterio.open('data/RGB.byte.tif') as dataset:\r\n    print(dataset.profile)\r\n```\r\n\r\nEquivalently, use a `file://` URL.\r\n\r\n```python\r\nwith rasterio.open('file://data/RGB.byte.tif') as dataset:\r\n    print(dataset.profile)\r\n```\r\n\r\n# Accessing datasets in a zip archive\r\n\r\nTo access a dataset located in a local zip file, pass a `zip://` URL (Apache VFS style) to `rasterio.open()`.\r\n\r\n```python\r\nwith rasterio.open('zip://data/files.zip!RGB.byte.tif') as dataset:\r\n    print(dataset.profile)\r\n```\r\n\r\n# Accessing network datasets\r\n\r\nDatasets at `http://`, `https://`, or `s3://` (AWS CLI style) network locations can be accessed by passing these locators to `rasterio.open()`. See https://github.com/mapbox/rasterio/issues/942 for details.\r\n\r\n# The difference from GDAL\r\n\r\nIf you're a GDAL user, you may be used to passing strings like `/vsizip/foo.zip` to call for zip file handling and strings like `/viscurl/https://example.com/foo.tif` to call for HTTP protocol handling. Rasterio registers handlers by URL schemes instead. Rasterio uses GDAL's special strings internally, but they are not part of the Rasterio API. \r\n\r\n# Accessing datasets in memory buffers\r\n\r\nRasterio can access datasets located in the buffers of Python objects without writing the buffers to disk. To see, open and read any GeoTIFF file.\r\n\r\n```python\r\ndata = open('data/RGB.byte.tif', 'rb').read()\r\n```\r\n\r\nThe buffer of `data`'s value contains that GeoTIFF. To make it available to Rasterio (and GDAL), give `data` to a `MemoryFile` and then open the dataset using `MemoryFile.open()`.\r\n\r\n```python\r\nfrom rasterio.io import MemoryFile\r\n\r\nwith MemoryFile(data) as memfile:\r\n    with memfile.open() as dataset:\r\n        print(dataset.profile)\r\n```\r\n\r\nAs there is only one dataset per `MemoryFile`, `MemoryFile.open()` needs no filename or path argument. In many cases the usage can be condensed to the following.\r\n\r\n```python\r\nwith MemoryFile(data).open() as dataset:\r\n    print(dataset.profile)\r\n```\r\n\r\n`MemoryFile` is like Python's `BytesIO` class but has an additional special feature: the bytes buffer is mapped to a virtual file for use by GDAL. The virtual file is deleted when the `MemoryFile` closes.\r\n\r\nYou can also pass a file-like object opened in binary mode to `MemoryFile()`. This is for convenience only, the bytes of the file are read immediately into a `bytes` object.\r\n\r\n```python\r\nfp = open('data/RGB.byte.tif', 'rb')\r\n\r\nwith MemoryFile(fp).open() as dataset:\r\n    print(dataset.profile)\r\n    rgb_profile = dataset.profile\r\n    rgb_data = dataset.read()\r\n```\r\n\r\nNote that the profile and band data of that dataset have been captured for use in other examples below.\r\n\r\n# Performance notes\r\n\r\nRecognize the above as a more memory-intensive way of getting the same results as the very first example in this document. Generally speaking, raster data formats are optimized for random access and GDAL format drivers need datasets to be written entirely onto disk or into memory and mapped to a virtual file. Using `MemoryFile` to hold a large GeoTIFF doesn't require\r\na hard disk (which is good for serverless applications) but loads the entire GeoTIFF into RAM.\r\n\r\n# Writing to MemoryFile\r\n\r\nA `MemoryFile` can also be written. You can create a GeoTIFF (for example) in memory and then stream its bytes elsewhere without writing to disk. In this case you must bind the `MemoryFile` to a name so it can be referenced later.\r\n\r\n```python\r\nwith MemoryFile() as memfile:\r\n    with memfile.open(**rgb_profile) as dataset:\r\n        dataset.write(rgb_data)\r\n\r\n    memfile.seek(0)\r\n    print(memfile.read(1000))\r\n```\r\n\r\nWriting band data to the opened dataset modifies the virtual file and consequently the `MemoryFile` buffer.\r\n\r\n# Be kind: rewind\r\n\r\nNote well: after `dataset` closes, the `memfile` position is left at its end.\r\n\r\n# Zip files in a buffer\r\n\r\nThe `ZipMemoryFile` class is mostly the same, but is for use with a buffer that contains a zip archive.\r\n\r\n```python\r\nfrom rasterio.io import ZipMemoryFile\r\n\r\nfp = open('data/files.zip', 'rb')\r\n\r\nwith ZipMemoryFile(fp) as zipmem:\r\n    with zipmem.open('RGB.byte.tif') as dataset:\r\n        print(dataset.profile)\r\n```\r\n\r\nThis is much the same interface as that of [`zipfile.ZipFile`](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.open).\r\n\r\n# Writing in-memory zip files\r\n\r\nWriting to a `ZipMemoryFile` is not currently supported, but it is possible to do so using Python's `zipfile` library and Rasterio's `MemoryFile` together.\r\n\r\n```python\r\nfrom io import BytesIO\r\nimport zipfile\r\n\r\nwith BytesIO() as bytes_buffer:\r\n    with zipfile.ZipFile(bytes_buffer, 'w') as zf:\r\n\r\n        with MemoryFile() as memfile:\r\n            with memfile.open(**rgb_profile) as dataset:\r\n                dataset.write(rgb_data)\r\n                \r\n            memfile.seek(0)\r\n            zf.writestr('foo.tif', memfile.read())\r\n\r\n    bytes_buffer.seek(0)\r\n    with ZipMemoryFile(bytes_buffer).open('foo.tif') as dataset:\r\n        print(dataset.profile)\r\n```\r\n\r\n# Final notes on convenience features\r\n\r\nBy popular request, `rasterio.open()` can also take a file object opened in binary modes 'rb' or 'wb' as its first argument.\r\n\r\n```python\r\nwith open('data/RGB.byte.tif') as f:\r\n    with rasterio.open(f) as dataset:\r\n        print(dataset.profile)\r\n```\r\n\r\nA `MemoryFile` is created internally to hold the bytes read from the input file object. This is therefore not the best way to read or write datasets already on disk and addressable by name.\r\n\r\nAs is the case for every printed profile, the output is the following.\r\n\r\n```\r\n{'tiled': False, 'transform': Affine(300.0379266750948, 0.0, 101985.0,\r\n       0.0, -300.041782729805, 2826915.0), 'width': 791, 'dtype': 'uint8', 'interleave': 'pixel', 'driver': 'GTiff', 'crs': CRS({'init': 'epsg:32618'}), 'count': 3, 'height': 718, 'nodata': 0.0}\r\n```\r\n\r\nRasterio has different ways to access datasets located on disk or at network addresses and datasets located in memory buffers. The features are acquired from GDAL, but the abstractions are different, more Pythonic.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/977/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/974", "title": "Implement a `TarMemoryFile`", "body": "As mentioned in https://github.com/mapbox/rasterio/pull/972. I think the uses for this are more rare than for zip files, but perhaps worth doing in the future.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/942", "title": "Using Rasterio's new linux wheels", "body": "We're making binary wheels for Linux that include all the C libraries Rasterio needs for all of the pre-1.0 releases. This is a post about how to use them.\r\n\r\nThese wheels are not intended for production use by the internet, but should be perfectly adequate for integration testing of Python software that requires Rasterio. They might even be useful for developing prototype services.\r\n\r\nThe GDAL library included in these wheels is only lightly provisioned with format drivers. The JPEG2000 driver based on Jasper is the only non-default driver. There are no proprietary drivers.\r\n\r\nMy example: installing Rasterio wheels on Ubuntu 14.04 and performing the little extra configuration needed to access [AWS Public Datasets](https://aws.amazon.com/public-datasets/) like [Landsat on AWS](https://pages.awscloud.com/public-data-sets-landsat.html).\r\n\r\n![mars_rovers_wheels_isometric](https://cloud.githubusercontent.com/assets/33697/21010235/405dda96-bd4b-11e6-97a0-00463f34800c.jpg)\r\n\r\n# Installation\r\n\r\nI'm going to use a container based on the Ubuntu 14.04 image in Docker Hub as a host. It has Python 3 installed, but pip, the program we're going to use to install Rasterio, is not installed. Rather than install the python3-pip apt package (possibly requiring `apt-get update`) and drag in a mess of other dependencies, let's get pip via wget.\r\n\r\n```bash\r\n$ apt-get install wget\r\n$ wget https://bootstrap.pypa.io/get-pip.py\r\n$ python3 get-pip.py\r\n```\r\n\r\nRasterio has a host of extra Python dependencies, thus it's always a good idea to install Rasterio applications in a dedicated environment. Create and activate one with virtualenv.\r\n\r\n```bash\r\n$ pip install virtualenv\r\n$ virtualenv -p python3 venv\r\n$ source venv/bin/activate\r\n```\r\n\r\nNow install Rasterio into the environment using pip, also requesting the optional \"s3\" set of extra dependencies (boto3 and more).\r\n\r\n```bash\r\n(venv)$ pip install --pre rasterio[s3]>=1.0a4\r\n```\r\n\r\nThis fetches the `rasterio-1.0a4-cp34-cp34m-manylinux1_x86_64.whl` file from the Python Package Index and extracts it into the environment's site-packages directory. A peek into site-packages reveals the included C libraries.\r\n\r\n```bash\r\n(venv)$ ls -l venv/lib/python3.4/site-packages/rasterio/.libs/\r\ntotal 122004\r\n-rwxr-xr-x 1 root root  3659864 Dec  8 09:29 libcurl-96d9b940.so.4.4.0\r\n-rwxr-xr-x 1 root root 94185184 Dec  8 09:29 libgdal-03eecd3b.so.20.1.2\r\n-rwxr-xr-x 1 root root 22032320 Dec  8 09:29 libgeos-3-fc05f4c1.5.0.so\r\n-rwxr-xr-x 1 root root  1499128 Dec  8 09:29 libgeos_c-09576097.so.1.9.0\r\n-rwxr-xr-x 1 root root  1428600 Dec  8 09:29 libjasper-fb9de72f.so.1.0.0\r\n-rwxr-xr-x 1 root root    43712 Dec  8 09:29 libjson-c-ca0558d5.so.2.0.1\r\n-rwxr-xr-x 1 root root  2074320 Dec  8 09:29 libproj-18c59ecd.so.12.0.0\r\n```\r\n\r\nYes, the libs are big. The wheels are heavy. I'm working on it, I promise.\r\n\r\nStart a Python interpreter and import rasterio as a last check.\r\n\r\n```\r\n(venv)$ python\r\nPython 3.4.3 (default, Oct 14 2015, 20:28:29)\r\n[GCC 4.8.4] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import rasterio\r\n>>> rasterio.__gdal_version__\r\n'2.1.2'\r\n```\r\n\r\n# Configuration\r\n\r\nRasterio includes a program named \"rio\" and its \"info\" sub-command provides many of the same features as the venerable \"gdalinfo\" program. Before you can use it to query datasets on S3, you need to do a little extra system configuration.\r\n\r\nFirst, set language and locale environment variables so rio will run properly with Python 3.\r\n\r\n```bash\r\n(venv)$ export LC_ALL=C.UTF-8\r\n(venv)$ export LANG=C.UTF-8\r\n```\r\n\r\nNext, specify where to find the SSL certs on your host. Rasterio's libcurl, which is built on CentOS, expects `/etc/pki/tls/certs/ca-bundle.crt`. Ubuntu's are in a different location.\r\n\r\n```bash\r\n(venv)$ export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt\r\n```\r\n\r\nFinally, set up AWS credentials. Rasterio uses boto3 to deal with credentials and these can be configured following the directions in the [AWS CLI guide](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files).\r\n\r\n```bash\r\n(venv)$ mkdir ~/.aws\r\n(venv)$ cat << EOF > ~/.aws/credentials\r\n> [default]\r\n> aws_access_key_id = AWS_ACCESS_KEY_ID\r\n> aws_secret_access_key = AWS_SECRET_ACCESS_KEY\r\n> EOF\r\n```\r\n\r\n# Running rio-info\r\n\r\nGive an s3-prefixed object identifier, the same kind you would use with the AWS CLI, to `rio info` with a `--indent 2` option to get pretty-printed JSON.\r\n\r\n```bash\r\n(venv)$ rio info --indent 2 s3://landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF\r\n```\r\n\r\n```json\r\n{\r\n  \"blockxsize\": 512,\r\n  \"blockysize\": 512,\r\n  \"bounds\": [\r\n    381885.0,\r\n    2279085.0,\r\n    610515.0,\r\n    2512815.0\r\n  ],\r\n  \"colorinterp\": [\r\n    \"grey\"\r\n  ],\r\n  \"compress\": \"deflate\",\r\n  \"count\": 1,\r\n  \"crs\": \"EPSG:32645\",\r\n  \"descriptions\": [\r\n    null\r\n  ],\r\n  \"driver\": \"GTiff\",\r\n  \"dtype\": \"uint16\",\r\n  \"height\": 7791,\r\n  \"indexes\": [\r\n    1\r\n  ],\r\n  \"interleave\": \"band\",\r\n  \"lnglat\": [\r\n    86.96327090815723,\r\n    21.666821827007773\r\n  ],\r\n  \"mask_flags\": [\r\n    [\r\n      \"all_valid\"\r\n    ]\r\n  ],\r\n  \"nodata\": null,\r\n  \"res\": [\r\n    30.0,\r\n    30.0\r\n  ],\r\n  \"shape\": [\r\n    7791,\r\n    7621\r\n  ],\r\n  \"tiled\": true,\r\n  \"transform\": [\r\n    30.0,\r\n    0.0,\r\n    381885.0,\r\n    0.0,\r\n    -30.0,\r\n    2512815.0,\r\n    0.0,\r\n    0.0,\r\n    1.0\r\n  ],\r\n  \"units\": [\r\n    null\r\n  ],\r\n  \"width\": 7621\r\n}\r\n```\r\n\r\n# Efficient metadata queries\r\n\r\nAccess to S3 GeoTIFF metadata is very efficient. Thanks to GDAL's support for HTTP range requests, Rasterio only needs to download 0.03% of the dataset's bytes in order to query its metadata. Turn up the verbosity of rio-info and ask for extra curl logging to see the individual HTTP requests.\r\n\r\n```bash\r\n(venv)$ CPL_CURL_VERBOSE=1 rio -vv info s3://landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF 2>&1 > /dev/null | grep '< '\r\n< HTTP/1.1 400 Bad Request\r\n< Content-Type: application/xml\r\n< Transfer-Encoding: chunked\r\n< Date: Thu, 08 Dec 2016 09:53:18 GMT\r\n< Connection: close\r\n< Server: AmazonS3\r\n<\r\n< HTTP/1.1 200 OK\r\n< Date: Thu, 08 Dec 2016 09:53:21 GMT\r\n< Content-Type: application/xml\r\n< Transfer-Encoding: chunked\r\n< Server: AmazonS3\r\n<\r\n< HTTP/1.1 206 Partial Content\r\n< Date: Thu, 08 Dec 2016 09:53:21 GMT\r\n< Last-Modified: Sat, 14 Mar 2015 23:20:01 GMT\r\n< ETag: \"f08bdf1e626bf0039746c102fbd2c2b8\"\r\n< Accept-Ranges: bytes\r\n< Content-Range: bytes 0-16383/51099231\r\n< Content-Type: image/tiff\r\n< Content-Length: 16384\r\n< Server: AmazonS3\r\n<\r\n```\r\n\r\nThe `HTTP/1.1 400 Bad Request` is in response to probing of the object's folder that GDAL does by default. In a future version of GDAL the probing can be disabled.\r\n\r\n# Efficient partial data queries\r\n\r\nBecause the Landsat GeoTIFFs are tiled, subsets of them can be queried for a fraction of the cost of downloading the entire dataset. I'm going to use Rasterio's dataset inspector, rio-insp, to demonstrate. Knowing that the GeoTIFF is tiled and that the tiles are 512 x 512 bytes, I'm going to request a subset corresponding to a single tile in the middle of the raster.\r\n\r\n```\r\n(venv)$ CPL_CURL_VERBOSE=1 rio -vv insp s3://landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF\r\nRasterio 1.0a4 Interactive Inspector (Python 3.4.3)\r\nType \"src.meta\", \"src.read(1)\", or \"help(src)\" for more information.\r\n>>> from rasterio.windows import Window\r\n>>> src.read(window=Window(2048, 2048, 512, 512))\r\n```\r\n\r\nHere are the request details printed to stderr:\r\n\r\n```\r\n> GET /L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF HTTP/1.1\r\nHost: landsat-pds.s3.amazonaws.com\r\nRange: bytes=12189696-12550143\r\nAccept: */*\r\n\r\n< HTTP/1.1 206 Partial Content\r\n< Date: Fri, 09 Dec 2016 10:09:59 GMT\r\n< Last-Modified: Sat, 14 Mar 2015 23:20:01 GMT\r\n< ETag: \"f08bdf1e626bf0039746c102fbd2c2b8\"\r\n< Accept-Ranges: bytes\r\n< Content-Range: bytes 12189696-12550143/51099231\r\n< Content-Type: image/tiff\r\n< Content-Length: 360448\r\n< Server: AmazonS3\r\n<\r\n```\r\n\r\nAnd here is the abbreviated representation of the 512 x 512 array in the Python console:\r\n\r\n```python\r\narray([[[10311, 10249, 10306, ..., 10736, 10637, 10468],\r\n        [10320, 10262, 10231, ..., 10834, 10682, 10461],\r\n        [10225, 10287, 10305, ..., 10742, 10660, 10516],\r\n        ...,\r\n        [10055, 10072, 10042, ..., 10509, 10555, 10548],\r\n        [10034, 10055, 10042, ..., 10566, 10529, 10563],\r\n        [10005,  9996, 10030, ..., 10592, 10549, 10551]]], dtype=uint16)\r\n```\r\n\r\nOnly about 0.7% of the dataset's bytes have to be read in order to get that subset. If I ask for the tile in the upper left corner, which happens to be all zeros and has been compressed to nearly nothing, there's no additional HTTP request: all the data for that tile was already picked up in the initial 16 kb request and cached by GDAL.\r\n\r\n```python\r\n>>> src.read(window=Window(0, 0, 512, 512))\r\narray([[[0, 0, 0, ..., 0, 0, 0],\r\n        [0, 0, 0, ..., 0, 0, 0],\r\n        [0, 0, 0, ..., 0, 0, 0],\r\n        ...,\r\n        [0, 0, 0, ..., 0, 0, 0],\r\n        [0, 0, 0, ..., 0, 0, 0],\r\n        [0, 0, 0, ..., 0, 0, 0]]], dtype=uint16)\r\n```\r\n\r\nThat's it for examples in this post. There's more spacewalking to be done with other datasets and other formats. I'll leave that up to you.\r\n\r\n![389225main_sw_1965_full](https://cloud.githubusercontent.com/assets/33697/21010295/9199ffe8-bd4b-11e6-9065-aef19004b5c0.jpg)\r\n \r\n# See also\r\n\r\nThe [manylinux](https://github.com/pypa/manylinux) project is the one that we're closely following to learn how to build these wheels.\r\n\r\nThe wheel building infrastructure is here: https://github.com/sgillies/frs-wheel-builds.\r\n\r\n# Feedback is very welcome\r\n\r\nAre these useful to you? Can they be more useful with a modest amount of effort? Please let us know.\r\n\r\nThanks for reading!", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/942/reactions", "total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "hooray": 4, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/927", "title": "Print feature sequences by default instead of feature collections", "body": "A program that writes GeoJSON feature sequences can have a smaller memory footprint and lower latency than a program that writes a GeoJSON FeatureCollection. Collection of features from a sequence (producing a FeatureCollection) for programs that need such input is also cheaper than \"exploding\" or distributing features from a FeatureCollection.\r\n\r\nThe change in our CLIs: commands like `rio shapes` would produce feature sequences (without ascii RS) by default, and you'd need to add `--collection` to get a GeoJSON FeatureCollection. A quick search for \"rio shapes\" in shell scripts on GitHub turns up few that I can't patch personally, so I think has but a modest impact on users.\r\n\r\nObjections?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/927/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/921", "title": "support for GCPs in rowcol() and xy()", "body": "Right now these require affine transformation matrices but GDAL methods exist that can support GCP-based transformations. Something for post-1.0.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/910", "title": "Write a CLI devlog to go along with 1.0 push", "body": "We have an internal blog at Mapbox and I'm going to write a post in the same style here in this issue tracker. TODO:\n- Enumeration of the included commands\n- Highlight the benefits of the \"rio\" namespace\n- Point out that some commands are a significant upgrade on GDAL contrib scripts\n- Example of adding new plugins\n- Show integration with http://geojson.io\n- Show Integration with jq\n- Show integration with Fiona and Shapely\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/904", "title": "Human readable output of rio-info", "body": "Suggested by @perrygeo in chat. I imagine we could use `string.Template` and feed it the dict that rio-info produces. Or use http://mustache.github.io/ templates.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/897", "title": "Document changes for CLI plugin development with 1.0", "body": "In upgrading rio-mbtiles, I found:\n- rasterio's `rasterio.rio.helpers.resolve_inout()` no longer implicitly overwrites output files.\n- Plugins should use the instance of `rasterio.Env` in the context, like `with ctx.obj['env']:`.\n- In order for that to work in tests, we need to invoke the main command: `from rasterio.rio.main import main_group; CliRunner().invoke(main_group, ['plugin', ...])`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/882", "title": "Running docstring examples as doctests is a drag on development", "body": "I've nixed the running of module doctests in .travis.yml because it makes short concise examples practically impossible. Something as simple as \n\n```\nExample\n-------\n\n>>> dataset.count\n3\n```\n\nhas to be\n\n```\nExample\n-------\n\n>>> import rasterio\n>>> dataset = rasterio.open('tests/data/RGB.byte.tif')\n>>> dataset.count\n3\n```\n\nI'd like to make this change permanent. Let's keep our docstring examples super short, untested, and move tests to files under 'tests'.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/882/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/867", "title": "sample.sample_gen() needs more efficient raster access", "body": "@AsgerPetersen pointed out to me that `dataset.read()` has enough overhead to make `sample_gen()` multiple times slower than equivalent code using `osgeo.gdal` \u00e0 la\n\n``` python\nscanline = band.ReadRaster( 0, 0, band.XSize, 1, band.XSize, 1, GDT_Float32 )\n```\n\n@AsgerPetersen: is it important to be able to pass in a data type for your output scanline object that is other than the band's own data type?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/858", "title": "Document attributes that are modifiable post-creation", "body": "- transform\n- crs\n- units\n- descriptions\n- tags\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/845", "title": "Inconsistent links in documentation sidebar", "body": "At https://mapbox.github.io/rasterio/user/quickstart.html I see many links in the sidebar on the left. At https://mapbox.github.io/rasterio/user/intro.html I see only 5. Not a big problem, but it bugs me.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/816", "title": "Refactor _warp module", "body": "It's a bit tangled and inefficient to say the least.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/720", "title": "Update README example", "body": "Our current example is a bit boring and doesn't demonstrate any of the spatial features that distinguish Rasterio from, e.g., scikit-image or PIL.\n\nInstead, I'd like to show how to make an alpha band using a GeoJSON polygon and write out an RGBA file.\n\nAlso open to other suggestions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/720/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/712", "title": "AWS shared credentials profile name not passed to subcommands", "body": "Although the CLI's main function takes a `--aws-profile` option, it's not passed to the subcommands: only the default (first) profile in `.aws/credentials` is used.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/711", "title": "Plugin lookup is slow", "body": "I've suspected that there's a price to pay for pluggability and in benchmarking rio-warp using our small RGB.byte.tif file I'm finding that `time rio warp tests/data/RGB.byte.tif` runs twice as fast if rio-warp is the only registered `rasterio.rio_commands` entry point.\n\nProfiling is needed to see what we can do about this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/692", "title": "Support for requester-pays buckets", "body": "Jed Sundwall pointed out that there's NAIP imagery in a requester-pays bucket and that it might become more widely used type of bucket. \n\nAccording to http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html, a requester accepts the charge by using a `x-amz-requester-pays` header. I'll take this upstream to GDAL.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/671", "title": "Access to S3 rasters identified using arn:", "body": "See http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html for description of the arn: scheme. These are the identifiers most widely supported by AWS, whereas s3:// URLs are vernacular and specific to awscli/boto/etc.\n\nIn Rasterio, this would look like\n\n``` python\nwith rasterio.open('arn:aws:s3:::landsat-pds/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF') as dataset:\n    print(dataset.profile)\n```\n\nWould involve a little modification to `rasterio/__init__.py` and maybe a helper function in `vfs.py`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/637", "title": "Comprehensive default GDALEnv for functions", "body": "Rasterio (unlike GDAL's Python bindings) does not register GDAL format drivers on import. Some of our functions create a default GDAL environment with registered drivers (`fiona.open()` is one) but others do not and this is tripping up users (see #631).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/515", "title": "Get coverage to 100% including Cython modules", "body": "For #297.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/513", "title": "Windows binary wheels", "body": "For #297. Some background work at #260.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/507", "title": "Improve performance of rio-merge", "body": "As it says at https://github.com/mapbox/rasterio/blob/master/rasterio/tools/merge.py#L123-L125, the current approach uses the maximum amount of memory to solve the problem. We could trade more I/O for reduced memory by operating on windows of the dataset.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/297", "title": "1.0 Release Planning", "body": "Time to start planning for 1.0.\n## What makes a 1.0?\n- [ ] A user manual\n- [ ] Reduction in compilation warnings\n- [x] Increased test coverage\n- [ ] Remove deprecated APIs and parameters\n- [ ] Numpy style docstrings for main API functions\n- [x] Support for GDAL 2.0 and future compatibility with 2.1\n- Publicity\n- Libations\n- Other?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/280", "title": "--export option for rio-calc", "body": "Maybe a crazy idea, but people are going to write gnarly commands that work and then hit the wall when they take it too far, and giving them an option to export the commands as an equivalent Python script could be pretty awesome. Like a shovel that turns into a ladder when you realize you've dug too deep :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/278", "title": "Streaming GeoTIFF", "body": "http://lists.osgeo.org/pipermail/gdal-dev/2015-February/041094.html\n\nIs it relevant to discussions of rio command pipelines? Can we take advantage of it?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/260", "title": "Appveyor builds", "body": "I've been away from Windows for over a decade. Anyone have experience making Windows binaries with Appveyor as described in https://packaging.python.org/en/latest/appveyor.html?\n\n/cc @brendan-ward\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/188", "title": "Multi-command pipelines", "body": "We may not be able to pipe rasters like we do text (including JSON), but Click's [multi-command pipelines](http://click.pocoo.org/3/commands/#multi-command-pipelines) can make something like it possible. There's an example at https://github.com/mitsuhiko/click/tree/master/examples/imagepipe.\n\nI'm imagining `rio merge *.tif shapes > shapes.json` or `rio read input.tif calc $cmd1 calc $cmd2 write -o output.tif`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/77", "title": "Document issues with writing compressed files", "body": "Writing to a compressed GeoTIFF can be tricky. Explain how to avoid the pitfalls.\n\nSee #70 for background.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/c075358b162298074db10054411553e2d845ae3b", "message": "Merge pull request #1245 from mapbox/issue1217\n\nUse enum for rasterize merge algorithm"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/92104fbdc29fe6751956dbe7ac108f1fbebd9e6f", "message": "Comment has not been valid in a long time"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3662de90a662f92fabc0656ea0581b62808cc363", "message": "Merge pull request #1243 from mapbox/window-mask\n\nsupport writing windowed internal masks"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/27676a1fb6ca48216dbcac9cbd67e2156d9cc9b1", "message": "Merge pull request #1239 from mapbox/boundless-vrt-nearest\n\nBoundless reads that don't alter pixels"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/711400a1bd005bde8c310b144873cf48a03cb426", "message": "Add resampling help to read methods"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b6fdb9dddefc0b04970b464efb3ad433e96e9151", "message": "Even more variable windows and cleaner asserts"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ccdba45f39ada0615b7c5e347e46261586e57a52", "message": "Outer boundless reads"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/60350ebc4f615d515d8f4eb2fa5f459479e0a391", "message": "Add docstring"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/cddb90c3206ec16e953eaec0dce34271f0d4f8c4", "message": "Add test of pixel fidelity"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/08df92cf160e77660ee5f9f6190be4d19537f236", "message": "Use nearest resampling for VRT\n\nSince we're not changing resolution in boundless reads, nearest is\nA-ok. The important thing is to forward the resampling algo when\nwe read()."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0f72e35bbc36cc4a07cc11c33a1aa5e9e0374424", "message": "Merge pull request #1236 from omad/patch-1\n\nFix link to TravisCI CloudFormation IAM template"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fef7353c6f6371628d5ce6d38913d0d3fc2ed406", "message": "Remove stranded text"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/84958d7a36e9cbb7bc7d6088e9f66bc9160cfbbc", "message": "Add note about dataset objects"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3adfdd25548463a2a9692c492a4ad47e142aaab4", "message": "Merge pull request #1229 from mapbox/issue1208\n\nNew decorator for requiring specific GDAL version"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b71fa43290f0f9b07dbc7fb3d5604eca88a2a72b", "message": "Merge pull request #1222 from DHI-GRAS/naming\n\nNaming raster / source / dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/cb620c56783934c92d063892ed3e536c2d58f9f6", "message": "Merge pull request #1207 from mapbox/epsilon_naught\n\nRefactor Window.from_slices"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8acf383a4531be92b6c0ce6fc7215b1a04a43c51", "message": "Merge pull request #1231 from mapbox/cpp11\n\n[WIP] Add C++11 flag when compiling against GDAL>=2.3"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/908ccb97487eff5a05aede698b237c0e790650af", "message": "Update CHANGES.txt"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/eed82ad92e48d55eeb3511854b611ba93e54b689", "message": "Merge pull request #1225 from DHI-GRAS/mask-indexes\n\nadd indexes parameter to rasterio.mask.mask"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8b0255549018722979d49c0ec93a95768c7a7c80", "message": "Merge pull request #1228 from mapbox/shhhhhhhhh\n\nShush noisy logs"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ac2c000e698251785aadf6df1991546512cf0142", "message": "Merge pull request #1223 from mapbox/bump_gdal_version\n\nIncrease required GDAL to 1.11"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a30c8994f6a2af79179d92161cac09b6e64a2a9a", "message": "Merge pull request #1215 from mapbox/more_skipping_less_failing\n\nReduce xfailing tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/17a090743588060653f51275443be3e65567eaa5", "message": "Update version and change log"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/5f1c3ed9d2e2b5bc8dabde0f5cb8bdd00759fc7d", "message": "Merge pull request #1210 from mapbox/wrap_gdal_version\n\nMake GDAL version checking more consistent"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/210ed1553610c1320ccb73b6b6f34a9564b11f23", "message": "Merge pull request #1212 from mapbox/two-two-three\n\nAdd GDAL 2.2.3 to the build matrix"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f91331d8febbec7d0d039094212cbed27cf0a5bb", "message": "Don't automatically log GDAL exceptions\n\nWe had inadvertently copied all exceptions into the logger."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d6de3fcf6a06a44d7b020c2017ac470e5b43d16b", "message": "Merge pull request #1200 from vincentschut/fix-geometry_window-raster-bounds\n\nfix bug: raster width/height was swapped"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0074d0aa0d43cbedc657db8a5808e8fb657f2fb3", "message": "Merge pull request #1195 from makinacorpus/master\n\nMerging option ADD to the rasterize feature"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/979554c468f758aa0e91d7dc2ac51e092160b1eb", "message": "Merge pull request #1196 from mapbox/issue1000\n\nSwitch to GDALOpenEx for fine driver control"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c9952923e9a5b499d0be25107159fbe1cd5db33a", "message": "Add an exception for open options that can't succeed"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/664e7a4c741bff85e06534ef9473ccb132e48608", "message": "Better docs, skipif, fewer cdefs"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1d57e0840ccc0c15d06e847f22906193f09f231b", "message": "Remove unneeded variables"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/32ed82fe54bf7d1dc4ba7d8cf7c82dadc6613c8e", "message": "Fix bugs in shim for GDAL 1.x"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7a46a87b2b2277a0ad3990600013b7ecd7456a4b", "message": "Cast <int> for GDALOpen"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/be7550eb2b2bfb35238d1c58a1a8faca9e529d74", "message": "Add open_dataset function to shim module(s)"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7e2aeaf91bfd9476cb286e4640fb7ad7fd66031a", "message": "Tests and driver name fix"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9b2e05fd294e83e456c76f4bca1f30c1398e7b72", "message": "Switch to GDALOpenEx for fine driver control\n\nA WIP toward resolving #1000"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b51056a2639b93bfdd4426097c601b9650cda8ba", "message": "Merge pull request #1194 from mapbox/issue1144\n\nRaise error on invalid shape for InMemoryRaster"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/2467d9080bc3500d01f3ee234b998b5ba378c1c4", "message": "Suggest more specificity about pip"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1940671cd5204e711623a459bf001da9c035d43d", "message": "fiona, not rasterio, feedstock"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fcd361c49cca9c4ad32a2ac1f5d66b967f4b6cd4", "message": "Merge pull request #1192 from Juanlu001/add-get-params\n\nSupport GET parameters in URLs"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/21c43443288f28e9ffcc9b9183c27568a36ed21b", "message": "Merge pull request #1134 from mapbox/setci\n\nEnable setting color interpretation"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/51968aee58101d6fb264dfd4e13008a6ee3f3adb", "message": "Append #1188 to change log"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/19f733bef04e8c6035bf2082b93ad4841953158e", "message": "Merge pull request #1188 from mojodna/warped-vrt-boundless-reads\n\nOverride get_crs() in WarpedVRT to return dst_crs"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ca62e473e8d4e494217af43275dbb6b9f432420b", "message": "Merge pull request #1185 from mojodna/fix-deprecation-warnings\n\nUse width/height instead of num_cols/num_rows"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/36ea1c8ca9f5d5c6750b55e2a6933e2978e5047d", "message": "Note fix of #1184"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/cde542b1c3c96c43c63087df72fd1c577833f299", "message": "Pad VRTs so we don't overflow when reading\n\nResolves #1184"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/83ef7b8ef88cda7b92177c6b3be411c52cf25c04", "message": "Add shutil to list of modules to build from sdist"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/5d2a3969529b55235c003ea4a033d45fda5afea6", "message": "Update for 1.0a11"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1565284a772f35766c4f395a9bd8de2af750ba30", "message": "Merge pull request #1173 from mapbox/rio-rm\n\nExpose GDALDeleteDataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a11321e1b4f825f3f9a2acc8e27e188bd201fbbb", "message": "Merge pull request #1180 from jdmcbr/deprecated-affine\n\nChange a few affine -> transform in tests/docs"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0c9133ea2f6fdbb8e73fd41d1436210edb78c988", "message": "Merge pull request #1179 from mapbox/shush-test-warnings\n\nShush test warnings"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7c73024f30c08a6014ae6441cfada757bb5b5867", "message": "Add changes since 1.a10 to log"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/91a98ecce4f7ed96edba8badca482ccff3072f5e", "message": "Ignore UserWarnings"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b266bc8b467833b8a8fbee119f0d83e0e55e8f03", "message": "Merge pull request #1177 from jdmcbr/issue1174\n\nRemove potential circular import path"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/beaa8fceda0b563f40851e49ae135bccfd60249f", "message": "Merge pull request #1171 from mkaesberger/reproject-using-gcps\n\nFix GCP based reprojection"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/896d3370f4fa8dbc35ab898cfd13a0d8f53796b9", "message": "Format welcome"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/bfa2cc09b5b27ee403858446f6a430d3f9876cd4", "message": "XML comments around welcome"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8206ce3c71b7afe871e8b621860be6a6e4158c61", "message": "Add welcome message"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b235c02cb214e2f5953c61a904bc00767e599f2e", "message": "Merge pull request #1169 from mapbox/who_is_using_rasterio\n\nAdd Libraries.io link to README to show projects that depend on rasterio"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/5db85a6d57bfd7544e61e6c51f610422d2bccdf4", "message": "Update change log"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7602fd6aadd6edb80e2b82d6b9bacbbab81a9a8b", "message": "Merge pull request #1160 from DHI-GRAS/merge-nodata-nan\n\nmerge: treat nodata=None and np.nan in data"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e9c67f30f0b3132e2e81bf0dcf60956f3c601e36", "message": "Update change log and version"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0496481e0be95bff75159d6de778214659758329", "message": "Merge pull request #1167 from mapbox/issue1075\n\nStop open's inner Env from clobbering outer env creds"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c443affdd68987ea1652e1f992452c8414ff1664", "message": "Stop open's inner Env from clobbering outer env creds\n\nResolves #1075"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/146e2e1a6a62b2b15867bba32ae3e22e2dd6a0ff", "message": "Merge pull request #1161 from mapbox/boundless-vrt\n\nSwitch to warped vrt internally for boundless reads"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f80578a937b35160533c05ffef2210bdab5c283d", "message": "Merge pull request #1127 from mapbox/netcdf\n\nAdd support for netcdf identifiers to file option handler"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fce5d14e168eaca5ca42986f8c955f579d88c1fa", "message": "Merge branch 'netcdf' of github.com:mapbox/rasterio into netcdf"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8bf08d9a5d64f0e293256c5841352b77f1976a4e", "message": "Skip netcdf test for GDAL < 2.1"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/aaf6d3ab7b7234aaa43e126708f1ab9468311b94", "message": "Merge branch 'master' into netcdf"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8be8178165eb3b7badbfe15f244ed569d14be48d", "message": "Addressing pull request comments"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/76d225bba1308bc59b7006042e2fcfda0f91e2af", "message": "Remove test that can't fail unless we run out of memory"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9e1373af4fd28b2826f5f5336dca1b52e73036b9", "message": "Merge pull request #1132 from brendan-ward/issue1131\n\nRemoved unnecessary array causing MemoryError in calculate_default_transform()"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8726e76d56e732e34f136cb6d0ba391ad641ddcb", "message": "Merge pull request #1163 from rouault/faster_warp\n\ncreate_warp_options(): do not set nodata value when there's none"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a499e93a173274c47df4095584cfff120d2f149a", "message": "Merge pull request #1164 from rouault/retire_gdal19_and_add_gdaltrunk\n\n.travis.yml: remove GDAL 1.9 builds, and add GDAL trunk builds"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/82beae88845481bca541423167e242b3e23b2c9f", "message": "Make our temp VRTs larger so we hit the source overviews properly"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/566c6ec2fedb8da8ad40a0301ab302f8c0f61ebe", "message": "Update change log, version, fix Window ctor calls"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e23767b8b47279baf5658ee58146e0e06688f0e8", "message": "Switch to warped vrt internally for boundless reads"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c691c5c9f2c55b598988161533b1024394935bc0", "message": "xfail for gdal < 2.1"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/89538636ff92112848a888e314bea8f457e3a30b", "message": "Remove last extra +wktext, xfail buggy test"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3320fb7352882b0bf39100b4b1fe9aa09209627a", "message": "Don't automatically add a +wktext to projections"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ece77850546928aba3227c308d712ae481325f49", "message": "Merge pull request #1152 from mapbox/issue1138\n\nFix fillnodata docs, intent, and tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ac7134d7c1631d27a338264788f2f199be95a5cc", "message": "Update docstring and tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b6f762b345c3261217ecded178d25d6f5860059d", "message": "Switch to InMemoryRaster, best idea ever"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/de03b7cb5c0e68d68430cee50b7f35c30ae531e5", "message": "Pin cython==0.26.1"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a80ce348470888b3f3c2ac1baba61dacc98ea5f9", "message": "Add test fixture and cleaner assertions"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/eda8e0339fd14d8bc86f33d0a3a72b94875305e6", "message": "Merge pull request #1153 from mapbox/vrt-nodata\n\nWarpedVRT and reproject nodata alignment"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e859c225b3d13f073ddd9c049453917d63ee98bf", "message": "Cython 0.27 breaks rasterio build"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/495ea3eb766ea159424fb82a59d6fdc3780bf2c4", "message": "Pin cython==0.26.1"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/691f263714ade61f73a6266484a132c24388eb78", "message": "set nodatavals even if src_nodata is None"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7ec4e197a8fbf10af4e23c56ee07b2a3c00c44a4", "message": "Support no-nodata for sources in the same manner as gdalwarp"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e6fddf8321d24ec16686749c46373a0a235be186", "message": "Final default of src_nodata to 0."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3247297b6a5047ca95bd98b5aed8e7ae4fbae865", "message": "Sync WarpedVRT and reproject docstrings and nodata defaults"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a88c271e779f022d2f27343be9780542a1f4fbb1", "message": "Merge pull request #1136 from mapbox/mask-return-type\n\nFix mask return type and overhaul tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/91f85d5556b866c37cd08d2fbda4f32259e1f4bf", "message": "Raise ValueError if mask is None, no no-ops"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0fc46abb21f4012d97e65060ac55f698d343bafc", "message": "Resolves #1138\n\nIf a masked array is passed to fillnodata, its mask will be used.\nThe mask argument will always override this default mask.\n\nIt turns out that our rio calc fillnodata tests were not filling\nand asserting the wrong value. These errors have been corrected."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/259864f111701876bb1fd12a1ee8dc7852f44bc8", "message": "Fill out 2D out_shape to match indexes\n\nResolves #1150"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a7d0ec530724e922b7da6284a4ca670c164e3e23", "message": "Merge branch 'netcdf' of github.com:mapbox/rasterio into netcdf"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b22cbee819f697c909fbad8298fff9f5d9f8b6de", "message": "Lowercase 'netcdf'"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e2e9db3d7d4a2236cf92d31c1ca2a12ae9764851", "message": "Merge branch 'master' into netcdf"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/41f7eaa244db5a159d527aa004e19307fcb97ea9", "message": "Skip also with GDAL 1.11"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/37273f8428ba10049ff576a6906d2982232530b9", "message": "Skip netcdf test for GDAL < 2.1"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/44feb67702fb04c4075a54888382bd94f28053f8", "message": "Internal png"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1adff6df024236e3ed40d8a05970b19a3d63b7c7", "message": "--with-netcdf"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e5f2ce6e4d80acfd05a6f5b7a876a3b92a82adcc", "message": "Merge pull request #1123 from choldgraf/image_read\n\nfixing read imshow"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/089fccb1ac0c65ad29ed6b7e36fe6e368bb2c557", "message": "Merge pull request #1128 from choldgraf/raster_norm\n\nplot normalization"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b69f4c061574952dd78ba924b8b3cc64df1122e0", "message": "Merge pull request #1147 from mapbox/trust-the-pangolin\n\nFix Travis builds on Ubuntu 14.04"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4d7359b85f85b66a1463a337c659a958e32060b3", "message": "Towards a resolution of #1140"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8988f07de91069050b34d305cbc3276bd4df3fbc", "message": "Use netcdf prefix when opening file"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1bc395f27def306bc04d273df49c1cf984bb9cf6", "message": "Add subdatasets method and surface in rio-info"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9e51880309cc1c0496bdba0943527f0b80a99782", "message": "Revert to no special case for netcdf"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/6fc3ab334200920819dc2ae063c7845988bcd9fc", "message": "Merge pull request #1129 from jdmcbr/fix-mask-deprecation-warning\n\nUse height/width instead of num_row/num_col in mask"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/959fd3895c20c965e69fa1df8a16af450abf26be", "message": "Add support for netcdf identifiers to file option handler"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ef2692627d1ae68a3b17671c108f0a1756d1f3f8", "message": "Create ISSUE_TEMPLATE.md"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b64bdd8b9a140faac574457e38261bf2a03f8a0b", "message": "Merge pull request #1112 from mapbox/cinit\n\nNo more work done in dataset start()"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8edea9dfa71595231d736a3b567fa8750de40ea6", "message": "Remove commented code"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a8e12188e86f06a28efe946302d9d12bf675c5c9", "message": "Merge pull request #1105 from mapbox/issue1100\n\nRemove deprecated ul() method from TransformMethodsMixin class"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e6114698d7dc562f4cb13c19caf6ff0ce83d0d3e", "message": "Merge branch 'master' into issue1100"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/52cf7b86c205dc5df69bd6b48842c7d582f78903", "message": "Note changes in v1 doc"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/11984c071604f23265a4cc41a2770e5e25ce80ba", "message": "Address reviewer comments"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9a55725a749433a30ceb9a5bb381fb467d275918", "message": "No more work done in dataset start()\n\nResolves #1046"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/77977eb575b89d712f14e48db9cc69d3184062f8", "message": "Merge pull request #1106 from jorisvandenbossche/patch-1\n\nDOC: wrong keyword in resample example"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f5cb805d83957cb0bc0b81b4ef0faaa4e3221803", "message": "Merge pull request #1111 from brendan-ward/rio_info_abort_err\n\nFix abort in rio info on float.tif and improve tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4a1d94901a64c3cad82f80b4a642d24b7bf04f39", "message": "Merge pull request #1109 from brendan-ward/issue1107\n\nProperly close destination dataset after copy operation"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29265265", "body": "Using ReadBlock and WriteBlock as in http://www.gdal.org/classGDALRasterBand.html#a09e1d83971ddff0b43deffd54ef25eef?\n\nA major concern for me is how RasterIO and Block access can't be mixed, explained in http://osgeo-org.1560.x6.nabble.com/gdal-dev-Best-practices-for-concurrent-writes-with-GDAL-was-RasterIO-in-paralel-td3746104.html#a3746106, and how to protect programmers from mixing them.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29265265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29299794", "body": "Don't take this the wrong way, anyone, but I'm going to prune away off-topic or tangential comments in this repo.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29299794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29301870", "body": "Thanks, @AsgerPetersen, I think I get it.\n\nIn your example above, I see block reads and a windowed write. Is that deliberate? It could be a good usage pattern: block writing is tricky and as you said, requires understanding of GDAL internals, while block reading is more forgiving, just iterate over blocks as the driver gives them to you.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29301870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29301962", "body": "I'm probably in favor of this, but what exactly is the difference from #6?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29301962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30175196", "body": "I'm going to try to keep issues actionable and moving forward, so will close this one. do send a pull request when ready!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30175196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30184894", "body": "That interface looks almost exactly right to me. For a start, let's just have the native blocks as (offsetx, offsety, width, height) tuples from a src.blocks iterator. I'd rather we aggregate them (for the 2x2 case) using an itertools-ish grouping approach.\n\n```\nfor double_blocks in double_the_blocks(src.blocks(1)):\n    ...\n```\n\nBut if this won't work a chunksize kwarg would be okay. How about window as a kwarg?\n\n```\n    for block in src.blocks(1):\n        data = src.read_band(1, window=block)\n        dst.write_band(1, data, window=block)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30184894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30246399", "body": "Great. While we're discussing blocks, I've got a half-formed idea that a function returning the block window for a given pixel coordinate would be helpful. Yes? No? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30246399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30259698", "body": "Implemented in a8e0533 (I messed up the commit message, should have mentioned this issue). \n\nLemme know if it works like you'd expect. And thanks again for the help on this!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30259698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30342183", "body": "@AsgerPetersen you mean the window tuples, right? If so, I agree 100% and this is the time to switch. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30342183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30347399", "body": "Can you check out the commit above?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30347399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30390413", "body": "@hobu, any comment on this interface for windowed reading and writing? https://github.com/sgillies/rasterio/blob/issue13/docs/windowed-rw.rst\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30390413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30486933", "body": "@AsgerPetersen after a little more thought: to get closer to numpy syntax should the windows be tuples like \n\n```\n(row_start, row_stop, col_start, col_stop)\n```\n\nor even\n\n```\nwindow = ((row_start, row_stop), (col_start, col_stop))\n```\n\n? The second form is directly convertible to numpy slices for 2d subsets:\n\n```\narr[window[0]:window[1]]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30486933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30523031", "body": "@hobu thanks!\n\n@AsgerPetersen: windows don't apply to .ul(). It's there to serve the \"I have x,y coordinates in space, what pixel do they fit?\" question. But yes, it could accept either a tuple or x, y positional params.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30523031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30599230", "body": "@RutgerK: it's an interesting idea, but I think it complicates rasterio and is better left out of the library. I suspect it would be less code to extend rasterio yourself with a new function that took a list of filenames and made itself into a context manager for all those files, closing them on exit, etc.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30599230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30677276", "body": "Agreed. How about another band-ordered list property (like band_shapes) called \"nodata\"?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30677276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/31664866", "body": "Looks pretty good. I see a couple little things to change, but I'll do that after I merge.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/31664866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/32586930", "body": "The following [example](https://github.com/sgillies/rasterio/blob/issue20/examples/polygonize.py)\n\n```\nimport pprint\n\nimport rasterio\nimport rasterio._features as ftrz\n\nwith rasterio.open('box.png') as src:\n    image = src.read_band(1)\n\npprint.pprint(\n    list(ftrz.polygonize(image)))\n```\n\nusing this image\n\n![box](https://f.cloud.github.com/assets/33697/1938617/e4b8a1ea-7f4e-11e3-8772-d2288cad2772.png)\n\nas box.png produces the output\n\n```\n[{'geometry': {'coordinates': [[(50.0, -30.0),\n                                (50.0, -180.0),\n                                (300.0, -180.0),\n                                (300.0, -30.0),\n                                (50.0, -30.0)]],\n               'type': 'Polygon'},\n  'id': '0',\n  'properties': {'pix_val': 127},\n  'type': 'Feature'},\n {'geometry': {'coordinates': [[(0.0, 0.0),\n                                (0.0, -300.0),\n                                (500.0, -300.0),\n                                (500.0, 0.0),\n                                (0.0, 0.0)],\n                               [(50.0, -30.0),\n                                (300.0, -30.0),\n                                (300.0, -180.0),\n                                (50.0, -180.0),\n                                (50.0, -30.0)]],\n               'type': 'Polygon'},\n  'id': '1',\n  'properties': {'pix_val': 0},\n  'type': 'Feature'}]\n```\n\nThis came together more quickly than I thought \u2013 maybe I'm starting to get a decent grip on GDAL, OGR, and Cython.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/32586930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/32677529", "body": "Merged to master.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/32677529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/32965816", "body": "Hey @kjordhal: any objection to me doing this for Fiona? Not for 1.0.3, but say for a 1.1?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/32965816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33156086", "body": "Done :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33156086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33424496", "body": "I turned your code into a script\n\n```\nimport logging\nimport sys\n\nimport rasterio\n\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\nwith rasterio.drivers():\n    with rasterio.drivers():\n        pass\n    with rasterio.open('rasterio/tests/data/RGB.byte.tif') as f:\n        pass\n```\n\nand the result (after adding log.debug() calls in start() methods)\n\n```\nDEBUG:rasterio:Creating a DriverManager in drivers()\nDEBUG:rasterio:Creating a DummyManager in drivers()\nDEBUG:rasterio:An existing driver env was found in start(). no action\nDEBUG:rasterio:Got coordinate system\nDEBUG:rasterio:Params: +proj=utm +zone=18 +ellps=WGS84 +units=m +no_defs\nDEBUG:rasterio:Got coordinate system\n```\n\nYou can nest safely. Rasterio doesn't create a new driver environment if there's already one in context.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33424496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33905415", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33905415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34537076", "body": "The new methods are\n\n```\ndef tags(self, bidx=0, domain=None):\n    \"\"\"Get the dataset's tags.\n\n    The optional domain and band arguments select a specific\n    GDAL metadata domain and tags for a specific band.\n    \"\"\"\n\ndef update_tags(self, bidx=0, domain=None, **kwargs):\n    \"\"\"Update the dataset's tags from items in kwargs.\n\n    The optional domain and band arguments select a specific\n    GDAL metadata domain and tags for a specific band.\n\n    Only keys and values that can be converted to strings are\n    allowed.\n    \"\"\"\n```\n\nand they are used like this (from test_tags.py)\n\n```\nimport rasterio\n\ndef test_tags_read():\n    with rasterio.open('rasterio/tests/data/RGB.byte.tif') as src:\n        assert src.tags() == {'AREA_OR_POINT': 'Area'}\n        assert src.tags(domain='IMAGE_STRUCTURE') == {'INTERLEAVE': 'PIXEL'}\n        # Check band 1's tags\n        assert 'STATISTICS_MAXIMUM' in src.tags(1)\n\ndef test_tags_update(tmpdir):\n    tiffname = str(tmpdir.join('foo.tif'))\n    with rasterio.open(\n            tiffname, \n            'w', \n            driver='GTiff', \n            count=1, \n            dtype=rasterio.uint8, \n            width=10, \n            height=10) as dst:\n        dst.update_tags(a='1', b='2')\n        # update band 1's tags\n        dst.update_tags(1, c=3)\n        assert dst.tags() == {'a': '1', 'b': '2'}\n        assert dst.tags(1) == {'c': '3'}\n\n    with rasterio.open(tiffname) as src:\n        assert src.tags() == {'a': '1', 'b': '2'}\n        assert src.tags(1) == {'c': '3'}\n```\n\nSince GDAL only supports string metadata, the onus is on you to sort out the types of the ndvi tag values.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34537076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34548508", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34548508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34580340", "body": "Took the RGBA route. So usage is:\n\n```\ncmap = {0: (255, 0, 0, 255), 255: (0, 0, 255, 255)}\nwith rasterio.open(filename, 'w', ...) as dst:\n    dst.write_band(1, array)\n    dst.write_colormap(1, cmp)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34580340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34835708", "body": "I'm all for more clarity in the examples. Can you send me a patch that makes an example more clear?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34835708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35051553", "body": "@AsgerPetersen Here's a happy customer https://twitter.com/bryanluman/status/434056951639470080 and his code: https://gist.github.com/bryanluman/8983536.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35051553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35171776", "body": "Work started in https://github.com/mapbox/rasterio/tree/issue12. It's a bit hairy. Leveling up on Cython and C++.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35171776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35421458", "body": "Thanks, @hobu, I will.\n\nStatus so far: I'm porting GDALReprojectImage() to Cython, so aiming at a lower level than what's available in osgeo.gdal. I'm less grumpy about turning ndarrays into GDAL datasets in order to operate on them now that I've (somewhat) mastered the in-memory driver. Still, would be useful to have a GDAL dataset class could directly access ndarrays and save on copying.\n\nCoincidentally, I saw a thread the other day on gdal-dev about adding this same feature to osgeo.gdal.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35421458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35646256", "body": "@youngpm Good to see you here! Not to take this thread on too much of a tangent, but you are talking about my holy grails here: GDAL MEM driver directly accessing ndarrys and (for Shapely) a coordinate sequence class that directly accesses coordinates in a Python array (or other object that provides memoryviews).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35646256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35857525", "body": "At last!\n\n![screen shot 2014-02-23 at 9 40 01 pm](https://f.cloud.github.com/assets/33697/2242743/0587a0b0-9d0e-11e3-8233-0b2a759532eb.jpg)\n\nAll of the many warping knobs yet to be added, but it's eady to be merged into master.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35857525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35911563", "body": "Status: I don't think I have this one figured out yet. Tests aren't passing: everything's coming back positive when I'm expecting some nodata regions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35911563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/36593666", "body": "Invalid issue. Already done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/36593666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37241634", "body": "@brendan-ward Yes, rasterizing would be a good feature.\n\nI think we could simplify it quite a bit by having the same constraint as [gdal_rasterize](http://www.gdal.org/gdal_rasterize.html), that the vectors and raster have the same CRS, no reprojection. Also, I think GeoJSON-ish Python objects (the kind of things you could pass to `shapely.geometry.shape()`) are a better fit for rasterio than Shapely objects.\n\nWhat would you think of adding a rasterio.features.rasterize() function that is symmetric with [features.shapes()](https://github.com/mapbox/rasterio/blob/master/rasterio/features.py#L7)? Usage something like:\n\n```\nfrom rasterio.features import rasterize, shapes\n\n# get the shapes and values from \"source\" and rasterize them into \"destination\".\ndestination = rasterize(shapes(source, transform=None), source.shape, transform=None)\n```\n\nthe above should produce a destination array equal to the source. A round trip. Rasterio is all about symmetry :)\n\nOf course, the shapes above would be in image coordinates. Passing not-None transforms in would let us use coordinates appropriate to a CRS.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37241634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37242462", "body": "@brendan-ward Most importantly: pull request would be very welcome! Feel free to grab code from rasterio/_features.pyx.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37242462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37258463", "body": "Sorry, all. I'm going to keep these issues on track by deleting tangential comments.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37258463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37683659", "body": "@amit no technical blockers and I think it's useful for TIFFs. The only reason I haven't done it is that most GDAL drivers are read or write-only and don't support r+.\n\nCan you suggest what rasterio should do when someone opens a JPEG, say, in r+ mode? Raise a ValueError?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37683659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37705527", "body": "I haven't dug into GDAL's JPEG driver, but the first sentence in http://www.gdal.org/frmt_jpeg.html is\n\n> The JPEG JFIF format is supported for reading, and batch writing, but not update in place\n\nThis is the case for a lot of GDAL formats.\n\nMeanwhile, 04b1f83 adds update in place of GeoTIFF bands.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37705527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37716266", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37716266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37727015", "body": "That was a dumb bug of mine. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37727015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38231034", "body": "Solved.\n\n```\npprint.pprint(list(shapes(destination, transform=dst_transform)))\n\n# Output:\n[({'coordinates': [[(-118906.5, 118536.4),\n     (-118906.5, -118613.6),\n     (118668.5, -118613.6),\n     (118668.5, 118536.4),\n     (-118906.5, 118536.4)]],\n   'type': 'Polygon'},\n  255),\n ({'coordinates': [[(-237481.5, 237536.4),\n     (-237481.5, -197663.6),\n     (197718.5, -197663.6),\n     (197718.5, 237536.4),\n     (-237481.5, 237536.4)],\n    [(-118906.5, 118536.4),\n     (118668.5, 118536.4),\n     (118668.5, -118613.6),\n     (-118906.5, -118613.6),\n     (-118906.5, 118536.4)]],\n   'type': 'Polygon'},\n  0)]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38231034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38364473", "body": "Fiona has support for .zip and .tar virtual filesystems (and uses viszip etc internally) but neither it nor Rasterio will _ever_ support vsicurl stuff. Abstracting over formats and local virtual filesystems is one thing, but abstracting away the network is IMO a bad idea.\n\nThat IOError is the same error you get if you try to open any non-existent file in Python and is by design. I want rasterio.open() to respond exactly like open() does in this case.\n\n```\n>>> open('/foo/bar/baz.json')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIOError: [Errno 2] No such file or directory: '/foo/bar/baz.json'\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38364473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38465339", "body": "Thanks, @robintw!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38465339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38984406", "body": "@AsgerPetersen :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38984406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38984853", "body": "Exciting!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38984853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38985370", "body": "Hey, I'm trying this out and really like what I see! Check out my IPython notebook: http://nbviewer.ipython.org/gist/sgillies/9847657. Next I'll see if I can rasterize the GeoJSON file in https://gist.github.com/sgillies/8655640.\n\nThis is going to be a killer feature, @brendan-ward.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38985370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38986207", "body": "Et voil\u00e0: http://nbviewer.ipython.org/gist/sgillies/9848036. \n\n@brendan-ward If you don't mind, once I merge this I will make the first arg a iterator over (geom, val) tuples so we can burn in pixel values and the same ones as come out of shapes(). Also, I'll add the option to pass an array in and not just shape and transform.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38986207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38986798", "body": "Ah, yes, I see. I'll merge this tomorrow :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38986798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39121855", "body": "Hey @perrygeo, I was thinking of your rasterstats module while @brendan-ward and I discussed this feature. Should be possible to use Rasterio now instead of osgeo.gdal. If you like Shapely, you might like Rasterio, too :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39121855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39240864", "body": "Am I allocating or deallocating config options improperly?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39240864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39530615", "body": "Yeah, it would be nice if we returned clean shapes. How would we do it without using Shapely (which I don't want to make a dependency of Rasterio)?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39530615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39628350", "body": "In extracting the shapes from the Python logo, I found that there's one fewer shape in the 8-connected case and one is \"invalid\", so apparently a bowtie polygon instead of two polygons in the 4-connected case.\n\n```\n(Pdb) from shapely.geometry import shape\n(Pdb) [shape(o).is_valid for o in shapes4]\n*** AttributeError: 'tuple' object has no attribute 'get'\n(Pdb) [shape(o[0]).is_valid for o in shapes4]\n[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n(Pdb) [shape(o[0]).is_valid for o in shapes8]\nWARNING:shapely.geos:Self-intersection at or near point 7.5 -7\n[True, True, True, True, True, True, False, True, True, True, True, True, True, True]\n```\n\nBut run either set of shapes through rasterize() and I see the same image. So, no harm in them, I think.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39628350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39651726", "body": "Let's try using Fiona's OGRGeomBuilder instead of using JSON as an intermediary.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39651726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40257102", "body": "Thanks, @brendan-ward!\n\nI'm not too concerned about the benchmark. Rasterio is supposed to be helpful for programmers who don't have datasets and layers in hand, it's about creating datasets from numbers and texts. In my own benchmarks, the creation of an OGR layer + population with features before calling osgeo.gdal's Polygonize() gives back the performance difference.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40257102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40811033", "body": "Sure, `read_band(bidx, masked=False)` sounds good to me. On the writing end, if we pass a masked array all we need to do is get the appropriate fill value from the dataset's nodatavals property, right? Optionally, let a programmer override that with a given value.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40811033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40822239", "body": ":thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40822239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41123627", "body": "Thanks to the addition of \n\n```\nwith cpl_errs:\n    self._hds = _gdal.GDALOpen(fname, 0)\n```\n\nto _io.pyx, we can turn important GDAL errors into useful Python exceptions.\n\n```\n(rasters)MapBox-FC:rasterio sean$ rio_insp --mode r+ test_reproject.png\nERROR:GDAL:CPLE_NotSupported in The PNG driver does not support update access to existing datasets.\n\nERROR:rio_insp:Failed. Exception caught\nTraceback (most recent call last):\n  File \"/Users/sean/code/rasterio/scripts/rio_insp\", line 65, in <module>\n    with rasterio.open(args.src, args.mode) as src:\n  File \"/Users/sean/code/rasterio/rasterio/__init__.py\", line 111, in open\n    s.start()\n  File \"_io.pyx\", line 816, in rasterio._io.RasterUpdater.start (rasterio/_io.c:14407)\n  File \"_err.pyx\", line 69, in rasterio._err.GDALErrCtxManager.__exit__ (rasterio/_err.c:1175)\nValueError: The PNG driver does not support update access to existing datasets.\n```\n\nNB that it's only within such a block that exceptions are raised, and only the most recent one, so you probably only want to call one GDAL function within a cpl_errs block.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41123627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41123671", "body": "Fixed along with #75.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41123671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41170826", "body": "@brendan-ward Ping because you might find the cpl_errs context guard handy. I'm using it in just two places right now. One is https://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L816 where it encapsulates the call to GDALOpen() and raises a ValueError if we try to open a PNG in r+ mode (or any other format that is read-only or write-only). In that case, we never get to https://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L818 and that's a pretty nice improvement.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41170826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41611086", "body": "A couple completely off-base comments deleted above. You can now pass a num_threads=N keyword argument to reproject() now and it'll pass it to GDAL and call the *Multi form of the warper. I'm not seeing any significant speedup yet and suspect you'd only see one for very large images.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41611086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41624326", "body": "Thanks for the file, @kapadia. It's exposed an interesting and possibly embarassing bug. Details soon.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41624326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41641744", "body": "@kapadia please disregard my previous comment: sloppy testing led me to misinterpret some early results.\n\nI was unable to reproduce the LZW error you'd hit before, but I did find that writing to compressed TIFFs is a bit fraught. Unless the destination is band-interleaved and tiled the output can actually get inflated as shown in the example below using rasterio's rio_cp program. \n\n```\n(tob27)vas-y:rasterio seang$ rio_cp --block-height 512 --tiled --lzw --interleave-band tiff-error.tif /tmp/test.tif; ls -l !$\nrio_cp --block-height 512 --tiled --lzw --interleave-band tiff-error.tif /tmp/test.tif; ls -l /tmp/test.tif\n-rw-r--r--  1 seang  wheel  53642768 Apr 28 22:34 /tmp/test.tif\n(tob27)vas-y:rasterio seang$ rio_cp --lzw tiff-error.tif /tmp/test.tif; ls -l /tmp/test.tif\n-rw-r--r--  1 seang  wheel  160382392 Apr 28 22:52 /tmp/test.tif\n```\n\nThe optimizations made by the GDALRasterBandCopyWholeRaster() and GDALDatasetCopyWholeRaster() functions in GDAL allow pixel-interleaved datasets to be compressed efficiently but aren't exposed yet in rasterio.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41641744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079610", "body": "Yes, good point. I'll close for now as my need was just hypothetical.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079700", "body": "Is this issue still live?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42081461", "body": "@dharhas rasterio.open() will open a VRT, yes, and you can read subsets from the file using the syntax shown in https://github.com/mapbox/rasterio/blob/master/docs/windowed-rw.rst#reading. The window indexes are in row, column pixel units. If you wanted to convert a bounding box in world coordinates to a window, you could write a method like\n\n```\ndef window(self, *bbox):\n    llidx = self.index(*bbox[:2])\n    uridx = self.index(*bbox[2:])\n    return (uridx[0], llidx[0]), (llidx[1], uridx[1])\n```\n\nExample: `dataset.window(*dataset.bounds)` should return ((0, dataset.height), (0, dataset.width)).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42081461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42206178", "body": "Thanks, both! Apologies, @AsgerPetersen, I've made the fix.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42206178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42207258", "body": "@mwtoews I definitely don't want to over-kill this, but yes, something like a namedtuple (sequence access and attributes) with a few methods would be mighty fine. Maybe Rasterio's should default to GDAL order since many users are coming from gdal.py?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42207258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42453928", "body": "Rasterio can read VRTs but can't write them. I might like to do something about that in the future.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42453928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43382732", "body": "@mwtoews I'm happy to see you interested in Rasterio :) Another approach would be a method that read bands from a list of indexes into a 3D array, something like `rgb = src.read([1,2,3])`. I worry that read_bands() is too similar to read_band() and will result in typo errors. I'm definitely in favor of such a feature.\n\nNo, let's don't iterate over indexes and save **iter**() in case we ever want to support [subdatasets](http://www.gdal.org/gdal_datamodel.html).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43382732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43533670", "body": "@mwtoews Let's leave `read_band()` as it is. I was proposing that a `read()` method would return the 3D array. Maybe by default returning all bands? Also, what would you think of band vs pixel-interleaved options for the output array? Band-interleaved would be `band, row, column` indexed, and pixel-interleaved would be `row, column, band` indexed. Useful or just confusing?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43533670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43943415", "body": "Hey, in the padding-transforms branch I have all public-facing functions and methods using `rasterio.coords.AffineMatrix` instead of a list of numbers. This will break existing code, but we can add some argument marshaling logic to help users get from 0.8 to 0.9 and then cut out the list of numbers in 1.0. Thoughts?\n\n@mwtoews unless I misread you, we've already got equivalents of those methods above in `ul()` and `index()`: https://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L441-L456.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43943415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43945976", "body": "@mwtoews :+1: Looks great so far. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43945976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44023009", "body": "@mwtoews @AsgerPetersen @brendan-ward Have any of you seen the Affine class from Planar? \n\n  http://pythonhosted.org/planar/transforms.html\n\nIt looks super useful and very compatible with Rasterio and Fiona.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44023009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44030917", "body": "@brendan-ward yes. I like the code in planar.transform quite a bit. If we pulled it out into its own module, it could be shared between Rasterio, Fiona, and Shapely. Would even be useful to gdal.py programmers.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44030917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44067818", "body": "Okay, I've forked Planar and copied the important code to https://github.com/sgillies/affine/tree/master. As of 6a13f6d (padding-transforms branch), Rasterio uses the new affine.Affine class for transforms.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44067818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44468760", "body": "Affine 1.0 is up on PyPI now: https://pypi.python.org/pypi/affine/1.0.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44468760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44468877", "body": "I added this one to the 0.9 milestone.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44468877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44468967", "body": "@brendan-ward See also #83 where @mwtoews is implementing masked array reading.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44468967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44709178", "body": "I'd be surprised if Rasterio did the right thing with NaN, because I haven't been looking out for this at all!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44709178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878151", "body": "@kapadia I can't reproduce the crash with Rasterio's rasterio/tests/data/RGB.byte.tif, at least not here with homebrewed GDAL 1.10.1 and Python 2.7.5. Is it file-specific?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878643", "body": "I wanted to check on OS X first to see if it was an easy to fix bug. I'll get on Ubuntu 14.04 now and start debugging.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44891774", "body": "[This version](https://gist.github.com/sgillies/e6fd8ac4cb4a66c05c6f) of your script does not crash.\n\nSo, the problem is multiple calls to `drivers()`. I'll have a fix for this in 0.9. Meanwhile, only use one drivers environment per program.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44891774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44976730", "body": "Thanks for the pointer to that matplotlib issue. It's a freetype bug and upgrading freetype to 2.5.2-1ubuntu2.1 is the solution.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44976730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44985198", "body": "And today it builds.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44985198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44992802", "body": "Fantastic!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44992802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45559939", "body": "Possibly related: #91 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45559939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45560064", "body": "@mwtoews I think it's okay for the output to be an ordinary or masked array. The worst that can happen is an AttributeError from `out.mask`, right?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45560064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45560435", "body": "Kicked a couple documentation issues to the next milestone. Just waiting on #71 now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45560435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45785800", "body": "Excellent. Thanks, everybody!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45785800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/46583713", "body": ":+1: \n\n@mwtoews I'd like to point out that we're now releasing the GIL when calling GDALRasterioIO (see https://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L42). If, instead of having write() call write_band() multiple times, we pushed the writes into almost-pure C functions (multi-band versions of the io_*() functions) we could release the GIL once for many reads/writes. Does that make sense to you? Then write_band() could just call write().\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/46583713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47120003", "body": "Hey, so we're not duplicating effort: I'm making good progress on io_multi_*() functions that read or write multiple bands in a branch I've dedicated to #96. Along the way I'm learning some new stuff about Cython typed memoryviews and the GIL (all good).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47120003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47132329", "body": "I closed #96. The io_multi\\* functions are good to go.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47132329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47275201", "body": "Yep, and this is very possible to do now that #96 is closed. I'm mentally a little blocked on #97, so I'll switch to this one today.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47275201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47406591", "body": "Cint32, CFloat32, CFloat64 are added in 88bf610. Numpy only has 2 complex types (complex64 and complex128), so I chose to have all 3 GDAL types except CFloat32 be converted to numpy.complex128.\n\n```\n$ rio_insp rasterio/tests/data/cint16-demo.tif\nRasterio 0.9 Interactive Inspector (Python 3.4.1)\nType \"src.meta\", \"src.read_band(1)\", or \"help(src)\" for more information.\n>>> data = src.read(1)\n>>> data\narray([[ 0.+0.j,  0.+0.j,  0.+1.j, ...,  0.+0.j, -1.+0.j,  0.-1.j],\n       [ 0.+0.j,  1.+0.j,  0.+0.j, ...,  0.-1.j,  0.+0.j,  0.+1.j],\n       [ 0.-1.j, -1.+0.j,  0.+1.j, ...,  0.+1.j, -1.+1.j, -1.-1.j],\n       ...,\n       [ 0.+0.j,  0.+0.j,  0.-1.j, ..., -1.+1.j, -2.+1.j,  0.+1.j],\n       [ 1.+0.j,  0.+0.j,  0.+1.j, ...,  0.-1.j,  0.-1.j,  0.+0.j],\n       [ 0.+0.j,  0.+0.j,  0.-1.j, ...,  0.+0.j,  0.+0.j,  0.+0.j]])\n>>> data.real\narray([[ 0.,  0.,  0., ...,  0., -1.,  0.],\n       [ 0.,  1.,  0., ...,  0.,  0.,  0.],\n       [ 0., -1.,  0., ...,  0., -1., -1.],\n       ...,\n       [ 0.,  0.,  0., ..., -1., -2.,  0.],\n       [ 1.,  0.,  0., ...,  0.,  0.,  0.],\n       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])\n>>> data.imag\narray([[ 0.,  0.,  1., ...,  0.,  0., -1.],\n       [ 0.,  0.,  0., ..., -1.,  0.,  1.],\n       [-1.,  0.,  1., ...,  1.,  1., -1.],\n       ...,\n       [ 0.,  0., -1., ...,  1.,  1.,  1.],\n       [ 0.,  0.,  1., ..., -1., -1.,  0.],\n       [ 0.,  0., -1., ...,  0.,  0.,  0.]])\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47406591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47719991", "body": "Here's an example: https://github.com/mapbox/rasterio/commit/a17d5ec16421ba3bbb54769b128a3dee8e8e3a56. Simpler than a namedtuple and the tests continue to pass.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47719991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47818660", "body": "@kapadia this is sweet\n\n```\n$ rio_insp rasterio/tests/data/RGB.byte.tif\nRasterio 0.9 Interactive Inspector (Python 2.7.5)\nType \"src.meta\", \"src.read_band(1)\", or \"help(src)\" for more information.\n>>> list(map(src.colorinterp, src.indexes))\n[<ColorInterp.red: 3>, <ColorInterp.green: 4>, <ColorInterp.blue: 5>]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47818660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819792", "body": "Sure.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819953", "body": ":+1: for both.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47820384", "body": "Merged. There's a quirk which might be GDAL's:\n\n```\n=================================== FAILURES ===================================\n_______________________________ test_colorinterp _______________________________\n\ntmpdir = local('/private/var/folders/zq/fv6jds3j4wb_0z0zh35xky_c0000gn/T/pytest-181/test_colorinterp0')\n\n    def test_colorinterp(tmpdir):\n\n        with rasterio.drivers():\n\n            with rasterio.open('rasterio/tests/data/RGB.byte.tif') as src:\n                r, g, b = map(src.read_band, (1, 2, 3))\n                meta = src.meta\n\n                assert src.colorinterp(1) == ColorInterp.red\n                assert src.colorinterp(2) == ColorInterp.green\n                assert src.colorinterp(3) == ColorInterp.blue\n\n            tiffname = str(tmpdir.join('foo.tif'))\n\n            with rasterio.open(tiffname, 'w', **meta) as dst:\n                dst.write_band(1, r)\n                dst.write_band(2, g)\n                dst.write_band(3, b)\n\n                dst.write_colorinterp(1, ColorInterp.gray)\n                dst.write_colorinterp(2, ColorInterp.grey)\n                dst.write_colorinterp(3, ColorInterp.gray)\n\n>               assert dst.colorinterp(1) == ColorInterp.gray\nE               assert <ColorInterp.red: 3> == <ColorInterp.gray: 1>\nE                +  where <ColorInterp.red: 3> = <built-in method colorinterp of rasterio._io.RasterUpdater object at 0x1022d1c20>(1)\nE                +    where <built-in method colorinterp of rasterio._io.RasterUpdater object at 0x1022d1c20> = <open RasterUpdater name='/private/var/folders/zq/fv6jds3j4wb_0z0zh35xky_c0000gn/T/pytest-181/test_colorinterp0/foo.tif' mode='w'>.colorinterp\nE                +  and   <ColorInterp.gray: 1> = ColorInterp.gray\n```\n\nIt looks like GDAL might be overriding the color interpretaton we provide. I'll dig and see what's up.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47820384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47825054", "body": "@kapadia check this out: https://trac.osgeo.org/gdal/ticket/4547\n\n> SetColorInterpretation?() on the GTiff driver only really work on alpha bands. The color interpretation is dedecuded from the TIFF Photometric TAG, the presence of color table and the value of the ExtraSamples? tag.\n\nIt looks like TIFF tags are the only way to update the color interpretation. I'm inclined to remove `write_colorinterp()` and document how to use the photometric creation option for the GTiff format: http://www.gdal.org/frmt_gtiff.html. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47825054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47834954", "body": "It looks like a photometric creation option is the only foolproof way to do it. Here's an example from the tests:\n\n``` python\n    with rasterio.drivers():\n\n        with rasterio.open('rasterio/tests/data/RGB.byte.tif') as src:\n            assert src.colorinterp(1) == ColorInterp.red\n            assert src.colorinterp(2) == ColorInterp.green\n            assert src.colorinterp(3) == ColorInterp.blue\n\n        tiffname = str(tmpdir.join('foo.tif'))\n\n        meta = src.meta\n        meta['photometric'] = 'CMYK'\n        meta['count'] = 4\n        with rasterio.open(tiffname, 'w', **meta) as dst:\n            assert dst.colorinterp(1) == ColorInterp.cyan\n            assert dst.colorinterp(2) == ColorInterp.magenta\n            assert dst.colorinterp(3) == ColorInterp.yellow\n            assert dst.colorinterp(4) == ColorInterp.black\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47834954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48527855", "body": "Thanks for the support, @kapadia.\n\n@mhearne-usgs, it was great to meet you this morning. The difference between build time and run time is that when pip imports setup.py, GDAL's gdal-config program is used to find build time header and library paths (see https://github.com/mapbox/rasterio/blob/master/setup.py#L46 ), whereas at runtime there is no support from gdal-config and you'll need `/Users/mhearne/anaconda/lib` in your `DYLD_LIBRARY_PATH` env variable. \n\nLike you, I'm hoping to learn more about conda environments this week. Could it be that your conda environment isn't activated?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48527855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48539308", "body": "I'm going to see if [OSRAutoIdentifyEPSG](http://www.gdal.org/ogr__srs__api_8h.html#a8870b1853254904c8517b945fe7204c3) will be useful. Results soon.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48539308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48680261", "body": "@kapadia @mhearne-usgs I'm all for making rasterio work for Anaconda.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48680261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48696123", "body": "@scw check out fe9c406 :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48696123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48753329", "body": "@kapadia This just now from the SciPy sprint: https://github.com/ioos/conda-recipes/tree/master/rasterio by @comtbot.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48753329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48911096", "body": "@mhearne-usgs yeah, I was sitting next to Rich and saw him package it live :) It's imcomplete at the moment, doesn't include the Rasterio scripts, but he's looking forward to finishing it. Myself, I need to prioritize fixing Rasterio bugs over Anaconda packaging, at least for the next month or so.\n\n@kapadia, a suggestion from @rsignell-usgs: Mapbox ought to register https://binstar.org/mapbox and maintain some official packages if we're going to be conda users.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48911096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49054540", "body": "@IamJeffG would Fiona's syntax https://github.com/Toblerity/Fiona/blob/master/README.rst#reading-multilayer-data cover your use case?\n\nI'm not very familiar with GDAL subdatasets or HDF, so will need some help scoping this out.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49054540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49059158", "body": "As near as I can tell, this problem is specific to EPSG:3857. A UTM projection seems to copy over using your script, and so does a EPSG:4326 projection. I'll add some test cases and look in GDAL to see if there is EPSG:3857 specific issues I'm not accounting for.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49059158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49060631", "body": "I can't think of a reason your test code shouldn't be valid. I'll look into it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49060631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49324381", "body": "Thanks for the report. crs of `None` is okay. I've added guards around dtype in 3e7fceb.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49324381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49328768", "body": "To sum: Installing Rasterio by itself does not install the GDAL library. `conda install gdal rasterio` seems to work. Avoid installing Framework GDAL libs since they conflict with Anaconda (#103).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49328768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49488326", "body": "@hrwgc How does https://github.com/mapbox/rasterio/blob/master/docs/cli.rst#transform look?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49488326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49636738", "body": "I think the problem with the affine parameter is specific to Christoph's binaries. If I recall correctly, he's patched Rasterio so that it imports osgeo.gdal and thereby loads the needed GDAL DLL. I'm not entirely happy with this because it can expose Rasterio users to weird side effects. On Linux and OS X, there's only a warning:\n\n```\nWarning 6: Driver GTiff does not support AFFINE creation option\n```\n\nI _will_ make sure that the affine parameter isn't sent on as a GDAL config option and that should help.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49636738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49831598", "body": "I've run `rio shapes rasterio/tests/data/shade.tif --precision 6 > shade.geojson` and then uploaded the GeoJSON file to https://a.tiles.mapbox.com/v4/sgillies.j1ho338j/page.html?access_token=pk.eyJ1Ijoic2dpbGxpZXMiLCJhIjoiWUE2VlZVcyJ9.OITHkb1GHNh9nvzIfUc9QQ#13/39.6067/-106.4599. Looks good.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49831598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49965672", "body": "@kapadia I'm almost certain those are equivalent. But while I look into it, I think the thing to do is to specify precisely the crs of the file you write, as in\n\n```\n>>> with rasterio.open(\n...         '/tmp/foo.tif', 'w', \n...         driver='GTiff', \n...         count=1, \n...         width=10, height=10, \n...         dtype=rasterio.uint8, \n...         crs={'init': 'epsg:3857'}, \n...         transform=rasterio.Affine.identity()) as dst:\n...     pass...\n>>> subprocess.check_call(['gdalinfo', '/tmp/foo.tif'])Driver: GTiff/GeoTIFF\nFiles: /tmp/foo.tif\nSize is 10, 10\nCoordinate System is:\nPROJCS[\"WGS 84 / Pseudo-Mercator\",\n    GEOGCS[\"WGS 84\",\n        DATUM[\"WGS_1984\",\n            SPHEROID[\"WGS 84\",6378137,298.257223563,\n                AUTHORITY[\"EPSG\",\"7030\"]],\n            AUTHORITY[\"EPSG\",\"6326\"]],\n        PRIMEM[\"Greenwich\",0],\n        UNIT[\"degree\",0.0174532925199433],\n        AUTHORITY[\"EPSG\",\"4326\"]],\n    PROJECTION[\"Mercator_1SP\"],\n    PARAMETER[\"central_meridian\",0],\n    PARAMETER[\"scale_factor\",1],\n    PARAMETER[\"false_easting\",0],\n    PARAMETER[\"false_northing\",0],\n    UNIT[\"metre\",1,\n        AUTHORITY[\"EPSG\",\"9001\"]],\n    EXTENSION[\"PROJ4\",\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\"],\n    AUTHORITY[\"EPSG\",\"3857\"]]\nMetadata:\n  AREA_OR_POINT=Area\nImage Structure Metadata:\n  INTERLEAVE=BAND\nCorner Coordinates:\nUpper Left  (    0.0,    0.0)\nLower Left  (    0.0,   10.0)\nUpper Right (   10.0,    0.0)\nLower Right (   10.0,   10.0)\nCenter      (    5.0,    5.0)\nBand 1 Block=10x10 Type=Byte, ColorInterp=Gray\n0\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49965672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49965770", "body": "Related: #116 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49965770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50787145", "body": "@etiennebr That `ERROR:GDAL:CPLE_NotSupported` is intended to be a warning. You should be able to call `ds.read()` with the opened dataset. The difference between what you see in the shell and with IPython is, I think, due to more verbose logging level in the notebook. For example, see below, where I've used `-vvv` to turn up the verbosity for Rasterio's `rio insp` command applied to an image with no georeferencing.\n\n```\n$ rio -vvv insp /Users/sean/Desktop/7e2de5810ab4b48b34a4fa81140e60de.jpeg\nDEBUG:rasterio:Creating a chief GDALEnv in drivers()\nDEBUG:GDAL:Option CPL_DEBUG=ON\nDEBUG:GDAL:CPLE_None in GDAL: GDALOpen(/Users/sean/Desktop/7e2de5810ab4b48b34a4fa81140e60de.jpeg, this=0x7fdee2861c00) succeeds as JPEG.\nDEBUG:rasterio:Got coordinate system\nINFO:rasterio:Failed to auto identify EPSG: 7\nERROR:GDAL:CPLE_NotSupported in No translation for an empty SRS to PROJ.4 format is known.\nDEBUG:rasterio:Params:\nDEBUG:rasterio:Got coordinate system\nINFO:rasterio:Failed to auto identify EPSG: 7\nRasterio 0.11 Interactive Inspector (Python 2.7.5)\nType \"src.meta\", \"src.read_band(1)\", or \"help(src)\" for more information.\n>>> data = src.read()\n>>> data\narray([[[255, 255, 255, ..., 255, 255, 255],\n        [255, 255, 255, ..., 255, 255, 255],\n        [255, 255, 255, ..., 255, 255, 255],\n        ...,\n        [254, 254, 254, ..., 254, 254, 254],\n        [254, 254, 254, ..., 254, 254, 254],\n        [254, 254, 254, ..., 254, 254, 254]],\n\n       [[255, 255, 255, ..., 255, 255, 255],\n        [255, 255, 255, ..., 255, 255, 255],\n        [255, 255, 255, ..., 255, 255, 255],\n        ...,\n        [255, 255, 255, ..., 255, 255, 255],\n        [255, 255, 255, ..., 255, 255, 255],\n        [255, 255, 255, ..., 255, 255, 255]],\n\n       [[251, 251, 251, ..., 253, 253, 253],\n        [251, 251, 251, ..., 253, 253, 253],\n        [251, 251, 251, ..., 253, 253, 253],\n        ...,\n        [243, 245, 245, ..., 249, 249, 249],\n        [243, 245, 245, ..., 249, 249, 249],\n        [243, 245, 245, ..., 249, 249, 249]]], dtype=uint8)\n```\n\nCan you follow up and close if the issue is resolved?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50787145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50795965", "body": "`ERROR` is a pretty big red flag... I need to think about downgrading it. Thanks for the report and for trying Rasterio.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50795965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50802319", "body": "Yes.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50802319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51125018", "body": "Please see https://github.com/sgillies/affine/pull/3#issuecomment-50964606.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51125018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51128498", "body": "Please see https://github.com/sgillies/affine/pull/3#issuecomment-50964606.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51128498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51129949", "body": "We're only talking about HDF4 as in http://www.gdal.org/frmt_hdf4.html, right? I've found [h5py](https://github.com/h5py/h5py) and it looks quite good. Also [pynio](https://www.pyngl.ucar.edu/Nio.shtml) seems to have an API similar to Rasterio.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51129949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51208751", "body": "@brendan-ward no problem, it's good to know what the good options are since Rasterio will probably be a fairly limited HDF4 reader/writer.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51208751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51209000", "body": "Yes, when it came down to writing my Mapbox travel ticket, I realized I wanted to be back home on 9/13 and won't be at the FOSS4G sprint.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51209000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51259705", "body": "@mwtoews in the end, I didn't implement mask filling, but we can do that as another issue.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51259705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51269450", "body": "@IamJeffG I'm unable to work on this, because I'm primarily developing on OS X and homebrew doesn't support HDF4: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/gdal.rb#L161. Maybe this will change, but I've no time frame. Meanwhile, I'm happy to accept a pull request.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51269450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51396919", "body": "@BergWerkGIS Rasterio's performance target is to get you a Numpy ndarray as fast as GDAL's IO can deliver it. So if you're going to use Python and Numpy in your analysis, Rasterio will be good. That said, I think high performance for such a service will depend a lot on tuning your data and GDAL drivers. High performance with very large rasters is a little beyond me, but I'd like to learn more about it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51396919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51936431", "body": "@cmutel Best bug report ever! Thanks, I'll get right on it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51936431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52360470", "body": "Sure, happy to do this. You thinking a newline for every tile? Bare text or JSON?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52360470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52545582", "body": "I'm going to do this mostly in https://github.com/sgillies/mercantile, with just a small mod to rasterio's rio CLI. Usage something like:\n\n```\n$ echo \"[$west, $south, $east, $north]\" | mercantile tiles --zoom 9\nX1, Y1, W1, S1, E1, N1\nX2, Y2, W2, S2, E2, N2\n...\n```\n\nAnd on the rasterio side\n\n```\n$ rio bounds foo.tif --bbox-only\n[$west, $south, $east, $north]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52545582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52591754", "body": "Okay, here's Rasterio working together with Mercantile:\n\n```\n$ rio bounds ~/code/rasterio/rasterio/tests/data/RGB.byte.tif --bbox | mercantile tiles 8\n[71, 109, 8, -80.15625, 24.5271348225978, -78.75, 25.79989118208832]\n[71, 110, 8, -80.15625, 23.241346102386135, -78.75, 24.5271348225978]\n[72, 109, 8, -78.75, 24.5271348225978, -77.34375, 25.79989118208832]\n[72, 110, 8, -78.75, 23.241346102386135, -77.34375, 24.5271348225978]\n[73, 109, 8, -77.34375, 24.5271348225978, -75.9375, 25.79989118208832]\n[73, 110, 8, -77.34375, 23.241346102386135, -75.9375, 24.5271348225978]\n```\n\nNew releases of these first thing tomorrow morning.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52591754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54221409", "body": "I don't see any reason why not. The inverse operation (`shapes()`) on the other hand, is probably only feasible for uint8.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54221409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54230716", "body": "Short of renaming them, I'm happy to do what I can to support the scripts on Windows. I could use a pointer to how it could be done with entry points and some testing on Windows. Can you help with that, @grovduck?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54230716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54321561", "body": "@mwtoews true... i was just thinking of what the shapes of non-thematic rasters would look like, every pixel its own polygon seems like a common outcome.\n\n@brendan-ward precedent in Rasterio? No, but I think it would make sense to follow the params of a Numpy function like numpy.zeros or [numpy.trace](http://docs.scipy.org/doc/numpy/reference/generated/numpy.trace.html#numpy.trace) and add a dtype=None argument.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54321561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54323750", "body": "I'm :thumbsup: :thumbsup: for generalizing this. Will be an excellent enhancement. Who's going to pick it up? I'm completely slammed through 9/12.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54323750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54354909", "body": "@brendan-ward go for it. I made a separate issues for `shapes()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54354909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54670002", "body": "Everybody, heads up about the proposed changes in `rasterio.dtypes`: the data types will be strings and you should use `numpy.dtype()` to compare them to data types coming from elsewhere\n\n``` python\n>>> import rasterio as rio\n>>> import numpy as np\n>>> rio.uint8\n'uint8'\n>>> np.dtype(rio.uint8) == np.dtype(np.uint8)\nTrue\n```\n\nor this works too\n\n``` python\n>>> rio.uint8 == np.uint8().dtype\nTrue\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54670002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54677362", "body": "@grovduck I've got it figured out thanks to http://click.pocoo.org/3/setuptools/. I'm working on it in a new branch and you'll see a reference to that work here soon. Thanks for the suggestion and the leads!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54677362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54684851", "body": "Heads up: some data type changes landed in #141. Good news is that the changes make things a little easier for users.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54684851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54881299", "body": "@grovduck can you test whether 4052a3d solves it?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54881299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54883486", "body": "Ack! Sorry to waste your time.\n\n7cb6bc2 has rasterio.rio.options and should settle this once and for all.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54883486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54902504", "body": "\\o/\n\n@grovduck I really appreciate the suggestion. With an open source project there are always so many features to develop... it's having a user and contributor with a solid use case that makes all the difference.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54902504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55305614", "body": "@mwtoews I turned that into a new test and it works on my machine\u2122. My understanding is that `papszStrList` is a pointer to data owned by the GDAL dataset and doesn't need to be freed. I don't know anything about Windows these days but are those AMD64 builds right for 32 bit Windows?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55305614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55426841", "body": "@etiennebr @fgassert thank you for the reminder. I'm unable to change GDAL's error levels but I have been able to avoid the calls that were raising the errors. Even with verbosity turned up, you can now open an unprojected PNG without seeing that error message:\n\n``` bash\n$ rio -v info ~/Desktop/figure_1.png --indent 2\n{\n  \"count\": 4,\n  \"crs\": \"\",\n  \"dtype\": \"uint8\",\n  \"driver\": \"PNG\",\n  \"bounds\": [\n    0.0,\n    600.0,\n    800.0,\n    0.0\n  ],\n  \"height\": 600,\n  \"width\": 800,\n  \"shape\": [\n    600,\n    800\n  ],\n  \"nodata\": null\n}\n```\n\nAs a side effect, Rasterio is a little faster. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55426841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55427266", "body": "Interesting: my new test passes on OS X but crashes Travis. https://travis-ci.org/mapbox/rasterio/jobs/35070344\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55427266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55428093", "body": "@jesserobertson I think your hunch could be right. Could you try to reproduce using a simple GeoJSON shape that you could paste in here?\n\nYou're not at FOSS4G right now by any chance? We could talk about this in person :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55428093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55475259", "body": "Ugh. Since I can't make it crash with GDAL 1.11, it's a little hard to find the problem. I'll review GDAL tickets closed since 1.10 (that's what our Travis servers have) and if I can't find anything there, revert to 1.10 locally and track it down with lldb.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55475259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55508317", "body": "I can't cause a segfault on OS X with GDAL 1.10.1 either.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55508317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55510466", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55510466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55762855", "body": "@jesserobertson that's very helpful. I see a problem immediately: the input of `rasterize()` should be not GeoJSON text (what you get from `dumps()`) but objects modeled on GeoJSON that provide the [Python Geo Interface](https://gist.github.com/sgillies/2217756), i.e., \n\n``` python\n{'type': 'Point', 'coordinates': [0.0, 0.0]}\n```\n\nand not \n\n``` python\n'{\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}'\n```\n\nI'll update the docs and also make sure that you can't crash Python like this in the next version.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55762855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55782236", "body": "Ah, right, the Windows installers don't run the setup script, so https://github.com/mapbox/rasterio/blob/master/setup.py#L131 does no good. I'll add it to the requirements.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55782236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55786206", "body": "@brendan-ward :+1: on changing the default value. I'm also fine with refactoring and using RasterUpdater internally so long as the memory driver doesn't leak into the user interface. I think there ought to be one obvious way to have rasters in memory (numpy arrays) and not two different ways (numpy arrays and GDAL memory datasets).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55786206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55786449", "body": "Update, here's an IPython notebook example: http://nbviewer.ipython.org/github/mapbox/rasterio/blob/master/examples/features.ipynb\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55786449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56068215", "body": "A dedicated class seems exactly right. Let's do that.\n\nAlso, heads up: since https://github.com/mapbox/rasterio/commit/4e53e3ca2d448e1abc3ad7522b3ac2292eacfb95 we have a new DatasetReader base class that RasterReader/Updater derive from (in case you're looking for where all the methods went).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56068215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56476533", "body": "@brendan-ward seems good to me. As its an implementation detail and not part of the API, we can tweak it as we go. It'll eliminate a lot of redundant code in Rasterio, for sure.\n\nNo, I'm not wedded to a generator in features.py. So long as the functions take and return iterators, I'm okay with internal changes.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56476533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56846153", "body": "@brendan-ward can you squash those commits down to 1-3 commits to make it easier for me to review? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56846153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56866971", "body": "@brendan-ward I've got a lot to learn, too! Try this: `git rebase -i origin/master` from your own personal master. That will replay your commits on the project master and eliminate the \"Merge remote tracking..\" commits from the list above. Then in iteractive mode, you can squash the last 3 commits into 20cdb42. After this, force push to your own master (assuming no one else has forked it) and we should see that list above reduced to 2 commits.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56866971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/6100902", "body": "@AsgerPetersen have you looked into parallel processing with rasterio? I thought you might be interested in this example. Turning it into a useful tool becomes a matter of choosing optimal window sizes, among other things, but this could be a good starting point.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6100902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6144313", "body": "@AsgerPetersen thanks for the feedback. Yeah, that's our parallelization strategy at Mapbox, too.\n\nI read through GDAL's warper code this weekend and discovered that in multi mode it does this: multiple threads each doing the full read-process-write chunk-wise but with mutexes that ensure that only one is doing IO on a file at any time. Better than what I suggested and worth exposing in rasterio someday.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6144313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6872946", "body": "@kapadia How about returning a ColorInterp enum here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6872946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8002097", "body": "@brendan-ward check this out :) another function that both Fiona and Rasterio have needed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8002097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8451730", "body": "@jfloyd99 @brendan-ward is this better?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8451730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8823708", "body": "Yes, yes. Good comments all.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8823708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8904988", "body": "@kapadia I think both will work in this case.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8904988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9379205", "body": "Fixed in next revision\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9379205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9488111", "body": "@AsgerPetersen how's this for closure on #261?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9488111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9490237", "body": "@synflyn28 Whadaya think? Is this example helpful?\n\nMixing extent changes _and_ coordinate reference system (CRS) changes gets a little more complicated, for sure, because the destination transform needs to be in the units of the output CRS.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9490237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9978925", "body": "@mwtoews can you check that this is consistent with your original intent?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9978925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9978939", "body": "@IamJeffG what do you think of this docstring change?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9978939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9993420", "body": "A dataset has a number of sequence properties (`dtypes`, `nodatavals`, `indexes`, &c) and these all contain values corresponding to dataset bands (I didn't and don't want a band class in Rasterio because of the bad legacy of gdal.py's  band class). So, `nodatavals[0]` is the nodata value defined for the first band. GDAL supports unique per-band nodatavals in some features (warping, for one) although a single value for all bands is the most common case. I'll work on squaring that with the help.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9993420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/10872096", "body": "Right!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/10872096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11162977", "body": "@geowurster I found a way to improve the implementation (and learn a little more about click).\n\nNow we get a [typographic dagger](http://en.wikipedia.org/wiki/Dagger_%28typography%29) after the name of a broken subcommand as extra warning. Look below for `metasay\u2020`.\n\n```\n$ rio\nUsage: rio [OPTIONS] COMMAND [ARGS]...\n\n  Rasterio command line interface.\n\nOptions:\n  -v, --verbose  Increase verbosity.\n  -q, --quiet    Decrease verbosity.\n  --version      Show the version and exit.\n  --help         Show this message and exit.\n\nCommands:\n  bounds     Write bounding boxes to stdout as GeoJSON.\n  calc       Raster data calculator.\n  env        Print information about the rio environment.\n  info       Print information about a data file.\n  insp       Open a data file and start an interpreter.\n  mask       Mask in raster using features.\n  mbtiles    Export a dataset to MBTiles.\n  merge      Merge a stack of raster datasets.\n  metasay\u2020   Warning: could not load plugin. See `rio metasay --help`.\n  rasterize  Rasterize features.\n  sample     Sample a dataset.\n  shapes     Write shapes extracted from bands or masks.\n  stack      Stack a number of bands into a multiband dataset.\n  transform  Transform coordinates.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11162977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164141", "body": "```\n$ RIO_HONESTLY=1 rio\nUsage: rio [OPTIONS] COMMAND [ARGS]...\n\n  Rasterio command line interface.\n\nOptions:\n  -v, --verbose  Increase verbosity.\n  -q, --quiet    Decrease verbosity.\n  --version      Show the version and exit.\n  --help         Show this message and exit.\n\nCommands:\n  bounds     Write bounding boxes to stdout as GeoJSON.\n  calc       Raster data calculator.\n  env        Print information about the rio environment.\n  info       Print information about a data file.\n  insp       Open a data file and start an interpreter.\n  mask       Mask in raster using features.\n  mbtiles    Export a dataset to MBTiles.\n  merge      Merge a stack of raster datasets.\n  metasay\ud83d\udca9  Warning: could not load plugin. See `rio metasay --help`.\n  rasterize  Rasterize features.\n  sample     Sample a dataset.\n  shapes     Write shapes extracted from bands or masks.\n  stack      Stack a number of bands into a multiband dataset.\n  transform  Transform coordinates.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164494", "body": "It's unfortunate that my terminal (iTerm 2) doesn't display it with as much fidelity as Chrome/FF do: the \"Warning...\" text slides left one space. Software is \ud83d\udca9.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164597", "body": "@geowurster please do!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/15592601", "body": "Done, @brendan-ward.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/15592601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/16632831", "body": "@perrygeo @brendan-ward doing a better job of handling these return values has been on my mental TODO list for a while. What do you think about this style?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/16632831/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/16632843", "body": "@perrygeo @brendan-ward I inlined it!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/16632843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/16647150", "body": "I need to think about the above a little more. If the function set a debugging message, an exception would be raised and that's not right. I've already written that GDAL error context manager, so maybe I can extend it for use in the above.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/16647150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/24910360", "body": "Inspired by a discussion with @lbud about issue trackers and imposter syndrome.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/24910360/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25143965", "body": "@brendan-ward @geowurster @jdmcbr in case you wonder where all the warnings went \ud83d\ude04 ", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25143965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26893897", "body": "@QuLogic I don't follow, can you explain?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26893897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22242597", "body": "I'm torn about this. Feels premature, I'd rather wait until it would be used in another command.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22242597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22363887", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22363887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22675788", "body": "Good idea!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22675788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22892825", "body": "@mwtoews good point... i'll undo this and rethink my approach. Looking at the files I'm using to test rio-merge, they are uint8 with a defined nodata value of -9999.0. A terrible practice since this is also the value that GDAL returns from `GDALGetRasterNoDataValue()` when there's no defined nodata value. And I need to deal with this because a naive `.fill(nodataval)` leads to this:\n\n``` python\n>>> arr = np.zeros((2,2), np.uint8)\n>>> arr\narray([[0, 0],\n       [0, 0]], dtype=uint8)\n>>> arr.fill(-9999.0)\n>>> arr\narray([[241, 241],\n       [241, 241]], dtype=uint8)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22892825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22905134", "body": "Awesome. Yes.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22905134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22907774", "body": "Fixed. Also added more tests to get coverage of rasterio.rio.merge back to 100%.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22907774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22915397", "body": "@mwtoews I'm going to have to leave complex types out for 1.7.0. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22915397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/24390107", "body": "I feel python slice syntax with 1-indexed bands would be extra confusing. What I'm going for with `--bidx M,N,0` and `--bidx M..O` is bash/ksh array syntax, as in\n\n```\n$ echo {3..5}\n3 4 5\n$ echo {3,4,5}\n3 4 5\n```\n\nrio-sample is developed for the shell, so shell-like syntax feels like a better fit to me. I dropped the curly braces as they aren't needed with these options. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/24390107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28391881", "body": "Bresenham.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28391881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28391892", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28391892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28391972", "body": "`--all-touched`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28391972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28392101", "body": "@brendan-ward This program strikes me as being a filter like `grep`. What would you think about borrowing command line options from grep? `--invert` could become `-v, --invert-mask` (like grep's `-v, --invert-match`). And I'd like to see the GeoJSON be more like grep's `pattern`: not an input filename but either a GeoJSON text argument or an `-f/--file features.json` option. If there were no features, we could pass all the input pixels through.\n\nSo, the canonical example might be \n\n``` bash\n$ rio extract -f features.json input.tif output.tif\n```\n\nAlso, how about simple bounding box extraction?\n\n``` bash\n$ rio extract \"[west, south, east, north]\" input.tif output.tif\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28392101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28429073", "body": "Yes, let's change rasterize, too. Classic unix style options with dashes as word separators is our style.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28429073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28430660", "body": "Oh, crap. We're not consistent about this at all and I seem to be the worst offender (https://github.com/mapbox/rasterio/blame/master/rasterio/rio/rio.py#L160-L16 as example).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28430660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28434862", "body": "How about `-i/--invert` and `-j/--geojson-file`?\n\nYes, I see the difference in between rio-rasterize and what I'm suggesting. Piping in GeoJSON would be nice, I agree. I'm concerned it interferes with being able to pipe or pipeline rasters (#188), which is what we should be aiming for in the suite of rio commands. In the rio-rasterize case, there aren't any raster inputs, so it's fine to turn everything over to GeoJSON and have it be the foremost input.\n\nI'm also a tiny bit concerned about confusion around the term \"extract\". We already refer to feature extraction in a bunch of places (like the rio-shapes docs). Could this be better called \"rio-select\" or \"rio-mask\"?\n\nI realize I'm giving you feedback that would have been better at the 30% finished stage than now where this is 90% done. Sorry!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28434862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30618089", "body": "@brendan-ward will you add something like \"pixels with this value will not be used for interpolation\"? \"Nodata\" is jargon that can be opaque to GIS newbies.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30618089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30618191", "body": "Something like \"pixels with this value will not be filled using interpolated source values\" would be good above.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30618191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30618301", "body": "See comment above.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30618301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30719815", "body": "No, you're correct @brendan-ward. I just had a brain malfunction from rushing through too many issues. Disregard my comment above (https://github.com/mapbox/rasterio/pull/354#discussion_r30618191).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30719815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30629345", "body": "I think failed to mention this change in the commit. I prefer using the pytest-cov plugin to direct use of coverage.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30629345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30720593", "body": "See `rio info --tags`. rio-edit doesn't do tag namespaces yet... I think I'd better add that.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30720593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30739967", "body": "I tend to use single quotes around short names and key strings, double quotes around sentences or other longer texts. Reminds me that the latter ought to be grammatically correct as well as correct Python syntax, that's all.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30739967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/32698495", "body": "The wheel module is required to _build_ wheels, but not required for installation of wheels. On the other hand, a `pip install -U pip` is likely required to get wheel support, so I suggest swapping that for `pip install wheel` above. I'll be happy to merge this after the change.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/32698495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34409272", "body": "I think you need to use a Click `\\b` directive for this block, like at https://github.com/mapbox/rasterio/blob/master/rasterio/rio/calc.py#L56\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34409272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113494", "body": "Yes, good idea. Done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34597204", "body": "@brendan-ward I'd like to standardize the CLI as `rio VERB` and I wasn't able to summon up a neat overviewing verb.\n\nHere's an interesting convergence of \"over view\" and \"pyramid\". I'm a little leery of associating Rasterio with Freemasonry, though :fearful: \n\n![](https://upload.wikimedia.org/wikipedia/commons/3/3d/Dollarnote_siegel_hq.jpg)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34597204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34598759", "body": "After consulting a couple dictionaries, I think rio-overview will do fine. :bike:\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34598759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34599554", "body": "Good catch. I've replaced this with a comment about only using xsize.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34599554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34599978", "body": "Right.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34599978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34604036", "body": "Yes!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34604036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34604219", "body": "I think we can support removing overviews, but I want to defer for now.\n\n`--rebuild` is a great idea. I think it might need some caching of the resampling method.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34604219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34607953", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34607953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34607989", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34607989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34838091", "body": "#417 will solve this as it makes it much harder to incidentally get `inf` or `nan` values for the slope/ratio or offset/intercept.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34838091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34838192", "body": "#417 solves the previous two issues.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34838192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36825029", "body": "`test_checksum_band_window_min()` tests that the checksums for zero sized windows are 0.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36825029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36825535", "body": "Fair enough, coming right up.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36825535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37156345", "body": "how about `title=None` in the signature and `title or \"Histogram for {0}\".format(src.name)` when we call `plt.title()`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37156345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37156535", "body": "`src` (the opened dataset reader), not `source`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37156535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37196559", "body": "@geowurster I want to retract that previous request this morning. Automatically putting the dataset name in the title doesn't make sense for `show_hist()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37196559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717555", "body": "How about \"Clip a raster to given bounds\" since there's a `--bounds` option?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717585", "body": "\"clips a raster to given bounds... or the bounds of a template raster...\"\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717698", "body": "Should be able to do just one read and one write:\n\n```\nwith rasterio.open(output, 'w', **out_kwargs) as dst:\n    dst.write(src.read(window=window))\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717727", "body": "I feel like clip could go in rasterio.rio.convert since rio-convert is so closely related: they are two commands that are joined in gdal_translate.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37717727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37911078", "body": "I'm :-1: on these changes in _base.pyx. The previous code is well tested \u2013\u00a0and less code.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37911078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37911637", "body": "Here let's use the newer `.profile` property instead of `.meta` following the example in rio-convert: https://github.com/mapbox/rasterio/blob/master/rasterio/rio/convert.py#L161-L180.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37911637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37912049", "body": "Numpy takes too much time to import and this is why I was importing it inside the merge command, to not burden commands that didn't need numpy. Let's similarly import `rasterio.tools.merge` inside the command below.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37912049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37919305", "body": "Oh, I get it now. I didn't see that you were calling `get_window()` in the merge tool. :+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37919305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/40373421", "body": "@brendan-ward these tests of the enums are mainly to guard against future regressions. They look clunky because I didn't presume all lower or all upper case at the beginning. It did turn out that way, but I decided to leave the tests as they are. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/40373421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/41294448", "body": "@jdmcbr in this case let's use `op` and `precision` keyword arguments instead of `**kwargs` if you don't mind. If you're quick, I can get this in the 0.28 release.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/41294448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/47951731", "body": "@perrygeo why not `coff = -window[1][0]*scaling_w`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/47951731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49413207", "body": "Here's the crux of the PR, @perrygeo @geowurster: a new keyword argument for `resolve_inout()` and use of it throughout the CLI.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49413207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49883631", "body": "This doesn't fix #541 but it does fix yet unreported bugs: `bounds` is in the dst crs already, not src crs.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49883631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315489", "body": "I'm not certain why I chose `3` in the first place, but `0` is what I want for the future.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315708", "body": "This enum is more consistent with the rest of Rasterio. We have two different resampling enums, one for IO, the other for warping (situation inherited from GDAL). Unifying them is a possible TODO.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315832", "body": "The churn here is mostly to do with removing the big and unnecessary `try/except` block.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315937", "body": "Seem reasonable @brendan-ward @perrygeo? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50315937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50316214", "body": "I updated the docstring for the new usage and wrapped at 72 chars\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50316214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50316303", "body": "rio-warp now has the same input/output strategy as rio-merge.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50316303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50431944", "body": "Oops. Yes, on it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50431944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55290785", "body": "@rouault is it okay to call these functions with NULL arguments? it was not clear to me that it is safe.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55290785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55292088", "body": "We should use Numpy's default, `float_`, instead of `'uinit8'`.\n\n``` python\n>>> dtype('float_')\ndtype('float64')\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55292088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55397648", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55397648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55397652", "body": "@rouault I don't get the reason for this change.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55397652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55412644", "body": "I'll follow up on that after I merge this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55412644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55595362", "body": "@perrygeo the change above reverts one I made inadvisably in 5f56061.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55595362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55595938", "body": "If `_calculate_default_transform()` is to replace `calculate_default_transform()` it will need at least a `**kwargs` for backwards compatibility.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55595938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55596022", "body": "GDAL segfaults if you pass an unexpected integer. We're going to raise a ValueError instead. I've got a test for this already.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55596022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55596177", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55596177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55596501", "body": "I looked at `2` but didn't understand how to use it :confused: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55596501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57353213", "body": "See this @perrygeo? I've decided to embrace the GDAL error categories and names within our Cython code, but plan to intercept these and raise clearer errors. Exceptions are part of the API.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57353213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57353584", "body": "@perrygeo @brendan-ward I'm yanking all these NULL pointer checks as I can't imagine ever getting into a state where the reference is NULL and our program hasn't already :hankey:d its pants.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57353584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57358525", "body": "Yep, that's my next step.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57358525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57508842", "body": "I wasn't sure that `GDALCreateMaskBand()` called `CPLError()` but have confirmed that it does, so I can bring it inside the `CPLErrors` block.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57508842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57508868", "body": "Right.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57508868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57508920", "body": "A string is the same as 1, which I only recently learned. https://docs.python.org/2/library/sys.html#sys.exit\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57508920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50609274", "body": "I modeled this after `boto3.session.Session`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50609274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57999102", "body": "I changed all the `invoke` calls like this so that the commands would have a `ctx.obj` with `aws_session` in it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57999102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57999488", "body": "r- mode (no image reads, metadata only) is handy/thrifty for rio-insp'ing a dataset on S3.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57999488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58439981", "body": "@perrygeo okay with a couple lines of debugging output here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58439981/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440030", "body": "New function, see below...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440134", "body": "pep8 tweaks\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440353", "body": "@perrygeo check out these custom markers. Here's where the new `__gdal_version__` gets used.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440551", "body": "Multiple markers is much better. And `skipif` semantics are a better fit than `xfail`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440810", "body": "`packaging.version.parse` is really handy for testing. I don't want it to be a runtime requirement.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58440810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58774186", "body": "Can you make this `CRSError`? https://github.com/mapbox/rasterio/blob/master/rasterio/errors.py#L6\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58774186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58974374", "body": "`driver` is always a keyword argument, so `driver='GTiff'` here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58974374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59316855", "body": "@perrygeo instead of only passing, let's call `log.debug()`. We should log when we catch an exception that isn't re-raised.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59316855/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405194", "body": "A library should never configure the root logger.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405236", "body": "One line is better than two.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405427", "body": "This was redundant. Configuring the root logger is all we need.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405503", "body": "Made up name for messages coming direct from CPLError().\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59405503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467479", "body": "I'm raising right now because it crashes on my computer otherwise (see #664).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467660", "body": "Here's the new proposed usage. Simpler!\n\nUsing the session's `open()` means that we can update the session with AWS credentials if `open()` finds that the provided path is an S3 URI.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467722", "body": "Ignore this, I'm reverting this change.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467800", "body": "By bringing in rfc3987 I can discard rasterio's bespoke URI parser and get one that's better.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467850", "body": "These tests are moved to `tests/test_session.py`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59467850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59469796", "body": "This is where `session.open()` gets credentials when needed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59469796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59611901", "body": "@geowurster I've got an idea about also supporting AWS ARNs, but it looks like `urlparse()` handles them well enough.\n\n```\n>>> urlparse('arn:aws:s3:::my_corporate_bucket/exampleobject.png')\nParseResult(scheme='arn', netloc='', path='aws:s3:::my_corporate_bucket/exampleobject.png', params='', query='', fragment='')\n```\n\nI'll switch back.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59611901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59613802", "body": "I wonder if the HTTP range requests in GDAL's /vsis3/ could be done for Google's cloud?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59613802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59660972", "body": "This module module isn't needed, the functionality has been absorbed in `rasterio/env.py`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59660972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59661005", "body": "This is now the primary dataset opener.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59661005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59661083", "body": "Pass an `Env` to `rasterio.open()` if you want. Otherwise, an instance will be created by default and passed into `env.open()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59661083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59830270", "body": "No more duplicate docstring!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59830270/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59830403", "body": "@perrygeo here's the canonical, default Env case.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59830403/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59830450", "body": "@perrygeo and now the canonical default env case with an S3 raster.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59830450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59975809", "body": "This change is something I've done throughout the tests: removing outer environments where we don't need them.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59975809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59975813", "body": "And in places where we do need the outer environment, I switch to `env.Env`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59975813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60119975", "body": "@geowurster @perrygeo I've come full circle, but with lazy AWS credentials, and a better implementation for GDAL configuration \ud83d\ude00 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/60119975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/61516349", "body": "@geowurster as you suggested, I'm intercepting attempts to set these options and raising `EnvError`. Let's always use boto3 for credentials. It's in the docstring.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/61516349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64061305", "body": "Remove `args` from the method definition.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64061305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64062025", "body": "Should we consider an `indexes` keyword arg as in `read_masks()` and use only those band masks to make the output?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64062025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64478652", "body": "@ColinTalbert it's not documented anywhere yet, but we prefer 3 import sections: standard libs, non-standard libs, and the rasterio namespace. One empty line between each, each section sorted as you've done.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64478652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64479326", "body": "Since there's no function to set the plotting extent, let's call this `plotting_extent()`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64479326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fmaussion": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1199", "title": "Can rasterio coordinates be non rectilinear?", "body": "We are currently trying to [fix a bug](https://github.com/pydata/xarray/pull/1712) in xarray's rasterio backend.  \r\n\r\nTo compute the dataset's cartesian coordinates, I'm replacing the current error prone homegrown code with the following:\r\n\r\n```python\r\nif LooseVersion(rasterio.__version__) < '1.0':\r\n    transform = riods.affine\r\nelse:\r\n    transform = riods.transform\r\nnx, ny = riods.width, riods.height\r\nif transform.is_rectilinear:\r\n    # Coordinates are 1D\r\n    # xarray's convention is to have pixel center coordinates\r\n    x, _ = (np.arange(nx)+0.5, np.zeros(nx)+0.5) * transform\r\n    _, y = (np.zeros(ny)+0.5, np.arange(ny)+0.5) * transform\r\nelse:\r\n    # Can this happen?\r\n```\r\n\r\nI have two questions: \r\n- is the code above OK? It works for my use cases, but I'm not sure it's working for *all* uses cases. \r\n- can files opened by rasterio have non-rectilinear (i.e.: 2D) coordinates? I never encountered one, and none of the test files on the rasterio repository has non-rectilinear coordinates, but I thought I'd rather ask here...\r\n\r\nThanks!\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebhahn": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1198", "title": "VRT format to create an image stack and read a time series", "body": "I was going through the rasterio documentation and found the class 'rasterio.vrt.WarpedVRT`. However, I'm not sure if this is what I'm looking for. In my use case I would like to read a certain subset of many raster files (i.e. basically a time series from an image stack). Is this supported at the moment in rasterio?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mojodna": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1191", "title": "Sidecar masks are lost when using WarpedVRTs", "body": "**Version**: `51968aee58101d6fb264dfd4e13008a6ee3f3adb` (`master` post `1.0a11`)\r\n\r\nSidecar masks (`.msk`) are ignored when the source is wrapped in a `WarpedVRT`, probably because we're not doing anything special to preserve / mark them (in the same way that an XML VRT would).\r\n\r\nFailing test:\r\n\r\n```diff\r\ndiff --git i/tests/test_band_masks.py w/tests/test_band_masks.py\r\nindex f6cf3ac..fdd248d 100644\r\n--- i/tests/test_band_masks.py\r\n+++ w/tests/test_band_masks.py\r\n@@ -6,8 +6,11 @@ import numpy as np\r\n import pytest\r\n \r\n import rasterio\r\n+from rasterio import warp\r\n+from rasterio.crs import CRS\r\n from rasterio.enums import MaskFlags\r\n from rasterio.errors import NodataShadowWarning, RasterioDeprecationWarning\r\n+from rasterio.vrt import WarpedVRT\r\n \r\n \r\n @pytest.fixture(scope='function')\r\n@@ -175,3 +176,30 @@ def test_masking_sidecar_mask(tiffs):\r\n         assert r.mask.all()\r\n         masks = src.read_masks()\r\n         assert not masks.any()\r\n+\r\n+\r\n+def test_masking_vrt_sidecar_mask(tiffs):\r\n+    # If the dataset has a .msk sidecar mask band file, all masks will\r\n+    # be derived from that file.\r\n+    with rasterio.open(str(tiffs.join('sidecar-masked.tif'))) as src:\r\n+        dst_crs = CRS.from_epsg(4326)\r\n+        transform, dst_width, dst_height = warp.calculate_default_transform(\r\n+            src.crs, dst_crs, src.width, src.height, *src.bounds)\r\n+\r\n+        with WarpedVRT(\r\n+                src,\r\n+                dst_crs=dst_crs,\r\n+                dst_width=dst_width,\r\n+                dst_height=dst_height,\r\n+                dst_transform=transform) as vrt:\r\n+\r\n+            for flags in vrt.mask_flag_enums:\r\n+                assert MaskFlags.per_dataset in flags\r\n+                assert MaskFlags.alpha not in flags\r\n+                assert MaskFlags.nodata not in flags\r\n+            rgb = vrt.read(masked=True)\r\n+            assert rgb.mask.all()\r\n+            r = vrt.read(1, masked=True)\r\n+            assert r.mask.all()\r\n+            masks = vrt.read_masks()\r\n+            assert not masks.any()\r\n```\r\n\r\nTest output:\r\n\r\n```\r\n________________________________________ test_masking_vrt_sidecar_mask _________________________________________\r\n\r\ntiffs = local('/tmp/pytest-of-root/pytest-1/test_masking_vrt_sidecar_mask0')\r\n\r\n    def test_masking_vrt_sidecar_mask(tiffs):\r\n        # If the dataset has a .msk sidecar mask band file, all masks will\r\n        # be derived from that file.\r\n        with rasterio.open(str(tiffs.join('sidecar-masked.tif'))) as src:\r\n            dst_crs = CRS.from_epsg(4326)\r\n            transform, dst_width, dst_height = warp.calculate_default_transform(\r\n                src.crs, dst_crs, src.width, src.height, *src.bounds)\r\n\r\n            with WarpedVRT(\r\n                    src,\r\n                    dst_crs=dst_crs,\r\n                    dst_width=dst_width,\r\n                    dst_height=dst_height,\r\n                    dst_transform=transform) as vrt:\r\n\r\n                for flags in vrt.mask_flag_enums:\r\n>                   assert MaskFlags.per_dataset in flags\r\nE                   assert <MaskFlags.per_dataset: 2> in [<MaskFlags.all_valid: 1>]\r\nE                    +  where <MaskFlags.per_dataset: 2> = MaskFlags.per_dataset\r\n\r\ntests/test_band_masks.py:197: AssertionError\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1131", "title": "MemoryError when calculating transforms for large rasters", "body": "When calculating the default transform for a large raster (45588 \ud835\uddd1 45445), rasterio throws me a `MemoryError` instead of some usable values.\r\n\r\n## Steps to reproduce the problem.\r\n\r\n```python\r\nfrom rasterio.crs import CRS\r\nfrom rasterio.warp import calculate_default_transform\r\ncalculate_default_transform(CRS.from_epsg(4326), CRS.from_epsg(3857), 45588, 45445, 13.0460235139, 42.6925552354, 13.2511695428, 42.8970561511)\r\n```\r\n\r\n## Operating system\r\n\r\nUbuntu 16.04, under Docker w/ 4GB RAM allocated.\r\n\r\n## Rasterio version and provenance\r\n\r\n6fc3ab334200920819dc2ae063c7845988bcd9fc compiled against GDAL 2.2.1.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/c35a723e1815bac0db0117aa529bb2a3739212f2", "message": "Override get_crs() in WarpedVRT to return dst_crs\n\nThis way, WarpedVRT has an effective CRS of `dst_crs` rather than\n`None`.\n\nFixes #1186"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fdbb68005cb4172e7017e6f679366a5dafae918a", "message": "Use width/height instead of num_cols/num_rows"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/22477632", "body": "`attrs` is missing from `inst_reqs` in setup.py`.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/22477632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "four43": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1159", "title": "vsis3 write capabilities", "body": "This is an enhancement. I have been searching around and haven't been able to find any docs or explanation of this issue. It would be great if direct S3 writing was possible. According to this announcement it's supported by the /vsis3/ handler: \r\n\r\nhttps://lists.osgeo.org/pipermail/gdal-dev/2015-October/042975.html\r\n\r\nSequential writing only which I understand could be kind of a pain to enforce/clunky. In Rasterio, it looks like here a type error is explicitly raised: \r\n\r\nhttps://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L942\r\n\r\nThat seems like kind of an anti pattern. Instead of forcing an error for that feature could you try the write, then bubble up the error from the underlying VFS? I could totally be looking in the wrong place, but that's where I found my error was generated.\r\n\r\nThis is a great library, thanks for all the effort on it. I can try and help where I can. \r\n\r\nThanks,\r\n-Seth \r\n\r\nEnvironment:\r\n```\r\n$ pip freeze | grep rasterio\r\nrasterio==0.36.0\r\n\r\nGDAL Version 2.2.1\r\n\r\n$ python --version\r\nPython 3.5.2\r\n\r\n$ uname -a\r\nLinux seth-ws 4.4.0-96-generic #119-Ubuntu SMP Tue Sep 12 14:59:54 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1159/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arthur-e": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1157", "title": "CLI calc to consider NoData values; CLI warp to clear NoData values?", "body": "## Feature Request\r\n\r\nI would really like to be able to perform calculations over NoData (and other values) using the CLI `calc` program. Right now (version 0.36.0), it seems like the CLI `calc` program ignores NoData areas. Doubtless this is useful in many cases but it is problematic for other applications (e.g., merging masks). It would be nice if there was a switch to force NoData values to be treated like any other value.\r\n\r\nAlternatively, or perhaps in conjunction with the improvement above, the CLI `warp` tool could allow for the resetting of the NoData value. Right now, it is possible to change the NoData value to a new value, but it is not clear how to clear the NoData value entirely. The GDAL utility gdalwarp, for instance, [allows the NoData value to be unset in the output](http://www.gdal.org/gdalwarp.html).\r\n\r\nThanks for considering!\r\n\r\n## Expected behavior and actual behavior.\r\n\r\nI expected, e.g., a calculation over two binary masks (ones and zeroes everywhere):\r\n\r\n```sh\r\nls *some_files.tiff | xargs rio calc \"(greater (+ (read 1) (read 2)) 0)\" -o output.tiff\r\n```\r\n\r\nTo produce an image where NoData areas remain 0 in the output. But, instead, the NoData areas appear as 1. The NoData values are set to the Landsat convention, -9999.\r\n\r\n## Operating system\r\n\r\nUbuntu 16.04, Python 3\r\n\r\n## Rasterio version and provenance\r\n\r\nrasterio 0.36.0 installed with `pip`\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brendan-ward": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1143", "title": "Internal rounding within windows.py::round_offsets() and round_lengths() should be optional", "body": "Use case:\r\ngiven a floating point window, for example, derived from a polygon intersected with a raster\r\n```\r\nWindow(col_off=1.9999, row_off=1.9999, width=3.001, height=3.001)\r\n```\r\n\r\nWe want to be able to derive the outermost pixel indices that contain that polygon by default:\r\n```\r\nWindow(col_off=1, row_off=1, width=4, height=4)\r\n```\r\nWe can opt-in to rounding if that is desirable for a given use case (e.g., to snap to closest rather than outermost index).\r\n\r\nRight now, `round_offsets()` and `round_lengths()` use internal rounding prior to applying `ceil` or `floor` to a given value:\r\nhttps://github.com/mapbox/rasterio/blob/master/rasterio/windows.py#L601-L603\r\n\r\nSeems like we have 2 options:\r\n1. make the `pixel_precision` parameter optional, default `None`.  Only apply rounding if provided.\r\n2. add a pair of new functions `snap_offsets()` and `snap_lengths()` that apply only `ceil` or `floor` and not internal rounding.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1139", "title": "Epsilon used in transform.py::rowcol() appears to be introducing errors", "body": "I could be misinterpreting the intent of `epsilon` as used in this function, but combined with passing in `op=float` as used by `windows.py::from_bounds()` to get a window within a raster, it appears to be adding undesirable effects.\r\n\r\nFor example, take a 10x10 raster with `Affine.identity()` transform:\r\n`rowcol(src.transform, 0, 0, op=float)` => `(-8e-07, 8e-07)`\r\n\r\nbut it seems like it should return `(0, 0)` instead.  \r\n\r\nIt seems like we would only want to apply the epsilon in particular cases.  The docstring doesn't quite match the implementation, so I'm not quite sure what to go by here (`floor`, `ceil`, `round` are specified as options for `op` but not `float`).\r\n\r\nI can check in a failing test if that would help.  Our tests of `rowcol` do not cover this case.\r\n\r\nThis was first detected in #1136 and is confounding some of the refactoring there.\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/798", "title": "Wrap ndarry, transform, and CRS into an object", "body": "There are a number of places where a rasterio operation takes as input a raster or raster band, OR a numpy ndarray, transform, and sometimes CRS.  This complicates the function signatures a bit, as it means having parameters that are meaningful in some cases but not others, and it lacks a bit of cohesion between related entities that may be helpful in many cases.\n\nPerhaps it is time to create a lightweight object (tuple or class) that wraps these together, so that we can pass just one thing around and have it be more equivalent to passing a raster / raster band?  \n\nSomething like the [`Raster`](https://github.com/perrygeo/python-rasterstats/blob/master/src/rasterstats/io.py#L193) object in @perrygeo 's `python-rasterstats` package, but not wrapping rasters / bands; only ndarrays.\n\nThis surfaced in #578, among others.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/787", "title": "Refactor conftest.py::data fixture", "body": "This function copies a few test files to a temporary directory, when we may need only one.  It's name does not make this clear when using in tests.  Let's make this targeted and obvious, and standardize throughout the tests.\n\nLower priority, can wait until after pending PRs are merged.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/755", "title": "Add rio resample operation", "body": "Mentioned in #749 \n\n`rio resample` or `rio resize`\n\nGoal is to allow easy resampling but without warping between CRS's.  Should allow us to do any of the following:\n- set the output resolution\n- set the output dimensions\n- set the output percentage of input size\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/733", "title": "Drop unsupported options when converting to JPEG", "body": "Running `rio convert tests/data/RGB.byte.tif /tmp/test.jpg -f JPEG`\n\nproduces \n\n```\nWARNING:rasterio._gdal:CPLE_NotSupported in b'Driver JPEG does not support INTERLEAVE creation option'\nWARNING:rasterio._gdal:CPLE_NotSupported in b'Driver JPEG does not support TILED creation option'\n```\n\nLooks like we just need to filter out options from TIFF before creating the output JPEG.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/526", "title": "Test coverage is mis-reported for rio modules", "body": "Discovered in #522. \n\nSpecific blocks of code in `rio/features.pyx` and likely others are showing different coverage results if the same `rio` function is called once or twice in a given test function.\n\nPreliminary investigations suggest this is due to interactions between `click` and `coverage` modules, and not based on anything in `pytest` or our use of test fixtures. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/525", "title": "Standardize or normalize use of bounds and bounding boxes", "body": "Our use of bounds and bounding boxes is not altogether consistent (see [comments](https://github.com/mapbox/rasterio/pull/522#discussion_r44348646) on a recent PR).\n\nPart of the problem is that bounds in some contexts, especially those [derived from features](https://github.com/mapbox/rasterio/blob/master/rasterio/_features.pyx#L345-L365) follow the `(xmin, ymin, xmax, ymax)` convention.\n\nMost other places in rasterio, e.g., the `bounds` property on a raster, follow rasterio's `BoundingBox` representation `(left, bottom, right, top)`.  This relies on the affine transform of the raster.  \n\nDepending on the direction of the y dimension, these two forms may be equivalent (where y is decreasing from upper left).  In the case of y increasing from upper left (e.g., `Affine.identity()` or numpy indexes), these are not equivalent, and issues ensue when we don't account for this.\n\nOne approach would be to create a series of normalization functions, that we could use for interchange between functions that expect one form or another.  I've started to do so, but I'm now questioning this approach.\n\n```\ndef normalize_bounds(bbox):\n    \"\"\"\n    Normalizes an instance of a BoundingBox (left, bottom, right, top) to\n    bounds (xmin, ymin, xmax, ymax)\n\n    Parameters\n    ----------\n    bbox: BoundingBox or bounds tuple\n\n    Returns\n    -------\n    bounds tuple: (xmin, ymin, xmax, ymax)\n    \"\"\"\n\n    return (\n        min(bbox[0], bbox[2]),\n        min(bbox[1], bbox[3]),\n        max(bbox[0], bbox[2]),\n        max(bbox[1], bbox[3])\n    )\n\n\ndef normalize_boundingbox(bounds, affine):\n    \"\"\"\n    Normalizes bounds (xmin, ymin, xmax, ymax) to a\n    BoundingBox (left, bottom, right, top).\n\n    Parameters\n    ----------\n    bounds: bounds or BoundingBox tuple\n    affine: affine.Affine object\n\n    Returns\n    -------\n    BoundingBox tuple: (left, bottom, right, top).\n    \"\"\"\n\n    if isinstance(bounds, BoundingBox):\n        return bounds\n\n    x = [min(bounds[0], bounds[2]), max(bounds[0], bounds[2])]\n    if affine.a < 0:\n        x.reverse()\n\n    y = [min(bounds[1], bounds[3]), max(bounds[1], bounds[3])]\n    if affine.e < 0:\n        y.reverse()\n\n    return BoundingBox(x[0], y[0], x[1], y[1])\n```\n\nOne downside to this approach is that the user needs to know when to use these based on the function signature or docstring of the method they are passing bounds or bounding boxes into.\n\nOverall, this presents mostly in dealing with interactions between features and rasters, so we can deal with more of the conversions internally in those cases.\n\n@sgillies @perrygeo thoughts?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/416", "title": "Add external overviews to rio-overview", "body": "Per comment from @mwtoews in [408](https://github.com/mapbox/rasterio/pull/408#issuecomment-120689251)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/341", "title": "Consolidate usage for rio flags, where possible", "body": "Namely:\n\n```\n--bidx\n--res\n--src-crs\n```\n\nas mentioned in #326 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/340", "title": "Add listing of alternative implementations of GDAL algorithms", "body": "For the cases where we don't want to implement an interface to a GDAL algorithm here (due to I/O concerns, existing work, etc) I think a doc file with a simple listing of alternatives to those we know about would be helpful for users.  This can be minimal, and track them as they come up, rather than us building a full cross-listing now.\n\nRelated to #319 \n\n/cc @sgillies \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/265", "title": "Automatically determine driver from output file extension", "body": "I didn't see this already in place, but would be a nice convenience and cut down on CLI keystrokes when not using the default `GTiff`.  I think we could use simple pattern matching to determine the output driver of a new raster based on the extension, something like:\n\n```\ndef get_driver_from_extension(filename):\n    ext = os.path.splitext(filename)[1].upper()\n    if 'TIF' in ext:\n        return 'GTiff'\n    elif ext in ('JPG', 'JPEG'):\n        return 'JPEG'\n    elif ext == 'PNG':\n        return 'PNG'\n    return None\n```\n\nIn practice in `rio` where we get a `driver` parameter that defaults to `GTiff`, we'd probably want to use like this:\n\n```\ndriver = get_driver_from_extension(output) or driver\n```\n\nGood idea?  Anyone have a more succinct name for this?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/eca50a816e7fe5ae2ede117158856ce2724d46f1", "message": "Use enum for rasterize merge algorithm"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0daad71fceba788210d9e55c9c6d41239c14aff3", "message": "Add GDAL version check for positional arguments"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a3ffaa1f18dd71c9a6f3f9572c2cb72d47cb3119", "message": "Added is_max_version and reason to require_gdal_version decorator"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1c406b4074ef9bb8a95f773a8283dce3b668ff1f", "message": "centralize supported resampling methods"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a3de8c868ac79824d8731092d438d343d2e3a042", "message": "Added GDAL version decoration and used for reproject"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/153ea4870b8e36c30bcb2fd88ef27bcebf67ed58", "message": "setup log errors to sys.exit"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/bd565709ed08d681234b9b17fe3c1eeaec291b8a", "message": "Bumped required GDAL to 1.11, dropped unneeded tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a9559b583b49b7523b3a73ee644bce69972085ec", "message": "Upgrade required GDAL to >= 1.10"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fded0b1d442ee5562eb7d18b8ed5fd1fb0564fdd", "message": "Converted a few test xfails to skip, dropped or modified a few others"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e0f62813e43137db4f6552f91a5446126cb1666f", "message": "Moved comments to reason, skipped test_memoryfile module"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/101e4818ad292b36d408034f5700b4eb4fb87928", "message": "Fix typo in skipped test"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/6477957a858e093d4262159abaaaf8f8a5694645", "message": "Fix logic error"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/bf8d4f3509beb9bf1c867254d176a38f1bf76040", "message": "More consistent GDAL version handling in tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8caf01f151438666cbd7fac138d868d0f7e65293", "message": "wrap GDAL version checking into class"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a0eb8a97c9134863f2c85c1839d746eadf8c2f0c", "message": "Expanded Window tests, refactored from_slices to simplify logic"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a2c09f2d73cbbf4413b4e83f582af6ceff96fa37", "message": "Removed spurious line creating NOCI.tif from test"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/44b9372c13d9696a6b355da6013e9d0a762ff47c", "message": "Merge pull request #1201 from mapbox/error-logging-no\n\nDon't automatically log GDAL exceptions"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/132fca08272ca694973ecf7a8f125f1a7289f93e", "message": "A couple more tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9f7cc2abe455a90f714cade608de3e693211ea7e", "message": "starting refactor of window tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/8971e0ffc62896b7f72dead31435ec33d1668c15", "message": "Additional validation and test of rasterize"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c54299263123b9dc77c6df9e3e8f17e316495fdd", "message": "raise error on invalid shape for InMemoryRaster, and associated tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/79062b42a106d90ec506d2eac25d7e18331e965d", "message": "Prevent segfaults in rasterize (#1176)\n\n* Add better check for GeoJSON inputs to rasterize and associated tests\r\n* Restructured OGRGeomBuilder to avoid segfault"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/de814d3357ea317ff1da9b50401eb0730bdfc583", "message": "Add libraries.io link to readme"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/c54e22da2451cefb0e01acb3c6db91cdfafc70dd", "message": "Raise WindowError from geometry_window"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/33232130bedc4493458e367b68607dd3fd59258d", "message": "py2.7 fix, docstring improvements"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/efd10c1755e3b70ee527b5a86459c2258806d9c5", "message": "Merge branch 'master' into issue1131"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4a09df276ad5659c348db0e50da04a26b4edf9b4", "message": "Merge branch 'master' into mask-return-type"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f911f03053d26e3fadc9a306c0be6df6360f43ef", "message": "use internal png\n\nfix travis config error\n\ntry libpng14\n\ntry libpnglite\n\nnow try zlib\n\nnow try zlib both arch\n\nnow try png internal"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/37d6202a2187db1a0f43ab7458a3e7283fd55ef4", "message": "force use of Travis VM"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d99003493a1352c09f179b93fd009a380d6adf36", "message": "force use of Ubuntu 12.04"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/330574fd9013d11d49a35506a1bb67e801bd93f6", "message": "Refactored mask functionality, updated tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/86fb4cd011c4551367d412b2c518ed77c8b6bb0f", "message": "Fix mask return type issue, restructured logic, overhauled tests"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/13bb1fa0f790e56c4f0b3797cbf40cdd15a5defa", "message": "Removed unnecessary array causing MemoryError and added test"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ea70487220a542c2941127cbf86bf8ef82f0fc2b", "message": "GDAL version issues in exception message"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38851300", "body": "Do we want to broaden this beyond simple binary masks, and allow parameters on this function to allow creation of either a mask, or rasterize values of a given property on the features? \n\nI was also planning to add this in _features.pyx, since this seems highly related, rather than creating a new file.  Sound good?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38851300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38881519", "body": "Progress!  I do think there has to be a better way to do some of these things - like looping over the features.\n\n```\ndef _rasterize(features, size, transform=None):\n    \"\"\"\n    :param features: fiona style feature iterator\n    :param size: (rows, cols)\n    :param transform: GDAL style transform.  If provided, will be set on output\n    \"\"\"\n\n    cdef int retval, rows, cols\n    cdef size_t i, num_features\n    cdef void *memdriver\n    cdef void *out_ds\n    cdef void *out_band\n    cdef double geotransform[6]\n    cdef double pixel_values[1]\n    cdef int dst_bands[1]\n\n    pixel_values[0] = 1 #TODO: Allow other pixel values\n\n    rows, cols = size\n\n    #Do the boilerplate required to create a band\n    memdriver = _gdal.GDALGetDriverByName(\"MEM\")\n    if memdriver == NULL:\n        raise ValueError(\"NULL driver for 'MEM'\")\n    out_ds = _gdal.GDALCreate(memdriver, \"output\", cols, rows, 1, <_gdal.GDALDataType>1, NULL) #TODO: revisit data type\n    if out_ds == NULL:\n        raise ValueError(\"NULL output datasource\")\n\n    if transform:\n        for i in range(6):\n            geotransform[i] = transform[i]\n        err = _gdal.GDALSetGeoTransform(out_ds, geotransform)\n        if err:\n            raise ValueError(\"transform not set: %s\" % transform)\n    out_band = _gdal.GDALGetRasterBand(out_ds, 1)\n    if out_band == NULL:\n        raise ValueError(\"NULL output band\")\n    dst_bands[0] = 1\n\n    #TODO: figure out a cleaner way to do this\n    features_json = []\n    for feature in features:  #have to loop over features, since it may be yielded from a generator\n        features_json.append(json.dumps(feature['geometry']))\n    num_features = len(features_json)\n\n    cdef void **ogr_geoms = <void **>_gdal.CPLMalloc(num_features * sizeof(void*))\n    try:\n        for i in range(num_features):\n            ogr_geoms[i] = _ogr.OGR_G_CreateGeometryFromJson(features_json[i])\n\n        #TODO: add options\n        retval = _gdal.GDALRasterizeGeometries(out_ds, 1, dst_bands, 1, ogr_geoms, NULL, geotransform, pixel_values, NULL, NULL, NULL)\n        out = np.zeros(size, np.uint8) #FIXME - data type\n        retval = io_ubyte(out_band, 0, 0, 0, cols, rows, out) #FIXME - data type\n\n    finally:\n        _gdal.CPLFree(ogr_geoms)\n\n    if out_ds != NULL:\n        _gdal.GDALClose(out_ds)\n\n    return out\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38881519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38982525", "body": "Tests are failing on TravisCI, I'll work in fixing.  New tests complete fine on Windows...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38982525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38986258", "body": "It already does - the second test function in tests/test_rasterize_geometries.py does this straight from shapes function...\n\nit takes either geometries or geometry, value tuples.\n\nUnless I am misunderstanding what you are getting at here...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38986258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39251822", "body": "Not yet sure where in the code it is failing.  I'll look into it further and submit a PR if I can fix it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39251822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39350590", "body": "Traced to this line: https://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L191\nThis line never succeeds and kills the process.\n\nWhich suggests that it is something internal to GDAL when the CPL_DEBUG flag is set.\n\nHowever, if I run gdalinfo on command line for that file, with this flag, all is as it should be:\ngdalinfo --config CPL_DEBUG ON rasterio/tests/data/RGB.byte.tif\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39350590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39867543", "body": "I'll try that in the next couple of days and submit another pull request if it performs better.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/39867543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40821795", "body": "Like this?  `write_band(bidx, src, window=None, nodata=None)`\nif src is masked, we fill with nodata value of dataset if nodata parameter is not provided, otherwise we fill it with the value (provided it is within the data type constraints of the band).\n\nI'll try to take a pass at this in the next few weeks and submit a pull request.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40821795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40856275", "body": "@sgillies that sounds reasonable to me, the caveat being that the driver create methods would need to be able to support, silently ignore (if not applicable), or raise exceptions (if applicable but specific value not supported).  Supporting only GTiff for output for now makes this easier.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/40856275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079667", "body": "Fine by me.  Thanks for the acknowledgement!  (I haven't done a \"bunch\" of cython code yet in rasterio, but I've got some ideas...)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079957", "body": "I have not found a fix for it.  The issue seems to be internal to GDAL in the way we are calling it.  My workaround is to simply omit those tests from the suite on windows, which isn't great but gets past this.\n\nRecommend closing this and reopening later via an issue / pull request when we know more.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42079957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42207397", "body": "Did you mean to include @AsgerPetersen above?  (note typo)\n\nI like the idea of harmony between them; though the lack of apparent standardization on this front complicates the choice of which approach to use.\n\nWhich are you wanting to standardize around?\n\nI actually think @mwtoews approach above could work well in both cases (w/ some tweaks to the functions).  I've often been bothered by handing a transform parameter as a list to various functions, and not having its structure defined (I always have to look it up, and having code blow up because something wasn't in correct order).  Using a class defines its structure and provides validation.\n\nThis has the added bonus that the user doesn't have to be fully in GDAL internal data representation mindset when using rasterio, which I think is a good thing.  The more it is just clear, and doesn't require you to know GDAL, the more usable it will be.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42207397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42478286", "body": "I would suggest the following variant of @mwtoews class above, if you want to go the class-based route:\n\n```\nclass AffineMatrix(object):\n    def __init__(self, a=1.0, b=0.0, d=0.0, e=1.0, xoff=0.0, yoff=0.0):\n        # explicit is more obvious to users than via kwargs\n        # instance variables instead of class variables\n        self._contiguous_names = ('a', 'b', 'd', 'e', 'xoff', 'yoff')\n        self.a = a\n        self.b = b\n        self.d = d\n        self.e = e\n        self.xoff = xoff\n        self.yoff = yoff\n\n    def __iter__(self):\n        return izip(self._contiguous_names, self.as_contiguous)\n\n    def __eq__(self, other):\n        return list(self) == list(other)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    @classmethod \n    def from_worldfile(cls, fname):\n        # use class methods for alternative constructors,\n        # and return a new instance\n        matrix = AffineMatrix()\n        with open(fname, 'r') as fp:\n            for coef in ('a', 'd', 'b', 'e', 'xoff', 'yoff'):\n                value = float(fp.readline())\n                setattr(matrix, coef, value)\n        return matrix\n\n    @classmethod\n    def from_gdal(self, xoff, a, b, yoff, d, e):\n        return AffineMatrix(a, b, d, e, xoff, yoff)\n\n    # use numpy style to_* functions instead of properties\n    def to_list(self):\n        return [getattr(self, n) for n in self._contiguous_names]\n\n    def to_gdal(self):\n        return [self.xoff, self.a, self.b, self.yoff, self.d, self.e]\n\n```\n\n@mwtoews are there more general terms we can use than a, b, d, e?  E.g., x_cellsize, x_shear?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42478286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44027095", "body": "Seems reasonable; there is something to be said for using an existing implementation of this - but you'd still need wrapper functions to from / to GDAL or Shapely internal representations.  Is your thinking this would replace the public-facing representation of a geotransform object, and the conversions would be handled internally within the cython code?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44027095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44583697", "body": "Looks like the same basic approach as I was working out.  I had it stubbed out and got completely slammed with other work while working on the test cases for this (I'm not planning on pushing out a PR without matching test cases).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44583697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45690934", "body": "@mwtoews my preference would be to have a `masked=True` as the default, but my concern would be that it would be an API change, since up till now would always have returned regular arrays.  If others are OK with an API change like that, I'm all for it.\n\nChanging the `has_nodata` logic makes sense to me.  Masked makes sense if there is the potential even if not realization of nodata within the band(s), and keeps downstream code consistent.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45690934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49192423", "body": "@sgillies Good choice!  We just picked up click for another project and love it!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49192423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51135271", "body": "Maybe slightly off-topic, but we use the [netCDF4](https://github.com/Unidata/netcdf4-python) package for all our netCDF / HDF5 needs, and are happy with it, but we've never needed to use it with HDF4 subdatasets (I see extra dependencies are required in that case).  Note: it tends to adhere more to the netCDF naming conventions (variables) versus HDF5 conventions (datasets) for the primary internal data representation.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51135271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54248893", "body": "float32 should be straightforward (see [GDALRasterizeGeometries](http://www.gdal.org/gdal__alg_8h.html#a50caf4bc34703f0bcf515ecbe5061a0a): \"output raster may be of any GDAL supported datatype, though currently internally the burning is done either as GDT_Byte or GDT_Float32.\"  Presumably uint16 would be handled OK internally as a GDT_Float32, would need testing.\n\nwithin _features.pyx, it looks like we are upcasting the feature values to doubles anyway, so no issue there other than removing some of the validation upstream of there.  Handling other data types at that level should be as easy as substituting in different IO functions from io.pyx: e.g., io_uint16, io_float32\n\nThe bigger issue as I see it is the function signature for features.py::rasterize.  Namely, if output is specified, we could use that to determine data type for validation and downstream use.  Otherwise, we'd need to add an additional parameter for data type, and then extra logic to evaluate feature values and default_value against that.  We may also want to add a dictionary of default values by data type to dtypes.py, and use those based on target data type.\n\n@sgillies is there another precedent for passing in data type as a parameter?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54248893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54352585", "body": "I'm completely slammed too, but I think I've got a path forward on this.  The code changes involved are not hard.  Can you give me a week to try and either get this done or bow out?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54352585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54353167", "body": "And to be clear - I was only volunteering for the `rasterize` data types, not `shapes`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54353167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54501441", "body": "@perrygeo Are you OK with data type being auto-detected based on feature values, unless you specifically pass in a value for `dtype`?\n\nI'm thinking the function signature could be\n\n```\nrasterize(\n        shapes, \n        out_shape=None, \n        fill=0, \n        output=None,\n        transform=IDENTITY,\n        all_touched=False,\n        default_value=None,\n        dtype=None)\n```\n\nand we handle `dtype` like numpy, and autodetect the type if `dtype is None` and use that for the resultant image array.  We'll have to do a little validation there; not all numpy dtypes are valid for this function.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54501441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55783011", "body": "I've been making good progress on this, but have a couple topics for discussion:\n- use 1 as default value for all data types (right now it is 255): after digging in more, it felt less appropriate to use the upper value of a given data type as it's default, esp. when precision may vary a little bit across architectures for things like float64.  1 seems like a good value to indicate the location of features, when 0 is the default background.  And really, the case where data type matters is when user specified default or feature value range needs a particular data type, so a default of 1 doesn't interfere.\n- modify RasterUpdater to work w/ memory driver: right now, several places in rasterio use boilerplate to create a memory dataset (of a given type), get the first band, and use that for IO with numpy arrays.    After a brief foray into a dedicated memory based class, it looks like simply updating RasterUpdater with the appropriate logic would greatly consolidate that boilerplate down.  However, this would change some of the patterns when using a memory dataset; it couldn't auto-determine things by reading from the file (e.g., CRS), so we'd have to insist that those be passed in for memory drivers (if required).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55783011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55847190", "body": "@sgillies I was thinking that the user would pass the \"MEM\" driver to the call to rasterio.open - this sounds like it conflicts with your desire to not have it in the user interface.  What level are you considering user interface?\n\nI agree about primary way for working w/ memory arrays (numpy).  This new functionality is more useful to help w/ IO w/ GDAL functions (meaning we really only need this accessible in the cython stuff).  I was hoping to leverage in the benefits of the \"with\" usage pattern for rasterio.open, but maybe that doesn't make as much sense if we are only using from cython.  \n\nAre you open to a lighter weight, dedicated class we use just from cython to handle memory datasets for IO w/ GDAL?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55847190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56327553", "body": "@sgillies the generator you added to features.py in b60e4635 makes it harder than I'd like to iterate over all values in the input shapes, put them in an array, and determine the type from the aggregate.  Are you tied to this being a generator here?\n\nI was thinking I could rewrite that operation as one that does more of a filter operation (discarding bad shapes & logging exceptions) while adding their values to an array and using some bounds checking logic on the min and max of that array to determine the dtype to use.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56327553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56328337", "body": "I've got a first pass at the dedicated class, but I'm not sure that I totally like the API.  \n\nGiven a numpy 2D array, it constructs an in-memory dataset with 1 band for IO with GDAL functions.  It keeps a couple attributes for passing into those GDAL functions (e.g., self.dataset, self.band_ids, etc).  It writes the initial values of that array to the in-memory band, and uses the `with` pattern to close the dataset later.\n\nThoughts?\n\n(in _io.pyx)\n\n```\ncdef class InMemoryRaster:\n    def __init__(self, image, transform):\n        self.dataset = NULL\n\n        cdef void *memdriver = _gdal.GDALGetDriverByName(\"MEM\")\n\n        self.band_ids[0] = 1\n\n        self.dataset = _gdal.GDALCreate(\n            memdriver,\n            \"output\",\n            image.shape[1],\n            image.shape[0],\n            1,\n            <_gdal.GDALDataType>dtypes.dtype_rev[image.dtype.name],\n            NULL\n        )\n\n        if self.dataset == NULL:\n            raise ValueError(\"NULL output datasource\")\n\n        for i in range(6):\n            self.transform[i] = transform[i]\n        err = _gdal.GDALSetGeoTransform(self.dataset, self.transform)\n        if err:\n            raise ValueError(\"transform not set: %s\" % transform)\n\n        self.band = _gdal.GDALGetRasterBand(self.dataset, 1)\n        if self.band == NULL:\n            raise ValueError(\"NULL output band: {0}\".format(i))\n\n        self.write(image)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        if self.dataset != NULL:\n            _gdal.GDALClose(self.dataset)\n\n    def read(self, image):\n        return io_auto(image, self.band, False)\n\n    def write(self, image):\n        return io_auto(image, self.band, True)\n```\n\nAnd usage (e.g., in _features.pyx):\n\n```\n        with InMemoryRaster(image, transform) as mem:\n            retval = _gdal.GDALRasterizeGeometries(\n                        mem.dataset, 1, mem.band_ids,\n                        num_geometries, ogr_geoms,\n                        NULL, mem.transform, pixel_values,\n                        options, NULL, NULL)\n\n            # Write the in-memory band back to the image.\n            mem.read(image)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56328337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56328884", "body": "Note: `io_auto` above routes to the appropriate io function for the dtype of the image.  I could encapsulate that here only, but it seemed like a nice general utility function.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56328884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56774654", "body": "A few improvements pending in #155 will help this implementation.  Once that is approved, I can try and help with this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56774654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56859959", "body": "@sgillies I'm very much a git noob - any advice on how to squash these down?  Most of the commits are merges from your repo into mine (is there a better way??).  From all I've been able to figure out so far (following [this](https://github.com/ginatrapani/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit)), I've only been able to squash the last couple commits (which takes this from 12 to 10 commits), otherwise it gets gnarly if I try to rebase any of the merges from your repo.  I can do a new PR from this new branch, if you'd like.\n\nSorry about that - any advice on how I can better manage commits and PRs to keep this simple would be appreciated!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56859959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/57008247", "body": "Please close this one, I'll submit a new PR with much cleaner commits momentarily.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/57008247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/57019291", "body": "We do this a lot too, but only (so far) for single band data, so we must have it easy...\n\nInstead of returning an array (across all features, if I followed the above correctly), what if it provided an iterator over each feature's extracted data array, of shape `(num_bands, window_rows, window_cols)`?\n\nIn the interest of simplicity, I would prefer that it is the responsibility of the caller to put the features into pixel coordinates (of the entire dataset), and pass in the window (in pixel coordinates, as for reading rasterio datasets).  This function could then extract out the data within the window prior to masking, rasterize and create mask, then return masked array.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/57019291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/8006369", "body": "@sgillies this breaks in cython 0.20 (on windows) due to casting of python temporary string to char*, but works fine in 0.21 ( [one of several new features](https://github.com/cython/cython/blob/master/CHANGES.rst#021-2014-09-10) ).  May want to up the version required in `requirements_dev.txt`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8006369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8451858", "body": "Looks better to me - thanks!.  :+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8451858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808845", "body": "Possibly overkill, but please consider adding numpy-style docstrings such as in [features.py](https://github.com/mapbox/rasterio/blob/master/rasterio/features.py#L25), as per #161.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808854", "body": "Please move comment to it's own line (before or within `if`)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808958", "body": "Looks like you are sidestepping some of the validation of window parameters that you are doing in `eval_window`.  Might be a good idea to do some of that validation here or validation errors may get masked by `IndexErrors` or the like.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808971", "body": "Leaving this unqualified seems like it risks catching too many kinds of exceptions, some of which are true errors (e.g., `IOError`?).  Are you trying to handle the `AssertionError` here or something else?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8808971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8809010", "body": "could be simplified to: `if len(set(nodatavals)):` and avoid otherwise unused local variable above.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8809010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9369978", "body": "@sgillies Does this need to be closed below, ~ line 874?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9369978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9370004", "body": "@sgillies Please add a newline here; with two parameter lists that wrap like this it is hard to see breaks between function calls.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9370004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9370115", "body": "@sgillies The docstring is now incorrect; image is not modified in place.  Not always a \"band\" either; may simply be an array.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9370115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9370128", "body": "@sgillies you can return here and avoid possibly undefined `ret` below if `with` statement fails.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9370128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/10861952", "body": "@sgillies Isn't `GeoTIFF` out of place here, since this is the base class?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/10861952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11101147", "body": "@sgillies this line is still needed for the dynamic loading below.  I'm getting an error without it. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11101147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152830", "body": "@sgillies could be simplified down to \n\n```\nk = k.upper().encode('utf-8')\nv = str(v).upper().encode('utf-8')\nwarp_extras = CSLSetNameValue(warp_extras, <const char *>k, <const char *>v)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152830/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152848", "body": "@sgillies if I follow, elsewhere you've been renaming `hband` to `band`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152848/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152859", "body": "@sgillies `b` suffix seems unnecessary here and below.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152898", "body": "@sgillies this ended up being a bigger change than I expected, but it looks like it significantly cleaned up the code.  Still plenty explicit because of the naming conventions.  \ud83d\udcaf \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18152898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/21583781", "body": "Consider a little consolidation:\n\n```\ngdal_root = os.path.join(sys.prefix, 'share/gdal')\nif os.path.exists(os.path.join(gdal_root, 'pcs.csv')):\n    os.environ['GDAL_DATA'] = gdal_root\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/21583781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/21623377", "body": "@sgillies in cases of simple edits like this, would you prefer I:\n1) flag this for you to fix, then I merge when you are done      (this is closest to our process at CBI and why I defaulted to this)\n\nOR \n\n2) I make edits directly in your pull request, and ping you for approval\n\nOR \n\n3) I make edits then merge\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/21623377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22075761", "body": "just out of curiosity, why not use `pop` for this case?\n\n`output = files.pop()`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22075761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22256944", "body": "@snorfalorpagus Please consider adding a bit more description to this from the GDAL docs describing the algorithm (and suggested uses or uses to avoid).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22256944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22257019", "body": "@snorfalorpagus typo: \"valud\" -> \"valued\".\n\nConsider rewriting a little to make it more clear, e.g.,:\n\n```\nA mask band indicating pixels to be interpolated.  Pixels to interpolate into are indicated by the value 0.  Values of 1 indicate areas to use during interpolation.  Must be same shape as image.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22257019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22257045", "body": "@snorfalorpagus If `smoothing_iterations` is retained, please add a little more detail to this description to indicate what smoothing applies to: interpolated pixels, or full image.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22257045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22240749", "body": "Please consider adding a little more to this message.\n\n```\nhelp=\"Use RS (0x1E) as a text separator between records \n(per the draft-ietf-json-text-sequence).  Default is False.\"\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22240749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22240789", "body": "Consider moving this option to `params.py`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22240789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22363749", "body": "@sgillies Consider moving `nodata_mask = None` up here so it transcends the `if` branching below.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22363749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22668026", "body": "@sgillies shouldn't this be based on the data type for `dest` or that automatically handled?\n\nThis could be:\n`nodataval = dest.flat[0]`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22668026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22695903", "body": "@sgillies I'm not a fan of using exception handling to differentiate masked arrays from regular ndarrarys (here and above).\n\nHow about: \n`if isinstance(data, np.ma.masked_array):`\nOr \n`if hasattr(data, 'mask'):`\n\nIf I recall correctly, we do this test in many places in rasterio (in various ways), perhaps a tiny, obvious utility function would help us do this more consistently?  E.g., `is_masked_array(arr)`  (which could implement the highest performance way of detecting if masked or regular array).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22695903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22835656", "body": "@sgillies Please remove commented code\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22835656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22835831", "body": "@sgillies This `if` and the one on 694 are unnecessary since they do not change the value of `roff` and `coff`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22835831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836018", "body": "@sgillies adding tuples seems unnecessary since everything is at hand here, couldn't you just do this?\n\n`dest = np.zeros((first.count, output_height, output_width), dtype=first.dtypes[0])`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836168", "body": "@sgillies Consider adding:\n\n```\nelse:\n    nodataval = 0\n```\n\nand then remove the `or 0` part of the conditionals on lines 111 and 117.  Those seem risky unless handled here, since 0 is only indicating nodata when `nodataval is None`   (otherwise 0 is possibly a valid pixel value).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836307", "body": "@sgillies try / catch doesn't seem necessary here.  You are just verifying that src.window() executes.    (and if it throws something other than `ValueError` we'd want this test to fail here)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836413", "body": "@sgillies this seems potentially risky across platforms since it is a floating point precision equality comparison.  What about\n\n`assert abs(data[0].mean() - src.read(1).mean()) < 0.0001`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836912", "body": "@sgillies I've been reconsidering how we are using fixtures here and in #241 based on my initial addition of them.  Obviously I didn't come up with a good precedent; the goal for fixtures should be something we reuse across multiple tests (my example originally did but I later modified the tests and ended up using it only once; I should have stripped it back out).  If the fixture is only used in one test, we could accomplish the same thing by having at the beginning of the test.  That said, your changes here are fine to leave as is for now.\n\nI'd like to take a pass at refactoring this pattern once this and #241 are merged into the codebase.  I'm also thinking that we'll probably want to move these fixtures from this module into `tests/conftest.py` so we can use them in other tests (there's other tests that could benefit from using these rather than the test files for performance reasons).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22836912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22903768", "body": "@sgillies Consider using a conditional instead of exception handling:\n\n```\ntry: \n    if np.dtype(dtype).kind in ('i', 'u'):\n        info = np.iinfo(dtype)\n        inrange = (info.min <= nodataval <= info.max)\n    else:\n        info = np.finfo(dtype)\n        inrange = (info.min <= nodataval <= info.max)\n\nexcept:\n    pass\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22903768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22905279", "body": "@sgillies this has the risk of `info` being undefined at this point.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22905279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/24286963", "body": "@sgillies :+1: \nthis is just what we need to use for detection of CRS mismatches in #268.  I'll work on adding a check based on this to rio-rasterize.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/24286963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/24388468", "body": "@sgillies Consider using python slice syntax ':' in place of '..'\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/24388468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/25143631", "body": "@sgillies 2 comments here:\n- looks like you are using a internal API from the signature `._ctx`; if you are using it outside `snuggs`, it probably should be a public API, e.g., `snuggs.ctx.lookup()` or similar.  (going here w/ the convention that leading underscores denote internal functions / objects)\n- some extra validation would be nice here, with simpler error messages.  I can make this produce a long exception using:\n\n`$ rio calc \"(read 2)\" tests/data/RGB.byte.tif /tmp/test.tif`\n\n`read: invalid band index` would be a fine message in this case.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/25143631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27849504", "body": "@sgillies Can you please expand the docstring to give a bit more explanation to usage of the parameters above, particularly how they should best be combined?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27849504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27849611", "body": "@sgillies totally minor nit, would you mind putting the closing brace on a newline for readability?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27849611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27849852", "body": "@sgillies instead of `--raw` please consider `--not-masked` to more closely follow the true / false naming convention you've used for other flags elsewhere in `rio`.    (I meant to respond to your earlier question about `--raw` but didn't get to it).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27849852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27850028", "body": "@sgillies please consider reformatting this a bit for readability, e.g., \n\n```\n                    stats = [\n                        {\n                            'min': float(b.min()),\n                            'max': float(b.max()),\n                            'mean': float(b.mean())\n                        } \n                        for b in src.read(masked=masked)\n                    ]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27850028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28359102", "body": "@sgillies here is the API change, using `boundless` as you suggested.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28359102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28392863", "body": "@sgillies Interesting idea, I'll have to think on it...\n\nI do worry about use of `-v` here, since you are using it for verbosity [elsewhere](https://github.com/mapbox/rasterio/blob/master/rasterio/rio/info.py#L71), and `-f` is used here and in cligj for [output format](https://github.com/mapbox/cligj/blob/master/cligj/__init__.py#L38) \n\nI was trying to keep the usage pretty similar to `rasterize` (in terms of stdin or filename) so that it felt familiar to folks, and thinking there would be use cases where we pipe in GeoJSON rather than have it in advance, and this usage looks a little [awkward in grep](http://stackoverflow.com/questions/6641731/read-expression-for-grep-from-standard-input).\n\nWhat do you expect the output of bounding box extraction to be, as specified above?   Original extent of input.tif, but masked out everywhere except [west, south, east, north]?  Or cropped to that extent as well?  When I was considering whether or not I should add this, it looks like gdal_translate covers the crop to extent of bbox pretty well, but doesn't combine that with masking (but result would be the same if we are only specifying a rectangular bbox in world coordinates of raster).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28392863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28392894", "body": "Current usage matches rasterize.  Do you want that changed too?  We should be consistent...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28392894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28439166", "body": "Ok - I'll fix both, then do another sweep later per #324 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/28439166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/29915770", "body": "@sgillies assigning the result to `cli` is causing issues with logging, which makes it so we can't get at nearly all of the commands:\n\n`> rio info`\n`No handlers could be found for logger \"rio\"`\n\nRemoving the assignment but still calling `entry_point.load()` worked for me.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/29915770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30550234", "body": "@groutr consider reordering & rephrasing this a little bit - I don't know that it is helpful for us to reference a config file that isn't applicable to Windows here.\n\n```\nif os.name == \"nt\":\n    log.info(\"Building on Windows requires extra arguments to setup.py to locate necessary GDAL files.\\n\"\n             \"More information available in the README.\")\nelse:\n    log.warning(\"Failed to get options via gdal-config: %s\", str(e))\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30550234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30672310", "body": "@sgillies I don't get that result.  Instead, the values of `dst_nodata` only remain for areas covered by `src_nodata` in the source or outside the bounds of the source.\n\nShould I be getting a different result?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30672310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30669311", "body": "@sgillies I'm trying to understand your choice of single vs double quotes for strings.  Is there a particular pattern you are going for here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30669311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670232", "body": "@sgillies please change to \n\n`if nodata is not None:` \n\nas 0 might be an intentional nodata value here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670353", "body": "@sgillies It would also be a good idea to make sure that nodata value is within the valid range of `dst.dtype`:\n\n```\nif not _io. in_dtype_range(nodata, dst.dtype):\n    raise click.BadParameter('nodata must be within valid range for input file data type', param=nodata, param_hint='nodata')\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670956", "body": "@sgillies I think this has the very real risk of setting an invalid CRS and blowing up with a much harder to decipher exception later.  I'd prefer that you make this a bit more specific and fail earlier if invalid.  \n\nIn fact, if you expanded `rasterio.crs.from_string` to also cover the case of JSON or bare 'EPSG:xx' and raise a ValueError if nothing could be extracted, I could see us using  that in other rio commands that take crs as input.\n\nIf that raises a ValueError, you could than raise it as a `click.BadParameter` here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670982", "body": "@sgillies I'd recommend trying to decode the JSON and raising a `click.BadParameter` if that fails, prior to calling guard_transform.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30670982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30671731", "body": "@sgillies Would it be worth exposing tags via rio-info?  I looked there first to see if tags were getting set based on my inputs here...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30671731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30671865", "body": "@sgillies might also be worth checking to make sure there are enough parameters in the transform, to prevent errors like this that wouldn't be immediately obvious to user:\n\n```\n> rio edit /tmp/test.tif --transform '[1,2,3,4]'\n\n<stacktrace>\nFile \"/Users/brendan/projects/rasterio/rasterio/transform.py\", line 10, in tastes_like_gdal\n    return seq[2] == seq[4] == 0.0 and seq[1] > 0 and seq[5] < 0\nIndexError: list index out of range\n```\n\nThough there is something to be said for not going overboard with validation, and instead expecting the user to provide good enough inputs.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/30671865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/31330794", "body": "@kjordahl Please add `(default: True)` to help.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/31330794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/31331422", "body": "@kjordahl Please add a short docstring so that this is communicated via `rio insp --help`.  Maybe something like: \n\n```\n\"\"\"Open the input file within the Python interpreter.  \n\nIPython will be used as the default interpreter, if available.\n\"\"\"\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/31331422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/33365199", "body": "You should get new bounds after transforming the geometry, not project the bounds you get from the geometry before projecting them.\n\nI think you could move this whole block outside the `with` block, and get the bounds exactly once after transforming the geojson if needed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/33365199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34007514", "body": "@sgillies typo: `rio-edit-info` -> `rio edit-info`\n\nAlso, the description above would be more clear like this:\n\n```\n    Metadata items may also be read from an existing dataset using a\n    combination of the --like option with at least one of --all, --crs, \n    --nodata, and --transform options.\n```\n\nIt is unclear what values are going to be copied from template when `--like` is provided but others are not.  When I tested this option only, I got several unexpected results given that `--all` is supposed to be `False` by default:\n\n```\n$ cp tests/data/shade.tif /tmp/test.tif\n\n$ rio info /tmp/test.tif\n{\"count\": 1, \"crs\": \"EPSG:3857\", \"res\": [9.5546285343, 9.5546285343], \"bounds\": [-11858134.818413004, 4803914.3530251775, -11848350.87879388, 4813698.2926443005], \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [9.5546285343, 0.0, -11858134.818413004, 0.0, -9.5546285343, 4813698.2926443005], \"lnglat\": [-106.47949217280885, 39.605688173875606], \"height\": 1024, \"width\": 1024, \"shape\": [1024, 1024], \"blockxsize\": 1024, \"tiled\": false, \"blockysize\": 8, \"nodata\": 255.0}\n\n$ rio edit-info /tmp/test.tif --like tests/data/RGB.byte.tif\n\n$ rio info /tmp/test.tif\n{\"count\": 1, \"crs\": \"EPSG:32618\", \"res\": [300.0379266750948, 300.041782729805], \"bounds\": [101985.0, 2519672.2144846795, 409223.8369152971, 2826915.0], \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [300.0379266750948, 0.0, 101985.0, 0.0, -300.041782729805, 2826915.0], \"lnglat\": [-77.40522561315726, 24.153251565772365], \"height\": 1024, \"width\": 1024, \"shape\": [1024, 1024], \"blockxsize\": 1024, \"tiled\": false, \"blockysize\": 8, \"nodata\": 255.0}\n```\n\nLooks like crs and transform were copied across but not nodata.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34007514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34008024", "body": "Please consider updating the docstring comments for `--transform` because the value must be string quoted but isn't demonstrated that way:\n\n```\n--transform '[300.038, 0.0, 101985.0, 0.0, -300.042, 2826915.0]'\n```\n\nI don't know that calling them JSON-encoded makes that super clear in this context; they are just plain arrays, in quotes...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34008024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34008606", "body": "Both `if` and `elif` conditions here fail if value is `0`, which is a valid nodata value.  \n\nShould be `if value is not None` instead.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34008606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113065", "body": "@sgillies consider adding a `rasterio.crs.is_valid_crs` function to handle this objective (internally it can make these two calls).  It seems a little out of place to use these tests because in this context we don't care if it is geographic or projected, we only care that it is valid...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113510", "body": "@sgillies even though this default is set to `False` the effect still seems to be as if it were `True`.  If I call \n\n`rio edit-info example.tif --like template.tif`\n\nit produces the same result as \n\n`rio edit-info example.tif --like template.tif --all`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113668", "body": "@sgillies `if nodata is not None:`\n\n(0 values were getting ignored)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34113668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34114079", "body": "@sgillies this condition should be `assert src.nodata == 0` once the above issue w/ nodata is fixed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34114079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34326270", "body": "@geowurster good catch!  If not provided, we default to source crs.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34326270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34326280", "body": "@geowurster yes, good idea.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34326280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418367", "body": "@sgillies this line not needed?  `ysize` not used below...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418468", "body": "lines 1768-1775 should be indented further, or it looks like you risk a null pointer being passed in for `factors_c` input to `GDALBuildOverviews()`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418485", "body": "@sgillies Returns simply `Band 1:` if band has no overviews.  Perhaps something a little more informative would be helpful here?\n\n`click.echo(\"Band %d: %s\" % (idx, listing or 'no overviews'))`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418527", "body": "`specied` -> `specified`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418575", "body": "@sgillies is this a GDAL limit?\n\nI'm pondering a case where we create overviews (e.g., via  `--build 2,4`), then modify the data, then rebuild overviews but accidentally omit previous ones: `--build 4,8`.  It sounds like it is entirely possible in this situation that overview at factor 2 is in a bad state.\n\nHow about a `--rebuild` option to help mitigate situations like this?  Could just iterate over all existing overviews and recalculate...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418764", "body": "@sgillies lines 21-24 are showing up as missing coverage; Coveralls just isn't showing this correctly at the moment.  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418777", "body": "@sgillies this needs a unique name; pytest is testing this one and ignoring the prior because they match names.\n\nYou also need a test of invalid input format to get coverage of the Exception case in `build_handler`...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34418777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34634529", "body": "@sgillies Our next addition should be `rio transmogify`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34634529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34860644", "body": "@sgillies comment appears to be missing a subject: \"to\" what?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34860644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34753427", "body": "@sgillies consider using `\\b` as you've suggested elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34753427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34755501", "body": "@sgillies I think I'm getting undesirable results for using rescaling from integer to floating point: \n\n`rio convert tests/data/RGB.byte.tif /tmp/test.tif -t float32 --scale-linear`\n\nI'm getting a few warnings similar to this: \n`RuntimeWarning: overflow encountered in float_scalars`\n\nBut what is particularly problematic in the above case is that `scale_slope` is `inf` and `scale_intercept` is `nan` in this case, which begets a philosophical rather than mathematical answer...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/34755501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36708849", "body": "@sgillies given that the wheels are built for Linux only (compiled stuff anyway), why not name them w/ `linux_x86_64`.  I think this would make target architecture more obvious to downstream users.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36708849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36823927", "body": "@sgillies `mask` seems out of place here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36823927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36824016", "body": "should this be `cdef int xoff, yoff, width, height`?  Doesn't throw an error or warning during Cythonizing, but seems like a good idea to be explicit about type here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36824016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36824913", "body": "@sgillies How about a window smaller than the full extent of the data?  This proves that it doesn't fail when you give it a window, but doesn't prove that it calculates a different checksum for a smaller window...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36824913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36825123", "body": "Right, but that's at the other extreme.  I was fishing for something in the middle, where you'd get nonzero values but different than the first test...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/36825123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/38382960", "body": "@perrygeo you could simplify by removing conditional and replacing with `return bounds1[0] ...`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/38382960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/40282654", "body": "@sgillies unsure of what specifically you are testing with these variants - that your enum works?  Or that names are lowercase versions of values?\n\nSome alternatives that are more succinct:\n\nTest for all names are lowercase versions of their values (though this just seems like a sanity check for the code):\n`assert min([x.name.upper() == x.value for x in Compression]) == True`\n\nTest that all known values are present:\n`assert not set(['CCITTFAX3', 'CCITTFAX4', 'CCITTRLE', 'DEFLATE', 'JPEG', 'LZMA', 'LZW', 'NONE', 'PACKBITS']).difference([x.value for x in Compression])`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/40282654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44356118", "body": "While working with NetCDF has turned my brain upside down, this case came from using a [test fixture raster](https://github.com/brendan-ward/rasterio/blob/overhaul_features_tests/tests/conftest.py#L192) with an `Affine.identity()` transform.\n\nI too thought a refactor of the core to handle that better would be preferred.  This was one of those cases where the issue, once found, begged a pretty immediate fix where I detected it, rather than introduce the scope creep of a larger refactor.\n\nWe could either cut this out here and refactor that test fixture (possibly touching a bunch of tests along the way), or leave as a temporary shim and add an issue to address the problem in a more robust fashion.  Preference?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44356118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44369105", "body": "@perrygeo It doesn't work against values in an array:\n`numpy.can_cast(numpy.array([1,2,3]), numpy.int8)` ==> `False`\n\nusing other values for `casting` can produce undesirable results.\n\n`numpy.can_cast(numpy.array([1,2,3, 65564]), numpy.int8, casting='same_kind')` ==> `True`\n\nOf course, we can use it in a loop and give it a single scalar value at a time, because then it actually checks values:\n\n`[numpy.can_cast(numpy.array(v), numpy.int8) for v in [1, 2, 3]]` ==> `[True, True, True]` but that is less efficient than what we are doing now.\n\nUnfortunately less useful than it's name suggests.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44369105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44369190", "body": "I've confirmed that replacing the transform of the test fixture raster with one that is not upside down can be done without touching any of the tests.\n\nSo if the consensus is to rip the shim out, I'm OK with that.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44369190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44431856", "body": "@perrygeo I thought about that, but I think it would get confused by `1, 2, 3.4, 4.1, 5`.  I can't see a way around an approach that avoids evaluating each value.\n\nIf this becomes a performance bottleneck, we can always move this over to Cython.  I suspect this is low on our list of performance worst offenders though...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44431856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44618863", "body": "@sgillies typo: \"Unexpecred\" -> \"Unexpected\"\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44618863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49956810", "body": "It was my intent when I wrote this that these were in the source coordinate system, and documented that way in the docstring and in `docs/cli.rst`.  Whether or not that was the right choice could certainly be debated, so don't let me hold you back from changing that.\n\nThe problem, I think, came about through consolidation / reuse of the `--bounds` option, which is used more generally, and specifically says 'Output bounds: ...'\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49956810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50357305", "body": "@sgillies is the plan to reintroduce this at a later point?  Looks like the only usage of `num_threads` below is to switch between single and multiple threads.\n\nIf not, then can this block be removed?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50357305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50358137", "body": "@sgillies how about `if oWarper.Initialize(psWOptions) != 0:`?\n\nOtherwise, without a priori knowledge that this will return 0 for good and >0 for bad, this is non-intuitive (sort of implies if it initialized, then raise an error).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50358137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50359359", "body": "@sgillies this is a breaking change for anyone using `RESAMPLING`.  For the short term, can you alias it and issue a deprecation warning for 1.0?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50359359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51977213", "body": "@jdmcbr this should be handled this way only in `rio mask` because of the nature of combining CLI options.  Here you should raise a `ValueError` if both are `True`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51977213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51977664", "body": "@jdmcbr see #329; I think the direction now is to use a single nodata value\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51977664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51979311", "body": "@jdmcbr  This line is not needed, `out_bounds` not used elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51979311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51979349", "body": "@jdmcbr you can simplify this to `window = raster.window(*mask_bounds)` and delete previous line.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51979349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/52097185", "body": "@jdmcbr `Defaults to False`  (not True)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/52097185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55469843", "body": "@sgillies this looks like it duplicates line 342 below.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55469843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55470601", "body": "@sgillies it looks like [`gdalwarp.cpp`](https://trac.osgeo.org/gdal/browser/branches/1.11/gdal/apps/gdalwarp.cpp#L1684) is using `GDALCreateGenImgProjTransformer2` instead of `GDALCreateGenImgProjTransformer`.  Possibly simply due to fewer required arguments?  I haven't followed the code through enough to see if it depends on something you don't have at hand here, although it would mean wrapping  `GDALCreateGenImgProjTransformer2` in order to use.  If you leave as is, a comment explaining how you got the last 3 parameters may be helpful.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55470601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55470735", "body": "@sgillies is this better or worse than `[0] * 6`?  I feel like I've seen that used more commonly in rasterio, e.g., [here](https://github.com/mapbox/rasterio/blob/master/rasterio/_base.pyx#L215)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55470735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56454412", "body": "@perrygeo this is probably a style thing, but I'm not a fan of using exceptions to determine type.  What about \n\n```\nif isinstance(res, (list, tuple)):\n    return (res[0], res[0]) if len(res) == 1 else (res[0], res[1])\nreturn ((float(res), float(res))\n```\n\nWhich then seems simple enough to just inline below, and not have a separate function here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56454412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56533828", "body": "I concede - I found a few posts that back up your claim of being more pythonic.  Not that I'm a fan of checking `isinstance` - really we should be checking to see if something can do something rather than 'is' something; which I guess we get by way of exception handling here.  One of those problems of languages that let you do the same thing a few different ways :smile: .  \n\nI guess my thinking of inlining this was that it appeared specific to handling arguments of that function, and didn't seem designed for larger use.  Seems like many times when we drop in a function at the top level in one of the python modules, we get a question about whether that is part of the public API.  Was trying to avoid that.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56533828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57270825", "body": "@perrygeo this brings in a second, escaped header that reads as \n`# Contributor Code of Conduct`\n\nAnd doesn't render the link at the end properly:\n...`[Contributor Covenant](http://contributor-covenant.org), version 1.2.0, available at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)`\n\nPerhaps converting this from a markdown to a reStructuredText file would allow proper display via Github and clean inclusion here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57270825/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57271453", "body": "@perrygeo might be nice to include a brief statement on how to get your project or use case listed here.\n\nPlease add:\n- The Conservation Biology Institute (http://consbio.org/) uses rasterio to provide geoprocessing of NetCDF files (https://github.com/consbio/clover).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57271453/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57272888", "body": "@perrygeo this doesn't render particularly well either.  Another candidate to convert to reStructuredText format?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57272888/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57272978", "body": "@perrygeo should this be 0.32.0 instead?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57272978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273118", "body": "@perrygeo should this have more to at, at least a `.. todo::` and some brief ideas, or should this file be left out at this point if it is empty?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273118/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273183", "body": "@perrygeo are the leading comments necessary or can they be removed?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273567", "body": "@perrygeo also a `.. todo::`?  I didn't see this linked from any of the other pages here; perhaps I missed something?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273902", "body": "@perrygeo how about \"General Concepts and Operations\"?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57273902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274288", "body": "@perrygeo for now, this could crosslink to some of the wiki pages: \n- https://github.com/mapbox/rasterio/wiki/Development-Guide\n- https://github.com/mapbox/rasterio/wiki/Exposing-GDAL-Functionality\n- https://github.com/mapbox/rasterio/wiki/Cython-and-GDAL\n\nThough a longer term goal of consolidating that information into the docs is a good idea.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274288/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274539", "body": "@perrygeo this seems like it should go to the end of the list (here and in the main TOC)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274539/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274634", "body": "@perrygeo  what about putting Code of Conduct first under the community section here and in TOC?  It is the one subsection not quite like the others, so first or last seems best.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274710", "body": "@perrygeo is this TODO intentional here, or can it be linked to install page now?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57274710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "vincentsarago": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1141", "title": "Error when reading a dataset with window and boundless to a buffer ", "body": "**Version:** `master (1.0a10)`\r\n\r\nWhen reading window at resolution higher native resolution `src.read` return an error.\r\n\r\n```python\r\ndata = src.read(window=window, \r\n    out_shape=(512, 512), \r\n    indexes=1,  boundless=True)\r\n\r\nValueError: could not broadcast input array from shape (515,515) into shape (512,512)\r\n```\r\n\r\nThis error wasn't present in rasterio `1.0a9`. I believe the error is happening somewhere here\r\nhttps://github.com/mapbox/rasterio/blob/6fc3ab334200920819dc2ae063c7845988bcd9fc/rasterio/_io.pyx#L336-L347\r\n\r\nThe major change I'm seing between `1.0a9` to `1.0a10` is the window overlap calculation : https://github.com/mapbox/rasterio/blob/6fc3ab334200920819dc2ae063c7845988bcd9fc/rasterio/_io.pyx#L324-L325\r\n\r\nthat could have an impact on https://github.com/mapbox/rasterio/blob/6fc3ab334200920819dc2ae063c7845988bcd9fc/rasterio/_io.pyx#L342-L344\r\n\r\nThe issue is summarized in this [notebook](https://gist.github.com/vincentsarago/e7e0ec1edf4732108c7ef27deca0a5d5)\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nickwg03": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1126", "title": "Shapes function returns invalid geometries", "body": "<!-- ## Please note\r\n\r\nRasterio contains extension modules and is thus susceptible to C library compatibility issues. If you are reporting an installation or module import issue, please note that this project only accepts reports about problems with packages downloaded from the Python Package Index. Conda users should take issues to one of the following trackers:\r\n\r\n- https://github.com/ContinuumIO/anaconda-issues/issues\r\n- https://github.com/conda-forge/fiona-feedstock -->\r\n\r\n## Expected behavior and actual behavior.\r\n\r\nI expect to convert an array to a set of polygon, but the results contain invalid geometries. In some cases, I'd think the geometries should be MultiPolygon instead of Polygon.\r\n\r\n## Steps to reproduce the problem.\r\n\r\nLoading up the supplied raster, I simply run `rasterio.features.shape` and then apply `shapely.geometry.shape` to create shapely geometries:\r\n\r\n```\r\nsrc = rasterio.open(\"subset_simple.tif\")\r\nband = src.read(1)\r\nresult = rasterio.features.shapes(band, transform=src.transform, connectivity=8)\r\nl = [shapely.geometry.shape(x[0]) for x in result]\r\n```\r\n\r\nOne of the troublesome polygons I know to be at index 203, so I load that into a geodataframe:\r\n`gdf = gpd.GeoDataFrame(geometry=[l[203]])`\r\n\r\nPlotting that polygon, it looks like this:\r\n![image](https://user-images.githubusercontent.com/4528512/29690867-f4f130d2-88e5-11e7-9910-9b82076db741.png)\r\n\r\nIf I look at the geometry in jupyter notebook, it gives me a notice that the geometry has a self-intersection:\r\n![image](https://user-images.githubusercontent.com/4528512/29690885-1325ea34-88e6-11e7-9ad1-6ffe2d44fcc1.png)\r\n\r\nMy usual go-to is to run a `.buffer(0)`, and that does make the geometry valid, but it cuts off a large part of the polygon:\r\n![image](https://user-images.githubusercontent.com/4528512/29690908-2e2cd144-88e6-11e7-8308-de5f06c73b41.png)\r\n\r\nSo I'm wondering if instead of the `shapes` function returning a Polygon, perhaps a MultiPolygon is more appropriate for this particular set of pixels and would avoid invalid geometry results.\r\n\r\nI tried re-creating this issue in QGIS, and I found that when using a connectivity of 8 in the built-in QGIS polygonize function, the resulting geometry is still invalid, but is indeed a MultiPolygon geometry type. So then, when I run the `.buffer(0)` function on the invalid geometry, it fixes the geometry and all polygons remain in the result as I was hoping.\r\n\r\nThe attached raster file can be used to re-create this problem.\r\n[subset_simple.tif.zip](https://github.com/mapbox/rasterio/files/1250365/subset_simple.tif.zip)\r\n\r\n\r\n## Operating system\r\n\r\nLinux\r\n\r\n## Rasterio version and provenance\r\n\r\n'1.0a9', installed from conda, python 3\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "choldgraf": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1120", "title": "decouple `ax` and `plt.show` for function `show`", "body": "I noticed that `plt.show` is called if `ax` is not give, and called if it is given. I think these two things should be decoupled, so allow for an `ax` parameter, and also a `show` parameter. This is more in line with other python packages and gives the user more flexibility without being too complex. Thoughts?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/2922418ac3ed0b051196341c6fa22b4052f5bcfc", "message": "importerskip"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e8a1dfa31f44940162d3a8ed314adbb69cf5bc46", "message": "fixing read imshow"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f89d164804c7e533e1ce600ead3f403bd1d23732", "message": "adjust instead of normalize"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/de03db2f4c16b5b9a4af145831311585370325e8", "message": "plot normalization"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brunorpinho": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1110", "title": "Suggestion: Straighforward method to read Subdatasets ", "body": "Subdatasets are very common in Remote Sensing data. \r\n\r\nSince I started using rasterio, I thought there was no way to read them. So, every time I needed to read Subdatasets (ASTER data for example) I used GDAL first to get the names and then rasterio to read the raster.\r\n\r\nTook me like a year of intensive rasterio usage and an eventual curiosity about `tags` to figure out that I can read Subdatasets using:\r\n\r\n```\r\nr = rasterio.open(filename)\r\nr.tags(ns='SUBDATASETS')\r\n```\r\n\r\nTo help new users, I think it would be nicer and easier to have a method like this:\r\n\r\n```\r\nr = rasterio.open(filename)\r\nr.subdatasets()\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1110/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iandees": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1096", "title": "Option to generate a single MultiPolygon for rio shapes output", "body": "Right now, running `rio shapes` generates a JSON document with multiple GeoJSON `Feature`s. It would be more useful for my purposes to generate a single MultiPolygon `Feature`.\r\n\r\nIs there a particular reason that `rio shapes` doesn't do that now, or would a patch be accepted?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "j08lue": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1076", "title": "Array-to-array resampling fails in Python 2 - long long warning?", "body": "I am trying to use `rasterio.warp.reproject` to resample data from a `ndarray` to a `ndarray` like this\r\n\r\n```python\r\nimport numpy as np\r\nimport rasterio\r\nimport rasterio.warp\r\nimport affine\r\n\r\ndef test_resample():\r\n\r\n    arr = (np.random.random((20, 30)) * 100).astype('int')\r\n    fill_value = 42\r\n    newarr = np.full((200, 300), fill_value=fill_value, dtype='int')\r\n\r\n    src_crs = {'init': 'EPSG:32632'}\r\n    src_transform = affine.Affine(600.0, 0.0, 399960.0, 0.0, -600.0, 6100020.0)\r\n    dst_transform = affine.Affine(60.0, 0.0, 399960.0, 0.0, -60.0, 6100020.0)\r\n\r\n    rasterio.warp.reproject(arr, newarr,\r\n        src_transform=src_transform,\r\n        dst_transform=dst_transform,\r\n        src_crs=src_crs,\r\n        dst_crs=src_crs,\r\n        resample=rasterio.warp.Resampling.nearest)\r\n\r\n    assert not (newarr == fill_value).all(), 'target array contains interpolated data'\r\n````\r\n\r\nIt works like a charm in Python 3, but in Python 2, it seems like no data is written to the `destination` array, as shown in [this notebook](https://gist.github.com/j08lue/f577d557dfd63d4af5db562f5abcfee4).\r\n\r\nAlso only in Python 2, I get the warning\r\n```\r\nException ValueError: \"Buffer dtype mismatch, expected 'long' but got 'long long'\" in 'rasterio._io.io_auto' ignored\r\n```\r\n\r\nMy assumption is that the same issue that causes the warning also means that the reference to the `destination` array is lost and the data is written to some copy of it instead.\r\n\r\nI know Python 3 merged `long` and `int`, so that is why the warning disappears. But is that also the reason why the `reproject` function works? \r\n\r\nBy the way, I get the warning / issue for any dtype I use, so it cannot be related to the `source` / `destination` arrays.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/927cae58e3c25150b73d3a3549c5b163c404fb33", "message": "Merge branch 'master' into naming"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/f4f1740f944e0cdaac6f8ae3da2fc6a860b97cfd", "message": "opened in 'r' mode"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7ab07aecf3b7184bebe9301b09c1f4e82b2078e8", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/57ed398ab86ccd74a50e6de7bcf21ea6bc837a65", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/9548a6beb5416ee32210d3d9b57ad22c905000f4", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/849e3e1b2973773ad8efad8f6a41333986067d9b", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/839123f3edc2253d437a1c117d01f5470f47f282", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/15837f4c6e19b2c74d3f4ea471305832c8eba823", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b74581f5571590461012d4ce35b739a00bf16061", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/666176c4fb9c297ac79975cdef8d056656e3a75f", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/de666ff5887e5ffb1d70860d7540856f8128889b", "message": "DatasetReader -> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/bb8c6c3f3ba4dd0b24b9f95153c4b1071a73bd47", "message": "test for 2D shape with indexes=int"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/fe95078e27aa78622fc26101265c55831dffc09d", "message": "omit band dimension for indexes=int"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0cb153374a8ab505c3b9601a65cb1020a1235908", "message": "fix out_shape"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d856d46e61ee5be336b27f94ff93b2dbe5182a2b", "message": "add indexes parameter to rasterio.mask.mask"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1cf54c10e4c4c5573961ee9bd308a2f4e57b27b3", "message": "same docstrings about multi-type source"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/89b66d12977b279021eee4dde3c6d9202af842d5", "message": "image --> source"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/6dde6b2b525f32fb7723453585b57c48b22e0724", "message": "same multi-source type description"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/b1b93f9b3df5e07523dd24d2cf5894e2374561ec", "message": "source --> source_path"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/30a64f132f6bd621379d0eac2e181bef699767eb", "message": "source --> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/81fc732be069e9a56f954d552e8496f53ee0027b", "message": "sources --> datasets"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/d50efc7da6da944e1d84776121e1c4e8d16ef473", "message": "sources --> datasets"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/2322fb30f3f46922c289bda9e246981c1811ea6d", "message": "RasterReader --> DatasetReader"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4ad1b23428a920670ed54cc7c19ec66ad74e1328", "message": "'sources"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/7b4762831f6955df1821f8f51bac802e8974bf6c", "message": "RasterReader --> DatasetReader"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/4018bed9481afa0468014cc71c5a3bed17612f74", "message": "raster --> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3688aebcdb6ac39bb60b2d8a5e41863b1e6154fa", "message": "RasterReader --> DatasetReader"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/33f64dce0572322922fa7407f0edd3bd8638773a", "message": "src --> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/1c2de859e4157a66baae62c7054cabcab7b60e92", "message": "RasterReader --> DatasetReader"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/04c3bc5eeb0fe3667822b357623ccd097a4181de", "message": "raster --> dataset"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/99773efe7f1f9b69d0c84b46c03ca35afcae63ac", "message": "lave out --unset-nodata to make work with GDAL < 2.1"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/76bff922ef24f8349e7859c423a2b3f3f7694a72", "message": "be extra sure"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3db0949f4d74c7e5982cf4f30d4b7a140e45e029", "message": "add test for rio edit-info --nodata NaN"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/96360461926cfdd7cc83a47374fd0ba62db34844", "message": "edit-info support --nodata NaN"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/16644769a233511df8355314683b51328b3fb405", "message": "remove nodata=None float automagic"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/3d97b66f804c11b1c2247a49c11b48157606b571", "message": "treat nodata=None and np.nan in data"}], "pull_requests": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/1235", "title": "WIP:add indexes / bidx parameter to merge", "body": "Sorry for bombarding you with PRs... \r\n\r\nThis one adds the `indexes` parameter to `rasterio.merge.merge`, equivalent to the PR you just merged for `rasterio.mask.mask` (#1225).\r\n\r\nI also added the functionality to `rio merge` as a `--bidx` parameter.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/1226", "title": "WIP:use non-square test image", "body": "I have a suspicion that `raster_geometry_mask` with `crop=True` is returning a square image even though the inputs should give a rectangular image.\r\n\r\nIt is only a suspicion yet, but we would not catch this error with our current tests, because we are always using a square input image. \r\n\r\nI think it would be better to use a non-square test image to maybe also detect inconsistencies as discussed in https://github.com/mapbox/rasterio/issues/525 (have not yet checked whether they use this image).\r\n\r\nNB: This PR is only for investigating which tests fail when I just deform the test image.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apiszcz": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1052", "title": "MemoryFile Error?", "body": "I'm guessing this is my issue, however both datasets are compressed, however i'm getting the following\r\n\r\n```\r\ndsa, dst = self.merge_sum([dsm, dsc])\r\n(Pdb) dsm.profile\r\n{'count': 1, 'tiled': True, 'blockxsize': 256, 'compress': 'lzw', ...}\r\n(Pdb) dsc.profile\r\n{'count': 1, 'tiled': True, 'blockxsize': 256, 'compress': 'lzw', '...}\r\n(Pdb) n\r\nERROR 1: LZWDecode:Corrupted LZW table at scanline 0\r\nERROR 1: TIFFReadEncodedTile() failed.\r\nERROR 1: /vsimem/5c906ebb-a413-42b8-aac4-cd8b8bb6a83d., band 1: IReadBlock failed at X offset 0, Y offset 0\r\nERROR 1: GetBlockRef failed at X block offset 0, Y block offset 0\r\nOSError: Read or write failed\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1051", "title": "Documentation Example MemoryFile", "body": "I reviewed an earlier [post ](https://github.com/mapbox/rasterio/issues/839) from you but was thinking an even simpler example may be of useful\r\n\r\n\r\n```\r\n# get sample data set\r\nds=rio.open(r'testa.tif')\r\nb1=ds.read()\r\nprofile=ds.profile\r\n\r\n# store dataset to memory\r\nwith MemoryFile() as mem:\r\n    with mem.open(**profile) as dst:\r\n        dst.write(b1)\r\n\r\n    # write memory to disk\r\n    with open('memfile.tif','wb') as g:\r\n        mem.seek(0)\r\n        g.write(mem.read())\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1051/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mangecoeur": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1040", "title": "Unhelpful error message 'an integer is required' when writing ndarray of int", "body": "I was getting this error message:\r\n\r\n```\r\n  File \"~/miniconda3/envs/lancet/lib/python3.6/site-packages/rasterio/__init__.py\", line 282, in open\r\n    s.start()\r\n  File \"rasterio/_io.pyx\", line 1003, in rasterio._io.DatasetWriterBase.start (rasterio/_io.c:17937)\r\n  File \"rasterio/_io.pyx\", line 999, in rasterio._io.DatasetWriterBase.start (rasterio/_io.c:17845)\r\nTypeError: an integer is required\r\n```\r\n\r\nwhen trying to write an array of integers to GTiff - to make it work i needed to convert the array to`float`, so the error message seems wrong.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1016", "title": "Support for Path protocol", "body": "It would be nice to have support for the new Path object/path protocol in Python 3.5+, saves always casting to strings.\r\n\r\n[v 1.0a8, maxOS]", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "perrygeo": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1034", "title": "empty CRS inequality depends on Python version", "body": "In python 2.7, comparing two empty CRS for equality *or* inequality returns False\r\n```\u2b46 python\r\nPython 2.7.10 (default, Jul 14 2015, 19:46:27)\r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from rasterio.crs import CRS\r\n>>> CRS({}) != CRS({})\r\nFalse\r\n>>> CRS({}) == CRS({})\r\nFalse\r\n>>> import rasterio\r\n>>> rasterio.__version__\r\n'1.0a8'\r\n```\r\n\r\nIn python 3.6,  the inequality comparison returns True\r\n```\r\n\u2b46 python\r\nPython 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)\r\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from rasterio.crs import CRS\r\n>>> CRS({}) != CRS({})\r\nTrue\r\n>>> CRS({}) == CRS({})\r\nFalse\r\n>>> import rasterio\r\n>>> rasterio.__version__\r\n'1.0a8'\r\n```", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/980", "title": "rio overview option to create external .ovr", "body": "For cases when you want to leave the input file untouched, using an external `.ovr` file is handy.\r\n\r\nFor GeoTIFF, this would mean turning on the `TIFF_USE_OVR` GDAL environment variable.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/980/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/940", "title": "rio warp should determine if we need CHECK_WITH_INVERT_PROJ", "body": "Rio warp currently defaults to `--check-invert-proj`. You can turn it off with `--no-check-invert-proj`. But it would be nice to default to a third option: run a quick test (per [gdalwarp's logic](https://github.com/OSGeo/gdal/blob/ba920209a2443b5a8492a23c16dd67fd53114c66/gdal/apps/gdalwarp_lib.cpp#L1840)) to determine the best value for the given dataset.\r\n\r\nIn terms of click options, we could implement this using flag values (hat tip @sgillies )\r\n\r\n```\r\n@click.option('--check-invert-proj', 'check_invert_proj', flag_value=True)\r\n@click.option('--no-check-invert-proj', 'check_invert_proj', flag_value=False)\r\n@click.option(--maybe-check-invert-proj', 'check_invert_proj', flag_value=None, default=True)\r\n# ^ means that this flag value is the default, not that the default flag value is True\r\n```\r\n\r\nthen run the gdalwarp heuristic `if check_invert_proj is None`\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/909", "title": "Make rasterio.profiles.Profile json-encodable", "body": "Two blockers to json encoding the Rasterio profile. First, the type itself is not serializable. \n\n```\n$ rio insp --ipython test.tif\n\nIn [1]: type(src.profile)\nOut[1]: rasterio.profiles.Profile\n\nIn [2]: import json\n\nIn [3]: json.dumps(src.profile)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n...\nTypeError: {'transform': Affine(1.0, 0.0, 0.0,\n       0.0, 1.0, 0.0), 'driver': 'GTiff', 'height': 2624, 'crs': CRS({}), 'interleave': 'pixel', 'dtype': 'uint16', 'tiled': False, 'count': 3, 'width': 2581, 'nodata': None} is not JSON serializable\n```\n\nYou can convert to a `dict` but the CRS object is also not serializable.\n\n```\nIn [4]: json.dumps(dict(src.profile))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n...\nTypeError: CRS({}) is not JSON serializable\n```\n\nEverything else seems to work...\n\n```\nIn [5]: json.dumps(dict({k:v for k, v in src.profile.items() if k != 'crs'}))\nOut[5]: '{\"transform\": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], \"driver\": \"GTiff\", \"height\": 2624, \"interleave\": \"pixel\", \"dtype\": \"uint16\", \"tiled\": false, \"count\": 3, \"width\": 2581, \"nodata\": null}'\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/877", "title": "windows functions as methods on Windows object", "body": "For interactive use, exposing the `rasterio.windows` functions as methods on the Windows object might aid in discoverability and ease of use in the REPL/notebook. (Similar to how `numpy.sum(x)` can be accessed via `x.sum()`)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/855", "title": "rio commands to store arguments in metadata tags", "body": "_Warning: this is a half-formed idea but might be worth thinking through_\n\nWhen we run `rio` commands which output a new raster file, it would be useful to encode the command in the output's metadata somehow. Let's say you run\n\n```\nrio clip input.tif output.tif --bounds 0 0 100 100\n```\n\nThe geotiff tags, for instance, could give you a hint as to the origin of the file\n\n```\n>>> with rasterio.open(\"output.tif\") as src:\n...       src.tags()\n{'rio-clip': ' input.tif output.tif --bounds 0 0 100 100'}\n```\n\nEspecially useful if we could somehow make this functionality available to rio plugins as well.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/824", "title": "Skip network-dependent tests if no connection", "body": "Not a high priority but it would help in some cases like working on an airplane with ridiculously over-priced wifi\n\n```\ntests/test_env.py::test_s3_open_with_session FAILED\ntests/test_env.py::test_s3_open_with_default_session FAILED\ntests/test_env.py::test_open_https_vsicurl FAILED\ntests/test_env.py::test_s3_rio_info FAILED\ntests/test_env.py::test_https_rio_info FAILED\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/815", "title": "rio warp could calculate resolution if not specified", "body": "Trying to warp `a.tif` to the crs and bounds of `b.tif` but with the resolution (adjusted for change in projection) of the original. You can specify the `--dst-crs` and `--bounds` directly but that **requires an explicit resolution** - We could potentially employ `calculate_default_transform` to calculate the resolution from the source rather than raising an error.\n\n```\n$ rio warp \\\n    --dst-crs $(rio info --crs b.tif) \\\n    --bounds $(rio info --bounds b.tif)  a.tif c.tif\nUsage: rio warp [OPTIONS] INPUTS... OUTPUT\n\nError: Invalid value for res: Required when using --bounds.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/815/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/792", "title": "Reporting compression", "body": "You can compress a geotiff to a valid compression scheme like `LZW` or `JPEG`\n\n```\n$ rio convert --co compress=JPEG tests/data/RGB.byte.tif  /tmp/rgb-jpeg.tif\n$ rio info /tmp/rgb-jpeg.tif  | jq .compress\n\"jpeg\"\n```\n\nAnd you can set unset compression using `none`\n\n```\n$ rio convert --co compress=none /tmp/rgb-jpeg.tif /tmp/rgb-none.tif\n$ rio info /tmp/rgb-none.tif  | jq .compress\n\"none\"\n```\n\nBut two strange things happen here:\n-  The reporting of uncompressed tiffs depends on it's lineage. IOW both the original and the final output are uncompressed GeoTiffs of the same size and block layout but\n\n```\n$ rio info tests/data/RGB.byte.tif  | jq .compress\nnull\n$ rio info /tmp/rgb-none.tif | jq .compress\n\"none\"\n```\n-  Providing unsupported compression arguments passes silently (effectively defaulting to `compress=none`) yet the invalid value gets stored in the metadata\n\n```\n$ rio convert --co compress=false /tmp/rgb-jpeg.tif /tmp/rgb-false.tif\nWARNING:rasterio._gdal:CPLE_NotSupported in b\"'FALSE' is an unexpected value for COMPRESS creation option of type string-select.\"\nWARNING:rasterio._gdal:CPLE_IllegalArg in b'COMPRESS=FALSE value not recognised, ignoring.'\n$ rio info /tmp/rgb-false.tif | jq .compress\n\"false\"\n```\n\ncc @isiyu \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/785", "title": "gdalplugins can interfere with osx binary wheels", "body": "Currently, installing rasterio on OSX comes bundled with GDAL 2.1. If you have a system with gdal plugins built for GDAL 1.11, those plugins still get picked up, causing errors like:\n\n```\nERROR 1: dlopen(/usr/local/lib/gdalplugins/gdal_ECW_JP2ECW.dylib, 1): Symbol not found: __ZN14GDALRasterBand23GetRasterSampleOverviewEi\n  Referenced from: /usr/local/lib/gdalplugins/gdal_ECW_JP2ECW.dylib\n  Expected in: flat namespace\n in /usr/local/lib/gdalplugins/gdal_ECW_JP2ECW.dylib\nERROR 1: ECW driver was compiled against GDAL 1.11 but current library version is 2.1\n```\n\nSee https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DRIVER_PATH\n\ncc @sgillies @virginiayung \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/784", "title": "move rio warp logic to warp tool", "body": "As we did with `rio merge`, we should move the logic to a separate function (`warp_tool`?) and keep the cli function all about parsing arguments. Function signature TBD\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/783", "title": "usage of bands function in rio calc", "body": "Noticed as I was going through test coverage, we never actually test the rio calc `bands` function. It's not in the docstring or the documentation. I can't get it to work directly:\n\n```\n$ rio calc \"(bands 0)\" tests/data/shade.tif /tmp/out.tif\n...\nAttributeError: 'list' object has no attribute 'shape'\n```\n\nSo I'm unclear about the purpose of bands - is it just an internal function? Why is it exposed to the CLI? And how is it meant to be used versus `take` and `read`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/781", "title": "internal masks cannot be written by window", "body": "When using an internal masked GeoTiff, writing with window does not appear to be supported.\n\n```\n    def test_create_mask_windowed_internal(data):\n        \"\"\"Writing masks by window with internal mask\n        \"\"\"\n        with rasterio.Env(GDAL_TIFF_INTERNAL_MASK=True):\n            with rasterio.open(str(data.join('RGB.byte.tif')), 'r+') as dst:\n                for ij, window in dst.block_windows():\n                    blue = dst.read(1, window=window, masked=False)\n                    mask = 255 * (blue == 0).astype('uint8')\n>                   dst.write_mask(mask, window=window)\n\ntests/test_mask_creation.py:73:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>   raise RasterioIOError(\"Failed to get mask.\")\nE   rasterio.errors.RasterioIOError: Failed to get mask.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/726", "title": "read_masks segfault", "body": "I haven't narrowed down the cause but here's what I know so far...\n\nI've got a 3-band jpeg-in-tiff, ycbcr color, with an external mask (a sidecar .msk)\n\n```\n$ rio info /tmp/landsat/00007-LC80390362015173LGN00-rgb.tif\n{\"count\": 3, \"crs\": \"EPSG:32611\", \"photometric\": \"ycbcr\", \"res\": [30.0, 30.0], \"interleave\": \"pixel\", \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [30.0, 0.0, 550485.0, 0.0, -30.0, 3947115.0], \"lnglat\": [-115.20434232352154, 34.604945525525444], \"height\": 7761, \"width\": 7611, \"shape\": [7761, 7611], \"blockxsize\": 512, \"tiled\": true, \"blockysize\": 512, \"jpeg_quality\": \"75\", \"nodata\": null, \"bounds\": [550485.0, 3714285.0, 778815.0, 3947115.0], \"compress\": \"jpeg\"}\n```\n\nAny call to `read_masks` causes a segfault\n\n```\n$ rio insp /tmp/landsat/00007-LC80390362015173LGN00-rgb.tif\nRasterio 0.35.1 Interactive Inspector (Python 2.7.10)\nType \"src.meta\", \"src.read(1)\", or \"help(src)\" for more information.\n>>> src\n<open RasterReader name='/tmp/landsat/00007-LC80390362015173LGN00-rgb.tif' mode='r'>\n>>> arr = src.read()\n>>> masks = src.read_masks()\nSegmentation fault: 11\n```\n\nDatasets for download:\n- https://mapbox.s3.amazonaws.com/playground/perrygeo/mask_segfault/00007-LC80390362015173LGN00-rgb.tif\n- https://mapbox.s3.amazonaws.com/playground/perrygeo/mask_segfault/00007-LC80390362015173LGN00-rgb.tif.msk\n\nMy environment:\nosx, py27, rasterio via pypi wheel (`rasterio-0.35.1-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl`)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/672", "title": "adjusting the IO/memory tradeoff", "body": "This is a brainstorm on how we can support a more flexible model of trading IO for memory. I'm looking for input from people who have worked on this problem or have an interest in solving it. \n\n**Problem**\nRight now, rasterio allows you to read the entire raster into memory as a numpy array and write the entire thing out again. Memory intensive but all the IO happens at once\n\n```\nwith rasterio.open(\"big.tif\") as src:\n    with rasterio.open(\"big2.tif\", 'w', **src.profile) as dst:\n        dst.write(src.read())\n```\n\nIf you want to save memory, you can use the dataset's **block windows** which keeps the memory profile low but potentially involves many more IO operations\n\n```\nwith rasterio.open(\"big.tif\") as src:\n    with rasterio.open(\"big2.tif\", 'w', **src.profile) as dst:\n        for _, window in src.block_windows():\n            dst.write(src.read(window=window), window=window)\n```\n\nLet's say that `big.tif` is a `10240x10240` tif with `256x256` blocksize tiles for a total of `1600` internal tiles. The options are\n- 1 read, 1 write, big memory footprint\n- 1600 reads, 1600 writes, small memory footprint\n- make your own custom iteration strategy (which might not align well with the blocks on disk)\n\n**How can we provide an easy way for the user to adjust this IO/memory tradeoff?**\n\nThinking out loud here: what about an easy way to union block windows in a way that was IO optimized? That would allow us to, e.g., iterate over 16 reads/writes and still have a moderate memory footprint.\n\nJust spitballing an API here:\n\n```\nwith rasterio.open(\"big.tif\") as src:\n    with rasterio.open(\"big2.tif\", 'w', **src.profile) as dst:\n        for _, window in src.aggregated_windows(reads=16):\n            dst.write(src.read(window=window), window=window)\n```\n\nHas anyone tried anything like this?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/614", "title": "certain resampling methods fail when CHECK_WITH_INVERT_PROJ is False", "body": "```\nwith rasterio.drivers(CHECK_WITH_INVERT_PROJ=False):\n    ...\n    # works\n    reproject(..., resampling=Resampling.nearest)\n\n    # succeeds but produces blank image\n    reproject(..., resampling=Resampling.bilinear)\n```\n\nIf `CHECK_WITH_INVERT_PROJ=True`, both nearest and bilinear work fine.\n\nRelated discussion about making invert proj checking the default #613\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/596", "title": "rio mask --alpha option", "body": "For some use cases, lossy images in particular, it makes sense to retain the underlying pixel values but use an alpha band to set transparency masks.\n\n An `--alpha` option could take RGB/RGBA rasters and produce a 4 band RGBA image with the Alpha band defined by the input feature. Possible also to do an `--inplace` option that would just overwrite the alpha band of the source if an RGBA already.\n\ncc @dnomadb \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/579", "title": "densify option for rio bounds", "body": "`rio bounds` currently uses densification to calculate proper bounds in different crs. But the returned feature is just a 4 corner polygon. \n\nWe might want a `--densify` option to retain the shape of the densified, reprojected bounds. This could be useful for gathering more precise bounds from rasters in a variety of projections. \n\nTo implement, we need something like a `warp.transform_bounds` function but one that returns a valid polygon coordinate array (in proper winding order), not a bounds array. Then in the `bounds` command, we'd need to conditionally accommodate polygons instead of just bounds.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/547", "title": "Use epsilon with ceiling/floor operations", "body": "Numerous calcs in rasterio rely on ceiling/floor, mainly to round to even integer raster dimensions. Floating point imprecision can cause some unexpected behavior\n\n```\n>>> import math\n>>> minx = -106.45036\n>>> maxx = -106.44136\n>>> res = 0.001\n>>> math.ceil((maxx - minx) / res)\n10.0\n>>> math.ceil(((maxx - minx) / res) - 1e-10)  # use epsilon\n9.0\n```\n\nWe already use it in [_base.get_index](https://github.com/mapbox/rasterio/blob/fb93a6425c17f25141ad308cee7263d0c491a0a9/rasterio/_base.pyx#L763-L795) but it might be worth doing a sweep of the code and finding other cases where floating points could cause off-by-one problems.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/546", "title": "Can rasterio leverage any of the GDAL 2.1 utilities libraries?", "body": "https://trac.osgeo.org/gdal/wiki/rfc59.1_utilities_as_a_library\n\nGDAL 2.1 will expose many of the utilities as C callable functions. Wondering if there is anything in here that we could use in rasterio?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/498", "title": "rio calc: dtype for named rasters", "body": "Doing calcs on int grids can lead to some strange behavior if the data overflows. It's perfectly fine to use the 3 arg `read` to specify the `dtype`\n\n```\nrio calc --dtype float32 \\\n    \"(/ (- (read 2 1 'int32') (read 1 1 'int32')) (+ (read 2 1 'int32') (read 1 1 'int32')))\" \\\n    LC80010522014288LGN00_B4.TIF LC80010522014288LGN00_B5.TIF \\\n    ndvi.tif\n```\n\nBut I couldn't find an obvious way to do it with named rasters. For instance, it might be more clear to express the calculation like so\n\n```\nrio calc --dtype float32 \\\n    \"(/ (- nir red) (+ nir red)\" \\\n    --name \"red=LC80010522014288LGN00_B4.TIF\" \\\n    --name \"nir=LC80010522014288LGN00_B5.TIF\" \\\n    ndvi.tif\n```\n\n _if_ there was a way to specify `red` and `nir` should be cast to int32 arrays before calculation.\n\nI suppose the same could apply to non-named arrays as well - IOW a general way to specify the input dtype for each raster at the command line. Maybe `--input_dtypes` ? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/779bad70c43ebf79845b495772e25aee3abe5df2", "message": "catch only CPLE_BaseError"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/2e22ca9263e9116eaa1176debdc33c5bfaf46552", "message": "only create mask if per_dataset mask doesn't exist yet"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ba93333b916bd134b80b5db794a0fe035dc03376", "message": "Merge pull request #1117 from mapbox/make-it\n\nMakefile"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/78348e1d01aaf5062e0366104131639cab8332db", "message": "initial Makefile"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54220089", "body": "For the benefit of future google searches, this is the error:\n\n```\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-13-a716cdec5847> in <module>()\n      3 image = features.rasterize(\n      4             ((feat.geom, feat.cropval) for i, feat in df.iterrows()),\n----> 5             out_shape=(600,600))\n\n/home/mperry/env/geopandas/lib/python2.7/site-packages/rasterio/features.py in rasterize(shapes, out_shape, fill, output, transform, all_touched)\n     87                 raise ValueError(\n     88                     \"Shape number %i, value '%s' is not uint8/ubyte\" % (\n---> 89                         index, value))\n     90             geoms.append((geometry, value))\n     91         else:\n\nValueError: Shape number 0, value '0.0' is not uint8/ubyte\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54220089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54323022", "body": "@sgillies - re: the dtype in `shapes()`, the case of \"each pixel is a polygon\" could certainly happen if you supplied a continuous value float. But that's up to the user IMO. A more common workflow would be to classify the continuous values into discrete categories resulting in a UInt8/UInt16 array then run `shapes()` on that. But we'd still want support for other data types, at least UInt16.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54323022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54506828", "body": "That sounds great, very flexible but with intelligent defaults. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54506828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44346795", "body": "I wonder if there a more efficient way to test cast safety without making a copy and doing an element-wise comparison? I've never used it but http://docs.scipy.org/doc/numpy/reference/generated/numpy.can_cast.html looks like it might do what we need here.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44346795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44348646", "body": "Ah the dreaded upside-down raster. You must be working with NetCDFs too much :smile: \n\nI'm +0 on including this in the PR.  Great idea but I'd rather see this logic centralized into the base classes or a util function rather than implemented everywhere we needed to work with bounds. \n\nHandling inverted rasters (or a upside-down or whatever we call it) is a bigger issue that we need to look at across the entire code base. I did some ad hoc support in `rasterstats` and felt like something that would be better addressed in rasterio core. But I haven't take the time to do a full review of what that might take.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44348646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44414742", "body": "bummer. Well let's stick to this method for now but keep an eye out for more efficient ways (possibly test array.min and array.max ?)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44414742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44414872", "body": "Yeah let's remove it for now and tackle the inverted raster issue in a different PR.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/44414872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/47955420", "body": "No reason, i just arrived at the solution through additive math and left it at that. negation is more clear though.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/47955420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49885158", "body": "Definitely a good fix for now. I wonder if we should consider an option like gdalwarp's `-te_srs` to define the srs of the bounds. Example use case: reprojecting from utm to mercator but only know the desired bounds in latlong.  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49885158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49947405", "body": " Currently the help text states \"Bounds are in the source coordinate reference system.\" Switching this to assume destination is a breaking change - any implications to this?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/49947405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50317874", "body": "That'd be what - an 80GB in-memory raster with a single uint8 band? I think it's safe to say most rasterio users will never hit that limit :-)\n\nBut how do we future proof this? Could we estimate the max size based on the available system memory?\n\nBigger picture there are other cases like a [boundless read with the wrong crs](https://github.com/perrygeo/python-rasterstats/issues/107#issuecomment-166985520) that can cause ridiculous sized  numpy arrays or in-memory rasters. Do we want to do more at the _base level to gaurd against these cases?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/50317874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55529572", "body": "Since we're just casting geotransform into a python list, we can remove 537-539 and replace with something like\n\n```\nt = [geotransform[i] for i in range(6)]\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55529572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55530389", "body": "Maybe add a comment that the geotransform, npixels and nlines are expected to be mutated by the function. That's one of the tricker parts for Python programmers to grok about the GDAL C API. \n\n`npixels` and `nlines` are passed by reference but it's not obvious that geotransform will change. Can you pass arrays by reference is Cython to be explicit? Probably just a comment would be sufficient. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55530389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55530967", "body": "Can you elaborate a bit more on this comment. What's the side effect here? Is the idea to throw an exception if invalid?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55530967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55532505", "body": "@brendan-ward They both do the same thing but It looks like [GDALCreateGenImgProjTransformer2](http://www.gdal.org/gdal__alg_8h.html#a94cd172f78dbc41d6f407d662914f2e3]) just takes options which provide a lot more fine-grained control. In particular, it looks like Transformer2 is required if we want to pursue GCPs, #203. If we need or anticipate needing any of those options, we should move to GDALCreateGenImgProjTransformer2 but Transformer does the same job for now.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55532505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55533267", "body": "Do we need `densify_pts` and `resolution` here? Should we remove these kwarg since the suggested warp output has it's own mechanism for adjusting bounds/res?\n\nSeems like if users are going to specify output `--res` we need to deal with it in the python wrapper function, taking guidance from gdalwarp. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55533267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55534833", "body": "Why the change now? Were we catching warnings as failures before? And can we use the GDALError enum below?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55534833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56518559", "body": "Duck typing and \"Ask for forgiveness, not permission\" tend to be the python way of handling these cases. But if try/except feels funky, we could just test for its iterable-ness.\n\n```\n>>> import collections\n>>> isinstance([12, 13], collections.Iterable)\nTrue\n```\n\nIn terms of inlining the logic, I think I'd prefer to keep it separate. Big picture, I think we should aim to separate out the argument handling from our algorithms. It tends to make both easier to test and understand.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56518559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56534989", "body": "Just plopping the function at the top level is kinda sloppy, confuses the public API for sure. I'll fix that, either inline or putting it in the right place :+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/56534989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57356576", "body": "Should we go ahead and add the new vsi error messages here as well?\n\nhttps://github.com/mapbox/rasterio/pull/591/files#diff-e13898fc6e575b9f0ed53e5d98208410R81\n\nThis would effectively close #591 as well\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57356576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57439823", "body": "@sgillies with GDAL 2.1-dev, `test_io_error` is failing for me.\n\n```\n-> assert msg.startswith(\"'{0}'\".format(tmpdir.join('foo.tif')))\n(Pdb++) msg\nu'No such file or directory'\n(Pdb++) \"'{0}'\".format(tmpdir.join('foo.tif'))\n\"'/private/var/folders/c3/sjz4d98x1qvg040bty83_8940000gn/T/pytest-of-mperry/pytest-150/test_io_error0/foo.tif'\"\n```\n\nIt works when compiling against my homebrewed GDAL 1.11.3.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57439823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57440763", "body": "Why the try/except:raise here (and a few other places)? What would happen if we just used the `CPLErrors` context manager?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57440763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57441326", "body": "- In what cases do we raise raw `CPLE_*` exceptions versus wrapped in e.g. `RasterioIOError`?\n- In some cases we have some cleanup/destroy calls and others we don't. What can we do to make sure we're not missing any potential memory leaks? To be cautious, maybe a comment is necessary to explain why we're _not_ doing any cleanup.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57441326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57441357", "body": "Why not use `CPLErrors` context manager here?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57441357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57441563", "body": "s/raise/check ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57441563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57442137", "body": "should we exit 1?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57442137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57176348", "body": "This is related to https://trac.osgeo.org/gdal/ticket/6420.\n\nWhen you're on the AWS infrastructure with S3 permissions granted to the machine via IAM roles, there is no config file or env vars holding these credentials. When you're on an EC2, the awscli seems to be able to perform [an extra network request](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html) to get that info from the instance metadata.\n\nIf we could emulate the awscli logic here, we _could_ bypass that limitation in gdal. The real question is: does this belong in GDAL or rasterio aws session?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57176348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57203180", "body": "@sgillies  I wonder if using `CPLSetConfigOption` instead of `CPLSetThreadLocalConfigOption` might solve #599 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57203180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57307328", "body": "Starting with the code of conduct seems a little in-your-face ... but it is awkward in the middle so I'll scoot it to the end.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57307328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57308666", "body": "+1 I'll set this automatically ala https://github.com/mapbox/rasterio/blob/master/setup.py#L53  -\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57308666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57309263", "body": "just sphinx cruft, removed\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57309263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57309339", "body": "Oh yeah, missed that one. The intention was for the intro to go in `index` before the table of contents. I'll remove this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57309339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57399087", "body": "@jdmcbr `.rst` format would be best . In terms of the content, I was thinking bite sized pieces of code (like ~40 lines) for doing discrete chunks of work with rasterio. Not complete workflows but little snippets that are generally useful templates for common tasks. Showing integration with other packages is great but the focus should be rasterio usage. \n\nI'm picturing something along the lines fof https://pcjericks.github.io/py-gdalogr-cookbook/raster_layers.html - but without  osgeo.gdal\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57399087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58880208", "body": "Can we :scissors: the debug prints?\n\nOtherwise, this looks :100: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58880208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58882217", "body": "@geowurster I could go either way. `CRSError` seems more specific so I'm tempted to go with that.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58882217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58959828", "body": "Maybe a comment here about that this is creating a green image / setting the green band to 160 \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58959828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58959924", "body": "Hehe. Time to turn on vim spellcheck :-) Thanks\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58959924/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64062672", "body": "I'm not sure that would work - if you requested `indexes=[1, 2, 3]`  on a 4 band RGBA dataset, I'm not even sure what the result should be in that case. I think the advantage of this method is that it abstracts all the band-level details to a single dataset mask and `indexes` might confuse that distinction. IOW it could be said that the purpose of `dataset_mask` is to determine the mask indexes for the user.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64062672/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64062941", "body": "\ud83d\udc4d  I was trying to get fancy by requiring that parameters be specified as kwargs. Not necessary so I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/64062941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "AlisterH": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/1028", "title": "Windows installation instructions could be more helpful", "body": "The instructions in the readme for installing on windows say this:\r\n\r\n> To install rasterio, simply download both binaries for your system (rasterio and GDAL) and run something like this from the downloads folder:\r\n> \r\n> $ pip install -U pip\r\n> $ pip install GDAL-2.0.2-cp27-none-win32.whl\r\n> $ pip install rasterio-0.34.0-cp27-cp27m-win32.whl\r\n\r\nIt would be helpful to point out that that the \"cp27\" means python 2.7 (not sure what the m is), to help people figure out which version they need.\r\n\r\nRegards.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/1028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "malramsay64": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/999", "title": "Path handling inconsistency", "body": "There is inconsistency amongst the commands with regards to the handling of files using the http, https and s3 protocols. For example:\r\n`rio info s3://landsat-pds.s3.amazonaws.com/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF`\r\nworks completely fine while;\r\n`rio mask s3://landsat-pds.s3.amazonaws.com/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF out.tif`\r\ngives a `FileNotFoundError` with a path of '/home/ubuntu/s3:/landsat-pds.s3.amazonaws.com/L8/139/045/LC81390452014295LGN00/LC81390452014295LGN00_B1.TIF`\r\n\r\nThe difference is in the click file handling. For single input files the handling in done in the rasterio code \r\n`file_in_arg = click.argument('INPUT', callback=file_in_handler)`\r\nwhile the `file_inout_arg` is dealt with in the cligj codebase which doesn't have the file_in_handler callback. ", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danilobellini": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/955", "title": "Keeping the color interpretation information \"as is\"", "body": "I'm trying to do some processing on some data, but as it seems some information is lost even when I'm not doing anything but saving what I've loaded:\r\n\r\n```python\r\nimport rasterio\r\nwith rasterio.open(\"input.tif\") as src:\r\n    with rasterio.open(\"output.tif\", \"w\", **src.profile) as dest:\r\n        dest.write(src.read())\r\n```\r\n\r\nThe color interpretation isn't the same:\r\n\r\n```shell\r\n$ rio info input.tif | jq .colorinterp\r\n[\r\n  \"red\",\r\n  \"green\",\r\n  \"blue\",\r\n  \"undefined\"\r\n]\r\n$ rio info output.tif | jq .colorinterp\r\n[\r\n  \"gray\",\r\n  \"undefined\",\r\n  \"undefined\",\r\n  \"undefined\"\r\n]\r\n```\r\n\r\nEverything else seem ok:\r\n\r\n```diff\r\n$ rio info input.tif | jq . > input.json\r\n$ rio info output.tif | jq . > output.json\r\n$ diff input.json output.json\r\n33,35c33,35\r\n<     \"red\",\r\n<     \"green\",\r\n<     \"blue\",\r\n---\r\n>     \"gray\",\r\n>     \"undefined\",\r\n>     \"undefined\",\r\n```\r\n\r\nIn that input, `src.photometric` is `None`. Is there any reasonable way to keep the color interpretation from the input in the output in a way that makes the `rio info` result identical for both the input and the output?", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "v0lat1le": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/859", "title": "Unable to set/override CRS and GeoTransform in open datasets", "body": "I'm opening a datasets that has no CRS/GeoTransform defined internally, but I have those stored as extra metadata alongside the dataset and would like to set them after I open the dataset. The ultimate goal is to use `warp.reproject` on the dataset.\n\nIt looks like `DatasetWriterBase` already has `write_transform` and `set_crs` which appear to do exactly what I need. Any reason these are not in `DatasetBase`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rasmuse": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/853", "title": "rio warp paints a wide black band on part of the output", "body": "Hi, and thanks for great software.\n\nI'm running Ubuntu 16.04. rasterio is installed with `conda create -n myvirtualenv python=2` and then `conda install rasterio`. So it's the conda-packaged GDAL behind it.\n\n``` bash\n$ rio --version\n0.36.0\n$ gdalinfo --version\nGDAL 2.1.1, released 2016/07/07\n```\n\nI am trying to use `rio warp` to resample (shrink) a GeoTIFF raster, but it's producing a strange artifact.\n\nI'm using a [natural earth raster](http://www.naturalearthdata.com/downloads/50m-natural-earth-1/50m-natural-earth-i-with-shaded-relief-and-water/) (md5 sum just below).\n\n``` bash\n$ rio --version\n0.36.0\n$ rio warp --res 1 NE1_50M_SR_W.tif warped.tif\n$ md5sum NE1_50M_SR_W.tif warped.tif \n0a436f7b943aef85977017d9fff02f9d  NE1_50M_SR_W.tif\nb25a314e9fa573661edb4f71078d9f5b  warped.tif\n```\n## Screenshots:\n\nSource:\n![rio_warp_orig](https://cloud.githubusercontent.com/assets/1210973/17741147/5fb23c1a-649b-11e6-8bc3-b178a6890f44.png)\n\nResult:\n![rio_warp_result](https://cloud.githubusercontent.com/assets/1210973/17741148/5fb9b062-649b-11e6-833b-2a6a25da41c4.png)\n\nThe output file is (as expected) 360 x 180 px large. The 18 rightmost columns (= 18 rightmost degrees of longitude) are painted black.\n\n``` bash\n$ rio info NE1_50M_SR_W.tif \n{\"count\": 3, \"crs\": \"EPSG:4326\", \"colorinterp\": [\"red\", \"green\", \"blue\"], \"interleave\": \"pixel\", \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [0.03333333333333, 0.0, -179.99999999999997, 0.0, -0.03333333333333, 90.0], \"lnglat\": [-1.7962520360015333e-11, 8.995471034722868e-12], \"height\": 5400, \"width\": 10800, \"shape\": [5400, 10800], \"tiled\": false, \"res\": [0.03333333333333, 0.03333333333333], \"nodata\": null, \"bounds\": [-179.99999999999997, -89.99999999998201, 179.99999999996405, 90.0]}\n$ rio info warped.tif \n{\"count\": 3, \"crs\": \"EPSG:4326\", \"colorinterp\": [\"red\", \"green\", \"blue\"], \"interleave\": \"pixel\", \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [1.0, 0.0, -179.99999999999997, 0.0, -1.0, 90.0], \"lnglat\": [2.842170943040401e-14, 0.0], \"height\": 180, \"width\": 360, \"shape\": [180, 360], \"tiled\": false, \"res\": [1.0, 1.0], \"nodata\": null, \"bounds\": [-179.99999999999997, -90.0, 180.00000000000003, 90.0]}\n$ rio sample warped.tif\n[161, 0]\n[162, 0]\n[116, 168, 202]\n[0, 0, 0]\n```\n\nThe image looks the same (but with higher resolution) if I warp at higher destination resolution.\n\n``` bash\n$ rio warp --res .1 NE1_50M_SR_W.tif warped-fine.tif\n$ rio sample warped-fine.tif\n[161.9, 0]\n[162, 0]\n[115, 165, 201]\n[0, 0, 0]\n```\n\nSo here it's still the 18 rightmost degrees of longitude that fail.\n## Similar result with another input file\n\nAnother [Natural Earth dataset (medium size)](http://www.naturalearthdata.com/downloads/10m-cross-blend-hypso/cross-blended-hypso-with-relief-water-drains-and-ocean-bottom/) gives similar results, but here it's about the rightmost 9 degrees longitude that are black.\n\n``` bash\n$ rio info HYP_LR_SR_OB_DR.tif \n{\"count\": 3, \"crs\": \"EPSG:4326\", \"colorinterp\": [\"red\", \"green\", \"blue\"], \"interleave\": \"pixel\", \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [0.02222222222222, 0.0, -180.0, 0.0, -0.02222222222222, 90.0], \"lnglat\": [-1.801936377887614e-11, 9.00968188943807e-12], \"height\": 8100, \"width\": 16200, \"shape\": [8100, 16200], \"tiled\": false, \"res\": [0.02222222222222, 0.02222222222222], \"nodata\": null, \"bounds\": [-180.0, -89.99999999998198, 179.99999999996396, 90.0]}\n$ rio warp --res 1 HYP_LR_SR_OB_DR.tif warped2.tif\n$ rio info warped2.tif \n{\"count\": 3, \"crs\": \"EPSG:4326\", \"colorinterp\": [\"red\", \"green\", \"blue\"], \"interleave\": \"pixel\", \"dtype\": \"uint8\", \"driver\": \"GTiff\", \"transform\": [1.0, 0.0, -180.0, 0.0, -1.0, 90.0], \"lnglat\": [0.0, 0.0], \"height\": 180, \"width\": 360, \"shape\": [180, 360], \"tiled\": false, \"res\": [1.0, 1.0], \"nodata\": null, \"bounds\": [-180.0, -90.0, 180.0, 90.0]}\n$ md5sum HYP_LR_SR_OB_DR.tif warped2.tif \n6bd010d9895d134a7c23570886621289  HYP_LR_SR_OB_DR.tif\ncf1c189dd1f180e83aedad2b23462cb4  warped2.tif\n$ rio sample warped2.tif \n[170, 0]\n[171, 0]\n[109, 168, 212]\n[0, 0, 0]\n$ rio warp --res 0.1 HYP_LR_SR_OB_DR.tif warped2-fine.tif\n$ rio info warped2-fine.tif --shape\n1800 3600\n$ rio sample warped2-fine.tif \n[170.9, 0]\n[171, 0]\n[102, 166, 207]\n[0, 0, 0]\n```\n\nHope this helps!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdmcbr": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/848", "title": "add a rasterio.clip function?", "body": "In the same vein as adding a `rasterio.merge` wrapped by `rio merge`, is there any interest in `rasterio.clip`? It is such a simple a simple operation, I could see not feeling like that it is needed. However, I had to write a little equivalent of `rasterio.clip`, so I thought I might as well check and see if incorporating it here would be desirable.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/848/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/29f18e16eaf52f37276b7ed02888048e0828491e", "message": "Change a few affine -> transform in tests/docs\n\nPer deprecation of affine argument."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e9e04039d4c575341cbc8a21d4e69237b6a5d053", "message": "Remove potential circular import path\n\nThe Mixin classes were in io, and imported within the vrt module,\nbut the io module also imported the vrt module (within _io). This\nworked when copy was being imported before io in __init__, but removing\nthat import from __init__ produced a circular import."}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/e6a9fe4118388411d57bd13d5b7fab5d82b1a17f", "message": "Use height/width instead of num_row/num_col in mask\n\nThe window attributes num_row/num_col were deprecated in #1074."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/13992016", "body": "Yikes! Sorry I messed up the painting order.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/13992016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25143997", "body": "@sgillies Oh thanks, I was considering a PR with this (perhaps primarily to raise as a point of discussion) after being slightly overwhelmed by warnings in the latest round of testing. ", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/25143997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26200429", "body": "@geowurster Is there any reason not to check for path existence first? I hadn't ever noticed this before, but with `log.info` being called now with a the `CPLE_OpenFailedError`, this function is a little noisy. ", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26200429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37913062", "body": "I'd appreciate a suggestion for an alternative approach. I was hesitant to make changes to _base.pyx, but also did not want to replicate the functionality of the index/window functions that are available in DatasetReader, and did not want to require a dst DatasetReader within merge that would make the index/window functions available.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/37913062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/41295147", "body": "Sure thing. This was one of those 50/50 decisions where I knew I'd choose incorrectly, haha. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/41295147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51977661", "body": "Great, thanks. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51977661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51979593", "body": "Ah, thank you. Those were relics from my first pass, before seeing the rio mask approach.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/51979593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57397104", "body": "@perrygeo Is there an ideal format for cookbook entries? And, is it preferable if it relies only on `rasterio`, or would something using `fiona` and `shapely` as well be acceptable? The first application I had for all of these libraries (and by far my most common use case still) is masking rasters using shapefiles. I pieced together code @sgillies had posted in various places. I'd be happy to put it together into a recipe for that specific task. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57397104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57929035", "body": "With your modification in response to my comment, this import also needs to be modified.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/57929035/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58960664", "body": "Good idea.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/58960664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ColinTalbert": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/843", "title": "decimated read much slower with masked=True", "body": "Hello all,\n\nI'm running into an issue with decimated reading when the masked parameter is set to True.  What I'm seeing is reading taking 20-80 times slower when masked, which is enough to make it mostly unusable.  This seems like something that probably could be improved.  I tried to identify the bottleneck in the code but didn't have time to identify it.   \n\nI did move a copy of a notebook that demonstates it here: https://gist.github.com/ColinTalbert/4c7c98bcc3ef5aa625bd5a0827a1b5ff\n\nYou will need to change the local path to point to a large local raster though.\n\nThanks,\nColin\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/843/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "im4LF": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/806", "title": "rasterio.features.rasterize - Segmentation fault", "body": "Code:\n\n``` javascript\nrasterio.features.rasterize([(geom, 0)],\n                out_shape = band.shape,\n                fill = 1,\n                transform = band.transform,\n                all_touched = True,\n                dtype = np.uint8\n            )\n```\n\nValues to reproduce:\n\n``` json\nshape: (10980, 10980)\ntransform: [499980.0, 10.0, 0.0, 4900020.0, 0.0, -10.0]\ngeom: { \"type\": \"Polygon\", \"coordinates\": [ [ [ 608400.0, 4900020.0 ], [ 608880.0, 4900020.0 ], [ 608880.0, 4899840.0 ], [ 608820.0, 4899840.0 ], [ 608820.0, 4899780.0 ], [ 608760.0, 4899780.0 ], [ 608760.0, 4899720.0 ], [ 608580.0, 4899720.0 ], [ 608580.0, 4899780.0 ], [ 608520.0, 4899780.0 ], [ 608520.0, 4899840.0 ], [ 608460.0, 4899840.0 ], [ 608460.0, 4899900.0 ], [ 608400.0, 4899900.0 ], [ 608400.0, 4900020.0 ] ] ] }\n```\n\ngdb py-bt:\n\n```\n(gdb) py-bt\n#6 Frame 0x242e510, for file /usr/local/lib/python2.7/dist-packages/rasterio/features.py, line 322, in rasterize (shapes=[('{ \"type\": \"Polygon\", \"coordinates\": [ [ [ 608400.0, 4900020.0 ], [ 608880.0, 4900020.0 ], [ 608880.0, 4899840.0 ], [ 608820.0, 4899840.0 ], [ 608820.0, 4899780.0 ], [ 608760.0, 4899780.0 ], [ 608760.0, 4899720.0 ], [ 608580.0, 4899720.0 ], [ 608580.0, 4899780.0 ], [ 608520.0, 4899780.0 ], [ 608520.0, 4899840.0 ], [ 608460.0, 4899840.0 ], [ 608460.0, 4899900.0 ], [ 608400.0, 4899900.0 ], [ 608400.0, 4900020.0 ] ] ] }', 0)], out_shape=(10980, 10980), fill=1, out=<numpy.ndarray at remote 0x2082620>, output=None, transform=<Affine at remote 0x1efa5f0>, all_touched=False, default_value=1, dtype=<type at remote 0x7ffff35a7780>, format_invalid_dtype=<function at remote 0x1f18de8>, format_cast_error=<function at remote 0x1f18d70>, fill_array=<numpy.ndarray at remote 0x2433c30>, valid_shapes=[('{ \"type\": \"Polygon\", \"coordinates\": [ [ [ 608400.0, 4900020.0 ], [ 608880.0, 4900020.0 ], [ 608880.0, 4899...(truncated)\n    _rasterize(valid_shapes, out, transform.to_gdal(), all_touched)\n```\n\ngdb bt:\n\n```\n#0  0x00007ffff01fff1e in ?? () from /usr/lib/libgdal.so.1\n#1  0x00007ffff02005fc in ?? () from /usr/lib/libgdal.so.1\n#2  0x00007ffff0201a13 in GDALRasterizeGeometries () from /usr/lib/libgdal.so.1\n#3  0x00007fffe328bd48 in __pyx_pf_8rasterio_9_features_5_rasterize (__pyx_v_all_touched=<optimized out>, __pyx_v_transform=<traceback at remote 0x22325a8>, __pyx_v_image=\n    <numpy.ndarray at remote 0x2082620>, __pyx_v_shapes=<optimized out>, __pyx_self=<optimized out>) at rasterio/_features.c:6541\n#4  __pyx_pw_8rasterio_9_features_6_rasterize (__pyx_self=<optimized out>, __pyx_args=<optimized out>, __pyx_kwds=<optimized out>) at rasterio/_features.c:6078\n#5  0x00000000004b388c in call_function (oparg=<optimized out>, pp_stack=0x7fffffffdd40) at ../Python/ceval.c:4021\n#6  PyEval_EvalFrameEx (f=f@entry=\n    Frame 0x242e510, for file /usr/local/lib/python2.7/dist-packages/rasterio/features.py, line 322, in rasterize (shapes=[('{ \"type\": \"Polygon\", \"coordinates\": [ [ [ 608400.0, 4900020.0 ], [ 608880.0, 4900020.0 ], [ 608880.0, 4899840.0 ], [ 608820.0, 4899840.0 ], [ 608820.0, 4899780.0 ], [ 608760.0, 4899780.0 ], [ 608760.0, 4899720.0 ], [ 608580.0, 4899720.0 ], [ 608580.0, 4899780.0 ], [ 608520.0, 4899780.0 ], [ 608520.0, 4899840.0 ], [ 608460.0, 4899840.0 ], [ 608460.0, 4899900.0 ], [ 608400.0, 4899900.0 ], [ 608400.0, 4900020.0 ] ] ] }', 0)], out_shape=(10980, 10980), fill=1, out=<numpy.ndarray at remote 0x2082620>, output=None, transform=<Affine at remote 0x1efa5f0>, all_touched=False, default_value=1, dtype=<type at remote 0x7ffff35a7780>, format_invalid_dtype=<function at remote 0x1f18de8>, format_cast_error=<function at remote 0x1f18d70>, fill_array=<numpy.ndarray at remote 0x2433c30>, valid_shapes=[('{ \"type\": \"Polygon\", \"coordinates\": [ [ [ 608400.0, 4900020.0 ], [ 608880.0, 4900020.0 ], [ 608880.0, 4899...(truncated), \n    throwflag=throwflag@entry=0) at ../Python/ceval.c:2666\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jameshiebert": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/777", "title": "`test_warp_from_to_file_multi()` fails on GDAL sans-threads", "body": "If GDAL is compiled without thread support, [`test_warp_from_to_file_multi`](https://github.com/mapbox/rasterio/blob/master/tests/test_warp.py#L475) ends up failing (shown below).\n\nIs there a good way to programmatically check for thread support in GDAL, and skip this test if it's unavailable?\n\n```\n__________________________________________________________ test_warp_from_to_file_multi __________________________________________________________\n\ntmpdir = local('/tmp/pytest-of-james/pytest-2/test_warp_from_to_file_multi0')\n\n    def test_warp_from_to_file_multi(tmpdir):\n        \"\"\"File to file.\"\"\"\n        tiffname = str(tmpdir.join('foo.tif'))\n        with rasterio.open('tests/data/RGB.byte.tif') as src:\n            dst_crs = dict(\n                proj='merc',\n                a=6378137,\n                b=6378137,\n                lat_ts=0.0,\n                lon_0=0.0,\n                x_0=0.0,\n                y_0=0,\n                k=1.0,\n                units='m',\n                nadgrids='@null',\n                wktext=True,\n                no_defs=True)\n            kwargs = src.meta.copy()\n            kwargs.update(\n                transform=DST_TRANSFORM,\n                crs=dst_crs)\n            with rasterio.open(tiffname, 'w', **kwargs) as dst:\n                for i in (1, 2, 3):\n                    reproject(\n                        rasterio.band(src, i),\n                        rasterio.band(dst, i),\n>                       num_threads=2)\n\ntests/test_warp.py:501: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nrasterio/warp.py:276: in reproject\n    **kwargs)\nrasterio/_warp.pyx:503: in rasterio._warp._reproject (rasterio/_warp.cpp:10289)\n    with CPLErrors() as cple:\nrasterio/_warp.pyx:509: in rasterio._warp._reproject (rasterio/_warp.cpp:10240)\n    cple.check()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise exception_map.get(err_no, CPLError)(err_type, err_no, msg)\nE   rasterio._err.CPLE_AppDefined: CPLCreateJoinableThread() failed in ChunkAndWarpMulti()\n\nrasterio/_err.pyx:196: CPLE_AppDefined\n-------------------------------------------------------------- Captured stderr call --------------------------------------------------------------\nDEBUG:rasterio._base:Got coordinate system\nDEBUG:rasterio._base:Nodata success: 1, Nodata value: 0.000000\nDEBUG:rasterio._base:Nodata success: 1, Nodata value: 0.000000\nDEBUG:rasterio._base:Nodata success: 1, Nodata value: 0.000000\nDEBUG:rasterio._base:Dataset <open RasterReader name='tests/data/RGB.byte.tif' mode='r'> is started.\nDEBUG:rasterio._base:Entering Dataset <open RasterReader name='tests/data/RGB.byte.tif' mode='r'> context.\nDEBUG:rasterio._io:Input CRS: {'no_defs': True, 'x_0': 0.0, 'b': 6378137, 'a': 6378137, 'nadgrids': '@null', 'lon_0': 0.0, 'units': 'm', 'lat_ts': 0.0, 'wktext': True, 'k': 1.0, 'y_0': 0, 'proj': 'merc'}\nDEBUG:rasterio._io:PROJ.4 to be imported: '+no_defs +x_0=0.0 +b=6378137 +nadgrids=@null +lat_ts=0.0 +lon_0=0.0 +units=m +a=6378137 +wktext +y_0=0 +proj=merc +k=1.0'\nDEBUG:rasterio._io:Exported WKT: PROJCS[\"unnamed\",GEOGCS[\"unnamed ellipse\",DATUM[\"unknown\",SPHEROID[\"unnamed\",6378137,0],EXTENSION[\"PROJ4_GRIDS\",\"@null\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433]],PROJECTION[\"Mercator_2SP\"],PARAMETER[\"standard_parallel_1\",0],PARAMETER[\"central_meridian\",0],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"Meter\",1],EXTENSION[\"PROJ4\",\"+no_defs +x_0=0.0 +b=6378137 +nadgrids=@null +lat_ts=0.0 +lon_0=0.0 +units=m +a=6378137 +wktext +y_0=0 +proj=merc +k=1.0\"]]\nDEBUG:rasterio._io:Self CRS: CRS({'no_defs': True, 'x_0': 0.0, 'b': 6378137, 'nadgrids': '@null', 'lat_ts': 0.0, 'lon_0': 0.0, 'units': 'm', 'a': 6378137, 'wktext': True, 'y_0': 0, 'proj': 'merc', 'k': 1.0})\nDEBUG:rasterio._base:Got coordinate system\nINFO:rasterio._base:Failed to auto identify EPSG: 7\nDEBUG:rasterio._base:Params: b'+no_defs +x_0=0.0 +b=6378137 +nadgrids=@null +lat_ts=0.0 +lon_0=0.0 +units=m +a=6378137 +wktext +y_0=0 +proj=merc +k=1.0'\nDEBUG:rasterio._base:Nodata success: 1, Nodata value: 0.000000\nDEBUG:rasterio._base:Nodata success: 1, Nodata value: 0.000000\nDEBUG:rasterio._base:Nodata success: 1, Nodata value: 0.000000\nDEBUG:rasterio._base:Entering Dataset <open RasterUpdater name='/tmp/pytest-of-james/pytest-2/test_warp_from_to_file_multi0/foo.tif' mode='w'> context.\nDEBUG:rasterio._warp:Created transformer and options.\nDEBUG:rasterio._warp:Setting NUM_THREADS option: b'2'\nDEBUG:rasterio._warp:Created warp options\nDEBUG:rasterio._warp:src_nodata: 0.0\nDEBUG:rasterio._warp:dst_nodata: 0.0\nDEBUG:rasterio._warp:Set transformer options\nDEBUG:rasterio._warp:Chunk and warp window: 0, 0, 791, 718.\nDEBUG:rasterio._warp:Executing multi warp with num_threads: 2\nERROR:rasterio._gdal:CPLE_AppDefined in b'CPLCreateJoinableThread() failed in ChunkAndWarpMulti()'\nDEBUG:rasterio._base:Dataset <open RasterUpdater name='/tmp/pytest-of-james/pytest-2/test_warp_from_to_file_multi0/foo.tif' mode='w'> has been stopped.\nDEBUG:rasterio._base:Dataset <closed RasterUpdater name='/tmp/pytest-of-james/pytest-2/test_warp_from_to_file_multi0/foo.tif' mode='w'> has been closed.\nDEBUG:rasterio._base:Exited Dataset <closed RasterUpdater name='/tmp/pytest-of-james/pytest-2/test_warp_from_to_file_multi0/foo.tif' mode='w'> context.\nDEBUG:rasterio._base:Dataset <open RasterReader name='tests/data/RGB.byte.tif' mode='r'> has been stopped.\nDEBUG:rasterio._base:Dataset <closed RasterReader name='tests/data/RGB.byte.tif' mode='r'> has been closed.\nDEBUG:rasterio._base:Exited Dataset <closed RasterReader name='tests/data/RGB.byte.tif' mode='r'> context.\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "robintw": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/772", "title": "HDF files: subdatasets & how rasterio should handle them", "body": "A number of my images are in HDF format (more precisely, HDF-EOS, as used by MODIS et al). If I take an image and run `rio info` on it I get something rather useless like:\n\n```\n/opt/anaconda3/envs/python2/lib/python2.7/site-packages/rasterio/__init__.py:193: UserWarning: Dataset has no geotransform set.  Default transform will be applied (Affine.identity())\n  s.start()\n{\"count\": 0, \"crs\": \"\", \"bounds\": [0.0, 512.0, 512.0, 0.0], \"dtype\": \"float_\", \"driver\": \"HDF4\", \"transform\": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0], \"height\": 512, \"width\": 512, \"shape\": [512, 512], \"tiled\": false, \"res\": [1.0, -1.0], \"nodata\": null}\n```\n\nFor comparison, the output of `gdalinfo` is:\n\n```\nDriver: HDF4/Hierarchical Data Format Release 4\nFiles: MAIACAAOT.h00v00.20140221315.hdf\nSize is 512, 512\nCoordinate System is `'\nMetadata:\n  HDFEOSVersion=HDFEOS_V2.12\nSubdatasets:\n  SUBDATASET_1_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:Optical_Depth_Land\n  SUBDATASET_1_DESC=[1200x1200] Optical_Depth_Land grid1km (16-bit integer)\n  SUBDATASET_2_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:AOT_Uncertainty\n  SUBDATASET_2_DESC=[1200x1200] AOT_Uncertainty grid1km (16-bit integer)\n  SUBDATASET_3_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:AOT_UnSmooth\n  SUBDATASET_3_DESC=[1200x1200] AOT_UnSmooth grid1km (16-bit integer)\n  SUBDATASET_4_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:Angstrom_Para\n  SUBDATASET_4_DESC=[1200x1200] Angstrom_Para grid1km (16-bit integer)\n  SUBDATASET_5_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:Column_WV\n  SUBDATASET_5_DESC=[1200x1200] Column_WV grid1km (16-bit integer)\n  SUBDATASET_6_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:Injection_Height\n  SUBDATASET_6_DESC=[1200x1200] Injection_Height grid1km (32-bit floating-point)\n  SUBDATASET_7_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:AOT_QA\n  SUBDATASET_7_DESC=[1200x1200] AOT_QA grid1km (16-bit unsigned integer)\n  SUBDATASET_8_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid5km:cosSZA\n  SUBDATASET_8_DESC=[240x240] cosSZA grid5km (16-bit integer)\n  SUBDATASET_9_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid5km:cosVZA\n  SUBDATASET_9_DESC=[240x240] cosVZA grid5km (16-bit integer)\n  SUBDATASET_10_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid5km:RelAZ\n  SUBDATASET_10_DESC=[240x240] RelAZ grid5km (16-bit integer)\n  SUBDATASET_11_NAME=HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid5km:Scattering_Angle\n  SUBDATASET_11_DESC=[240x240] Scattering_Angle grid5km (16-bit integer)\nCorner Coordinates:\nUpper Left  (    0.0,    0.0)\nLower Left  (    0.0,  512.0)\nUpper Right (  512.0,    0.0)\nLower Right (  512.0,  512.0)\nCenter      (  256.0,  256.0)\n```\n\nFurthermore, I can load a subdataset from this file using the GDAL fully-qualified name (such as `HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:Optical_Depth_Land`) and `rasterio.open` - but if I try and run `rio info HDF4_EOS:EOS_GRID:\"MAIACAAOT.h00v00.20140221315.hdf\":grid1km:Optical_Depth_Land` I get an error:\n\n`Error: Invalid value for \"INPUT\": Input file HDF4_EOS:EOS_GRID:MAIACAAOT.h00v00.20140221315.hdf:grid1km:Optical_Depth_Land does not exist`\n\nThis was discussed briefly on Slack, and @perrygeo suggested that either rasterio needs to support HDF/NetCDF properly, or we need to document other libraries to use instead and potentially provide some nicer ways to interoperate with them.\n\nMy current thoughts are:\n1. We could fairly easily allow `rio` to cope with GDAL fully-qualified names as input filenames by modifying `file_in_handler` or `parse_path` (in fact, there is a comment about allowing GDAL's weird `NETCDF:` style strings to pass through at https://github.com/mapbox/rasterio/blob/master/rasterio/vfs.py#L43)\n2. It would be great to have a 'subdatasets' attribute on a `RasterReader` instance, which would basically do the same as the `gdal.GetSubDatasets` function. GDAL implements this as a very simple metadata check (see http://gdal.org/python/osgeo.gdal-pysrc.html#Dataset.GetSubDatasets), although I can't seem to find a way to get the relevant metadata domain within rasterio - is there a way to get metadata from arbitrary metadata domains?\n3. If we have an easy way of getting a list of subdatasets then it would be fairly simple to add it to the `rio info` output.\n4. It'd be nice if we had a really easy way to access these subdatasets too - but I'm not sure what the best way to do that is. Could the `subdatasets` even be an iterable of `RasterReader` instances?\n\nDoes any of this sound sensible? Any other relevant thoughts? I'd be happy to have a go at implementing some of this stuff.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dnomadb": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/769", "title": "Warping multiple inputs to one output", "body": "Similar to `gdalwarp` where:\n\n```\nrio warp a b c d e\n```\n\nWarps `a`, `b`, `c`, and `d` into `e`\n\n(Related: https://github.com/mapbox/rasterio/issues/424)\n## This needs:\n- A utility function to calculate the merged default input transform\n- The ability to iteratively write into one output\n\nCurrently, each successive write (using `rasterio.band` for reads and writes) overwrites the previously written data, resulting in an output that, while the correct extent for all inputs, only depicts the final write. \n\n![image](https://cloud.githubusercontent.com/assets/5084513/15800982/83a96b0a-2a3c-11e6-8bed-cd5046ac9daa.png)\n\nHowever, I _can_ achieve the correct result by warping arrays and adding a bit of boolean logic to copy into the output (note: continually warping into the same output array also overwrites).\n\n![image](https://cloud.githubusercontent.com/assets/5084513/15800985/9a2244e2-2a3c-11e6-9d6b-9e06ea6f0929.png)\n\nI sketched out both behaviors + the utility functions here: https://gist.github.com/c4209d9a4bf2cbe8277ff39bfcca6ab2 (change [mode](https://gist.github.com/dnomadb/c4209d9a4bf2cbe8277ff39bfcca6ab2#file-testwarp-py-L112) to see difference). I made a number of assumptions that need to be sussed out:\n- How should we handle slightly varying cellsizes from `calculate_default_transform` ? Here, the differences were very slight, so I used the `min`: https://gist.github.com/dnomadb/c4209d9a4bf2cbe8277ff39bfcca6ab2#file-testwarp-py-L83\n  - How should we calculate the width and height of the output? I used the ceiling of the maxima / cellsize in each dimension, but I am not sure of the implications of this: https://gist.github.com/dnomadb/c4209d9a4bf2cbe8277ff39bfcca6ab2#file-testwarp-py-L92-L93\n\ncc @sgillies @perrygeo @brendan-ward \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/11166148", "body": "This is the :hankey: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11166148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "JamesRamm": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/685", "title": "Expose ReadBlock and WriteBlock?", "body": "GDAL provides a 'ReadBlock' and 'WriteBlock' function as a more efficient method of I/O on 'natural' blocks of a dataset. For larger-than-memory datasets, these are very helpful when some form or processing needs to be applied to the whole dataset. \n`rasterio` could expose `ReadBlock` as some form of generator, so user code can look like:\n\n```\nfor arr in src.block_data(band=1):\n    # do something with arr..\n    dst.write_block(arr, band=1)\n```\n\nAswell as a nice interface for applying some sort of generic processing across whole datasets, This may provide performance gains over the standard method of calling on `RasterIO`. \n\nThis could be taken a step further and `rasterio` could instead (or aswell) provide an `apply` function. Such a function could take in a 'dst' dataset instance and a user defined callback function as its' argument. The user-defined python function would have to have a standard interface, accept an array (maybe some other parameters) and return an array. In this manner, the above loop could be written entirely in Cython for potentially further performance gains...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/630", "title": "Polygonize for larger-than-memory datasets", "body": "Current implementation of polygonize using rasterio/fiona 'datasets' involves passing a source array which is written to an in-memory dataset, which is then handed off to `gdal.Polygonize`. \n\nThis isn't practical for larger-than-memory datasets, as they cannot be read to a single source array. \nIt would be beneficial to somehow expose `gdal.Polygonize` to work on whole rasterio datasets\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/572", "title": "reproject in chunks?", "body": "I'm trying to use the `reproject` function to reproject an entire geotiff in chunks (using its' ability to accept `ndarray`). \nFirst, im creating an output geotif, using parameters taken from the `calculate_default_transform` function:\n\n```\ndst_transform, dst_xsize, dst_ysize = calculate_default_transform(src_crs,  dst_crs, xsize, ysize, xmin, ymin, xmax, ymax)\n```\n\nThen I read the input in chunks. For each chunk (a numpy array), I do further processing and then I want to reproject it into the output dataset. I use `calcaulte_default_transform` for each chunk to get the right size for the output array, then I call `reproject`. It seems to work. But now I have a problem..my original `xoffset` and `yoffset` (in pixels) from looping over the input surely are not correct for the output? Attempts to use the affine transform to translate are going wrong...\n\ndoes rasterio support a better method of reprojecting in chunks (to allow other processing to occur on each chunk)? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rouault": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/570", "title": "reproject() could save temporary memory and copies when src/dst is a ndarray", "body": "Currently reproject() allocates a MEM dataset with new buffers. It could save those memory allocations and the copy between the ndarray and the buffers of the MEM dataset, by directly passing the underlying memory of the ndarray to the MEM dataset with the AddBand() method and the DATAPOINTER, PIXELOFFSET and LINEOFFSET options ( http://gdal.org/frmt_mem.html )\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/11697224faa20707e5197b3cc24e261555ceba01", "message": ".travis.yml: remove GDAL 1.9 builds, and add GDAL trunk builds\n\n- I doubt compat with GDAL 1.9 is needed nowadays\n- Addition of test against GDAL trunk (with a allow_failures), to detect\n  either GDAL bugs or integration issues at earliest stage. GDAL is rebuilt\n  if the revision changed, otherwise the cached build is used"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/ad5468c800810a33d1d7a3b4c872f6d85cfb7211", "message": "create_warp_options(): do not set nodata value when there's none\n\nThis will make GDALCreateWarpedVRT() to avoid selecting Float64 data type\nwhereas Byte or UInt16 that have many optimizations are just needed"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/19288158", "body": "You should probably call CPLPopErrorHandler() before raising the exception\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/19288158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/19288167", "body": "Perhaps move this right before GDALAllRegister() since it can emit debug messages, warnings, errors, etc (particularly when loading plugins) ?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/19288167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55332077", "body": "non-NULL-ness of hTransformArg has been checked before. And non-NULL-ness of psWOptions has been assumed in all previous code paths\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55332077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55398406", "body": "otherwise you will get the exception raised by lnglat(). That said, would perhaps be better to catch the exception instead of doing this prior sanity check\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/55398406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "grovduck": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/563", "title": "raster attribute table support", "body": "As far as I can tell, rasterio doesn't yet support reading of raster attribute tables.  Our team has a real need for this as we rely heavily on Arc Grid format which can make good use of RATs.  I've cobbled together a first attempt at this (borrowing a lot of existing rasterio code), but before putting in a PR, I'd like some feedback on how best to return the information.  My first choice would be to return the RAT as a pandas DataFrame (or, secondarily, a numpy recarray), but I see that _base.pyx doesn't import either of these (and pandas isn't used throughout rasterio).  Right now, for each band, I'm returning an array of dictionaries where each dictionary is the set of field name/field value pairs for that row.  Probably not the most intuitive format.\n\nThe other obvious question is whether this should be called on a specific band or for the entire raster dataset.\n\nIf this is something that would belong in rasterio, I'd be happy to work on it with some guidance.  Because it's pretty rough right now, I've put it in a gist.\n\nhttps://gist.github.com/grovduck/0eac07ccf441762680e7\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/563/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49238290", "body": "Excellent, works now.  Thanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49238290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49330877", "body": "Thanks @sgillies.  For some reason, a `crs` of None is still bombing Python.  I'm crashing python on a number of tests currently:\n\n```\ntest_crs.test_write_3857\ntest_driver_management.test_options\ntest_nodata.test_nodata\ntest_warp.test_warp_from_to_file\ntest_write.test_no_crs\n```\n\nalthough I see that all tests are passing on travis.\n\nSetup is win32, python 2.7.6 with rasterio at 3e7fceb1bf82f9624214da70ea3717c7d0afd5fb. It could be something funky with my GDAL?  I'll dig a bit more and report back.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49330877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49461816", "body": "Tried this with a clean virtualenv install with the same results.  I used packages from [Christoph Gohlke pages](http://www.lfd.uci.edu/~gohlke/pythonlibs) to install a new GDAL, numpy and rasterio and then used against tests in 3e7fceb1bf82f9624214da70ea3717c7d0afd5fb.\n\n```\nD:\\matt>virtualenv rio\nD:\\matt>D:\\matt\\rio\\Scripts\\activate.bat\n(rio) D:\\matt>easy_install d:\\matt\\GDAL-1.11.0.win32-py2.7.exe\n(rio) D:\\matt>easy_install d:\\matt\\numpy-MKL-1.8.1.win32-py2.7.exe\n(rio) D:\\matt>easy_install d:\\matt\\rasterio-0.9.win32-py2.7.exe\n(rio) D:\\matt>easy_install -U pytest\n(rio) D:\\matt>cd rasterio-3e7fceb1bf82f9624214da70ea3717c7d0afd5fb\n(rio) D:\\matt\\rasterio-3e7fceb1bf82f9624214da70ea3717c7d0afd5fb>py.test\n```\n\nSorry, no error messages to show, just a dialog with `python.exe has stopped working`.  I'm a total novice at cython debugging, but I'll give that a try (specifically in `_io.pyx`).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49461816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49492905", "body": "I got a couple of the tests to work on win32 based on some edits.  There were actually a number of tests that were failing in `test_write.py` but based on the same code in `RasterReader.read_crs()`.  I'm not exactly sure what's happening, but on the Windows build,  `wkt` is not coming back as NULL from  `_gdal.GDALGetProjectionRef(self._hds)`.  But changing this line:\n\n```\nif wkt != NULL:\n```\n\nto\n\n```\nif wkt != NULL and len(wkt) != 0:\n```\n\nseems to work.\n\nFor `test_crs.test_write_3857`, it looks like the affine keyword is being passed as an option and my GDAL chokes on this.  Rewriting the test to:\n\n```\ndef test_write_3857(tmpdir):\n    src_path = str(tmpdir.join('lol.tif'))\n    subprocess.call([\n        'gdalwarp', '-t_srs', 'EPSG:3857', \n        'rasterio/tests/data/RGB.byte.tif', src_path])\n    dst_path = str(tmpdir.join('wut.tif'))\n    with rasterio.drivers():\n        with rasterio.open(src_path) as src:\n            meta = src.meta\n            del meta['affine']\n            with rasterio.open(dst_path, 'w', **meta) as dst:\n                assert dst.crs == {'init': 'epsg:3857'}\n    info = subprocess.check_output([\n        'gdalinfo', dst_path], universal_newlines=True)\n    assert \"\"\"PROJCS[\"WGS 84 / Pseudo-Mercator\",\n    GEOGCS[\"WGS 84\",\n        DATUM[\"WGS_1984\",\n            SPHEROID[\"WGS 84\",6378137,298.257223563,\n                AUTHORITY[\"EPSG\",\"7030\"]],\n            AUTHORITY[\"EPSG\",\"6326\"]],\n        PRIMEM[\"Greenwich\",0],\n        UNIT[\"degree\",0.0174532925199433],\n        AUTHORITY[\"EPSG\",\"4326\"]],\n    PROJECTION[\"Mercator_1SP\"],\n    PARAMETER[\"central_meridian\",0],\n    PARAMETER[\"scale_factor\",1],\n    PARAMETER[\"false_easting\",0],\n    PARAMETER[\"false_northing\",0],\n    UNIT[\"metre\",1,\n        AUTHORITY[\"EPSG\",\"9001\"]],\n    EXTENSION[\"PROJ4\",\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\"],\n    AUTHORITY[\"EPSG\",\"3857\"]]\"\"\" in info.decode('utf-8')\n```\n\n(Also, note the `universal_newlines` keyword in `subprocess.check_output`).  I'm sure you will handle all these issues in a much more elegant manner.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49492905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54327061", "body": "@sgillies , I'd be happy to try, although no promises on how elegant it will be.  There are some good simple boilerplate examples in other modules that I'll try to follow.  I'll report back soon ....\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54327061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54558026", "body": "I'm not sure this is worth implementing, but this is what I've been able to ascertain about adding entry points for Windows script functionality.  Some good notes:\n\nhttp://matthew-brett.github.io/pydagogue/installing_scripts.html\n\nFrom what I understand, if you want to go the entry_points route, you need to have your script as a callable function.  As a test, I created a new module called `scripts.py` and put the code for rio_cp under it renaming as functions.  It's a simple edit to `setup.py` to include this as a console script.  I'm not making a pull request, but here's the diff:\n\nhttps://github.com/grovduck/rasterio/compare/mapbox:master...grovduck:master\n\nIt seems like it messes up your structure quite a bit for minimal gain.  But if you want to go this route, I can carry the PR through.  I've tested this and it does create the expected `rio_cp.exe` and `rio_cp-script.py` files on Windows.  Somebody more knowledgable than me can step in.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54558026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54876467", "body": "Thanks @sgillies  for the fix.  Unfortunately, I think the rio subpackage is not getting bundled at present so tests are still failing.  If I change\n\n```\npackages=['rasterio'],\n```\n\nto\n\n```\npackages=find_packages(),\n```\n\nin `setup.py`, the rio subpackage shows up when installed (although so does the `tests` package which I think you're trying to avoid).  Am I doing something incorrectly?  When I run tests on this, everything is much happier.  Again, thx for going to the trouble to make this work on Windows.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54876467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54883267", "body": "Not quite ... rasterio.rio.options is missing:\n\n```\n  File \"D:\\matt\\rio\\lib\\site-packages\\rasterio-0.13-py2.7-win32.egg\\rasterio\\rio\n\\cli.py\", line 6, in <module>\n    from rasterio.rio import options\nImportError: cannot import name options\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54883267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54884118", "body": "Perfect.  That did it.  Many thanks.\n(I'm still getting some testing errors that I'll dig into, but this issue seems to be resolved).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54884118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "youngpm": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/531", "title": "Add wrapper to GDALComputeProximity", "body": "Hi all,\n\nI've got a need to call out to [GDALComputeProximity](http://www.gdal.org/gdal__alg_8h.html#a851815400a579aae9de01199b416fa42) and I don't think it's been wrapped yet.  \n\nI was thinking I could Cythonize it and add it to features.py?  Should be pretty straight forward, and I've already found your docs on the wiki for contributing and whatnot!\n\nAny thoughts?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35590064", "body": "Well, its not really useful, but you can new up memory in c land and attach an in memory raster to it via sending the pointer's address to the driver's creation options, see http://www.gdal.org/frmt_mem.html; I don't think it works on 64bit platforms though!\n\nIt'd probably be some major finagling to get a numpy array attached that way...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35590064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35640072", "body": "Ah, I was worried about the comment in that link - \"NOTE! This may not work on platforms where a long is 32 bits and a pointer is 64 bits. (required)\"\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35640072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35857837", "body": "Awesome!  You're an animal!\n\nOn Sun, Feb 23, 2014 at 9:44 PM, Sean Gillies notifications@github.comwrote:\n\n> At last!\n> \n> [image: screen shot 2014-02-23 at 9 40 01 pm]https://f.cloud.github.com/assets/33697/2242743/0587a0b0-9d0e-11e3-8233-0b2a759532eb.jpg\n> \n> Plenty of work to be done, but it's almost ready to be merged into master.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/mapbox/rasterio/issues/12#issuecomment-35857525\n> .\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35857837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "greencoder": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/499", "title": "Abort trap error when using Rasterio with Matplotlib Basemap", "body": "If I import rasterio before instantiating a matplotlib basemap, I get an abort trap:\n\n```\n$ python\nPython 2.7.10 (default, Jul 14 2015, 19:46:27) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> import rasterio\n>>> from mpl_toolkits.basemap import Basemap\n>>> \n>>> basemap = Basemap(projection='merc', llcrnrlat=15, urcrnrlat=60, llcrnrlon=-135, urcrnrlon=-65, lat_ts=20)\nAssertion failed: (0), function query, file AbstractSTRtree.cpp, line 285.\nAbort trap: 6\n```\n\nIf I move the `import rasterio` call down after I instantiate a Basemap object, then I don't get the abort trap.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kapadia": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/410", "title": "Re-project using RPCs", "body": "@sgillies I'd like to re-project an image using RPCs. It looks like [`_warp._reproject`](https://github.com/mapbox/rasterio/blob/9a0876ac277102bc5499bd520fd9ff650691fb93/rasterio/_warp.pyx#L278) only handles a WKT.\n\nDo you have thoughts on how this could be implemented? `gdalwarp` seems to find the RPCs when a source projection is not specified. Is this something that could be exposed in `_warp._reproject`, or perhaps another function specific to RPCs.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37686480", "body": "@sgillies Yes, it would be nice to have for multi-band TIFFs. What's the limitation with JPEGs? They don't support multiple layers, but could someone update a window using r+ mode.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37686480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37705685", "body": "Thanks @sgillies. Re: JPGs, looks like it doesn't make sense to update, so best to pass on that feature.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/37705685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41339293", "body": "@sgillies I haven't been able to reproduce this issue outside of another project, but here's one file that was triggering the compression issues:\n\nhttp://akapadia.s3.amazonaws.com/rasterio/tiff-error.tif\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41339293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41624407", "body": "Oooo. I'm intrigued. Looking forward to the details.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41624407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41701395", "body": "@sgillies Compression is tricky business. In past work with other compression algos, I've found the same behavior (a larger compressed file).\n\nFor geotiffs, there's always \"vanilla GDAL\" as a fallback: `gdal_translate -co COMPRESS=LZW $1 $2`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/41701395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878345", "body": "@sgillies No it's not file specific. \n\n> homebrewed GDAL 1.10.1\n\nDo you mean apt-get? The problem occurs on Ubuntu 14.04.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878855", "body": "Perhaps related to Travis bumping to Ubuntu 14.04 https://github.com/travis-ci/travis-ci/issues/2046 and #87.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44878855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44886711", "body": "@sgillies This might be a useful thread. Similar problems arose in matplotlib due to a FreeType memory issue. An external lib of rasterio may be the culprit.\n\nhttps://github.com/matplotlib/matplotlib/issues/2916\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44886711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44894397", "body": "Thanks! I made those adjustments in my other scripts, and it works.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44894397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47727012", "body": "I added a `colorinterp` method to the `RasterReader` and `write_colorinterp` to `RasterUpdater`. Tests are included, and I did a sanity check with `gdalinfo` :)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47727012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47727295", "body": "For the enums, grey or gray?\n\n```\nGreyscale */                                      GCI_GrayIndex=1,\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47727295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47727708", "body": "Thanks for the guidance here. Just added [`rasterio/enums.py`](https://github.com/mapbox/rasterio/blob/issue100/rasterio/enums.py) to store the color interpretation values. Example of usage is in [`test_colorinterp`](https://github.com/mapbox/rasterio/blob/issue100/rasterio/tests/test_colorinterp.py)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47727708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819277", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819316", "body": "Should we move the other enums to `rasterio/enums.py`?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/47819316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48365069", "body": "@mhearne-usgs do you have an existing installation of GDAL elsewhere? Rasterio might be trying to link to that library instead of the one in anaconda's directory.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48365069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48368232", "body": "Hrm. In the past I've had trouble using Anaconda with some packages. These packages would link to libraries on the system, rather than Anaconda's lib, eventually creating linking conflicts like what you're seeing. GDAL might be trying to link to a system library when it really should link to the same lib provided by Anaconda.\n\nContinuum recently added GDAL to their package repository. You might try `conda install gdal` before installing rasterio. That should force GDAL to link to anaconda libraries, rather than system.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48368232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48369568", "body": "Great!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48369568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48370473", "body": "Do you get the same traceback?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48370473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48548438", "body": "Thanks @sgillies. I'm also finding that `nodata` values are not carried over, even when initializing a new image image from `src.meta`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48548438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48668619", "body": "This is useful information. I've been curious about creating a conda package. Did you come across instructions on how to do this? I looked the other day, but came up short.\n\n@sgillies thoughts on `conda install rasterio`? I'd be happy to tackle this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48668619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48669064", "body": "Thanks @mhearne-usgs. Will look into this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48669064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48764965", "body": "Awesome! So much fun happening :) Looks simple enough too.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48764965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49067703", "body": "Thanks @sgillies. Just FYI, I tried again yesterday after c1dadc693392e1337852133a0d59b9e14ff4169b, and noticed the same problems. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49067703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49206084", "body": "Thanks @sgillies. Looks to be working as expected.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49206084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49946267", "body": "@sgillies I'm looking at this again, and seeing a discrepancy between the projection info. An input image has the following info:\n\n```\n    Coordinate System is:\n    PROJCS[\"WGS 84 / Pseudo-Mercator\",\n        GEOGCS[\"WGS 84\",\n            DATUM[\"WGS_1984\",\n                SPHEROID[\"WGS 84\",6378137,298.257223563,\n                    AUTHORITY[\"EPSG\",\"7030\"]],\n                AUTHORITY[\"EPSG\",\"6326\"]],\n            PRIMEM[\"Greenwich\",0],\n            UNIT[\"degree\",0.0174532925199433],\n            AUTHORITY[\"EPSG\",\"4326\"]],\n        PROJECTION[\"Mercator_1SP\"],\n        PARAMETER[\"central_meridian\",0],\n        PARAMETER[\"scale_factor\",1],\n        PARAMETER[\"false_easting\",0],\n        PARAMETER[\"false_northing\",0],\n        UNIT[\"metre\",1,\n            AUTHORITY[\"EPSG\",\"9001\"]],\n        EXTENSION[\"PROJ4\",\"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\"],\n        AUTHORITY[\"EPSG\",\"3857\"]]\n```\n\nand an output file, initialized from input metadata has:\n\n```\nCoordinate System is:\nLOCAL_CS[\"WGS 84 / Pseudo-Mercator\",\n    GEOGCS[\"WGS 84\",\n        DATUM[\"unknown\",\n            SPHEROID[\"unretrievable - using WGS84\",6378137,298.257223563]],\n        PRIMEM[\"Greenwich\",0],\n        UNIT[\"degree\",0.0174532925199433]],\n    AUTHORITY[\"EPSG\",\"3857\"],\n    UNIT[\"metre\",1]]\n```\n\nAny thoughts on why some fields are stripped?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49946267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50424703", "body": "Thanks for the info @sgillies. The differences in `gdalinfo` were related to an older version of rasterio that lived on our servers.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50424703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/6873073", "body": "@sgillies makes sense.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6873073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6873346", "body": "@sgillies done. also added the [enum to the setter](https://github.com/mapbox/rasterio/blob/9903d59a71e01285fe2632a0f4ed83a4f1dcc37d/rasterio/_io.pyx#L1576). That way if there's an invalid color interp, the enum will raise an error before calling the C function.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6873346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8904553", "body": "@sgillies gcs.csv\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/8904553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11165460", "body": "I love this consolidated effort \ud83d\udca9\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11165460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22696067", "body": "+1.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22696067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/33369910", "body": "Cool. That would be much simpler.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/33369910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mwtoews": {"issues": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/244", "title": "How to handle statistics", "body": "I like statistics in my rasters since they load nicely into various GIS software that I use, which includes ArcGIS. Without statistics (or the correct statistics) the rasters don't look correct in these software.\n\nUp to now, I generally need the help of osgeo.gdal to add/update band statistics after rasterio processing, e.g.:\n\n``` python\nds = gdal.Open(fname, gdal.GA_Update)\nfor i in range(ds.RasterCount):\n    ds.GetRasterBand(i + 1).ComputeStatistics(0)\nds = band = None  # save, close\n```\n\nHow could this be done with rasterio? A few ideas:\n- Have optional arguments for updatable rasters with `rasterio.open()`, e.g. `stats=True` or `approx_stats=True`, which are used when processing `close()`.\n- Add a method like `obj.calc_stats(approx=False)`, which can be manually called while the raster dataset is open. Should it return the four statistics that [ComputeStatistics](http://www.gdal.org/classGDALRasterBand.html#a48883c1dae195b21b37b51b10e910f9b) returns? Note that this data are also available through the metadata tags.\n- Start a `rio edit [--stats] [--approx_stats]` tool, similar [to this enhancement to gdal_edit.py](http://trac.osgeo.org/gdal/ticket/5805).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42161883", "body": "I'll admit I snagged the prototype for Shapely from PostGIS's [ST_Affine](http://postgis.refractions.net/docs/ST_Affine.html).\n\nThere are two more orderings of the same 6 coefficients used by other software:\n- `[a, b, xoff, d, e, yoff]` (i.e. contiguous representation of a 2D matrix), used by [JTS's AffineTransformation](http://www.vividsolutions.com/jts/javadoc/com/vividsolutions/jts/geom/util/AffineTransformation.html), and also [CGAL](http://doc.cgal.org/latest/Kernel_23/classCGAL_1_1Aff__transformation__2.html#ad0a7c3e145a0f9e073c0fb5a1ee9973c)\n- `[a, d, b, e, xoff, yoff]` used in the six-line [world file](https://en.wikipedia.org/wiki/World_file) for rasters\n\nI agree there should probably be harmony, since they are describing six coefficients for an affine transformation matrix. The common user does not like to look at these. I'm not sure which one to harmonise on, but I think I'm leaning towards the contiguous style for no particular reason.\n\nThe over-kill way would be to make a class to return the coefficients for various software.\n\n``` python\nfrom itertools import izip\n\n\nclass AffineMatrix(object):\n    a = e = 1.0  # diagonals\n    b = d = 0.0  # shears\n    xoff = yoff = 0.0  # offsets\n    _contiguous_names = ('a', 'b', 'd', 'e', 'xoff', 'yoff')\n\n    def __init__(self, **kwargs):\n        for kw in kwargs:\n            if kw in self._contiguous_names:\n                setattr(self, kw, kwargs.pop(kw))\n            else:\n                raise ValueError('invalid coefficient name: ' + kw)\n\n    @property\n    def as_contiguous(self):\n        return tuple([getattr(self, n) for n in self._contiguous_names])\n\n    def __iter__(self):\n        return izip(self._contiguous_names, self.as_contiguous)\n\n    def __eq__(self, other):\n        return list(self) == list(other)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def from_worldfile(self, fname):\n        with open(fname, 'r') as fp:\n            for coef in ['a', 'd', 'b', 'e', 'xoff', 'yoff']:\n                value = float(fp.readline())\n                setattr(self, coef, value)\n\n    @property\n    def for_shapely(self):\n        return (self.a, self.b, self.d, self.e, self.xoff, self.yoff)\n\n    def from_gdal(self, xoff, a, b, yoff, d, e):\n        self.xoff = xoff\n        self.a = a\n        self.b = b\n        self.yoff = yoff\n        self.d = d\n        self.e = e\n\n    @property\n    def for_gdal(self):\n        return (self.xoff, self.a, self.b, self.yoff, self.d, self.e)\n```\n\nand then:\n\n``` python\nm1 = AffineMatrix()\nm1.from_worldfile('path/to/file.jgw')\n\nwith rasterio.open('path/to/file.jpg') as r:\n    gt = r.get_transform()\nm2 = AffineMatrix()\nm2.from_gdal(*gt)\n\nprint(m1 == m2)  # True, unless there is some fine precision floating point errors\n```\n\n... etc.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42161883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42496478", "body": "@brendan-ward Nice steps. Opps, `self._contiguous_names` should have been `('a', 'b', 'xoff', 'd', 'e', 'yoff')`. In case anyone is wondering what happened to _c_, this was dropped from a 3D affine transformation matrix. The more general terms would be those adopted by JTS and CGAL, which are 0-base array indices: `('m00', 'm01', 'm02', 'm10', 'm11', 'm12')`. Unfortunately names like \"cellsize\" and \"shear\" can be misleading with rasters that are not grid-aligned. Although there is possibly a way to approximate the cell size in _dx_, and _dy_ terms of a rigid, non-sheared transform, using the inner _a_, _b_, _d_, _e_ terms.\n\n@AsgerPetersen adding forward and inverse coordinate transforms between world _x_, _y_ coordinates and pixel _row_, _col_ could be handy. Something like this:\n\n``` python\n    def pix2xy(self, row, col):\n        x = col * self.a + row * self.b + self.xoff\n        y = col * self.d + row * self.e + self.yoff\n        return x, y\n\n    def xy2pix(self, x, y):\n        det = self.a * self.e - self.b * self.d\n        col = (x * self.e - y * self.b +\n               self.b * self.yoff - self.xoff * self.e) / det\n        row = (-x * self.d + y * self.a +\n               -self.a * self.yoff + self.d * self.xoff) / det\n        return row, col\n```\n\n(Note that I have not checked this extensively, and could be improved to considered pixel cell corners vs cell centres). The inverse function `xy2pix` may throw `ZeroDivisionError` if the matrix has a zero determinant. Other software throw a `NoninvertibleTransformationException`, but I'd say _that_ is over-kill, and is rather unlikely for any realistic raster transform. Also, it will happily return non-existing raster coordinates like `(-1.0235810609493257, -3.5419503391180039)` if _x_, _y_ is outside the extents.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42496478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43457543", "body": "Yes, that seems natural and would fulfil this request. That is, allow `bidx` to accept a list of indices with a resulting 3D `out` array, where the first dimension is the base-0 band index.\n\nSo `read_band(src.indexes)` would read \"all\" the bands. I suppose that `read_band([1])` would also return a 3D array with shape `(1, height, width)` and `src.read_band([])` would return a non-sense shape `(0, height, width)`.\n\nI can probably plug away at this if this sounds good? I'd probably recursively call [`read_band`](https://github.com/mapbox/rasterio/blob/master/rasterio/_io.pyx#L517) to read each band index with the same `window` parameters. If `out` is supplied, check the 3 dimensions.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43457543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43571841", "body": "Definitely `band, row, col` order, since it is comparable with osgeo.gdal's DatasetReadAsArray result, and is also consistent with [C-ordering conventions](http://docs.scipy.org/doc/numpy/reference/internals.html#multidimensional-array-indexing-order-issues), where the slowest varying index (`band`) is the left-most index and the most rapidly varying index (`col`) is the right-most. Interestingly, `row, column, band` is analogous to [MDY date formats](https://en.wikipedia.org/wiki/Date_format_by_country), which is middle-endian.\n\nIf we are discussing a new higher-level `read()` method, should it include a `masked` option? (Similar to the procedure [described on your blog](http://sgillies.net/blog/2013/12/21/rasterio-windows-and-masks.html) to use `np.ma.masked_equal` with nodatavals). Default `None` would return a masked array if nodata is assigned and used for any pixel from any band, but return a regular array for complete data. And `masked` of either `True` / `False` would force return of a masked or regular Numpy array.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43571841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43877565", "body": "I've started a `read()` function with a not-yet-pull-requested commit https://github.com/mwtoews/rasterio/commit/b3ad562a4c36324dc08794ee28c00aa7f305423d\n\nDoes this look like something promising?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/43877565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45171264", "body": "@brendan-ward see if `read()` meets your expectations of behaviour. Note that I've implemented `masked=None` to choose if a masked array should be returned only if there is at least one non-None nodata value from any band, and if there is any pixel in the bands that would require masking. So this means that a single raster may yield either masked or non-masked arrays depending on what is being read (unless `masked` is either `True` or `False`). I have a test case for this, along the lines of:\n\n``` python\nwith rasterio.open('rasterio/tests/data/RGB.byte.tif') as s:\n    # window with 1 nodata value on band 3\n    a1 = s.read(window=((300, 320), (320, 330)))\n    # window without any missing data\n    a2 = s.read(window=((310, 330), (320, 330)))\n```\n\nyou should see that `a1` is a masked array and `a2` is not, just because the window is shifted slightly to the right. Is this a good thing?\n\n@AsgerPetersen NaN nodata values are now masked as expected, thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45171264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45676557", "body": "@AsgerPetersen yes, it is currently using the slowest option. There are actually several possibilities that the appropriateness of a mask could be determined.\n\nThe quickest method to determine if a masked array is to be used if at least one of the bands has a `nodata` value that is not `None`. This would also return consistent array types for different `window` ranges, if used.\n\nI'd argue against a `masked=False` default simply because when you view raster data in a GIS that has `nodata` values set for the appropriate bands, the `nodata` regions are transparent as expected. Furthermore, for the quantitative types like myself, statistical operations like `mean` only work as expected with masked arrays, and could potentially provide misleading results from non-masked arrays.\n\nSo, does changing the `has_nodata` logic determined using only using the `nodatavals` sound like a good change?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45676557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54237567", "body": "Actually, `shapes()` can also be adapted to use use a 32bit float buffer, via [GDALFPolygonize](http://www.gdal.org/gdal__alg_8h.html#a7a789015334d677afcbef67e5a6b4a7c)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/54237567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55216822", "body": "I'm no pro here, but should [CSLDestroy](http://www.gdal.org/cpl__string_8h.html#a5a39b9c5896a273cc6f06c1d5be93238) be called to `papszStrList` around [rasterio/_io.pyx#L1185](https://github.com/mapbox/rasterio/blob/4e53e3ca2d448e1abc3ad7522b3ac2292eacfb95/rasterio/_io.pyx#L1185)?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55216822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55325906", "body": "I get a `Segmentation fault` on linux x64 with GDAL 2.0.0dev, released 2014/04/16. And I see the [Travis CI fails](https://travis-ci.org/mapbox/rasterio/jobs/35040932) too. Adding `CSLDestroy` didn't appear to fix it, so I have no clue what's going on.\n\nOn a side note `win32` doesn't specify bitness http://stackoverflow.com/a/2145582/327026\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55325906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/9994711", "body": "Yup, this looks good.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9994711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22891841", "body": "Doesn't this unset the NoData value if -9999 is used?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22891841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22907139", "body": "agree, like `'c'` [kind](http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.kind.html) for complex types, which can use `ffinfo`. Just change `elif` to `else`, and this should work (`np.finfo(np.cdouble)`).\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22907139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22913400", "body": "add `'c'` for complex kinds, i.e. `np.dtype(dtype).kind in ('f', 'c')`\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/22913400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27924444", "body": "The default here is `True` (opposite of this PR), but the context of this mode should provide representative statistics info.\n\nAnd I think the `--not-masked` suggestion is good, but mention \"raw\" for the `help` part.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27924444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27925351", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/27925351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "omad": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/5f9c225cf764a59ab7c8bf5abe613dd8282b7b30", "message": "Fix link to TravisCI CloudFormation IAM template"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vincentschut": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/07e1150bbf4bbdb9a330aca08c1475699ee7082c", "message": "fix bug: raster width/height was swapped"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Juanlu001": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/8eefe57822e475277c958bb902761bb230b0a0b9", "message": "Add note to CHANGES"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/a8362085f2c08fad3347a2d5830a084ab75e1093", "message": "Add test"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "guydou": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/a60017360abdb032b0d1ec67dc574820931a8baf", "message": "Support GET parameters in URLs, fix #1121"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkaesberger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/mapbox/rasterio/commits/a7ee5ac9f42f988eb59a20eff85894f0825b0db9", "message": "Replace manual error checking with wrapper function"}, {"url": "https://api.github.com/repos/mapbox/rasterio/commits/0fbc6ac7cb188cddc30fff3d2d14b528e5a74ba4", "message": "Assign CRS to GCPs and raise more exceptions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "celoyd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29094970", "body": "Makes complete sense. Of the conflicting conventions, this seems like the less painful one to apply.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29094970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/53631031", "body": "@sgillies This is a `gdal_merge.py` replacement, right?\n\n`gdal_merge.py` lets you merge channels (bands) into one image with the `-separate` flag. For example, you might say `gdal_merge.py -co photometric=rgb -separate red.tif green.tif blue.tif -o rgb.tif`.\n\nI\u2019m of two minds about whether that belongs in the same tool: i.e., whether it\u2019s conceptually close enough to mosaicing to be thought of as just an option, or whether it should be split out.\n\nMy request here is simply that you aim your brain at this question and see what happens.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/53631031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164375", "body": "Making a note to myself to set this in my `~/.zshrc`.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/11164375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "prologic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29264866", "body": "IHMO I don't think it's a big deal to depend on six\nI do so in a few of my projects and it's quite a minimal dependency.\nPlus if you already have it installed by some other dependency than it's no\nproblems at all.\n\noverall if you plan on supporting both Python 2/3 six is the way to go and\nyou'll just end up duplicating six code if you don't use six.\n\ncheers\nJames\n\nJames Mills / prologic\n\nE: prologic@shortcircuit.net.au\nW: prologic.shortcircuit.net.au\n\nOn Tue, Nov 26, 2013 at 11:07 AM, Mike Toews notifications@github.comwrote:\n\n> Currently there is a very limited used of the six module dependency.\n> \n> In rasterio/**init**.py:\n> \n> from six import string_types\n> \n> Looking at the source codehttps://github.com/kelp404/six/blob/master/six.py#L31,\n> this function from the module can be replaced by:\n> \n> import sysif sys.version_info[0] >= 3:\n>     string_types = str,else:\n>     string_types = basestring,\n> \n> Or, an alternative solution is to define:\n> \n> if sys.version_info[0] >= 3:\n>     basestring = str\n> \n> and replace instances of string_types with basestring.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/sgillies/rasterio/issues/9\n> .\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29264866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30182237", "body": "No problems. I'll try to add this to rasterio soon. We have the code in our\nproject's codebase, just need to make it more rasterio-ish :)\n\nJames Mills / prologic\n\nE: prologic@shortcircuit.net.au\nW: prologic.shortcircuit.net.au\n\nOn Tue, Dec 10, 2013 at 7:27 AM, Sean Gillies notifications@github.comwrote:\n\n> I'm going to try to keep issues actionable and moving forward, so will\n> close this one. do send a pull request when ready!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/sgillies/rasterio/issues/1#issuecomment-30175196\n> .\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30182237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30632406", "body": "Congrats on a great release!\n\nJames Mills / prologic\n\nE: prologic@shortcircuit.net.au\nW: prologic.shortcircuit.net.au\n\nOn Mon, Dec 16, 2013 at 1:47 PM, Sean Gillies notifications@github.comwrote:\n\n> Closed #15 https://github.com/sgillies/rasterio/issues/15.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/sgillies/rasterio/issues/15\n> .\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30632406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AsgerPetersen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29273497", "body": "I was thinking more along the lines of using windowed read/write and just have a convenient way to align the processing chunks with the block size of the source raster.\n\nThis is not as fast as using block indexes directly, but it is significantly faster than making badly aligned reads, and it should prevent mistakes as you mention.\n\nMoreover this approach will always work regardless of differences in source and destination layout (for instance going from a tiled source to a scanline destination). At worst it will perform more or less as bad as choosing you own chunks.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29273497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29277850", "body": "Basically I want to be able to process my rasters in chunks which should match the block layout from the source raster. Preferably without having to know too much about the \"block\" concept from GDAL.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29277850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29369492", "body": "Assuming the raster for some reason cannot be loaded entirely into RAM windowed reads are necessary to allow efficient random access. In my opinion this is a very common use case. For instance when calculating zonal stats, getting single pixel value etc.\n\n#6 allows efficient processing of the entire raster in smaller chunks.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29369492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29416692", "body": "Yes, I think windowed write is the way to go. I am a little unsure whether it could maybe be a good idea to read the data out using windowed reads also.\n\nWith something like these methods (completely untested) exposed on RasterReader:\n\n``` python\ndef block_shapes(self):\n        \"\"\"Returns an ordered list of block shapes for all bands\"\"\"\n        cdef void *hband = NULL\n        cdef int *xsize, *ysize\n        if not self._block_shapes:\n            if not self._hds:\n                raise ValueError(\"Can't read closed raster file\")\n            for i in range(self._count):\n                hband = _gdal.GDALGetRasterBand(self._hds, i+1)\n                _gdal.GDALGetBlockSize(hband, xsize, ysize)\n                self._block_shapes.append( (xsize, ysize) )\n        return self._block_shapes\n\ndef get_chunks(self, bandix, chunk_shape = None):\n        block_shape = chunk_shape or self.block_shapes[bandix - 1]\n        cols = int(ceil(float(self.width) / block_shape[0]))\n        rows = int(ceil(float(self.height / block_shape[1]))\n        for c in xrange(cols):\n            yoffset = c * block_shape[0]\n            height = min(block_shape[0], self.height - yoffset)\n            r in xrange(rows):\n                xoffset = r * block_shape[1]\n                width = min(block_shape[1], self.width - xoffset)\n                yield (xoffset, yoffset, width, height)\n```\n\nWhich would then be used like this\n\n``` python\nwith rasterio.open('source.tif') as src:\n    kwargs = src.meta\n    with rasterio.open('destination.tif', 'w', **kwargs) as dst:\n        for window in src.get_chunks( 1 ):\n            data = src.read_band( 1, window)\n            dst.write_band( 1, data, window)\n```\n\nIf one want larger to process 2x2 blocks at a time:\n\n``` python\nwith rasterio.open('source.tif') as src:\n    kwargs = src.meta\n    with rasterio.open('destination.tif', 'w', **kwargs) as dst:\n        chunksize = map(lambda x: x*2, src.block_shapes[bandix - 1])\n        for window in src.get_chunks( 1, chunksize ):\n            data = src.read_band( 1, window)\n            dst.write_band(1, data, window)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29416692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30207168", "body": "I think your approach with the \"itertool-ish grouping\" gives a cleaner and more understandable interface.\n\nThe block concept is difficult for people who are not raster aficionados, and having a \"chunksize\" param on a \"blocks\" method will only make things more confusing.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30207168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30360796", "body": "The commit looks good, I think. I believe this will make rasterio a lot easier to use correctly.\n\nThank you! \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30360796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30514528", "body": "The second form looks nice, I think.\n\nShould the ul-method take a coordinate tuple then?\n\nLike:\nsrc.ul(window [0])\n\nSent from Samsung Mobile\n\n-------- Original message --------\nFrom: Sean Gillies notifications@github.com \nDate:  \nTo: sgillies/rasterio rasterio@noreply.github.com \nCc: Asger Skovbo Petersen mail@asgerpetersen.dk \nSubject: Re: [rasterio] Harmonize indexing throughout the API (#13) \n\n@AsgerPetersen after a little more thought: to get closer to numpy syntax should the windows be tuples like\n\n(row_start, row_stop, col_start, col_stop)\nor even\n\nwindow = ((row_start, row_stop), (col_start, col_stop))\n? The second form is directly convertible to numpy slices for 2d subsets:\n\narr[window[0]:window[1]]\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30514528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30526571", "body": "If the elements of a window specifies the coords of a certain pixel. Wouldn't it be logical if the same way of specifying pixel coords is used throughout the api?\n\nSent from Samsung Mobile\n\n-------- Original message --------\nFrom: Sean Gillies notifications@github.com \nDate:  \nTo: sgillies/rasterio rasterio@noreply.github.com \nCc: Asger Skovbo Petersen mail@asgerpetersen.dk \nSubject: Re: [rasterio] Harmonize indexing throughout the API (#13) \n\n@hobu thanks!\n\n@AsgerPetersen: windows don't apply to .ul(). It's there to serve the \"I have x,y coordinates in space, what pixel do they fit?\" question. But yes, it could accept either a tuple or x, y positional params.\n\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30526571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33155633", "body": "Not at all. I am sure Mapbox is a good home for a raster project. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33155633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42097911", "body": "Same goes for me. I would appreciate if you spell my name 'Asger Petersen'.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42097911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42294455", "body": "Whatever you decide to with, I think it is of critical importance to document the meaning of thee parameters. We cannot foresee all the different contexts which this api will be used in. \"gdal\", \"shapely\" and so on will only make sense for some people - and the rest will still need to understand the params themselves before they can safely use them with other APIs.\n\nThe AffineMatrix class by @mwtoews could be a nice way to help out people with this. Regarding this class I have a couple of questions:\n- Wouldn't it then be better to have rasterio return an AffineMatrix directly instead of the geotransform list?\n- The AffineMatrix should be able to transform coordinates?\n- It would be great if the AffineMatrix could expose the reverse geotransform.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42294455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44629443", "body": "One small comment:\nThere are some raster software packages out there which use NaN as the default nodata value. It kind of makes sense, but unfortunately it makes life a lot more difficult for us who want to check for nodata values :-)\n\nBy definition NaN is not equal to NaN, which will make comparisons like\n`np.ma.masked_where(out == nodatavals, out, copy=False)` not work as expected if nodataval is NaN.\n\nIf we want to support NaN as nodata, we will have to handle those cases seperately using something like:\n\n``` python\nif np.isnan( nodataval ):\n  np.ma.masked_where(np.isnan( out ), out, copy=False)\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44629443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44629501", "body": "@brendan-ward please see my comment on #83 regarding NaN as nodata value.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/44629501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45592277", "body": "@mwtoews I am a little unsure about having `masked=None` as the default behaviour. These are my thoughts:\n\nIt is the slowest of the three options (potentially adding `nbands x width x height` comparisons to the cost of using `masked=True`), and the most complicated functionality of the three because the cost and the return type depends on so many things.\n\nMy guess is that the unexperienced user would expect `masked=False` to be the default behaviour. And I can't really think of a scenario where I would go with `masked=None` myself.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45592277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45709746", "body": "@mwtoews @brendan-ward Changing `masked=None`to return a masked array if at least one of the bands has a `nodata` value that is not `None` is a very good solution. It is going to be less surprising to the users of the API and it will be faster.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45709746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51163295", "body": "@sgillies did you change your mind about a code sprint?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/51163295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/6139025", "body": "@sgillies I prefer to split big rasters into separate tiffs and then process these datasets in parallel if the algorithm allows. This approach scales well, performs well (for large enough processing jobs), and it saves me from a lot of headache :-)\n\nRegarding the example above: I guess the mentioned IOErrors come from trying to update the destination raster concurrently, which is generally not a good idea. Then having to reprocess the block every time the writing fails seems like a waste of good CPU cycles :-) Also, for large tiffs there will be a lot of overhead opening the files once for each block.\n\nI think a better pattern for parallelization would be 1 thread reading, n threads processing and 1 thread writing. Unfortunately I don't know Python multiprocessing well enough to shake an example out of my sleeve.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/6139025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9493394", "body": "@sgillies Much better. Still, I think that it is not clear that the \"output array\" will not necessarily hold the final result. I have been reading Numpy docs, and I haven't been able to find this fact about ufuncs documented anywhere.  \n\nStating directly at the \"out\" parameter that it shouldn't be used as result would probably prevent a lot of hair pulling. Maybe \"output array\" could be changed to just \"array\". And how about adding something like this to the doc for \"out\": \"Note: The method result may be a view on this array.\" \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9493394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9557400", "body": "That is very clear. Thank you @sgillies  \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9557400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "hobu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29593268", "body": "gdal.py has never really had a successful interface to the warper. VRT is probably the most flexible interface to the warper at this time. I will say it'd be damn handy to be able to define your warp kernels in python and have GDAL use them. That's something that no one's done AFAIK.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/29593268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30512796", "body": ":+1: on the harmonization of ordering.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/30512796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35205130", "body": "If you get stuck make sure to holler. \n\n> On Feb 15, 2014, at 5:45 PM, Sean Gillies notifications@github.com wrote:\n> \n> Work started in https://github.com/mapbox/rasterio/tree/issue12. It's a bit hairy. Leveling up on Cython and C++.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35205130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35628420", "body": "It should work on 64bit platforms assuming things are aligned and your data types are correct. If it doesn't, it's something that should be addressed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35628420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35641475", "body": "Yep, that's a note about data types. Numpy has the same issue of the potential of sizeof(long) != sizeof(void*) to worry about too. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/35641475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "twpayne": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33483209", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/33483209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brunosan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34477475", "body": "The reason I flagged this is to be able to insert numbers to trace back raw values.\n\nE.g. ndvi values range [-1..1] to maximize range in 8 bits I convert to 8bits with:\n\n``` python\nnorm=ndvi-ndvi.min()\nnmax=norm.max()\nnorm=norm*256/nmax\nnorm=norm.astype(rasterio.uint8)\n```\n\nand now they go from [0..255], but If Ineed to calculate the raw values I need to add a couple of number in the meta: `ndvi_min` and `ndvi_max` so I can correlate to the real NDVI. Also adding where the `ndvi=0` corresponds in the 8bit scale [`255*(-ndvi.min())/(ndvi.max()-ndvi.min())`]\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/34477475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ThomasG77": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38365271", "body": "Thanks for your feedback about this.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/38365271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dharhas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42426812", "body": "@sgillies, Great, I'll try that. Is there a way to build the vrt from within rasterio or would I need to open a subprocess and call the gdal command line utility?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/42426812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "springmeyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45559672", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/45559672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "mhearne-usgs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48366242", "body": "I can't find any other installations - I just uninstalled rasterio and reinstalled it - I'm appending\n an install log.  I looked at it - nothing jumped out at me.\n\nDownloading/unpacking rasterio\n  Running setup.py (path:/private/var/folders/4t/g5lgxtd57g71_cwqzrpmxcpwl9wpdz/T/pip_build_mhearne/rasterio/setup.py) egg_info for package rasterio\n\nRequirement already satisfied (use --upgrade to upgrade): Numpy in ./anaconda/lib/python2.7/site-packages (from rasterio)\nRequirement already satisfied (use --upgrade to upgrade): setuptools in ./anaconda/lib/python2.7/site-packages/setuptools-3.6-py2.7.egg (from rasterio)\nInstalling collected packages: rasterio\n  Running setup.py install for rasterio\n\n```\nbuilding 'rasterio._io' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_io.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_io.o\nIn file included from rasterio/_io.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: \"Using deprecated NumPy API, disable it by \"          \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n#warning \"Using deprecated NumPy API, disable it by \" \\\n ^\nrasterio/_io.c:5310:18: warning: assigning to 'char *' from 'const char *' discards qualifiers [-Wincompatible-pointer-types]\n  __pyx_v_proj_b = __pyx_v_proj;\n                 ^ ~~~~~~~~~~~~\nrasterio/_io.c:11094:19: warning: assigning to 'GDALColorEntry *' from 'const GDALColorEntry *' discards qualifiers [-Wincompatible-pointer-types]\n    __pyx_v_color = GDALGetColorEntry(__pyx_v_hTable, __pyx_v_i);\n                  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from rasterio/_io.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:26:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__multiarray_api.h:1629:1: warning: unused function '_import_array' [-Wunused-function]\n_import_array(void)\n^\nIn file included from rasterio/_io.c:341:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ufuncobject.h:327:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__ufunc_api.h:241:1: warning: unused function '_import_umath' [-Wunused-function]\n_import_umath(void)\n^\n5 warnings generated.\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_io.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_io.so\nbuilding 'rasterio._copy' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_copy.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_copy.o\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_copy.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_copy.so\nbuilding 'rasterio._features' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_features.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_features.o\nIn file included from rasterio/_features.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: \"Using deprecated NumPy API, disable it by \"          \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n#warning \"Using deprecated NumPy API, disable it by \" \\\n ^\nrasterio/_features.c:3706:81: warning: variable '__pyx_v_rows' is uninitialized when used here [-Wuninitialized]\n    __pyx_v_hdsout = GDALCreate(__pyx_v_hrdriver, __pyx_k_output, __pyx_v_cols, __pyx_v_rows, 1, ((GDALDataType)1), NULL);\n                                                                                ^~~~~~~~~~~~\nrasterio/_features.c:3445:19: note: initialize the variable '__pyx_v_rows' to silence this warning\n  int __pyx_v_rows;\n                  ^\n                   = 0\nrasterio/_features.c:3706:33: warning: variable '__pyx_v_hrdriver' is uninitialized when used here [-Wuninitialized]\n    __pyx_v_hdsout = GDALCreate(__pyx_v_hrdriver, __pyx_k_output, __pyx_v_cols, __pyx_v_rows, 1, ((GDALDataType)1), NULL);\n                                ^~~~~~~~~~~~~~~~\nrasterio/_features.c:3447:25: note: initialize the variable '__pyx_v_hrdriver' to silence this warning\n  void *__pyx_v_hrdriver;\n                        ^\n                         = NULL\nIn file included from rasterio/_features.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:26:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__multiarray_api.h:1629:1: warning: unused function '_import_array' [-Wunused-function]\n_import_array(void)\n^\nIn file included from rasterio/_features.c:341:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ufuncobject.h:327:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__ufunc_api.h:241:1: warning: unused function '_import_umath' [-Wunused-function]\n_import_umath(void)\n^\nrasterio/_features.c:6554:18: warning: unused function '__pyx_f_8rasterio_9_features_geometry' [-Wunused-function]\nstatic PyObject *__pyx_f_8rasterio_9_features_geometry(void *__pyx_v_geom) {\n                 ^\n6 warnings generated.\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_features.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_features.so\nbuilding 'rasterio._drivers' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_drivers.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_drivers.o\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_drivers.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_drivers.so\nbuilding 'rasterio._warp' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_warp.cpp -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_warp.o\nIn file included from rasterio/_warp.cpp:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: \"Using deprecated NumPy API, disable it by \"          \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n#warning \"Using deprecated NumPy API, disable it by \" \\\n ^\nIn file included from rasterio/_warp.cpp:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:26:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__multiarray_api.h:1629:1: warning: unused function '_import_array' [-Wunused-function]\n_import_array(void)\n^\nIn file included from rasterio/_warp.cpp:341:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ufuncobject.h:327:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__ufunc_api.h:241:1: warning: unused function '_import_umath' [-Wunused-function]\n_import_umath(void)\n^\n3 warnings generated.\n/usr/bin/clang++ -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_warp.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_warp.so\nchanging mode of build/scripts-2.7/rasterio.insp from 644 to 755\nchanging mode of build/scripts-2.7/rio_cp from 644 to 755\nchanging mode of build/scripts-2.7/rio_insp from 644 to 755\nchanging mode of /Users/mhearne/anaconda/bin/rasterio.insp to 755\nchanging mode of /Users/mhearne/anaconda/bin/rio_cp to 755\nchanging mode of /Users/mhearne/anaconda/bin/rio_insp to 755\n```\n\nSuccessfully installed rasterio\nCleaning up...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48366242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48368438", "body": "That is how I installed GDAL.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48368438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48369831", "body": "Well, it would be if it helped with the rasterio linking problem, which it doesn't seem to.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48369831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48385274", "body": "Sorry, I didn't explain myself very well.  From the beginning, I have had a GDAL that was installed by using \"conda install\".  My point was that seems not to be the problem.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48385274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48519927", "body": "So it turns out I had a Framework install of GDAL, which I have now deleted, so as to clear out any potentially confusing libraries.\n\nSo, starting with a \"clean\" (GDA-free) system, I installed gdal using conda, which among other things, copies the following library files to ~/anaconda/lib: libgdal.1.dylib, libgdal.a, libgdal.dylib, libgdal.la.\n\nI then \"pip install rasterio\" (build log appended at the bottom), which seems to successfully build, and also seems to be finding the correct path to libgdal.\n\nHowever, when I import rasterio, I get the results directly below, with the \"image not found\" error.\n\nThe question: Why is it that the rasterio _build_ process can find the gdal library, but the runtime rasterio imports can't? \n\n###################rasterio import error#####################\n\n## In [1]: import rasterio\n\nImportError                               Traceback (most recent call last)\n<ipython-input-1-34708b297916> in <module>()\n----> 1 import rasterio\n\n/Users/mhearne/anaconda/lib/python2.7/site-packages/rasterio/**init**.py in <module>()\n      8 \n      9 from rasterio.five import string_types\n---> 10 from rasterio._copy import RasterCopier\n     11 from rasterio._io import RasterReader, RasterUpdater\n     12 from rasterio._io import eval_window, window_index, window_shape\n\nImportError: dlopen(/Users/mhearne/anaconda/lib/python2.7/site-packages/rasterio/_copy.so, 2): Library not loaded: libgdal.1.dylib\n  Referenced from: /Users/mhearne/anaconda/lib/python2.7/site-packages/rasterio/_copy.so\n  Reason: image not found\n###################rasterio import error#####################\n\n###################rasterio build log#####################\nDownloading/unpacking rasterio\n  Running setup.py (path:/private/var/folders/4t/g5lgxtd57g71_cwqzrpmxcpwl9wpdz/T/pip_build_mhearne/rasterio/setup.py) egg_info for package rasterio\n\nRequirement already satisfied (use --upgrade to upgrade): Numpy in ./lib/python2.7/site-packages (from rasterio)\nRequirement already satisfied (use --upgrade to upgrade): setuptools in ./lib/python2.7/site-packages/setuptools-3.6-py2.7.egg (from rasterio)\nInstalling collected packages: rasterio\n  Running setup.py install for rasterio\n\n```\nbuilding 'rasterio._io' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_io.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_io.o\nIn file included from rasterio/_io.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: \"Using deprecated NumPy API, disable it by \"          \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n#warning \"Using deprecated NumPy API, disable it by \" \\\n ^\nrasterio/_io.c:5310:18: warning: assigning to 'char *' from 'const char *' discards qualifiers [-Wincompatible-pointer-types]\n  __pyx_v_proj_b = __pyx_v_proj;\n                 ^ ~~~~~~~~~~~~\nrasterio/_io.c:11094:19: warning: assigning to 'GDALColorEntry *' from 'const GDALColorEntry *' discards qualifiers [-Wincompatible-pointer-types]\n    __pyx_v_color = GDALGetColorEntry(__pyx_v_hTable, __pyx_v_i);\n                  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from rasterio/_io.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:26:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__multiarray_api.h:1629:1: warning: unused function '_import_array' [-Wunused-function]\n_import_array(void)\n^\nIn file included from rasterio/_io.c:341:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ufuncobject.h:327:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__ufunc_api.h:241:1: warning: unused function '_import_umath' [-Wunused-function]\n_import_umath(void)\n^\n5 warnings generated.\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_io.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_io.so\nbuilding 'rasterio._copy' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_copy.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_copy.o\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_copy.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_copy.so\nbuilding 'rasterio._features' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_features.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_features.o\nIn file included from rasterio/_features.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: \"Using deprecated NumPy API, disable it by \"          \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n#warning \"Using deprecated NumPy API, disable it by \" \\\n ^\nrasterio/_features.c:3706:81: warning: variable '__pyx_v_rows' is uninitialized when used here [-Wuninitialized]\n    __pyx_v_hdsout = GDALCreate(__pyx_v_hrdriver, __pyx_k_output, __pyx_v_cols, __pyx_v_rows, 1, ((GDALDataType)1), NULL);\n                                                                                ^~~~~~~~~~~~\nrasterio/_features.c:3445:19: note: initialize the variable '__pyx_v_rows' to silence this warning\n  int __pyx_v_rows;\n                  ^\n                   = 0\nrasterio/_features.c:3706:33: warning: variable '__pyx_v_hrdriver' is uninitialized when used here [-Wuninitialized]\n    __pyx_v_hdsout = GDALCreate(__pyx_v_hrdriver, __pyx_k_output, __pyx_v_cols, __pyx_v_rows, 1, ((GDALDataType)1), NULL);\n                                ^~~~~~~~~~~~~~~~\nrasterio/_features.c:3447:25: note: initialize the variable '__pyx_v_hrdriver' to silence this warning\n  void *__pyx_v_hrdriver;\n                        ^\n                         = NULL\nIn file included from rasterio/_features.c:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:26:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__multiarray_api.h:1629:1: warning: unused function '_import_array' [-Wunused-function]\n_import_array(void)\n^\nIn file included from rasterio/_features.c:341:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ufuncobject.h:327:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__ufunc_api.h:241:1: warning: unused function '_import_umath' [-Wunused-function]\n_import_umath(void)\n^\nrasterio/_features.c:6554:18: warning: unused function '__pyx_f_8rasterio_9_features_geometry' [-Wunused-function]\nstatic PyObject *__pyx_f_8rasterio_9_features_geometry(void *__pyx_v_geom) {\n                 ^\n6 warnings generated.\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_features.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_features.so\nbuilding 'rasterio._drivers' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_drivers.c -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_drivers.o\n/usr/bin/clang -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_drivers.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_drivers.so\nbuilding 'rasterio._warp' extension\n/usr/bin/clang -fno-strict-aliasing -I/Users/mhearne/anaconda/include -arch x86_64 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include -I/Users/mhearne/anaconda/include -I/Users/mhearne/anaconda/include/python2.7 -c rasterio/_warp.cpp -o build/temp.macosx-10.5-x86_64-2.7/rasterio/_warp.o\nIn file included from rasterio/_warp.cpp:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1761:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: \"Using deprecated NumPy API, disable it by \"          \"#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n#warning \"Using deprecated NumPy API, disable it by \" \\\n ^\nIn file included from rasterio/_warp.cpp:340:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:26:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__multiarray_api.h:1629:1: warning: unused function '_import_array' [-Wunused-function]\n_import_array(void)\n^\nIn file included from rasterio/_warp.cpp:341:\nIn file included from /Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/ufuncobject.h:327:\n/Users/mhearne/anaconda/lib/python2.7/site-packages/numpy/core/include/numpy/__ufunc_api.h:241:1: warning: unused function '_import_umath' [-Wunused-function]\n_import_umath(void)\n^\n3 warnings generated.\n/usr/bin/clang++ -bundle -undefined dynamic_lookup -L/Users/mhearne/anaconda/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.5-x86_64-2.7/rasterio/_warp.o -L/Users/mhearne/anaconda/lib -L/Users/mhearne/anaconda/lib -lgdal -o build/lib.macosx-10.5-x86_64-2.7/rasterio/_warp.so\nchanging mode of build/scripts-2.7/rasterio.insp from 644 to 755\nchanging mode of build/scripts-2.7/rio_cp from 644 to 755\nchanging mode of build/scripts-2.7/rio_insp from 644 to 755\nchanging mode of /Users/mhearne/anaconda/bin/rasterio.insp to 755\nchanging mode of /Users/mhearne/anaconda/bin/rio_cp to 755\nchanging mode of /Users/mhearne/anaconda/bin/rio_insp to 755\n```\n\nSuccessfully installed rasterio\nCleaning up...\n###################rasterio build log#####################\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48519927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48531323", "body": "Erm, I don't know if my environment is activated or not.  How do you tell?\n\nAt any rate, I set my DYLD_LIBRARY_PATH variable, and imported rasterio with no errors.  So, success!  I'll set that variable in my bash profile and then try to ping the continuum guys to figure out where that's supposed to be set.\n\nThanks - cool code!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48531323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48668298", "body": "See this thread I started with the conda maintainers.  I don't have a good sense for how hard it is to create/maintain a conda package.  I'm willing to help look into it.\n\nhttps://groups.google.com/a/continuum.io/forum/#!topic/conda/G-o4Io7tigo\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48668298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48668823", "body": "There is this:  Haven't read in detail...\n\nhttp://conda.pydata.org/docs/build.html\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48668823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48852738", "body": "@sgillies Rich Signell has made a Linux build of rasterio.  (https://binstar.org/rsignell/rasterio) Do you plan on making one for other platforms - perhaps you could coordinate with him?\n\nAlso, the conda recipe above does not seem to include the use of \"install_name_tool\" as indicated in the thread I referenced before:\n\nhttps://groups.google.com/a/continuum.io/forum/#!topic/conda/G-o4Io7tigo\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48852738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rsignell-usgs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48933183", "body": "@sgillies, @kapadia and @mhearne-usgs .   I checked into this, and actually the scripts _are_ there in the conda module.  Not sure what we were doing wrong when we tried it, but they seem okay -- please try them out.   I also just uploaded the latest version of rasterio for mac.    So on both Linux and Mac, you should be able to do:\n\n```\nconda config --add channels https://conda.binstar.org/rsignell\nconda install rasterio\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/48933183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "scw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49132020", "body": "Awesome!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49132020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hrwgc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49488451", "body": "looks great @sgillies thanks!\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49488451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52360622", "body": "if bare text, new line for every tile would be fine. A GeoJSON output option could also be useful, though not for my immediate use case for it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/52360622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "IamJeffG": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49530479", "body": "Fiona's syntax seems very appropriate.  One thing I can't tell is whether subdatasets can ever be nested (I can't find any example of it...) but even if it ends up that this happens, the Fiona syntax would still support it.\n\nAs far as I can tell, a \"subdataset\" is GDAL's name for an HDF4 \"Scientific Data Set\" (SD or SDS).  It also appears that HDF5 no longer uses SDS: http://www.hdfgroup.org/h5h4-diff.html\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/49530479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/9991185", "body": "Good, but it's unclear that the condition about matching nodata datatypes applies even when the caller set `masked=None`.  The logic is getting complex enough that we might even want to enumerate a bullet list of the three possible return scenarios.\n\n**Edit:** Would it be more (or less) intuitive to the caller to always return a masked array when `masked=True` -- the exact same cases as we did before -- except that mask is necessarily blank when the nodata values are uncooperative.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9991185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9991218", "body": "Also there's a very similar message about masking below, in the `_read` docstring (line 774).  I think it has nothing to do with that function and should be removed.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9991218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9991286", "body": "nitpick: I think of a singular nodata value as applying to each band, not as a list of nodata vals on the dataset as a whole.  Maybe the difference is immaterial (and I don't know how the native formats store it) but consider clarifying line 595 \"or will be masked if any of _the dataset's bands' \"nodata\" values_ are not `None`.\"\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9991286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9993995", "body": "Sounds good.  Thanks much, @sgillies !\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9993995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "etiennebr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50762977", "body": "This happens in IPython notebook, but not in the shell (rasterio works fine in the shell). \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50762977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50795320", "body": "Ha !  Indeed I got confused by the error message. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50795320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50799773", "body": "thanks for the quick reply. I'm not sure I even understand why there's an `ERROR`. Is it the absence of a SRS ? \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50799773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50921531", "body": "For the record, I also receive a couple of error-warnigns (warnirors or erronings ?) on writing. rasterio definitely doesn't like unreferenced raster. \n\n```\nwith rasterio.drivers(CPL_DEBUG=True):\n    with rasterio.open(outraster, 'w', **meta) as dst:\n        dst.write_band(1, outarray.astype(rasterio.uint8))\n```\n\nI receive:\n`FutureWarning: GDAL-style transforms are deprecated and will not be supported in Rasterio 1.0.\n  transform = guard_transform(transform)`\n`WARNING:GDAL:CPLE_NotSupported in Driver GTiff does not support AFFINE creation option`\n`ERROR:GDAL:CPLE_NotSupported in No translation for an empty SRS to PROJ.4 format is known.`\n\nI must however conclude after a couple of hours of usage that rasterio is pretty handy to avoid managing all the flip-flop of raster to array conversion. Hopefully it will become a must for geospatial raster manipulation in python just like the [`raster` package](https://r-forge.r-project.org/projects/raster/) for R.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/50921531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55434713", "body": "Sounds great, I'll try it !\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55434713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "fgassert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55293838", "body": "+1 on the downgrade from ERROR. Just spent an hour trying to fix it before finding this thread.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55293838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jesserobertson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55557693", "body": "Sorry in Perth, Australia, so about as far away as you can get! :)\n\nActually, it seems to be unrelated to the bounding box issue.\n\nHere's a minimal example:\n\n``` python\nimport geojson\nfrom rasterio.features import rasterize\nfrom shapely.geometry import Polygon\n\n# Params for raster image with same bounding box (copied from another image)\nbounds = (119.52, -21.6, 120.90, -20.5)\nbounding_poly = shapely.geometry.Polygon(\n    ((bounds[0], bounds[1]), (bounds[2], bounds[1]), \n     (bounds[2], bounds[3]), (bounds[0], bounds[3])))\nrparams = dict(\n    transform=[119.51991271972656, 0.0002777777845000003, 0.0, \n               -20.49996440274175, 0.0, -0.0002777777845000005],\n    out_shape=(3961, 4969)\n)\n\n# Make raster image, burn in vector data which lies completely inside the bounding box\npoly = Polygon(((120, -21), (120.5, -21), (120.5, -21.2), (120, -21.2)))\nrasterize([geojson.dumps(poly)], **rparams)  # Python halts and catches fire\n```\n\nHere's a picture of what I'm trying to do: burn the blue box into a raster bounded by the red box\n\n``` python\n%pylab inline\nfrom descartes import PolygonPatch\n\naxes = gca()\n\naxes.add_patch(\n    PolygonPatch(bounding_poly,\n                 facecolor='white',\n                 edgecolor='red'))\ngca().add_patch(\n    PolygonPatch(poly,\n                 facecolor='blue',\n                 alpha=0.6))\n\nxlim(0.99 * bounds[0], 1.01 * bounds[2])\nylim(1.01 * bounds[1], 0.99 * bounds[3])\n```\n\n![boxes](https://cloud.githubusercontent.com/assets/796836/4267892/0b2ed592-3ca5-11e4-94d5-ff3542e829f8.png)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55557693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55558256", "body": "Also, while I'm thinking about it, could I just clarify the documentation for rasterize?\n\nYou mention 'Fiona style geometry objects' but this seems to trip up a lot of people who are not familiar with Fiona. Am I correct in thinking that this just needs to be an iterator over geoJSON strings generated by `geojson.dumps`?\n\nBy way of background - I'm working for the CSIRO here in Australia on geological data integration and we have just got back from a trip around the geological surveys, where we're encouraging them to use Python (and shapely/owslib) with OGC webservices for their scientific analysis. We had a pretty good response to using shapely (we did some examples munging up national remote sensing data with mapped geology, all via webservice), and got them up and running with your libraries.\n\nYou might also be interested in our attempts to put together a bit of a library at [pySISS](https://github.com/pysiss/pysiss), which mostly leans on OWSLib/Shapely with some extra goodies for dealing with GeoSciML and some datatypes like boreholes which are not traditionally GIS things. </shameless_plug>\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55558256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55833318", "body": "Excellent, thanks for this @sgillies.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/55833318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56888892", "body": "@davenquinn I suggest you don't use pixel-by-pixel transformations? That should remove your PIL dependency. \n\nWe do this lots as well and I usually just use `rasterio.features.rasterize` to generate a mask array, then apply that mask to each band. A snippet of that code is below. \n\nWhere I work people prefer separate geotiff files, but you could tweak to turn into your [nbands, width, height] array.\n\n``` python\nimport rasterio\nimport rasterio.features\nfrom shapely.ops import cascaded_union\n\n# Products to subset\naster_products = [\n    'AlOH_group_composition',\n    'Ferric_oxide_composition',\n    'MgOH_group_composition'\n]\nbounds = (119.52, -21.6, 120.90, -20.5)\nmask_value = 1\nmasked_images = {}\n\n# Polygons to burn\n# Each unit.shape is a shapely Polygon\npolygons = cascaded_union([u.shape for u in units])\n\n# Burn polygons to image, apply masks\nwith rasterio.drivers():\n    # Generate mask using first image for metadata\n    with rasterio.open(aster_products[0] + '.geotiff') as src:\n        mask = rasterio.features.rasterize(\n            [poly.__geo_interface__ for poly in polygons], \n            out_shape=src.shape, \n            transform=src.transform)\n\n    # Make masked array for each \n    for product in aster_products:\n        with rasterio.open(product + '.geotiff') as src:\n            masked_images[product] = \\\n                numpy.ma.MaskedArray(src.read_band(1), \n                                     mask=numpy.logical_not(mask))\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56888892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56889031", "body": "Actually, just looking at your todos, this code will mean you don't have to punch out the interiors of your polygons either...\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56889031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56901517", "body": "> I'm currently working with high-res planetary images\n\nFair enough. I'm usually pulling the raster data from a Web Coverage Service, so have normally cut out a bounding box and the few bands of the piece that I'm interested in before sub-setting it further.\n\nThe windowed read issue for large images is something I'd like to address though. You could use shapely and run a check for polygons within your current window, although I expect that the 'make the mask once and apply multiple times' will be more efficient when you've got 400 bands. \n\nIn that case it might be better to create another GeoTIFF with the mask array and operate over the same windows in both your mask array and your target data.\n\n@sgillies, do you have any plans for something like a rasterio cookbook, where we could stick these recipes which have external dependencies (e.g. shapely)?\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56901517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davenquinn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56892133", "body": "Yeah, I had my eye on `features.rasterize` to create the mask instead of PIL. They do essentially the same thing, but the non-PIL version is definitely more elegant/complete. (I didn't realize that `features.rasterize` handled crs transforms too, but I guess that was just lack of close reading on my part). I'll incorporate that.\n\nMy solution differs a bit in that it returns an array much smaller than the input raster (and the corresponding offset). I'm currently working with high-res planetary images (and sometimes reading small areas from ~400-band hyperspectral images) so it's kind of overkill to read the entire band and mask out the shape after the fact \u2014 I only read the portion of the band(s) that are covered by the feature.\n\nIt could be nice to have a `features.extract` function in `rasterio` to do what we are both doing...a `windowed_read` kwarg could allow the extraction of small windows instead of the entire dataset:\n\n``` python\nwith rasterio.open(dataset) as img:\n    array = img.extract_features(\n        [p.__geo_interface__ for p in polygons],\n        indexes=img.indexes, # read all bands, default?\n        windowed_read=True, # don't return the entire extent of the dataset\n        feature_transform=a_crs_mapping) # If the features are projected differently from the dataset\n```\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56892133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56908376", "body": "What I'm doing right now:\n1. Rasterize a single-band mask (the size of the dataset) for each polygon I want to extract.\n2. Trim the mask down to the size of the `[mask==True]` area and record the offsets.\n3. Read from the dataset over a window defined by the shape and offset of the mask.\n4. Extrude the mask to three dimensions to cover the number of bands read, and apply it to create a masked array.\n\nSo I do currently create a full-size mask for each feature (which is not ideal) but quickly trim it down to the proper size. Some optimization could probably be achieved by reversing 1. and 2. but I want to make sure I have test coverage first. With this, I expect it would be efficient to individually make a mask and do a windowed read even for large numbers of features.\n\nIf we don't want to add the `shapely` dependency, we could create an extraction function that accepts only polygons in pixel coordinates; it would then be the domain of the user to transform mapped coordinates (in whatever crs) to pixel-referenced coordinates. It would still be helpful to put all the masking under the hood.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/56908376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/57027650", "body": "The functions I have written so far (and what I envision as the most generally applicable case) is essentially that proposed by @brendan-ward above. My steps 1-4 above are repeated independently for each feature. I'm currently using a function that takes a singular feature and returns a single masked array (with the shape referred to above)...but it could just as well be an iterator too. \n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/issues/comments/57027650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "synflyn28": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/9490328", "body": "Thanks Sean! This is a great example, though I'm thinking I'm letting gdalwarp do some assumption magic for my specific usecase. What I want to do simply take a raster with a given coordinate system (such as LCC) and then convert it into another one like WGS:84. With gdalwarp I don't mess with the any array dimensions and I let GDAL do all the destination optimization. I believe what I'm wanting to accomplish is what you mentioned as a TODO in your blog post here: http://sgillies.net/blog/2014/02/25/warping-images-with-rasterio.html\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/9490328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dmwelch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/18247946", "body": "@sgillies: `kwargs` isn't used in `_calculate_default_transform` and can be removed, yes? ;)\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/18247946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "anandthakker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/24910668", "body": "> You think you've found something? We believe you\r\n\r\n\ud83d\udcaf ", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/24910668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "QuLogic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/comments/26830932", "body": "This seems to be missing the re-assignment part, so probably is never set for anything.", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/comments/26830932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "schwehr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59791533", "body": "I would like to do a vsigcs or vsigs, but it will be a while before I get to it.\n", "reactions": {"url": "https://api.github.com/repos/mapbox/rasterio/pulls/comments/59791533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}