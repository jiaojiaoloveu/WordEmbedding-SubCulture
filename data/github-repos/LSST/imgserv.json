{"_default": {"1": {"kennywlo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f2a825648ad5fe824d9c060f5d4ab7b4abb0718e", "message": "Merged"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "message": "Merge branch 'tickets/DM-12104'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/53fdc8a74c8dae79435b9e85278bc371700e6da8", "message": "Add request validation by JSON Schema as config switch to CLI_v1"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83cc0800cbbfb88bf24453bd8173b83ff9992b25", "message": "Merge branch 'tickets/DM-11742'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e9a269b4de8beb937ad4963c88ec1a147d8c775b", "message": "Support skymap API in imageREST_v1"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "message": "Merge branch 'tickets/DM-12035'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "message": "Cache instances of butler for subsequent requests"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "message": "Use MemFileManager to write image data to fits file in memory, instead of temp file, before passing back as response."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62d757fc4cede065902a22a23aaa1bec800ff55f", "message": "Merging"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7b2a5707bab53ce5f63e04a063f298b15c6cf143", "message": "Merge branch 'tickets/DM-9929'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/963ab87c819e6dee053c9d5c037d885d42302cf3", "message": "Implemented imageREST_v1 API that enables support for VO interfaces and cutout\nrequirements from SUIT team, with imageREST_v0 API to be deprecated."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "message": "Merged conflicts"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "message": "Merge branch 'tickets/DM-10807'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "message": "Merge branch 'tickets/DM-10908'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/39555dea2e07bb46148f4fdcd33225a73ee26271", "message": "Re-factor the core of ImageServ into getimage module with ImageGetter Class."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c8665952cff0fa326441b94f91b2dc2764e1f83d", "message": "Merge branch 'tickets/DM-10441'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "message": "Fix centering issue with cutout size specified in Ang degrees"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/23ec58ab060b80c249bcfc74e371414634fa7e0d", "message": "Merge branch 'tickets/DM-10364'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "message": "Fix missing wcs header and off center issues in image cutouts."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "message": "Merge branch 'tickets/DM-9928'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/51f04bed3fa54d6b6a88e5396baab17adbba80d7", "message": "Merge branch 'tickets/DM-9928' of https://github.com/lsst/dax_imgserv into tickets/DM-9928"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "message": "Merge branch 'tickets/DM-9928'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "message": "Add bug fixes for DM-9631. Output log messages to file. Load\nconfiguration from json file. Add static, templates, and config folders\nfor imgserv as flask app as well as the default contents."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4292d3863a62dff61817b30fa41aef64130c1d55", "message": "Fix root path"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e99d2d86e97428cf9e65f65531166ecad2a828eb", "message": "Fixes"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "message": "Add bug fixes for DM-9631. Output log messages to file. Load\nconfiguration from json file. Add static, templates, and config folders\nfor imgserv as flask app as well as the default contents."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "message": "Merge branch 'master' of https://github.com/lsst/dax_imgserv"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/384eb253f5e898e9c676a6635dfa18709df536e5", "message": "Merge branch 'tickets/DM-9631'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/80cb4f205a55d5b88abf3f84257aeb3077939897", "message": "Add support for image cutout by id for deepCoadd and raw images"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "message": "Merge branch 'tickets/DM-9115'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d93d546ebd236efa962c26d01623cf3594fb653", "message": "Added support for calexp cutout images by id"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/321940310", "body": "Hi Brian - I've made the changes per your good input and suggestions.  Please review again - thanks! ", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/321940310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882083", "body": "Changed per input.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882112", "body": "Good suggestion. Separate functions devised to distinguish the different use cases.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347889", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347914", "body": "changed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348303", "body": "Will test with this suggested change, to be kept if no issue.\r\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106246719", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106246719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247257", "body": "Fixed", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247524", "body": "Fixed", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829389", "body": "flask example - removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829517", "body": "flask example - removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829553", "body": "flask example - removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830414", "body": "These are among the core reasons why config handling has not been dealt with till now.  I think we can separate at least 2 major categories of config data - 1) public/general 2) private/sensitive.  My intention is all config data checked into GH should be in the 1st category.  Where to put them (nginx, docker image, webserv, imgserv) is another open issue that needs a further discussion.\r\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830585", "body": "fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111836336", "body": "Removed all \"return None\" that are the last statements of their functions, in absence of any guidance from the DM Python Style Guide.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111836336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114360310", "body": "Moved the log stmt ahead of the _cutoutBoxPixels() call for usefulness, but should stay inside the if stmt since the else case would circle back to if \"pixel\" block, so will be redundant to have it outside.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114360310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633390", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633817", "body": "Using image_cutout considering data id is implicit, not explicit as through the parameters.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634073", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634438", "body": "_find_nearestimage_containing() has been pulled out into new MetaservGet clas at same level as where Butler got instantiated.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634470", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634487", "body": "Done", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011415", "body": "Removed that code fragment, now that these tests would go to 'integration' directory under dax_imgserv.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011731", "body": "The ticket number for this work is DM-9929.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131012404", "body": "I've redone the work to make imagegetter instance as parameter to be passed in instead.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131012404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131013799", "body": "Created check for that condition.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131013799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014627", "body": "Fixed", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014885", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014912", "body": "Renamed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015599", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015717", "body": "fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016035", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016108", "body": "Reworded.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016638", "body": "Going with 2-space indents for JSON/YAML files.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016664", "body": "see above comment.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131030423", "body": "Fixed - thanks for the clarification.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131030423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132787980", "body": "Removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132787980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132788927", "body": "Just for convenience, as I've seen it done elsewhere in LSST.  But then it's a py file, so something like cli* would have made more sense.  But let's leave it as is for now.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132788927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790328", "body": "Changed to 'argument' from 'option', as suggested, which I can agree more appropriate for now. click.Path() checks to be adopted - good input here.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790762", "body": "The intention was to use the pass-in config value.  If not passed in, then use the hardcoded default (as a guess perhaps, more complex discovery logic possible in the future) - code corrected to support the original intention.  ", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790825", "body": "Removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790837", "body": "Removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132793346", "body": "query_input is a file path for now.  In the future, it can be generalized to include File object, JSON text block, or URL.  Something to keep in mind for.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132793346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791433", "body": "Changed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791453", "body": "Changed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791528", "body": "Removed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791836", "body": "Fixed to avoid confusion - older version of get_params() does not need to create params, so p_list as return is ok.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792018", "body": "Removed here.  (fyi, part of schema validation)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792802", "body": "Fixed.  \".db\" vs \".objectdb\" with \".\" prefix to avoid ambiguity.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792989", "body": "Changed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793157", "body": "TBD", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793209", "body": "Typo fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793325", "body": "Fixed as advised here.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794861", "body": "cli_v1.py is based on v1 whereas cli.py is on v0 of the new JSON schema, hence minor but significant differences.  Eventually cli.py will be retired when we obselete v0 code altogether from imgserv.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794973", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795018", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795042", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795223", "body": "Exception to be captured and handled higher up.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795418", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795839", "body": "Removed.  Ran PEP8 on the file.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796463", "body": "Fixed by recognizing and throwing exceptions upwards for _error_handler() to capture.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796509", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796990", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142798926", "body": "Easy to accommodate in imgserv later, as this come into better clarity.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142798926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799366", "body": "I'm going to remove 'rcff' and 'tp' tags altogether, by treating the 2 distinct cases as 'data_id' until it's needed to differentiate the two upon calling the butler.get().", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799734", "body": "See prior comment - will remove all \"tpf\" and \"rcff\"  tagging.  If needed, data_id.keys() will be used to tell which is which.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142800117", "body": "Good idea and suggestion. I will streamline the test scripts accordingly.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142800117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142801272", "body": "Per IVOA both /availability and /capabilities resources must be there.  I will change the response to resemble what is expected as shown in VOSI-capabilities section here: http://www.ivoa.net/documents/SODA/20151221/WD-SODA-1.0-20151221.pdf.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142801272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251142", "body": "Improved.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251315", "body": "Removed as trimming task is not part of regular testing.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144941092", "body": "I think we can skip a doc string here, as _data_response() is intended for internal use only.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144941092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154197521", "body": "Fixed.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154197521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154198022", "body": "Ok, moving imageREST_v0 to use new SkymapImage, where all the logic has been preserved, and remove the old files.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154198022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jgates108": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5a3db8b68b1adc946bc7b01273a33db37c11e460", "message": "Merge branch 'tickets/DM-11596'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "message": "Switched to using scisql_s2PtInCPoly instead of scisql_s2PtInBox."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "message": "Merge branch 'tickets/DM-7494'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fbf2bb2e23385bde307bf9c81391e52ced743a6f", "message": "Made review changes."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fa51ff99f7cbe782c39ecd42edad1bf51282f390", "message": "Changed id conversion for coadd images."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "message": "Added ability to locate images by id number."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/876f87a67957077c6077f9c1a57bab2cd80c3a6e", "message": "Added ability to get images by ids for raw and deepCoadd images."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "message": "Added check for filter name."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83f148c4f8828bb7e94c49396e97923b7a781f3c", "message": "Change repository paths to complete data sets."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/712384f69cf2107235e471d35ca9aa203ee5c103", "message": "Added id based image retrieval."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "message": "Cleaned up change to locating images by RA and Dec."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9d9a009d14f993707af2215e58147331d257fc17", "message": "Incomplete code to test function change."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "message": "Changed raw image root directory."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e96388eec462ffe05dc42c4049484a9b3441de24", "message": "Added Calexp functions."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/57804232c0fb077437283803907cf80fd4e4799b", "message": "Added calexp option to REST."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41d155ea2d9069ccee271542338c434d613f391d", "message": "Modified to work with data sets on PDAC."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59be5ef0dcefb8d8159029ca472557565a48372d", "message": "Merge branch 'tickets/DM-3496'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/284bce2309b6e6d684105eac4acc199502aa2022", "message": "Added a source parameter to get skymap removed check for filter type."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/acbab048550a140ea61df1c8bdf3008aa4dc849b", "message": "Changed source of deepCoadd skymaps."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "message": "Merge branch 'u/jgates/DM-2467'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "message": "Sky map stitching now works across tracts."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/76b4826c3556c613aa070ed7df242261e8e13586", "message": "Merge branch 'u/jgates/DM-2027'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6469ccc8d7ac3a23885679d6da46c66b33545fef", "message": "Initial version of getSkyMap."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e218d629fa2c9004f230c04a4065837fdc0d2236", "message": "Merge branch 'u/jgates/DM-2013'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/60809338595e2c4dfc1ebefcb385058e4947667a", "message": "Added recommended changes."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "message": "Prototype image stitching code."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3294999c6da5526cc62fd7c3bc370b292d6fe919", "message": "Merge branch 'u/jgates/DM-1697'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588299", "body": "This is meant to get something up and running and is probably not a good final solution. A function that returns a reasonably accurate arcsecond per pixel scale for X and Y axes of the image would work. I didn't see one in afw. Also, image warping might work, but is probably overkill. This is something I want to talk about at the all hands, as many application will want accurate WCS information. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588712", "body": "Moved them to examples. I am wary of adding unit tests depend on data that can't be put in Git. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9943046", "body": "I agree, but would like to push that down the road to DM-1980 error handling. Leaving a comment to that effect.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9943046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9944286", "body": "It would be more mathematically correct, but since we're dealing with one pixel on an image border, I think truncating is safer. If the width or height winds up greater than the image, the cutout will fail, otherwise shifting by a sub pixel should be harmless. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9944286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592332", "body": "Maybe. I use this code to figure out how use the available functions and believe it would be useful to others who need to go into this territory. It's not meant to be production. I frequently need to copy the images back to my local computer to look at them, which is easier when their names are meaningful. On the other hand would be better to get them out the current directory.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592549", "body": "That just means that the line is temporary and needs to be deleted or altered before merging.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596235", "body": "If a program creates a file or directory with mkdtemp, it's supposed to clean up after itself, which get tricky here as the only reason the files are written to disk is so that they can be examined/compared later. For production code, I'd want to be able to configure where the images go. Either method seems like overkill for what this example is meant for. Unless you have strong opinions, I'd rather leave it as is for ease of use.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596993", "body": "That could be a good way to go. This is meant more for reference than anything else and I wanted to put it where somebody could find it, but the odds of someone else needing it are pretty low.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038382", "body": "This code is here to get the demo to work and will be addressed in DM-1697. I intend to use mkdtemp to create a temporary directory. Eventually, we may need to cache the files returned. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038776", "body": "If it fails to open the file, it will return the string as the response.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25039023", "body": "Currently, it just returns \"/image/raw/ failled\". I think error handling is part of DM-1980 - Error handling for webserv.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25039023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32032044", "body": "That and the location requires merging patches from 2 tracts while the other is within a single tract. I'll add the comments.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32032044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32033909", "body": "Those lines weren't supposed to live this long.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32033909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32035317", "body": "urCorner really shouldn't ever be negative, but it's probably worth checking.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32035317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32041171", "body": "urCorner being larger than the image should be handled below with the calculations for endX and endY.\n\nMaybe not. Tracts are very wide, but it could happen.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32041171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32051508", "body": "I deleted this block of code as it served its purpose of locating a boundary between tracts.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32051508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32054831", "body": "Added code to adjust newWidth, newHeight, endX, and endY to keep from running past the end of image.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32054831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40140895", "body": "No copyright info needed?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40140895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90320529", "body": "I think the butler did not like the unicode character.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90320529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322011", "body": "Yes, I'll get rid of it.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322277", "body": "I think we would be better off requiring the filterName. (meaning an empty string is probably not acceptable)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90338793", "body": "A break between the API and the implementation may not be a bad thing. Most of these queries are about 80% the same, following the calexp pattern or deepCoadd pattern, just accessing different repositories and policies.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90338793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90488080", "body": "I think all of these should probably be relocated to configuration files and the number of W13xxxDb classes can be reduced, but that's for a future refactor.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90488080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101874449", "body": "I think it might be better to have a separate function that gets the image from the dataId and one that gets the data from the RA and Dec, which would then call the function that gets the image from the dataId.\r\n\r\nMy concern is that there'd be a silent failure with an empty dataId as the end user would still get an image, but not the one they were expecting, and it wouldn't be immediately obvious in many cases.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101874449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101876639", "body": "The lower case 'l' looks a log like a '1', and should be avoided as a variable name.\r\n\r\nWould this work? \r\n\r\n```\r\nfor f in fields:\r\n    vals.append(flist.get(f))\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101876639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345101", "body": "':' snuck in there.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345835", "body": "'cutout' instead of 'cutoff' ", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347361", "body": "'l' should not be used for a variable name. It looks too much like '1'.\r\n\r\nWould this work?\r\n```\r\nfor f in fields:\r\n    vals.append(flist.get(f))\r\n```", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348747", "body": "or \r\n```\r\nfor f in fields:\r\n    elem = flist.get(f)\r\n    if elem is not None:\r\n        vals.append(elem);\r\n```", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106008270", "body": "Line is too long.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106008270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013632", "body": "Needs spaces around '-'.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013810", "body": "Line too long.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013860", "body": "Line too long.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014041", "body": "Line too long.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014339", "body": "No trailing spaces.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014446", "body": "Line too long.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014593", "body": "Line too long.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106024249", "body": "Technically, these are too long, but I don't like the idea of splitting the example URL across 2 lines.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106024249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114349247", "body": "It looks like this log statement should probably come before the if statement.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114349247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130666303", "body": "Indentation. It might be good to make \"/tests\" a bit more specific to dax_img to avoid collisions. An explanation of the expected directory structure could be useful.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130666303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130670858", "body": "This looks important enough that a ticket should be created and its id added to this todo.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130670858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130673648", "body": "It would be useful to have the image type returned in the exception. I'm assuming that this error message makes it back to the user. In any case, end users and developers are likely to appreciate good error messages when possible due to the complexity of the input.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130673648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130678853", "body": "Static variables used like this make me nervous. I'd rather it be a normal member variable and pass an insatance of the Image class around, or have an Image instance be a member of ImageServCLI.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130678853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130703756", "body": "If func_name isn't found, shouldn't the exception be handled?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130703756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130707675", "body": "It looks like this is only useful in testing where you know the \"sha256\" of the expected image. It might be worth skipping reading the file and generating the hash if not testing.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130707675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130709836", "body": "Indentation", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130709836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130710826", "body": "Indentation", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130710826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744106", "body": "Replace \"Units (or unit)\" with \"unit\"", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744640", "body": "Delete trailing spaces.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130745698", "body": "p_dict instead of p_list?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130745698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747193", "body": "Replace the ',' after image data with a '.'\r\nIt instead of Thie.\r\nAdd an 'a' before connection.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747272", "body": "credentials", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747372", "body": "The database", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747444", "body": "Indentation", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131028461", "body": "I only commented on indentation when it didn't match the surrounding indentation. \"polygon\" and \"range\" above is indented 4 spaces, \"filter\" is indented 3 spaces. (counting from the \"+\")", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131028461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142206404", "body": "I'm not sure this comment is useful.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142206404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142207249", "body": "There are a few of these commented out test_ImgServ_trim functions. It seems like there would be a better way to do this.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142207249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142232669", "body": "I think I'd like some slightly more verbose comments about what is happening here. It looks like this returns a dictionary of request parameters based on the expected parameters from the api_id in the api_map.json file.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142232669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142233163", "body": "Could duplicates be a problem here? If there's a \"db\" key and a \"objectdb\" key, does that cause a conflict?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142233163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142235569", "body": "I'm not sure what this means or what the function is for and it doesn't seem to be called.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142235569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142238470", "body": "This looks a lot like _get_params, but I don't get the extra work in creating 'params' here only to return 'p_list' ", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142238470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144939489", "body": "I think PEP8 wants one line doc strings like this \"\"\"Write image data to FITS file via data buffer.\"\"\"", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144939489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149813318", "body": "2015-2017", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149813318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149824499", "body": "2015-2017", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149824499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154178330", "body": "Copyright 2015-2017 AURA/LSST.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154178330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154180732", "body": "I think 2015-2017 is more accurate as significant parts of the code are copied from skymapStich.py. Also, it would be desirable to delete skymapStitch.py, if reasonably possible. Having that much nearly duplicate code sitting around is likely to cause confusion.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154180732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "timj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "message": "Merge branch 'tickets/DM-7628'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24a294847f520282d619498a80057baa6bb07ff9", "message": "Update ignore file"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/10c89e9403f1f746b0ec214c32f090a24a8d04bb", "message": "Update for pytest support\n\n* Split file checker into separate test\n* Skip test if credentials not present\n* Derive location of test data file from test file\n* Do not use logger (pytest captures output)"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "message": "Clean up isFits method\n\n* Check if the file exists.\n* Close the file handle that was opened.\n* Check for b'SIMPLE' not 'SIMPLE' when comparing contents."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/256971963", "body": "Can you please fix the two bad merge commits?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/256971963/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/324767653", "body": "Thanks. Can't believe there's now a conflict but I'll fix that.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/324767653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951030", "body": "why are these 3 lines here? Are they meant to be describing an alternative constructor for the example? If so I'd prefer an extra line of commentary indicating this.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951272", "body": "I'd rather we imported `division` from `__future__` at the top so we didn't need the extra cruft to force a floating point division.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951511", "body": "when does this file get cleaned up?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951540", "body": "Is this meant to be a temporary file name? Can it clash with anything?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953378", "body": "if `llCorner` can go negative is there a reason why `urCorner` can't go out of range as well?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953560", "body": "I'd appreciate a line or two of comment explaining why we are using the `<<` operator on the image.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953629", "body": "Please check explicitly for `pixel` rather than assuming that is the unit.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953794", "body": "Are we clear what type of division is going to happen here?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31954530", "body": "This division is presumably intended to be an integer division?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31954530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32036871", "body": "Well, is it okay if `urCorner` is larger than image? A negative pixel means off the image but so can a very large pixel value.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32036871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39896403", "body": "should this default be read from a config file?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39896403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897070", "body": "and then the default will be removed?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40105777", "body": "Tangential, but can we upgrade to `print_function` please? There are a few places in this package still using old style print.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40105777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157851", "body": "You were not dreaming: https://jira.lsstcorp.org/browse/RFC-45\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248939", "body": "You can delete these unused imports and the empty `setup_module` definitions.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144943583", "body": "Please turn the comment into a docstring. If the comment is superfluous then that's a separate debate but I don't see a downside in making this a docstring.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144943583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "brianv0": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2816ad423683e1ee7c6f7b71b442ceaead402aa5", "message": "Implemnented NEW CLI inteface to ImageServ after extensive refactoring.\nMapped API using JSON schemas as basis for API signatures.\nImplemented all existing 21 tests as unit tests using JSON input format.\nUnit test uses sha256 hashes to check generated output image files.\nTrimmed the test image dataset down to 14MB in Total for check-in."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1df5224111b6eafce323d758f0ee7297f1097711", "message": "Merge pull request #25 from lsst/tickets/DM-11370\n\nAdd better error handling"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0387f10a09a664aa876478a7ecc8ce215642c7ed", "message": "Add better error handling"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/292c868afeedcfb9619349e44b8f36060a9bc3e5", "message": "Merge pull request #24 from lsst/tickets/DM-11183\n\ntickets/DM-11183"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/680d8ad701ccb2f80799aef9e949205a3fdfeae6", "message": "Doc fixes and .gitignore update"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "message": "Only read with binary"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/72f43244afcfdae3ae8e580759f6d648d0296306", "message": "PEP8 fixes, renaming, and dead code removal\nDon't encode filter to byte string"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/baf709d69cb164c81955e84fbafb088848c4bbf3", "message": "Python 3 fixes"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0a830965e2a285989d3f2912ba614c40ab2d91c3", "message": "fix imageServer.py"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "message": "Merge pull request #22 from lsst/tickets/DM-7416\n\nFuturize and Python 3 fixes"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/20cb820ea22a44e2fddef789c04fe76520410b68", "message": "Futurize and Python 3 fixes"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ef46817b1ab41f1a3ee108d33a5950149deabf5e", "message": "Futurize"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d90b264c308e54777c79231e91031c907c56c19", "message": "Merge pull request #17 from lsst/tickets/DM-7133\n\nUpdate to python_mysqlclient"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4562100477530523033a20d86e8c501c18c481d2", "message": "Update to python_mysqlclient"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "message": "Merge pull request #10 from lsst/tickets/DM-3571\n\nSupport default and request-defined source parameter"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a5b47e580fa54410f7a576bf0a1d196831de947e", "message": "Support both a default source argument and allow users to append an optional query parameter for an alternate source.\nRemove print function (already logged at info level)\nRename request to _request so it's clear that method is passed from the initial call into the Blueprint methods.\nUse Sphinx REST API documentation for a few methods.\nMake PEP8 checker happier.\nCatch exception from Butler if no mapper is found or the path doesn't exist.\nRemove print import."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1791fdf1e4760baa6bf777aa7192841c82664b79", "message": "Merge pull request #7 from lsst/tickets/DM-2537\n\nImprove error handling according to DM-1980"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/875701ad63b2435e31caab2e739840aff9dbc178", "message": "Improve error handling according to DM-1980"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40152045", "body": "Was this not already fixed and on the master?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40152045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89024904", "body": "I would rather see `getImageFullWithMetaData(19.36995, -0.3146)` which would imply `def getImageFullWithMetaData(self, ra, dec, filterName=None)` in `locateImage.py`, but that might trigger a few more changes for consistency.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89024904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025049", "body": "Did you have issues that necessitates this?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025125", "body": "Did this leak in?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025281", "body": "Should we normalize path? e.g. `/datasets/sdss/preprocessed/dr7/sdss_stripe82_00/coadd`", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621475", "body": "These files look like they snuck in?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621497", "body": "same here.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621516", "body": "same here - (snuck in)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621846", "body": "imgserv actually needs to be rewritten to use it's own config file in this case or this JSON file needs to not be in version control. The reasoning is that we now have a config file which... points to a config file. In the future, imgserv will have it's own config file, but for now it can either use it's own or webserv will configure itself. We should open jiras for figuring out how this should all actually work in the future, but that's somewhat entangled with nginx configuration and docker containers at the moment.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621960", "body": "`if valid:` should suffice", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111622025", "body": "`else` is not necessary in this case - not sure what the coding standards are for this actually.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111622025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363800", "body": "This should be a callable that's passed to __init__ since it's dataset specific.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363894", "body": "Remove this as it's unused. Move the lines up to get_fullimage", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364125", "body": "Suggestions for function name: from_data_id", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364507", "body": "Suggestion: cutout_from_data_id", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364706", "body": "Suggestion: apply_cutout", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364783", "body": "cutout_from_science_id", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364858", "body": "data_id_from_science_id", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123366876", "body": "This may also need to be performed by the butler.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123366876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132752089", "body": "Not needed, we are living in the `__future__` with python 3 :)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132752089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132754452", "body": "I think it's technically an argument, not an option.\r\n\r\nAn `--config` or a theoretical `--verbose` mode would be a `click.option`.\r\n\r\n`@click.argument('query_input', type=click.Path(exists=True))`\r\n`@click.argument('output', type=click.Path()) # Maybe exists=True if you want Click to validate`\r\n\r\nIn the future, it may be an option, as the CLI should be able to accept input _other than JSON files_.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132754452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132756029", "body": "Here, add clarification on what `query_input` is. It's a `click.Path` at this point if you take advice from line 51 review. It *could* be a `click.File` if you wanted it to be, but that would require more code changes I think.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132756029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132757586", "body": "I don't think we want this, but I might be wrong.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132757586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132759035", "body": "If Dispatcher is always going to take `os.path.join(ROOT, \"config\")` then this code should be in `dispatch.py`and that snippet should be handled there. If not, in `exec_command` you should have something like discovering the appropriate config directory. As it appears now, it seems like if `--config` isn't specified, (again, argument vs option), then this CLI fails, even though there is a configuration that (might?) work. Secondly, it seems like \"config_dir\" is ignored by the Dispatcher. It'd be good to resolve this behavior.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132759035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761112", "body": "Unused", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761170", "body": "Unused", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248983", "body": "Please think about this instead:\r\n\r\n```python\r\nRAW_ENDPOINTS = [\r\n    \"i1\", \r\n    \"i2\", \r\n    \"i3\", ...\r\n]\r\nRAW_FILE_PATTERN = \"test_raw_{endpoint)_v1.json\"\r\n\r\n...\r\n\r\n    def test_raw(self):\r\n        for endpoint in RAW_ENDPOINTS:\r\n            test_input = RAW_FILE_PATTERN.format(endpoint=endpoint)\r\n            in_req = os.path.join(self._inputdir, test_input)\r\n            cli = ImageServCLI(self._configdir, in_req, self._outputdir)\r\n            cli.process_request()\r\n```\r\n\r\nThere's a few other ways of doing it, but this will reduce the boilerplate quite a bit. Similarly, you can reuse this pattern for coadd and calexp and have only one test file.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142253560", "body": "Prefer `--in-req` and `--out-dir`. These will both map to `in_req` and `out_dir`.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142253560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142264971", "body": "Same comment here.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142264971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142265365", "body": "In this case you can just do `if config_dir` if you want, since `False` is similarly not a valid config dir.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142265365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142266271", "body": "We may need to go over expected behaviors in this and discuss exit codes, but that can wait I think.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142266271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142272569", "body": "Typo at \"ata\"?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142272569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273220", "body": "I don't see _getimage_async implemented anywhere yet.\r\n\r\n`raise NotImplementedError(\"async endpoint not yet implemented\")`", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273668", "body": "Not sure about this, we may need to discuss. I don't think this is the intended use for capabilities, and it'd be better to not implement it", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142276224", "body": "`_rcff` is an opaque description for this method, and similarly with the `tpf` names, and non-obvious why it's named that based on the docstring. \r\n\r\nI'd potentially suggest `s/_rcff/_by_run/` and `s/_tpf/_by_tract/`, and in the docstring explain that the `params` object must have the additional information in it to validate.\r\n\r\nIt may also be more clear to not use the opaque `params` object, and perform input validation a layer up, I'm not sure.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142276224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285809", "body": "Why does this file exist as a copy of `cli.py`?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285892", "body": "use `\"\"\"` for docstrings (PEP8)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285998", "body": "spacing", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286051", "body": "2 newlines between methods/code (PEP8)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286185", "body": "Specify exception here (also PEP8), use `except Exception` if you must.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286223", "body": "Too much space (PEP8)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286296", "body": "(PEP8 also, not enough spaces)", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286819", "body": "IMPORTANT: You should let the exception be raised or wrap it in a general exception. This must be changed. This will throw silent errors.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287434", "body": "I'm on the fence about this. I think it's fine for now, but _I think_ we need to make this a generic `/sync` and the next method a generic `/async` and let our effective `db_id` actually be an ivo id as a query parameter (e.g. `ivo://lsst.org/images/W13_sdss`", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287589", "body": "Remove this (file is not executable). Generally, this file has a few PEP8 issues.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287825", "body": "Check this file against PEP8.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142288055", "body": "`normalize_positions`? This name isn't very descriptive. ", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142288055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142456167", "body": "Raise the exception, don't return None", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142456167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "andy-slac": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "message": "Merge pull request #14 from lsst/tickets/DM-8562\n\nRemove unused imports from db and cat packages."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "message": "Remove unused imports from db and cat packages.\n\nAlso removed cat from dependency list in table file."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9923718", "body": "You could probably squash this commit with some other, it's not too useful by itself\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9923718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924122", "body": "I think it could be a simplification to raise exception in case of errors, there would be no nonsensical values to return, message can be encoded into exception.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924180", "body": "I would have written it as `filt not in validFilters`, it looks more natural (to me).\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924226", "body": "You could write `'irg'` instead of `('i', 'r', 'g')`, slightly shorter.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924257", "body": "Are these reasonable defaults, or are there any reasonable defaults at all?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924338", "body": "Does the credentials file name have to appear here? If it is this module-specific name then it's still better to make it module-level constant.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924435", "body": "I think imageREST_v0.py expects getImage() to return None if image is not found\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924588", "body": "May be useful to add content-type header?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925007", "body": "SOmewhat shorter:\n`run, camcol, field, filterName = ln[2:6]`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925014", "body": "Needs spaces around assignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925035", "body": "Space after comma\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925081", "body": "would the rounding be more mathematically correct?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925124", "body": "Some people prefer their code to be aligned (using one of 10 different alignment styles) :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930485", "body": "Or even shorter `pixW = min(imgW, pixW)` :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019146", "body": "Will this write to a file in current directory? Should it use some temporary directory instead, current directory may not be writable.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019415", "body": "Should it use logging instead of print?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019441", "body": "Unused `Flask` import\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019511", "body": "What happens if image is not found?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019614", "body": "I don't think this line does anyhting\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019725", "body": "Is there a MIME type for FITS, if yes then we should set content type as well.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25041837", "body": "If it fails then exception will be raised, it cannot return anything in that case?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25041837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25042066", "body": "OK, I was thinking more about what happens when `imgFull` is `None`, the code below will raise an exception which probably return something like \"ERROR 500\" on the client side. Anyways, I'm happy we have a ticket already to take care of that :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25042066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27511993", "body": "Is +1 needed in above three lines? I suspect this leaves out median row/column from the split images (unless this is an intention?)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27511993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512225", "body": "This is not needed if you use enumerate()\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512680", "body": "I'm not sure what is my attitude to magic numbers is. I know that we do not like magic, but I have no idea what is the correct way to avoid these numbers here.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40108542", "body": "`err` should become `e`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40108542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109016", "body": "commit should happen outside `if` (if `len(r)` is >= 1 then you neither commit nor rollback, and I'm not sure what happens in this case).\nI strongly recommend to use context management with transactions, this guarantees that transaction is properly closed (or aborted if exception happens). Check third example from http://docs.sqlalchemy.org/en/rel_1_0/core/connections.html#using-transactions\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109534", "body": "pylint tells me that `dbDestroyCreate` always returns `None` so assigning it to `dbName` does not make sense, and `dbName` itself is not used anywhere, I think assignment is not needed.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109666", "body": "There is `import MySQLdb` above which I think should disappear\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109981", "body": "Technically this is the same thing, but I agree that explicit `None` is better if function is expected to return something.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110541", "body": "also remove `readCredentialFile` and `dbOpen` from imports\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110587", "body": "need import for `getEngineFromFile`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110800", "body": "`</descr>` instead of `</decr>`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111239", "body": "`credFileName` instead of `credFile`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111324", "body": "Semicolon not needed\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111665", "body": "Need an import for `getEngineFromFile`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111791", "body": "`import MySQLdb` above should be gone\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112139", "body": "replace `__init__` arguments here too\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112786", "body": "Idd say it should be replaced with `log.error` in this case\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40156987", "body": "Remove parens around string, should fit OK into one line\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40156987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157056", "body": "I'm not sure why `str()` is needed here\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157239", "body": "I think more Pythonic is `value, lineNum, comment = entry` (or `entry[:3]` if entry can be longer)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157564", "body": "I'm really tired of the copyrights (and I'm definitely not reviewing them). I remember someone mentioning (at Bremerton?) that there should be enough to have one `COPYRIGHT` file at the top level, or was I dreaming?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40158800", "body": "Thanks @timj, it looks like we need a ticket to purge all copyrights from every file. I can review that :smile: \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40158800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jhoblitt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d86b19161f2a750db036c7e71a966e7fbc440e17", "message": "Merge pull request #12 from lsst/tickets/DM-4347-fix-deps\n\n(DM-4347) fix anaconda deps"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29075265039feb268a86645329f6aea75401089b", "message": "add missing deps to eups table file\n\n- doxygen\n- python\n- scons\n- sqlalchemy"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "message": "Revert \"Expect test failure until dependencies are fixed.\"\n\nThis reverts commit 1b12a10ff54f5a2327597e492bda163cf690c3ce."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "message": "Revert \"Use proper argument\"\n\nThis reverts commit 940d969e61b6fb646a7279169552965168333a31."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ktlim": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/940d969e61b6fb646a7279169552965168333a31", "message": "Use proper argument"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1b12a10ff54f5a2327597e492bda163cf690c3ce", "message": "Expect test failure until dependencies are fixed.\n\nThis package depends on the eups-packaged anaconda, which in turn installs a specific version.  That version differs from the miniconda used by Jenkins to build afw.  As a result, there is a numpy conflict on import.\r\n\r\nTemporarily expect test failures to avoid Jenkins complaints until we can fix this somehow.  A fix is expected to take one or more of the following forms:\r\n * update anaconda to install a compatible version\r\n * eups-package the dependencies provided by anaconda so that they can be installed into the miniconda environment\r\n * develop a better way of expressing Python dependencies that doesn't require repackaging\r\n\r\nAlso rationalized by observing that the code in this package is still more like an advanced prototype than a product -- it is fairly specific to a single camera's data products (and the code comments are specific to a particular processing of those data products)."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474953", "body": "It's not actually supposed to be making a coadd, it's just using that mechanism.  I think it ought to be rewritten to use primitive afw image operations instead.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475235", "body": "That's DM-2438, not 2348.\n@PaulPrice: it's not doing the same thing as something we already have, except possibly for some code in the cameraGeom area which is a bit more specialized.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326150", "body": "In the long run, I think redesign of the API URLs and refactoring this into something using [variable rules](http://flask.pocoo.org/docs/0.11/quickstart/#variable-rules) will be desirable and can remove the need for the underscore methods.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326527", "body": "`_butlerPolicy` is really something more like `_imageDatasetType`.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326853", "body": "In theory, it's possible for a dataId to use strings containing digits, floats, or something else.  But I think this is a reasonable limitation for now.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90327385", "body": "In a future refactor, I'd like to see this be a configurable parameter instead of hard-coded.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90327385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940885", "body": "I know it's fixed, but what was going on here?  A cut-and-paste issue?", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940894", "body": "Moving this to a separate file seems worthy of a separate commit.  Also see file naming comment above.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940932", "body": "The style guide says to name the `.py` file after the class that it contains.  https://developer.lsst.io/coding/python_style_guide.html#a-python-source-file-name-should-be-camelcase-with-leading-lowercase-and-ending-in-py", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jbecla": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/278551254b16a4a4b9953d1bab6e5f7d3527312d", "message": "Merge branch 'tickets/DM-3980'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/56762e76ca199ba100eb8fa9e075a0c0faec928f", "message": "unneeded if removed"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "message": "fixes (typo, failure prevention when credentials not found)"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c75955a592a08e0d9743a486de83fb4ee33be9fc", "message": "Additional fixes applied"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/96e94b118b4f53cd3389b9900106e85da45f4a1c", "message": "Merge branch 'tickets/DM-3511'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29679f42e40ce296c20ec5ed671e3639a19a2263", "message": "Migrated to sqlalchemy-based db"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a0855220a14ae7ddba601acdb69ca5d74bb99bec", "message": "turned prefix into path"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "message": "turned prefix into path"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/34e47795edd8580119195725933423905e6e23c5", "message": "Fix missing dax_ prefix"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/293d5ab73e2fb259fd4a05393873b5a449955fae", "message": "add dax_ prefix in python/lsst"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6736e99383261ad3a724f09139fa5d3b6e9679e3", "message": "dax_ prefix"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7595bd54bfd96605ff460a94ca7cb1944205a877", "message": "Merge branch 'tickets/DM-3133'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/745cfa33bf0d2c74adb4c6c019d04eda004d8834", "message": "add dax_ prefix to data access modules"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59a20ea21eab616e8a0bacfda42ca0b80fadd731", "message": "Merge branch 'tickets/DM-2542'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a41c6c704d7ba3f54b017932c0f17e2aa244c581", "message": "removed obsolete dependency on log"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "message": "add missing dependency on sconsUtils"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/84433bd4ab4e203881ad6815f9b4edfeb59962fc", "message": "improve readme"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ed85575779e9cf92413ea168e882239f8ee3c493", "message": "add missing dependency"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/223f3a1122e021fc20de279e053aae4b766a0c76", "message": "Merge branch 'tickets/DM-2160'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "message": "catch 'address in use'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/970f9b3f872b97a6f92a66885761f265b16f063b", "message": "Merge branch 'u/jbecla/DM-1627'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/32f956ce7e189f5ce406a98ae9e7455ec7834d90", "message": "V0 implementation of image cutout\n\nFirst implementation of image cutout.\nThe code is versioning-ready, it is based on\nflask blueprints. Unneeded code has been\ncleanedup."}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/69c95d05aa7f87d2d3eed5188f8eb9608c472756", "message": "Merge branch 'u/jbecla/DM-1938'"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "message": "added skeleton of RESTful API"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b58f9707ad5427395f805ee975ab262f3bf9f04", "message": "added .gitignore"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24ffe56ef37aadbd098cdcda1698c176a3219a84", "message": "fixes, added missing SConscript"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "message": "fixes"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "message": "initial version of imgserv"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573622", "body": "You might want to consider adding author/you here\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573657", "body": "Is it used? I can see it is used in the test program, but I am not sure if it is needed here. If you do need it, and you need it purely for tests, maybe we should at least document that it is used for tests only?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573671", "body": "I'd find a more descriptive name here, maybe closeConnection?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573688", "body": "Add in description that it returns None if...?image not found?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573701", "body": "Hardcoded constants should be avoided, we are told. What is 10? Why 10? Perhaps let's document?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573722", "body": "It'd be good to document all this that is happening here (in the description of the function probably). \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573738", "body": "Do we understand how much of the above calculations could be avoided by using more from afw?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573753", "body": "if that is internal function (is it?), perhaps pre-pend with __?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573764", "body": "consider moving to separate file with dedicated unit test\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573793", "body": "I think I'd prefer envvar here, especially since it has \"lsst10\" in the name.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573803", "body": "A brief description of what is in this file would be useful.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588915", "body": "Sounds great! I was just checking :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930068", "body": "More of more of the code here is yours, it'd be fair to add your name to the author list.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930087", "body": "I think I'd not default to something as random as 1 and r here. Fail if it is not provided.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930101", "body": "I'd like to see all the code that talks to mysql using the Db from db module. John, I think I'd open a new ticket for that work, there is no time to deal with it now, and dedicated ticket makes sense.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930108", "body": "don't default here to some random values \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930117", "body": "does this line really do anything here?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930129", "body": "alignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930134", "body": "Typo. Remove extraneous newline\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930143", "body": "these defaults will need to go away in longer term. Add a todo note?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930149", "body": "oh, that is not a typo! Switch to camel case please, so qResults\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930171", "body": "consider shortening to: pixW = imgW if pixW > imgW\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930172", "body": "alignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930179", "body": "alignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474854", "body": "Is something missing here? If not, remove this line maybe?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474881", "body": "We agreed to use standard python logging in python code, so I'd switch to logging (sorry we are going back and forth!) \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474969", "body": "this is one of the main functions, so I think I'd add more documentation here, e.g., explain all input parameters.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475002", "body": "This line can be removed, right?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475038", "body": "The function returns image and metadata the description needs to be fixed.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475064", "body": "That is why we started the dialog through DM-2348. We definitely want to reuse, and not duplicate.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416443", "body": "Please reformat documenting input parameters (@ paramName: description) here and below.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416459", "body": "j is not used (mentioned only in code that is commented out)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416469", "body": "are there good reasons to keep the lines that are commented out?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416529", "body": "maybe add a comment in DM-2537 so that we don't miss it, and mention the DM-2537 on this todo line (and below too)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416585", "body": "# !/usr/bin/env python\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574656", "body": "no space after \"@\" would make it aligned with our code better\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574666", "body": "what is the # &&& for? (here and below)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574721", "body": "i'd do that in \"debug\", not \"info\" (unless you want to show these things to users by default)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574776", "body": "should we use temporary files here?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897026", "body": "it will be passed as part of URI (very soon), see DM-3571\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39898728", "body": "yes we are not attached to that default in any way :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39898728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40145836", "body": "I just renamed this file and stuck the schema into a list. It wasn't there before :). I'll add it.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40145836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172637", "body": "Notice that it is in dax_imgserv/bin/imageServer.py, it is not the same as dax_webserv/bin/server.py. We have \"servers\" for each module to test things locally. I think that one never got fixed.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172999", "body": "I am not sure either, not my code :). I removed it\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40747362", "body": "it'd be good to have exactly one place for defining the default.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40747362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fjammes": {"issues": [], "commits": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/commits/264fb53e7684752e8e0cfb5c1ee60136884efcec", "message": "Fix python import for LSST package"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "r-owen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34", "title": "DM-10765: Replace existing WCS classes with SkyWcs", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RobertLuptonTheGood": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9937777", "body": "Presumably a doxygen \n!!! \\todo note\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9937777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31956831", "body": "It's because it's the \"assign pixels\" operator.  In this case, \"dImg[...] = sImg[...]\" would work.  You used to need it to write \"dImg <<= sImg\"  (as \"dImg = sImg\" would redefine dImg), but \"dImg[:] = sImg\" (now) works and is to be preferred.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31956831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "PaulPrice": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474895", "body": "How does this differ from MakeCoaddTempExpTask and AssembleCoaddTask (which have more features)?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475000", "body": "If you're doing the same thing as something else we already have, why would you want to re-implement it?  And if there's a slight difference, shouldn't we be asking how we can modify what we have so we're not duplicating code?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596292", "body": "It sounds like you should be using a separate, perhaps personal repository.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27422205", "body": "```\nfor j, expo in enumerate(expoList):\n```\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27422205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jdswinbank": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474973", "body": "See also DM-2348.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}