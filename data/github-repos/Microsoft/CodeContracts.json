{"_default": {"1": {"baSSiLL": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/498", "title": "Another NullReferenceException with closure in constructor", "body": "The issue is similar to #191. However, it reproduces with the latest sources. The difference is that an argument is also used in an expression for a local variable, and then both used in a lambda. Here is a test class:\r\n```c#\r\n\r\n    class A\r\n    {\r\n        public A(object o)\r\n        {\r\n            Contract.Requires(o != null);\r\n\r\n            var local = o;\r\n            Action a = () => ReferenceEquals(local, o);\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LYP951018": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/497", "title": "Document for the implementation/source code?", "body": "Is there any document for Code Contracts' implementation like _Book of runtime_ for CoreCLR? With documents, more people are able to evolved in the project and make it better.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johncrim": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/495", "title": "Build with CodeContracts fails with dotnet build", "body": "By manually adding imports and msbuild properties (b/c no IDE support in VS 2017), ccrewrite works on netcoreapp and netstandard projects (only when [portable PDBs](https://github.com/dotnet/core/blob/master/Documentation/diagnostics/portable_pdb.md) are not used).\r\n\r\nRunning the build using `msbuild /t:build` works. Running the build using `dotnet build` fails:\r\n\r\n```\r\ndotnet build /v:normal\r\nBuild started 2017-09-25 9:06:34 AM\r\n...\r\n       CreateCodeContractReferenceAssembly:\r\n         \"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrefgen.exe\" \"@obj\\Debug\\netstandard2.0\\MyProject.ccrefgen.rsp\"\r\n         elapsed time: 881.9998ms\r\n       CodeContractRewrite:\r\n         \"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@MyProject.ccrewrite.rsp\"\r\n                There were errors reported in Tv.Web.Upfront.Model's metadata.\r\n                Exception of type 'System.OutOfMemoryException' was thrown.\r\n     1>ccrewrite : error : Foxtrot:     There were errors reported in Tv.Web.Upfront.Model's metadata. [C:\\src\\my\\project\\MyProject.csproj]\r\n                Exception of type 'System.OutOfMemoryException' was thrown.\r\n         elapsed time: 61.4774ms\r\n     1>C:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild\\v15.0\\Microsoft.CodeContracts.targets(275,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@MyProject.ccrewrite.rsp\"\" exited with code -1. [C:\\src\\my\\project\\MyProject.csproj]\r\n     1>Done Building Project \"C:\\src\\my\\project\\MyProject.csproj\" (Build target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n```\r\n\r\nThe root cause is this block of the `Microsoft.CodeContracts.targets` file:\r\nhttps://github.com/Microsoft/CodeContracts/blob/master/Microsoft.Research/ManagedContract.Setup/MSBuild/v15.0/Microsoft.CodeContracts.targets#L292\r\n\r\nTarget `GetFrameworkSdkPath`, and `sn.exe` don't exist in the dotnet build system.\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/243", "title": "Create Chocolatey package for CodeContracts", "body": "It would be great to be able to install and update CodeContracts binaries using Chocolatey.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/496", "title": "Bugfix/495 dotnet build", "body": "This commit fixes #495 , which I opened. I believe it's reasonable to skip the sn.exe step when building under dotnet, [since strong-naming is discouraged for non-.NET Core SDK libraries and apps](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md).\r\n\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/486", "title": "Fixes: #471 Can't build in VS 2015", "body": "Fixes #471 due to missing Microsoft.VisualBasic.dll assembly, and after that an invalid reference to Microsoft.Research/Contracts/MsCorlib/MsCorlib.Contracts.csproj.\r\n\r\nAfter this, I'm able to run `buildcc %version%` with VS 2015 installed. I've verified that the Contracts.devlab9ts.msi works as expected on our projects (.NET 4.6.x).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vladexl": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/494", "title": "COMException (0x80004005)", "body": "If i open sln-file with C++ projects only  (but projects too many: 198 in one solution):\r\n\r\nCode Contracts Editor Extensions 1.9.10714.2 12.0.40629.0 Visual Studio failed. 0:20.256\r\n\r\nProjectRemoved failed\r\nSystem.Runtime.InteropServices.COMException (0x80004005): Object reference not set to an instance of an object.\r\n   at EnvDTE.Project.get_UniqueName()\r\n   at ContractAdornments.VSServiceProvider.<>c__DisplayClassa.<ProjectRemoved>b__9()\r\n   at UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 0:25.611", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wavebit": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/493", "title": "Do not work with visual studio 2017", "body": "After installing this, I got nothing\r\nhttps://marketplace.visualstudio.com/items?itemName=RiSEResearchinSoftwareEngineering.CodeContractsforNET\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/493/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SaiSK88": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/492", "title": "How to enable \"perform runtime contract checking\" in Visual Studio 2017?", "body": "Hi All,\r\n\r\nI have VS 2017 community edition. I need to enable \"perform runtime contract checking\" on Code Contracts pane. But I don't see that pane anywhere in the project properties.\r\n\r\nAny idea on how to enable this in Visual Studio 2017 community edition.\r\n\r\nThanks in advance.\r\n\r\nRegards,\r\nSai", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yaakov-h": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/491", "title": "Postcondition missing from StringBuilder.AppendFormat(IFormatProvider, string, object)", "body": "Probably all contract missing from this method, not just postconditions.\r\n\r\n> warning : CodeContracts: Possibly calling a method on a null reference. Do you expect that System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object) returns non-null?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/489", "title": "StackOverflowException in cccheck.exe", "body": "The following function causes cccheck to stack overflow:\r\n\r\n```\r\npublic static SqlBoolean StackOverflowReproFunction(SqlGuid first, SqlGuid second)\r\n{\r\n\treturn SqlGuid.Equals(first, second);\r\n}\r\n```\r\n\r\ncccheck output (through msbuild):\r\n\r\n```\r\nCodeContracts: Task manager is unavailable (unable to run in background).\r\nCodeContracts: FrameworkExtensions: Run static contract analysis.\r\nCodeContracts: FrameworkExtensions: Time spent connecting to the cache: 00:00:01.2159937\r\nCodeContracts: FrameworkExtensions: Cache used: my.cache.db.server\r\nCodeContracts: FrameworkExtensions: Process is terminated due to StackOverflowException.\r\nCodeContracts: FrameworkExtensions: \r\nCodeContracts: FrameworkExtensions: Static contract analysis done.\r\n```", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/487", "title": ".NET Framework 4.7 BCL Contracts", "body": "Is anyone working on this, or do I need to dig through source control to figure out how it was done for .NET 4.6.x?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/481", "title": "ccrewrite chokes on async preconditions with using in VS2017", "body": "Using Visual Studio 2017 Enterprise RC, 15.0.0-RC.4+26206.0\r\n\r\nOutput:\r\n```\r\nerror CC1017: Malformed contract section in method 'AsyncContracts.AsyncContracts+<DoTheThingSlowly>d__0.MoveNext'\r\n```\r\n\r\nCode that triggers this bug:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics.Contracts;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace AsyncContracts\r\n{\r\n\tpublic class AsyncContracts\r\n\t{\r\n\t\tpublic static async Task<string> DoTheThingSlowly(object o)\r\n\t\t{\r\n\t\t\tContract.Requires(o != null);\r\n\r\n\t\t\tawait Task.Delay(TimeSpan.FromSeconds(1));\r\n\r\n\t\t\tusing (var s = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tawait Task.Delay(TimeSpan.FromSeconds(1));\r\n\t\t\t\tawait Task.Delay(TimeSpan.FromSeconds(1));\r\n\t\t\t\treturn o.ToString();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nIL of the generated async state machine:\r\n\r\n```\r\n.class nested private auto ansi sealed beforefieldinit '<DoTheThingSlowly>d__0'\r\n\textends [mscorlib]System.ValueType\r\n\timplements [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine\r\n{\r\n\t.custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\r\n\t\t01 00 00 00\r\n\t)\r\n\t// Fields\r\n\t.field public int32 '<>1__state'\r\n\t.field public valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> '<>t__builder'\r\n\t.field public object o\r\n\t.field private class [mscorlib]System.IO.MemoryStream '<s>5__1'\r\n\t.field private valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter '<>u__1'\r\n\r\n\t// Methods\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void MoveNext () cil managed \r\n\t{\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::MoveNext()\r\n\t\t// Method begins at RVA 0xbe2c\r\n\t\t// Code size 476 (0x1dc)\r\n\t\t.maxstack 3\r\n\t\t.locals init (\r\n\t\t\t[0] int32,\r\n\t\t\t[1] string,\r\n\t\t\t[2] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[3] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[4] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[5] class [mscorlib]System.Exception\r\n\t\t)\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_0006: stloc.0\r\n\t\t.try\r\n\t\t{\r\n\t\t\tIL_0007: ldloc.0\r\n\t\t\tIL_0008: brfalse.s IL_0066\r\n\r\n\t\t\tIL_000a: ldloc.0\r\n\t\t\tIL_000b: ldc.i4.1\r\n\t\t\tIL_000c: sub\r\n\t\t\tIL_000d: ldc.i4.1\r\n\t\t\tIL_000e: ble.un IL_009c\r\n\r\n\t\t\tIL_0013: ldarg.0\r\n\t\t\tIL_0014: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\tIL_0019: ldnull\r\n\t\t\tIL_001a: cgt.un\r\n\t\t\tIL_001c: call void [mscorlib]System.Diagnostics.Contracts.Contract::Requires(bool)\r\n\t\t\tIL_0021: ldc.r8 1\r\n\t\t\tIL_002a: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\tIL_002f: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\tIL_0034: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\tIL_0039: stloc.2\r\n\t\t\tIL_003a: ldloca.s 2\r\n\t\t\tIL_003c: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\tIL_0041: brtrue.s IL_0082\r\n\r\n\t\t\tIL_0043: ldarg.0\r\n\t\t\tIL_0044: ldc.i4.0\r\n\t\t\tIL_0045: dup\r\n\t\t\tIL_0046: stloc.0\r\n\t\t\tIL_0047: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_004c: ldarg.0\r\n\t\t\tIL_004d: ldloc.2\r\n\t\t\tIL_004e: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0053: ldarg.0\r\n\t\t\tIL_0054: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_0059: ldloca.s 2\r\n\t\t\tIL_005b: ldarg.0\r\n\t\t\tIL_005c: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\tIL_0061: leave IL_01db\r\n\r\n\t\t\tIL_0066: ldarg.0\r\n\t\t\tIL_0067: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_006c: stloc.2\r\n\t\t\tIL_006d: ldarg.0\r\n\t\t\tIL_006e: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0073: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_0079: ldarg.0\r\n\t\t\tIL_007a: ldc.i4.m1\r\n\t\t\tIL_007b: dup\r\n\t\t\tIL_007c: stloc.0\r\n\t\t\tIL_007d: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\tIL_0082: ldloca.s 2\r\n\t\t\tIL_0084: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\tIL_0089: ldloca.s 2\r\n\t\t\tIL_008b: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_0091: ldarg.0\r\n\t\t\tIL_0092: newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()\r\n\t\t\tIL_0097: stfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\r\n\t\t\tIL_009c: nop\r\n\t\t\t.try\r\n\t\t\t{\r\n\t\t\t\tIL_009d: ldloc.0\r\n\t\t\t\tIL_009e: ldc.i4.1\r\n\t\t\t\tIL_009f: beq.s IL_00ed\r\n\r\n\t\t\t\tIL_00a1: ldloc.0\r\n\t\t\t\tIL_00a2: ldc.i4.2\r\n\t\t\t\tIL_00a3: beq IL_015c\r\n\r\n\t\t\t\tIL_00a8: ldc.r8 1\r\n\t\t\t\tIL_00b1: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_00b6: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_00bb: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_00c0: stloc.3\r\n\t\t\t\tIL_00c1: ldloca.s 3\r\n\t\t\t\tIL_00c3: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_00c8: brtrue.s IL_0109\r\n\r\n\t\t\t\tIL_00ca: ldarg.0\r\n\t\t\t\tIL_00cb: ldc.i4.1\r\n\t\t\t\tIL_00cc: dup\r\n\t\t\t\tIL_00cd: stloc.0\r\n\t\t\t\tIL_00ce: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_00d3: ldarg.0\r\n\t\t\t\tIL_00d4: ldloc.3\r\n\t\t\t\tIL_00d5: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00da: ldarg.0\r\n\t\t\t\tIL_00db: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_00e0: ldloca.s 3\r\n\t\t\t\tIL_00e2: ldarg.0\r\n\t\t\t\tIL_00e3: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_00e8: leave IL_01db\r\n\r\n\t\t\t\tIL_00ed: ldarg.0\r\n\t\t\t\tIL_00ee: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00f3: stloc.3\r\n\t\t\t\tIL_00f4: ldarg.0\r\n\t\t\t\tIL_00f5: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00fa: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0100: ldarg.0\r\n\t\t\t\tIL_0101: ldc.i4.m1\r\n\t\t\t\tIL_0102: dup\r\n\t\t\t\tIL_0103: stloc.0\r\n\t\t\t\tIL_0104: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_0109: ldloca.s 3\r\n\t\t\t\tIL_010b: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0110: ldloca.s 3\r\n\t\t\t\tIL_0112: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0118: ldc.r8 1\r\n\t\t\t\tIL_0121: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_0126: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_012b: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_0130: stloc.s 4\r\n\t\t\t\tIL_0132: ldloca.s 4\r\n\t\t\t\tIL_0134: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_0139: brtrue.s IL_0179\r\n\r\n\t\t\t\tIL_013b: ldarg.0\r\n\t\t\t\tIL_013c: ldc.i4.2\r\n\t\t\t\tIL_013d: dup\r\n\t\t\t\tIL_013e: stloc.0\r\n\t\t\t\tIL_013f: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_0144: ldarg.0\r\n\t\t\t\tIL_0145: ldloc.s 4\r\n\t\t\t\tIL_0147: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_014c: ldarg.0\r\n\t\t\t\tIL_014d: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_0152: ldloca.s 4\r\n\t\t\t\tIL_0154: ldarg.0\r\n\t\t\t\tIL_0155: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_015a: leave.s IL_01db\r\n\r\n\t\t\t\tIL_015c: ldarg.0\r\n\t\t\t\tIL_015d: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0162: stloc.s 4\r\n\t\t\t\tIL_0164: ldarg.0\r\n\t\t\t\tIL_0165: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_016a: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0170: ldarg.0\r\n\t\t\t\tIL_0171: ldc.i4.m1\r\n\t\t\t\tIL_0172: dup\r\n\t\t\t\tIL_0173: stloc.0\r\n\t\t\t\tIL_0174: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_0179: ldloca.s 4\r\n\t\t\t\tIL_017b: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0180: ldloca.s 4\r\n\t\t\t\tIL_0182: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0188: ldarg.0\r\n\t\t\t\tIL_0189: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\t\tIL_018e: callvirt instance string [mscorlib]System.Object::ToString()\r\n\t\t\t\tIL_0193: stloc.1\r\n\t\t\t\tIL_0194: leave.s IL_01c7\r\n\t\t\t} // end .try\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tIL_0196: ldloc.0\r\n\t\t\t\tIL_0197: ldc.i4.0\r\n\t\t\t\tIL_0198: bge.s IL_01ad\r\n\r\n\t\t\t\tIL_019a: ldarg.0\r\n\t\t\t\tIL_019b: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01a0: brfalse.s IL_01ad\r\n\r\n\t\t\t\tIL_01a2: ldarg.0\r\n\t\t\t\tIL_01a3: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01a8: callvirt instance void [mscorlib]System.IDisposable::Dispose()\r\n\r\n\t\t\t\tIL_01ad: endfinally\r\n\t\t\t} // end handler\r\n\t\t} // end .try\r\n\t\tcatch [mscorlib]System.Exception\r\n\t\t{\r\n\t\t\tIL_01ae: stloc.s 5\r\n\t\t\tIL_01b0: ldarg.0\r\n\t\t\tIL_01b1: ldc.i4.s -2\r\n\t\t\tIL_01b3: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_01b8: ldarg.0\r\n\t\t\tIL_01b9: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_01be: ldloc.s 5\r\n\t\t\tIL_01c0: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetException(class [mscorlib]System.Exception)\r\n\t\t\tIL_01c5: leave.s IL_01db\r\n\t\t} // end handler\r\n\r\n\t\tIL_01c7: ldarg.0\r\n\t\tIL_01c8: ldc.i4.s -2\r\n\t\tIL_01ca: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_01cf: ldarg.0\r\n\t\tIL_01d0: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_01d5: ldloc.1\r\n\t\tIL_01d6: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetResult(!0)\r\n\r\n\t\tIL_01db: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::MoveNext\r\n\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void SetStateMachine (\r\n\t\t\tclass [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine stateMachine\r\n\t\t) cil managed \r\n\t{\r\n\t\t.custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = (\r\n\t\t\t01 00 00 00\r\n\t\t)\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\t// Method begins at RVA 0xc048\r\n\t\t// Code size 13 (0xd)\r\n\t\t.maxstack 8\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_0006: ldarg.1\r\n\t\tIL_0007: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\tIL_000c: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::SetStateMachine\r\n\r\n} // end of class <DoTheThingSlowly>d__0\r\n```\r\n\r\nIL from VS2015, this works with ccrewrite:\r\n```\r\n.class nested private auto ansi sealed beforefieldinit '<DoTheThingSlowly>d__0'\r\n\textends [mscorlib]System.ValueType\r\n\timplements [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine\r\n{\r\n\t.custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\r\n\t\t01 00 00 00\r\n\t)\r\n\t// Fields\r\n\t.field public int32 '<>1__state'\r\n\t.field public valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> '<>t__builder'\r\n\t.field public object o\r\n\t.field private class [mscorlib]System.IO.MemoryStream '<s>5__1'\r\n\t.field private valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter '<>u__1'\r\n\r\n\t// Methods\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void MoveNext () cil managed \r\n\t{\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::MoveNext()\r\n\t\t// Method begins at RVA 0xbe2c\r\n\t\t// Code size 482 (0x1e2)\r\n\t\t.maxstack 3\r\n\t\t.locals init (\r\n\t\t\t[0] int32,\r\n\t\t\t[1] string,\r\n\t\t\t[2] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[3] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[4] valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter,\r\n\t\t\t[5] class [mscorlib]System.Exception\r\n\t\t)\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_0006: stloc.0\r\n\t\t.try\r\n\t\t{\r\n\t\t\tIL_0007: ldloc.0\r\n\t\t\tIL_0008: switch (IL_006c, IL_00a2, IL_00a2)\r\n\r\n\t\t\tIL_0019: ldarg.0\r\n\t\t\tIL_001a: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\tIL_001f: ldnull\r\n\t\t\tIL_0020: cgt.un\r\n\t\t\tIL_0022: call void [mscorlib]System.Diagnostics.Contracts.Contract::Requires(bool)\r\n\t\t\tIL_0027: ldc.r8 1\r\n\t\t\tIL_0030: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\tIL_0035: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\tIL_003a: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\tIL_003f: stloc.2\r\n\t\t\tIL_0040: ldloca.s 2\r\n\t\t\tIL_0042: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\tIL_0047: brtrue.s IL_0088\r\n\r\n\t\t\tIL_0049: ldarg.0\r\n\t\t\tIL_004a: ldc.i4.0\r\n\t\t\tIL_004b: dup\r\n\t\t\tIL_004c: stloc.0\r\n\t\t\tIL_004d: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_0052: ldarg.0\r\n\t\t\tIL_0053: ldloc.2\r\n\t\t\tIL_0054: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0059: ldarg.0\r\n\t\t\tIL_005a: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_005f: ldloca.s 2\r\n\t\t\tIL_0061: ldarg.0\r\n\t\t\tIL_0062: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\tIL_0067: leave IL_01e1\r\n\r\n\t\t\tIL_006c: ldarg.0\r\n\t\t\tIL_006d: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0072: stloc.2\r\n\t\t\tIL_0073: ldarg.0\r\n\t\t\tIL_0074: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\tIL_0079: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_007f: ldarg.0\r\n\t\t\tIL_0080: ldc.i4.m1\r\n\t\t\tIL_0081: dup\r\n\t\t\tIL_0082: stloc.0\r\n\t\t\tIL_0083: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\tIL_0088: ldloca.s 2\r\n\t\t\tIL_008a: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\tIL_008f: ldloca.s 2\r\n\t\t\tIL_0091: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\tIL_0097: ldarg.0\r\n\t\t\tIL_0098: newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()\r\n\t\t\tIL_009d: stfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\r\n\t\t\tIL_00a2: nop\r\n\t\t\t.try\r\n\t\t\t{\r\n\t\t\t\tIL_00a3: ldloc.0\r\n\t\t\t\tIL_00a4: ldc.i4.1\r\n\t\t\t\tIL_00a5: beq.s IL_00f3\r\n\r\n\t\t\t\tIL_00a7: ldloc.0\r\n\t\t\t\tIL_00a8: ldc.i4.2\r\n\t\t\t\tIL_00a9: beq IL_0162\r\n\r\n\t\t\t\tIL_00ae: ldc.r8 1\r\n\t\t\t\tIL_00b7: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_00bc: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_00c1: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_00c6: stloc.3\r\n\t\t\t\tIL_00c7: ldloca.s 3\r\n\t\t\t\tIL_00c9: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_00ce: brtrue.s IL_010f\r\n\r\n\t\t\t\tIL_00d0: ldarg.0\r\n\t\t\t\tIL_00d1: ldc.i4.1\r\n\t\t\t\tIL_00d2: dup\r\n\t\t\t\tIL_00d3: stloc.0\r\n\t\t\t\tIL_00d4: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_00d9: ldarg.0\r\n\t\t\t\tIL_00da: ldloc.3\r\n\t\t\t\tIL_00db: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00e0: ldarg.0\r\n\t\t\t\tIL_00e1: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_00e6: ldloca.s 3\r\n\t\t\t\tIL_00e8: ldarg.0\r\n\t\t\t\tIL_00e9: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_00ee: leave IL_01e1\r\n\r\n\t\t\t\tIL_00f3: ldarg.0\r\n\t\t\t\tIL_00f4: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_00f9: stloc.3\r\n\t\t\t\tIL_00fa: ldarg.0\r\n\t\t\t\tIL_00fb: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0100: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0106: ldarg.0\r\n\t\t\t\tIL_0107: ldc.i4.m1\r\n\t\t\t\tIL_0108: dup\r\n\t\t\t\tIL_0109: stloc.0\r\n\t\t\t\tIL_010a: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_010f: ldloca.s 3\r\n\t\t\t\tIL_0111: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0116: ldloca.s 3\r\n\t\t\t\tIL_0118: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_011e: ldc.r8 1\r\n\t\t\t\tIL_0127: call valuetype [mscorlib]System.TimeSpan [mscorlib]System.TimeSpan::FromSeconds(float64)\r\n\t\t\t\tIL_012c: call class [mscorlib]System.Threading.Tasks.Task [mscorlib]System.Threading.Tasks.Task::Delay(valuetype [mscorlib]System.TimeSpan)\r\n\t\t\t\tIL_0131: callvirt instance valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter [mscorlib]System.Threading.Tasks.Task::GetAwaiter()\r\n\t\t\t\tIL_0136: stloc.s 4\r\n\t\t\t\tIL_0138: ldloca.s 4\r\n\t\t\t\tIL_013a: call instance bool [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::get_IsCompleted()\r\n\t\t\t\tIL_013f: brtrue.s IL_017f\r\n\r\n\t\t\t\tIL_0141: ldarg.0\r\n\t\t\t\tIL_0142: ldc.i4.2\r\n\t\t\t\tIL_0143: dup\r\n\t\t\t\tIL_0144: stloc.0\r\n\t\t\t\tIL_0145: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\t\tIL_014a: ldarg.0\r\n\t\t\t\tIL_014b: ldloc.s 4\r\n\t\t\t\tIL_014d: stfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0152: ldarg.0\r\n\t\t\t\tIL_0153: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\t\tIL_0158: ldloca.s 4\r\n\t\t\t\tIL_015a: ldarg.0\r\n\t\t\t\tIL_015b: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::AwaitUnsafeOnCompleted<valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter, valuetype AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'>(!!0&, !!1&)\r\n\t\t\t\tIL_0160: leave.s IL_01e1\r\n\r\n\t\t\t\tIL_0162: ldarg.0\r\n\t\t\t\tIL_0163: ldfld valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0168: stloc.s 4\r\n\t\t\t\tIL_016a: ldarg.0\r\n\t\t\t\tIL_016b: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.TaskAwaiter AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>u__1'\r\n\t\t\t\tIL_0170: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_0176: ldarg.0\r\n\t\t\t\tIL_0177: ldc.i4.m1\r\n\t\t\t\tIL_0178: dup\r\n\t\t\t\tIL_0179: stloc.0\r\n\t\t\t\tIL_017a: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\r\n\t\t\t\tIL_017f: ldloca.s 4\r\n\t\t\t\tIL_0181: call instance void [mscorlib]System.Runtime.CompilerServices.TaskAwaiter::GetResult()\r\n\t\t\t\tIL_0186: ldloca.s 4\r\n\t\t\t\tIL_0188: initobj [mscorlib]System.Runtime.CompilerServices.TaskAwaiter\r\n\t\t\t\tIL_018e: ldarg.0\r\n\t\t\t\tIL_018f: ldfld object AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::o\r\n\t\t\t\tIL_0194: callvirt instance string [mscorlib]System.Object::ToString()\r\n\t\t\t\tIL_0199: stloc.1\r\n\t\t\t\tIL_019a: leave.s IL_01cd\r\n\t\t\t} // end .try\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tIL_019c: ldloc.0\r\n\t\t\t\tIL_019d: ldc.i4.0\r\n\t\t\t\tIL_019e: bge.s IL_01b3\r\n\r\n\t\t\t\tIL_01a0: ldarg.0\r\n\t\t\t\tIL_01a1: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01a6: brfalse.s IL_01b3\r\n\r\n\t\t\t\tIL_01a8: ldarg.0\r\n\t\t\t\tIL_01a9: ldfld class [mscorlib]System.IO.MemoryStream AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<s>5__1'\r\n\t\t\t\tIL_01ae: callvirt instance void [mscorlib]System.IDisposable::Dispose()\r\n\r\n\t\t\t\tIL_01b3: endfinally\r\n\t\t\t} // end handler\r\n\t\t} // end .try\r\n\t\tcatch [mscorlib]System.Exception\r\n\t\t{\r\n\t\t\tIL_01b4: stloc.s 5\r\n\t\t\tIL_01b6: ldarg.0\r\n\t\t\tIL_01b7: ldc.i4.s -2\r\n\t\t\tIL_01b9: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\t\tIL_01be: ldarg.0\r\n\t\t\tIL_01bf: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\t\tIL_01c4: ldloc.s 5\r\n\t\t\tIL_01c6: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetException(class [mscorlib]System.Exception)\r\n\t\t\tIL_01cb: leave.s IL_01e1\r\n\t\t} // end handler\r\n\r\n\t\tIL_01cd: ldarg.0\r\n\t\tIL_01ce: ldc.i4.s -2\r\n\t\tIL_01d0: stfld int32 AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>1__state'\r\n\t\tIL_01d5: ldarg.0\r\n\t\tIL_01d6: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_01db: ldloc.1\r\n\t\tIL_01dc: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetResult(!0)\r\n\r\n\t\tIL_01e1: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::MoveNext\r\n\r\n\t.method private final hidebysig newslot virtual \r\n\t\tinstance void SetStateMachine (\r\n\t\t\tclass [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine stateMachine\r\n\t\t) cil managed \r\n\t{\r\n\t\t.custom instance void [mscorlib]System.Diagnostics.DebuggerHiddenAttribute::.ctor() = (\r\n\t\t\t01 00 00 00\r\n\t\t)\r\n\t\t.override method instance void [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\t// Method begins at RVA 0xc050\r\n\t\t// Code size 13 (0xd)\r\n\t\t.maxstack 8\r\n\r\n\t\tIL_0000: ldarg.0\r\n\t\tIL_0001: ldflda valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string> AsyncContracts.AsyncContracts/'<DoTheThingSlowly>d__0'::'<>t__builder'\r\n\t\tIL_0006: ldarg.1\r\n\t\tIL_0007: call instance void valuetype [mscorlib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<string>::SetStateMachine(class [mscorlib]System.Runtime.CompilerServices.IAsyncStateMachine)\r\n\t\tIL_000c: ret\r\n\t} // end of method '<DoTheThingSlowly>d__0'::SetStateMachine\r\n\r\n} // end of class <DoTheThingSlowly>d__0\r\n```\r\n\r\nIt appears that this block of IL, which exists before the calls to `Contract.Requires`, is confusing the rewriter. The rewriter seems to understand a switch statement and a simple condition, but not this subtraction-based condition.\r\n\r\n```\r\nIL_0007: ldloc.0\r\nIL_0008: brfalse.s IL_0066\r\n\r\nIL_000a: ldloc.0\r\nIL_000b: ldc.i4.1\r\nIL_000c: sub\r\nIL_000d: ldc.i4.1\r\nIL_000e: ble.un IL_009c\r\n```\r\n\r\n(Related to VS2017, so tagging #451 here).\r\n\r\n@SergeyTeplyakov Is this something that can be easily fixed?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/481/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/461", "title": "cccheck no longer infers that an async method returns a non-null task", "body": "Some time between bf32538 and 9cf9f54, Code Contracts no longer infers that an `async` method's return value is non-nullable.\n\nI'm now getting warnings such as:\n\n> warning : CodeContracts: Possibly calling a method on a null reference. Do you expect that MyClass.MyMethodAsync(System.String,System.String) returns non-null?\n\nI don't see anything obvious in [the comparison](https://github.com/Microsoft/CodeContracts/compare/bf32538...9cf9f54) that would have caused this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/451", "title": "Visual Studio 2017 support", "body": "What needs to be done to add support for VS15, however preliminary.\r\n\r\nAt minimum we need MSBuild targets for v15.0 (`C:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild`).\r\n\r\nWhat would I need to modify to add such targets to the project?\r\n- [x] MSBuild targets for MSBuild 15.0 (#482)\r\n- [ ] Plugin / Project Preferences sheet\r\n- [ ] Code Snippets\r\n- [ ] `ITaskManager` for background static analysis\r\n- [ ] Tests?\r\n- [ ] Anything else?\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/451/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/444", "title": "Missing BCL contracts for EventWaitHandle.TryOpenExisting", "body": "Method is not defined in CodeContracts source at all: https://github.com/Microsoft/CodeContracts/blob/79a04c96679b6d400c286dd62d6a2ec77462da72/Microsoft.Research/Contracts/MsCorlib/Sources/System.Threading.EventWaitHandle.cs\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/443", "title": "BCL contracts NamedPipeServerStream.BeginWaitForConnection appears to be unused.", "body": "Postcondition defined [here](https://github.com/Microsoft/CodeContracts/blob/79a04c96679b6d400c286dd62d6a2ec77462da72/Microsoft.Research/Contracts/System.Core/Sources/System.IO.Pipes.NamedPipeServerStream.cs#L46).\n\nStatic checker warning:\n\n> `warning : CodeContracts: Possibly calling a method on a null reference 'result'. Are you making some assumption on BeginWaitForConnection that the static checker is unaware of?`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/442", "title": "Missing BCL contracts on Process.GetProcessById", "body": "Postcondition: Ensures not-null, [as per Reference Source](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs,1518)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/423", "title": "cccheck: Cached analysis gets horrendously slow over time", "body": "For database-based caching, cccheck uses Entity Framework with lazy-loading. This means that whenever `Method.Assemblies` is touched, it loads data for every single assembly associated with that method. An example of a piece of code that triggers this data load is [here](https://github.com/Microsoft/CodeContracts/blob/79a04c96679b6d400c286dd62d6a2ec77462da72/Microsoft.Research/Clousot.Cache/SQLCacheModel.cs#L521). The query that this expression generates is:\n\n```\nexec sp_executesql N'SELECT \n[Extent2].[AssemblyId] AS [AssemblyId], \n[Extent2].[Name] AS [Name], \n[Extent2].[Created] AS [Created], \n[Extent2].[IsBaseLine] AS [IsBaseLine], \n[Extent2].[SourceControlInfo] AS [SourceControlInfo]\nFROM  [dbo].[AssemblyInfoMethods] AS [Extent1]\nINNER JOIN [dbo].[AssemblyInfo] AS [Extent2] ON [Extent1].[AssemblyInfo_AssemblyId] = [Extent2].[AssemblyId]\nWHERE [Extent1].[Method_Id] = @EntityKeyValue1',N'@EntityKeyValue1 bigint',@EntityKeyValue1=4\n```\n\nAn assembly entry in the database is a unique assembly being analyzed. This is not keyed to name, but appears to be maybe some sort of hash? I'm not quite sure. What I do know is that:\n- Analyzing the built assemblies from a project multiple times does not result in new assembly entries.\n- Rebuilding and analyzing the assemblies from a project multiple times results in new assembly entries for each rebuild.\n\nTherefore, this operates at _O(M x N)_ where:\n- _M_ is the number of assemblies that a given method appears in, per build, and\n- _N_ is the number of times a project has been built for static analysis\n\nWhen analyzing the method `System.Diagnostics.Contracts.ContractDeclarativeAssemblyAttribute.#ctor()`, for example, which is added into every assembly that gets statically checked, cccheck loads in a tonne of records. At the scale that my team is operating at with multiple analyses per day of projects containing multiple assemblies, this loads in about 10,000 records **per day since the cache was last cleaned**.\n\nThis causes an enormous slowdown over time. A full build with a fresh cache takes my team about 15-20 minutes, but over time this can grow to 60-80 minutes with a very large cache database. For comparison, it takes around 60 minutes without a cache at all.\n\nLooking at the code in Clousot, I don't see any way to fix this performance hit without rewriting the caching layer from scratch.\n\n@SergeyTeplyakov @hubuk Any ideas on how to make this work faster?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/418", "title": "Static checker sends output to Visual Studio when it shouldn't", "body": "Given the following scenario:\n- I have a program that launches MSBuild to compile a project\n- The project being compiled has Code Contracts static checking enabled\n- The project being compiled has \"Check in background\" set to true\n\nThen:\n- When I compile the project myself in Visual Studio, the static checker runs in the background and prints it's output to the Visual Studio build log. This is achieved through COM (I think?) and the `VSPID` environment variable as shown [here](https://github.com/Microsoft/CodeContracts/blob/79a04c96679b6d400c286dd62d6a2ec77462da72/Microsoft.VisualStudio.CodeTools/TaskManager/Package.cs#L127) and [here](https://github.com/Microsoft/CodeContracts/blob/79a04c96679b6d400c286dd62d6a2ec77462da72/Microsoft.Research/MsBuildCodeContracts/MsBuildTask.cs#L315).\n- When I compile the project myself with MSBuild, the static checker prints `Task manager is unavailable (unable to run in background)` and runs in the foreground, printing output to the MSBuild log.\n- When I compile the project with my MSBuild-wrapping program, the static checker prints `Task manager is unavailable (unable to run in background)` and runs in the foreground, printing output to the MSBuild log.\n\nThis is all OK and expected, however:\n\nWhen I attempt to debug my MSBuild-wrapping program:\n- The static checker prints no output to the MSBuild log\n- The static checker appears in the MSBuild (diagnostic) log as a target that was run, but only for approx 60ms\n- The static checker actual execution time does not contribute to MSBuild's logged execution time. For example, if the static checker took 10 seconds, MSBuild will say that it completed in 2 seconds, not 12.\n- MSBuild.exe does not exit until the static checker is finished (in this example, for 12 seconds).\n- **The static checker prints it's output to the instance of Visual Studio that is debugging my MSBuild-wrapping program.**\n\nIf my MSBuild-wrapping program calls `Environment.SetEnvironmentVariable(\"VSPID\", null)` upon startup, then the expected behaviour (the static checker prints `Task manager is unavailable (unable to run in background)` and runs in the foreground, printing output to the MSBuild log) occurs.\n\nI believe what is happening is the following:\n- Visual Studio sets the `VSPID` environment variable.\n- Visual Studio launched my MSBuild-wrapping program with the debugger attached. This process inherits the `VSPID` environment variable.\n- My program launched MSBuild. MSBuild inherits the `VSPID` environment variable. \n- The static checker sees the `VSPID` environment variable and communicates back to the 'parent ' Visual Studio instance.\n\nI can't see any easy way around this, without perhaps a way to identify what processes in the process chain are part of the VS/MSBuild build chain, and what is third-party.\n\nAny ideas?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/385", "title": "mscorlib.Contracts.dll fails strong-name verification", "body": "```\nC:\\Program Files (x86)\\Microsoft\\Contracts\\Contracts\\.NETFramework\\v4.0>sn.exe -vf mscorlib.Contracts.dll\n\nMicrosoft (R) .NET Framework Strong Name Utility  Version 4.0.30319.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nFailed to verify assembly -- Strong name validation failed.\n\nC:\\Program Files (x86)\\Microsoft\\Contracts\\Contracts\\.NETFramework\\v4.0>\n```\n\nAll the other contract assemblies seem to be either `a delay-signed or test-signed assembly` or `does not represent a strongly named assembly`, only mscorlib fails.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/381", "title": "Static checker reports possible null when converting `dynamic` to given type", "body": "e.g. `dynamic Foo() { ... }; ... var thing = (Bar)Foo();`\n\nMy old notes say this may be fixable by adding postconditions to `CallSite<T>` in .NET Framework.\n\nVS2015 (Update 1)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/379", "title": "Static checker is forgetful when provided with an extra boolean", "body": "Here's some code to check if a byte array is a subset of another byte array, and if so, provide the index of the first byte where they overlap.\n\n```\nusing System.Diagnostics.Contracts;\n\nnamespace CodeContractsIsLoopy\n{\n    class LoopyDemo\n    {\n        static int IndexOf(byte[] needle, byte[] haystack)\n        {\n            Contract.Requires(needle != null);\n            Contract.Requires(haystack != null);\n\n            int result = -1;\n            bool sequenceMatched = false;\n            int lastPlace = haystack.Length - needle.Length + 1;\n            for (int i = 0; i < lastPlace; i++)\n            {\n                sequenceMatched = true;\n                for (int j = 0; j < needle.Length /* && sequenceMatched */; j++)\n                {\n                    if (haystack[i + j] != needle[j])\n                    {\n                        sequenceMatched = false;\n                    }\n                }\n\n                if (sequenceMatched)\n                {\n                    result = i;\n                    break;\n                }\n            }\n            return result;\n        }\n    }\n}\n```\n\nWith `&& sequenceMatched` commented out, the static checker is perfectly happy. Here's the build output:\n\n```\n1>------ Build started: Project: CodeContractsIsLoopy, Configuration: Debug Any CPU ------\nCodeContracts: CodeContractsIsLoopy: Schedule static contract analysis.\nCodeContracts: CodeContractsIsLoopy: Background contract analysis started.\n1>  elapsed time: 176.5536ms\n1>  CodeContractsIsLoopy -> C:\\Temp\\CodeContractsIsLoopy\\CodeContractsIsLoopy\\bin\\Debug\\CodeContractsIsLoopy.dll\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: CodeContractsIsLoopy: Time spent connecting to the cache: 00:00:02.2412551\nCodeContracts: CodeContractsIsLoopy: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: CodeContractsIsLoopy: Validated: 100.0%\nCodeContracts: CodeContractsIsLoopy: Checked 11 assertions: 11 correct\nCodeContracts: CodeContractsIsLoopy: Contract density: 0.11\nCodeContracts: CodeContractsIsLoopy: Total methods analyzed 3\nCodeContracts: CodeContractsIsLoopy: Methods analyzed with a faster abstract domain 0\nCodeContracts: CodeContractsIsLoopy: Method analyses read from the cache 1\nCodeContracts: CodeContractsIsLoopy: Methods not found in the cache 2\nCodeContracts: CodeContractsIsLoopy: Methods with 0 warnings 3\nCodeContracts: CodeContractsIsLoopy: Time spent in internal, potentially costly, operations\nCodeContracts: CodeContractsIsLoopy: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0988004 (invoked 8943 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0165146 (invoked 3902 times)\nOverall time spent performing action #CheckIfEqual: 00:00:00.0770416 (invoked 538 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.1100357 (invoked 27 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0754844 (invoked 23 times)\nOverall time spent performing action #Simplex: 00:00:00.1889216 (invoked 496 times)\nOverall time spent performing action #SubPolyJoin: 00:00:00.3040089 (invoked 38 times)\nOverall time spent performing action #WP: 00:00:00.1299996 (invoked 5 times)\nCodeContracts: CodeContractsIsLoopy: Total time 4.619sec. 1539ms/method\nCodeContracts: CodeContractsIsLoopy: Retained 0 preconditions after filtering\nCodeContracts: CodeContractsIsLoopy: Inferred 0 object invariants\nCodeContracts: CodeContractsIsLoopy: Retained 0 object invariants after filtering\nCodeContracts: CodeContractsIsLoopy: Detected 0 code fixes\nCodeContracts: CodeContractsIsLoopy: Proof obligations with a code fix: 0\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CodeContractsIsLoopy.dll(1,1): message : CodeContracts: Checked 11 assertions: 11 correct\nCodeContracts: CodeContractsIsLoopy: \nCodeContracts: CodeContractsIsLoopy: Background contract analysis done.\n```\n\nIf I un-comment out that expression, the static checker forgets that `j < needle.Length` is true inside the inner `for` statement. Here's the ubuild output for that:\n\n```\n1>------ Build started: Project: CodeContractsIsLoopy, Configuration: Debug Any CPU ------\nCodeContracts: CodeContractsIsLoopy: Schedule static contract analysis.\nCodeContracts: CodeContractsIsLoopy: Background contract analysis started.\n1>  elapsed time: 105.2095ms\n1>  CodeContractsIsLoopy -> C:\\Temp\\CodeContractsIsLoopy\\CodeContractsIsLoopy\\bin\\Debug\\CodeContractsIsLoopy.dll\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: CodeContractsIsLoopy: Time spent connecting to the cache: 00:00:01.9775914\nCodeContracts: CodeContractsIsLoopy: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: CodeContractsIsLoopy: Validated:  81.8%\nCodeContracts: CodeContractsIsLoopy: Checked 11 assertions: 9 correct 2 unknown\nCodeContracts: CodeContractsIsLoopy: Contract density: 0.11\nCodeContracts: CodeContractsIsLoopy: Total methods analyzed 3\nCodeContracts: CodeContractsIsLoopy: Methods analyzed with a faster abstract domain 0\nCodeContracts: CodeContractsIsLoopy: Method analyses read from the cache 2\nCodeContracts: CodeContractsIsLoopy: Methods not found in the cache 1\nCodeContracts: CodeContractsIsLoopy: Methods with 0 warnings 2\nCodeContracts: CodeContractsIsLoopy: Time spent in internal, potentially costly, operations\nCodeContracts: CodeContractsIsLoopy: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0653636 (invoked 7253 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0291313 (invoked 3516 times)\nOverall time spent performing action #CheckIfEqual: 00:00:00.0552370 (invoked 559 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.1181164 (invoked 27 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0842481 (invoked 23 times)\nOverall time spent performing action #Simplex: 00:00:00.2137615 (invoked 412 times)\nOverall time spent performing action #SubPolyJoin: 00:00:00.2519935 (invoked 29 times)\nOverall time spent performing action #WP: 00:00:00.1089982 (invoked 7 times)\nCodeContracts: CodeContractsIsLoopy: Total time 4.641sec. 1547ms/method\nCodeContracts: CodeContractsIsLoopy: Retained 0 preconditions after filtering\nCodeContracts: CodeContractsIsLoopy: Inferred 0 object invariants\nCodeContracts: CodeContractsIsLoopy: Retained 0 object invariants after filtering\nCodeContracts: CodeContractsIsLoopy: Detected 1 code fixes\nCodeContracts: CodeContractsIsLoopy: Proof obligations with a code fix: 0\nC:\\Temp\\CodeContractsIsLoopy\\CodeContractsIsLoopy\\Program.cs(20,6): warning : CodeContracts: Array access might be above the upper bound\nC:\\Temp\\CodeContractsIsLoopy\\CodeContractsIsLoopy\\Program.cs(20,6): warning : CodeContracts: Array access might be above the upper bound\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CodeContractsIsLoopy.dll(1,1): message : CodeContracts: Checked 11 assertions: 9 correct 2 unknown\nCodeContracts: CodeContractsIsLoopy: \nCodeContracts: CodeContractsIsLoopy: Background contract analysis done.\n```\n\nThe two warnings in particular:\n\n```\nC:\\Temp\\CodeContractsIsLoopy\\CodeContractsIsLoopy\\Program.cs(20,6): warning : CodeContracts: Array access might be above the upper bound\nC:\\Temp\\CodeContractsIsLoopy\\CodeContractsIsLoopy\\Program.cs(20,6): warning : CodeContracts: Array access might be above the upper bound\n```\n\nIf I then add `Contract.Assume(j < needle.Length)` as the first statement inside that inner `for` loop, the static checker is happy again and reports no errors (12 assertions, 12 correct).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/368", "title": "MSI installations conflicts with NuGet", "body": "As mentioned in #13, the NuGet package does not automatically install the targets file in the project.\n\nIf I add the following import after `Microsoft.CSharp.targets`:\n\n```\n  <PropertyGroup>\n    <CodeContractsInstallDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\\packages\\DotNet.Contracts.1.10.10126.4\\'))</CodeContractsInstallDir>\n  </PropertyGroup>\n  <Import Project=\"$(CodeContractsInstallDir)\\MsBuild\\v$(VisualStudioVersion)\\Microsoft.CodeContracts.targets\"/>\n```\n\nI get the following build error:\n\n| Severity | Code | Description | Project | File | Line | Suppression | State |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Error | \"obj\\Debug\\Decl\\ContractNuGetTest.dll;obj\\Debug\\Decl\\ContractNuGetTest.dll\" is an invalid value for the \"OutputAssembly\" parameter of the \"Csc\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". | ContractNuGetTest |  |  |  |  |  |\n\nJudging by MSBuild diagnostic output, `Microsoft.CodeContracts.targets` from the MSI is being included, which means that the targets file from NuGet comes in afterwards and is adding items to now-not-empty ItemGroups.\n\nIf I edit the `csproj` file to reflect the following:\n\n```\n  <PropertyGroup>\n    <DontImportCodeContracts>True</DontImportCodeContracts>\n  </PropertyGroup>\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n  <PropertyGroup>\n    <CodeContractsInstallDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\\packages\\DotNet.Contracts.1.10.10126.4\\'))</CodeContractsInstallDir>\n  </PropertyGroup>\n  <Import Project=\"$(CodeContractsInstallDir)\\MsBuild\\v$(VisualStudioVersion)\\Microsoft.CodeContracts.targets\"/>\n```\n\nThen Contracts work from NuGet, overriding any MSI-installed Code Contracts on the system.\n\nSo, I see three problems:\n1. Contracts from NuGet aren't automatically set up\n2. Contracts from the MSI take precedence over Contracts from NuGet. I'm not sure if this one is solvable.\n3. Contracts from NuGet conflict with Contracts from the MSI, it isn't a clean replacement.\n\nI think the simplest solution to this is:\n1. Add a property named `CodeContractsPackaged` which acts the same as `DontImportCodeContracts`\n2. Use NuGet to set this property and install the Code Contracts .targets file in the project.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/363", "title": "Static checker warnings when building Code Contracts", "body": "Code Contracts itself has some static checker warnings, but these scroll by so fast when building.\n\nIt may be worth looking into these. Could be actual bugs, or could be the static checker just being pedantic.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/357", "title": "cccheck false-positive warning about constant value", "body": "Using the following example project;\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace ContractSwitchString\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length != 1)\n            {\n                Console.Error.WriteLine(\"Usage: ContractSwitchString.exe <some arg>\");\n                return;\n            }\n\n            var text = args[0];\n            Contract.Assume(text != null);\n\n            bool value;\n            if (TryParse(text, out value))\n            {\n                Console.WriteLine(value);\n            }\n            else\n            {\n                Console.WriteLine(\"Invalid value!\");\n            }\n        }\n\n        static bool TryParse(string sourceValue, out bool result)\n        {\n            Contract.Requires(sourceValue != null);\n\n            var sourceValueLower = sourceValue.ToLower();\n\n            switch (sourceValueLower)\n            {\n                case \"true\":\n                case \"1\":\n                case \"t\":\n                case \"y\":\n                    result = true;\n                    return true;\n\n                case \"false\":\n                case \" \":\n                case \"0\":\n                case \"f\":\n                case \"n\":\n                    result = false;\n                    return true;\n\n                default:\n                    result = false;\n                    return false;\n            }\n        }\n    }\n}\n```\n\nThe Static Checker warns about a hashcode check that the compiler (VS2015 Update 1) emits:\n\n```\n1>------ Build started: Project: ContractSwitchString, Configuration: Debug Any CPU ------\nCodeContracts: ContractSwitchString: Schedule static contract analysis.\nCodeContracts: ContractSwitchString: Background contract analysis started.\n1>  elapsed time: 119.3951ms\n1>  ContractSwitchString -> C:\\Temp\\ContractSwitchString\\ContractSwitchString\\bin\\Debug\\ContractSwitchString.exe\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: ContractSwitchString: Time spent connecting to the cache: 00:00:01.1969858\nCodeContracts: ContractSwitchString: Cache used: (LocalDb)\\MSSQLLocalDB\nC:\\Temp\\ContractSwitchString\\ContractSwitchString\\Program.cs(17,4): message : CodeContracts: Suggested assumption: Assumption can be proven: Consider changing it into an assert.\nCodeContracts: ContractSwitchString: Validated: 100.0%\nCodeContracts: ContractSwitchString: Checked 9 assertions: 9 correct\nCodeContracts: ContractSwitchString: Contract density: 0.43\nCodeContracts: ContractSwitchString: Total methods analyzed 4\nCodeContracts: ContractSwitchString: Methods analyzed with a faster abstract domain 0\nCodeContracts: ContractSwitchString: Method analyses read from the cache 2\nCodeContracts: ContractSwitchString: Methods not found in the cache 2\nCodeContracts: ContractSwitchString: Methods with 0 warnings 4\nCodeContracts: ContractSwitchString: Time spent in internal, potentially costly, operations\nCodeContracts: ContractSwitchString: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0514485 (invoked 10370 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0247808 (invoked 5609 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.1050015 (invoked 28 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0719934 (invoked 23 times)\nOverall time spent performing action #Simplex: 00:00:00.0640093 (invoked 386 times)\nOverall time spent performing action #SubPolyJoin: 00:00:00.1889772 (invoked 30 times)\nOverall time spent performing action #WP: 00:00:00.6009910 (invoked 22 times)\nOverall time spent performing action #CheckIfEqual: 00:00:00 (invoked 8 times)\nCodeContracts: ContractSwitchString: Total time 5.323sec. 1330ms/method\nCodeContracts: ContractSwitchString: Retained 0 preconditions after filtering\nCodeContracts: ContractSwitchString: Inferred 0 object invariants\nCodeContracts: ContractSwitchString: Retained 0 object invariants after filtering\nCodeContracts: ContractSwitchString: Discovered 1 postconditions to suggest\nCodeContracts: ContractSwitchString: Retained 1 postconditions after filtering\nCodeContracts: ContractSwitchString: Detected 0 code fixes\nCodeContracts: ContractSwitchString: Proof obligations with a code fix: 0\nC:\\Temp\\ContractSwitchString\\ContractSwitchString\\Program.cs(36,4): warning : CodeContracts: warning: The Boolean condition local1 != 1303515621 always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check (5 more unreached assertion(s) at the same location)\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\ContractSwitchString.exe(1,1): message : CodeContracts: Checked 9 assertions: 9 correct\nCodeContracts: ContractSwitchString: \nCodeContracts: ContractSwitchString: Background contract analysis done.\n```\n\nThe particular warning line:\n\n```\n warning : CodeContracts: warning: The Boolean condition local1 != 1303515621 always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check (5 more unreached assertion(s) at the same location)\n```\n\nThe IL of the function is:\n\n```\n.method private hidebysig static \n    bool TryParse (\n        string sourceValue,\n        [out] bool& result\n    ) cil managed \n{\n    // Method begins at RVA 0x20c4\n    // Code size 440 (0x1b8)\n    .maxstack 4\n    .locals init (\n        [0] string sourceValueLower,\n        [1] string,\n        [2] uint32,\n        [3] bool,\n        [4] bool 'Contract.Result()'\n    )\n\n    IL_0000: ldarg.0\n    IL_0001: ldnull\n    IL_0002: cgt.un\n    IL_0004: ldnull\n    IL_0005: ldstr \"sourceValue != null\"\n    IL_000a: call void System.Diagnostics.Contracts.__ContractsRuntime::Requires(bool, string, string)\n    IL_000f: nop\n    IL_0010: nop\n    IL_0011: ldarg.0\n    IL_0012: callvirt instance string [mscorlib]System.String::ToLower()\n    IL_0017: stloc.0\n    IL_0018: ldloc.0\n    IL_0019: stloc.1\n    IL_001a: ldloc.1\n    IL_001b: call uint32 '<PrivateImplementationDetails>'::ComputeStringHash(string)\n    IL_0020: stloc.2\n    IL_0021: ldloc.2\n    IL_0022: ldc.i4 890022063\n    IL_0027: bgt.un IL_0077\n\n    IL_002c: ldloc.2\n    IL_002d: ldc.i4 621580159\n    IL_0032: bgt.un IL_0057\n\n    IL_0037: ldloc.2\n    IL_0038: ldc.i4 184981848\n    IL_003d: beq IL_0126\n\n    IL_0042: br IL_0047\n\n    IL_0047: ldloc.2\n    IL_0048: ldc.i4 621580159\n    IL_004d: beq IL_013b\n\n    IL_0052: br IL_01a3\n\n    IL_0057: ldloc.2\n    IL_0058: ldc.i4 873244444\n    IL_005d: beq IL_00e7\n\n    IL_0062: br IL_0067\n\n    IL_0067: ldloc.2\n    IL_0068: ldc.i4 890022063\n    IL_006d: beq IL_0150\n\n    IL_0072: br IL_01a3\n\n    IL_0077: ldloc.2\n    IL_0078: ldc.i4 -485742695\n    IL_007d: bgt.un IL_00a2\n\n    IL_0082: ldloc.2\n    IL_0083: ldc.i4 1303515621\n    IL_0088: beq IL_00d2\n\n    IL_008d: br IL_0092\n\n    IL_0092: ldloc.2\n    IL_0093: ldc.i4 -485742695\n    IL_0098: beq IL_0165\n\n    IL_009d: br IL_01a3\n\n    IL_00a2: ldloc.2\n    IL_00a3: ldc.i4 -351521743\n    IL_00a8: beq IL_017a\n\n    IL_00ad: br IL_00b2\n\n    IL_00b2: ldloc.2\n    IL_00b3: ldc.i4 -250856029\n    IL_00b8: beq IL_00fc\n\n    IL_00bd: br IL_00c2\n\n    IL_00c2: ldloc.2\n    IL_00c3: ldc.i4 -66302220\n    IL_00c8: beq IL_0111\n\n    IL_00cd: br IL_01a3\n\n    IL_00d2: ldloc.1\n    IL_00d3: ldstr \"true\"\n    IL_00d8: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_00dd: brtrue IL_018f\n\n    IL_00e2: br IL_01a3\n\n    IL_00e7: ldloc.1\n    IL_00e8: ldstr \"1\"\n    IL_00ed: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_00f2: brtrue IL_018f\n\n    IL_00f7: br IL_01a3\n\n    IL_00fc: ldloc.1\n    IL_00fd: ldstr \"t\"\n    IL_0102: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_0107: brtrue IL_018f\n\n    IL_010c: br IL_01a3\n\n    IL_0111: ldloc.1\n    IL_0112: ldstr \"y\"\n    IL_0117: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_011c: brtrue IL_018f\n\n    IL_0121: br IL_01a3\n\n    IL_0126: ldloc.1\n    IL_0127: ldstr \"false\"\n    IL_012c: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_0131: brtrue IL_0199\n\n    IL_0136: br IL_01a3\n\n    IL_013b: ldloc.1\n    IL_013c: ldstr \" \"\n    IL_0141: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_0146: brtrue IL_0199\n\n    IL_014b: br IL_01a3\n\n    IL_0150: ldloc.1\n    IL_0151: ldstr \"0\"\n    IL_0156: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_015b: brtrue IL_0199\n\n    IL_0160: br IL_01a3\n\n    IL_0165: ldloc.1\n    IL_0166: ldstr \"f\"\n    IL_016b: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_0170: brtrue IL_0199\n\n    IL_0175: br IL_01a3\n\n    IL_017a: ldloc.1\n    IL_017b: ldstr \"n\"\n    IL_0180: call bool [mscorlib]System.String::op_Equality(string, string)\n    IL_0185: brtrue IL_0199\n\n    IL_018a: br IL_01a3\n\n    IL_018f: ldarg.1\n    IL_0190: ldc.i4.1\n    IL_0191: stind.i1\n    IL_0192: ldc.i4.1\n    IL_0193: stloc.3\n    IL_0194: br IL_01ad\n\n    IL_0199: ldarg.1\n    IL_019a: ldc.i4.0\n    IL_019b: stind.i1\n    IL_019c: ldc.i4.1\n    IL_019d: stloc.3\n    IL_019e: br IL_01ad\n\n    IL_01a3: ldarg.1\n    IL_01a4: ldc.i4.0\n    IL_01a5: stind.i1\n    IL_01a6: ldc.i4.0\n    IL_01a7: stloc.3\n    IL_01a8: br IL_01ad\n\n    IL_01ad: ldloc.3\n    IL_01ae: stloc.s 'Contract.Result()'\n    IL_01b0: br IL_01b5\n\n    IL_01b5: ldloc.s 'Contract.Result()'\n    IL_01b7: ret\n} // end of method Program::TryParse\n```\n\nILSpy decompiles the function as such:\n\n```\n// ContractSwitchString.Program\nprivate static bool TryParse(string sourceValue, out bool result)\n{\n    __ContractsRuntime.Requires(sourceValue != null, null, \"sourceValue != null\");\n    string sourceValueLower = sourceValue.ToLower();\n    string text = sourceValueLower;\n    uint num = <PrivateImplementationDetails>.ComputeStringHash(text);\n    if (num <= 890022063u)\n    {\n        if (num <= 621580159u)\n        {\n            if (num != 184981848u)\n            {\n                if (num != 621580159u)\n                {\n                    goto IL_1A3;\n                }\n                if (!(text == \" \"))\n                {\n                    goto IL_1A3;\n                }\n                goto IL_199;\n            }\n            else\n            {\n                if (!(text == \"false\"))\n                {\n                    goto IL_1A3;\n                }\n                goto IL_199;\n            }\n        }\n        else if (num != 873244444u)\n        {\n            if (num != 890022063u)\n            {\n                goto IL_1A3;\n            }\n            if (!(text == \"0\"))\n            {\n                goto IL_1A3;\n            }\n            goto IL_199;\n        }\n        else if (!(text == \"1\"))\n        {\n            goto IL_1A3;\n        }\n    }\n    else if (num <= 3809224601u)\n    {\n        if (num != 1303515621u)\n        {\n            if (num != 3809224601u)\n            {\n                goto IL_1A3;\n            }\n            if (!(text == \"f\"))\n            {\n                goto IL_1A3;\n            }\n            goto IL_199;\n        }\n        else if (!(text == \"true\"))\n        {\n            goto IL_1A3;\n        }\n    }\n    else if (num != 3943445553u)\n    {\n        if (num != 4044111267u)\n        {\n            if (num != 4228665076u)\n            {\n                goto IL_1A3;\n            }\n            if (!(text == \"y\"))\n            {\n                goto IL_1A3;\n            }\n        }\n        else if (!(text == \"t\"))\n        {\n            goto IL_1A3;\n        }\n    }\n    else\n    {\n        if (!(text == \"n\"))\n        {\n            goto IL_1A3;\n        }\n        goto IL_199;\n    }\n    result = true;\n    bool result2 = true;\n    return result2;\n    IL_199:\n    result = false;\n    result2 = true;\n    return result2;\n    IL_1A3:\n    result = false;\n    result2 = false;\n    return result2;\n}\n```\n\nAs far as I can tell, there's no dead code or redundant checks here, despite cccheck's warning.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/350", "title": "Static checker returns \"requires unreachable\" error when exhausting a switch statement", "body": "When switching on an enum, if the switch statement is exhaustive but still contains a `default` statement (because you can do things in C# like `(MyEnum)(12345)` to create undefined enum values), the static checker claims that the `default` statement is unreachable.\n\n> warning : CodeContracts: requires unreachable\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/338", "title": "ccrewrite:Use of [ContractAbbreviator] triggers CA1801, CA1811", "body": "When ccrewrite rewrites a `[ContractAbbreviator]` method's contracts into the functions that use it, it leaves behind an empty function. This triggers the following two Code Analysis rules:\n- CA1801: Review unused parameters\n- CA1811: Avoid uncalled private code\n\nCA1801 is triggered because the abbreviator method is now empty, so any parameters are unused.\n\nCA1811 is triggered because the abbreviator method is not called by anything, as it's contracts have been moved to the methods that invoke it.\n\nThis can be seen with the following code example:\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace ContractAbbreviatorDemo\n{\n    public static class Foo\n    {\n        public static int DoTheThing(string foo)\n        {\n            Validate(foo);\n            return foo[0].GetHashCode();\n        }\n\n        [ContractAbbreviator]\n        static void Validate(string foo)\n        {\n            Contract.Requires<ArgumentNullException>(foo != null);\n            Contract.Requires<ArgumentException>(foo.Length > 0);\n        }\n    }\n}\n```\n\nThe following IL is produced with Visual Studio 2013 (after rewrite) for this class:\n\n```\n.class public auto ansi abstract sealed beforefieldinit ContractAbbreviatorDemo.Foo\n    extends [mscorlib]System.Object\n{\n    // Methods\n    .method public hidebysig static \n        int32 DoTheThing (\n            string foo\n        ) cil managed \n    {\n        // Method begins at RVA 0x2048\n        // Code size 71 (0x47)\n        .maxstack 7\n        .locals init (\n            [0] int32 CS$1$0000,\n            [1] char CS$0$0001,\n            [2] int32 'Contract.Result()'\n        )\n\n        IL_0000: ldarg.0\n        IL_0001: ldnull\n        IL_0002: ceq\n        IL_0004: ldc.i4.0\n        IL_0005: ceq\n        IL_0007: ldnull\n        IL_0008: ldstr \"foo != null\"\n        IL_000d: call void System.Diagnostics.Contracts.__ContractsRuntime::Requires<class [mscorlib]System.ArgumentNullException>(bool, string, string)\n        IL_0012: nop\n        IL_0013: ldarg.0\n        IL_0014: callvirt instance int32 [mscorlib]System.String::get_Length()\n        IL_0019: ldc.i4.0\n        IL_001a: cgt\n        IL_001c: ldnull\n        IL_001d: ldstr \"foo.Length > 0\"\n        IL_0022: call void System.Diagnostics.Contracts.__ContractsRuntime::Requires<class [mscorlib]System.ArgumentException>(bool, string, string)\n        IL_0027: nop\n        IL_0028: nop\n        IL_0029: ldarg.0\n        IL_002a: ldc.i4.0\n        IL_002b: callvirt instance char [mscorlib]System.String::get_Chars(int32)\n        IL_0030: stloc.1\n        IL_0031: ldloca.s CS$0$0001\n        IL_0033: call instance int32 [mscorlib]System.Char::GetHashCode()\n        IL_0038: stloc.0\n        IL_0039: br IL_003e\n\n        IL_003e: ldloc.0\n        IL_003f: stloc.2\n        IL_0040: br IL_0045\n\n        IL_0045: ldloc.2\n        IL_0046: ret\n    } // end of method Foo::DoTheThing\n\n    .method private hidebysig static \n        void Validate (\n            string foo\n        ) cil managed \n    {\n        .custom instance void [mscorlib]System.Diagnostics.Contracts.ContractAbbreviatorAttribute::.ctor() = (\n            01 00 00 00\n        )\n        // Method begins at RVA 0x20a0\n        // Code size 2 (0x2)\n        .maxstack 8\n\n        IL_0000: nop\n        IL_0001: ret\n    } // end of method Foo::Validate\n\n} // end of class ContractAbbreviatorDemo.Foo\n```\n\nTranslated back into C#, the rewritten code resembles the following:\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace ContractAbbreviatorDemo\n{\n    public static class Foo\n    {\n        public static int DoTheThing(string foo)\n        {\n            __ContractsRuntime.Requires<ArgumentNullException>(foo != null, null, \"foo != null\");\n            __ContractsRuntime.Requires<ArgumentException>(foo.Length > 0, null, \"foo.Length > 0\");\n            return foo[0].GetHashCode();\n        }\n\n        [ContractAbbreviator]\n        private static void Validate(string foo)\n        {\n        }\n    }\n}\n```\n\nAs you can see, `ContractAbbreviatorDemo.Foo.Validate` is now left behind, triggering these Code Analysis rules.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/317", "title": "cccheck loses track of constraints when they are combined", "body": "Example code:\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace CCRepro\n{\n    static class MathyThing\n    {\n        public static int Foo(ContractedTuple<int, int> a)\n        {\n            Contract.Requires(a != null);\n            Contract.Requires(a.Item1 >= 0 && a.Item1 <= 31);\n            Contract.Requires(a.Item2 >= 0 && a.Item2 < 2000);\n            Contract.Ensures(Contract.Result<int>() <= 65536);\n\n            return (a.Item1 * 2000) + a.Item2;\n        }\n        public static int Foo2(ContractedTuple<int, int> a)\n        {\n            Contract.Requires(a != null);\n            Contract.Requires(a.Item1 >= 0);\n            Contract.Requires(a.Item1 <= 31);\n            Contract.Requires(a.Item2 >= 0);\n            Contract.Requires(a.Item2 < 2000);\n            Contract.Ensures(Contract.Result<int>() <= 65536);\n\n            return (a.Item1 * 2000) + a.Item2;\n        }\n\n        public class ContractedTuple<T1, T2>\n        {\n            public ContractedTuple(T1 first, T2 second)\n            {\n                this.first = first;\n                this.second = second;\n            }\n\n            readonly T1 first;\n            readonly T2 second;\n\n            [Pure]\n            public T1 Item1\n            {\n                get { return first; }\n            }\n\n            [Pure]\n            public T2 Item2\n            {\n                get { return second; }\n            }\n        }\n    }\n}\n```\n\nBuild output:\n\n```\n1>------ Rebuild All started: Project: CCRepro, Configuration: Debug Any CPU ------\nCodeContracts: CCRepro: Schedule static contract analysis.\nCodeContracts: CCRepro: Background contract analysis started.\n1>  elapsed time: 103.3435ms\n1>  CCRepro -> C:\\Temp\\CCRepro\\CCRepro\\bin\\Debug\\CCRepro.dll\n========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========\nCodeContracts: CCRepro: Time spent connecting to the cache: 00:00:01.3437673\nCodeContracts: CCRepro: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: CCRepro: Validated: 95.0 %\nCodeContracts: CCRepro: Checked 20 assertions: 19 correct 1 unknown\nCodeContracts: CCRepro: Contract density: 3.60\nCodeContracts: CCRepro: Total methods analyzed 6\nCodeContracts: CCRepro: Methods analyzed with a faster abstract domain 0\nCodeContracts: CCRepro: Method analyses read from the cache 5\nCodeContracts: CCRepro: Methods not found in the cache 1\nCodeContracts: CCRepro: Methods with 0 warnings 5\nCodeContracts: CCRepro: Time spent in internal, potentially costly, operations\nCodeContracts: CCRepro: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00 (invoked 3319 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00 (invoked 1522 times)\nOverall time spent performing action #Simplex: 00:00:00.0468921 (invoked 86 times)\nOverall time spent performing action #WP: 00:00:00.1415818 (invoked 5 times)\nCodeContracts: CCRepro: Total time 3.800sec. 633ms/method\nCodeContracts: CCRepro: Retained 0 preconditions after filtering\nCodeContracts: CCRepro: Inferred 0 object invariants\nCodeContracts: CCRepro: Retained 0 object invariants after filtering\nCodeContracts: CCRepro: Detected 0 code fixes\nCodeContracts: CCRepro: Proof obligations with a code fix: 0\nC:\\Temp\\CCRepro\\CCRepro\\Class1.cs(15,13): warning : CodeContracts: ensures unproven: Contract.Result<int>() <= 65536. Are you making some assumption on CCRepro.MathyThing+ContractedTuple`2<System.Int32,System.Int32>.get_Item2 that the static checker is unaware of? Or, Are you making some assumption on CCRepro.MathyThing+ContractedTuple`2<System.Int32,System.Int32>.get_Item1 that the static checker is unaware of? Or, Consider strengthening some guard?\nC:\\Temp\\CCRepro\\CCRepro\\Class1.cs(13,13): warning :   + location related to previous warning\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CCRepro.dll(1,1): message : CodeContracts: Checked 20 assertions: 19 correct 1 unknown\nCodeContracts: CCRepro: \nCodeContracts: CCRepro: Background contract analysis done.\n```\n\nNote that `Foo` and `Foo2` are essentially identical, the only difference is that `Foo` combines constraints for a single variable, whereas `Foo2` declares them as separate `Contract.Requires` statements.\n\nOnly `Foo` gets a static checker warning, `Foo2` does not.\n\nI expect that neither `Foo` nor `Foo2` should get a static checker warning.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/303", "title": "Code Contracts does not understand read-only C# 6 properties", "body": "(Yes, another Static Checker issue. I haven't had a chance to test ccrewrite yet :smile:)\n\nCode:\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace ConsoleApplication2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var foo = new Foo();\n            Console.WriteLine(foo.ToString());\n        }\n    }\n\n    class Foo\n    {\n        public Foo()\n        {\n            Bar = new object();\n        }\n\n        public object Bar { get; }\n\n        [ContractInvariantMethod]\n        void ObjectInvariant()\n        {\n            Contract.Invariant(Bar != null);\n        }\n    }\n}\n```\n\nReconstructed `Foo`, according to ILSpy:\n\n```\nusing System;\nusing System.Diagnostics;\nusing System.Diagnostics.Contracts;\nusing System.Runtime.CompilerServices;\n\nnamespace ConsoleApplication2\n{\n    internal class Foo\n    {\n        [DebuggerBrowsable(DebuggerBrowsableState.Never), CompilerGenerated]\n        protected bool $evaluatingInvariant$;\n\n        public object Bar\n        {\n            [CompilerGenerated]\n            get\n            {\n                object result = this.<Bar>k__BackingField;\n                if (!this.$evaluatingInvariant$)\n                {\n                }\n                return result;\n            }\n        }\n\n        public Foo()\n        {\n            bool flag = this.$evaluatingInvariant$;\n            this.$evaluatingInvariant$ = true;\n            base..ctor();\n            this.<Bar>k__BackingField = new object();\n            this.$evaluatingInvariant$ = flag;\n            this.$InvariantMethod$();\n        }\n\n        [ContractInvariantMethod, CompilerGenerated]\n        protected override void $InvariantMethod$()\n        {\n            if (!this.$evaluatingInvariant$)\n            {\n                this.$evaluatingInvariant$ = true;\n                try\n                {\n                    __ContractsRuntime.Invariant(this.Bar != null, null, \"Bar != null\");\n                }\n                finally\n                {\n                    this.$evaluatingInvariant$ = false;\n                }\n            }\n        }\n    }\n}\n```\n\nMSBuild output:\n\n```\n1>------ Build started: Project: ConsoleApplication2, Configuration: Debug Any CPU ------\n1>  elapsed time: 106.3271ms\n1>  ConsoleApplication2 -> C:\\Temp\\ConsoleApplication2\\ConsoleApplication2\\bin\\Debug\\ConsoleApplication2.exe\nCodeContracts: ConsoleApplication2: Schedule static contract analysis.\nCodeContracts: ConsoleApplication2: Background contract analysis started.\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: ConsoleApplication2: Time spent connecting to the cache: 00:00:03.2171268\nCodeContracts: ConsoleApplication2: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: ConsoleApplication2: Validated:  83.3%\nCodeContracts: ConsoleApplication2: Checked 6 assertions: 5 correct 1 false\nCodeContracts: ConsoleApplication2: Contract density: 0.50\nCodeContracts: ConsoleApplication2: Total methods analyzed 4\nCodeContracts: ConsoleApplication2: Methods analyzed with a faster abstract domain 0\nCodeContracts: ConsoleApplication2: Method analyses read from the cache 0\nCodeContracts: ConsoleApplication2: Methods not found in the cache 4\nCodeContracts: ConsoleApplication2: Methods with 0 warnings 3\nCodeContracts: ConsoleApplication2: Time spent in internal, potentially costly, operations\nCodeContracts: ConsoleApplication2: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0039980 (invoked 36 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0069957 (invoked 236 times)\nOverall time spent performing action #CheckIfEqual: 00:00:00.0099758 (invoked 2 times)\nCodeContracts: ConsoleApplication2: Total time 3.197sec. 799ms/method\nCodeContracts: ConsoleApplication2: Retained 0 preconditions after filtering\nCodeContracts: ConsoleApplication2: Inferred 0 object invariants\nCodeContracts: ConsoleApplication2: Retained 0 object invariants after filtering\nCodeContracts: ConsoleApplication2: Detected 0 code fixes\nCodeContracts: ConsoleApplication2: Proof obligations with a code fix: 0\nC:\\Temp\\ConsoleApplication2\\ConsoleApplication2\\Program.cs(20,3): warning : CodeContracts: invariant is false: Bar != null\nC:\\Temp\\ConsoleApplication2\\ConsoleApplication2\\Program.cs(27,4): warning :   + location related to previous warning\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\ConsoleApplication2.exe(1,1): message : CodeContracts: Checked 6 assertions: 5 correct 1 false\nCodeContracts: ConsoleApplication2: \nCodeContracts: ConsoleApplication2: Background contract analysis done.\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/303/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/300", "title": "System.Reflection.Assembly missing contracts", "body": "e.g. `Assembly.Load(string)` [here](https://github.com/Microsoft/CodeContracts/blob/master/Microsoft.Research/Contracts/MsCorlib/System.Reflection.Assembly.cs#L386-L390) is missing [these contracts](http://referencesource.microsoft.com/#mscorlib/system/reflection/assembly.cs,280) from the Reference Source.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/254", "title": "cccheck: Contract.ForAll on Dictionary values does not work (VS2013)", "body": "Code:\n\n```\nusing System.Collections.Generic;\nusing System.Diagnostics.Contracts;\n\nnamespace ConsoleApplication1\n{\n       class Program\n       {\n              static void Main(string[] args)\n              {\n                     Dictionary<string, string> parameters = new Dictionary<string, string>();\n                     parameters.Add(\"pk\", \"a\");\n                     parameters.Add(\"version\", \"b\");\n                     parameters.Add(\"versionDate\", \"c\");\n\n                     Contract.Assume(Contract.ForAll(parameters, d => d.Value != null));\n                     DoAThing(parameters);\n              }\n\n              static void DoAThing(Dictionary<string, string> dict)\n              {\n                     Contract.Requires(dict != null);\n                     Contract.Requires(Contract.ForAll(dict, d => d.Value != null));\n              }\n       }\n}\n```\n\nBuild output:\n\n```\n1>------ Build started: Project: ConsoleApplication1, Configuration: Debug Any CPU ------\nCodeContracts: ConsoleApplication1: Schedule static contract analysis.\nCodeContracts: ConsoleApplication1: Background contract analysis started.\n1>  elapsed time: 116.1029ms\n1>  ConsoleApplication1 -> C:\\Temp\\ContractForAllDictionary\\ConsoleApplication1\\ConsoleApplication1\\bin\\Debug\\ConsoleApplication1.exe\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: ConsoleApplication1: Time spent connecting to the cache: 00:00:02.3649871\nCodeContracts: ConsoleApplication1: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: ConsoleApplication1: Validated:  91.7%\nCodeContracts: ConsoleApplication1: Checked 12 assertions: 11 correct 1 unknown\nCodeContracts: ConsoleApplication1: Contract density: 2.51\nCodeContracts: ConsoleApplication1: Total methods analyzed 4\nCodeContracts: ConsoleApplication1: Methods analyzed with a faster abstract domain 0\nCodeContracts: ConsoleApplication1: Method analyses read from the cache 0\nCodeContracts: ConsoleApplication1: Methods not found in the cache 4\nCodeContracts: ConsoleApplication1: Methods with 0 warnings 3\nCodeContracts: ConsoleApplication1: Time spent in internal, potentially costly, operations\nCodeContracts: ConsoleApplication1: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0059983 (invoked 1416 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0079963 (invoked 2812 times)\nOverall time spent performing action #Simplex: 00:00:00.0400012 (invoked 37 times)\nOverall time spent performing action #WP: 00:00:00.1250052 (invoked 4 times)\nOverall time spent performing action #CheckIfEqual: 00:00:00.0019997 (invoked 50 times)\nCodeContracts: ConsoleApplication1: Total time 3.578sec. 894ms/method\nCodeContracts: ConsoleApplication1: Retained 0 preconditions after filtering\nCodeContracts: ConsoleApplication1: Inferred 0 object invariants\nCodeContracts: ConsoleApplication1: Retained 0 object invariants after filtering\nCodeContracts: ConsoleApplication1: Detected 0 code fixes\nCodeContracts: ConsoleApplication1: Proof obligations with a code fix: 0\nC:\\Temp\\ContractForAllDictionary\\ConsoleApplication1\\ConsoleApplication1\\Program.cs(16,4): warning : CodeContracts: requires unproven: Contract.ForAll(dict, d => d.Value != null)\nC:\\Temp\\ContractForAllDictionary\\ConsoleApplication1\\ConsoleApplication1\\Program.cs(22,4): warning :   + location related to previous warning\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\ConsoleApplication1.exe(1,1): message : CodeContracts: Checked 12 assertions: 11 correct 1 unknown\nCodeContracts: ConsoleApplication1: \nCodeContracts: ConsoleApplication1: Background contract analysis done.\n```\n\nI assume that the introduction of `.Value` into the delegate is somehow breaking this - `Contract.ForAll(list, x => x != null)` works, but not the above.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/242", "title": "ccrewrite removes non-Contract method call, resulting in NullReferenceException", "body": "Somewhat ironically, Code Contracts has introduced a null reference exception into my code by removing a function call.\n\nThe repro case is simple: When `ccrewrite` removes calls to Contract methods (e.g. in `ReleaseRequires` mode), it will also remove any semi-inlined methods.\n\nCode:\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace ContractsInlining\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            object thing = null;\n            var didTheThing = TryDoThing(out thing);\n            Contract.Assume(didTheThing);\n            Console.WriteLine(\"The thing: {0}\", thing.ToString());\n        }\n\n        static bool TryDoThing(out object value)\n        {\n            value = new object();\n            return true;\n        }\n    }\n}\n```\n\nIL of `Main`:\n\n```\n.method private hidebysig static \n    void Main (\n        string[] args\n    ) cil managed \n{\n    // Method begins at RVA 0x2048\n    // Code size 42 (0x2a)\n    .maxstack 4\n    .entrypoint\n    .locals init (\n        [0] object thing,\n        [1] bool didTheThing\n    )\n\n    IL_0000: nop\n    IL_0001: ldnull\n    IL_0002: stloc.0\n    IL_0003: ldloca.s thing\n    IL_0005: call bool ContractsInlining.Program::TryDoThing(object&)\n    IL_000a: stloc.1\n    IL_000b: ldloc.1\n    IL_000c: ldnull\n    IL_000d: ldstr \"didTheThing\"\n    IL_0012: call void System.Diagnostics.Contracts.__ContractsRuntime::Assume(bool, string, string)\n    IL_0017: nop\n    IL_0018: ldstr \"The thing: {0}\"\n    IL_001d: ldloc.0\n    IL_001e: callvirt instance string [mscorlib]System.Object::ToString()\n    IL_0023: call void [mscorlib]System.Console::WriteLine(string, object)\n    IL_0028: nop\n    IL_0029: ret\n} // end of method Program::Main\n\n```\n\nIL of `Main` with compiler optimizations:\n\n```\n.method private hidebysig static \n    void Main (\n        string[] args\n    ) cil managed \n{\n    // Method begins at RVA 0x2048\n    // Code size 37 (0x25)\n    .maxstack 4\n    .entrypoint\n    .locals init (\n        [0] object thing\n    )\n\n    IL_0000: ldnull\n    IL_0001: stloc.0\n    IL_0002: ldloca.s thing\n    IL_0004: call bool ContractsInlining.Program::TryDoThing(object&)\n    IL_0009: ldnull\n    IL_000a: ldstr \"out thing\"\n    IL_000f: call void System.Diagnostics.Contracts.__ContractsRuntime::Assume(bool, string, string)\n    IL_0014: ldstr \"The thing: {0}\"\n    IL_0019: ldloc.0\n    IL_001a: callvirt instance string [mscorlib]System.Object::ToString()\n    IL_001f: call void [mscorlib]System.Console::WriteLine(string, object)\n    IL_0024: ret\n} // end of method Program::Main\n\n```\n\nAs you can see, instead of storing the result of `TryDoThing` and re-loading it, it leaves it on the expression stack. This is equivalent to `Contract.Assume(TryDoThing(out thing), null, \"didTheThing\")`.\n\nIL of `Main` with compiler optimizations, `ReleaseRequires` and Public Surface Contracts only:\n\n```\n.method private hidebysig static \n    void Main (\n        string[] args\n    ) cil managed \n{\n    // Method begins at RVA 0x2048\n    // Code size 19 (0x13)\n    .maxstack 4\n    .entrypoint\n    .locals init (\n        [0] object thing\n    )\n\n    IL_0000: ldnull\n    IL_0001: stloc.0\n    IL_0002: ldstr \"The thing: {0}\"\n    IL_0007: ldloc.0\n    IL_0008: callvirt instance string [mscorlib]System.Object::ToString()\n    IL_000d: call void [mscorlib]System.Console::WriteLine(string, object)\n    IL_0012: ret\n} // end of method Program::Main\n\n```\n\nBoth the call to `Contract.Assume` **and the call to `TryDoThing`** have been eliminated by `ccrewrite`. This results in a `NullReferenceException` at runtime.\n\nThis happens in both VS2013 and VS2015. IL above is from 2015.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/230", "title": "cccheck is confused by Math.Pow, assumes subsequent conditions are constant", "body": "Code:\n\n```\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace ContractsMathPow\n{\n    public interface IFoo\n    {\n        bool Bar { get; }\n    }\n\n    public static class Baz\n    {\n        public static double Compute(IFoo foo, int x)\n        {\n            Contract.Requires<ArgumentNullException>(foo != null);\n\n            var y = Math.Pow(0.1, x);\n            return foo.Bar ? 0 : y;\n        }\n    }\n}\n```\n\nBuild output:\n\n```\n1>------ Build started: Project: ContractsMathPow, Configuration: Debug Any CPU ------\nCodeContracts: ContractsMathPow: Schedule static contract analysis.\n1>  elapsed time: 261.8095ms\n1>  ContractsMathPow -> C:\\temp\\ContractsMathPow\\ContractsMathPow\\bin\\Debug\\ContractsMathPow.dll\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: ContractsMathPow: Background contract analysis started.\nCodeContracts: ContractsMathPow: Time spent connecting to the cache: 00:00:03.1301680\nCodeContracts: ContractsMathPow: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: ContractsMathPow: Validated: 100.0%\nCodeContracts: ContractsMathPow: Checked 2 assertions: 2 correct\nCodeContracts: ContractsMathPow: Contract density: 12.44\nCodeContracts: ContractsMathPow: Total methods analyzed 2\nCodeContracts: ContractsMathPow: Methods analyzed with a faster abstract domain 0\nCodeContracts: ContractsMathPow: Method analyses read from the cache 0\nCodeContracts: ContractsMathPow: Methods not found in the cache 2\nCodeContracts: ContractsMathPow: Methods with 0 warnings 2\nCodeContracts: ContractsMathPow: Time spent in internal, potentially costly, operations\nCodeContracts: ContractsMathPow: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.1091504 (invoked 8180 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0349862 (invoked 6219 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.0920091 (invoked 57 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0199679 (invoked 27 times)\nOverall time spent performing action #Simplex: 00:00:00.1799806 (invoked 865 times)\nOverall time spent performing action #SubPolyJoin: 00:00:00.4400042 (invoked 67 times)\nOverall time spent performing action #WP: 00:00:00.1560335 (invoked 2 times)\nCodeContracts: ContractsMathPow: Total time 4.294sec. 2147ms/method\nCodeContracts: ContractsMathPow: Retained 0 preconditions after filtering\nCodeContracts: ContractsMathPow: Inferred 0 object invariants\nCodeContracts: ContractsMathPow: Retained 0 object invariants after filtering\nCodeContracts: ContractsMathPow: Detected 0 code fixes\nCodeContracts: ContractsMathPow: Proof obligations with a code fix: 0\nC:\\temp\\ContractsMathPow\\ContractsMathPow\\Class1.cs(22,4): warning : CodeContracts: warning: The Boolean condition !foo.Bar always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\ContractsMathPow.dll(1,1): message : CodeContracts: Checked 2 assertions: 2 correct\nCodeContracts: ContractsMathPow: \nCodeContracts: ContractsMathPow: Background contract analysis done.\n```\n\nThis false positive about the constant value only appears immediately after a call to `Math.Pow`, where the first argument to `Math.Pow` is a constant less than 1.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/222", "title": "cccheck: False positive on constant values when using pure generic methods", "body": "I first encountered this issue on `System.Linq.EnumerableExtensions.OfType<T>`, as below:\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace ContractOfType\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var things = GetThings();\n\n            var foo = things.OfType<Foo>().FirstOrDefault();\n            var bar = things.OfType<Bar>().FirstOrDefault();\n            var baz = things.OfType<Baz>().FirstOrDefault();\n\n            if (foo != null)\n            {\n                Console.WriteLine(\"Got foo!\");\n            }\n            else if (bar != null)\n            {\n                Console.WriteLine(\"No foo, but got bar!\");\n            }\n            else if (baz != null)\n            {\n                Console.WriteLine(\"No foo or bar, but got baz!\");\n            }\n            else\n            {\n                Console.WriteLine(\"I got nuffin'.\");\n            }\n        }\n\n        static IEnumerable<object> GetThings()\n        {\n            yield return new Foo();\n            yield return new Bar();\n        }\n    }\n\n    class Foo\n    {\n    }\n\n    class Bar\n    {\n    }\n\n    class Baz\n    {\n    }\n}\n```\n\nContracts output:\n\n```\nC:\\Temp\\ContractOFType\\ContractOFType\\Program.cs(27,10): warning : CodeContracts: warning: The Boolean condition bar != null always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\nC:\\Temp\\ContractOFType\\ContractOFType\\Program.cs(31,10): warning : CodeContracts: warning: The Boolean condition bar != null always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\n```\n\nInterestingly, both warnings refer to the variable `bar` when one is on the line `bar != null` and one is on the line `baz != null`.\n\nAfter some experimenting this, there appear to be two contributing factors:\n1. `OfType` is a generic method.\n2. `OfType` has `PureAttribute`.\n\nI can reproduce this by substituting `OfType` for any user-defined extension method that meets the two criteria above, e.g.:\n\n```\n    static class EnumerableExtensions\n    {\n        [Pure]\n        public static IEnumerable<string> MaybeSelectTypeName<T>(this IEnumerable enumerable)\n        {\n            Contract.Requires(enumerable != null);\n            Contract.Ensures(Contract.Result<IEnumerable<string>>() != null);\n            Contract.Ensures(Contract.ForAll(Contract.Result<IEnumerable<string>>(), a => a != null));\n\n            bool shouldReturnNothing;\n            using (var rng = new RNGCryptoServiceProvider())\n            {\n                var bytes = new byte[1];\n                rng.GetBytes(bytes);\n                shouldReturnNothing = (bytes[0] & 0x01) > 0;\n            }\n\n            if (shouldReturnNothing)\n            {\n                var empty = Enumerable.Empty<string>();\n                Contract.Assume(Contract.ForAll(empty, a => a != null));\n                return empty;\n            }\n\n            var result = enumerable.Cast<object>().Select(x => x.GetType().Name);\n            Contract.Assume(Contract.ForAll(result, a => a != null));\n            return result;\n        }\n    }\n```\n\nIf I remove `[Pure]`, the false positive goes away. Likewise, if I change the signature from `MaybeSelectTypeName<T>(IEnumerable)` to `MaybeSelectTypeName(IEnumerable, Type)`, the false positive goes away.\n\nThis occurs with both VS2013 and VS2015, so I doubt it's compiler-related.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/205", "title": "False positives on 'invariant unreached' and 'reference use unreached' with Roslyn", "body": "Repro case:\n\n```\nusing System.Diagnostics.Contracts;\n\nnamespace ContractInvariants\n{\n    public class MyThingy\n    {\n        public MyThingy(object value)\n        {\n            Contract.Requires(value != null);\n            this.value = value;\n            this.valueTypeFullName = GetValueTypeFullName();\n        }\n\n        readonly object value;\n        readonly string valueTypeFullName;\n\n        string GetValueTypeFullName()\n        {\n            return value.GetType().FullName;\n        }\n\n        [ContractInvariantMethod]\n        void ObjectInvariant()\n        {\n            Contract.Invariant(value != null);\n            Contract.Invariant(valueTypeFullName != null);\n        }\n    }\n}\n```\n\nVS2013 build output with `-show unreached`\n\n```\n1>------ Build started: Project: ContractInvariants, Configuration: Debug Any CPU ------\nCodeContracts: ContractInvariants: Schedule static contract analysis.\nCodeContracts: ContractInvariants: Background contract analysis started.\n1>  elapsed time: 175.4416ms\n1>  ContractInvariants -> C:\\Temp\\ContractForAll\\ContractInvariants\\bin\\Debug\\ContractInvariants.dll\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\nCodeContracts: ContractInvariants: Time spent connecting to the cache: 00:00:01.1090546\nCodeContracts: ContractInvariants: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: ContractInvariants: Validated: 100.0%\nCodeContracts: ContractInvariants: Checked 9 assertions: 9 correct\nCodeContracts: ContractInvariants: Contract density: 8.38\nCodeContracts: ContractInvariants: Total methods analyzed 3\nCodeContracts: ContractInvariants: Methods analyzed with a faster abstract domain 0\nCodeContracts: ContractInvariants: Method analyses read from the cache 1\nCodeContracts: ContractInvariants: Methods not found in the cache 2\nCodeContracts: ContractInvariants: Methods with 0 warnings 3\nCodeContracts: ContractInvariants: Time spent in internal, potentially costly, operations\nCodeContracts: ContractInvariants: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0080076 (invoked 399 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0060011 (invoked 1065 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.0710238 (invoked 18 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0609960 (invoked 9 times)\nOverall time spent performing action #WP: 00:00:00.0300029 (invoked 1 times)\nCodeContracts: ContractInvariants: Total time 3.935sec. 1311ms/method\nCodeContracts: ContractInvariants: Retained 0 preconditions after filtering\nCodeContracts: ContractInvariants: Inferred 0 object invariants\nCodeContracts: ContractInvariants: Retained 0 object invariants after filtering\nCodeContracts: ContractInvariants: Discovered 3 postconditions to suggest\nCodeContracts: ContractInvariants: Retained 3 postconditions after filtering\nCodeContracts: ContractInvariants: Detected 0 code fixes\nCodeContracts: ContractInvariants: Proof obligations with a code fix: 0\nC:\\Workspace\\glow\\DotNet\\Service\\ContractInvariants.dll(1,1): message : CodeContracts: Checked 9 assertions: 9 correct\nCodeContracts: ContractInvariants: \nCodeContracts: ContractInvariants: Background contract analysis done.\n```\n\nVS2015 build output with `-show unreached`\n\n```\n1>------ Build started: Project: ContractInvariants, Configuration: Debug Any CPU ------\nCodeContracts: ContractInvariants: Schedule static contract analysis.\nCodeContracts: ContractInvariants: Background contract analysis started.\n1>  elapsed time: 128.0562ms\n1>  ContractInvariants -> C:\\Temp\\ContractForAll\\ContractInvariants\\bin\\Debug\\ContractInvariants.dll\n========== Build: 1 succeeded, 0 failed, 1 up-to-date, 0 skipped ==========\nCodeContracts: ContractInvariants: Time spent connecting to the cache: 00:00:01.0950366\nCodeContracts: ContractInvariants: Cache used: (LocalDb)\\MSSQLLocalDB\nCodeContracts: ContractInvariants: Validated:  75.0%\nCodeContracts: ContractInvariants: Checked 12 assertions: 9 correct 3 unreached\nCodeContracts: ContractInvariants: Contract density: 7.71\nCodeContracts: ContractInvariants: Total methods analyzed 3\nCodeContracts: ContractInvariants: Methods analyzed with a faster abstract domain 0\nCodeContracts: ContractInvariants: Method analyses read from the cache 0\nCodeContracts: ContractInvariants: Methods not found in the cache 3\nCodeContracts: ContractInvariants: Methods with 0 warnings 2\nCodeContracts: ContractInvariants: Time spent in internal, potentially costly, operations\nCodeContracts: ContractInvariants: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0080104 (invoked 436 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0069994 (invoked 1066 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.0670037 (invoked 18 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0670094 (invoked 9 times)\nOverall time spent performing action #WP: 00:00:00.0200231 (invoked 1 times)\nCodeContracts: ContractInvariants: Total time 3.918sec. 1306ms/method\nCodeContracts: ContractInvariants: Retained 0 preconditions after filtering\nCodeContracts: ContractInvariants: Inferred 0 object invariants\nCodeContracts: ContractInvariants: Retained 0 object invariants after filtering\nCodeContracts: ContractInvariants: Discovered 3 postconditions to suggest\nCodeContracts: ContractInvariants: Retained 3 postconditions after filtering\nCodeContracts: ContractInvariants: Detected 0 code fixes\nCodeContracts: ContractInvariants: Proof obligations with a code fix: 0\nC:\\Temp\\ContractForAll\\ContractInvariants\\Class1.cs(12,9): warning : CodeContracts: invariant unreachable (2 more unreached assertion(s) at the same location)\nC:\\Temp\\ContractForAll\\ContractInvariants\\Class1.cs(25,13): warning :   + location related to previous warning\nC:\\Temp\\ContractForAll\\ContractInvariants\\Class1.cs(11,13): warning : CodeContracts: reference use unreached\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\ContractInvariants.dll(1,1): message : CodeContracts: Checked 12 assertions: 9 correct 3 unreached\nCodeContracts: ContractInvariants: \nCodeContracts: ContractInvariants: Background contract analysis done.\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3b44d3ebeb373c43084a6e607d717f258d80af43", "message": "It would help if the MSBuild15 targets were actually part of a feature."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0b18b2eac5df2f16c61a22d74606f0c4d774e6d3", "message": "Fix installer - targets for 15.0 should have unique GUID"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/07804ed9ce85c7ea9a7bcbbb17a8afd8c6bac930", "message": "Use 4.6.x reference assemblies for 4.6.2 in VS2013 and VS2015"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5884b5e93a125f27e6f342d5a11c49510b98d4c0", "message": "Add .vs to .gitignore"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8162d003abbd01b6258d1df1de56615a3b6ed3af", "message": "Add MSBuild targets for VS2017"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/30ab1fe1c625402b28fa5f7e6f6249ff7ac19005", "message": "Add CodeContractsDeferAnalysis to do all of static checking except actually running cccheck.exe"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7aef039ffd3ac4acd318e890702bc51117dcda3f", "message": "Merge remote-tracking branch 'microsoft/master' into internal/master"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/65d5d795a00849afb795d53d55fbb52fb7efe660", "message": "Fix typo in comment - OptionsParsing.cs"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dd92cd704150707091dfd5d38cb2d9804aff6571", "message": "Fix static checker dogfooding warning - remove redundant null-check"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e1c657ed44c599d480bbc87592c33f18ca060f3a", "message": "Fix static checker dogfooding warning - make un-mutated field readonly"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dd1a1d14d1ee809beb8a57255ba2be829bc405e6", "message": "Fix ContractDeclarativeAssemblyAttribute definition in VB"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/76f833b33dc638ae4881c9565556e54d9b8f000b", "message": "Remove ContractDeclarativeAssemblyAttribute from static analysis in an attempt to mitigate #423."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/818cf826f65f82791388b955b75a9c58ebe02ff5", "message": "Remove precondition on Expression.NewArrayInit that is statically unprovable when the compiler generates Expression calls from LINQ. Fixes #424."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dff095b904174fe4329cd006e2cc9a4660a9c9e5", "message": "Add missing postcondition to System.Type.GetMethods(). Fixes #414."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/65828ffe75f8391cd6a1d52add607b00dcd55c96", "message": "Fix whitespace in System.Type.cs"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8dc8b66b2736f70cba4d61f11d31f6c1abdd1bab", "message": "Merge remote-tracking branch 'yaakov/pr/fix-framework-targetting' into internal/master"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d06cd1e2e1c0144ea52635c19a8ce8bcc1cb3383", "message": "Comment out statically-unprovable contracts.\n\nThe static analyzer cannot prove anything about `field` when the\ncompiler has generated the call to Expression.Field when translating\nLinq expressions into code.\n\nFixes #301."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1448533cf0cc453830a91d2a653b004c85af390b", "message": "Change Decl dir name to 'CodeContractsDeclarative'"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/15cba07875c269ccb9555c7bad66f71b2e90c727", "message": "Remove invalid precondition on System.Xml.XmlSchemaSet\n\nRenamed file to match class name.\n\nFixes #346."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/822ce0336eb2d74f4a013dfb64b3da151a041038", "message": "Add contracts for System.Drawing.Imaging.EncoderParameters\n\nIncludes stub for System.Drawing.Imaging.EncoerParameter.\n\nFixes #352."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ad33c7a5fd0895e369b7448a79303ec49ca794c5", "message": "Remove invalid postcondition in System.Linq.Expression.NewExpression.Members\n\nFixes #349."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/17c0b61f8987813307a2e16b43244faad310fef9", "message": "Remove invalid precondition from System.Dynamic.BindingRestrictions.GetInstanceRestriction.\n\nFixes #351."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/03bee0d5efb4c9ac739523a586924ad393d44a87", "message": "Use .NET 4.6 reference assemblies for 4.6.1\n\nAlso use .NET 4.6 reference assemblies when building 4.6/4.6.1 with\nVisual Studio 2013"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d7ddfdc3cfff8baa4fbcf155e0e4336342d71818", "message": "Output declarative assemblies to output directory\n\nOld behaviour: Declarative assemblies live in obj\\ somewhere\nNew behaviour: Declarative assemblies live in bin\\ somewhere\n(subject to OutputPath being customized by the user)\n\nFixes #348."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/90285daa3d0c5bb72df22224bf21d7bb6598623f", "message": "Fix return types of System.Version MajorRevision/MinorRevision"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ccc8478ebde9194b87d2a0cac8d798536b4ba91b", "message": "Add postconditions to System.Version properties"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3bc4a0d8c62655a55a62e2188ab482918562c97d", "message": "Add contracts for System.Version"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/20991bce19b0b7b4bf868b296d72072169035180", "message": "Fix compilation"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9b796e36d1d0b8da2a98f1c2c2be9a559bdde087", "message": "Add missing Task properties and TaskStatus"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d4bb09ece67ec0d6bae3199beca03ffb16aa4721", "message": "Fix mismatching return value"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8849a3a24f26e0740f723a8c9e0cc3e2733666eb", "message": "Add [Pure] to OperatingSystem.ServicePack"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9b2a377ea07cbaef78ba3d2acb2b35ac0780ca74", "message": "Add contracts for System.OperatingSystem\n\nBased on MSDN and Microsoft Reference Source."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9fccb9dc8ea59b88970f2a3714b8b5d333ca5723", "message": "Extend postcondition on Path.GetTempFileName\n\nExtends postcondition to not-null or whitespace, and\nlength >= 4 since it must end with \".TMP\""}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d174f0fbb7fb74335f79e69fd0380115bbe680a7", "message": "Add ArgumentOutOfRangeException on Task.FromCanceled"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3f3d9a7d66bca024371969571b0130e144e05457", "message": "Add [Pure] and more postconditions to newly contracted Task methods"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/79eddddc421750d172ccea6f077bd01b31e8aeee", "message": "Update System.Threading.Tasks.Task for NET45/46\n\nAdds missing .NET 4.5 API Task.FromResult<TResult>, and adds\nnew .NET 4.6 APIs FromCanceled, FromCanceled<TResult>, FromException,\nFromException<TResult> and CompletedTask."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ed7ed13dbc28f6e96460689d8cf6a83ff4542a0b", "message": "Remove false contract on PropertyChangedEventArgs\n\nSystem.ComponentModel.PropertyChangedEventArgs: propertyName/PropertyName can be null.\n\nMSDN documentation for PropertyChangedEventArgs Constructor (String):\n    An Empty value or null for the propertyName parameter indicates that all\n    of the properties have changed."}], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/462", "title": "Add options to cccheck to find source in a different location", "body": "`cccheck` currently reads the paths to source files out of the PDBs. This is required for some suppressions to work, e.g. `RequiresAtCall`.\n\nWhat I need to be able to do for distributed testing is build in one path, e.g. `C:\\Build\\MyProject`, and then invoke `cccheck` from another computer entirely in a different path, e.g. `C:\\Testing\\TestRun001\\MyProject`.\n\nThis pull request adds two command-line flags.\n- `-sourcePaths` lists partial paths that the project was built from.\n- `-alternativeSourcePaths` lists alternative/substitute paths that can be used to replace a partial path from `-sourcePaths`.\n\nFor example, with these changes I can successfully test an assembly in the scenario above by running:\n\n```\nC:\\Testing\\TestRun001\\MyProject\\bin\\CodeContractsDeclarative>C:\\path\\to\\cccheck.exe @MyProject.rsp -sourcePaths:C:\\Build\\MyProject -alternativeSourcePaths:C:\\Testing\\TestRun001\\MyProject\n```\n\nIf you don't supply both `-sourcePaths` and `-alternativeSourcePaths`, these changes have no other effect.\n\nThis goes hand-in-hand with #459.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111706602", "body": "> ... we are looking to transition the repo **outside** of the Microsoft organization in GitHub and turn ownership over to any community members that are interested.\n\nWhat's the reasoning for this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111706602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111967664", "body": "FYI, `git blame` won't mis-attribute if you use `-w` to ignore whitespace.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111967664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/46385640", "body": "Good catch, I'll fix them up tomorrow morning.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/46385640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AndirNotes": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/490", "title": "IDictionary contracts and boxing", "body": "Accidentally during memory profiling of our app, I've discovered that contracts for IDictionary\r\nhttps://github.com/Microsoft/CodeContracts/blob/master/Microsoft.Research/Contracts/MsCorlib/System.Collections.Generic.IDictionary.cs\r\nContains a lot of contracts like\r\n`Contract.Requires(!ReferenceEquals(key, null));`\r\nand this lead to boxing of a value type keys (e.g. keys like  ints, Guids are quite common) and performance penalties. Looks like a bug.\r\nI suspect that those contracts should be more clever than that and consider that generic type could be a ValueType and such check does not make sense at all.\r\n\r\nIn the meantime I need a workaround: Is it possible to ask somehow code contracts rewriter do not use contracts for implemented interfaces? Some way to ignore them for a specific type only?", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nexussays": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/488", "title": "ccrewrite aborted due to metadata errors (Xamarin or VS2017 15.2 related?)", "body": "I wasn't able to find anything regarding the below issue when searching, apologies if I missed something.\r\n\r\nI started receiving this error when compiling Xamarin library projects for iOS or Android on a system running VS2017 15.2. It doesn't happen in any app projects that I can tell, just libraries, and just iOS and Android (PCL and .Net4.5 libraries appear fine). I can't recall anything that has changed on my end, but it still works on a machine with VS2017 15.1 as well as VSTS. So I'm presuming it's an issue with the 15.2 update? Somehow?\r\n\r\nThe specific errors are different between iOS and Android but I am assuming they are related since they both appeared at the same time.\r\n\r\nXamarin.iOS library project:\r\n```\r\nTask \"Exec\" (TaskId:164)\r\n  Task Parameter:WorkingDirectory=obj\\Release\\ (TaskId:164)\r\n  Task Parameter:Command=\"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:164)\r\n  \"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:164)\r\n  Reading assembly 'mscorlib' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\mscorlib.dll' resulted in errors. (TaskId:164)\r\nccrewrite : error : Rewrite aborted due to metadata errors. Check output window\r\n    An attempt was made to move the file pointer before the beginning of the file. (TaskId:164)\r\n   (TaskId:164)\r\n  elapsed time: 533.1574ms (TaskId:164)\r\n```\r\nXamarin.Android library project:\r\n```\r\nTask \"Exec\" (TaskId:167)\r\n  Task Parameter:WorkingDirectory=obj\\Release\\ (TaskId:167)\r\n  Task Parameter:Command=\"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:167)\r\n  \"C:\\Users\\<snip>\\lib\\packages\\DotNet.Contracts.1.10.20606.1\\Bin\\ccrewrite.exe\" \"@projectnameccrewrite.rsp\" (TaskId:167)\r\n  Reading assembly 'Xamarin.iOS' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\Xamarin.iOS\\v1.0\\Xamarin.iOS.dll' resulted in errors. (TaskId:167)\r\nccrewrite : error : Rewrite aborted due to metadata errors. Check output window\r\n    Could not resolve type reference: [Mono.Security]Mono.Security.Interface.MonoTlsProvider. (TaskId:167)\r\n  elapsed time: 567.021ms (TaskId:167)\r\n```", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aleksd": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/483", "title": "Rewriter produces incorrect debug information for async methods in PDB file", "body": "It looks like CC rewriter produces incorrect table of yield/resume offsets for the MoveNext() method of the async state machine. As a result it's not possible to step through async methods with the VS debugger.\r\n\r\nFirst, if you don't define any conditions in the project with CodeContracts enabled, the rewriter still modifies the IL of the assembly slightly and instruction offsets change. However debug info is not updated accordingly.\r\n\r\nSecond, if you add some conditions to the project, then debug info is updated but still contains incorrect offsets.\r\n\r\nTo reproduce, you can open the attached solution in the VS and try to step through Method1(). The debugger loses track of the method execution after the first await. If CodeContracts are disabled, then stepping through the method works correctly again.\r\n[AsyncDebugging.zip](https://github.com/Microsoft/CodeContracts/files/831358/AsyncDebugging.zip)\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/483/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickStrupat": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/480", "title": "DotNet.Contracts hard to find", "body": "Hi pals,\r\n\r\nI'm wondering if the DotNet.Contracts package can be renamed to Microsoft.CodeContracts, or at least have tags added (\"microsoft\", \"contracts\", \"codecontracts\", etc.).\r\n\r\nWhen I search \"microsoft contracts\" it's not even on the first hundred or so of the results.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/480/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GerbrandStap": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/479", "title": "False positive on a contant value when using GeneratedCodeAttribute", "body": "Analyzing the following code:\r\n\r\n```\r\n[System.CodeDom.Compiler.GeneratedCodeAttribute(\"\",\"\")]\r\npublic class GeneratedClass\r\n{\r\n}\r\n\r\npublic class Test\r\n{\r\n\tprivate GeneratedClass _cachedItem;\r\n\r\n\tpublic GeneratedClass Item\r\n\t{\r\n\t\tget\r\n\t\t{\r\n\t\t\tif( this._cachedItem == null )\r\n\t\t\t{\r\n\t\t\t\tthis._cachedItem = new GeneratedClass();\r\n\t\t\t}\r\n\t\t\treturn this._cachedItem;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nProduces the error:\r\n\r\n```\r\nCodeContracts: warning: The Boolean condition this._cachedItem == null always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\r\n```\r\n\r\nWhen the `GeneratedCodeAttribute` attribute is removed, the error no longer occurs. The attribute gets added by the xsd tool in our case, so it is generated code and we'd rather not have to remove the attribute,\r\n\r\nWe use Code Contracts 1.10.20606.1.\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NameOfTheDragon": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/478", "title": "Contract for Enum.GetName incorrectly states result\u00a0not null", "body": "When building I get an incorrect warning about possible 'dead code' for the following IF statement:\r\n\r\n```\r\n            foreach (char c in text)\r\n                {\r\n                var b = (byte)c;\r\n                var strASCII = Enum.GetName(typeof(AsciiSymbols), b);\r\n                if (strASCII != null)\r\n                    expanded.Append(\"<\" + strASCII + \">\");\r\n                else\r\n                    expanded.Append(c);\r\n                }\r\n```\r\n\r\nThe problem seems to be an incorrect contract for `Enum.GetName()`:\r\n![image](https://cloud.githubusercontent.com/assets/1268490/22178245/49e1bb72-e029-11e6-8961-ed30c5efed19.png)\r\n\r\nAn examination of the source code shows that the result can in fact be null, so this is leading to a false positive in the warning.\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/313", "title": "NuGet package refuses to install", "body": "The NuGet package refuses to install (under VS2015) giving the reason:\n\n> Could not install package 'Microsoft.Contracts 1.9.1.1004'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\n\nNote: that is a private build, I'm building from the master branch on my TeamCity server using the supplied scripts. The built NuGet package is available from my build server at http://build.teamserver.tigranetworks.co.uk/project.html?projectId=OpenSource_MicrosoftCodeContracts \n\nI have found that NuGet requires at least one item to match the target framework in either the content or lib directory, otherwise it'll refuse to install the package. VS2015 is using NuGet 3.0 but I have had similar issues on my TeamCity server which is using NuGet 2.8. Either way, the package in its current form refuses to install under VS2015.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/299", "title": "[VS2015/UWP] string not treated as equivalent to System.String in Contract.Ensures", "body": "Considering this code:\n\n``` csharp\n        public static string ExpandASCII(this string inputString)\n        {\n            Contract.Requires(inputString != null);\n            Contract.Ensures(Contract.Result<string>() != null);\n            var expanded = new StringBuilder(inputString.Length);\n            foreach (var c in inputString)\n                expanded.Append(c.ExpandASCII());\n            return expanded.ToString();\n        }\n```\n\nThe static checker produces the following warning against the first line of non-contract code:\n\n> warning : CodeContracts: Consider adding the postcondition Contract.Ensures(Contract.Result<System.String>() != null); to provide extra-documentation to the library clients\n\nClearly the code has that contract, except that the C# language keyword `string` has been used instead of `System.String`.\n\nThis might be related to the Roslyn compiler as I have seen other oddities around strings. However, I think Code Contracts should (and is probably meant to) treat these as equivalent.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dfch": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/477", "title": "ccrewrite error when trying to set TextBox.Margin in UWP project when targeting ARM platform", "body": "I get the following error when building an UWP application for ARM:\r\n\r\n```\r\nCould not resolve member reference: Windows.UI.Xaml.FrameworkElement::put_Margin.\r\n```\r\n\r\nThis happens only when CodeContracts are enabled (v1.9.10714.2, see screenshot) and *ONLY* when `Solutions Platform` is set to `ARM` (I try to build for `IoT`; there is no error when trying to build for `x64` or `x86`)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8310360/21953800/c66fabca-da40-11e6-828d-a804bfc8d930.png)\r\n\r\nI use UWP target version 10.0.14393 (for min and max):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8310360/21953808/f9d230dc-da40-11e6-8653-5090b6b260cf.png)\r\n\r\nThe code I use to reproduce the behaviour is a simple constructor that creates a `TextBox` and sets a `Margin`:\r\n\r\n``` csharp\r\npublic sealed partial class ArbitraryPage : Page\r\n{\r\n  public ArbitraryPage()\r\n  {\r\n    this.InitializeComponent();\r\n\r\n    var textBox = new TextBox()\r\n    {\r\n      Text = item,\r\n      IsReadOnly = true,\r\n      Margin = new Thickness(10),\r\n    };\r\n  }\r\n}\r\n```\r\n\r\nNote: when omitting the `Margin = ...` line there is no error.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RealDotNetDave": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/476", "title": "CodeContracts not working in VS2017", "body": "This extension does not work in VS2017 RC. Most of my projects will not compile since I use this for all of my DLL assemblies.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/476/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Daniel-Svensson": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/474", "title": "Wrong reference assemblies used when targeting .Net 4.6.2 (and in some cases 4.5.2)", "body": "If targeting .Net 4.6.2 then the reference assemblies for .Net 3.5 is used when targeting 4.6.2 since 4.6.2 is missing from the switch statements in the target files.\r\n\r\nIf targeting .Net 4.5.2 (using v12 tools) then the reference assemblies for .Net 3.5 is used when targeting 4.5.2 since 4.5.2 is missing from the switch statements in the target files under v12 (it is part of v14 target file) .", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/475", "title": "Target correct reference assemblies for .Net 4.6.2 and 4.5.2", "body": "* Add support for .Net 4.6.2 \r\n** Any possible future 4.6.x release would also choose correct reference assemblies\r\n** Fixes #475 \r\n* Add support for .Net 4.5.2 for toolset version 12\r\n\r\nDefault TargetFramework (if target framework is missing) changed from 3.5 to 4.0\r\n\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/473", "title": "Fix nuget package", "body": "This PR makes it possible to use the code contracts nuget package by just adding Dotnet.Contracts as a nuget reference. (first commit)\r\nIt also makes some minor improvements to the target files such as adding support for .Net 4.6.2 (second commit). This can be moved to a second PR if requested.\r\n\r\n## Nuget improvements\r\nThe .targets files will be automatically included in the Project and no further action is required unless the MSI is also installed .\r\n\r\nIt should solve the following issues\r\n* #313 Nuget package refuse to install \r\n* #454 Cant install Nuget for DotNet.Contracts 1.10.20606.1\r\n* #13 CodeContracts as NuGet package\r\n\r\nIt should also allowing code contract rewriter to run for VS 2017 #451 \r\n\r\nHowever *if you have installed the MSI* you do need to *include the following workaround at the top of your project file* (it must be before \"Microsoft.CSharp.targets\" is included) which is mentioned in Issue #368 \r\n\r\n ```\r\n  <PropertyGroup>\r\n    <DontImportCodeContracts>True</DontImportCodeContracts>\r\n  </PropertyGroup>\r\n```\r\n\r\n## .target file improvements \r\n\r\n* Remove extra space from library path\r\n Use relative path when including analysis targets so that the same file can be used for multiple MsBuild versions", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/95149368", "body": "It seems code contracts works ok with VS 2015 but there are a few issues to fix.\nThis is the result om my research, hopefully if will make adding support for VS 2015 much easier.\n- It does not work with code using \"dynamic\" since roslyn uses new metadata embedded in the pdb files.\n  In order to get it to work with roslyn it seems like the CCI project needs to be updated to use the latest version (if it has not already been so) .\n  http://dissipatedheat.com/2014/10/28/curious-case-of-code-contracts-and-roslyn/\n  http://blog.xoc.net/2014/11/code-contracts-and-visual-studio-2015.html\n  https://roslyn.codeplex.com/workitem/54\n  **update**: This seems to be fixed in as RxDave pointed out (https://ccimetadata.codeplex.com/SourceControl/changeset/73073), also se PR #39 \n- Target (and probably other) files installed into version specific folders need to be added at the correct corresponding locations for VS 2015\n  Target files which are now only copied to C:\\Program Files (x86)\\MSBuild\\12.0\\Microsoft.Common.Targets\\ImportAfter\\ should be copied to C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common.Targets\\ImportAfter\\ for VS 2015\n  http://blog.xoc.net/2014/11/code-contracts-and-visual-studio-2015.html\n  **update** This seems to be fixed by PR #36 \n- The tooling /settings tab (GUI) should be updated to work inside VS 2015\n  **update 2015-05-08**: This seems to be fixed by PR #36 \n- The rewriter seems to get problems with async methods from roslyn. (Issue #51)\n  having Contract.Requires(...) works in async methods compiled in VS 2013 but when using VS 2015  the rewriter miss the requires which result in the assert dialog saying that the library must be rewritten.\n  **update 2015-05-20**: Verified that PR #52 seems to fix this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/95149368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/95150222", "body": "@sharwell Have you made any progress with VS 2013 support?\nI would definitly love support for VS 2013 (and maybe 2015)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/95150222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/100254416", "body": ":thumbsup: Installation seems to go fine and code contracts is run as expected under 2015 RC. So a god step on the way to full support for VS 2015\n\nIt does seems like it does not rewrite Contracts.Requires(...) inside async methods under VS 2015 (with roslyn) but under VS 2013 it works fine, but that is another problem.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/100254416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/100262064", "body": "Updated my comment above, seems like the first big issues has been fixed but immediately found a new issue,\n\nThere might be some more cases where the rewriter will miss contracts but at least it is now possible to fetch the latests source (I merged the currently pending pull requests) and get started.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/100262064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103853888", "body": ":+1: This solves my problems with async.and roslyn.\n\nAnd it also seems to resolve #38 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103853888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103854320", "body": "@danielcweber seems to have both reproduced and fixed the problem with async methods (tried it today). Good work! I've been waiting to get back our internet Connection at home (still some Days left :( ) so I've not had the time to add the issue myself.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103854320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103857555", "body": "It seems like PR #52 fixes these issues\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103857555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104290858", "body": "Hm, my mistake. Read the issue a bit to fast and mistook the inequality for equality. With Perform Runtime Contract Checking  == Full it works (but requires the PR for VS2015).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104290858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "HugoRoss": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/472", "title": "Documentation errors in userdoc.pdf", "body": "When studying file userdoc.pdf from https://github.com/Microsoft/CodeContracts/blob/master/Documentation/User%20Documentation/userdoc.pdf, I noticed the following rename- and copy/paste errors:\r\n\r\n2.12 Contract Abbreviator Methods\r\n\r\nOld: \"Important: the ContractArgumentValidatorAttribute type is not defined...\"\r\nNew: \"Important: the ContractAbbreviatorAttribute type is not defined...\"\r\n\r\n2.3 Object Invariants\r\nand\r\n4.2 ContractInvariantMethod\r\n\r\nOld: \"nullary method\"\r\nNew: \"parameterless method\"\r\nReason: Not a mistake but an improvement. e.g. I have never heard yet of nullary methods and had to google it. It must be an academic term that is not very wide-spread and we non-English-natives have difficulties to understand it.\r\n\r\n4.8 ContractOption\r\n\r\nOld: \"Important: the ContractArgumentValidatorAttribute type is not defined...\"\r\nNew: \"Important: the ContractOptionAttribute type is not defined...\"\r\n\r\n7.1 Rewriter Methods\r\n\r\nOld: The code sample has rename mistakes, sometime code referes to userMessage, sometimes to message. Same issue with condition and conditionText as well as type parameter E and TException.\r\n\r\nNew: (I post the new code as attachment)\r\n\r\nIssue 2: I couldn't get the example running, because I didn't find the referred class \"TestRewriterMethods\" (the only hint I found was in project RewriterMethods.csproj that unfortunately does not compile because of missing references). Please include a hint in which assembly this class may be found.\r\n\r\nThank you for this detailed documentation.\r\n\r\n[RuntimeFailureMethods.cs.txt](https://github.com/Microsoft/CodeContracts/files/662319/RuntimeFailureMethods.cs.txt)\r\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richgilson": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/471", "title": "Error trying to compile the latest source", "body": "Whenever I try to compile the source (whether using the buildcc.bat or Visual Studio), both of the Visual Basic projects (Microsoft.VisualBasic10 and Microsoft.VisualBasic.Compatibility10), I get the following error:\r\n\r\nvbc : error BC2017: could not find library 'Microsoft.VisualBasic.dll'\r\n\r\nThe file exists in C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\System.dll just like the other .NET assemblies listed as references.\r\n\r\nI'm at a loss as to where to go from here.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/471/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jehoel": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/469", "title": "CodeContracts doesn't detect value is mutated by lambda method.", "body": "I have code in a function which does this:\r\n\r\n    Int32 count = 0;\r\n    Parallel.ForEach( foos, (foo) =>\r\n    {\r\n        lock( _lock )\r\n        {\r\n            // do stuff\r\n            count++;\r\n        }\r\n    }\r\n    Int32 x = GetX();\r\n    if( 0 <= x && x < count ) {\r\n        // more stuff\r\n    }\r\n\r\nI get this warning:\r\n\r\n> CodeContracts warning: The Boolean condition `x < 0` always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or a redundant check.\r\n\r\nThe expression `0 <= x && x < count` has a purple squiggle underline.\r\n\r\nIf I change the `Parallel.ForEach` to a regular `foreach` then I don't get the warning.\r\n\r\nI'm using Code Contracts 1.9.10714.2 in VS2015 Enterprise Update 3.", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maritaria": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/467", "title": "Class invariants not checked on autoproperty with public setter", "body": "The following code doesn't generate an unproven invariant:\r\n```\r\nusing System.Diagnostics.Contracts;\r\npublic class ClassInvariants\r\n{\r\n    public object MySupervisor\r\n    {\r\n        get;\r\n        set;//Does not uphold class invariants\r\n    }\r\n    public ClassInvariants()\r\n    {\r\n        MySupervisor = new object();\r\n    }\r\n    [ContractInvariantMethod]\r\n    private void InvariantsOfThisClass()\r\n    {\r\n        Contract.Invariant(MySupervisor != null), \"MySupervisor cannot be null\");\r\n    }\r\n}\r\n```\r\nVersion: v.1.10.20606.1-rc2\r\nVisual studio: 2015 update 3\r\nProject targets .NET 4.5.2", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "summivox": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/466", "title": "Invariants not respected in static method?", "body": "Minimal example:\n\n``` csharp\npublic class Example\n{\n    private const string s = \"123\";\n\n    public int A { get; }\n\n    [ContractInvariantMethod]\n    private void ObjectInvariant()\n    {\n        Contract.Invariant(A >= 0);\n        Contract.Invariant(A < 3);\n    }\n\n    public Example(int a)\n    {\n        Contract.Requires(a >= 0);\n        Contract.Requires(a < 3);\n\n        this.A = a;\n    }\n\n    public static char Test(Example x)\n    {\n        Contract.Requires(x != null);\n        return s[x.A];\n    }\n}\n```\n\ngives warnings:\n\n```\nCodeContracts: Missing precondition in an externally visible method. Consider adding Contract.Requires(0 <= x.A); for parameter validation\nCodeContracts: Missing precondition in an externally visible method. Consider adding Contract.Requires(x.A < 3); for parameter validation\n```\n\nI tried all flavors of defining a public readonly property --- with and without explicit backing field. All resulted in the same warnings.\n\nI wonder how I can make the static verifier recognize the invariants I specified?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/463", "title": "Invariant on derived `internal` property fired too early", "body": "``` csharp\n    public class Node\n    {\n        /*...*/\n        public Node Parent { get; internal set; }\n        public Node PrevSibling { get; internal set; }\n        public Node NextSibling { get; internal set; }\n        /*...*/\n        [ContractInvariantMethod]\n        private void ObjectInvariant()\n        {\n            // has prev => next of prev of me is still me\n            Contract.Invariant(!(this.PrevSibling != null)\n                || (this.PrevSibling.NextSibling == this && this.PrevSibling.Parent == this.Parent));\n\n            // has next => prev of next of me is still me\n            Contract.Invariant(!(this.NextSibling != null)\n                || (this.NextSibling.PrevSibling == this && this.NextSibling.Parent == this.Parent));\n        }\n        /*...*/\n    }\n\n    public class Container : Node\n    {\n        /*...*/\n        public virtual Node AppendChild(Node newChild)\n        {\n            /*...*/\n            LastChild.NextSibling = newChild;\n            /* !!!!!! HERE !!!!!! */\n            newChild.PrevSibling = LastChild;\n            /*...*/\n        }\n        /*...*/\n    }\n```\n\n`AppendChild` obviously maintains the invariant. However the invariant checking still fired between the two assignments.\n\nHow can I work around this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkqc": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/465", "title": "CC breaks if XML axis is used within a lambda function (VB.net)", "body": "Original source code:\n\n```\n        Friend Shared Function CCR(myValue As System.Xml.Linq.XElement) As Object\n            Contract.Requires(Of ArgumentNullException)(myValue IsNot Nothing, \"myValue\")\n\n            Return myValue.<values>.ToDictionary(Function(e) e.@DisplayName, Function(e) e.Value)\n        End Function\n```\n\nVB.NET compiled code (from IL Spy)\n\n```\nFriend Shared Function CCR(myValue As XElement) As Object\n    Dim closure$__ As LLSearch._Closure$__7 = New LLSearch._Closure$__7()\n    Dim xNamespace As XNamespace = XNamespace.[Get](\"\")\n    Dim name As XName = xNamespace.GetName(\"values\")\n    closure$__.$VB$Local_VB$t_ref$L2 = xNamespace.GetName(\"DisplayName\")\n    Contract.Requires(Of ArgumentNullException)(myValue IsNot Nothing, \"myValue\")\n    Return myValue.Elements(name).ToDictionary(AddressOf closure$__._Lambda$__29, AddressOf LLSearch._Lambda$__30)\nEnd Function\n```\n\nVB.NET compiled IL\n\n```\n.method assembly static \n    object CCR (\n        class [System.Xml.Linq]System.Xml.Linq.XElement myValue\n    ) cil managed \n{\n    // Method begins at RVA 0x1123c\n    // Code size 101 (0x65)\n    .maxstack 4\n    .locals init (\n        [0] class MRQ.Livelink.Search.LLSearch/_Closure$__7,\n        [1] object,\n        [2] class [System.Xml.Linq]System.Xml.Linq.XName,\n        [3] class [System.Xml.Linq]System.Xml.Linq.XNamespace\n    )\n\n    IL_0000: newobj instance void MRQ.Livelink.Search.LLSearch/_Closure$__7::.ctor()\n    IL_0005: stloc.0\n    IL_0006: ldstr \"\"\n    IL_000b: call class [System.Xml.Linq]System.Xml.Linq.XNamespace [System.Xml.Linq]System.Xml.Linq.XNamespace::Get(string)\n    IL_0010: stloc.3\n    IL_0011: ldloc.3\n    IL_0012: ldstr \"values\"\n    IL_0017: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n    IL_001c: stloc.2\n    IL_001d: ldloc.0\n    IL_001e: ldloc.3\n    IL_001f: ldstr \"DisplayName\"\n    IL_0024: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n    IL_0029: stfld class [System.Xml.Linq]System.Xml.Linq.XName MRQ.Livelink.Search.LLSearch/_Closure$__7::$VB$Local_VB$t_ref$L2\n    IL_002e: ldarg.0\n    IL_002f: ldnull\n    IL_0030: ceq\n    IL_0032: ldc.i4.0\n    IL_0033: ceq\n    IL_0035: ldstr \"myValue\"\n    IL_003a: call void [mscorlib]System.Diagnostics.Contracts.Contract::Requires<class [mscorlib]System.ArgumentNullException>(bool, string)\n    IL_003f: ldarg.0\n    IL_0040: ldloc.2\n    IL_0041: callvirt instance class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> [System.Xml.Linq]System.Xml.Linq.XContainer::Elements(class [System.Xml.Linq]System.Xml.Linq.XName)\n    IL_0046: ldloc.0\n    IL_0047: dup\n    IL_0048: ldvirtftn instance string MRQ.Livelink.Search.LLSearch/_Closure$__7::_Lambda$__29(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_004e: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_0053: ldnull\n    IL_0054: ldftn string MRQ.Livelink.Search.LLSearch::_Lambda$__30(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_005a: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_005f: call class [mscorlib]System.Collections.Generic.Dictionary`2<!!1, !!2> [System.Core]System.Linq.Enumerable::ToDictionary<class [System.Xml.Linq]System.Xml.Linq.XElement, string, string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>, class [mscorlib]System.Func`2<!!0, !!1>, class [mscorlib]System.Func`2<!!0, !!2>)\n    IL_0064: ret\n}\n```\n\nCCR Compiled code (ILSpy)\n\n```\nFriend Shared Function CCR(myValue As XElement) As Object\n    If __ContractsRuntime.insideContractEvaluation <= 4 Then\n        Try\n            __ContractsRuntime.insideContractEvaluation += 1\n            Dim xNamespace As XNamespace\n            Dim VB$t_ref$L2 As XName = xNamespace.GetName(\"DisplayName\")\n            __ContractsRuntime.Requires(Of ArgumentNullException)(myValue IsNot Nothing, \"myValue\", \"myValue IsNot Nothing\")\n        Finally\n            __ContractsRuntime.insideContractEvaluation -= 1\n        End Try\n    End If\n    Dim [object] As LLSearch._Closure$__1 = New LLSearch._Closure$__1()\n    Dim xNamespace2 As XNamespace = XNamespace.[Get](\"\")\n    Dim name As XName = xNamespace2.GetName(\"values\")\n    Return myValue.Elements(name).ToDictionary(AddressOf [object]._Lambda$__1, AddressOf LLSearch._Lambda$__2)\nEnd Function\n\n```\n\nCCR Compiled IL\n\n```\n.method assembly static \n    object CCR (\n        class [System.Xml.Linq]System.Xml.Linq.XElement myValue\n    ) cil managed \n{\n    // Method begins at RVA 0x17918\n    // Code size 166 (0xa6)\n    .maxstack 12\n    .locals init (\n        [0] class MRQ.Livelink.Search.LLSearch/_Closure$__1,\n        [1] object,\n        [2] class [System.Xml.Linq]System.Xml.Linq.XName,\n        [3] class [System.Xml.Linq]System.Xml.Linq.XNamespace,\n        [4] object,\n        [5] class MRQ.Livelink.Search.LLSearch/LLSearch__Closure$__1_0,\n        [6] class [System.Xml.Linq]System.Xml.Linq.XNamespace\n    )\n\n    IL_0000: newobj instance void MRQ.Livelink.Search.LLSearch/LLSearch__Closure$__1_0::.ctor()\n    IL_0005: stloc.s 5\n    IL_0007: ldsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n    IL_000c: ldc.i4.4\n    IL_000d: bgt IL_005a\n    .try\n    {\n        IL_0012: ldsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_0017: ldc.i4.1\n        IL_0018: add\n        IL_0019: stsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_001e: ldloc.s 5\n        IL_0020: ldloc.s 6\n        IL_0022: ldstr \"DisplayName\"\n        IL_0027: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n        IL_002c: stfld class [System.Xml.Linq]System.Xml.Linq.XName MRQ.Livelink.Search.LLSearch/LLSearch__Closure$__1_0::$VB$Local_VB$t_ref$L2\n        IL_0031: ldarg.0\n        IL_0032: ldnull\n        IL_0033: ceq\n        IL_0035: ldc.i4.0\n        IL_0036: ceq\n        IL_0038: ldstr \"myValue\"\n        IL_003d: ldstr \"myValue IsNot Nothing\"\n        IL_0042: call void System.Diagnostics.Contracts.__ContractsRuntime::Requires<class [mscorlib]System.ArgumentNullException>(bool, string, string)\n        IL_0047: nop\n        IL_0048: leave IL_005a\n    } // end .try\n    finally\n    {\n        IL_004d: ldsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_0052: ldc.i4.1\n        IL_0053: sub\n        IL_0054: stsfld int32 System.Diagnostics.Contracts.__ContractsRuntime::insideContractEvaluation\n        IL_0059: endfinally\n    } // end handler\n\n    IL_005a: newobj instance void MRQ.Livelink.Search.LLSearch/_Closure$__1::.ctor()\n    IL_005f: stloc.0\n    IL_0060: ldstr \"\"\n    IL_0065: call class [System.Xml.Linq]System.Xml.Linq.XNamespace [System.Xml.Linq]System.Xml.Linq.XNamespace::Get(string)\n    IL_006a: stloc.3\n    IL_006b: ldloc.3\n    IL_006c: ldstr \"values\"\n    IL_0071: callvirt instance class [System.Xml.Linq]System.Xml.Linq.XName [System.Xml.Linq]System.Xml.Linq.XNamespace::GetName(string)\n    IL_0076: stloc.2\n    IL_0077: ldarg.0\n    IL_0078: ldloc.2\n    IL_0079: callvirt instance class [mscorlib]System.Collections.Generic.IEnumerable`1<class [System.Xml.Linq]System.Xml.Linq.XElement> [System.Xml.Linq]System.Xml.Linq.XContainer::Elements(class [System.Xml.Linq]System.Xml.Linq.XName)\n    IL_007e: ldloc.0\n    IL_007f: dup\n    IL_0080: ldvirtftn instance string MRQ.Livelink.Search.LLSearch/_Closure$__1::_Lambda$__1(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_0086: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_008b: ldnull\n    IL_008c: ldftn string MRQ.Livelink.Search.LLSearch::_Lambda$__2(class [System.Xml.Linq]System.Xml.Linq.XElement)\n    IL_0092: newobj instance void class [mscorlib]System.Func`2<class [System.Xml.Linq]System.Xml.Linq.XElement, string>::.ctor(object, native int)\n    IL_0097: call class [mscorlib]System.Collections.Generic.Dictionary`2<!!1, !!2> [System.Core]System.Linq.Enumerable::ToDictionary<class [System.Xml.Linq]System.Xml.Linq.XElement, string, string>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!0>, class [mscorlib]System.Func`2<!!0, !!1>, class [mscorlib]System.Func`2<!!0, !!2>)\n    IL_009c: stloc.s 4\n    IL_009e: br IL_00a3\n\n    IL_00a3: ldloc.s 4\n    IL_00a5: ret\n} // end of method LLSearch::CCR\n```\n\nThis applies also to Contract.Ensures and in both cases, only if Optimizations are enabled (release build).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/458", "title": "Async methods in VB.NET crash the rewriter", "body": "I had this method\n\n```\n        Public Async Function GetXDocumentAsync(uri As String, params As ILookup(Of String, String), cookies As System.Net.CookieCollection) As Threading.Tasks.Task(Of Xml.Linq.XDocument)\n            Contract.Requires(Of ArgumentNullException)(Not uri Is Nothing, \"uri\")\n            Contract.Requires(Of ArgumentException)(uri <> \"\", \"uri ne peut \u00eatre vide\")\n            Contract.Requires(Of ArgumentException)(System.Uri.IsWellFormedUriString(uri, UriKind.Absolute), \"uri n'est pas reconnu comme une uri absolue valide\")\n            Contract.Requires(Of ArgumentNullException)(params IsNot Nothing, \"params\")\n\n            Return Await Task.Run(Function() GetXDocumentAsync(uri, params, cookies))\n        End Function\n```\n\nwhich gave me the following error when compiling:\n\n> Erreur    5   Contract extraction failed: Found field $VB$ResumableLocal_$VB$Closure_ClosureVariable_1$1 in contract that shouldn't be here: In method Utils.Utilities.GetXDocumentAsync(System.String,System.Linq.ILookup`2<System.String,System.String>,System.Net.CookieCollection), assembly C:[...]\\P8DIW2_LLMRQ.dll\n\nBy adding a wrapper, the error disapeared but I'm not exactly sure how the async part now works without sayning that it add a degree of complexity simply to enable code contracts\n\n(Wrapped code)\n\n```\n        Public Function GetXDocumentAsync(uri As String, params As ILookup(Of String, String), cookies As System.Net.CookieCollection) As Threading.Tasks.Task(Of Xml.Linq.XDocument)\n            Contract.Requires(Of ArgumentNullException)(Not uri Is Nothing, \"uri\")\n            Contract.Requires(Of ArgumentException)(uri <> \"\", \"uri ne peut \u00eatre vide\")\n            Contract.Requires(Of ArgumentException)(System.Uri.IsWellFormedUriString(uri, UriKind.Absolute), \"uri n'est pas reconnu comme une uri absolue valide\")\n            Contract.Requires(Of ArgumentNullException)(params IsNot Nothing, \"params\")\n\n            Return DoGetXDocumentAsync(uri, params, cookies)\n        End Function\n\n        Private Async Function DoGetXDocumentAsync(uri As String, params As ILookup(Of String, String), cookies As System.Net.CookieCollection) As Threading.Tasks.Task(Of Xml.Linq.XDocument)\n            Return Await Task.Run(Function() GetXDocumentAsync(uri, params, cookies))\n        End Function\n```\n\nNote that with the first function, if I remove the Async in the function signature and directly return the task instead of awaiting it, it compiles.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/458/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/316", "title": "Missing contract when contract is defined", "body": "Original function\n\n``` VB.NET\n    Public Function SelectBetween(ByVal startTime As DateTime, ByVal endTime As DateTime) As TimingSet\n        Contract.Ensures(Contract.Result(Of TimingSet)() IsNot Nothing)\n\n        Dim returnValue As New TimingSet\n        Sort()\n        Dim index As Integer = _Dataset.BinarySearch(New Timing(startTime))\n\n        'If not found, returns the index complement as a negative number\n        If index < 0 Then\n            'We must convert it back to get the first index to look at (the index immediately greater than the one searched)\n            index = Not index\n        End If\n\n        'If index is inside bounds (not found value with no value greater than searched one will return count\n        If index < Count Then\n            'Move to first element being in the window (since we are near but not necessarily on the first one)\n            'This is because we searched for the first item STARTING in the window.\n            'This is required to be able to reuse the already sorted collection instead of resorting again\n            Do While index >= 0 AndAlso Me.Item(index).EndTime >= startTime\n                index -= 1\n            Loop\n            index += 1 'Replace to the real one\n\n            Do While index < Me.Count AndAlso Me.Item(index).DateTime < endTime\n                returnValue.AddTiming(Me.Item(index))\n                index += 1\n            Loop\n        End If\n\n        Return returnValue\n    End Function\n```\n\nILSpy decompiled\n\n``` VB.NET\n' LLThreadAnalyzer.TimingSet\n''' <ensures csharp=\"result != null\" vb=\"result &lt;&gt; Nothing\">result != null</ensures>\nPublic Function SelectBetween(startTime As DateTime, endTime As DateTime) As TimingSet\n    Dim flag As Boolean = Me.$evaluatingInvariant$\n    Me.$evaluatingInvariant$ = True\n    Dim returnValue As TimingSet = New TimingSet()\n    Me.Sort()\n    Dim index As Integer = Me._Dataset.BinarySearch(New Timing(startTime))\n    Dim flag2 As Boolean = index < 0\n    If flag2 Then\n        index = Not index\n    End If\n    flag2 = (index < Me.Count)\n    ' The following expression was wrapped in a checked-statement\n    If flag2 Then\n        While index >= 0 AndAlso DateTime.Compare(Me(index).EndTime, startTime) >= 0\n            index -= 1\n        End While\n        index += 1\n        While index < Me.Count AndAlso DateTime.Compare(Me(index).DateTime, endTime) < 0\n            returnValue.AddTiming(Me(index))\n            index += 1\n        End While\n    End If\n    Dim SelectBetween As TimingSet = returnValue\n    Dim timingSet As TimingSet = SelectBetween\n    __ContractsRuntime.Ensures(timingSet IsNot Nothing, Nothing, \"Contract.Result(Of TimingSet)() IsNot Nothing\")\n    Me.$evaluatingInvariant$ = flag\n    Me.$InvariantMethod$()\n    Return timingSet\nEnd Function\n```\n\nContract message\n\n```\nCodeContracts: Consider adding the postcondition Contract.Ensures(Contract.Result<LLThreadAnalyzer.TimingSet>() != null); to provide extra-documentation to the library clients\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/315", "title": "Default value of a virtual class property is detected as a missing contract", "body": "In one of my program, I have a virtual class (MustInherit in VB). In this class, I declared a ReadOnly flag property that returns False since by default,implementing classes don't support the behaviour\n\n``` VB.NET\n        Public Overridable ReadOnly Property SupportsPostCalculation() As Boolean Implements IStatCalculator.SupportsPostCalculation\n            Get\n                Return False\n            End Get\n        End Property\n```\n\nAt contract  analysis, I receive the following error:\n\n```\nCodeContracts: Consider adding the postcondition Contract.Ensures(Contract.Result<System.Boolean>() == false); to provide extra-documentation to the library clients\n```\n\nClearly, I can't add this contract since inherint classes will sometimes have to return True. I think this is a wong analysis. While  a permanent solution is earched for, I would appreciate if someone has a workaround to make the \"error\" disappear.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/314", "title": "Inline initializers fail compilation if contract exists in constructor", "body": "I have a VB.NET class in which I initialize an object and an Integer this way\n\n``` VB.NET\nPrivate _MaxTick As Integer = Integer.MinValue\nPrivate _MinTick As Integer = Integer.MaxValue\nPrivate ReadOnly _DateTimeStats As Calculators.StatCalculators = New Calculators.StatCalculators(AddressOf GetSource)\n```\n\nThen in my constructor, I have a Contract\n\n``` VB.NET\n    Friend Sub New(ByVal statsType As StatsSourceType, ByVal pSource As TimingSet, ByVal pFilter As String(,))\n        Contract.Requires(Of ArgumentNullException)(pSource IsNot Nothing, \"pSource\")\n```\n\nWhen I compile this way, it fails with\n\n```\n1 - This/Me cannot be used in Requires of a constructor\n2 - This/Me cannot be used in Requires of a constructor\n3 - Member 'LLThreadAnalyzer.StatsSet._MaxTick' has less visibility than the enclosing method 'LLThreadAnalyzer.StatsSet.#ctor(LLThreadAnalyzer.StatsSourceType,LLThreadAnalyzer.TimingSet,System.String[,])'\n4 - Malformed contract. Found Requires after assignment in method 'LLThreadAnalyzer.StatsSet.#ctor(LLThreadAnalyzer.StatsSourceType,LLThreadAnalyzer.TimingSet,System.String[,])'\n```\n\nIf I keep only the 2 integers initializations  and bring back  the object in the constructor, it  compiles.\n\nI looked at the result using ILSpy and got the following:\n\nOnly the ints are initialized\n\n``` VB.NET\n' LLThreadAnalyzer.StatsSet\n''' <requires description=\"pSource\" exception=\"T:System.ArgumentNullException\" csharp=\"pSource != null\" vb=\"pSource &lt;&gt; Nothing\">pSource != null</requires>\n''' <exception cref=\"T:System.ArgumentNullException\">pSource == null</exception>\nFriend Sub New(statsType As StatsSourceType, pSource As TimingSet, pFilter As String(,))\n    __ContractsRuntime.Requires(Of ArgumentNullException)(pSource IsNot Nothing, \"pSource\", \"pSource IsNot Nothing\")\n    Dim flag As Boolean = Me.$evaluatingInvariant$\n    Me.$evaluatingInvariant$ = True\n    MyBase..ctor()\n    Me._MinTick = 2147483647\n    Me._MaxTick = -2147483648\n    Me._StatsType = statsType\n    Me.__Source = pSource\n    Me._Filter = (If((pFilter IsNot Nothing), pFilter, New String(0, 0)))\n    Me._DateTimeStats = New StatCalculators(New SourceProvider(Me.GetSource))\n    Me._ExecTimeStats = New StatCalculators(New SourceProvider(Me.GetSource), \"ExecTime\", GetType(Timing).GetProperty(\"ExecTime\").PropertyType, New Type()() = { GetType(MinimumCalculator), GetType(MaximumCalculator), GetType(AverageCalculator), GetType(SumCalculator), GetType(MedianCalculator), GetType(ModeCalculator), GetType(VarianceCalculator), GetType(StdDevCalculator) })\n    Me._QueueTimeStats = New StatCalculators(New SourceProvider(Me.GetSource), \"QueueTime\", GetType(Timing).GetProperty(\"QueueTime\").PropertyType, New Type()() = { GetType(MinimumCalculator), GetType(MaximumCalculator), GetType(AverageCalculator), GetType(SumCalculator), GetType(MedianCalculator), GetType(ModeCalculator), GetType(VarianceCalculator), GetType(StdDevCalculator) })\n    Me._ChildStats = New SortedList(Of String, StatsSet)()\n    Me._DateTimeStats.AddSupportedCalculatorRange(New IStatCalculator()() = { New MinimumCalculator(GetType(DateTime), \"DateTime\"), New MaximumDateCalculator(\"EndTime\"), New AdHocCalculator(\"Elapsed\", Nothing, New GetValueHandler(StatsSet.GetElapsedDateTimeValue)) })\n    Me._ExecTimeStats(GetType(SumCalculator)).DisplayName = \"Total\"\n    Me.$evaluatingInvariant$ = flag\n    Me.$InvariantMethod$()\nEnd Sub\n```\n\nObject also initialized\n\n``` VB.NET\n' LLThreadAnalyzer.StatsSet\n''' -----------------------------------------------------------------------------\n''' <remarks>\n''' Filter will be used the first time source is used. From there, the filtered\n''' subset will be kept in RAM and filter will be cleared\n''' </remarks>\n'''     <history>\n'''     [rrol054]   2008-04-09  Created\n''' </history>\n''' -----------------------------------------------------------------------------\nFriend Sub New(statsType As StatsSourceType, pSource As TimingSet, pFilter As String(,))\n    Me._DateTimeStats = New StatCalculators(New SourceProvider(Me.GetSource))\n    Me._MinTick = 2147483647\n    Me._MaxTick = -2147483648\n    Contract.Requires(Of ArgumentNullException)(pSource IsNot Nothing, \"pSource\")\n    Me._StatsType = statsType\n    Me.__Source = pSource\n    Me._Filter = (If((pFilter IsNot Nothing), pFilter, New String(0, 0)))\n    Me._ExecTimeStats = New StatCalculators(New SourceProvider(Me.GetSource), \"ExecTime\", GetType(Timing).GetProperty(\"ExecTime\").PropertyType, New Type()() = { GetType(MinimumCalculator), GetType(MaximumCalculator), GetType(AverageCalculator), GetType(SumCalculator), GetType(MedianCalculator), GetType(ModeCalculator), GetType(VarianceCalculator), GetType(StdDevCalculator) })\n    Me._QueueTimeStats = New StatCalculators(New SourceProvider(Me.GetSource), \"QueueTime\", GetType(Timing).GetProperty(\"QueueTime\").PropertyType, New Type()() = { GetType(MinimumCalculator), GetType(MaximumCalculator), GetType(AverageCalculator), GetType(SumCalculator), GetType(MedianCalculator), GetType(ModeCalculator), GetType(VarianceCalculator), GetType(StdDevCalculator) })\n    Me._ChildStats = New SortedList(Of String, StatsSet)()\n    Me._DateTimeStats.AddSupportedCalculatorRange(New IStatCalculator()() = { New MinimumCalculator(GetType(DateTime), \"DateTime\"), New MaximumDateCalculator(\"EndTime\"), New AdHocCalculator(\"Elapsed\", Nothing, New GetValueHandler(StatsSet.GetElapsedDateTimeValue)) })\n    Me._ExecTimeStats(GetType(SumCalculator)).DisplayName = \"Total\"\nEnd Sub\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/308", "title": "Contract.Ensures causes CA2000 to reappear", "body": "I have a function in which I return a disposable type. To correctly handle the CA2000 case, I implemented this pattern\n\n``` VB.NET\nDim retVal as IDisposable\ndim tempObj as IDisposable\nTry\n  tempObj = new DisposableObj()\n  <DoStuff>\n  retVal=tempObj\n  tempObj=Nothing\nFinally\n  If tempObj IsNot Nothing then tempObj.Dispose()\nEnd Try\n\nReturn retVal \n```\n\nDone this way, it works but if I add Contract.Ensures, CA2000 is back\n\n``` VB.NET\nContract.Ensures(Contract.Result(Of IDisposable)() IsNot Notring)\n\nDim retVal as IDisposable\ndim tempObj as IDisposable\nTry\n  tempObj = new DisposableObj()\n  <DoStuff>\n  retVal=tempObj\n  tempObj=Nothing\nFinally\n  If tempObj IsNot Nothing then tempObj.Dispose()\nEnd Try\n\nReturn retVal \n```\n\nSince both are CC related, I suppose this is something that could be handled\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "voroninp": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/460", "title": "Contract abbreviators do not work with async methods.", "body": "We have the following abbreviator\n\n``` c#\npublic static class Returns\n{\n    [ContractAbbreviator]\n    public static void NotNull<T>(string message) where T:class\n    {\n        Contract.Ensures(Contract.Result<T>() != null, message);\n    }\n}\n```\n\nAnd it does not work for methods returning `Task<TResult>` - rewriter complains about `Contract.Result<>()` and method's return type mismatch.\n\nWhereas it does not complain if `Contract.Ensures()` is used directly without abbreviator.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82402607", "body": "Mike, thank you. The option for building Contract Reference Assembly was `None`.\nNow everything works fine.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82402607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ESolovova": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/456", "title": "Pdb-rewriter seems to wipe out source files checksums from pdb", "body": "I see that if \"Perform Runtime Contract Checking\" is enabled for a project, its pdb-file contains empty checksums for all referenced source files. That is a problem e.g. for JetBrains dotCover coverage tool: it needs source files checksums in order to highlight user's code in VS editor correctly.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flcdrg": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/455", "title": "NullReferenceException running CodeContracts", "body": "VS 2015 14.0.25425.01 Update 3\nCodeContracts 1.10.20606.1\n\n```\nCodeContracts: Failed with uncaught exception: Object reference not set to an instance of an object.\nCodeContracts: Stack trace:    at Microsoft.Contracts.Foxtrot.ExtractorVisitor.ExtractFromClump(StatementList contractClump, Method method, GatherLocals gatherLocals, RequiresList Preconditions, EnsuresList Postconditions, RequiresList validations, EnsuresList modelPostconditions, SourceContext defaultContext, Method originalMethod, Block contractInitializer, StackDepthTracker& dupStackTracker)\nCodeContracts: \\n   at Microsoft.Contracts.Foxtrot.ExtractorVisitor.CheapAndDirty(Method method\\, RequiresList& Preconditions\\, EnsuresList& Postconditions\\, RequiresList& Validations\\, EnsuresList& modelPostConditions\\, Block contractInitializerBlock\\, StackDepthTracker& dupStackTracker)\nCodeContracts: \\n   at Microsoft.Contracts.Foxtrot.ExtractorVisitor.ExtractContractsForMethod(Method method\\, Object dummy)\nCodeContracts: \\n   at System.Compiler.Method.MethodContractProvider.Invoke(Method method\\, Object handle)\nCodeContracts: \\n   at System.Compiler.Method.get_Contract()\nCodeContracts: \\n   at System.Compiler.Inspector.VisitMethod(Method method)\nCodeContracts: \\n   at Microsoft.Contracts.Foxtrot.GenerateDocumentationFromPDB.VisitMethod(Method method)\nCodeContracts: \\n   at System.Compiler.Inspector.VisitMemberList(MemberList members)\nCodeContracts: \\n   at System.Compiler.Inspector.VisitTypeNode(TypeNode typeNode)\nCodeContracts: \\n   at Microsoft.Contracts.Foxtrot.GenerateDocumentationFromPDB.VisitTypeNode(TypeNode typeNode)\nCodeContracts: \\n   at System.Compiler.Inspector.VisitTypeNodeList(TypeNodeList types)\nCodeContracts: \\n   at System.Compiler.Inspector.VisitAssembly(AssemblyNode assembly)\nCodeContracts: \\n   at System.Compiler.Analysis.CCIMDDecoder.TryLoadAssembly(String fileName\\, IDictionary assemblyCache\\, Action`1 errorHandler\\, AssemblyNode& assem\\, Boolean legacyContractMode\\, List`1 referencedAssemblies\\, Boolean extractContractText)\nCodeContracts: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.InternalAnalyze()\nCodeContracts: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.Analyze()\nCodeContracts: \nCodeContracts: Background contract analysis done.\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xmarshal": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/454", "title": "Cant install Nuget for DotNet.Contracts 1.10.20606.1", "body": "Could not install package 'DotNet.Contracts 1.10.20606.1'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\nfo 4.0, 4.6.1, 4.6.2 same problem.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AppChecker": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/453", "title": "Some possible defects (expression issues)", "body": "Good afternoon!\n\nWe've checked your source code with [AppChecker](https://npo-echelon.ru/en/solutions/appchecker.php) static analyzer and found some possible defects:\n\n1)\n[Microsoft.Research/MetadataContracts/MetadataTracker.cs](https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/Microsoft.Research/MetadataContracts/MetadataTracker.cs#L194)\n\n`if (lineText.Contains('(') && lineText.Contains('(') && lineText.Contains(';')) { //If method`\n\nPresence of symbol '(' is cheching twice. I guess it should be ')' second time\n\n2) \n[Microsoft.Research/ContractAdornments/CSharp.Roslyn/Inheritance/InheritanceTracker.cs#L233](https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/Microsoft.Research/ContractAdornments/CSharp.Roslyn/Inheritance/InheritanceTracker.cs#L233)\n\n`if (!(@this._propertyKeys.Contains(tuple.Item1) && @this._propertyKeys.Contains(tuple.Item1)))\n`\n\n`@this._propertyKeys.Contains(tuple.Item1)` is checking twice. Maybe, `tuple.Item2` should be checked\n\nSame defect seems to be here - https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/Microsoft.Research/ContractAdornments/CSharp/Inheritance/InheritanceTracker.cs#L233\n\n3)\n[System.Compiler/Reader.cs#L3968](https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/System.Compiler/Reader.cs#L3968)\n\n`if (modified == null || modified == null) return null;`\n\n`modified` is checking twice. Maybe, `modifier` must be checked instead\n\n4)\n[System.Compiler/Reader.cs#L2442](https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/System.Compiler/Reader.cs#L2442)\n\n```\n      if ((((MethodFlags)meth.Flags) & MethodFlags.SpecialName) != 0 &&\n        (((MethodFlags)meth.Flags) & MethodFlags.SpecialName) != 0)\n```\n\n`(((MethodFlags)meth.Flags) & MethodFlags.SpecialName) != 0` is checking twice\n\n5) \n[Microsoft.Research/ContractAdornments/CSharp.Roslyn/Contracts/ContractsProvider.cs#L714](https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/Microsoft.Research/ContractAdornments/CSharp.Roslyn/Contracts/ContractsProvider.cs#L714)\n\n`if (semanticType.Name == null || semanticType.Name == null) goto ReturnFalse;`\n\n`semanticType.Name` is checking twice\n\nSame defect seems to be here - https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/Microsoft.Research/ContractAdornments/CSharp.Roslyn/Contracts/ContractsProvider.cs#L694\n\n6)\n[Microsoft.VisualStudio.CodeTools/TaskManager/Tool.cs#L128](https://github.com/Microsoft/CodeContracts/blob/01e007bc7b2fbd11eb1418ed10d1e0d595195046/Microsoft.VisualStudio.CodeTools/TaskManager/Tool.cs#L128)\n\n`if (buildTask != null && buildTask != null)`\n\n`buildTask != null` is checking twice\n\nAll possible defects were found by Echelon team with [AppChecker](https://npo-echelon.ru/en/solutions/appchecker.php) static analyzer.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomas-delahaye": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/449", "title": "Code Contracts for IDictionary<TKey, TValue>", "body": "Unfortunately, the contracts for `IDictionary<TKey, TValue>.ContainsKey` and the like might not be correct for all implementations. The MSDN site for [IDictionary&lt;TKey, TValue&gt;](https://msdn.microsoft.com/en-us/library/s4ys34ea.aspx) says in the remarks \n\n> Implementations can vary in whether they allow key to be null.\n\nThe same applies to `Add(TKey, TValue)` and `Item[TKey]` (but no remarks for `Remove(TKey)` and `TryGetValue(TKey, out TValue)`...).\n\nWe do have implementations that can handle `null`, but fail with a contract exception as we inherit the contracts from the `IDictionary<TKey, TValue>` interface.\n\nSee #103\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "huoyaoyuan": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/448", "title": "Contract.Requires cannot work on Portable Class Library", "body": "It seems that the rewriter uses `Type.GetConstructor()` to create instance of exception. But in PCL(and .net core), the `System.Type` does not have a `GetConstructor()` method, and the rewriter will crash.\nA solution is using `Activiator.CreateInstance()`. This method is available on all the platforms.\n\nSince `Contract.Requires` does not have a Conditional attribute, I think it's necessary to add an implementation into BCL, not only implemented by the rewriter. If not, it will be impossible to build a project using it into a usable version, when Code Contract Tools are not installed, or working incorrectly.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JamesFaix": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/447", "title": "Code Contracts crashing in background in VS2015", "body": "Edit: Sorry, this is the same issue as #441 \n\nHi Sergey, \n\nThere are several different issues I am currently experiencing with Code Contracts in VS2015.  \n\nThe post I made on StackOverflow (http://stackoverflow.com/questions/38103495/vs2015-crashing-with-a-new-guard-page-when-just-editing-source-code) was the latest, and it seems to have stopped since upgrading to CC v1.10 RC2, but it could be just a coincidence.\n\nAnother issue I've been having is Code Contracts crashing in the background when I believe Roslyn is doing incremental compilation.  This will not crash VS2015, but will prompt me to submit a bug to Code Contracts. This may be an issue with Code Contracts Editor Extensions.  I am not sure if this is the right place for those issues.  Here is the failure from the Output window:\n\nStarting AugmentQuickInfoSession at 10:11 AM 5:56.31\nAugmentQuickInfoSession failed\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\nParameter name: position\n   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia)\n   at ContractAdornments.IntellisenseContractsHelper.GetTargetAtTriggerPoint(ITrackingPoint triggerPoint, ITextSnapshot snapshot, SyntaxTree parseTree)\n   at ContractAdornments.QuickInfoSource.<>c__DisplayClass1.<AugmentQuickInfoSession>b__0()\n   at UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 5:56.65\nCode Contracts Editor Extensions 1.10.20606.1 14.0.25420.1 Visual Studio failed. 5:56.67\nWork queue: 5:56.67\nTextViewTracker for '(DocumentId, #b5893340-7a48-4523-86d8-4449af72b08c - C:\\Users\\jfaix\\Workspaces\\Simplugins\\Production Projects\\Disbursement Reporter-TrimData\\DisbReporter.Core\\DataAccess\\Contracts\\Contracts.cs)' unsubscribed from all events. 5:56.68\nTextViewTracker for '(DocumentId, #1cea595b-75e0-41a7-ad45-51829965f74a - C:\\Users\\jfaix\\Workspaces\\Simplugins\\Production Projects\\Disbursement Reporter-TrimData\\DisbReporter.DataProcessing2\\DataViewer.cs)' unsubscribed from all events. 5:56.68\nTextViewTracker for '(DocumentId, #b30ef025-d315-42bb-b4ab-6ee3f6e45039 - C:\\Users\\jfaix\\Workspaces\\Simplugins\\Production Projects\\Disbursement Reporter-TrimData\\DisbReporter.DataProcessing2\\ExtensionMethods.cs)' unsubscribed from all events. 5:56.68\nStarting AugmentQuickInfoSession at 10:11 AM 6:0.558\nAugmentQuickInfoSession failed\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\nParameter name: position\n   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia)\n   at ContractAdornments.IntellisenseContractsHelper.GetTargetAtTriggerPoint(ITrackingPoint triggerPoint, ITextSnapshot snapshot, SyntaxTree parseTree)\n   at ContractAdornments.QuickInfoSource.<>c__DisplayClass1.<AugmentQuickInfoSession>b__0()\n   at UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 6:0.558\nCode Contracts Editor Extensions 1.10.20606.1 14.0.25420.1 Visual Studio failed. 6:0.561\nWork queue: 6:0.561\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mph911": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/441", "title": "Code Contracts fails with Message while editing", "body": "Code Contracts failed with the following Error Message:\n    `AugmentQuickInfoSession failed\n   System.ArgumentOutOfRangeException: Das angegebene Argument liegt au\u00dferhalb des g\u00fcltigen  Wertebereichs.\n   Parametername: position\n      bei Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia)\n      bei ContractAdornments.IntellisenseContractsHelper.GetTargetAtTriggerPoint(ITrackingPoint triggerPoint, ITextSnapshot snapshot, SyntaxTree parseTree)\n   bei ContractAdornments.QuickInfoSource.<>c__DisplayClass1.<AugmentQuickInfoSession>b__0()\n   bei UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 7:50.186\nCode Contracts Editor Extensions 1.9.10714.2 14.0.25123.0 Visual Studio failed. 7:50.201\nAugmentQuickInfoSession failed\nSystem.ArgumentOutOfRangeException: Das angegebene Argument liegt au\u00dferhalb des g\u00fcltigen Wertebereichs.\nParametername: position\n   bei Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia)\n   bei ContractAdornments.IntellisenseContractsHelper.GetTargetAtTriggerPoint(ITrackingPoint triggerPoint, ITextSnapshot snapshot, SyntaxTree parseTree)\n   bei ContractAdornments.QuickInfoSource.<>c__DisplayClass1.<AugmentQuickInfoSession>b__0()\n   bei UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 7:56.679\nCode Contracts Editor Extensions 1.9.10714.2 14.0.25123.0 Visual Studio failed. 7:56.679\nAugmentQuickInfoSession failed\nSystem.ArgumentOutOfRangeException: Das angegebene Argument liegt au\u00dferhalb des g\u00fcltigen Wertebereichs.\nParametername: position\n   bei Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia)\n   bei ContractAdornments.IntellisenseContractsHelper.GetTargetAtTriggerPoint(ITrackingPoint triggerPoint, ITextSnapshot snapshot, SyntaxTree parseTree)\n   bei ContractAdornments.QuickInfoSource.<>c__DisplayClass1.<AugmentQuickInfoSession>b__0()\n   bei UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 7:56.679\nCode Contracts Editor Extensions 1.9.10714.2 14.0.25123.0 Visual Studio failed. 7:56.679`\n\nI am not sure if Code Contracts is somehoe hampered due to this failure.\n\nHope to get a hint how to prevent!\n\nCheers,\nPeter\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmckone3": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/438", "title": "Static analysis suggests many ensures that are already present.", "body": "Contract.Ensures(Contract.Result<IPAddress>() != null); is present and yet the follow warning is produced.\n\nCodeContracts: Consider adding the postcondition Contract.Ensures(Contract.Result<System.Net.IPAddress>() != null); to provide extra-documentation to the library clients\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/437", "title": "Pre and Post Conditions are suggested for \"value != null\" even when there is already a condition for !string.IsNullOrWhiteSpace(value)", "body": "While this doesn't create incorrect behavior, it does create a lot of noise and make the true warnings much less valuable.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/396", "title": "CCRewriter sets imageBase below 4GB turning off ASLR on x64 assemblies.", "body": "MetadataReader reads the NTHeader, but MetadataWriter outputs NTHeader that doesn't contain all the same data.  Some items are transferred over, but others such imagebase come from the NTHeader constructor and are therefor incorrect.\n\nIt seems ideal solution would be to pass the NTHeader data that was read into the writer and only change fields which must be altered for the rewrite (if any), but this is the first time I am even looking into the CC codebase so my views may be uninformed.\n\nNot using aslr is flagged as a security issue so I hope this can be addressed soon.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GSPP": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/436", "title": "Uninstall not clean", "body": "After uninstalling the latest Code Contracts version (for testing purposes) I found a lot of remnants in the registry:\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15831026/bccfe41e-2c1b-11e6-8e86-4aa32a132198.png)\n\nI'm uninstalling because Visual Studio thought I had an old version and was suggesting bogus updates. Just letting you know that these registry keys might be a) a bug in the uninstall process and b) causing Visual Studio to be confused.\n\nIn fact I get those suggestions even after uninstalling.\n\nThe folder C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\CodeContracts\\1.9.10714.2 is also left on disk.\n\n<hr>\n\nI now deleted the folders and some registry keys. VS no longer shows the update. Then, I installed the latest version from the official extension page and now the problem is back:\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15831200/b19d05ee-2c1c-11e6-958b-60e2d4192d88.png)\n\nThis makes me think the new installer is registering a wrong version number.\n\nNot sure what and where the bugs are but I'm sure there are some!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/436/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/433", "title": "The static checker appears to confuse string.IsNullOrEmpty with string.IsNullOrWhitespace", "body": "![image](https://cloud.githubusercontent.com/assets/12032350/15627807/4636a9be-24f0-11e6-9769-f30ecd32e95b.png)\n\nHere, the error message references a function that was not used. This appears to be a bug. Although it's a small bug in the message I'm reporting it because the static checker might internally confuse some functions making it a significant bug.\n\n```\n    static string EmptyToNull5(string str)\n    {\n        Contract.Ensures(Contract.Result<string>() == (string.IsNullOrEmpty(str) ? null : str));\n\n        if (str == null || str.Length == 0) return null;\n        if (str[0] == 'x') return (str + \"x\").Substring(0, str.Length);\n        return str;\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/432", "title": "Code Contracts installs itself onto E drive", "body": "After installing Code Contracts I find that it placed files at\n\n```\nE:\\VS11Root\\Common7\\IDE\\Extensions\\Microsoft\\CodeContracts\\1.9.10714.2\n```\n\nThis appears to be a bug.\n\nThis is a large secondary disk in this computer. I never understood why MSI based installers are so prone to place temporary and permanent files on another drive. There must be a reason for that.\n\nHere's what was written:\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15627647/f44d7e66-24ea-11e6-91ed-739426069435.png)\n\nI don't understand why the file times are so old. This drive did not exist at that time. The folder is created at a newer date:\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15627651/05dc202e-24eb-11e6-97f3-a76b93353057.png)\n\nSo the file dates probably are not the actual create time.\n\nA procmon trace shows the files are unused.\n\nThe VS11Root folder also denies my admin account permissions. So there might be a permissions bug. Update: I found that the System process holds handles to that folder. I have no idea why. So this permissions problem is probably an issue with my machine.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/430", "title": "Static checker appears to think that a failing Assert cannot fail", "body": "As I understand it an Assert would be warned about if it cannot be proven true. Here's a runtime failing assert that is not warned about:\n\n```\nclass Program\n{\n    static void Main()\n    {\n        Test3();\n    }\n\n    static void Test3()\n    {\n        var value = new C1();\n        var wrapper = new NotNullWrapper<C1>(value);\n        wrapper.Value = null;\n        Contract.Assert(wrapper.Value != null); //Not warned about.\n    }\n}\n\nclass C1 { }\n\nclass NotNullWrapper<T>\n    where T : class\n{\n    T value;\n\n    public NotNullWrapper(T value)\n    {\n        Contract.Requires(value != null);\n        this.value = value;\n    }\n\n    public T Value\n    {\n        get { return value; }\n        set { this.value = value; }\n    }\n}\n```\n\nIf the `Contract.Requires(value != null);` is commented out the warning comes back. It looks like CC thinks that `this.value` can never be null although there is no such invariant.\n\nIs this a bug? If not, can I work around this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/429", "title": "Static checker does not find that (a+b) != (a+b+1)", "body": "```\n    static int Sum(int a, int b)\n    {\n        Contract.Ensures(Contract.Result<int>() == a + b);\n        return a + b + 1;\n    }\n```\n\nShould this not warn? This indeed fails at runtime with a CC exception. For example:\n\n```\n    static void Main()\n    {\n        Sum(1, 2);\n    }\n```\n\nI configured the static checker aggressively and so far it has found other problems already so it's basically working. I also waited for cccheck.exe to exit.\n\nI understand that the static checker is not omniscient but this seems to be a rather simple case.\n\nHere it also does not find any problem:\n\n```\n    static int Sum(int a, int b)\n    {\n        Contract.Ensures(Contract.Result<int>() == a + b);\n        return 0;\n    }\n```\n\nOnly calls to Sum are marked as errors. But it's not the call that is at fault. It's Sum. The message is:\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15607244/a8f4c278-2411-11e6-97d9-159f7bb18c43.png)\n\nThis does not make sense to me. There is no such precondition.\n\n<hr>\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15607148/f9a2fe34-2410-11e6-8ab3-40050276e3a6.png)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/428", "title": "Project property page not registered in VS2015", "body": "I found the Code Contracts property page missing. I downloaded the latest package and repaired the installation. The property page still is not there. I searched the registry for \"Microsoft Code Contracts Property Page\" and these are the results:\n\n![image](https://cloud.githubusercontent.com/assets/12032350/15606802/b9c7706c-240e-11e6-962c-9dd6a7b1d2c6.png)\n\nShouldn't there be an entry for version 14? The installer repair did not add it. Is this a bug?\n\nI just tried it in a VM with a different Windows installation. Here, the problem did not occur but it was a fresh install.\n\nThen I uninstalled, then installed. This repaired the tab. So this might be a bug in the repair functionality. Maybe it thought that VS15 was not present because I might have installed VS15 aftter installing CC into VS13.\n\n<hr>\n\nUpdate: The update dialog in VS suddenly shows a CC update. It shows a wrong old version:\n![image](https://cloud.githubusercontent.com/assets/12032350/15618736/09cc50d2-2450-11e6-9241-0e69ca1bcb55.png)\n\nBecause the current version is the latest, which is:\n![image](https://cloud.githubusercontent.com/assets/12032350/15618756/1fdc5b60-2450-11e6-89e7-d9058b5a3791.png)\n\n\"CodeContractsHelper.dll\" also has the same version number.\n\nAnd when I download the update that is offered I just get a repair option. So it's installed already.\n\nStrange again.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/428/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xperiandri": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/435", "title": "F# record data must be accessed by a property instead of a field", "body": "For F# records (types with attribute `[CompilationMapping(SourceConstructFlags.RecordType)]`) all the data must be read from public property instead of private backing field.\n\nF# compiler names backing field on records by adding @ to a property name. And uses this backing fields instead of properties. So when contract is checked because this backing field is private errors like\n\n```\nMember 'Models.Logical.OutLet@' has less visibility than the enclosing method 'Models.Utils.Logical.replaceDoubleLevelElementToSingle(Models.DoubleLevelElement, Models.SingleLevelElement, Models.LinePosition, MountairSelect.Models.Logical)'.\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/419", "title": "F# tuple is not created when rewriten", "body": "Having method\n\n``` F#\n    let addDoubleLevelElement ((position : InletPosition * OutletPosition))\n        (element : DoubleLevelElement)\n        logical =\n\n        Contract.Requires<InvalidOperationException>(\n            canAddDoubleLevelElement element logical,\n            \"Configuration with one more DoubleLevelElement of provided type is not supported.\")\n        Contract.Requires<InvalidOperationException>(\n            canInsertDoubleLevelElementIntoPosition position logical,\n            \"DoubleLevelElement cannot be inserted across another DoubleLevelElement\")\n\n        { InLet = logical.InLet.Insert(fst position, element);\n          OutLet = logical.OutLet.Insert(snd position, element) }\n\n```\n\nI got this code after rewriting\n\n``` C#\n[CompilationArgumentCounts(new int[] { 2, 1, 1 })]\npublic static Logical addDoubleLevelElement(int position_0, int position_1, DoubleLevelElement element, Logical logical)\n{\n    Tuple<int, int> tuple;\n    if (__ContractsRuntime.insideContractEvaluation <= 4)\n    {\n        try\n        {\n            __ContractsRuntime.insideContractEvaluation++;\n            Tuple<int, int> tuple2 = new Tuple<int, int>(position_0, position_1);\n            __ContractsRuntime.Requires<InvalidOperationException>(canAddDoubleLevelElement(element, logical), \"Configuration with one more DoubleLevelElement of provided type is not supported.\", \"canAddDoubleLevelElement element logical\");\n            __ContractsRuntime.Requires<InvalidOperationException>(canInsertDoubleLevelElementIntoPosition(tuple2.get_Item1(), tuple2.get_Item2(), logical), \"DoubleLevelElement cannot be inserted across another DoubleLevelElement\", \"canInsertDoubleLevelElementIntoPosition position logical\");\n        }\n        finally\n        {\n            __ContractsRuntime.insideContractEvaluation--;\n        }\n    }\n    return new Logical(logical.InLet@.Insert(Operators.Fst<int, int>(tuple), element), logical.OutLet@.Insert(Operators.Snd<int, int>(tuple), element));\n}\n```\n\nNotice statement `Tuple<int, int> tuple;`, this tuple is never assigned.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/329", "title": "Code Contracts tab of project properties does not use font size from Visual Studio preferences", "body": "Code Contracts tab of project properties does not use font size from Visual Studio preferences like all the other tabs do\n<img width=\"727\" alt=\"code contracts font\" src=\"https://cloud.githubusercontent.com/assets/2365592/12222236/2c2c86f4-b7bf-11e5-9355-888b69aeaa6d.png\">\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "manison": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/434", "title": "Visual Studio debugger does not sometimes recognize local variables in rewritten assembly", "body": "Debugger in Visual Studio 2015 sometimes does not recognize local variables in assemblies with applied Code Contracts. In such case the debugger's _Locals_ windows does not list local variables at all, hovering over the variable produces no tooltip and putting the variable name into the _Watch_ window outputs _The name does not exist in the current context_. When the _Perform Runtime Contract Checking_ check box is unchecked in the affected project then the debugger shows variables as expected.\n\n![ccnok](https://cloud.githubusercontent.com/assets/2073329/15642902/834dbfd0-264a-11e6-8d87-b3f62d2a8c36.PNG)\n\n![ccok](https://cloud.githubusercontent.com/assets/2073329/15642916/94de33e2-264a-11e6-92b6-7f21c239b213.PNG)\n\nCode Contracts version used: 1.9.10714.2\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ckerth": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/431", "title": "emit into XML doc uses \"decimal\" as the name for a generic type parameter", "body": "Using `Contract.Ensures` for a generic method uses `decimal` for the _type parameter_ while emitting the contracts to the documentation.\nSame goes for the class name of a `[Pure]` method used for a contract validation.\n\nXML documentation looks like that: `decimal.CustomValidationMethod<decimal>(args)` instead of `NameOfClass.CustomValidationMethod<TNamed>(args)`\n### Steps to reproduce\n1. create a new solution using .Net 4.6.1\n2. add _DotNet.Contracts_ (1.10.10126) via nuget\n3. add to the project file\n   \n   <pre>\n   &lt;PropertyGroup&gt;\n     &lt;DontImportCodeContracts&gt;True&lt;/DontImportCodeContracts&gt;\n     &lt;CodeContractsInstallDir&gt;$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\\packages\\DotNet.Contracts.1.10.10126.4\\'))&lt;/CodeContractsInstallDir&gt;\n   &lt;/PropertyGroup&gt;\n   &lt;Import Project=\"$(CodeContractsInstallDir)\\MsBuild\\v$(VisualStudioVersion)\\Microsoft.CodeContracts.targets\" /&gt;\n   </pre>\n4. check _XML documentation file_ for your build configuration\n5. select _Build_ of _Contract Reference Assembly_\n6. check _Emit contracts into XML doc file_\n7. add a new file to the project\n   \n   <pre>\n   using System;\n   using System.Diagnostics.Contracts;\n   \n   namespace CodeContractsIssue\n   {\n       internal static class LibraryContracts\n       {\n           internal const String NullValue = \"null\";\n   \n           [Pure]\n           internal static Boolean RepresentsNullValue&lt;T&gt;(String value)\n           {\n               return !typeof(T).IsValueType\n                   && !String.IsNullOrEmpty(value)\n                   && IsNullValue(value.Trim());\n           }\n   \n           [Pure]\n           internal static Boolean IsNullValue(String value)\n           {\n               return String.Equals(value, NullValue, StringComparison.InvariantCulture);\n           }\n       }\n   \n       /// &lt;summary&gt;\n       /// Simple parser interface.\n       /// &lt;/summary&gt;\n       [ContractClass(typeof(IParserContract))]\n       public interface IParser\n       {\n           /// &lt;summary&gt;\n           /// Parse a &lt;paramref name=\"value\"/&gt; to an instance of type &lt;typeparamref name=\"T\"/&gt;.\n           /// &lt;/summary&gt;\n           /// &lt;typeparam name=\"T\"&gt;the type of the parsed instance&lt;/typeparam&gt;\n           /// &lt;param name=\"value\"&gt;value to parse&lt;/param&gt;\n           /// &lt;returns&gt;an instance of type &lt;typeparamref name=\"T\"/&gt;&lt;/returns&gt;\n           /// &lt;remarks&gt;leading and trailing whitespace should be ignored&lt;/remarks&gt;\n           T Parse&lt;T&gt;(String value);\n       }\n   \n       [ContractClassFor(typeof(IParser))]\n       internal abstract class IParserContract : IParser\n       {\n           T IParser.Parse&lt;T&gt;(String value)\n           {\n               Contract.Requires&lt;ArgumentNullException&gt;(!String.IsNullOrEmpty(value), nameof(value));\n               Contract.Ensures(LibraryContracts.RepresentsNullValue&lt;T&gt;(value) || null != Contract.Result&lt;T&gt;());\n               return default(T);\n           }\n       }\n   }\n   </pre>\n8. build the project\n9. documentation file should contain the following output\n   \n   <pre>\n   &lt;ensures csharp=\"decimal.RepresentsNullValue&lt;decimal&gt;(value) || (object)Contract.Result&lt;decimal&gt;() != null\" vb=\"CodeContractsIssue.LibraryContracts.RepresentsNullValue(value) OrElse ((Object)Contract.Result(Of Microsoft.Cci.DummyTypeReference)()) &lt;&gt; Nothing\"&gt;decimal.RepresentsNullValue&lt;decimal&gt;(value) || (object)result != null&lt;/ensures&gt;\n   </pre>\n### expected\n1. use name of the _type parameter_\n2. either omit the class name of the validation method or use it (even if not `public`)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pgeerkens": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/425", "title": "Simple deductive failure in CCCheck for Ensures(Result())", "body": "The code below\n\n```\nusing System;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Diagnostics.Contracts;\n\nnamespace PGSolutions.Utilities.Monads.StaticContracts {\n    using static Contract;\n\n    public struct Maybe<T> {\n        ///<summary>Create a new Maybe{T}.</summary>\n        private Maybe(T value) : this() {\n            Ensures(!HasValue ||  _value != null);\n\n            _value    = value;\n            _hasValue = _value != null;\n        }\n\n        ///<summary>Returns whether this Maybe{T} has a value.</summary>\n        public bool HasValue { get { return _hasValue; } }\n\n        ///<summary>Extract value of the Maybe{T}, substituting <paramref name=\"defaultValue\"/> as needed.</summary>\n        [Pure]\n        public T BitwiseOr(T defaultValue) {\n            defaultValue.ContractedNotNull(\"defaultValue\");\n            Ensures(Result<T>() != null);\n\n            var result = ! HasValue ? defaultValue : _value;\n            //        Assume(result != null);\n            return result;\n        }\n\n        /// <summary>The invariants enforced by this struct type.</summary>\n        [SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        [SuppressMessage(\"Microsoft.Performance\", \"CA1822:MarkMembersAsStatic\")]\n        [ContractInvariantMethod]\n        [Pure]\n        private void ObjectInvariant() {\n            Invariant(!HasValue || _value != null);\n        }\n\n        readonly T    _value;\n        readonly bool _hasValue;\n    }\n}\n\n```\n\nproduces the error\n**CodeContracts: ensures unproven: Result<T>() != null**\non the final line of method BitwiseOr. \n\nRestoring the commented Assume on the preceding line is sufficient to eliminate the error. \n\nThis seems to be a simple failure by CCCheck  on a useful deductive case.\n\nUsing  v1.10.10126.2\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcdickinson": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/422", "title": "Contract Issue: ArraySegment<T>.Array Contract Incorrect", "body": "CodeContracts has determined that the following statement is redundant:\n\n```\nif (ReferenceEquals(x.Array, null) && ReferenceEquals(y.Array, null)) return true;\n```\n\n> CodeContracts: warning: The Boolean condition x.Array == null always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\n\nThis can be trivially shown to be a false negative with:\n\n```\ndefault(ArraySegment<byte>).Array // = null\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HellwigGit": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/420", "title": "Checking return values with Contract.Assert eliminiates call to method when only Pre and Post Check is enabled", "body": "I am using v.1.10.10126.2-rc1 with VS2015 Pro\n\nSimple Program to reproduce Bug:\n\nExpected output is \n\n```\n1\n2\n3\n```\n\n but with a release Build and Pre and Post Check enabled it is\n\n```\n1\n1\n3\n```\n\nFull Check is all ok.\n\n```\nnamespace Bug\n{\n    class Program\n    {\n        private static string text;\n        static void Main(string[] args)\n        {\n            text = \"1\";\n            Console.WriteLine(text);\n\n            var result = SetText(\"2\");\n            Contract.Assert(result == true); // critical line\n            Console.WriteLine(text);\n\n            var result2 = SetText(\"3\");\n            Console.WriteLine(text);\n        }\n\n        private static bool SetText(string s)\n        {\n            text = s;\n            return true;\n        }\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KAW24": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/417", "title": "Why does the static checker (sometimes) suggest duplicate preconditions?", "body": "If I have the following I see no warnings from the static checker:\n\n``` csharp\npublic interface IFoo\n{\n    void Bar();\n}\n\npublic abstract class Base\n{\n    protected Base(string name, IFoo foo)\n        : base()\n    {\n        Contract.Requires<ArgumentNullException>(name != null, nameof(name));\n        Contract.Requires<ArgumentNullException>(foo != null, nameof(foo));\n        Name = name;\n        foo.Bar();\n    }\n\n    public string Name { get; }\n}\n\npublic class Derived : Base\n{\n    public Derived(string name, IFoo foo, long value)\n        : base(name, foo)\n    {\n        Value = value;\n    }\n\n    public long Value { get; }\n}\n```\n\nIf I change the Base constructor as shown below I see the following warning associated with _base(name, foo)_ in the Derived constructor\n_warning : CodeContracts: Missing precondition in an externally visible method. Consider adding Contract.Requires(name.Length <= 256); for parameter validation_ \n\n``` csharp\n    protected Base(string name, IFoo foo)\n        : base()\n    {\n        Contract.Requires<ArgumentNullException>(name != null, nameof(name));\n        // Add a precondition for length.\n        Contract.Requires<ArgumentOutOfRangeException>(name.Length <= 256, nameof(name));\n        Contract.Requires<ArgumentNullException>(foo != null, nameof(foo));\n        Name = name;\n        foo.Bar();\n    }\n```\n\nThis warning goes away if I add the preconditions for _name_ to the Derived constructor but I don't understand why this is suddenly necessary. Why didn't the static checker warn about missing preconditions prior to adding the length precondition and why does it still not complain that the precondition for _foo_ is missing in the Derived constructor? Note this isn't limited to constructors; you see the same warnings with other method chains I just don't understand why the behaviour is different when the only preconditions are non-null preconditions.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/407", "title": "Static checker incorrectly suggests postcondition for method returning ValidationResult", "body": "When using the DataAnnotations validation system you indicate a successful validation by returning ValidationResult.Success, e.g.\n\n``` csharp\npublic static ValidationResult IsValueValue(string valueText, ValidationContext context)\n{\n    // Simple example that treats any string starting with 'a' as valid\n    if (valueText.StartsWith(\"a\"))\n    {\n        return ValidationResult.Success;\n    }\n    return new ValidationResult($\"The value '{valueText}' is invalid.\");\n}\n```\n\nThe static checker, with **check missing public ensures** and **suggest necessary ensures** enabled, produces the following warning:\n\n```\nCodeContracts: Consider adding the postcondition Contract.Ensures(Contract.Result<System.ComponentModel.DataAnnotations.ValidationResult>() != null); to provide extra-documentation to the library clients\n```\n\nValidationResult.Success is simply a [placeholder for null](http://referencesource.microsoft.com/#System.ComponentModel.DataAnnotations/DataAnnotations/ValidationResult.cs) to make the code more self-documenting. This means the suggested postcondition would not be valid. I could return null instead of ValidationResult.Success or suppress the warning but I think there's value in making the static checker aware of this pattern.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lundmikkel": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/409", "title": "What does the Future of Code Contracts Look Like?", "body": "I'm a big fan of Code Contracts and what it allows me to do. I've been using CC for almost five years now, and I would hate not using it. I've used it for both academic and commercial projects, and I feel naked, when I don't used it.\n\nI am, however, a bit afraid of the project's current status. There seems to be _extremely_ little activity: only two commits were made within the last two and a half months; there are 144 open issues, where the newest ones are hardly tagged or even commented (my own issues have gotten almost no attention); there are more and more pull request, many only commented by the author; the last release candidate was released in January, and only 31 commits have been made since then.\n\nI would like to know what to expect in the future. What does it look like for CC? Should I expect updates and to be able to keep using Code Contracts or should I rather look for new tools?\n\n@SergeyTeplyakov, @sharwell, @tom-englert, @hubuk, @yaakov-h: what are your commitments to the project? I can see you have all done a lot for the project after it was open-sourced, but few of you have been active this year. Have you all left, or are there still maintainers of the project?\n\nI hope, I will get some answers, so I don't have to stay in the dark. This is a great project, and I would hate losing it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/409/reactions", "total_count": 40, "+1": 40, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/402", "title": "Contracts on Delegates", "body": "The _Code Contracts User Manual_ from August 14, 2013 says:\n\n> Currently, there is no mechanism to provide contracts on delegate types or delegate values. In the future, we will support a mechanism similar to contracts for interfaces that will allow associating requires and ensures to delegate types.\n\nTo the best of my knowledge, this still isn't possible. Are there any plans to add this?\n\nLikewise, it would be beneficial to allow contracts on events. For instance, ensuring that a method raises an event, and that the values in the event handler are as expected.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/402/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/392", "title": "Call-Site Requires Checking Not Working in Constructor", "body": "It seems that preconditions behave differently when found in the constructor of a class.\n\nI have a class that looks like this in one project:\n\n``` csharp\npublic class MyClass\n{\n    public MyClass(bool value) {\n        Contract.Requires(value);\n    }\n\n    public void MyMethod() {\n        Contract.Requires(false);\n    }\n}\n```\n\nIn my test project I have a test fixture like this:\n\n``` csharp\n[TestFixture]\npublic class MyClassTests\n{\n    [Test]\n    public void Constructor_ViolatesPrecondition() {\n        var classWithPreconditions = new MyClass(false);\n    }\n\n    [Test]\n    public void Method_ViolatesPrecondition() {\n        var classWithPreconditions = new MyClass(true);\n        classWithPreconditions.MyMethod();\n    }\n}\n```\n\nI have a setup as described in http://stackoverflow.com/a/34831514/234910, where I use a custom contract runtime class (as described in Code Contracts User Manual, section 7.7) and call-site requires checking on. Both tests are expected to violate the precondition; one in the constructor, the other when calling the method.\n\nThe precondition on the method is correctly handled by the custom failure method:\n<img width=\"809\" src=\"https://cloud.githubusercontent.com/assets/1230950/13426726/ab793c1e-dfaf-11e5-893a-5dd0555f836f.png\">\nBut when the precondition in the constructor is violated, it uses the standard contract exception, and not the custom runtime class:\n<img width=\"805\" src=\"https://cloud.githubusercontent.com/assets/1230950/13426745/c67bd79c-dfaf-11e5-8f4a-d9acc4a02e7f.png\">\n\nIt only seems to apply to the constructor. If `MyClass` is in the same project as the test fixture, this works just fine, so it seems to be a problem related to the call-site requires handling.\n\nA minimal working example can be found here: https://github.com/lundmikkel/CodeContractsMinimalWorkingExample.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/331", "title": "Rewriter Gives Warning CC1076 For Postcondition", "body": "The following quote is from the Code Contracts User Manual of August 14, 2013, page 17:\n\n> This problem doesn\u2019t come up for postconditions: having a stronger postcondition just gives clients more guarantees than they had before. Therefore, **we allow subtypes to add postconditions** which are just conjoined (i.e., \u201cand-ed\u201d) with any existing postconditions.\n\nAccording to this, this minimal example should work just fine:\n\n``` csharp\nusing System.Diagnostics.Contracts;\n\ninterface IFoo {\n    int Number { get; }\n}\n\n[ContractClass(typeof(IBarContract))]\ninterface IBar : IFoo {}\n\n[ContractClassFor(typeof(IBar))]\nabstract class IBarContract : IBar {\n    public int Number {\n        get {\n            Contract.Ensures(Contract.Result<int>() >= 0); // <-- Not checked\n            return default(int);\n        }\n    }\n}\n```\n\nHowever, the rewriter gives the following warning:\n\n> warning CC1076: CodeContracts: Contract class IBarContract cannot define contract for method IFoo.get_Number as its original definition is not in type IBar. Define the contract on type IFoo instead.\n\nIt makes no sense to add the postcondition to IFoo, since it doesn't know about IBar - nor should it.\nThis issue seems to have been posted elsewhere on the web, but never with a proper solution, and it still seems to be an error with the rewriter.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkm000": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/408", "title": "Minor: Incorrect DLL directory in the analysis summary message", "body": "VS2015 Update 2, CC v.1.10.10126.2-rc1 running background check. Locations of `.cs` files are shown correctly, but the project target DLL is reported as if it were in the VS installation directory (it is naturally not there). The filename `libEngine.dll` is correct.\n\n```\nC:\\_PX\\Microsoft Visual Studio 14.0\\Common7\\IDE\\libEngine.dll(1,1): message : CodeContracts: Checked 3881 assertions: 3444 correct 7 unknown 99 unreached (331 masked)\nCodeContracts: libEngine: \nCodeContracts: libEngine: Background contract analysis done.\n```\n\nDouble check:\n\n```\nC:\\projects>dir C:\\_PX\\Microsoft Visual Studio 14.0\\Common7\\IDE\\libEngine.dll\nThe system cannot find the path specified.\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/259", "title": "CC thinks that uint.MaxValue is same as -1", "body": "...which is true to some extent, considering machine arithmetic, but causes this:\n\n``` C#\n  uint TimerDelta(long time) {\n    long delta = time - _clock.Time;\n    if (delta < 0)\n      return 0;\n    else if (delta > uint.MaxValue - 1)\n      return uint.MaxValue - 1;\n    else\n      return (uint)delta;\n  }\n```\n\nIn the above code, the type of `_clock.Time` is `long`.\n\n```\n CodeContracts: warning: The Boolean condition (time - this._clock.Time) > (ulong)(-2) always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\n```\n\nI see where CC is coming from: `delta > 0` indeed entails `delta > -2`, only `uint.MaxValue` is no longer `-1` in this context.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/259/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/258", "title": "A generic pointer passed by ref incorrectly asserted non-null", "body": "This \n\n``` C#\npublic static void Dispose<T>(ref T disp) where T : class, IDisposable {\n  T t = disp;\n  disp = null;\n  if (t != null) t.Dispose();\n}\n```\n\ncauses this:\n\n```\nCodeContracts: warning: The Boolean condition t != null always evaluates to a constant value. If it (or its negation) appear in the source code, you may have some dead code or redundant check\n```\n\nI think the problem has been around for a long time. Still in 1.9.10714.2,  VS2015.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/da7188411af38b9c755e336cfd88f6625144c579", "message": "Support SQL Local DB 2016"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erisco": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/405", "title": "Simple generic \"is\" assert", "body": "Should check but doesn't.\n\n```\nclass Foo<A>\n{ \n  private A x;\n  public Foo(A x)\n  {\n    Contract.Requires(x is A);\n    this.x = x;\n  }\n\n  [ContractInvariantMethod]\n  private void ContractInvariants()\n  {\n    Contract.Invariant(x is A);\n  }\n}\n```\n\nChecks.\n\n```\nclass Foo<A>\n{ \n  private A x;\n  public Foo(A x)\n  {\n    Contract.Requires(x is A);\n    this.x = x;\n    Contract.Assert(this.x is A);\n  }\n\n  [ContractInvariantMethod]\n  private void ContractInvariants()\n  {\n    Contract.Invariant(x is A);\n  }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/404", "title": "Array bounds check bug", "body": "Should check, but doesn't.\n\n```\n    [Pure]\n    public static int IndexOf<A>(this A[] array, A element)\n    {\n      Contract.Requires(array != null);\n      Contract.Ensures\n        (    Contract.Result<int>() == -1 \n          ||    0 <= Contract.Result<int>()\n             && Contract.Result<int>() < array.Length\n             && Equals(array[Contract.Result<int>()], element)\n        );\n      var ix = Array.IndexOf(array, element);\n      Contract.Assume\n        (    ix == -1 \n          ||    0 <= ix\n             && ix < array.Length\n             && Equals(array[ix], element)\n        );\n      return ix; // Maybe the guard ix >= array.Length is too weak?\n    }\n```\n\nChecks.\n\n```\n    [Pure]\n    public static int IndexOf<A>(this A[] array, A element)\n    {\n      Contract.Requires(array != null);\n      Contract.Ensures\n        (    Contract.Result<int>() == -1 \n          ||    Contract.Result<int>() < array.Length\n             && 0 <= Contract.Result<int>()\n             && Equals(array[Contract.Result<int>()], element)\n        );\n      var ix = Array.IndexOf(array, element);\n      Contract.Assume\n        (    ix == -1 \n          ||    0 <= ix\n             && ix < array.Length\n             && Equals(array[ix], element)\n        );\n      return ix;\n    }\n```\n\nChecks.\n\n```\n    [Pure]\n    public static int IndexOf<A>(this A[] array, A element)\n    {\n      Contract.Requires(array != null);\n      Contract.Ensures\n        (    Contract.Result<int>() == -1 \n          ||    0 <= Contract.Result<int>()\n             && Equals(array[Contract.Result<int>()], element)\n        );\n      var ix = Array.IndexOf(array, element);\n      Contract.Assume\n        (    ix == -1 \n          ||    0 <= ix\n             && ix < array.Length\n             && Equals(array[ix], element)\n        );\n      return ix;\n    }\n```\n\nShould check, but doesn't.\n\n```\n    [Pure]\n    public static int IndexOf<A>(this A[] array, A element)\n    {\n      Contract.Requires(array != null);\n      Contract.Ensures\n        (    Contract.Result<int>() == -1 \n          ||    Contract.Result<int>() < array.Length\n             && Equals(array[Contract.Result<int>()], element)\n        );\n      var ix = Array.IndexOf(array, element);\n      Contract.Assume\n        (    ix == -1 \n          ||    0 <= ix\n             && ix < array.Length\n             && Equals(array[ix], element)\n        );\n      return ix; // Maybe the guard ix >= array.Length is too weak?\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jholovacs": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/397", "title": "Spelling typo in resource file", "body": "patch is as follows:\n\n```\ncommit 8208989027b178c5d1e2959bc57076f2b17cf8fc\nAuthor: Jeremy Holovacs <jeremy_holovacs@onlifehealth.com>\nDate:   Tue Mar 22 13:31:32 2016 -0500\n\n    Spelling mistake in resource file.\n\ndiff --git a/Microsoft.Research/ManagedContractsVSPropertyPane/PropertyPane.resx b/Microsoft.Research/ManagedContractsVSPropertyPane/PropertyPane.resx\nindex e5baaaa..0fa2952 100644\n--- a/Microsoft.Research/ManagedContractsVSPropertyPane/PropertyPane.resx\n+++ b/Microsoft.Research/ManagedContractsVSPropertyPane/PropertyPane.resx\n@@ -943,7 +943,7 @@\n     <value>91</value>\n   </data>\n   <data name=\"linkUnderstandingTheStaticChecker.Text\" xml:space=\"preserve\">\n-    <value>Undestanding the static checker</value>\n+    <value>Understanding the static checker</value>\n   </data>\n   <data name=\"&gt;&gt;linkUnderstandingTheStaticChecker.Name\" xml:space=\"preserve\">\n     <value>linkUnderstandingTheStaticChecker</value>\n\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dennis-Petrov": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/391", "title": "Could not resolve type reference: type is declared in assembly being rewritten", "body": "I've build CC from master branch using VS2013 just now. When building my solution from VS2015, `ccrewrite` fails with these messages:\n\n> 6>  Reading assembly 'A' from 'Path\\A\\obj\\Debug\\A.dll' resulted in errors.\n> 6>    Could not resolve type reference: [mscorlib]A.ISomeInterface,.\n> 6>    Could not resolve type reference: [mscorlib]B.SomeType.\n> 6>    Could not resolve type reference: [mscorlib]B\n> 6>    Could not resolve type reference: [mscorlib]Version=1.0.0.0.\n> 6>    Could not resolve type reference: [mscorlib].Culture=neutral.\n> 6>    Could not resolve type reference: [mscorlib].PublicKeyToken=null.\n\n`ISomeInterface` is declared in `A.dll` and has contract class associated. `B.dll` is just another my assembly: `A` references `B`, and `B` is successfully built. \n\n[RC](https://github.com/Microsoft/CodeContracts/releases/tag/v1.10.10126.2) doesn't reproduce this error.\n\nWhat additional info should I post?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/375", "title": "Can't build CodeContracts - installer building fails", "body": "Hi everyone.  \nI've forked CC from master branch yesterday, and can't build it via batch file. I'm running `buildcc.bat` from MSBuild command prompt (VS2015) and getting this error:\n\n> Build FAILED.\n> \n> \"D:\\Projects\\Research\\CodeContracts\\Microsoft.Research\\ManagedContract.Setup\\bu\n> ildMSI10.xml\" (All target) (1) ->\n> (CreateVersionFile target) ->\n>   EXEC : error : unknown switch '?' [D:\\Projects\\Research\\CodeContracts\\Microso\n> ft.Research\\ManagedContract.Setup\\buildMSI10.xml]\n>   D:\\Projects\\Research\\CodeContracts\\Microsoft.Research\\ManagedContract.Setup\\b\n> uildMSI10.xml(299,5): error MSB3073: The command \"git update-index --assume-unc\n> hanged ..\\common\\include\\version.cs\" exited with code 129.\n> \n> ```\n> 0 Warning(s)\n> 2 Error(s)\n> ```\n\nMy machine has git 2.7.0.2 x64 installed - I had to install it, because for now it is impossible to build without git at all.\n\nMaybe, `README.MD` misses some details about building process?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/235", "title": "BadImageFormatException when using Contract.Ensures in async method, that returns task without any await", "body": "Hi. This code:\n\n```\nclass Program\n{\n    static Task<T> Foo<T>(T source)\n        where T : class\n    {\n        Contract.Ensures(Contract.Result<T>() != null);\n\n        return Task.FromResult(source);\n    }\n\n    static void Main(string[] args)\n    {\n        Foo(new object()).Wait();\n    }\n}\n```\n\nleads to `BadImageFormatException`, while this one - does not:\n\n```\n    static async Task<T> Foo<T>(T source)\n        where T : class\n    {\n        Contract.Ensures(Contract.Result<T>() != null);\n\n        return await Task.FromResult(source);\n    }\n```\n\nThe only difference is awaiting the task in the second sample, which is totally unnecessary here.  \n\nIt seems to me, that using `Contract.Result<T>()` in `Foo` is logically incorrect too .We're not _awaiting_ a task result, we're just _returning_ a task. Though, `BadImageFormatException` shouldn't be thrown, and I need a way to point CC to check task result here.\n\nIs there any workarounds instead of `await`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/196", "title": "Added new snippets.", "body": "Snippets use string.IsNullOrWhiteSpace() instead of\nstring.IsNullOrEmpty, as proposed in #190.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Patashu": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/386", "title": "Code contracts suggestions for DataGridView", "body": "(This isn't an exhaustive list of contracts worth adding, just what I've noticed so far)\n\n1) CreateColumnsInstance() and CreateRowsInstance() should all ensure non-null result.\n\nThat way, Rows and Columns can ensure non-null as well.\n\nThe main reason this is a problem is due to Windows Form Designer generated code in InitializeComponent(). It can make lines like these\n\n`this.DataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {`\n\nwhich CC static analyzer will think is possibly accessing a null reference.\n\n2) DataGridViewRowCollection should require for all methods that take in a DataGridViewRow that the row is non-null, and Ensure for all methods that return a DataGridViewRow that the result is non-null\n\nThis seems pretty safe to me after going through the code, exception is thrown when null is passed in in relevant places already. But there is one tricky edge case that needs to be cleared up: DataGridViewBand.Clone() needs to guarantee it returns non-null.\n\n```\npublic virtual object Clone()\n{\n    DataGridViewBand dataGridViewBand = (DataGridViewBand)     Activator.CreateInstance(base.GetType());\n    if (dataGridViewBand != null)\n    {\n        this.CloneInternal(dataGridViewBand);\n    }\n    return dataGridViewBand;\n}\n```\n\nIt's probably safe, but maybe there's some edge case where Activator.CreateInstance returns null? It calls out to external methods so I can't fully analyze it.\n\n3) DataGridViewRow CreateCellsInstance() and Cells should Ensure non-null\n\nSimilar logic as 1).\n\n4) DataGridViewColumnCollection should require non-null columns to be added, and ensure columns retrieved are non-null\n\nSimilar logic as 2), haven't analyzed yet though.\n\n5) Control.DataBindings can't be null, ButtonBase.FlatAppearance can't be null, ImageList.Images can't be null\n\nChecked and it's not possible, so just add contracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/387", "title": "Add contracts to System.Windows.Forms, System.Windows.Data classes", "body": "Just a bunch of contracts that I noticed were missing.\n\nFirst pull request; LMK if I did anything wrong.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cremor": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/384", "title": "Unable to build Outlook VSTO Add-in project with runtime contract checking", "body": "It seems like it is impossible to use runtime Code Contracts in VSTO Outlook addins - maybe Office addins in general. Even a completely empty project produces build errors. Steps to reproduce:\n1. Create a new solution with the \"Outlook 2013 and 2016 VSTO Add-in\" project template.\n2. Try to build the project - should work fine.\n3. Enable \"Perform Runtime Contract Checking\" in the Code Contracts properties page of the project.\n4. Try to build the project again, it will fail with the following output:\n\n```\n1>------ Build started: Project: OutlookAddIn1, Configuration: Debug Any CPU ------\n1>  Reading assembly 'OutlookAddIn1' from 'D:\\Projects\\OutlookAddIn1\\OutlookAddIn1\\obj\\Debug\\OutlookAddIn1.dll' resulted in errors.\n1>      Could not resolve member reference: Microsoft.Office.Tools.Outlook.OutlookAddInBase::.ctor.\n1>      Could not resolve member reference: Microsoft.Office.Tools.AddInBase::get_DataHost.\n1>      Could not resolve member reference: Microsoft.Office.Tools.Outlook.OutlookAddInBase::GetFormRegions.\n1>      Could not resolve member reference: Microsoft.Office.Tools.Ribbon.RibbonCollectionBase::.ctor.\n1>      Could not resolve member reference: Microsoft.Office.Tools.Outlook.FormRegionCollectionBase::.ctor.\n1>      Could not resolve member reference: Microsoft.Office.Tools.Outlook.OutlookAddInBase::GetFormRegions.\n1>      Could not resolve member reference: Microsoft.Office.Tools.Outlook.OutlookAddInBase::GetFormRegions.\n1>ccrewrite : error : Rewrite aborted due to metadata errors. Check output window\n1>  elapsed time: 146,0223ms\n1>C:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild\\v14.0\\Microsoft.CodeContracts.targets(265,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@OutlookAddIn1ccrewrite.rsp\"\" exited with code -1.\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n```\n\nSoftware versions used:\nWindows 10 Version 1511 x64\nVisual Studio 2015 with Update 1\nOffice 2016 x86\nCode Contracts 1.10.10126.2-rc1\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denis-tsv": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/380", "title": "Async methods postconditions not works in interface contracts with generics", "body": "Hello,\n\nI created a sample, where async method postconditions (v1.10) not works.\n\n``` csharp\n[ContractClass(typeof(ITestInterfaceContract))]\npublic interface ITestInterface\n{\n    Task<T> GetAsync<T>() where T : class;\n}\n\n[ContractClassFor(typeof(ITestInterface))]\nabstract class ITestInterfaceContract : ITestInterface\n{\n    public Task<T> GetAsync<T>() where T : class\n    {\n        Contract.Ensures(Contract.Result<T>() != null);\n        throw new NotImplementedException();\n    }\n}\n\npublic class TestInterface : ITestInterface\n{\n    public async Task<T> GetAsync<T>() where T : class\n    {\n        await Task.Delay(100);\n        return null;\n    }\n}\n```\n\nWhen a call \n\n``` csharp\nawait new TestInterface().GetAsync<SomeResult>();\n```\n\n I received BadImageFormatException.\n\nThen I moved Contract.Ensures from ITestInterfaceContract to TestInterface.\n\n``` csharp\npublic class TestInterface : ITestInterface\n{\n    public async Task<T> GetAsync<T>() where T : class\n    {\n        Contract.Ensures(Contract.Result<T>() != null);\n        await Task.Delay(100);\n        return null;\n    }\n}\n```\n\nAnd as expected, I received ContractException. \n\nMaybe I did something wrong in first case? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chr1sk0n": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/377", "title": "Extension uses old build number", "body": "After updating the code contracts extension to version 1.9.10714.2 the old/prior build number will be used , so that the user will be informed that a new version can be downloaded and installed. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/377/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tom-englert": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/374", "title": "CCDoc does not generate proper XML doc for Contract.Ensures(Contract.ForAll(... in VS2015", "body": "Source code:\n`Contract.Ensures(Contract.ForAll(Contract.Result<IList<string>>(), item => item != null));`\n\nGenerated XMLDoc:\n\nVS2013:\n\n```\n<ensures \ncsharp=\"System.Diagnostics.Contracts.Contract.ForAll<string>(Contract.Result<System.Collections.Generic.IList<string>>(), (string item) => item != null)\" \nvb=\"System.Diagnostics.Contracts.Contract.ForAll(Contract.Result(Of System.Collections.Generic.IList(Of String))(), (item As String) => item <> Nothing)\">for all item in result item != null\n</ensures>\n```\n\nVS2015:\n\n```\n<ensures csharp=\"(() => {\n{\n    push Contract.Result<System.Collections.Generic.IList<string>>();\n    push TomsToolbox.Desktop.ClipboardHelper.<>c.<>9__11_0;\n    if (dup == default(System.Predicate<string>))\n    {\n        pop;\n        push (string item) => item != null;\n        TomsToolbox.Desktop.ClipboardHelper.<>c.<>9__11_0 = dup;\n    }\n}\nreturn System.Diagnostics.Contracts.Contract.ForAll<string>(pop, pop); })()\" \nvb=\"(() => {\npush Contract.Result(Of System.Collections.Generic.IList(Of String))();\npush TomsToolbox.Desktop.ClipboardHelper.<>c.<>9__11_0;\nIf dup = Nothing Then\npop\npush (item As String) => item <> Nothing;\nTomsToolbox.Desktop.ClipboardHelper.<>c.<>9__11_0 = dup\nreturn System.Diagnostics.Contracts.Contract.ForAll(pop, pop); })()\">(() => {\n{\n    push result;\n    push TomsToolbox.Desktop.ClipboardHelper.<>c.<>9__11_0;\n    if (dup == default(System.Predicate<string>))\n    {\n        pop;\n        push (string item) => item != null;\n        TomsToolbox.Desktop.ClipboardHelper.<>c.<>9__11_0 = dup;\n    }\n}\nreturn for all ; })()</ensures>\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/373", "title": "Extend cccheck(Clousot) test to cover Roslyn/Net4.5", "body": "Currently the cccheck(Clousot) tests only cover .Net4.0 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/355", "title": "Cleanup the project configuration mess", "body": "There are lots of unused/unclear project configurations. \nTo make the whole solution maintainable again, unused configurations should be removed. \n\nThe final goal is to have exactly two solution configurations (Debug/Release) that map to the same configuration in every project.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/277", "title": "Setup test environmet for CCDocGen", "body": "Setup a test environment so we can have tests for CCDocGen, like we have for Clousot.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/232", "title": "Outdated email address in output", "body": "Today I got this error message: \n\n```\nCodeContracts: TomsToolbox.Wpf: Internal error: Method TomsToolbox.Wpf.Converters.ConfirmedCommandConverter+CommandProxy.#ctor(TomsToolbox.Wpf.Converters.ConfirmedCommandConverter,System.Windows.Input.ICommand) was found in the cache but deserialization failed.\nCodeContracts: TomsToolbox.Wpf: The reason why the deserialization failed is Unable to find type ICommand\nCodeContracts: TomsToolbox.Wpf: We remove the incorrect entry from the cache and we replace it with a new one. \nIf the error persists, please report the tool output to logozzo@microsoft.com\n```\n\n**logozzo@microsoft.com** is probably no longer valid.\nWe should replace all email addresses with a link to the github issues page.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/217", "title": "Add missing contracts for System.Windows.Forms.FileDialog and related", "body": "", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/216", "title": "Add missing contracts for System.Windows.Forms.DataGridView and related", "body": "Contracts for DataGridView are missing at all.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/215", "title": "Missing contracts in System.Net.NetworkInformation.NetworkInterface", "body": "e.g. GetNetworkInterfaces(), missing \"Ensures result != null\"\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/214", "title": "Missing contracts in System.Windows.Forms.Control", "body": "e.g. DataBindings property is missing \"Ensures result != null\"\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/149", "title": "Text formatting does not specify culture", "body": "String formatting in the analyzer does not specify a culture, therefore some tests fail on systems with non-English culture with e.g. \"expected: 2.0, actual: 2,0\"\n\nI have added a workaround in `ClousotMain.Analyze()` by setting the main threads culture to invariant. However this is very bad practice, and should be fix in long term.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/148", "title": "Fix broken regression tests", "body": "Some of the regression tests that were running fine with the initial check in now fail. \nSome reasons I could identify are\n- system contracts have been updated, so there are sometimes different/new messages\n- the messages are the same, but the IL offsets have shifted (maybe due to rewriter fixes)\n\nRegression tests are located in folder `Regressions\\Clousot`, projects `ClousotTests` and `ClousotCacheTests`. All tests are named `Analyze*` or `Slice*`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/98", "title": "Add a possibility to add contracts to the default constructor of value types", "body": "Value types (structs) can't have a parameterless constructor, so it's not possible to specify contracts.\ne.g. it's not possible to write the following:\n\n``` C#\nstruct Size\n{\n    Size()\n    {\n        Contract.Ensures(!this.IsEmpty);\n    }\n```\n\nso if we want to add this requirement\n\n``` C#\n    int Width\n    {\n         ....\n         set { Contract.Requires(!this.IsEmpty); }\n    }\n}\n```\n\nwe always get an error when accessing the size like this\n\n``` C#\nvar s = new Size();\ns.Width = 10; // => \"CodeContracts: requires unproven: !this.IsEmpty. Are you making some assumption on get_Width that the static checker is unaware of?\"\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/87", "title": "Add contracts for NotifyCollectionChangedEventArgs", "body": "A stub contract class for NotifyCollectionChangedEventArgs was added in #84. The contracts for methods in this class still need to be added.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/86", "title": "Unprovable contracts", "body": "There are some system contracts that the static checker can't cope with since they are too complex. \nThese contracts have been disabled in https://github.com/Microsoft/CodeContracts/pull/85, because they generate false warnings that are not fixable in source code.\n\ne.g. in `Rect` the requirement `Contract.Requires(!this.IsEmpty)` is true, but it's impossible to proof with acceptable effort.\nEven simple code like `var r = new Rect(); r.Widht = 10.0;` will create a warning `\"CodeContracts: requires unproven: !this.IsEmpty. Are you making some assumption on get_Width that the static checker is unaware of?\"`\n\nOnce we can find a way how the checker can proof these contracts we might enable them again.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/28", "title": "Wrong warning for static events", "body": "```\npublic class Test5\n{\n    public static event EventHandler SomeEvent;\n\n    public static void RaiseTheEvent(object sender)\n    {\n        var eventHandler = SomeEvent;\n        if (eventHandler != null)\n        {\n            eventHandler(sender, EventArgs.Empty);\n        }\n    }\n}\n```\n\nHere we get this warning:\nThe Boolean condition eventHandler != null always evaluates to a constant value. If it (or its negation) appear in the source code....\n\nIf no event handler is attached to SomeEvent, it is null.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/28/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/27", "title": "Code containing exception handling generates false warnings", "body": "namespace CCTestApp\n{\n    [ContractClass(typeof(ServiceContract))]\n    public interface IService\n    {\n        IList<Setting> GetSettings();\n    }\n\n```\n[ContractClassFor(typeof(IService))]\nabstract class ServiceContract : IService\n{\n    IList<Setting> IService.GetSettings()\n    {\n        Contract.Ensures(Contract.Result<IList<Setting>>() != null);\n        throw new NotImplementedException();\n    }\n}\n\npublic class Setting\n{\n    private readonly IService _service;\n    private IList<Setting> _settings;\n\n    public Setting(IService service)\n    {\n        Contract.Requires(service != null);\n        _service = service;\n    }\n\n    public IList<Setting> SomeSettings\n    {\n        get\n        {\n            return _settings ?? (_settings = TryGetSettings());\n        }\n    }\n\n    private IList<Setting> TryGetSettings()\n    {\n        try\n        {\n            return _service.GetSettings();\n        }\n        catch (EntityException)\n        {\n            // Database not available, just go with local settings.\n        }\n        return null;\n    }\n}\n```\n\n}\n\nEven though TryGetSettings may return null if IService.GetSettings throws an exeption we get a warning that the SomeSettings should ensure Result<> != null\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/26", "title": "Confusing warning about non-existing code chain", "body": "```\n    private static int DetermineStartupMode(IEnumerable<string> args)\n    {\n        Contract.Requires(args != null);\n\n        var arg = args.FirstOrDefault();\n\n        if (arg != null)\n        {\n            switch (arg.ToLower().Trim())\n            {\n                case \"a\":\n                    break;\n\n                case \"b\":\n                    return 1;\n\n                case \"c\":\n                    return 2;\n            }\n        }\n\n        return 0;\n    }\n```\n\nThis code will generate the warning:\n\nThe Boolean condition ((string)System.Linq.Enumerable.FirstOrDefault(args)).ToLower().Trim() != null always evaluates to a constant value. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/25", "title": "CC warns about missing contracts, even if contracts are there", "body": "Sometimes we get a warning like \n Consider adding the postcondition Contract.Ensures(Contract.Result<System.String>() != null)\neven though the contract it there.\n\nI could reproduce it with this code:\n\n```\npublic class Test2\n{\n    public string FullAppVersion\n    {\n        get\n        {\n            Contract.Ensures(Contract.Result<string>() != null);\n\n            var sb = new StringBuilder();\n            sb.Append(\"Version \");\n\n            var assembly = Assembly.GetEntryAssembly();\n            if (assembly != null)\n            {\n                var fvi = FileVersionInfo.GetVersionInfo(assembly.Location);\n                sb.Append(fvi.ProductVersion);\n            }\n\n            return sb.ToString();\n        }\n    }\n}\n```\n\nWhen removing the public keyword from the class or simplifying the code, the warning disappears.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/25/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/24", "title": "Unresolvable warning", "body": "```\npublic class Base\n{\n    public virtual string VirtualMethod(string param)\n    {\n        return null;  // Base class should not do anything here...\n    }\n}\n\npublic class Derived : Base\n{\n    public override string VirtualMethod(string param)\n    {\n        return \"Test\";\n    }\n}\n```\n\nThis will generate a warning on the base class:\n\nCodeContracts: Consider adding the postcondition Contract.Ensures(Contract.Result<System.String>() == null); to provide extra-documentation to the library clients\n\nHowever if we add this, all derived classes must return null, too!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/24/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b87d7a02ff256f9fc4ed1aa1109e43359c73d7d4", "message": "Add missing contracts found when aligning CC with R# External Annotations\n\n(https://github.com/JetBrains/ExternalAnnotations)"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f7c92fbc56026910822903a728a6d66b6e808011", "message": "Add a test case and revert changes in reader as it breaks the tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fd0e5ffc9440f2dcf36bb63f1dfc64ee5707e56b", "message": "Additional fix for #340: Type arguments can't start with a reserved char, so fall back to standard behavior in this case."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a8ae2e3d99a33a0ff97a355db9c98cd4507f04b8", "message": "Add null check to avoid crash when parsing Roslyn generated code."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/55f00db4a7d52414decb5c0ea111aba95ddeeefd", "message": "Complete truncated comment."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5e03f0c84a2750a89c2568d3bdd7a57c8f35bbb2", "message": "cleanup the test sources mess"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3dcfb4d840000cfc66ffa748761367908c0bd634", "message": "Remove dead code"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1e9530b862b9b15265071e2ca80592d295bd39a7", "message": "Reactivate the cache tests"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dfa1664e8c844c6acf25432ae233e51534962296", "message": "- Cleanup the test framework;\n\n- Omit .Net3.5 tests, since many of them fail, and fixing them would be a too expensive task for an outdated framework.\n- Ensure all remaining ClousotTests succeed."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/66605c48040cd9625dd54622d4dbf4cafcd3d34d", "message": "Remove CCI2 and Slicing Options"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/19ce5e8f3f7cd4599fc760ed1fe3801efe23a558", "message": "Remove some dead code"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/34b2c2e4194fd6d3f7fdaaad11372273c528c988", "message": "Remove some dead code"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a021841b7a7cfb62021479d30a99a6dd002e69f3", "message": "Maintainability: Remove experimental projects and related tests:\n\n- Clousot2*\n- ClousotSlicer*\n- Cloudot*\n- ManyClousot"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/86e4c7272bc794f377bad3070caae6091c4a6f27", "message": "Simplify .gitignore"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/aa69629e5f0f007232c16d72ca26149af1179576", "message": "Build CCDoc with solution"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e5b84b03925b0d69b31a94c1064f9436d7ee3dbb", "message": "Build CCI2 from cciast-73379 and ccimetadata-73372\n\n- Signing was added to CSharp- and VBSourceEmitter projects\n- *.Contracts.dll taken from debug build where \"Contract Reference Assembly\" option was off in release configuration."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7402afcd372a27a3dcdc6326ca5b8646a42f88dd", "message": "Add missing contracts"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a2fa884fe841d7924217ebcff7d94c5c0f7ee915", "message": "Add missing contracts in System.Windows.Input.InputManager"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/62e6a035a5386aaedc813a8dda4fad2c4f23fccb", "message": "Exclude contracts for Silverlight5 and .Net3.5 that have no correspondent entry in the reference assemblies."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81682032", "body": "You're right, adding a post condition works in this case. I expected to get the \"x is implementing y, thus can't add contracts\" warning - so I didn't try.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81682032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84602805", "body": "Wouldn't it be better to make no suggestions in this case, instead of wrong ones?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84602805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/92254592", "body": "But this is a major issue, since it's impossible in .Net to avoid exception handling, it ubiquitous.\nHaving lot's of false positives definitely diminishes the usability of CC, so in this case it would be better just to make no assumptions than to make false assumptions and generate false warnings.\n\nTo me an exception block looks pretty much the same as an if-else block - both code paths might be executed. However I don't know the details how the analyzer parses the code, so my view of this might be wrong.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/92254592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111961436", "body": "It was intended for my changes - however everything is already collected together by \"hubuk\". As long as my changes make it to the main branch, I'm fine with this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111961436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113197969", "body": "@SergeyTeplyakov: I have created a pull request (https://github.com/Microsoft/CodeContracts/pull/21) that contains many fixes for the contract reference libraries. I already use these with the current version of CC and would like to see them in the next release.\n\nHowever after merging a fix from @hubuk changes from other people have slipped in. Also my changes have already been merged to other peoples forks.\nI'm not the GIT expert, so maybe s.o. can figure out how to resolve such cross-fork merges.\n\nAlso maybe we should think of some basic rules or do's and don'ts how to use git forks and branches properly.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113197969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113517263", "body": "@sharwell I doubt using a different branch for 2/3 would have made a difference. It was intended for all my changes to go into this pull request, since all are fixes for reference contracts. \nThe problem arose when I had to merge a fix from hubuk, which indirectly merged all changes from others that had been merged into his branch before.\nRestoring a \"clean\" state would mean removing all changes that were not done by me, except for one single commit by hubuk. How would that work?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113517263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113523275", "body": "Let me layout the problem like this:\n- I did commit 1, 2, and 3\n- hubuk made a fix for 3 in his branch\n- I merged his fix into my branch as commit 4 (and this unfortunately included everything else form hubuks branch)\n- I did another fix on hubuks fix as commit 5\n\nIt would not have helped merging hubuks change into tmp-working, as I needed it in my fix-reference-contracts branch, because my commit 5 based on that.\nThe clean solution would have been to merge only the one and only commit from hubuk that contained his fix - would GIT allow this? I didn't find any command that would do that.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113523275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113530212", "body": "@sharwell But my intent was to **include** all **1-5** in the push, and not only have it in my private tmp-working\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113530212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113550362", "body": "@sharwell I've fixed it the brute-force way - rollback until the merge and then restored my own two commits. I think now it's ready to be pulled.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113550362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114938580", "body": "@SergeyTeplyakov https://github.com/Microsoft/CodeContracts/pull/21 is hanging around now for a very long time, with already most of it reviewed by others. I think this should be merged soon before more conflicts arise.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114938580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115621986", "body": "@sharwell sounds good to me, as long as the changes will make it to the next release I'm fine with everything.\n\nThe new solution is just for convenience, it dramatically speeds up development when fixing the existing contracts. It would be helpful to anyone concentrating on contract definitions only, but I won't insist in keeping this in the repo.\n\nI tried my best to not touch the formatting, which is a very hard task with the existing code base without switching of all automatism in all tools. I think there is already an issue requesting to standardize formatting of the existing code, so anyone can work with standard VS settings, which I assume most developers already use. Until this is done I think we have to live with minor formatting and white space changes.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115621986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115623251", "body": "@SergeyTeplyakov as @sharwell has stated in his comment in #21 he will take care, and I'm fine with this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115623251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117718290", "body": "I also had frequent problems with the LocalDb cache, if the file is gone but still registered with SqlServer it's not easy to recover. \nMaybe you can have a look at https://github.com/tom-englert/CodeContracts/commit/76ed1a3350173f6fafc78f78e81ef68cf6305f21, this solved all my problems.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117718290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117747830", "body": "Most people would be lost if the cache does not work out of the box. We should definitely improve cache handling.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117747830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117751880", "body": "Just being curious: Where does the \"MSSQLLocalDB\" come from? Is the a new standard with the newer SQLServers? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117751880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117755927", "body": "So how does this affect performance? Trying through all possible DB-Names might be a time consuming task. \nWhen I enter a wrong name in the SQL Management Strudio it takes about 10sec until it returns with an error. \nOnce the connection succeeds we probably need to cache the name.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117755927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118364623", "body": "I have split this into https://github.com/Microsoft/CodeContracts/pull/83 and https://github.com/Microsoft/CodeContracts/pull/84. Both are now based on the latest master and have reduced white space changes, so they can be automatically merged. All reviews from this request should still apply.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118364623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119278228", "body": "I mainly look at contracts from the users side, not from mathematical theory. \nContracts are a tool to help writing better code. If it hinders you from writing clean code (e.g. if there are more `Contract.Assume` statements than active code), something is wrong.\nThis happened to me with Rect and Size, which are heavily used e.g. in layout calculations. Code like\n\n``` c#\nvar r = new Rect();\nContract.Assume(!r.IsEmpty);\nr.Width = 5;\nContract.Assume(!r.IsEmpty);\nr.Height = 10;\n```\n\nis no longer readable. I won't find any acceptance in any team for using CC if people have to write code like this. \n\nFor the post conditions I did not remove them, but simplified them so something that the checker could understand. My reference here was that code like\n\n``` c#\nvar r = new Rect(0, 0, Math.Abs(a), Math.Abs(b))\n```\n\nshould not generate a warning that width and height are unproven to be positive values. I could not convince anyone that it would be better to write the above statement in 10 lines, where 5 would be just `Contract.Assume` to make the checker happy.\n\nIt does not make sense building cars if there are no roads. Lets start making some good shoes, and do the cars when we have the roads.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119278228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119288922", "body": "I have to get some practical sample code to see what was the issue with Size and Rect. Maybe decorating every method and property with `Contract.Ensures(!this.IsEmpty)` can fix this.\n\nFor Math.Abs I think it is the link between input and output, where it could not decide whether input was some infinity or not, so none of the existing ensures got active.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119288922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119448310", "body": "The main obstacle here is that Rect and Size are value types, so they can't have a parameterless constructor that could say `Contract.Ensures(!this.IsEmpty)`. If I use e.g. `new Rect(0,0,0,0)` things look better. \nSo to fix this we would need \n- a way to add contracts to the default constructor of value types\n- someone who checks every method that returns a Rect or a Size and adds the `Contract.Ensures(!Contract.Result<Rect/Size>().IsEmpty)` if applicable. (would be a good job for a trainee)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119448310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119467644", "body": "For our purpose it would be totally sufficient to look at `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server Local DB\\Installed Versions` to decide which name we can use. So we would not need that library at all.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119467644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119843208", "body": "@SergeyTeplyakov any idea when you will merge this? @sharwell has reviewed it and I don't see any more concerns.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119843208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119852754", "body": "If we have a solution for this we can fix/improve #86\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119852754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450354", "body": "I don't think this would make any difference, CC will only look at the contracts information and ignores any code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468546", "body": "Because there is no constraint that TDelegate is a class, so for the compiler it could be a value type, too - and you cant do value_type != null\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468792", "body": "Sorry, it's hard to keep the old formatting with 2 spaces indent where the default in VS is 4 spaces. Are there any coding guidelines for CC project?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468875", "body": "I'll add some comments in the code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468881", "body": "I'll add some comments in the code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26468881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26469416", "body": "Move has the same constraints as Remove and Insert, index must always be within bounds of the list.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26469416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26469559", "body": "CC requires this for all event handlers: \nIf I connect to an event and check e for null in the event handler, CC will complain that this is redundant.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26469559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26469925", "body": "Yes, you're right, thanks for reviewing this - ensures was meant to be added only for GroupDescriptions and SortDescriptions. I'll fix this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26469925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26501608", "body": "Most of the stuff is auto-generated, and it would generate a huge effort to change everything, with low benefit.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26501608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869521", "body": "It does not help the contracts, but to understand what's going on here any why the contract must be this way.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870512", "body": "I doubt the checker will be ever capable verifying this particular case, and with this check in place code is unmaintainable, due to false positives in every line and even `Contract.Assume` does not help in many situations.\n\nI will move this to a separate pull request and create an issue for that.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870915", "body": "Incorrect, many combinations of level and name are valid.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871894", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33872310", "body": "There is a tool \"CRASanitizer\" that does the verification. When we include the type for `SILVERLIGHT` the build fails.\nI just wanted to adopt the existing coding style - I agree things like this should be cleaned up everywhere.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33872310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33874517", "body": "For a `ContractClass` it's a bit different, it's clear that all methods are interface implementations. Here I changed to implicit methods because it removed unnecessary complexity from some of the contracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33874517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33874561", "body": "Yes, we should definitely come up with some rules and clean up all the code. Currently I just try to follow the pattern that I find in the current file.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33874561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33874729", "body": "Right, I've added this and 2 others.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33874729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875187", "body": "I think it was just to make clear that infinity is allowed here - but maybe also the static checker generated warnings.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875363", "body": "I just wanted to conform to the existing style :grin:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875517", "body": "Right, I've added this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875653", "body": "Yes, I'll add them later.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33875653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33887599", "body": "I have added the issue. \nHowever it would be much easier if the one that finds a bug directly creates the issue :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33887599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33868299", "body": "I fully agree, but here the exceptions may come from the DB providers and are neither documented nor consistent between DB providers - you can only get them by trial and error using all known providers, but then the code may break with any unknown provider.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33868299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34328658", "body": "This would work as well, but I found this would be too confusing - if it's commented, it's more clear that it is not active at all.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34328658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34329019", "body": "I think the checker had a problem to infer IsPositiveInfinity from x >= 0; if s.o. requires `x >= 0 && !IsInfinity(x)`, this could pass if we not explicitly include IsPositiveInfinity!\n\nI will add some test cases once I fully understood the CC regressing testing framework; once we have test cases, we can optimize this and maybe fix the checker to handle double/float more consistently.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34329019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34329021", "body": "s.a.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34329021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34329058", "body": "s.a.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34329058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414107", "body": "You could (it's public, and there is a constructor that takes the name), but I didn't want to change the calling code too much - now it's just the original code. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414171", "body": "No, I did not change the behavior of any client (except that it does no longer fail).\nThere has been always only one instance of `LocalDbClousotCacheFactory`, and now it will connect to the correct DB. \nWe don't need to be backward compatible, the file names are different for every version anyhow.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414231", "body": "That's why I did it like this - now the other client is no longer broken.\nCurrently the responsibility of the `LocalDbClousotCacheFactory` is to provide a connection to LocalDB - no matter what engine is installed.\nIf the client ever will need to take responsibility of the database, it can using the proper constructor.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414263", "body": "Be aware that here is only **one** local db factory and **one** sql db factory with the user configured connection string! \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414302", "body": "I see all you concerns, but they don't fit in the current strategy of the cache manager, and I would not like to rewrite the cache manager at this point, just fix the issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414528", "body": "The single responsibility of the `LocalDbClousotCacheFactory` is to provide the proper connection string with a valid db name - that's what it does and nothing else. To me that's clean enough.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36972609", "body": "It is like this everywhere else, I just wanted to comply to the existing pattern.\nWith this both ExtensionAttribute definitions look the same.\nIf we want to change this, we should do a bulk refactoring.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36972609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36971626", "body": "The other way is to fix thousands of formatting statements where the culture is missing. \n\nPros for this way of fixing (until all the code is culture-specific):\n- All the code has never been verified using another culture than US(~Invariant). \n- The only thing affected by this would be the UI - but the analyzer does not have one.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36971626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36972090", "body": "The tests are just calling the .exe - we would need another argument to pass the culture to the other process.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36972090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36972205", "body": "So the two lines header is the correct one?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36972205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37166270", "body": "These files should have been added as `<None>`, not as `<Compile>`. \nIt's only to have the test files part of the project.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37166270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ViIvanov": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/347", "title": "Update \"Code Contracts User Manual\"", "body": "Code Contracts User Manual (file from c:\\Program Files (x86)\\Microsoft\\Contracts\\Documentation\\ContractsManual.pdf ) does not updated since November 13, 2013\n\nI hope you already have added a few new things. Please, describe them.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hubuk": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/336", "title": "Duplicated contracts when ccrewrite is run with out-of-band contract assembly.", "body": "Example of this behavior can be observed in TestResults\\Out\\Deploy\\OutOfBand.dll assembly created when running tests from UnitTests project. Rewrite is taking place in Foxtrot\\Tests\\UnitTests\\RewrittenContractTest.cs on line `x = RunProcess(deploymentDir, foxtrotPath, \"/rewrite /assemblyMode=standard /rw:RewriterMethods.dll,TestRewriterMethods /nobox /throwonfailure /contracts:OutOfBand.Contracts.dll /autoRef:- OutOfBand.dll\");`\nOOB contracts (/contracts: parameter for ccrewrite.exe) seem not to be used in final product during build.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/319", "title": "Missing reference improvement for ccrewrite.", "body": "Leave this issue open until fixed.\nThis is a duplicate of closed issues: #261 #312\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/65", "title": "Build procedure shall be redefined.", "body": "Currently there are some areas in build procedure that are far from optimal. For example:\n- some configurations are not used anymore (academic, internal, release).\n- Editor Extension is excluded from command line build.\n- some parts of the buildMSI10.xml are not used.\n- build stages are blurred.\n\nWe should define a new build procedure. This may also require a changes in directory structure.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/65/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/20d802da3b8fe58c2eb4e5a82320ceee702e0717", "message": "Added support for array creation in contract methods in Roslyn generated code."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d6e47e68abd06342ca2eb78b643ab263d214778e", "message": "Added template parameters mapping to contracts and closures dupicator."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0338bab554bc5fcdf3981fd2174904147d2830e6", "message": "Do not run 'git update-index' outside git reprository."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1e93db60a46e3890ed41aa4a5083f7cb15d29413", "message": "Fixed invalid dash character in build script."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e45a918bec18270beb0b6ab4f2f116b4b8cc120b", "message": "Provided long term solution for broken build.\nAdded support for .Net reference assemblies located outside repository.\nChanged reference assemblies for .Net 4.6 to MSIL in order to get rid of compilation warnings."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9caa4470653f4c734c98807c96d47bf692bc9db5", "message": "Added support for farmework assemblies located in external location."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f0c4d1a6e3824abd7e91b4636a8ba1001164e7af", "message": "Fix broken build."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/47114c95915ff16244dfaf3256382dbd51ae629f", "message": "Added fix for issue #168."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7a018dea560a87d6a2390b647ac123da4d1499aa", "message": "Added test for issue #168."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/019c70a5b93f8b5a1d09ebfba3c3040e222de9cd", "message": "Added case for Roslyn optimized iterator in closure class finder."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/4d521638c1f5ee75e8eaa777dfbf2deaccbacfa2", "message": "Removed build ouptut from source control repository."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/c6a42e6c572816ce9b48e133d39c88c8ea7d71fe", "message": "Fixed missing parenthesis issue."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/79fb4b98619693030cc016c2f56c09d89ae758b0", "message": "Make use of Path.Combine."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/60908748b1e5582a1f917c52a71b689bcab89278", "message": "Changed Program Files path in CodeTools to a platform dependent.\nCodeToolsUpdate project was looking for MSBuild in a Program Files directory appropriate for its current architecture. MSBuild is located in X86 version of Program Files."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/67ed294c1f6842eb7d7fbb04d10d44b65d3bbd2f", "message": "Changed registry access to use 32 bit view. This change is required to show Code Contracts property page in Visual Studio after the project paltform was changed from x86 to Any CPU."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/be7bcb43ae448bb96affb68d76474ad9c616fe4b", "message": "Revert Visual Studio version changes from solution file."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/63dbcc45ad25c7b922789f4a9af6d256004bf8d3", "message": "Cleaned legacy source control and bootstrapper configuration."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9e47f3a700c2f77b58da49b6f90ce3b30cfbb98f", "message": "Fixed one test for .Net 3.5"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3a95da76839f97c662d8d59a1d6fcd95248b97de", "message": "Temporary workaround for use of ManagedContractsVSPropertyPane in CodeTools and main solution. Will be properly resolved on next iteration."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/183e1de18a7cd1f22a7a92c3d117c64aa23febb1", "message": "Fixed configuration for ManagedContractsVSPropertyPane project in main solution."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/aa49b42b696636199b284c6c4a62696cd4c2525f", "message": "Fixed project path in main solution."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/06ff49a408ec158a86f7110bb6dc24777aadb2b2", "message": "Fixed old references."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8e374ef98431aeac3e8db9aa8d704b9806a6acb6", "message": "-Removed unused configurations from CodeTools solution.\n-Rework after review.\n-Removed project files for earlier versions of VS."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0e86faa5a36c17734937f93cb53bc592edb483a0", "message": "Added supprot for default(T) expression used in contracts."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8062553453c18b7afde3875ae018992fe63fba6a", "message": "Created test for issue #29"}], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/356", "title": "Simplified projects and tests configuration.", "body": "This PR consist of the following tasks:\n- [x] Remove unused (other than Debug and Devlab9) configurations from projects in CodeContracts.sln.\n- [x] Rename Devlab9 configuration to Release (along with output directories).\n- [x] Remove old project versions (e.g. System.Compiler/System.Compiler9.csproj).\n- [x] Make tests work in both configurations.\n- [x] Remove Debug build from AppVeyor settings.\n- [ ] Get rid of irrelevant defines.\n- [ ] Refactor project files (e.g. remove click once stuff).\n\nIf you have some additional tasks that fit in scope of this PR, feel free to mention them in comments. I will try to include them.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98137960", "body": "Already recompiled Microsoft.Cci.PdbReader.dll with most recent changes from Codeplex. Commit is pending...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98137960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98604392", "body": "Looks good :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98604392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98605324", "body": "The error message with type resolving is probably related to Roslyn issue regarding compilation of VisualBasic projects with /nostdlib or /noconfig. I will check it later and raise an issue to Roslyn if confirmed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98605324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98837169", "body": "I am closing this one and recreate a pull request with new repository as some bad things happened.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98837169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/100027333", "body": ":+1:  Tested on Visual Studio Enterprise 2015 RC. Seems to be working. Great work!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/100027333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/101785422", "body": "Finally diagnosed what was causing errors about not being able to resolve a type. It was a wrong MyType for Microsoft.VisualBasic.Contracts project. Fixed in #43.\nDespite some warnings about metadata version compilation under VS2015 shall be working now (with #39 #40 and #43).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/101785422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/102661712", "body": "Should be fixed in PR #44.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/102661712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/102769311", "body": "I think you mean ccchecker not ccrewriter.\nCccheck is a static analyzer which report contract violations during build.\nIn that case you may select \"Fail build on warnings\" option in project properties on Code Contracts property page. If this option is grayed-out you need to disable \"Check in background\" option.\nIs this the option you are looking for?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/102769311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104452085", "body": "All the PRs are merged into my \"pulls\" branch: https://github.com/hubuk/CodeContracts/tree/pulls\nOnly my changes are merged into the \"latest\" branch.\nCurrently there is no activity on the rightfull Mirosoft/CodeContracts:master branch, but I would like to see it changes.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104452085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104579525", "body": "@danielcweber: +1 ahh, great point. ILMerge update will only resolve missing implementation problem, but each Roslyn related issue will remain.\n\n@damageboy: The problem mentioned by danielcweber is that we cannot use version of CC compiled by VS2013 to bootstrap compilation of CC in VS2015 because CC (even compiled by VS2013) is not able to correctly rewrite Roslyn assemblies. We need to add Roslyn support for CC first and then we will be able to prepare the whole project to be compilable in VS2015. But I really like the idea to use compiled version of CC in build process to bootstrap the compilation.\n\nI will take a look at roslyn related issues ASAP.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104579525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104793070", "body": "@DzonnyDZ: can you provide some minimal reproduction project? Type definitions for EntityDataAccessLayerPart, EntityDataAccessLayer<TDataContext,TItemBase,TSoftDelete> and EntityContextBase with all the relevant subtypes may also be sufficient.\n\nThe problem is not reproducible on CC taken from Microsoft:master branch at commit 658ad93f26cfd0bb34954e836328efd31aa18842.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104793070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104810426", "body": "default(T) (initobj) expression is causing the problem as it is interpreted as assignment:\n[CodeContracts/System.Compiler/Reader.cs:4619](https://github.com/Microsoft/CodeContracts/blob/master/System.Compiler/Reader.cs#L4619-L4623)\nProblem is reproducible even if the abbreviator is in the same assembly.\n\nPR pending.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104810426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105154200", "body": "Should be fixed in  PR #54 (Fixed usage of deafult(T) in contract abbreviators.)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105154200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105175331", "body": "Thanks, problem reproduced. I will try to investigate and fix it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105175331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105486140", "body": "Thanks, reproduction project is no longer needed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105486140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105625648", "body": "Should be fixed in #55.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105625648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105657264", "body": "For now I would prefer a minor change. But, could you explain in what scenario current target path is causing problems? Is this related to build server workspace? I just want to know the nature of the problem.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105657264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/106223121", "body": "This is by design. Additional source code file comes from a contract for INotifyChanged interface (NotifyChangedContract class) which is being injected into Desktop assembly by ccrewrite.\nThis allows you for example to step into the contract defined for an interface method from the implementing type during debugging.\nYou can specify symbol package source files manually or submit a feature request to nuget project to make nuget read pdb files for list of source files needed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/106223121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/110504571", "body": "This is a list of the missing content i have found so far. \nSome of them may be a residues of a legacy code or an incorrect entries in .gitignore file (i.e. CodeContracts\\Microsoft.Research\\common\\bin).\n\n**Directories:**\nCodeContracts\\Decompiler\nCodeContracts\\Foxtrot\\Contracts\\v3.0\nCodeContracts\\Foxtrot\\Contracts\\v3.5\nCodeContracts\\Microsoft.Research\\common\\bin\nCodeContracts\\Microsoft.Research\\ContractReference\nCodeContracts\\Microsoft.Research\\Microsoft.Revisions\nCodeContracts\\System.Compiler.Runtime\n**CodeContracts\\Microsoft.Research\\ImportedCPXTools**\n\n**Files:**\nCodeContracts\\Foxtrot\\Tests\\RewriteExistingBinaries\\RewriteExistingBinaries.csproj\nCodeContracts\\Foxtrot\\Contracts\\Contract.csproj\n\n**Files that were probably renamed and should not be considered as missing:**\nCodeContracts\\Microsoft.Research\\AbstractInterpretation\\Abstract Domains\\Abstract Domains10.csproj\nCodeContracts\\Microsoft.Research\\Analyzers\\Analyzers10.csproj\nCodeContracts\\Microsoft.Research\\ClousotMain\\ClousotMain10.csproj\nCodeContracts\\Microsoft.Research\\CodeAnalysis\\CodeAnalysis10.csproj\nCodeContracts\\Microsoft.Research\\CodeProviders\\CCI2\\CCI2.CodeProvider10.csproj\nCodeContracts\\Microsoft.Research\\Contracts\\CRASanitizer\\CRASanitizer10.csproj\nCodeContracts\\Microsoft.Research\\Contracts\\MsCorlib\\MsCorlib.Contracts.csproj\nCodeContracts\\Microsoft.Research\\Contracts\\System\\System.Contracts.csproj\nCodeContracts\\Microsoft.Research\\ControlFlow\\ControlFlow10.csproj\nCodeContracts\\Microsoft.Research\\DataStructures\\DataStructures10.csproj\nCodeContracts\\Microsoft.Research\\Graphs\\Graphs10.csproj\nCodeContracts\\Microsoft.Research\\VSAdornments\\Adornments.csproj\nCodeContracts\\Microsoft.VisualStudio.CodeTools\\IPropertyPane\\IPropertyPane7.csproj\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/110504571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111683751", "body": "There were some work done by the community:\nPoint 1. is partially addressed by #52.\nPoint 2. is resolved by #36.\nMissing repository content for point 3 is listed in #6.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111683751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111812985", "body": "There are some problems in the nuget update functionality so updating ILMerge.exe via NuGet is currently somehow problematic:\nhttps://github.com/NuGet/Home/issues/783\n\nFor now I will just update imported ILMerge.exe file to the latest one.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111812985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111825689", "body": "That is a nice workaround. I like it. But I would wait for NuGet team to assess the submitted issue. Eventually it may not be considered as a bug.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111825689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111877025", "body": "I will cancel my PR.\nI am really starting to consider updating ILMerge to a latest version during build as a wrong way to go. Shouldn't it be a conscious decision to start using a new version?\nWe can just stay with using nuget to download a specific version of ILMerge. This scenario is fully supported by the current version (2.X) of nuget.\n\nAnd just one question: is there anything else besides keeping repository light that discourages committing binary files?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111877025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111879370", "body": "**Tools for which source code may be needed:**\nCodeContracts\\Microsoft.Research\\ManagedContract.Setup\\NugetBinaries\\ExplodeMsi.exe\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111879370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111880443", "body": "After this one I have no doubts. Thanks. I will prepare a new PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111880443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111942911", "body": "Source code for CCI is located on [CodePlex](https://ccimetadata.codeplex.com/)\nNuGet packages for CCI are outdated. I'll ask someone from project members to make a new release.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111942911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112198655", "body": "Reopened pull request #60.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112198655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112204600", "body": "To be closed/modified. Will check if XmlPoke task can be used instead of an executable file.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112204600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112205994", "body": "I will do a rework and propose a complete solution.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112205994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112214124", "body": "@sharwell Your approach seams to be nice and clean. I suspected that there are no differences between these projects other than referenced assemblies. This can be handled out of the box thanks to version redirections in devenv.exe.config (except laguage services as you mentioned). I don't know if Adornments\\* and ContractAdornments\\* projects are using all the declared references but the list is quite big. It is also worth mentioning that following assemblies are missing from the repsository:\nMicrosoft.VisualStudio.CoreUtility.dll\nMicrosoft.VisualStudio.Editor.dll\nMicrosoft.VisualStudio.Language.StandardClassification.dll\nMicrosoft.VisualStudio.Text.Data.dll\nMicrosoft.VisualStudio.Text.Logic.dll\nMicrosoft.VisualStudio.Text.UI.dll\nMicrosoft.VisualStudio.Text.UI.Wpf.dll\n\nIt would be best to have Visual Studio extension libraries accessible via NuGet but unfortunately Microsoft has not published them for dev10.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112214124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112309532", "body": "The change should be simple and will reduce duplicated content to maintain. I think that creating additional issue is an unnecessary overhead.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112309532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112934751", "body": "Should fix issue #34.\n\nMain weaknesses in original approach but not addressed in this PR are:\n1. Version numbers are modified in place. There is no copy-to-temporary-location-and-change approach. This issue should be addressed in #65.\n2. Number of vsixmanifest files should be reduced to one in most optimistic scenario. Probably will be covered in a solution for #17 or #65.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112934751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112940525", "body": "I can surely wait. What would be the best way to do that? Closing this PR for now and reopen it in slightly modified form after your changes?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112940525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112947826", "body": "Great. I am freezing it for now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112947826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113213353", "body": "Yup, closing it now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113213353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114065417", "body": "@sharwell I will be reviewing all your changes, but it may take a wile. I will comment any questions here and mark a changsets as reviewed by submitting +1 on each individually. Do you think that this will help to organize review better?\nAnd regarding a merge. I think that your PR may goes first. I will prepare ~~installer~~ project version changes by tomorrow (offline). Will be ready to submit a PR after your code is merged.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114065417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114111409", "body": "@billings7 No, my changes contain a new version update mechanism in buildMSI10.xml only.\nRegarding #36:\nThe change you introduced worked fine. Unfortunately now it is marked as conflicting and I think it requires some more changes. In addition it would be better not to commit CodeTools binaries into git but build them and use compiled image instead. If you can take a look into this it would be great. If no, I can recreate your changes and align them in a new PR when I finish my current work.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114111409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114262885", "body": "I have proposed [labels for NuGet](https://github.com/NuGet/Home/labels) as a starting point because they appear to be self explanatory. Assigned colors make them easy to read and understand what set of labels are possible on single issue. Having some explanation in project wiki or other document is also a good thing. So to utilize both ideas I come with the following proposition (source markdown available on my [Wiki](https://github.com/hubuk/CodeContracts/wiki/Labels)):\n\n## Labels\n\nThis project uses many labels for categorizing issues and pull requests. Labels are grouped according to their category:\n\n| Label | Meaning |\n| --- | --- |\n| 0 - Backlog | Issue not in the scope of the current milestone. |\n| 0 - Blocked | Issue blocked by some external or internal dependencies. |\n| 1 - Ready | Issue is ready to be fixed. |\n| 2 - Working | Someone is currently working on the issue. |\n| 3 - Done | Issue already addressed and a solution has been proposed. |\n| Area: ccrewrite | Issue related to Code Contracts rewriter. |\n| Area: cccheck | Issue related to Code Contracts static analyzer. |\n| Area: ccdocgen | Issue related to contracts documentation generator. |\n| Area: ccrefgen | Issue related to contract reference assemblies generator. |\n| Area: contract | Issue related to contracts for .Net Framework assemblies. |\n| Area: installer | Issue related to Code Contracts installer. |\n| Area: editor extension | Issue related to Code Contracts Editor Extension. |\n| Area: property page | Issue related to Visual Studio property pages for Code Contracts. |\n| Area: documentation | Issue related to product documentation. |\n| ClosedAs: ByDesign | The current behavior is by design and will not be changed. |\n| ClosedAs: Duplicate | Another issue contains a description of the same problem. |\n| ClosedAs: Invalid | The issue concerns a documented and correct behavior. |\n| ClosedAs: Question | The issue is a question for which an answer has been provided. |\n| ClosedAs: Fixed | The issue has been resolved. |\n| Type: Bug | The issue concerns a bug in the code. |\n| Type: Enhancement | The issue concerns an improvement to an existing functionality. |\n| Type: Feature | The issue concerns a completely new functionality to be implemented. |\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114262885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/31076922", "body": "According to issue #30 this line should point to v14.0 of the targets folder.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/31076922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32394252", "body": "This whole file needs a reformatting as it uses two space indentation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32394252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32494501", "body": "Can you provide some info about what problems it can cause?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32494501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32536959", "body": "It may be an issue if downloaded package is suppose to modify MSBuild script structure as MSBuild does not allow to mutate already loaded project ([source](https://docs.nuget.org/consume/package-restore/team-build#the-general-approach)). This is not a case in our scenario.\n\nFunctionality you are referring to is called Command-Line Package Restore. Automatic Package Restore is being used by Visual Studio. In addition an approach that is no longer promoted by NuGet team is called MSBuild-Integrated Package Restore. This is the one used to download Enterprise Library package in Code Contracts solution.\n\nAlong with moving `nuget restore` to a bat file it would be required to handle nuget errors. With current approach MSBuild is taking care of that.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32536959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32546498", "body": "If you are going to build VSIX projects using <MsBuild/> task from within buildMSI10.xml or any other project file you do not need to run nuget from bat file. You can just use <Exec/> taks before <MSBuild/>. In that way any modification introduced by nuget packages will be processed by MsBuild after <Exec/>(nuget restore) finish.\nMaybe we should talk about how the build process should be organized? Currently Editor Extension is not being built with Code Contracts. It would be best to have them build together. If we choose to use command line as a glue for them we should also consider Power Shell.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32546498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32559887", "body": "OK, I think I understand our different point of view:\n\nCurrent CC build script is similar to the one presented in my [link](https://docs.nuget.org/consume/package-restore/team-build#the-general-approach). In both cases MsBuild is executed twice:\n- First one on `build.proj` in example and `buildMSI10.xml` in CC.\n- The second one on `BingSearcher.sln` in example and `CodeContracts.sln` in CC.\n\nThis first msbuild run acts like a bat file from your point of view. In both cases nuget is being called before second msbuild run. This is a solution proposed in the NuGet link I provided. And it is stated that this solution differs from a legacy one (the one which uses Nuget.targets) in which:\n\"The previous implementation had a chicken-and-egg problem for packages that want to extend the build process because NuGet restored packages while building the project\"\nThe presented solution does not have this kind of problems because MsBuild for which the packages were downloaded has not been run yet.\n\nSo behavior described in your point 1. is exactly the same for my approach.\nAll the arguments from point 2 can also be applied to all the logic contained in buildMSI10.xml.\nI admit, current project file is quite complex and hard to maintain. We should rethink how the build process should be defined. Then I can agree to move _all the logic_ from `buildMSI10.xml` to sh1 script. Bat file may be too clumsy.\n\nMoving only `nuget.exe restore` call to a bat file complicates things. Current approach centralizes all the build activities keeping them in one file. When you move nuget.exe call to a bat file moving another activity from an xml to bat before nuget may not be so simple (depends on complexity of the activity to be moved).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32559887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40703481", "body": "This changes the current behavior which is <PlatformToolset>v110</PlatformToolset>\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40703481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42592405", "body": "You are right. I was trying to leave sln file headers unchanged but failed this time. Good catch.\nThere are some problems with VS2015 build which I am going to address at later time.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42592405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/43098181", "body": "Current code checks declaringType.BaseType twice on recurrence.\nLoop version should be simpler:\n\n``` C#\nprivate static bool IsAttribute(TypeNode declaringType)\n{\n    TypeNode currentType = declaringType;\n    while (currentType != null)\n    {\n        if (currentType == systemAttributeType.Value)\n        {\n            return true;\n        }\n\n        currentType = declaringType.BaseType;\n    }\n\n    return false;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/43098181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/43112614", "body": "You are right, thanks. Otherwise it might be less efficient than recursive version...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/43112614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/46385036", "body": "I haven't spotted this before. [Version.MajorRevision](https://msdn.microsoft.com/en-us/library/system.version.majorrevision%28v=vs.110%29.aspx) is of short type.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/46385036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/46385090", "body": "Same for [Version.MinorRevision](https://msdn.microsoft.com/en-us/library/system.version.minorrevision%28v=vs.110%29.aspx).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/46385090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "koukoumidis": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/334", "title": "CodeContracts not working for interfaces when assembly ends in \".Contracts\"", "body": "The code contracts for the interface were defined in a referenced assembly that ends in \".Contracts\".  The referencing assembly that was using objects of a concrete class that implements this interface would not perform any run time code contract checks.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CreepyGnome": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/330", "title": "Errors at compile when Perform Runtime Contract Checking enabled", "body": "When I have \"Perform Runtime Contract Checking\" enabled to anything other than \"None\" I get the below errors:\n\n| Severity | Code | Description | Suppression State |\n| --- | --- | --- | --- |\n| Error | CA0001 | CA0001 : Member 'GetConstructor' could not be found in type 'System.Type' in assembly 'Fay.Core, Version=1.0.0.0, Culture=neutral'. | Active |\n| Error | CA0001 | CA0001 : An error was encountered while parsing IL for method: 'System.Diagnostics.Contracts.__ContractsRuntime.Requires(System.Boolean,System.String,System.String)', instruction at offset '0x58' with opcode 'Call'. | Active |\n\n![image](https://cloud.githubusercontent.com/assets/935891/12227788/34d28a62-b7ef-11e5-8641-fb8227345f23.png)\n\nI played with other settings and seems to only be caused by that checkbox being enabled and set to anything other than none.\n### My Environment\n- Visual Studio 2015 Enterprise w/ Update 1 \n- Code Contracts Editor Extensions 1.9.10714.2\n- Code Contracts Tools 1.9.10714.2\n- Microsoft Code Contracts (devlabs_TS) 1.9.10714.2 for .NET\n\nAlso I have nothing fancy on the Contracts in the project getting these errors. Nothing more complex than the following examples:\n\n``` cs\nContract.Requires<ArgumentNullException>(value != null);\nContract.Ensures(Contract.Result<string>() != null);\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HermanEldering": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/327", "title": "ArgumentNullException in ccchecker", "body": "Using 1.9.10714.2 in VS2015-U1. Unfortunately, I cannot share the code to reproduce this error. With cache enabled I get the exception below, when I disable the cache the exception goes away.\n\n```\nInternal error at method Method 188 :  <removed>\nFailed with uncaught exception: Value cannot be null.\n\\nParameter name: key\nStack trace:    at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\n\\n at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key\\, TValue& value)\n\\n at Microsoft.Research.CodeAnalysis.CacheManager`11.GetOrCreateReferencedTypeLocalId(Type typ)\n\\n at Microsoft.Research.CodeAnalysis.MethodHasher`12.ILHasher.EndOld(APC pc\\, APC matchingBegin\\, Type type\\, Int32 dest\\, Int32 source\\, Unit data)\n\\n at Microsoft.Research.CodeAnalysis.StackDepthProvider`10.StackDecoder`3.EndOld(APC pc\\, APC matchingBegin\\, Type type\\, Unit dest\\, Unit source\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.APCDecoder`9.RemoveBranchDelegator`3.EndOld(APC pc\\, APC matchingBegin\\, Type type\\, Unit dest\\, Unit source\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodCache`9.BlockWithLabels`1.LabelAdapter`3.EndOld(Label pc\\, Label matchingBegin\\, Type type\\, Unit dest\\, Unit source\\, Data data)\n\\n at System.Compiler.Analysis.CCIILProvider.Decode[Visitor\\, Data\\, Result](PC pc\\, Visitor visit\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodCache`9.BlockWithLabels`1.ForwardDecode[Data\\, Result\\, Visitor](APC pc\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodCache`9.ForwardDecode[Data\\, Result\\, Visitor](APC pc\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.APCDecoder`9.ForwardDecode[Data\\, Result\\, Visitor](APC pc\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.StackDepthProvider`10.ForwardDecode[Data\\, Result\\, Visitor](APC lab\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodHasher`12.HashSubroutine(Subroutine subroutine)\n\\n at Microsoft.Research.CodeAnalysis.MethodHasher`12.HashSubroutine(Subroutine subroutine)\n\\n at Microsoft.Research.CodeAnalysis.MethodHasher`12.HashSubroutine(Subroutine subroutine)\n\\n at Microsoft.Research.CodeAnalysis.MethodHasher`12.GetHash(Byte[] AdditionalOptionsToHash)\n\\n at Microsoft.Research.CodeAnalysis.CacheManager`11.ComputeMethodHash(IMethodDriver`12 mDriver\\, Boolean trace)\n\\n at Microsoft.Research.CodeAnalysis.CacheManager`11.StartMethod(IMethodDriver`12 mDriver\\, IClassDriver`13 cDriver\\, FieldsDB`9 fieldsDB\\, Boolean trace)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethodInternal2(Method method\\, MethodAnalysisFlags analysisFlags\\, IClassDriver`13& cdriver\\, AnalysisStatistics& methodStats\\, APC& entryPC)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethodInternal(Method method\\, MethodAnalysisFlags analysisFlags)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethod(Method method)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.DoWork(Int32 totalMethods\\, Int32& progressChars\\, Stopwatch assemblyStopWatch\\, Method method)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethodsInAssembly(Int32 totalMethods\\, Int32 progressChars\\, Stopwatch stopWatch)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeAssemblyInternal(Int32 totalMethods\\, Int32 progressChars\\, Stopwatch stopWatch)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeAssembly(Assembly assembly\\, Set`1 assembliesUnderAnalysis)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.InternalAnalyze()\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.Analyze()\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/326", "title": "NullReferenceException in Clousot/cccheck", "body": "Using 1.9.10714.2 in VS2015-U1. Unfortunately, I cannot share the code to reproduce this error. I got this exception when I had the cache turned off, but I don't know if that matters/is important.\n\n```\nInternal error in Clousot/cccheck --- catching it, and continuing\n\\nException Type:System.NullReferenceException\n\\nMessage:Object reference not set to an instance of an object.\\, Stack TraceSystem.NullReferenceException: Object reference not set to an instance of an object.\n\\n at System.Compiler.Analysis.CCIMDDecoder.IsStruct(TypeNode type)\n\\n at Microsoft.Research.CodeAnalysis.Extensions.HasValueRepresentation[Local\\, Parameter\\, Method\\, Field\\, Property\\, Event\\, Type\\, Attribute\\, Assembly](IDecodeMetaData`9 mdDecoder\\, Type type)\n\\n at Microsoft.Research.CodeAnalysis.OptimisticHeapAnalyzer`9.Domain.IsStructWithFields(FlatDomain`1 valueType)\n\\n at Microsoft.Research.CodeAnalysis.OptimisticHeapAnalyzer`9.Domain.CopyOld(Int32 dest\\, Int32 source\\, Type type)\n\\n at Microsoft.Research.CodeAnalysis.OptimisticHeapAnalyzer`9.Domain.AnalysisDecoder.EndOld(APC pc\\, APC matchingBegin\\, Type type\\, Int32 dest\\, Int32 source\\, Domain data)\n\\n at Microsoft.Research.CodeAnalysis.StackDepthProvider`10.StackDecoder`3.EndOld(APC pc\\, APC matchingBegin\\, Type type\\, Unit dest\\, Unit source\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.APCDecoder`9.RemoveBranchDelegator`3.EndOld(APC pc\\, APC matchingBegin\\, Type type\\, Unit dest\\, Unit source\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodCache`9.BlockWithLabels`1.LabelAdapter`3.EndOld(Label pc\\, Label matchingBegin\\, Type type\\, Unit dest\\, Unit source\\, Data data)\n\\n at System.Compiler.Analysis.CCIILProvider.Decode[Visitor\\, Data\\, Result](PC pc\\, Visitor visit\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodCache`9.BlockWithLabels`1.ForwardDecode[Data\\, Result\\, Visitor](APC pc\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.MethodCache`9.ForwardDecode[Data\\, Result\\, Visitor](APC pc\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.APCDecoder`9.ForwardDecode[Data\\, Result\\, Visitor](APC pc\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.StackDepthProvider`10.ForwardDecode[Data\\, Result\\, Visitor](APC lab\\, Visitor visitor\\, Data data)\n\\n at Microsoft.Research.CodeAnalysis.ForwardAnalysisSolver`3.<>c__DisplayClass3`7.<Make>b__0(APC pc\\, AState state)\n\\n at Microsoft.Research.CodeAnalysis.ForwardAnalysisSolver`3.Transfer(APC pc\\, AState state)\n\\n at Microsoft.Research.CodeAnalysis.DFARoot`2.ComputeFixpoint()\n\\n at Microsoft.Research.CodeAnalysis.ForwardDFA`2.Run(AState startState)\n\\n at Microsoft.Research.CodeAnalysis.CodeLayer`13.<>c__DisplayClass1`1.<CreateForward>b__0(AnalysisState initialState)\n\\n at Microsoft.Research.CodeAnalysis.OldAnalysisDriver`11.MDriver.RunHeapAndExpressionAnalyses()\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.MethodAnalysisNonCached(Method method\\, MethodAnalysisFlags& analysisFlags\\, Int32& phasecount\\, String methodFullName\\, IClassDriver`13 cdriver\\, IMethodDriver`12 mdriver\\, AnalysisStatistics& methodStats\\, ContractDensity& methodContractDensity)\n\\n at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethodInternal2(Method method\\, MethodAnalysisFlags analysisFlags\\, IClassDriver`13& cdriver\\, AnalysisStatistics& methodStats\\, APC& entryPC)\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TsengSR": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/323", "title": "Add support for Class Library (package) projects", "body": "I am using Visual Studio 2015 using the \"Class Library (package)\" project template for my business/domain layer and I wanted to include Code Contracts to my project. \n\nI installed the package from the visual studio gallery, but the \"Code Contract\" tab is missing from the project properties. \n\nWhen I create a regular \"Class Library\", it's there. Can we have support for \"Class Library (package)\" projects? For several reasons, \"Portable Class Library\" is not an option \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/323/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndreyKarpov": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/322", "title": "Analysis of Microsoft Code Contracts by PVS-Studio", "body": "In this article, we are talking about the analysis of Code Contracts project by Microsoft done by PVS-Studio C# analyzer: http://www.viva64.com/en/b/0361/\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TorreyGarland": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/311", "title": "Rewrite Errors for UWP project/Build Failing", "body": "I am getting numerous errors when attempting to build a UWP project with Code Contracts enabled.\n\n```\nvar rectangleGeometry = new RectangleGeometry\n{\n    Rect = new Rect()\n};\n```\n\n**1>    Could not resolve member reference: Windows.UI.Xaml.Media.RectangleGeometry::put_Rect.\n1>ccrewrite : error : Rewrite aborted due to metadata errors. Check output window\n1>  elapsed time: 3678.5006ms\n1>C:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild\\v14.0\\Microsoft.CodeContracts.targets(265,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@Highway1.Universalccrewrite.rsp\"\" exited with code -1.\n1>\n1>Build FAILED.**\n\nThere are no contracts on the method that is trying to set a new Rect object for an instance of RectangleGeometry.  The project is configured for \"Standard Contract Requires\" only.\n\nThis is also occurring when trying to access the \"Window.Current.Bounds\" property and the \"ManipulationDeltaRoutedEventArgs.Delta.Translation\" property.\n\nThis has been reported of MSDN forums for code contracts by someone else with a very similar issue (https://social.msdn.microsoft.com/Forums/en-US/060ddae1-5bfb-4ea4-8748-a4bcf4fbc5db/ccrewrite-error-could-not-resolve-member-reference?forum=codecontracts).\n\nIs there something that I am missing?  Is there any workaround for this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/311/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ruxo": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/310", "title": "Method call is removed (by the writer?) when use any runtime checking that is not Full and compiled in Release config.", "body": "### Issue\n\nCompile following program in _Release_ mode with Code Contracts setting with only _Perform Runtime Contract Checking_ in `Preconditions` (or any mode which is not `Full`).  The result code will not call `Something()` method.\n\n``` C#\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace TestCs {\n    class Program {\n        static void Main(string[] args){\n            var result = Something();\n            Contract.Assert(result > 0);\n        }\n        static int Something(){\n            Console.WriteLine(\"Run me!\");\n            return 1;\n        }\n    }\n}\n```\n\n---\n### Run Environment\n- Visual Studio 2015\n- Code Contracts for .NET 1.9.10714.2\n- Windows 10\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SergeyTeplyakov": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/297", "title": "Code Contracts v.1.10", "body": "Hello Everyone,\n\nI think it's time to release new version of this tool. We've made a lots of changes that would be very useful for customers.\n\nThere is a tons of existing issues. Many of them are fixed but appropriate PR's are not merged yet (I'm working on it right now). Some issues are related to static checker and I don't know when they would be addressed. And there are few issues that I would like to fix before this upcoming release (for instnace, #242).\n\nHere I would like to discuss and prioritize existing issues that needs to be fixed before releasing new version to public audience. If yout think that some of them are critical, feel free to put a comment here.\n\nFeedback is higly wellcome and appreciated!\n\nP.S. We've made a great job fixing tons of issues, I highly appreciated all the effort that we've made so far!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/288", "title": "Automate the build process", "body": "We need an automated process that will help us to catch potential build errors that could happen during the merge.\n\nI know that @sharwell already made some process with AppVeyor... But we need to finish this process.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/187", "title": "Add an ability to specify recursionGuard in the CodeContracts project configuration", "body": "/recursionGuard configuration adds reasonable overhead for generated code. An ability to turn it off would be very helpful.\n\nIn our current codebase disabling recursionGuards significantly (around 10%) improved the performance.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/184", "title": "Run existing cccheck tests with Roslyn-based compiler", "body": "Currently only VS2013 compiler is used for all cccheck tests. This could be an issue because we don't know whether Roslyn-based compiler is working, or is there any regressions.\n\nThis task was inspired by the PR #182 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/111", "title": "Incorrect postconditions for non-result ensures in async methods", "body": "Consider following code:\n\n``` c#\nprivate static bool ShouldBeTrue;\npublic async static Task<string> FooAsync()\n{\n    Contract.Ensures(Contract.Result<string>() != null);\n    Contract.Ensures(ShouldBeTrue);\n\n    ShouldBeTrue = false;\n\n    await Task.Delay(42);\n\n    ShouldBeTrue = true;\n\n    return null;\n}\n```\n\nFor this code ccrewrite will generate following (UPDATED):\n\n``` c#\n                [CompilerGenerated]\n        private class <FooAsync>AsyncContractClosure_0\n        {\n            public string CheckPost(Task<string> task)\n            {\n                string result = task.Result;\n                if (__ContractsRuntime.insideContractEvaluation <= 4)\n                {\n                    try\n                    {\n                        __ContractsRuntime.insideContractEvaluation++;\n                        __ContractsRuntime.Ensures(task.Result != null, null, \"Contract.Result<string>() != null\");\n                    }\n                    finally\n                    {\n                        __ContractsRuntime.insideContractEvaluation--;\n                    }\n                }\n                return result;\n            }\n        }\n\n        private static bool ShouldBeTrue;\n        [DebuggerStepThrough, AsyncStateMachine(typeof(Program.<FooAsync>d__0))]\n        public static Task<string> FooAsync()\n        {\n            Program.<FooAsync>AsyncContractClosure_0 @object = new Program.<FooAsync>AsyncContractClosure_0();\n            Program.<FooAsync>d__0 <FooAsync>d__;\n            <FooAsync>d__.<>t__builder = AsyncTaskMethodBuilder<string>.Create();\n            <FooAsync>d__.<>1__state = -1;\n            AsyncTaskMethodBuilder<string> <>t__builder = <FooAsync>d__.<>t__builder;\n            <>t__builder.Start<Program.<FooAsync>d__0>(ref <FooAsync>d__);\n            Task<string> task = <FooAsync>d__.<>t__builder.Task;\n            Task<string> task2 = task;\n            __ContractsRuntime.Ensures(Program.ShouldBeTrue, null, \"ShouldBeTrue\");\n            Func<Task<string>, string> continuationFunction = new Func<Task<string>, string>(@object.CheckPost);\n            return task2.ContinueWith<string>(continuationFunction);\n        }\n```\n\nI.e. `Contract.Ensures(Contract.Result<string>() != null);` is checked asynchronously via home-backed closure (in the method `@object.CheckPost`), but `Contract.Ensures(ShouldBeTrue);` is checked synchronously.\n\nThis code is not correct and both postconditions should be checked in the task continuation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/63", "title": "Format source code", "body": "We need to do this. Current code is not formatted very well...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/62", "title": "Pull requests policies", "body": "Hello everyone.\n\n@mike-barnett added me as an owner to this repo and I'm going to start working on pull requests and other stuff. \n\nMy team in Microsoft is using Code Contracts library super extensively and I'm going to work on this stuff in near future to get them working with VS14, fix some other bugs, review and merge pull requests etc.\n\nI would like to be as useful as possible and I need some help from you guys. Can you help me to prioritize and review existing pull requests? I would like to see some comments here with a list of most critical pull requests that's are ready to merge and at least one \"Reviewed, looks good for me\" for each pull requests. (I'll review them myself and for all critical ones I would get Mike's feedback as well).\n\nI'm a big fan of Code Contracts and I personally don't want them to die. So I would do my best to keep the source up-to-date and merge pull requests as soon as I can.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/62/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/41", "title": "CCRewriter removes Assert/Assume calls but not precondition checks from iterator blocks/async methods", "body": "I assume (pun intended) that this bug is related to #34.\n\nConsider following code:\n\n``` c#\nstatic bool Check()\n{\n    Console.WriteLine(\"Check!\");\n    return true;\n}\n\nprivate static IEnumerable<string> FooAsync1(string str)\n{\n    Contract.Assert(Check() && str != null );\n    yield return str;\n}\n```\n\nRewriting this code with level < 4 (i.e. not in a Full mode) should remove `Assert` method call from the iterator block.\n\nBut in reality, ccrewriter removes anly method call itself, but leaves precondition check in the final IL code.\n\nRunning this code with Preconditions only, will print \"Check\" message on the screen.\n\nThe same behavior would be for async methods as well.\n\nUPDATE: minor correction.\nTo reproduce this issue complexity of the expression matters but not where it was called (iterator block/async method/regular method):\n\n``` c#\nprivate static void Foo(string str)\n{\n    // Check method would be called\n    Contract.Assert(Check() && str != null);\n    Console.WriteLine(\"Boo\");\n}\n\nprivate static void Foo2(string str)\n{\n    // Call to Check method would be erased\n    Contract.Assert(Check());\n    Console.WriteLine(\"Boo\");\n}\n```\n\nWith Preconditions only in `Foo` method Check`method would be called but in`Foo2` method - not.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/41/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7255a95ec1de1453518852030de285d0fa001c11", "message": "Merge pull request #482 from WiseTechGlobal/wtg/pr/vs2017\n\nAdd MSBuild targets for VS2017"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a7df47aaf1b6570abc07191a32a0afa29f9838e8", "message": "Merge pull request #459 from WiseTechGlobal/wtg/pr/rsp-generation\n\nAdd flag to generate cccheck RSP at build time"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1803c2a95f3472bd05f856957fa2f7bda920fd9e", "message": "Merge pull request #464 from kkm000/patch-1\n\nSupport SQL Local DB 2016"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/84bbcb14a299d5ff830671bb7c634baa56893a6a", "message": "Merge pull request #470 from tom-englert/SyncR#\n\nAdd missing contracts found when aligning CC with R#"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9cf9f5489d2cb6e58ce1352ddd77e0e973361701", "message": "Merge pull request #457 from vanillajonathan/patch-1\n\nFixed capitalization in parameter"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a6f1d39405ad8be218c56388732f364384ce5a75", "message": "Merge pull request #452 from mnkraus/FixAssemblyRefs\n\nForced AssemblyRef flags to be ECMA compatible when writing output"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/01e007bc7b2fbd11eb1418ed10d1e0d595195046", "message": "Merge pull request #393 from jeroen-mostert/master\n\nAdd preconditions to System.Text.Encoding"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e733b0ae86a478e8fd9b726a79e7400e47c545de", "message": "Merge pull request #446 from tom-englert/Issue340\n\nAdd a test case and revert changes in reader as it breaks the tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/67b57824a3a666e38a10b508042ef070eff631c4", "message": "Merge pull request #445 from tom-englert/Issue340\n\nAdditional fix for #340"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/bf32538c8be7ad22aee546b8762252abb92b97a2", "message": "Merge pull request #426 from WiseTechGlobal/wtg/wip/WI00119105\n\nFixes for various issues"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/88a752b97e625728447a7a241f14c8cd1d91d09e", "message": "Merge pull request #413 from DanAtkinson/patch-1\n\nComment modification for language code"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/75b1c47c4d021faf9efcce7246c4184dbb7b0945", "message": "Merge pull request #390 from hubuk/issue221\n\nAdded support for array creation in contract methods in Roslyn generated code."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/4342722c09e68c9f656f09047372397a1dc89dd6", "message": "Merge pull request #371 from tom-englert/Issue366\n\nAdd null check to avoid crash when parsing Roslyn generated code."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b2187c454b4a2a9c5d078887e4470566c4a029e9", "message": "Merge pull request #359 from yaakov-h/pr/fix-framework-targetting\n\nUse .NET 4.6 reference assemblies for 4.6.1"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dd2be7a8429a6b6f9e70909b533a24bbf3e6cb4e", "message": "Merge pull request #400 from davidhesselbom/did-you-meant-fix\n\nReplaced \"did you meant\" with \"did you mean\"."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/54098c51813c76c7203c4373f33208dd32ad0742", "message": "Merge pull request #410 from mike-barnett/master\n\nFor 64-bit assemblies, preserve the imagebase value when rewriting."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/79a04c96679b6d400c286dd62d6a2ec77462da72", "message": "Merge pull request #398 from davidhesselbom/undestand-typo\n\nFixed typo: undestand -> understand"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/be44ab3fd06f72cd2a13833842f20e2a6ac0f48f", "message": "Merge pull request #399 from davidhesselbom/README-tools-list-fix\n\nImproved formatting of \"provided tools\" list in README."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/af1f5d892c30cb5185c9f76edd5d5ef70ec76c46", "message": "Merge pull request #383 from hubuk/issue380\n\nAdded template parameters mapping to contracts and closures duplicator."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9a207ef58ee457e25a2af71913fb943262e6c847", "message": "Merge pull request #376 from hubuk/issue375\n\nFixed invalid dash character in build script."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e0a9c32741ba0aa47d57bb5cc22836fcf5105105", "message": "Merge pull request #372 from SergeyTeplyakov/bugs/bug365\n\nFix for #365"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/53d2ea74976ad8725f365d947ed30ab5098bf395", "message": "Merge pull request #358 from yaakov-h/pr/348-decl-out-path\n\nOutput declarative assemblies to output directory"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/4c215e2d3dfec34c6bb5a7f41428bf902fbbe663", "message": "Merge pull request #341 from SergeyTeplyakov/bugs/bug340\n\nFix for #340."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/765a85d10edb1d479315b7eae6131d86f8d0d969", "message": "Removed unused field"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/c3576bd2c688658270426c421324f4436d8f4ba0", "message": "Merge pull request #370 from SergeyTeplyakov/feature/enableFoxtrotTests\n\nEnable foxtrot tests"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b8bba943c668dfcfd957eb244e6533dbe8913b30", "message": "Enable foxtrot tests"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/2c4ce227d9cab7b4d8bd57c9edb7854ec09a7b63", "message": "Fix for #365"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ebf9db7ed8588818bd5d0cda6f22cc409dea047b", "message": "Merge pull request #367 from yaakov-h/pr/301-remove-unprovable-contracts\n\nComment out statically-unprovable contracts."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/c9905d18442efdde8336b728895e63f62193b6c4", "message": "Merge pull request #362 from yaakov-h/pr/352-EncoderParameters\n\nAdd contracts for System.Drawing.Imaging.EncoderParameters"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d480a136d324fef85ec42c272fba81bf9c08fd7a", "message": "Merge pull request #364 from yaakov-h/pr/346-XmlSchemaSet\n\nRemove invalid precondition on System.Xml.XmlSchemaSet"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/517dc8ff133f6ac9ff7837822b22937375a23288", "message": "Merge pull request #361 from yaakov-h/pr/349-contract-newexpression\n\nRemove invalid postcondition in System.Linq.Expression.NewExpression.Members"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/be6d1858b605e6f473db7ea488926ef2af85eedf", "message": "Merge pull request #360 from yaakov-h/pr/351-contract-bindingrestrictions\n\nRemove invalid precondition from System.Dynamic.BindingRestrictions.GetInstanceRestriction."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/81f96db5e57ada8469fdb563f801de8be8044907", "message": "Merge pull request #354 from hubuk/multitarget\n\nProvided long term solution for broken build."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d350e5f60c0c47db1720d83bdf86138878ea62cd", "message": "Merge pull request #345 from SergeyTeplyakov/st/v110Release\n\nChanges required for v.1.10 release"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8137de359ca2f11ceb0978bc60a548b2f4f2d4e9", "message": "Added license to nuspec."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a490ec1abff8290d3e9ac5a6614d707e5cf8915f", "message": "Add $version$ back to the nuspec file."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d80edec7d438a548490831f4e9cf529492d6144c", "message": "Updated version to 1.10.\nRemoved Microsoft.Contracts.ds file\nRenamed nuspec file to Dotnet.Contracts.nuspec"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fbf1645ca6bc8b4335e315d7b418c8296ac6e767", "message": "Merge pull request #344 from hubuk/issue168\n\nFix for issue #168"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/cdcf2dcc44eda6ff6ea17a669139bd1d58536677", "message": "Merge pull request #343 from hubuk/buildFix\n\nFix broken build."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b5b0b71498351f23fbcfb52d8b969d73bf74b102", "message": "Merge pull request #292 from fedotovalex/net46contracts\n\nSome .NET Framework 4.6 contracts"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/2285d98a80193c2e90cfeeadf4a1356a7aebf5f5", "message": "Merge pull request #306 from yaakov-h/pr-OperatingSystem\n\nAdd contracts for System.OperatingSystem"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1064c750dedfe3ff3696128876a33bf62d8d9b7f", "message": "Merge pull request #296 from yaakov-h/pr-Net46Task\n\nUpdate System.Threading.Tasks.Task for NET4.5/4.6"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/531c71b4ac0d85e32bce597d15fbb332e0ed25a7", "message": "Merge pull request #291 from fedotovalex/net46cra\n\nProducing contract reference assemblies for .NET Framework 4.6"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/783ef955358b027b8f1a57d43b07773f81f1f5e0", "message": "Merge pull request #318 from yaakov-h/pr-system.version\n\nAdd contracts for System.Version"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5c8b9a3ab07a5f10ef8224646c5b455b06d3bc1f", "message": "Merge pull request #342 from asvishnyakov/appveyor\n\nFoxtrot & Clousot tests are disabled because of time limit in AppVeyor free plan"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/24168d9498c786af9fbdd519eafb2b253f067275", "message": "Merge pull request #278 from SergeyTeplyakov/bugs/bug235_275\n\nAsync postconditions in generic methods"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f202b1c50574069cfe9b0b24f150592be1625e87", "message": "Merge remote-tracking branch 'origin/master' into bugs/bug235_275"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/03ae54174b8ad4ff2cd66746bc5e5c4a28586c06", "message": "Merge remote-tracking branch 'origin/master' into bugs/bug235_275"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a89d1665ff538e0b4e1ae4bbda2930c2f7f39ea3", "message": "Merge pull request #320 from ndykman/issue307\n\nFix for issue #307"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6bcd424cc7598aa93600ff5915479581e0ba1391", "message": "Merge pull request #337 from hubuk/issue321\n\nFix for issue #321"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b230c5bcda87d7aa241316b8496a8a4d911afbf5", "message": "Merged with Microsoft/master"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/2163f151f2fca39cd4ac20f6b48b2ab941607cad", "message": "Address code review comments."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0ba61be9793ec16e8d94943bf738991808732218", "message": "Merge pull request #335 from asvishnyakov/appveyor\n\nEnable automated execution of all unit tests in AppVeyor"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/aae8f20d4594dc4593981f3ad848eb30310a10be", "message": "Merge pull request #294 from SergeyTeplyakov/bugs/bug178\n\nAsynchronous postcondition check now synchronous. Fix for #178"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7e094796e74e9a5b55d2128ead7cf6e8135549b5", "message": "Merge pull request #293 from SergeyTeplyakov/bugs/bug191\n\nBugs bug191"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/75aea0ab7aef49240d74660d4bbb27dbb1c11154", "message": "Renamed method due to code review comment."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/2b13ac3543a0f0f05fe99f8dcefa5f23052ef503", "message": "Merge pull request #324 from tom-englert/Issue148\n\n Fix broken regression tests (#148)"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9051a97d64e64c2eb7773921f010219e3444f67b", "message": "Fix for #340.\nccrewrite will not fail if metadata has non-escaped comma in the type name."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/2130b6c03ee230f723fe3dbaf3819f51667259b2", "message": "Merge pull request #328 from hubuk/configuration-rework\n\nRemoved build ouptut from source control repository."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d5ab60214c11c3e87b2462d9f60512f9b92d0370", "message": "Merge pull request #309 from SergeyTeplyakov/buildBreakFix\n\nFix for a build break."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/af4e1c9a91e2304ba5c80256af10f5a1e4c7e6c1", "message": "Fix for a build break."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/366e422984cd01c3ca1a97e26ddd3282a5cf010d", "message": "Merge pull request #305 from yaakov-h/pr-PathGetTempFileName\n\nExtend postcondition on Path.GetTempFileName"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/bd2c4c468dd09646a081e204ed4283d52809d27d", "message": "Merge pull request #295 from yaakov-h/pr-PropertyChangedEventArgs\n\nRemove false contract on PropertyChangedEventArgs"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8bd3a870ab7a057a85cef943d95b854084215441", "message": "Asynchronous postcondition check now synchronous. Fix for #178"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/01b26c5578486acc104fea01e89bafd098a34ca4", "message": "Fix for #191"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/c3085f503e2ca2bf4bebcbebaf966bcd5324489c", "message": "temporary changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0f817e76cf352b299fdcee88cc23c1de2385487d", "message": "Merge pull request #290 from hubuk/code-tools-arch-change\n\nFixed missing closing parenthesis issue."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/aa8764022ba61b092053b357d1597479f7529171", "message": "Merge pull request #276 from tom-englert/Issue169-3\n\nUpdate imported CCI2 binaries, compile CCDoc"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b0a47b274410f156847991301be571806dd6e9d0", "message": "Merge pull request #282 from hubuk/code-tools-arch-change\n\nChanged path to Program Files directory to a platform dependent X86 version."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/932c4711cb5c1dd4cfc5680c6ee9421b7910d071", "message": "Merge pull request #286 from tom-englert/Issue285\n\nAdd missing contracts in System.Windows.Data.MultiBinding"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3c8733ec58891f55011b183dd70935704a5cc92f", "message": "Merge pull request #284 from tom-englert/Issue283\n\nAdd missing contracts in System.Windows.Input.InputManager"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/c5626e3992156b4a9b08b5365bcd7b66f05612b2", "message": "Merge pull request #280 from SergeyTeplyakov/bugs/bug273\n\nExclude attributes from precondition visibility verification"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fac25ab719fb2b6e1335b707226dee39c12b774d", "message": "Address code review comment."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/20a10aabd34c00a2147d5e05e413616ae9c0feb1", "message": "Merge pull request #281 from hubuk/master\n\nChanged registry access to use 32 bit view for CodeToolsUpdate project."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/03e84fffd9793596f700fa13b49f17eacfa3f232", "message": "Exclude attributes from precondition visibility verification\n\nFix for #273"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5430e9ac05ec65d53376361a58935c0d253237a6", "message": "Merge pull request #269 from hubuk/config-rework\n\nRemoved unused configurations from CodeTools solution."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fef8d0d143c5007eeb0eb095cafad3ce49b89c40", "message": "Merge pull request #271 from SergeyTeplyakov/bugs/bug270\n\nAdd special logic for pdbs without /names stream"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e0c47c17c9490e4a4fdbedf052700814c4aaf409", "message": "Fix typo"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3bbeec07210c7aae3833232c5a55a5255f705015", "message": "Fix for #275.\n\nAdd additional logic for type comparison to cover generic async methods."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/173ad8e0d847f5c8940c697a96cf85f8902fc012", "message": "Additional test cases for async postconditions.\n\nConflicts:\n\tFoxtrot/Tests/FoxtrotTests10.csproj"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/06bced1a698956204fcae27c5decd4418e120456", "message": "Fix for #235\n\nAdd type mapping to change generic type reference in async closure that\nis called from generic async methods."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6d5030d5da13e2ed4f10e1c3ec1396eeb06ed9af", "message": "Add special logic for pdbs without /names stream. Instead of failing the whole process, such kind of pdbs now just ignored."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a8887cee923b51bbf01a7d599b2bd5d15d15b5a0", "message": "Merge pull request #229 from sharwell/clousot-xunit\n\nUpdate the ClousotTests project to use xUnit.net"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0e6b0d77555ea38dacfb39248e8b982de9691379", "message": "Merge pull request #233 from tom-englert/issue#232\n\nReplace email addresses in error message with the github issues page."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/67ab19715afb20b2e6f3a2b4969ae79c83402dec", "message": "Merge pull request #257 from sharwell/codetools-2015\n\nUpdated CodeTools10 to support building within Visual Studio 2015"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3701e294a0026e76aee4bdbac97205d5f59bdec9", "message": "Merge pull request #263 from tom-englert/issue#262\n\nFix issue #262"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b2021fb80abd1dbddd0ff5f2bb146ebe2acb5f9d", "message": "Merge pull request #251 from fedotovalex/fix-249\n\nAdded missing contracts in Directory class."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ef374ee16dce4317712c9f918202159e6e07a37a", "message": "Merge pull request #260 from hubuk/issue29\n\nAdded support for default(T) expression used in contracts."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b75846e9681ebb05bcb2aaa3d25f44a35318b722", "message": "Merge pull request #237 from sharwell/normalization\n\nFix all remaining line endings"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d7e02628f88c9012dc64a8c80265385e4d094985", "message": "Merge pull request #234 from sharwell/documentation-file\n\nMove System.Compiler.xml so it stops changing during every build"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103955895", "body": "I'll test it, but I don't think that this PR will fix this issue, just because this issue not only with async methods but with iterator blocks, and this issue is happening in VS 2013 with isRoslyn == false.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103955895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103963647", "body": "Tested the fix. Issue is still there.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103963647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103968737", "body": "Few questions/suggestions:\n1) Please update a comment and put following link as a proof that Roslyn is using the same constants as old compiler: https://github.com/dotnet/roslyn/blob/b6484300dfafb43af0c27e542ec457a7583e1aa8/src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/StateMachineStates.cs\n\n2) Is there any changes in tests? What the impact from end-user perspective?\n\n3) I see another place in the code with a similar logic:\n\nExtractor.cs:GetContractClumpFromMoveNext\n\n``` c#\nvar initialState = moveNext.IsAsync && !isRoslyn ? -1 : 0;\nmoveNext.MoveNextStartState = initialState;\noriginalContractPosition = null;\nint statementIndex;\nContract.Assume(moveNext.Body != null);\nContract.Assume(moveNext.Body.Statements != null);\nint blockIndex = ContractStartInMoveNext(this.contractNodes, moveNext, out statementIndex, iteratorMethod, isRoslyn);\n```\n\nI was unable to find usages for `MoveNextStartState` but for the sake of consistency I would suggest to change this as well.\n\nThanks a lot for investing time in this project!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103968737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103969613", "body": "As I mentioned, this issue is not related to Roslyn at all and happening in VS2013. So basically this fix is not applicable, because state `isRoslyn` argument in the Executor is `false`, so the initial state computed correctly in VS2013 all the time.\n\nI've tested this fix for both async and iterator block and this code still breaks. As I mentioned, this bug is more subtle and to reproduce it you need more complex precondition (using ||, && conditions).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103969613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286214", "body": "I'm ok with that, but I think the very first thing is to run https://github.com/dotnet/codeformatter to get this code readable. Tools for forcing this rules are super useful, but review process could mitigate this. Right now it is very inconvenient to make any fixes here.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286316", "body": "@sharwell for #61: 21K of changes... It seems that this is pull-request fixes #63. \n\nI see that this pull-request already fixes majority of style issues but not all of them. Is it possible to run R# formatter or similar tool to fix spacing issue (use 4 spaces)? Because I would like to have one major fix but not multiple?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286434", "body": "> I'm actively working on updating the Visual Studio extension code to work as a single VSIX seamlessly across Visual Studio 2010 through 2015.\n\nSound awesome!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286577", "body": "> I would prefer the rewrite not touch the Visual Studio extension code, as that would invalidate much of the work I've been doing.\n\nEven more, maybe it would be better to fix VS14 first and only after that clean-up this stuff. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112287458", "body": "@sharwell My concern that this affect so many files and maybe it would be easier to have only one commit that dramatically affects the code base. What do you think?\n\nP.S. If you'll split the change to separate .gitattributes from \\r\\n I would merge the first one today. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112287458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112294078", "body": "@sharwell Yep, it is late in my timezone as well.\n\nOk, you convinced me. I'll talk with Mike first, but hope I'll merge this PR tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112294078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112979310", "body": "Merged PR #61.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112979310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113202161", "body": "@sharwell Agree about branching model. We had a problems because no one merged PR's. Merging them on time will eliminated majority of issues.\n\nAs soon as you're ready, ping me, I'll merge updated PR as well.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113202161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113386043", "body": "It seems that some general label would be very useful. But can we come up with more descriptive name?\n\nI mean 'contract' as a label sounds a bit weird for me. Maybe 'contract issue' or something similar?\n\nP.S. @sharwell I'll take a look at your PR, but I don't have experience with VSIX and other black magic that you've done in #66.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113386043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114292256", "body": "@hubuk I don't think that we need so many different labels right now. I would like to stay with minimum number of labels and add them along the way when it would be obvious that wee need all of them.\n\nFor instance, all this different labels per area would be useful only when we really would have tens of issues per each area. It could be true but could be not. The same is true for ClosedAs. Right now we have less issues than proposed labels.\n\nAs I said, I would prefer evolve those labels based on real needs. Is it ok for you?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114292256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114941674", "body": "@tom-englert Due to recent changes (maybe that was me today), I can't merge this PR automatically.\n\nIf you could rebase this PR with recent changes I'll merge it today.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114941674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115053377", "body": "Guys, can anyone update the PR to simplify automatic merge?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115053377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115055081", "body": "Maybe this is related to #72. I'll add test case and test it withing my Roslyn fix.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115055081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115297747", "body": "I've added test case in my working branch that support VS14 and I didn't get any issues.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115297747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115298597", "body": "Yep, I know why this happens. I'm using different local branches for different features right now.\n\nI thought about force-push, but decided that this could do more harm than benefits... \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115298597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115429498", "body": "@aarondandy I'm not saying that CC Editor Extension is not important, I'm saying that we can split this into two releases. And, actually, Code Contracts itself and CC Editor Extensions are two different VSIX packages anyway. I'm just saying that this is two separate milestones that could be accomplished in parallel.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115429498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115455483", "body": "@sharwell As I mentioned already, I'm not arguing against CC Editor Extension, I'm just trying separate the concerns. I've created separate milestone (https://github.com/Microsoft/CodeContracts/milestones/CCEditorExtensionVS2015) and anyone can create the same ticket for tracking this milestone progress.\n\nEditor Extension has different deliverables and I just can't understand why we should mix them up. We can do everything in parallel and deliver great experience in timely manner.\n\nThose tools was always released separately and I don't think that for the very first release we should mix them up.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115455483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115461979", "body": ":question: BTW @sharwell could you suggest what changes are required to get cccheck/ccrewrite integration with VS2015?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115461979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115506449", "body": "Understood. You can pull my fix ( #74 ) and check is it working for you. If you have special test cases that you would like to test, just put them as a comment for PR.\n\nI'll be talking with @mike-barnett tomorrow and we'll review my PR's (and other changes that I'm working on, including the fix for #38).\n\nI've created a gitter chat room: https://gitter.im/Microsoft/CodeContracts\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115506449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115508433", "body": "Sounds great! But we need to clean up tests first. I'm working on ccrewriter tests right now, and they should be stable for VS14 milestone. But tests for cccheck are not stable: they run for a couple of hours and not really deterministic. Maybe we should not run them during the CI process.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115508433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115895197", "body": "Guys, what is the current status of this PR? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115895197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116443240", "body": "Does it means that the integration with VS2015 itself is working fine already (except the async part)?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116443240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116448475", "body": "Does it mean that #36 is all that we need for VS2015 support?\nI already fixed issues with differentce in the IL in #74 (at least, everything that I know about this issue). If you have anything related to roslyn-based behavior, could you shared it with me?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116448475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116933227", "body": "This bug is still active! Reproduced in VS2015 (strange, that it was not reproduced at unit tests)!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116933227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117023216", "body": "The root cause of this issue that roslyn-based compliler started generating new names for closures classes. Before the name always was <>c__DisplayClass0 and now I see only <>c.\n\nI send an email to Roslyn guys asking about this new behavior. If this is a final behavior, we need to change rewriter, otherwise it will work as is.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117023216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117023299", "body": "And the bug is not reproducable in unit tests because I've got roslyn-based compiler with \"correct\" (i.e. old behavior).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117023299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117726994", "body": "I solved this problem by changing connection string from (LocalDb)\\11.0 to (LocalDb)\\MSSQLLocalDB.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117726994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117749434", "body": "I do have a fix that uses new connection string but falls back to the previous one if it fails. \n\nAnd we definitely can (and should) improve this experience! :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117749434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117753079", "body": "Yep, this is different names for different sql server compact version.\n\nFor sql server 2012 compact is (LocalDb)\\11.0 and for Sql server 2014 compact is (LocalDB)\\MSSQLLocalDB.\n\nAnd on VS2015 there is no 2012 version that's why old code fails.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117753079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117772996", "body": "It won't affect performance. It affects correctness. CCCheck just fails on VS2015 machine.\n\nAnd it will slow down a little bit, but only on the old machine without VS2013/VS2015. Current logic is following: it checks for the first available local connection and stops seeking for others. I can change the logic to do this in parallel, but minor performance degradation with my fix would be only for old boxes (VS2012) but we can improve this in the future.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117772996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818288", "body": "Merged manually.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818328", "body": "Merged manually.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818547", "body": "Should be fixed. Reopen if not.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818608", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117818608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117866061", "body": "@hubuk could you rebase with master head, please?\n\nAnd could you please at specify the test case when this issue is happening? I'll add tests myself..\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117866061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117870903", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/117870903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118080015", "body": "Double checked that fix worked. Closing the issue.\n\nP.S. Still trying to add an unit test for this case...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118080015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118940915", "body": "It is not critical, but would be useful to fix.\n\nI would suggest to do this after I'll push my changes for VS2015 support (because I reformatted ccrewrite code).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118940915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119329227", "body": "I totally agree with Mike, that current behavior is correct, because runtime behavior of the failure is highly configurable. \n\nSo the call to `_ContractRuntime` should be preserved any way, _but_ implementation of that method could be enhacned.\n\nTwo additional points: \n1. Bug case (please not, that contract violation is not a \"regular\" exceptional case it is a subset of exceptional case when exception represents a bug) should be super rare.\n2. Reflection is used because any exception type that accepts message could be used in this case.\n   it is possible to add some \"specializations\" for different exceptions, but we should consider pros and cons of this approach (benefits vs. potential issues).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119329227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119356890", "body": "@sharwell Just in case. I'm using following trick in this case: I'm using if-throw + `Contract.EndContractBlock`. In this case I would be able to turn contracts altogether and still get the desired behavior.\n\nBut we can do proposed trick.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119356890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119380116", "body": "@sharwell I don't think that you have downside that you mentioned. `if-throw` (i.e. legacy) requires are treated the same way as the regular preconditions. So you would still have them copied into `internal` implementation even with suggested approach.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119380116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119448644", "body": "@mike-barnett, could you please take a look at this PR? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119448644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119668501", "body": "> :exclamation: So, it turns out the new Roslyn binaries weren't added to this pull request which means two things:\n\nMy bad. That's because all executables are excluded in .gitignore. I thought that they were added in previous iterations.\n\nIt would be good to add NuGet support. Can you update this PR or what the easiest way to do this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119668501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119714730", "body": "Close as not reproduces any more.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119714730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119714833", "body": "This feature is already in the ccrewriter: just specify /recursionGuard:0 to disable this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119714833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119721911", "body": "Thanks, Sam.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119721911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119723371", "body": "Understood. Will do this right now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119723371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119740964", "body": "Sure. Will check all the closed bugs with fixed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119740964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119741370", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119741370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119748465", "body": "Closed as dup.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119748465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119750334", "body": "Close as dup. Merged #95 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119750334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119754762", "body": ":+1: Thanks a lot @sharwell and @hubuk \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119754762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119755066", "body": "\"Merged\" as part of the #96.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119755066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119755994", "body": "Ok. Sounds good.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119755994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119808688", "body": "Updated the solution.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119808688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119820695", "body": "I thoght a bit more about proposed (and applied) change and I don't think they're good. Original implementation was robust in terms of unobserved exceptions and new one is not. I know that default behavior has been changed and application will not crash by default, but unobserved exceptions should be avoided even if the code would be slightly more complicated. \n\nI will simplify my original cide and push another update. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119820695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11936447", "body": "Sorry I've missed that. Was a bit in rush. I'll fix via next push. Because I've missed another point in this review: method ReplaceRequiresWithAssumInMoveNext should be commented out, actually.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11936447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33416733", "body": "Thanks. Will fix.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33416733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34066145", "body": "Reverted it back.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34066145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34409420", "body": "Maybe comment would be useful here? Just to clarify the intent...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34409420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414053", "body": "Tom, maybe `GetDesiredDbName` should be called outside `LocalDbClousotCacheFactory`? It seems that this is high level responsibility?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414058", "body": "Could you please extract this path as a const?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414092", "body": "Shoulw we use static field instead? Or even path this as an argument to the GetDesiredDbName?\n\nWhen I've made this change I tried to separate responsibilities and extracted all \"application specific\" functionality into high level. That's why I've added dbname as parameter for the constructor.\n\nBTW there is at least one another client of this parameterless constructor and I don't know is this functionality required there or not. Thats why I would suggest to put \"desired db name selection\" out of this class.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414112", "body": "I think even in this case we still would benefit from extracting this logic out of the constructor itself.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414121", "body": "But as I mentioned, you actually changed the behavior of all clients, but we want to change the behavior for only one of them. Right? \n\nThat's why, if you're concerned about backward compatibility, extracting this logic into the upper level is better.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414189", "body": "So my point was: extracting this logic our of the factory clearly separates the concerns and responsibilities of the code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414308", "body": "BTW, this is IMO, not critical. I'll accept the PR if you don't agree with my comment.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414320", "body": "Ok, so you don't think it is useful to extract this into separate method?\n\nI'm fine with current solution if you think its not worthwhile. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414322", "body": "> I see all you concerns, but they don't fit in the current strategy of the cache manager, and I would not like to rewrite the cache manager at this point, just fix the issue.\n\nOk. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34414322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427912", "body": ":question: Maybe `OrdinalIgnoreCase`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427913", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427916", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427934", "body": ".NET 4.5 means that this is a VS2013 compiler. Renamed to `TestTheRoslynCompatibilityCasesWithVS2013Compiler`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430291", "body": ":ok: Will switch to `StringComparison.Ordinal`. \n\nAny other remaining questions for this PR? Otherwise I'll push it later today.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734766", "body": "Actually I've extracted this code from another place, not from this one. There is another place that needs to be consistent.\n\nThere is a plenty of precondition types. `ValidationCount` is a number of method calls abbreviated with `ContractValidationAttribute`. All of them should be considered in this case.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734832", "body": "Assertion is a very common term in this domain. I can't understand why to duplicate the info here.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734848", "body": "I meant in DbC.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734942", "body": "Ok will change to preconditions/postconditions.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34735018", "body": "Yep, actually this would be more accurate statement. Because if a method contains another assertion like `Contract.Assert`/`Contract.Assume` this method will not return true.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34735018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959817", "body": "I think I saw that in some other PRs with formatting changes you also changed field names...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959824", "body": "Can formatter insert braces for single statements like that?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959959", "body": "Sounds good. Jut wanted to double check.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959984", "body": "There is a plenty of places in this code base like:\n\n``` c#\nif (check)\n{\n  // several statements\n}\nelse\n   oneStatement;\n```\n\nThis is very unreadable. I would prefer to not use braces only on a simple if statements (like old-style preconditions) but only when there is no `else` blocks. Is this consistent with .NET foundation bracing rules?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34324564", "body": "It seems that formatter failed to insert proper spacing. Still 2 spaces :(\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34324564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34962146", "body": "It seems I didn't communicate my thoughts correctly. I'll try once more.\n\nMy rules: use curly braces in all cases. The only exception is simple if-statements without else blocks for short one liners like argument validation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34962146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34962408", "body": "Actually, I'm just curios how far my personal preferences from proposed once:) And yep, moving to dotnet organization makes a lot of sense. I'll talk to someone to understand how to do this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34962408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259096", "body": ":question:  Just curious what was the reason for this switch?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476605", "body": "Does it mean that arguments could be null?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476921", "body": "Yep, it seems that `argument` could be null. This is a valid case.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476997", "body": "Following requires could be added:\n\n`Contract.Requies(value != null || target.Type == typeof(void), \"Label must be void or have an Expression\");`\n\nFrom http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/GotoExpression.cs,357\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477135", "body": "I see another precondition here: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/ListInitExpression.cs,231\n\n`Contract.Requires(initializers.Any());`\n\nNot sure that this common, but it seems that those methods are not possible to use with infinite sequences.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477234", "body": "From this line of code: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/LoopExpression.cs,137\n\nAdditional requies could be added: `Contract.Requies(continueLabel == null || continueLabel.Type != typeof(void), \"Label type must be void\");`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477285", "body": "@sharwell I don't think we can and should add this precondition. You may find this code: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/DynamicExpression.cs,710\n\nThis code means that `null` is an absolutely valid input.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477305", "body": "I think you can't create them in C#, but you can create them in VB.NET.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477325", "body": "@sharwell again. We can't add this as a precondition. `null` is an absolutely valid value. Please look here: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/SwitchCase.cs,100\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477398", "body": "And again, this is not the case: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/SwitchExpression.cs,204\n\nAny enumerable that is used in a form of `someEnumerable.ToReadOnly()` could be null.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477517", "body": "Ok, it seems proper precondition should be like that:\n\n`Contract.Requires(cases != null && cases.Any());`\n`Contract.Requires(Contract.ForAll(cases, case => case != null));`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477597", "body": "Theoretically, we can add another precondition:\n\n`Contract.Requires(Member is FieldInfo || Member is PropertyInfo, \"Member should be field or property\");`\n\nBased on this: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/MemberExpression.cs,365\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477719", "body": "The same is true here (as @sharwell suggested earlier):\n\n``` c#\nContract.Requires(Member.IsStatic || expression != null);\nContract.Requires(!Member.IsStatic || expression == null);\n```\n\nAnd from this: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/BinaryExpression.cs,95e70d48bc8fe361\n\nWe can add:\n\n`Contract.Requires(!Method.IsGenericMethodDefinition);`\n`Contract.Requires(!Method.ContainsGenericParameters);`\n\n:question: What do you think?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477755", "body": "`Contract.Requires(Type.GetElementType() != typeof(void))`\n\nFrom this: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/NewArrayExpression.cs,150\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477774", "body": "We can try to pick this precondition: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/NewExpression.cs,230\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477803", "body": "In this case, null or empty `testValues` are invalid (http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/SwitchCase.cs,102):\n\n`Contract.Requires(testValues != null);`\n`Contract.Requires(testValues.Any());`\n\nNot sure what approach is better: with one or two statements...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477833", "body": "Actually, I'm not sure about `Contract.ForAll` because it is costly and actully should be added in many other places to be consistent.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477927", "body": "From this: http://referencesource.microsoft.com/#System.Core/Microsoft/Scripting/Ast/TypeBinaryExpression.cs,a071b1eaa5acb0f6\n\n`Contract.Requires(TypeOperand != null && !TypeOperand.IsByRef);`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478014", "body": "It seems that `sequencePoint` should not be null.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478575", "body": "Totally agree with your concern. One one hand, I'm sure that static checker would not be able to prove many of them. On the other hand, using Code Contracts Editor Extensions will allow an end user to see them and validate them manually.\n\nI would say that we should use `NotNullOrEmpty` but ommit `Contract.ForAll`...\n\nAbout `AssumeRequires`: maybe this is a good idea for new feature...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35656430", "body": "Orh... what an inconsistency:))\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35656430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289120", "body": "I now that this solution is far from perfect AND it would be better to use new language feature one day. But I disagree that this solution brings no value.\n\nCompare two different versions:\n\n``` c#\n                    var templateArgCount = (originalInstanceMethod.TemplateArguments == null)\n                        ? 0\n                        : originalInstanceMethod.TemplateArguments.Count;\n\n                    for (int i = 0; i < templateArgCount; i++)\n                    {\n                        args.Add(originalInstanceMethod.TemplateArguments[i]);\n                    }\n```\n\nand\n\n``` c#\n                    for (int i = 0; i < originalInstanceMethod.TemplateArguments.CountOrDefault(); i++)\n                    {\n                        args.Add(originalInstanceMethod.TemplateArguments[i]);\n                    }\n```\n\nAnd please note that there is a few places like that in the code. \n\nI'm OK to add TODO to change this after migration to C# 6.0, but _I'm not OK_ to remove to old version.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289152", "body": "The same as before. But this time I prefer this extension method over your suggested solution. \n\nExtension method is much more descriptive and high level. Proposed solution required \"slow memory\" to analyze, IMO.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289178", "body": "Sounds good. :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289182", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289230", "body": "This one was old behavior and I don't want to change existing behavior to much. I've faced a few issues when my obviously innocent change break existing code. The problem with fail-fast behavior for such a change that it could break existing customers.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289239", "body": "Thanks. This stuff is only for async _postconditions_. Will fix this stuff. :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289249", "body": "Ok.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289274", "body": "I thought about it. I think proper exception if the type is missing is required.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289354", "body": "Please do not forget that async postconditions could be applied to _ANY_ task-based methods! But even for simple async methods it is possible that another method was called that throws `AggregateException` with much more complex exception tree inside.\n\nSo I do think it is correct. \n\nP.S. This is an old code, I didn't touch it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35289354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291933", "body": "I can add additional test case that will run the Foxtrot.exe without System.Core and will expect this new exception type.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36566676", "body": "Just in case, can we extract this into the constant with small comment that will describe why this size should be used?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36566676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37133281", "body": "@sharwell I prefer separate PR, but separate commits are fine for now.\n\n@tom-englert What do you think about @panacekcz comment? We can fix this in separate commit/PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37133281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808164", "body": "The idea of abstracting output away looks very promising. But can we think a bit about name of this abstraction?\n\nMaybe something like `ITestDiagnosticStream`, `IOutputStream`, `ITestConsole`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808318", "body": "I would suggest to keep original error message. Otherwise it will take some time to figure out why test failed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808411", "body": "The same true here.\n\nWithout diagnostic the only way to find this stuff is to look at stack trace. Proper messages in the asserts always helps to find the root cause faster.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808911", "body": "Is it necessary for xUnit to use `object` in this case? I know that with xUnit you can use `IEnumerable<int>` in this case.\n\nAnd another question: why this test source returns a sequence of indices? Is it impossible to use `IEnumerable<TestCaseData>` where `TestCaseData` is an actual value at `ExtractorTestData`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37808911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809067", "body": "It seems we have O(n^2) complexity here.\n\nBecause `ExtractorTestData` generates a sequence each time, calling following code basically generates N^2 number of items.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809122", "body": "Can we use stable version, but not beta? Or beta is OK?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809270", "body": "Just curious: why test parallelization is disabled? Maybe comment would be helpful if there is a reason for this...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809381", "body": "I'm using NUnit all the time, so I'm not super familiar with xUnit. Does this change means that there is no `Fail` method in xUnit? Because `Assert.Faile` is much more descriptive than `Assert.True(false)` IMO.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809466", "body": "Again. I would love to see original error message.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809614", "body": "`Assert.Null`? I saw you changed similar code before... So should we try to be consistent here as well? \n\nThis stuff is minor, just IMO.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37809614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833369", "body": "Oh!! I didn't realize that this name is part of the xUnit:)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833441", "body": "Hm... Ok :(\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833526", "body": "Hm.. (and this one third \"Hm..\" for this review). As I mentioned, I used NUnit and all of this is not an issue there.\n\nBut closed for now:(\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833623", "body": "It seems that parameterized tests are much less usefule in xUnit comparing to NUnit:(. Quadratic complexity is always a bad thing and we already have hundreds of records in the `ExtractorTestData`...\n\nYield return is much more expressive way to generate test cases, so I don't want to abandon it. I'm just a bit surprised that THE most popular unit test framework for .NET doesn't cover this case out of the box.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833637", "body": "Understood.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833659", "body": "I think comment would be useful. Because anyone can just change this stuff and break everything...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834057", "body": "I don't think this postcondition makes sense without appropriate precondition in a set method.\nThe only case this postcondition would be true, if `set` method would not be allowed to set non-null string...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834128", "body": "Ok. was wrong with my previous comment. You may ignore it. I've looked at the implementation...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834256", "body": "Do we need this one? It seems empty...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834359", "body": "Understood. Good for now, I think.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37834359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38046212", "body": "Maybe it would be easier to format this stuff first?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38046212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38046632", "body": "Is it correct that xunit.abstractions is of version 2.0.0.0 and the rest of the xunit packages are 2.1.0-beta4?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38046632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38049300", "body": "No, you're not:) I just was surprised that we didn't reformat this code yet:)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38049300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38049309", "body": "Ok. Understood.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38049309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38274777", "body": "I see that previous code has another \"nowarn\" for 1699. Do we need it as well?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38274777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38344735", "body": "Understood. Merged.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38344735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38344867", "body": "If we're going to change this in the future, maybe it would be useful to extract this path into some constant and not hard-code it in the message?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38344867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40019408", "body": "Is this message is correct? It seems slightly misleading to me because it doesn't tell what the error type is...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40019408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40031272", "body": "Yeah.. This stuff looked weird for me as well, but then I've searched thought this repo and found that this is a canonical way to express possible exceptions.\n\nMy point was more about the message that is absolutely unclear, but because the official documentation is saying that, I'm not sure what we can do. I would prefer to have more clear message but have no idea what this message should looks like.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40031272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936758", "body": "Totally agree that for any new code this approach should be used. But I tried to stay with existing \"design\" that's why, IMHO, for consistency reasons, approach with backing field could be better for now. Once we'll clean up the code, all those ugly .NET 1.0 patterns will disappear:)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936762", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579304", "body": "Is it required?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579752", "body": "Can we use the same esnure as for `Add` method?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579814", "body": "spacing: shoudl be `Contract.OldValue(Count) - 1`.\n\nand can we avoid using `this`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579910", "body": "It seems that in previous file one contract statement was used: `Contract.Requires(index >= 0 && index <= Count)`.\n\nShould we use consistent approach?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579991", "body": "Maybe move `None` to the beginning of this enum declaration?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38579991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tongbong": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/289", "title": "Code Contracts Editor Extensions - Tooltip missing code contracts", "body": "from the releases page, I can see that the code contracts editor extensions package is still under active development.\n\nhttps://visualstudiogallery.msdn.microsoft.com/02de7066-b6ca-42b3-8b3c-2562c7fa024f\nIn VS2015 using the v1.9.10714.2 release, I can't see the nice tooltip as in the pictures (see link above).\n\nAre there some options to activate/configure that feature?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roji": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/273", "title": "Bad application of visibility rules on method parameter attributes?", "body": "I'm using [Jetbrains Code Annotations](http://blog.jetbrains.com/dotnet/2015/08/12/how-to-use-jetbrains-annotations-to-improve-resharper-inspections/) in a library which also uses Code Contracts. I'm annotating parameters on some public methods with [NotNull] and [CanBeNull] attributes, but the CC rewriter complains about visibility:\n\n```\nMember 'JetBrains.Annotations.CanBeNullAttribute.#ctor' has less visibility than the enclosing method '...'\n```\n\nNow, it's true that I'm trying to apply an internal attribute (e.g. [NotNull]) to a public method. But why should this be a problem for CC? Shouldn't it be perfectly fine to have an internal attribute meant purely for internal consumption on a public method's parameters?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98463033", "body": "+1, thanks for doing this work!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98463033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rudidlo": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/272", "title": "Cannot connect to the cache. The CodeContracts static check will not run", "body": "How to reinstall default SQL instance using Code Contracts installer?\n\nI installed Code Contracts for the first time. Everything worked as expected.\nAfter a few months I had some configuration issue related to sql server and I uninstalled all sql server instances and installed them again.\nSince that time I'm not able to create default Code Contract cache repository using Repairing installation or uninstalling and installing version  1.9.10714.2 again.\nCould you help me how avoid warning \"Cannot connect to the cache. The CodeContracts static check will not run\" again?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "henrygab": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/268", "title": "Bugs with CodeContractsForClass() failing to propagate some contracts", "body": "I've created a public GitHub repository for the purpose of seeing this bug in action.\n\nSee https://github.com/henrygab/BugSamples/CodeContracts/ContractClassFor001/ for a buildable, commented, minimal sample.\n\nBug #2: Contracts specified in a ContractAbbreviator() contract for a ContractClassFor() attributed class silently fail to propagate to implementations.\n\nExpected Results:\nIf a method uses a ContractAbbrebreviator() attributed method, those contracts will follow the inheritance rules.  These inheritance rules require derived implementations to be at least as strict.  When the method that is calling the ContractAbbreviator() method is in a ContractClassFor() attributed class, implementations of the interface will therefore also have the contracts specified in the ContractAbbreviator() function applied.\n\nActual Results:\nAny contracts in a ContractAbbreviator() method, when in a ContractClassFor() attributed class, **_silently_** fail to be applied to implementations of that interface.\n\nAgain, I refer to See https://github.com/henrygab/BugSamples/CodeContracts/ContractClassFor001/ for a buildable, commented, minimal sample.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/267", "title": "Bugs with ContractClassFor() silently failing to propagate some contracts", "body": "I've created a public GitHub repository for the purpose of seeing this bug in action.\n\nSee https://github.com/henrygab/BugSamples/CodeContracts/ContractClassFor001/ for a buildable, commented, minimal sample.\n\nBug #1:  Invariants fail to propagate to interface implementations from the ContractClassFor() class.\n\nPer section 2.3.1 of the Code Contracts specification, an invariant method with invariants specified for automatic properties will add Ensures/Requires to the corresponding Get/Set of that automatic property.\n\nExpected Results:\nWhen a Contract.Invariant() is specified in a method with the ContractInvariantMethod() attribute, and that class has the ContractClassFor() attribute for a given interface, implementations of the interface will have those Contract.Invariant() enforced in the implementation.\n\nActual Results:\nNo such invariants appear to be propagated to the automatic properties.\n\nAgain, I refer to See https://github.com/henrygab/BugSamples/CodeContracts/ContractClassFor001/ for a buildable, commented, minimal sample.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smad2005": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/266", "title": "Array bounds bug", "body": "version 1.9.10714.2, vs2013, vs2015. Warning level: max\n\n```\nusing System;\n\nnamespace MyContractTest2\n{\n    internal enum MyEnum\n    {\n        One,\n        Two,\n        Three\n    }\n\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            var length = Enum.GetNames(typeof (MyEnum)).Length;\n            var arr = new float[length];\n            arr[(int) MyEnum.Two] = 5;\n        }\n    }\n}\n```\n\n> Program.cs(18,13): warning : CodeContracts: Array access might be above the upper bound. The error may be caused by the initialization of length.\n> \n> ```\n> arr[(int) MyEnum.Two] = 5;\n> ```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/264", "title": "Warnings/messages in vs2015", "body": "I'm using version  (1.9.10714.2) from\nhttps://visualstudiogallery.msdn.microsoft.com/1ec7db13-3363-46c9-851f-1ce455f66970 \n\nComparing to vs2013 on **same project**:\n- [ ] in 2015 messages/warnings are absent \n- [ ] showing different issues in code editor window\n- [ ] the result is different in output window ( diff https://www.diffchecker.com/uxk7mw6f )\n\n![vs2015](https://cloud.githubusercontent.com/assets/1619549/10441382/b054bd3a-7150-11e5-8dc3-c46e85a9162c.png)\n### the code:\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nusing System.Diagnostics.Contracts;\n\nnamespace MyContractTest\n{\n    class Program\n    {\n        private int amount;\n        void TakeBottles(int i)\n        {\n            amount += i;\n        }\n\n        int Payday()\n        {\n            int today = amount;\n            amount = 0;\n            return today;\n        }\n        static void Main(string[] args)\n        {\n            string m = null;\n            Writeline(m);\n            Program r = new Program();\n            r.TakeBottles(5);\n            r.TakeBottles(5);\n            r.TakeBottles(-20);\n            Writeline(r.Payday().ToString());\n\n        }\n\n        [ContractInvariantMethod]\n        void InvariantTest()\n        {\n            Contract.Invariant(amount >= 0);\n        }\n\n        static void Writeline(string s)\n        {\n            Contract.Requires(s != null);\n            Console.WriteLine(s);\n        }\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nathan-022": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/265", "title": "Ensures in override not proven", "body": "I have overridden TypeConverter.ConvertFrom and attempted to Ensure the return value is not null. The base TypeConverter class doesn't ensure this, so I am making the postcondition stronger in my custom implementation.\n\nFrom my understanding, inheritance works like:\n- If a subclass overrides the behavior of a method of a base class (or implements and interface), the preconditions it specifies can only be equivalent to or weaker than the base class\n- If a subclass overrides the behavior of a method of a base class (or implements and interface), the postconditions it specifies can only be equivalent to or stronger than the base class.\n\nFrom this description, I should be able to have a stronger postcondition in the subclass (non null return) and have it respected by the analysis tool, however in practice this isn't working.\n\nIs my interpretation incorrect or is this a bug in the static analysis?\n\nSample code:\n\n``` csharp\nCustomTypeConverter converter = new CustomTypeConverter();\nobject converted = converter.ConvertFrom(null, CultureInfo.CurrentCulture, value);\nContract.Assume(converted != null, \"Contracts analysis doesn't realise that the non null return was ensured, the below code gives an 'unboxing null reference' warning\");\nthis = (CustomType)converted;\n```\n\nInside the typeconverter, something like:\n\n``` csharp\npublic override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n{\n    Contract.Ensures(Contract.Result<object>() != null);\n    return \"example\";\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/236", "title": "Contract for TypeConverter.ConvertFrom(object)", "body": "As far as I can tell this is a valid contract, it doesn't appear that ConvertFrom should ever return null - it either successfully returns the conversion or throws a NotSupportedException\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZbynekZ": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/255", "title": "False positive with C# auto-implemented properties without a set accessor ", "body": "The code below is correct but gives a false positive:\n\n```\nusing System.Diagnostics.Contracts;\n\nnamespace ClassLibrary1\n{\n    public class Class1\n    {\n        public Class1(string myProperty)\n        {\n            Contract.Requires(myProperty != null);\n            MyProperty = myProperty;\n        }\n\n        [ContractInvariantMethod]\n        private void ObjectInvariant()\n        {\n            Contract.Invariant(MyProperty != null);\n        }\n\n        public string MyProperty { get; }\n    }\n}\n```\n\nIt reports:\n\nc:\\users\\zbynekz\\documents\\visual studio 2015\\Projects\\ClassLibrary1\\ClassLibrary1\\Class1.cs(7,9): warning : CodeContracts: Invoking constructor 'ClassLibrary1.Class1.#ctor(System.String)' will always lead to a violation of an (inferred) object invariant\nc:\\users\\zbynekz\\documents\\visual studio 2015\\Projects\\ClassLibrary1\\ClassLibrary1\\Class1.cs(11,9): warning : CodeContracts: invariant is false: MyProperty != null\nc:\\users\\zbynekz\\documents\\visual studio 2015\\Projects\\ClassLibrary1\\ClassLibrary1\\Class1.cs(16,13): warning :   + location related to previous warning\n\nChanging the property to\n\n```\n        public string MyProperty { get; private set; }\n```\n\ngets rid of the false positive, but that's not what I want...\n\nObserved with VS2015, CC 1.9.10714.2.\n\nNote: An auto-implemented without a setter is only mutable in the constructor; see https://msdn.microsoft.com/en-us/library/bb384054.aspx .\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IPWright83": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/252", "title": "Errors in the re-compiled IL - VS2015", "body": "I've just found an issue which seems to be originating from CodeContracts after upgrading to Visual Studio 2015. I'm getting a runtime error during execution (NullReferenceException), which appears to be from some incorrectly compiled code. The code however compiles fine with VS2013 (both are targetting .NET 4.5). The issue also goes away in VS2015 if I turn off the `Perform Runtime Contract Checking`. Here's an example of the error in action:\n\n![image](https://cloud.githubusercontent.com/assets/1374775/10015376/aacc0772-6117-11e5-9267-3fb1e06d919f.png)\n\nNotice the really strange this in there is that `this` is throwing a NullReferenceException. So here's the code that's been compiled, where the first constructor has been called, feeding through to the 2nd one:\n\n```\nprivate BusinessContext(): this(default(UInt32), new ElementMnemonic[0], new InstanceIdentifier [0], Option<BusinessFilter>.None)\n{\n}\n\nprivate BusinessContext(UInt32 id, IEnumerable<ElementMnemonic> elements, IEnumerable<InstanceIdentifier> instances, Option<BusinessFilter> filter)\n{\n   Contract.Requires<ArgumentNullException>(elements != null, \"elements\");\n   Contract.Requires<ArgumentNullException>(instances != null, \"instances\");\n   Contract.Requires<ArgumentNullException>(filter != null, \"filter\");\n\n   this.identifier = id;\n   this.elementsSet = new SortedSet<ElementMnemonic>(elements);\n   this.instancesSet = new SortedSet<InstanceIdentifier>(instances);\n   this.filterBackingField = filter;\n\n   //Prepare the cache of values.\n   this.valueHashCache = new Lazy<int>(() => this.HashList(this.instancesSet, HashList(this.elementsSet, filter.GetHashCode())));\n}\n```\n\nYou'll probably need to know some of the internals of `Option<BusinessFilter>` which seems to be the main problem so here's a copy/paste of that entire class:\n\n```\n    public sealed class Option<T> : IOption<T>\n    {\n        private static Option<T> none = new Option<T>();\n\n        /// <summary>\n        /// Implicit cast to opion.</summary>\n        /// <param name=\"value\">\n        /// The value to cast.</param>\n        /// <returns>\n        /// Some value option.</returns>\n        public static implicit operator Option<T>(T value)\n        {\n            return Some(value);\n        }\n\n        /// <summary>\n        /// The none option.</summary>\n        public static Option<T> None { get { return none; } }\n\n        /// <summary>\n        /// Create some value option.</summary>\n        /// <param name=\"value\">\n        /// The value to strore.</param>\n        /// <returns>\n        /// Some value option.</returns>\n        public static Option<T> Some(T value)\n        {\n            return new Option<T>(value);\n        }\n\n        private readonly T value;\n        private readonly bool hasValue;\n\n\n        private Option()\n        {\n        }\n\n        private Option(T value)\n        {\n            this.hasValue = true;\n            this.value = value;\n        }\n\n        /// <inheritdoc/>\n        public T GetValueForce()\n        {\n            return this.Match(() => { throw new InvalidOperationException(\"GetValueForce from a None.\"); }, s => s);\n        }\n\n        /// <inheritdoc/>\n        public bool HasValue { get { return hasValue; } }\n\n        /// <inheritdoc/>\n        public TOut Match<TOut>(Func<TOut> none, Func<T, TOut> some)\n        {\n            return hasValue ? some(value) : none();\n        }\n\n        /// <inheritdoc/>\n        public void Match(Action none, Action<T> some)\n        {\n            if (hasValue)\n            {\n                some(value);\n                return;\n            }\n            none();\n        }\n\n        /// <inheritdoc/>\n        public override bool Equals(object obj)\n        {\n            // If they are the same object then ==.\n            if (object.ReferenceEquals(this, obj))\n                return true;\n\n            // if that (obj as Option<T>) is null then !=\n            var that = obj as Option<T>;\n            if (object.ReferenceEquals(null, that))\n                return false;\n\n            // if the has value marker is different then !=.\n            if (this.hasValue != that.hasValue)\n                return false;\n\n            // if the has value is false on both then ==.\n            if (!this.hasValue && !that.hasValue)\n                return true;\n\n            // if the stored value is the same object then ==.\n            if (object.ReferenceEquals(this.value, that.value))\n                return true;\n\n            // if this stored value is null then not equal.\n            if (this.value == null)\n                return false;\n\n            // compare the stored values.\n            return this.value.Equals(that.value);\n        }\n\n        /// <inheritdoc/>\n        public override int GetHashCode()\n        {\n            return ((value == null) ? 0 : value.GetHashCode()) * 31 + hasValue.GetHashCode();\n        }\n\n        /// <inheritdoc/>\n        public override string ToString()\n        {\n            return hasValue ? \"Some: \" + value : \"None\";\n        }\n    }\n```\n\nSo I've taken a look at the compiled output using Reflector and noticed an obvious difference in the `DisplayClass`, namely that in VS2015 output it hasn't been initialized - explaining why we're encountering the error.\n\nHere is the **working** VS2013 output:\n\n```\nprivate BusinessContext(uint id, IEnumerable<ElementMnemonic> elements, IEnumerable<InstanceIdentifier> instances, Option<BusinessFilter> filter)\n{\n    BusinessContext_<>c__DisplayClass2_0 class_ = new BusinessContext_<>c__DisplayClass2_0 {\n        filter = filter\n    };\n    __ContractsRuntime.Requires<ArgumentNullException>(elements != null, \"elements\", \"elements != null\");\n    __ContractsRuntime.Requires<ArgumentNullException>(instances != null, \"instances\", \"instances != null\");\n    __ContractsRuntime.Requires<ArgumentNullException>(class_.filter != null, \"filter\", \"filter != null\");\n    bool flag = this.$evaluatingInvariant$;\n    this.$evaluatingInvariant$ = true;\n    Func<int> valueFactory = null;\n    this.valueHashCache = null;\n    this.identifier = id;\n    this.elementsSet = new SortedSet<ElementMnemonic>(elements);\n    this.instancesSet = new SortedSet<InstanceIdentifier>(instances);\n    this.filterBackingField = filter;\n    if (valueFactory == null)\n    {\n        valueFactory = () => this.HashList<InstanceIdentifier>(this.instancesSet, this.HashList<ElementMnemonic>(this.elementsSet, filter.GetHashCode()));\n    }\n    this.valueHashCache = new Lazy<int>(valueFactory);\n    class_.<>4__this = this;\n    this.$evaluatingInvariant$ = flag;\n    this.$InvariantMethod$();\n}\n```\n\nand here is the **broken** VS2015 output:\n\n```\nprivate BusinessContext(uint id, IEnumerable<ElementMnemonic> elements, IEnumerable<InstanceIdentifier> instances, Option<BusinessFilter> filter)\n{\n    BusinessContext_<>c__DisplayClass20_0_0 class__;\n    __ContractsRuntime.Requires<ArgumentNullException>(elements > null, \"elements\", \"elements != null\");\n    __ContractsRuntime.Requires<ArgumentNullException>(instances > null, \"instances\", \"instances != null\");\n    __ContractsRuntime.Requires<ArgumentNullException>(class__.filter > null, \"filter\", \"filter != null\");\n    bool flag = this.$evaluatingInvariant$;\n    this.$evaluatingInvariant$ = true;\n    this.valueHashCache = null;\n    this.identifier = id;\n    this.elementsSet = new SortedSet<ElementMnemonic>(elements);\n    this.instancesSet = new SortedSet<InstanceIdentifier>(instances);\n    this.filterBackingField = filter;\n    this.valueHashCache = new Lazy<int>(() => this.HashList<InstanceIdentifier>(this.instancesSet, this.HashList<ElementMnemonic>(this.elementsSet, filter.GetHashCode())));\n    class__.<>4__this = this;\n    this.$evaluatingInvariant$ = flag;\n    this.$InvariantMethod$();\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yyjdelete": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/248", "title": "Code Contracts Editor Extensions 1.9.10714.2 crash when cut/parse unfinished code in VS2015", "body": "```\nFDoIdle failed\nSystem.NullReferenceException: \u672a\u5c06\u5bf9\u8c61\u5f15\u7528\u8bbe\u7f6e\u5230\u5bf9\u8c61\u7684\u5b9e\u4f8b\u3002\n   \u5728 ContractAdornments.TextViewTracker.OnNewComilation(Object compilationObject)\n   \u5728 ContractAdornments.VSServiceProvider.GetNewModel(ITextBuffer textBuffer)\n   \u5728 ContractAdornments.VSServiceProvider.<>c__DisplayClass17.<AskForNewVSModel>b__15()\n   \u5728 ContractAdornments.VSServiceProvider.FDoIdle(UInt32 grfidlef) 0:31.671\nCode Contracts Editor Extensions 1.9.10714.2 14.0.23107.0 Visual Studio failed. 0:31.680\n```\n\n```\nAugmentQuickInfoSession failed\nSystem.ArgumentOutOfRangeException: \u6307\u5b9a\u7684\u53c2\u6570\u5df2\u8d85\u51fa\u6709\u6548\u503c\u7684\u8303\u56f4\u3002\n\u53c2\u6570\u540d: position\n   \u5728 Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindToken(Int32 position, Boolean findInsideTrivia)\n   \u5728 Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia)\n   \u5728 ContractAdornments.IntellisenseContractsHelper.GetTargetAtTriggerPoint(ITrackingPoint triggerPoint, ITextSnapshot snapshot, SyntaxTree parseTree)\n   \u5728 ContractAdornments.QuickInfoSource.<>c__DisplayClass1.<AugmentQuickInfoSession>b__0()\n   \u5728 UtilitiesNamespace.Logger.PublicEntry(Action action, String entryName) 1:53.379\nCode Contracts Editor Extensions 1.9.10714.2 14.0.23107.0 Visual Studio failed. 1:53.382\n```\n\n```\nFDoIdle failed\nSystem.Runtime.InteropServices.COMException (0x80004005): \u9879\u76ee\u4e0d\u53ef\u7528\u3002\n   \u5728 ContractAdornments.ProjectTracker.<OnBuildDone>b__0()\n   \u5728 ContractAdornments.VSServiceProvider.FDoIdle(UInt32 grfidlef) 202:15.791\nCode Contracts Editor Extensions 1.9.10714.2 14.0.23107.0 Visual Studio failed. 202:15.794\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IgorWolbers": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/247", "title": "Object reference not set to an instance of an object in VS2015", "body": "After opening a project in VS2015 I received the following error on a library assembly during the rewrite.\n\n```\n\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@MyProjectccrewrite.rsp\" exited with code -1.\nccrewrite(0,0) : error : Object reference not set to an instance of an object.\n```\n\nThis same assembly has compiled for the last month(s) in VS2013 without any problems. I am using the latest version of Code Contracts in both versions of VS, currently 1.9.10714.2.\n\nAfter much digging and testing I found how this issue can be reproduced. It is probably my use of code contracts at fault but I think that either Code Contracts should be consistent between VS versions OR a more descriptive error message should be shown in all cases.\n\nIt also seems the combination of various factors has to be just right. For instance, I will get a different and sometimes more descriptive error message if I do the following to the example below:\n- Remove 'participantFieldDefinition.DataType == AttributeDataType.String && ' from the Requires method. This yields the additional message `Malformed contract`\n- Remove the assigned values from enumeration value `FieldControlType.TextBoxSingleLine`. This yields message `Error    CC1004  Malformed contract. Found Requires after assignment in method 'Testing.IServiceContract.CreateFieldAsync(Testing.SomeContainer)`. Note that this does not work for any of the other values which leaves me to assume some CodeContract code somewhere is counting on an value of 0 somewhere?\n\n_Side note: I had posted the original question on the MSDN forums, if anyone needs the Code Contract project configuration a screenshot can be found below the code._\n\n_Again, the following code will NOT throw any errors when built in VS2013 with the same version of Code Contracts. I can only reproduce this in VS2015._\n\n```\npublic enum AttributeDataType : byte\n{\n    String = 4\n}\npublic enum FieldControlType : byte\n{\n    TextBoxSingleLine = 6, // above I mention this value, if you remove \" = 6\" then you will get a normal message again\n    DropDownList = 7,\n    RadioButtonList = 8,\n}\npublic sealed class SomeContainer\n{\n    public AttributeDataType DataType { get; set; }\n    public FieldControlType UserControl { get; set; }\n}\n[ContractClass(typeof(IServiceContract))]\npublic interface IService\n{\n    Task CreateFieldAsync(SomeContainer participantFieldDefinition);\n}\n\n[ContractClassFor(typeof(IService))]\npublic abstract class IServiceContract : IService\n{\n    public Task CreateFieldAsync(SomeContainer participantFieldDefinition)\n    {\n        Contract.Requires<ArgumentException>((participantFieldDefinition.DataType == AttributeDataType.String && new[] { FieldControlType.TextBoxSingleLine, FieldControlType.DropDownList, FieldControlType.RadioButtonList }.Any(y => y == participantFieldDefinition.UserControl))\n            , \"There is an incompatible combination\");\n        return default(Task);\n    }\n}\n```\n\n![Code Contract Project Configuration](https://social.msdn.microsoft.com/Forums/getfile/721611)*\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lassche": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/246", "title": "Unit tests locking up after upgrade to Visual Studio 2015 & contracts 1.9.10714.2", "body": "Hello all,\n\nYesterday I upgraded to Visual studio 2015 Enterprise and code contracts 1.9.10714.2. Using the same settings that we previously used, our unit tests lock up the execution the moment they hit the first code contract. \n\nToday I've managed to reproduce it in an isolated sample (see below). After some investigation it turns out that the options 'Standard Contract Requires', turning off 'Perform Runtime Contract Checking' and setting 'DoNotBuild' are causing the lock up. Turning on 'Perform Runtime Contract Checking' avoids this freeze. \n\nIs this expected behaviour ?\n\nCheers\n Mark\n\nEdit 1: I noticed that the reason for the change to the configuration in our project is due to one of the projects breaking after the upgrades in  the cc rewrite step. The message is \"Object reference not set to an instance of an object\". Any suggestions on how to debug this would be welcome.\n\nEdit 2: I noticed the rewrite (probably?) fails because there was a contract that contained methods that were never cleaned up when the methods were removed from the interface. After removing these methods from the contract the class compiled without problems. \n\n```\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Diagnostics.Contracts;\n\nusing AClassLib;\n\nnamespace CodeContractTest\n{\n    class InternalExample\n    {\n        public InternalExample( object o )\n        {\n            Contract.Requires<ArgumentNullException>(o != null);\n        }\n    }\n\n    [TestClass]\n    public class UnitTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n            // the following line will never return when building with 'Standard contract requires'\n            // 'Perform contract checking 'Full'' turned off  and 'DoNotBuild'\n            var internalExample = new InternalExample(\"x\");\n        }\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/246/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "k59319": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/245", "title": "Rewrite aborted on System.Runtime.CompilerServices.ExtensionAttribute", "body": "I can't build my project after updating SharePoint Online CSOM through Nuget. Build fails on ccrewrite with the following error.\n\nReading assembly 'Microsoft.SharePoint.Client.Runtime' from ...\\packages\\Microsoft.SharePointOnline.CSOM.16.1.3912.1204\\lib\\net40-full\\Microsoft.SharePoint.Client.Runtime.dll' resulted in errors.\n    Could not resolve type reference: [mscorlib]System.Runtime.CompilerServices.ExtensionAttribute.\n    Could not resolve member reference: System.Runtime.CompilerServices.ExtensionAttribute::.ctor.\nccrewrite : error : Rewrite aborted due to metadata errors. Check output window\n\nI use Code Contracts extension v.1.9.10714.2 and Visual Studio 2015.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TonyFtescht": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/244", "title": "The toolset requires .Net v3.5 installed even when the projects target v4.x builds.", "body": "Hello,\n\nappreciate all the quality work put in the project!\nI recently came across a curious \"behavior\" that I think might be worth reporting here. My dev. machine comes with .Net Framework installed from the v4.0 up; no v3.5 that is. What happens when I try to build my 'code-contracted' solution is VS reports back with the following error:\n\n_The \"Microsoft.Research.CodeContractsAnalysis\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\MsBuildCodeContracts.dll. Could not load file or assembly 'Microsoft.Build.Utilities.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask._\n\nI am running 1.9.10714.2 on VS2015 Comm. The solution in question is a single project UWP app targeting Windows 10 (10.0; Build 10240) and built against x64 configuration. There's no explicit mentioning of v3.5 as far as the solution is concerned.\n\n![capture](https://cloud.githubusercontent.com/assets/10733792/9851181/ef9ab41e-5b29-11e5-892b-9646dbc498fb.JPG)\n\nCheers,\nTony\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TommyBoy-WA": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/241", "title": "Visual Studio 2015 Reports Code Contracts upgrade available after successful install", "body": "###### Visual Studio 2015 Reports Code Contracts upgrade available after successful install, even after repair.\n- VSTS 2015 Extensions and Updates utility reports update available\n  - Current Version 1.8.10107.10\n  - New Version: 1.9.10714.2\n- VSTS 2015 Project Code Contracts property page reports installed version 1.9.10714.2\n###### Attached screenshots:\n\n![screenshot-code-contracts-update-error-001](https://cloud.githubusercontent.com/assets/14142344/9701198/1d6b20d4-53d4-11e5-9d48-7f9ccd454514.png)\n\n![screenshot-code-contracts-update-error-003](https://cloud.githubusercontent.com/assets/14142344/9701230/c0c65faa-53d4-11e5-8ec0-45d431825af1.png)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rkeithhill": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/240", "title": "ccrewrite exited with code 1", "body": "I have only turned on runtime checking with only \"Perform Runtime Contract Checking\" checked and set the dropdown to \"Preconditions\".  I'm on 1.9.10714.2 and am running VS 2015. \n\nIs there a upcoming release to fix this issue and the bogus update issue?  VS 2015 thinks I need to update from 1.8.10107.10 to 1.9.10714.2 when I already have the latter installed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "glatzert": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/231", "title": "CodeContracts fail with CONTRATS_FULL reference in ASP.net vNext", "body": "I made a little project (ASP.net vNext DLL Template) with a test project. The test project uses xunit and xunit.runners.dnx. Running the test will fail on Contact.Requires<TException>(a != null) with a hint to `CONTRACTS_FULL` being set somewhere.\n\nHow can Code contracts be used in new ASP.NET Projects?\nCan they be used at all? Or are contracts now \"deprecated\"?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/231/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jterry75": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/228", "title": "Can we publish System.Diagnostics.Contracts.dll as a nuget package for coreclr?", "body": "I have been doing a lot of development lately with VS 2015 and the coreclr. The top three profiles are\n\nNETFramework\ndnx451\ndnxcore50\n\nIn the project.json with a framework assemblies included in the NETFramework and dnx451 sections you can use CodeContracts but then no builds/references can be in dnxcore50. We basically need a nuget package that for dnxcore50 distributes the package in \\libs\\dnxcore50\\System.Diagnostics.Contracts.dll and has a reference spec for NETFramework and dnx451 into frameworkAssemblies. IE:\n\n``` js\n{\n    //...\n    //... Code Contract Package Info\n    //...\n    \"frameworks\": {\n        \"dnx451\": {\n            \"frameworkAssemblies\": {\n                \"System.Diagnostics.Contracts\": \"\"\n            }\n        },\n        \"dnxcore50\": {}\n    }\n    // ...\n}\n```\n\nFor reference. take a look at https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.DataAnnotations/project.json where the dnx451 file is included in the .NET Framework but the coreclr redist library is built standalone.\n\n-Justin\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/228/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericstj": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/227", "title": "CCRefGen is broken when using -whatToEmit ExtVis|NonPrivate", "body": "I was experimenting with using this tool to generate reference assemblies and found that the -whatToEmit argument seems to be broken.\n\nI tried the following:\n\n```\n\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrefgen.exe\" --whatToEmit ExtVis MyAssembly.dll\n```\n\nFirst problem I hit was\n\n```\nAsmMeta failed with uncaught exception: Object reference not set to an instance of an object.\nStack trace:    at AsmMeta.DeleteThings.Rewrite(List`1 customAttributes)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(ResourceReference resourceReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(IResourceReference resourceReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(List`1 resourceReferences)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Assembly assembly)\n   at AsmMeta.DeleteThings.RewriteChildren(Assembly assembly)\n   at AsmMeta.AsmMeta.Run()\n   at AsmMeta.AsmMeta.RealMain(String[] args)\n   at AsmMeta.AsmMeta.Main(String[] args)\n```\n\nI worked around this in the debugger by initializing `assembly.Resources[0].attributes` to an empty list.  I do see that ResourceReference has two different implementations of Attributes, the default returns null, the explicitly implemented IResourceReference.Attributes will return an empty enumerable.  Perhaps MetadataRewriter.RewriteChildren should be calling this one instead?\n\nThe next problem I hit was\n\n```\nAsmMeta failed with uncaught exception: Unable to cast object of type 'Microsoft.Cci.MetadataReader.ObjectModelImplementation.CustomAttribute' to type 'Microsoft.Cci.MutableCodeModel.CustomAttribute'.\nStack trace:    at AsmMeta.DeleteThings.Rewrite(List`1 customAttributes)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(UnitReference unitReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Unit unit)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Module module)\n   at AsmMeta.DeleteThings.RewriteChildren(Module module)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren\nRewriteChildren(Assembly assembly)\n   at AsmMeta.DeleteThings.RewriteChildren(Assembly assembly)\n   at AsmMeta.AsmMeta.Run()\n   at AsmMeta.AsmMeta.RealMain(String[] args)\n   at AsmMeta.AsmMeta.Main(String[] args)\n```\n\nTo workaround this I just cleared the collection to avoid the cast exception (just as a hack to get further in exectution).  I then hit another exception:\n\n```\nAsmMeta failed with uncaught exception: Object reference not set to an instance of an object.\nStack trace:    at AsmMeta.DeleteThings.Rewrite(List`1 customAttributes)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(UnitReference unitReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(ModuleReference moduleReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(AssemblyReference assemblyReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(IAssemblyReference assemblyReference)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.Rewrite(List`1 assemblyReferences)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Module module)\n   at AsmMeta.DeleteThings.RewriteChildren(Module module)\n   at Microsoft.Cci.MutableCodeModel.MetadataRewriter.RewriteChildren(Assembly assembly)\n   at AsmMeta.DeleteThings.RewriteChildren(Assembly assembly)\n   at AsmMeta.AsmMeta.Run()\n   at AsmMeta.AsmMeta.RealMain(String[] args)\n   at AsmMeta.AsmMeta.Main(String[] args)\n```\n\nAnother version of the first problem.  At this point I gave up.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "huwman": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/226", "title": "ccdocgen crash issue when using from Visual Studio 2015", "body": "I receive the following issue when attempting compilation in Visual Studio 2015 (Worked in 2013):\n### OUTPUT:\n\nProcess is terminated due to StackOverflowException.\n1>C:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild\\v14.0\\Microsoft.CodeContracts.targets(642,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccdocgen.exe\" \"@obj\\Debug\\Fortis.CSharpccdocgen.rsp\"\" exited with code -1073741571.\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n### Configuration:\n\n![image](https://cloud.githubusercontent.com/assets/517831/9466565/fb4899ba-4b35-11e5-9965-c729fb831431.png)\n\nPlease assist.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sharwell": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/212", "title": "Likely error with MEF cache in 2015 RTM", "body": "Since the Editor Extensions extension uses the same mechanism as my Inheritance Margin extension to ship support for multiple versions of the C# IntelliSense engine in a single VSIX, it is very likely that it is being affected by the Visual Studio 2015 RTM bug which caused tunnelvisionlabs/InheritanceMargin#6. Prior to Visual Studio 2015 Update 1, the same workaround can be employed in this project to ensure users are not affected.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/167", "title": "Update buildCC.bat to check return codes", "body": "Currently buildCC does not check return codes from the various calls to other scripts. This can lead to two problems:\n1. If the code tools fail to build, the installer will still be created but it will use an old version of the code tools and #137 will reappear. The build logs must be manually inspected after each build to make sure it was successful.\n2. In some cases, AppVeyor currently reports the build was successful even when it fails.\n\nWhen one of the build scripts results in an error, the build should be stopped and the error code propagated back to the caller.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/104", "title": "Consider restoring Contract.Ensures lines in Math.Abs", "body": "Pull request #85 removed several calls to `Contract.Ensures` from `Math.Abs(float)` and `Math.Abs(double)`. Consider restoring these calls, as described in the comments in #85.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/90", "title": "Optimize code generation for common cases of Requires<TException>", "body": "Currently the rewriter produces verbose code for the following:\n\n``` csharp\nContract.Requires<ArgumentNullException>(param != null, \"param\");\n```\n\nIn release builds, I would expect this to be rewritten exactly as:\n\n``` csharp\nif (!(param != null))\n  throw new ArgumentNullException(\"param\");\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/90/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/77", "title": "Configure a CI server for the project", "body": "CI services which integrate with GitHub pull requests have proven very valuable during the code review process on other open source projects I've worked on. I believe we should work to configure one of these (e.g. AppVeyor) as early as possible.\n\nNote that this may require some number of tests be disabled, either due to timing constraints or failures. If this situation arises, we can simply run the other tests on the CI service initially, and work to enable the remaining tests as the underlying problems are resolved.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/6", "title": "CCR solution references non-existent projects", "body": "The solution **CCR.sln** references a set of projects which are not part of this repository.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/6/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5918ad2829b2bdc260c4a2c41bcdf2bbb354b305", "message": "Replace references with project references where applicable"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/678aee73c9ed01b417b59498bfcd6ddece3e6780", "message": "Use VSSDK packages from NuGet"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5321f96e0c30312b0f97389294a351fca93111be", "message": "Updated CodeTools10 build to support Visual Studio 2015"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3519ba8f55dd814f1da2c4e7e88bff975c3e694c", "message": "Move System.Compiler.xml so it stops changing during every build"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/37a88ddb37c7038a940d900a6bdb182c10f95a63", "message": "Fixed compilation errors in ClousotCacheTests"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69343081", "body": "This is something I can probably take a look at, but it could be a few days.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69343081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69348222", "body": "@reitzmichnicht Thanks for that update. I've worked with this DLL successfully in a single VSIX which supports Visual Studio 2010 through 2015:\n\nhttps://github.com/tunnelvisionlabs/InheritanceMargin\n\nI'll look into implementing a similar strategy here.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69348222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72192275", "body": "This method is not annotated _by design_. Many methods of the `Contract` class, such as `Requires` (the non-generic form) are only enabled when specifically requested. In many ways, they are similar to `Debug.Assert`, provided for the purpose of explicitly stating conditions and verifying them during debug builds, but disabled during final releases (with no runtime checking overhead in the final release).\n\n`Requires<T>`, on the other hand, is an expression of behavior that should _always_ occur in the application. For example, this contract can be used on public API surfaces in libraries where external callers may not be using Code Contracts and expect particular exceptions to be thrown in response to invalid inputs. Code using this method must always use the rewriter, yet still has the option of defining or removing the `CONTRACTS_FULL` preprocessor directive to control the runtime behavior of all other contracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72192275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111814818", "body": "I would prefer to not keep updating binary files inside the repository like this. Would it be possible to instead wrap this tool inside of a NuGet package, and just update this repository to reference the NuGet package?\n\nEdit: Please see my comment in issue #53 regarding the NuGet bug. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111814818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111815002", "body": "@hubuk As a workaround, I would prefer the following combination:\n1. Create a dummy project file in the folder containing **packages.config**.\n2. Do not add the project file to a solution.\n3. Create an issue in this repository to remove that project file after a NuGet release is published which does not have this bug.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111815002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111826185", "body": "If that is the case, then you could simply close the issue from my step 3 as **wontfix**. Either way it will continue to work and then we don't have to keep updating binaries in the repository. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111826185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111878399", "body": "@hubuk It's really just about keeping it light. The things you put in Git will become part of every clone operation... forever.\n\nManual updates to new versions is a good way to go. Otherwise when you change ILMerge in the future, it could affect the output of building an old version of Code Contracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111878399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111880850", "body": ":+1: This addresses the _bug_ identified in #30.\n\n:bulb: I highly recommend creating a new issue to address the sub-optimal paths used for this property. This enhancement was mentioned in #30 and applies to each of the targets files for the various MSBuild versions.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111880850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887570", "body": "I need to take a closer look at this. I have a set of NuGet packages designed specifically to address these concerns with greater assurance, all without adding the binaries to source control.\n\nI'm :-1: on this particular approach, not because it won't work but because there is an easier, cleaner way.\n\nI'll add more information soon.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887665", "body": ":thought_balloon: The alternative to this is to distribute the MSBuild tooling exclusively as a NuGet package starting with the Visual Studio 2015 support, and use that as a model for transitioning the older tools as well.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887706", "body": ":question: @hubuk Where would a regression test for this be added?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887796", "body": ":exclamation: I think this pull request needs to be closed. Changes pushed to **tom-englert/master** after this pull request was created were automatically appended to this pull request, and I don't think that was intended.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887912", "body": ":question: Where does the source code for this dependency live? Is it, or can it be, distributed through NuGet? Tracking arbitrary versions in the code base like this tends to be problematic over time; when we update dependencies we should make the effort to update them to more reliable references.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111887912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111890466", "body": ":exclamation: I think this should be updated to build the new project as part of the build script, and continue to exclude the compiled binary from source control.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111890466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111891061", "body": ":bulb: The build script should not be directly modifying files which live in source control. Eventually this build step will need to be replaced by either a build step that copies the file to the intermediate output directory and applies the transformation there, or moved to be a separate process which is executed to update version numbers on-demand when official releases are made.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111891061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112081332", "body": "@yaakov-h CodeLens in Visual Studio does not use `-w`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112081332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112090140", "body": "@yaakov-h Three other places that don't use `-w`:\n1. GitHub's [Blame feature](https://github.com/Microsoft/VisualStudio-TestHost/blame/71a627367865d9263a7d92afa99707e1463f6c04/BuildVSTestHost.ps1)\n2. GitHub's [graphs page](https://github.com/Microsoft/VisualStudio-TestHost/graphs/contributors)\n3. Most users using Git from the command line\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112090140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112159758", "body": "@hubuk I made an initial pass through this. I plan to resolve this issue as follows:\n1. Use a single project/assembly for the **Adornments** code targeting Visual Studio 2010+. This is easy since the project does not depend on any newer/incompatible APIs.\n2. Use a single project/assembly for the **ContractAdornments** code targeting Visual Studio 2010+. The only difficult part here is a dependency on the C# language service which is specific to specific versions of Visual Studio. To resolve this, I plan to use exactly the same approach that I used for my [Inheritance Margin](https://github.com/tunnelvisionlabs/InheritanceMargin) extension (which depends on exactly the same set of assemblies).\n   - Move the code which requires the C# language service to a set of small assemblies that are tied to specific versions of Visual Studio\n   - Load the correct assembly at runtime\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112159758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112220357", "body": "> I suspected that there are no differences between these projects other than referenced assemblies.\n\nThere is not. This will be a relatively easy update.\n\n> It would be best to have Visual Studio extension libraries accessible via NuGet but unfortunately Microsoft has not published them for dev10.\n\n@hubuk Microsoft has not. [But I have.](https://www.nuget.org/packages?q=owner%3Asharwell+tag%3Avssdk)\n\nEdit: [This is the set](https://www.nuget.org/packages?q=owner%3Asharwell+tag%3Avssdk+tag%3Avs2010) of packages supported by Visual Studio 2010.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112220357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112220964", "body": "@hubuk By the way, in case you are not familiar, you can see an overview of the emoji I use in comments and their meaning [on this page](https://github.com/openstacknetsdk/openstack.net/blob/master/CONTRIBUTING.md#emoji).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112220964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112222038", "body": "I think this is definitely on the right track. With the `nuget restore` command relocated (see my comment) I believe it will be ready to merge.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112222038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112284049", "body": "You should probably make a decision on #61 (for or against) before anything else.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112284049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112284573", "body": "I'm actively working on updating the Visual Studio extension code to work as a single VSIX seamlessly across Visual Studio 2010 through 2015. It's very similar to one of my other open source extensions so I'm comfortable with the work. I'll have the code finished tomorrow or Wednesday; I'll send a pull request at that point even though the _installer_ will be broken, and we can discuss the best approach to use for that.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112284573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112285773", "body": "I highly recommend that _if_ we do this, we do it by adding the StyleCopAnalyzers analyzer to the project. It will both check style and offer to correct violations easily, efficiently, and (perhaps most importantly) accurately. It does not require the installation of 3rd-party extensions to Visual Studio, and it does not require the user modify their Visual Studio settings to match those of the project.\n\nI recently added targeted support for certain alternative naming conventions and rules for the use of curly braces. If you are interested in looking into this approach as a possibility, my suggestion would be to first review the [StyleCop rules](http://www.stylecop.com/docs/) and provide feedback on any rules which you foresee as a problem. For those rules, if StyleCopAnalyzers has an alternative available we can use that instead.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112285773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286067", "body": "@SergeyTeplyakov This can be closed; it's answered by #59 and #62.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286422", "body": "I haven't used that tool; I'm not opposed to it as the first step.\n\nI would prefer the rewrite not touch the Visual Studio extension code, as that would invalidate much of the work I've been doing. Or delay the rewrite until after I get that pull request submitted.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286600", "body": "@SergeyTeplyakov Aside from the addition of a **.gitattributes** file, pull request #61 _only_ changes `\\r\\n` line endings in the repository to `\\n`. Git always stores text files internally with `\\n` line endings, and then uses settings of the individual developer's system to determine whether they appear as `\\n` or `\\r\\n` when they are checked out.\n\n~~Edit: Ignore me I started it.~~\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112286600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112287886", "body": "It's a no-brainer to take care of formatting for some items at the time they are added, such as the files that will be added to resolve #6. For the others, it's probably best to put a feeler out regarding any ongoing work, announce the intent to format a particular project in X days, and then if no one objects for outstanding work do the reformat. X=3 is likely to work well for people who are in different time zones and may have different weekend days.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112287886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112289727", "body": "@SergeyTeplyakov If the change is split, then Git will not allow users to commit text files without resaving the whole file. It's a major headache.\n\nExternal merge tools will be unaffected by my change because it changes the way files appear in the database but not the way they appear on disk. GitHub _might_ not automatically merge pull requests made before this date, but you'll be able to merge them on your own machine without problems. When you push a merge commit like that back to GitHub, no one will be able to tell the difference between that, and a commit you merged in the GitHub UI. I can help with the specific commands if it does end up negatively affecting a pull request you want to merge.\n\nFurthermore, my changes to the VSIX packaging are already based on top of the changes in #61 so I would be completely unaffected. :smile: \n\n:memo: If you do a diff of the file system before #61 and after #61, the only files that would actually appear to have changed are files that previously had an inconsistent mix of `\\r\\n` and `\\n` line endings. A few such files did exist, but not nearly as many as you'd think from the size of the pull request.\n\n:sleepy: It's late, back for more tomorrow!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112289727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112432565", "body": "I've been using [this set of labels](https://github.com/tunnelvisionlabs/dotnet-trees/blob/master/CONTRIBUTING.md#labels) for the StyleCopAnalyzers project. This project will certainly require a few unique labels as well:\n- Missing reference contracts\n- Erroneous reference contracts\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112432565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112539923", "body": ":+1: My immediate concerns have been addressed and @hubuk and myself are on the same page now.\n\n@SergeyTeplyakov I think this can be the second PR to merge.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112539923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112936155", "body": "Yes, my solution for the VSIX distribution only uses one vsixmanifest file.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112936155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112937513", "body": "This is an obviously superior strategy to the previous executable. Good job on that.\n\nMy only real question is whether we want to wait for me to finish refactoring the VSIX or not. It shouldn't be too much more work.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112937513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112940709", "body": "That works for me :smile:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112940709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113010594", "body": "@SergeyTeplyakov The copyright headers question is for you and/or Mike and/or similar.\n\n@hubuk Do you want to see this merged before the setup scripts are updated for it, or afterwards?\n\nAside from the `[ProvideBindingPath]` issue which is straightforward for me to correct, I don't have any immediate plans to change this pull request until I get more feedback about the direction. :smile:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113010594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113010758", "body": ":thought_balloon: The `[ProvideBindingPath]` attribute likely eliminates much (or all?) of the need for using ILMerge on the contents of the VSIX.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113010758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113200475", "body": "@tom-englert I can help with restoring #21 to a clean state. We probably don't need to document the branching model as long as we stay close to one of the most common ones on GitHub, which we currently are. The basic idea is just this:\n1. Fork the repository to your profile\n2. Create a new branch which will contain your changes\n3. Commit your proposed changes to the branch\n4. Push the branch to your fork\n5. Send a pull request\n\nThe problem with #21 is you used **master** for step 2/3. The branch is in your fork, so you were able to send a pull request, but failing to use a unique branch for just the contract changes meant future commits to tom-englert/master also showed up in the pull request. It's a problem that appears from time-to-time, but once you get the pattern down you'll be able to work on most GitHub projects. If we were to make some nice documentation for brand-new users, it would probably make sense to do so at a very high level, such as a document written (or aggregated) by the .NET Foundation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113200475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113203884", "body": "This is (presumably) superseded by #66.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113203884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113216658", "body": "@hubuk This is now complete (i.e. ready for review) aside from the required changes to the installer. How would you like to proceed?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113216658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113342784", "body": "I too would appreciate the review :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113342784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113343969", "body": "Looking at the issue list, I believe the project could benefit from two additional labels:\n\n| Label | Meaning on Issue | Meaning on Pull Request |\n| --- | --- | --- |\n| erroneous contract | The issue concerns an incorrect contract in the reference source code | The issue concerns an incorrect contract in the reference source code |\n| missing contract | The issue concerns a missing contract in the reference source code | The issue concerns a missing contract in the reference source code |\n\nThe **erroneous contract** and **missing contract** labels are the equivalent of **bug** and **enhancement** respectively, and are used when talking about contracts for the reference source code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113343969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113347913", "body": "I would feel comfortable with a **contract** issue (or similar), where in addition to that label we can apply **bug** if the code already has a contracts but the contract is incorrect, or **enhancement** if the update is simply an improved contract representing existing behavior.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113347913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113348820", "body": "@aarondandy The primary benefit I see to the **contract** tag is many contributors will feel comfortable updating reference contracts but might not feel comfortable editing the implementation. I want those users to have quick/easy access to our list of outstanding issues that they're more likely to be able to help with. :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113348820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113519567", "body": "@tom-englert If I were working on a feature like you describe, I would have done the following locally:\n1. Create a branch **fix-reference-contracts** (other people use other names)\n2. Commit the changes for reference contracts to the **fix-reference-contracts** branch\n3. Push the **fix-reference-contracts** branch to my fork on GitHub, and submit a pull request\n4. Create a branch **tmp-working** which will include multiple pull requests that have not yet been merged (after they are merged into **master** I won't need the temporary working branch)\n5. Merge **fix-reference-contracts** into **tmp-working**\n6. Merge hubuk's branch into **tmp-working**\n7. Merge any other PRs I need into **tmp-working**\n\nIn the above set of steps, **fix-reference-contracts** always reflects the content of the pull request to update reference contracts, and **tmp-working** allows me to keep making progress even if that branch (or others) hasn't been merged yet.\n\n> Restoring a \"clean\" state would mean removing all changes that were not done by me, except for one single commit by hubuk. How would that work?\n\nLet me clone your fork and take a look at its current state. I'll get back to you.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113519567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113525388", "body": "@tom-englert In your scenario, there are two things to look into:\n- You can switch between branches quite freely:\n  1. After merging hubuk's changes into **tmp-working**, switch back to the **fix-reference-contracts** branch and make your change (labeled commit 5 in your list) there. When you push the updated **fix-reference-contracts**, only that one commit will be added to the PR.\n  2. Then switch back to the **tmp-working** branch, and merge **fix-reference-contracts** into **tmp-working** again. **tmp-working** will continue to have hubuk's changes, and now will also have the code you mentioned for commit 5. And **fix-reference-contracts** will still only have the items you want as part of the PR.\n- You can \"take\" a single commit from [mostly] anywhere by using a [cherry pick](http://git-scm.com/docs/git-cherry-pick). However, you really should not be needing this on any type of regular basis; a good branch/merge strategy provides a more maintainable workflow.\n\nDon't stress too much about these issues. I'm still trying to get some of the basic build infrastructure back in shape but I will definitely help you pull out the contract changes so you can create a new PR with them.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113525388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113526881", "body": "@tom-englert Not sure how you're using Git, but I'll give you my Number 1 Git Pro-tip.\n\n**Use [Git Extensions](https://github.com/gitextensions/gitextensions/releases/latest)**\u00b9\n\nWhen you use the GUI, you'll always be able to see which branch you are working in along with its relation to all other branches. It makes it much more difficult to make commits where you aren't expecting them.\n\nI avoid the command line to the maximum extent possible, which in practice means the only time I use the command line is when the code review tools used by a project were not designed to work well with Git. I don't think I've ever needed the command line for working on a GitHub project.\n\n\u00b9 GitHub for Windows is not a viable alternative at this time, because it will not provide you with the same consistent high-level visual overview alongside access to all the standard Git commands.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113526881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114114780", "body": "@hubuk @billings7 Pull requests created prior to #61 will show merge conflicts in the GitHub UI, but in many cases will not actually have merge conflicts when the merge is run from the command line (and/or the merge conflicts are automatically resolved).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114114780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115124080", "body": "@SergeyTeplyakov \n1. This occurred for the same reason #21 had issues. Pull request #68 was sent from your **master** branch, so when you later updated your **master** branch the new commits were automatically appended to the pull request. I included additional information about this scenario in #62.\n2. I think it would make sense to force-push to the **master** branch here to revert #68 by completely removing the commit from history. This is something we want to avoid in the future, but little (if any) work has been created on top of the current **master** branch and the repository currently contains new binary files which will never be used.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115124080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115127545", "body": "I partially reviewed this pull request so far. The first two things I note are:\n1. The pull request has definitely been updated at this point to no longer include the changes mentioned in my previous comment.\n2. This pull request is large; the biggest challenge is it contains all of 1) items that _need_ to be merged because they fix errors in the code base (e.g. existing contracts which are flat wrong), 2) items that would be nice to merge because they improve the quality of the code base (e.g. new contracts), 3) items which I am unsure about at this point (e.g. the creation of a new solution file), and 4) items which I would prefer not to merge as part of this pull request (e.g. the large numbers of changes to code formatting which isn't related to the contracts).\n\nConcern was expressed in #62 regarding conflicts in this pull request. I am not very concerned about this right now for the following reasons:\n1. The current conflicts (the reason GitHub doesn't want to merge it) are not a problem for a manual merge of this pull request. @tom-englert would not need to make any changes to this pull request in order for a successful merge to be made.\n2. The ongoing pull requests for build improvements don't overlap or conflict with the primary improvements in this pull request, so it will be relatively easy to prevent new conflicts from arising.\n\nAs long as this pull request gets merged before #63 is merged, I believe we are fine.\n\n:question: @tom-englert I've been focused on getting the standard build process updated with the new tooling required for IL rewriting to support the Visual Studio 2015 build tools, and for the editor extensions to support Visual Studio 2013. With the understanding that I really want to get this merged, would you be OK with waiting for me to do a more extensive code review after the build process is updated to account for foundation items like #57, #60, and #66? At that time, if you want I could even prepare new pull requests containing targeted subsets of this code in order to address my concerns about the size of this pull request, without you needing to do any more work on it.\n\nLike I said, this pull request is very important to me. I believe it represents the type of work the majority of Code Contracts contributors will provide over time.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115127545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115440557", "body": "#66 adds editor support for Visual Studio 2013, and a clear stepping stone for providing support for 2015 in a follow-up pull request. Initially I worked to modify the shared code to support both 2010-2013 and 2015, but the differences in 2015 turned out to be sufficiently complex that I'm planning to instead split the 2015-specific details into their own directory in the source tree. This would not affect our ability to ship a single VSIX that supports all versions of Visual Studio.\n\n**tl;dr** Editor extension support for 2013 is already implemented (#66). 2015 is in progress, but I can't be certain when it will be finished.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115440557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115503915", "body": "In my previous comment, I was simply stating the current state of the items I was working on. Regarding the milestones, I would probably put all the issues into a single milestone initially. Then if one set of features reached completion and the other set still had significant work left, I'd split it at that point by simply moving all the remaining open issues from the first milestone to a new one.\n\nThe biggest issue for my code is ccrewrite functionality. We use `Contract.Requires<TException>`, which means without ccrewrite support Visual Studio 2015 is completely unusable for our project. I have not yet tested to see what is required, but I'm hoping to start testing this on Sunday (by \"this\", I mean the several open pull requests which are intended to solve some or all of the currently known problems).\n\nI'm also thinking it would be a good idea to create a gitter room for the project, even if it means changing the room and losing history when the project moves to a new GitHub organization.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115503915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115506101", "body": "@SergeyTeplyakov I think this can be closed. The labels are likely to evolve over time, but this is a start.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115506101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115515472", "body": "My recommendation is to disable any tests we are not currently confident in. There are multiple ways to do this if you are running with AppVeyor.\n1. You can [disable the tests altogether](https://github.com/openstacknetsdk/openstack.net/blob/fb6ca3fa778e955eee9b0387e8fcf60b033a2a5e/appveyor.yml#L9), which provides immediate confirmation of a successful build.\n2. You can selectively include assemblies containing only tests that are expected to pass.\n3. You can create a special attribute which is applied to tests which are not 100% expected to pass, and only run tests without that attribute. For example, the [**WebRequest**](https://github.com/rackerlabs/dotnet-threading/blob/bbd30bdcc5991768dc367e41858c25043bd9c3f4/appveyor.yml#L13) is used to filter tests in one of my test suites.\n4. You can create a special attribute which is applied to tests which are expected to pass, and only run tests with that attribute. For example, the [**Unit**](https://github.com/openstacknetsdk/openstack.net/blob/8ad5dabe635942f9013705193c2f95331b1ce905/appveyor.yml#L17) category was applied to tests expected to pass in one project I worked on.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115515472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116441880", "body": "I added 3 commits which are the first part of editor support for VS 2015. Locally I only have 2 more methods to implement (`GetAnyCallNodeAboveTriggerPoint` and `GetTargetAtTriggerPoint`) before I can test the editor extensions within Visual Studio 2015. I didn't include all of those changes yet because it would break this pull request in the interim - as is, we can still merge this pull request whenever the review of the pre-2015 support is complete.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116441880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116444701", "body": "This pull request only deals with the editor extensions. The other compatibility issues for VS 2015 are actually not due to the IDE itself, but rather the new build tools (MSBuild 14.0 and Roslyn-related differences in the IL).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116444701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118366007", "body": "I haven't tested this, but from the comments I felt I clearly understood both the problem and the way it's being solved (it makes my day when I see this happen). I'm not sure whether or not my requested change is feasible. Hopefully someone with more SQL experience can verify that the code is the best (or good enough) solution to the described problem but otherwise :+1:. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118366007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118380444", "body": "First of all, this pull request was a **massive** improvement over #21, in terms of ability to focus the review on changes to contracts. Great job with that, I know it must have been a lot of work. :+1: \n\nYou've given me a lot to think about. I'll be filing some \"interesting issues\" (IMO) as a result. Also :+1: for this.\n\nI'll read over the answers to the questions later today.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118380444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118410457", "body": ":thought_balloon: For immutable value types (e.g. `Rect`), it would be nice to have a way to mark that the value of a method or property is not only pure, but also will never change result over the life of the object. This annotation would allow a trait such as `Contract.Assume(rect.IsEmpty)` to be propagated more efficiently with the instance (once `IsEmpty` => always `IsEmpty`).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118410457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118961040", "body": "@brettshearer Keep in mind #66 includes _substantial_ changes to the project containing the file you are referring to.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118961040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119284846", "body": "It produces this:\n\n``` csharp\n__ContractsRuntime.Requires<ArgumentNullException>(array != null, \"array\", \"array != null\");\n```\n\nWhich is efficient for the \"fast path\", but terrible for cases where the exception does get thrown (significant use of reflection APIs).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119284846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119337978", "body": "I should add, I see this as a special case for the behavior when the rewriter is configured for **ReleaseRequires** contract checking only. I use this mode for shipping assemblies, and do not expect (or want) a contract failed event to occur. I'm also not expecting consuming code to be using Code Contracts (relevant for the bug case). `Contract.Requires<TException>` is essentially used at the public interface boundaries and for release it would be ideal for it to behave the same way as any other \"normal\" .NET module behaves for argument validation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119337978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119365588", "body": "@mike-barnett I did interpret your comment according to that.\n\n@SergeyTeplyakov I considered that approach, but it comes with its own downsides. In particular, with rewriting I can associate the contracts with a `public` interface and they will be automatically inserted in my `internal` implementation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119365588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119644139", "body": ":exclamation: If available, we should pull the Roslyn binaries from NuGet instead of adding them to this pull request.\n\nIf the binaries are available on NuGet, we can add a file **.nuget/packages.config** which declares the dependency, [like I did here](https://github.com/tunnelvisionlabs/antlr4cs/blob/master/runtime/CSharp/.nuget/packages.config) for the IKVM dependencies in the ANTLR 4 C# target (which don't apply to any specific project). Then we just update the paths to reference the binaries under the **packages** folder instead of the binaries you included in this pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119644139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119646349", "body": ":memo: I'm going to run a quick test and see if I can send a pull request that changes the current code to use NuGet instead of embedded binaries (no other changes). Then you can update this pull request so commit c1767c5 just updates the version number in **packages.config** and perhaps a path, but otherwise works and is much simpler.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119646349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119653239", "body": "@mike-barnett No, the opposite. I understood them the way you meant from the start. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119653239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119659379", "body": ":exclamation: So, it turns out the new Roslyn binaries weren't added to this pull request which means two things:\n1. It's easier to add them from NuGet (no rebase necessary)\n2. The tests fail when run inside Visual Studio on other computers because it can't find the compiler\n\nI'm running the tests now using the NuGet package. :pray: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119659379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119721841", "body": "I'm good with this to get the initial build working.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119721841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119723079", "body": "Since this pull request was sent before #91 was merged, it is showing commits which aren't specific to the reformat. Can you close this pull request and then create a new one (exactly the same request) so GitHub updates the list of commits which are involved?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119723079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119724690", "body": "This is a weird case due to the build configuration for various solution configurations and platforms. I believe you chose a pair where the Adornments project was not selected for build, but one or more of the projects which use it was. When the dependent project tried to build, it couldn't find the dependency.\n\nAs we narrow down the list of configurations and platforms and define the intent for each, these issues will be worked out.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119724690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119735369", "body": "@SergeyTeplyakov Label fixed?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119735369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119735446", "body": "@SergeyTeplyakov Label fixed instead of up for grabs?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119735446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119735577", "body": "@SergeyTeplyakov Label as fixed?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119735577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119751836", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119751836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119754696", "body": "I rebased #46 to address the merge conflict. This issue came up previously and I agree with the proposed solution. :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119754696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385509", "body": ":bulb: this documentation comment is associated with the private field `isTypeArgument`, and the public property `IsTypeArgument` does not have any comment. This can be resolved by moving the backing field before the comment.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385415", "body": ":bulb: Can you correct _just_ the indentation for the contents of the block? In other words, add two spaces at the beginning of each line but don't change any other formatting associated with the block.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385756", "body": "I have some doubts about using that (especially considering I'm working on an alternative that doesn't require Visual Studio), but either way it would be a separate issue to consider from this pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32471371", "body": ":exclamation: `nuget restore` should be run prior to entering the MSBuild process as part of the NuGet Automatic Package Restore process. Restoring packages during a build is known to be problematic, and we won't need to do so if we make sure to restore them beforehand.\n\nSummary: This command needs to be removed from this location, and added to the **.bat** file(s) which launch this build.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32471371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32519173", "body": "In some cases, the downloaded packages might not be applied to the current build, forcing you to run the build again. Even if that doesn't apply to this project specifically, following the recognized pattern of restore, then build, ensures we will never have problems of this nature.\n\nI believe information is available in the [Package Restore](https://docs.nuget.org/consume/package-restore) NuGet documentation.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32519173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32542970", "body": "The MSBuild-Integrated package restore will be migrated to automatic package restore as part of a separate commit. At least the VSIX projects will rely on command-line package restore before the build to download packages which integrate into the build process, so we're going to have to run the restore from the .bat file eventually anyway. I prefer to keep it consistent even if running the restore within MSBuild would not cause problems for some subset of the projects.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32542970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32548427", "body": "All of my command line builds are PowerShell-driven, so you certainly wouldn't hear any complaint from me for that. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32548427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32553336", "body": "@hubuk I want to see this pull request merged. To get us back on track to do so, can you reiterate the reasons why you don't want to move the call to `nuget restore` outside of this file? My reasons in favor of moving it are the following:\n1. Command line restore matches the behavior of automatic package restore in Visual Studio. The restore operation is completed before entering the MSBuild process.\n2. Command line restore works in all scenarios, and is an easily recognized pattern. IMO, it leaves no confusion regarding the manner and timing in which packages are restored during a command line build. Restoring packages in an MSBuild target requires separate consideration of multiple entry points (the selected build targets) and declared dependencies, and runs a risk that a future configuration might force us back to command line restoration anyway.\n\nSummary: I believe command line restore prior to MSBuild is simpler and more robust in the face of unknown project developments in the future. I have higher confidence that we will be happy with it as a long-term solution for integrating NuGet packages into the build.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32553336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32560958", "body": "Thanks for the detailed explanation. I find it acceptable, and believe we are on the same page regarding longer-term goals to evaluate the complete build strategy (which may or may not need changes).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32560958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32826149", "body": "Eventually that will need to happen, but I'm not sure how #59 will impact it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32826149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33837530", "body": ":question: Did you mean to remove `Async12` here?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33837530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33868572", "body": ":question: How does this help the contracts? (I never would have thought to include `internal` methods in the API contracts, but that doesn't mean they aren't useful.)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33868572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33868750", "body": ":bulb: Looking at the source code for this class, I can confirm there are cases where this property returns `null`. However, it seems the particular case that users will recognize is `Freezable` objects which have been frozen. I recommend updating the comment to clarify this case:\n\n> Freezable instances which have been frozen are detached from the Dispatcher, so this property will return null.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33868750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869071", "body": ":exclamation: I'm not sold on this particular change. This pull request is primarily intended to add missing contracts and remove incorrect contracts, but this change is a workaround/\"hack\" which removes a _correct_ contract. I prefer to address this (all instances where this contract was changed) by the following in order of preference:\n1. Address the limitation which results in the described warning (not likely to happen).\n2. Find a place where we can put `Contract.Assume` to help out the checker.\n3. \"Just deal with the warning\", or similar\n4. Move the changes to their own pull request, which can be reverted should the situation change in the future.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869288", "body": ":bulb: I would prefer to see this in its own file. This isn't a big deal for now; it will likely be addressed automatically as part of #63 or a subsequent related PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869524", "body": ":bulb: I'll be pushing for uniformly referring to built-in types using their built-in names, which is super easy to explain to users and also super easy to automate. This comment is informational; _if_ I'm successful it would be incorporated as part of #63 or a subsequent PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869567", "body": ":question: Were these incorrect, or just confusing?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869791", "body": ":question: What happens if we simply include this class when `SILVERLIGHT` is defined? If users aren't referencing this assembly directly, wouldn't everything still just work? In other words, do cccheck and ccrewrite simply ignore extraneous unreferenced contracts?\n\n:bulb: When the whole type is excluded when `SILVERLIGHT` is defined, you can move the preprocessor directives to above the `using` declarations and at the end of the file, which will prevent someone from accidentally applying a Remove and Sort Usings operation that breaks the file in some context.\n\n:thought_balloon: It would be nice to automate the verification of contract consistency against the public API surface of the reference assemblies. Perhaps this is something we already do.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33869791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870380", "body": ":bulb: Thanks for clarifying. When I was reading through the code in the current form, I didn't feel like I understood exactly why `Dispatcher` could return null. If the comment for `Dispatcher` was updated in the way I mentioned in my other comment (on that property), I feel like this internal method and the preceding comment(s) could be removed from the code without reducing the clarity of this set of contracts, as freezing a `Freezable` is a well-understood concept for API consumers.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870623", "body": ":thought_balloon: I find the inconsistency between explicitly and implicitly implemented methods a bit confusing. Note that in addition to understanding why you made the change, I ~~don't have a preference~~\u00b9 towards implicit or explicit implementations of contract methods overall (each has their merits, and both work).\n\n\u00b9 I do have a preference, as noted in my comments on the contracts for `Collection<T>`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870867", "body": ":bulb: It's difficult to tell while reading this contract class which methods are implementing interface members, and which methods are new for `Collection<T>`. For contracts, this distinction is important because only the latter may define contracts.\n\n:thought_balloon: It might not be possible to, say, only explicitly implement `ICollection<T>.Count` because the real `Collection<T>` class does provide a publicly (implicit) implementation of this property. For these cases, perhaps we can distinguish members with inherited contracts by using exactly the following comment:\n\n``` csharp\n// inherited\n```\n\nIn the future a Roslyn-based analyzer could easily be written to fully automate the creation and checking of this comment and even change it to something like this:\n\n``` csharp\n// inherited from ICollection<T>\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870922", "body": ":question: Should this have a contract?\n\n``` csharp\nContract.Requires(index >= 0 && index <= Count);\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33870922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871205", "body": ":exclamation: My notes for the change in contracts for `Rect` apply here as well.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871223", "body": ":question: Since `float.PositiveInfinity >= 0.0f`, why would we need to include `IsPositiveInfinity` as a separate item in this condition?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871562", "body": ":bulb: This might be clearer if the comment was placed before the call to `Contract.Ensures`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871719", "body": ":bulb: The formatting here (and in places that follow in the same file) ... \"could be improved\". :wink:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871767", "body": ":question: Should this check against 0 as well?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871802", "body": ":question: Is this missing contracts?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33871802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33877948", "body": ":exclamation: I'm fine with that as long as you create an issue. If the issue is narrow-scoped, it might make it easier for a new contributor to come along and add them. An example:\n\n> ### Add contracts for NotifyCollectionChangedEventArgs\n> \n> A stub contract class for `NotifyCollectionChangedEventArgs` was added in #84. The contracts for methods in this class still need to be added.\n\nThen we can mark the issue with the **up for grabs** label. :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33877948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33878111", "body": ":exclamation: This is incorrect. It should be `index < Count` instead of `index <= Count` (the documentation above it needs to be corrected as well.\n\n:memo: Yes, [MSDN is incorrect](https://msdn.microsoft.com/en-us/library/ms132416.aspx) on this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33878111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33878415", "body": ":bulb: I prefer these types of longer comment stay in the issue instead of the code. I've found  that over time, code gets corrected but the comments tend to stay forever.\n\n:memo: The other inline comments you added at the location of commented calls to `Contract.Requires` below are different. They are short, and obviously would be changed if someone did implement support for these contracts in the future.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33878415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33878471", "body": ":thought_balloon: It would be really cool if the contract block allowed the use of `Contract.Assume`, allowing us to immediately start codifying requirements which are valid but not currently supported by the static checker. For example, this method could use the following contract:\n\n``` csharp\nContract.Assume(!this.IsEmpty); // Required, but not currently provable statically\nContract.Requires(value >= 0.0 || Double.IsNaN(value));\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33878471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33867631", "body": ":bulb: I prefer to see this list the actual exception types which are known to be thrown for the cases you describe.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33867631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34007370", "body": ":memo: Someone will need to figure out what this was doing, but it didn't seem to be essential for the initial pull request. I am in favor of creating a new issue to resolve this warning (by implementing the following excluded code block) after this pull request is merged.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34007370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34290502", "body": ":question: What happens if instead of commenting out these `Ensures` lines, just _just_ add the new one above?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34290502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34290835", "body": ":bulb: I would prefer this be written as:\n\n``` csharp\nContract.Ensures(float.IsNaN(Contract.Result<float>()) || Contract.Result<float>() >= 0.0);\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34290835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34290922", "body": ":bulb: I would prefer this be written as:\n\n``` csharp\nContract.Ensures(double.IsNaN(Contract.Result<double>() >= 0.0) || Contract.Result<double>() >= 0.0);\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34290922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34291046", "body": ":bulb: If the `Contract.Ensures` lines below can be preserved in addition to the newly-inserted `Contract.Ensures`, then this comment can be removed. The new `Ensures` line is correct and there was no loss of information to include it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34291046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34328725", "body": "It only shows in the editor extensions quick info if it's active though. :smile: I created #104 to deal with this later since it was clear that you would benefit from having these changes in the first community preview.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34328725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34409454", "body": "Done. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34409454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427019", "body": ":question: Shouldn't this be `StringComparison.Ordinal`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427095", "body": ":exclamation: I would prefer this be implemented by adding a new property to the `Local` class, similar to and located right next to `Local.HasNoPDBInfo`, which tracks the value of `hasNoPDBName`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427136", "body": ":bulb: `typeof(ParameterExpression).FullName`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427150", "body": ":question: Which compiler is this testing?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34427150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430175", "body": "I don't think so. Type names are case-sensitive, especially in metadata.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430290", "body": ":bulb: The `local.Name == null` check was only in place to avoid a `NullReferenceException`. Now that the `Anonymous` property was added, it's no longer needed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430363", "body": ":bulb: I find this comment unnecessary considering we clearly have an `Anonymous` property to assign below. I would prefer to use the single-line statement from the left side, and just use this below:\n\n``` csharp\nloc.Anonymous = hosNoPDBName;\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430394", "body": ":bulb: I don't like the inconsistency of using an object initializer for one property and separate statements for several more. Since the old code wasn't using an object initializer, I'd prefer to just match what already exists and use a new assignment statement.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34430394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34431059", "body": ":memo: The changes to this file should actually have been included in #66 but I forgot this change.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34431059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734365", "body": ":question: What is `ValidationsCount`? In addition to now checking `AsyncEnsuresCount` here (which I presume fixes the main issue), you now check for `ValidationsCount` as well.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734673", "body": "**Edit:** Looking at the sample, specific might be too much here. Maybe just change `pres/posts etc` to `requires/ensures/etc.`.\n\n---\n\n**Original comment:**\n\n:bulb: It wouldn't hurt to be specific here.\n\n``` csharp\n/// An assertion is represented by any of the following:\n/// <list type=\"bullet\">\n/// <item><see cref=\"O:System.Diagnostics.Contracts.Contract.Requires\"/></item>\n/// <item><see cref=\"O:System.Diagnostics.Contracts.Contract.Requires`1\"/></item>\n/// <item><see cref=\"O:System.Diagnostics.Contracts.Contract.Ensures\"/></item>\n/// <item>...</item>\n/// </list>\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34734673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34735408", "body": "Sounds like you fixed another bug (and one which might be much older) in addition to the original issue which deals only with async methods. I haven't used `ContractValidationAttribute` before so I wouldn't know how to write a new test that demonstrates the bug where they were ignored previously.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34735408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959835", "body": "I explicitly disabled that - I left a message in Gitter explaining why (basically there is so much code to reformat that we need to do the safe option first and then we can consider renaming things in the future).\n\nI closed all the other formatting PRs so I can update them to also _not_ rename fields.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959855", "body": "This is following the .NET foundation bracing rules, which generally requires braces but makes an exception for cases where the entire block is a single statement which does not span multiple lines. This bracing rule was later implemented in StyleCopAnalyzers as well (DotNetAnalyzers/StyleCopAnalyzers#716, DotNetAnalyzers/StyleCopAnalyzers#717).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34959855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34960029", "body": "No, if the `if` statement requires braces then the `else` statement must also use braces (and vice-versa). This will eventually be enforced by DotNetAnalyzers/StyleCopAnalyzers#716 (which provides document-, project-, and solution-wide automatic fixes), whether or not codeformatter.exe handles it in this pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34960029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34324840", "body": ":thought_balloon: This is part of a continuation indent that Visual Studio will ignore. It's not \"absolutely perfect\", but it won't cause problems either.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34324840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34962188", "body": "StyleCopAnalyzers and StyleCop do not currently have a rule to enforce this, though one could certainly be proposed. However, there are a couple additional things to keep in mind:\n1. I'm very much hoping that the Code Contracts projects can be moved from the Microsoft organization to the dotnet organization. If it does move here, it would make sense to use the formatting rules of other projects in that organization even if they deviate somewhat from our personal preferences (they differ from my own preference in the indentation of `case` statements).\n2. The initial formatting is being done with dotnet/codeformatter (both in support of the first item and because it is compatible with Visual Studio's default formatting settings) so strict brace inclusion rules might be best saved for a later time.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34962188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966283", "body": ":memo: Each `new Options` here is drawn from an XML element from the original test inputs file.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966290", "body": ":memo: I did some simple find/replace below this marker, but they haven't been completely converted yet. Now that I have a better idea what the output should look like, I'll do the final conversion using an XSLT.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966302", "body": ":memo: It didn't work to return the `Options` instances directly from this member data property. It may have something to do with the way test discovery and executions run in separate AppDomains. Rather than deal with the underlying cause, I found that simply returning and index was a very easy solution that is sure to work.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966320", "body": ":memo: We create one `[Theory]` method from each of the existing test methods that references **ClousotTestInputs.xml**, and xUnit.net will automatically break up each theory into 175 (currently) discreet unit tests.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/34966320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259348", "body": "From the [documentation for `ILocalRegistry2`](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.shell.interop.ilocalregistry2.aspx):\n\n> **Notes to Callers**\n> Called by any package that wants to register in the Visual Studio section of the registry. This interface is obtained by using the [`SLocalRegistry`](https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.shell.interop.slocalregistry.aspx) service.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259528", "body": ":memo: The other option is creating the **EnvSdkVersion.ver** file with these contents.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259467", "body": ":bulb: It would be better if the return codes from these calls were checked. It's not the only place where this type of check is omitted, but it does cause AppVeyor to report success even if the build fails.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35259467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476706", "body": ":bulb: The current implementation does not require arguments to be non-null, but I'm not sure that was the intended behavior. It's not intuitive or mentioned in the documentation, and isn't consistent with other `Update` methods. Consider adding a requirement that `arguments` not be null.\n\nIn particular, the following statement in the documentation is not true if we allow `arguments` to be null.\n\n> If they are not equal, a new `DynamicExpression` instance is returned that is identical to the current instance except that the `Arguments` property is set to the value of parameter `arguments`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476887", "body": ":thought_balloon: Interesting. The implementation backs this up, though I've never seen a static indexer (and don't think you can create or use them in C#).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476956", "body": ":thought_balloon: Just because the implementation doesn't crash when `arguments` is null doesn't mean the contract needs to allow null.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477051", "body": "> There are many methods in Expression that don't require non-null on `IEnumerable<>` and params arrays for that reason. Should those be changed as well?\n\nI'd like to discuss this after I finish reviewing it, and we can make a decision on whether to leave them all as-is or change them all.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477151", "body": ":question: Should we add something like this?\n\n```\nContract.Requires(Member.IsStatic || expression != null);\nContract.Requires(!Member.IsStatic || expression == null);\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477297", "body": ":bulb: You can definitely require `testValues` not be null here (enforced by the implementation).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477322", "body": ":bulb: The implementation requires `cases` not be null or empty.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35477322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478496", "body": "> It appears that as a general rule they promote nulls to empty collections, unless that collection is expected to be non-empty. If that's the case they require it be non-null.\n\n:arrow_right: I think this is the answer. For construction and transformation, the library treats null collections as empty collections, which means null is valid anywhere that empty is. Since the fastest path through `ToReadOnly` for the case of an empty collection is when null is provided, it's safe to assume client code leverages this, especially in performance-sensitive code.\n\n:thought_balloon: In a world where System.Collections.Immutable preceded System.Linq.Expressions, it's likely that all of these parameters would be `ImmutableArray<T>` and would require non-default instances to express empty. But we don't live in that world. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478551", "body": "I'm worried adding too many conditions will result in unprovable contract warnings in any code trying to use the API. I'm not sure what to do about it. I wish we could use `Contract.Assume` in a precondition block to indicate conditions that are true but shouldn't attempt to be proven. This would allow us to show the conditions in the editor extensions (thus helping developers do things right) without negatively impacting the usability of cccheck. I'll let you decide which of the conditions we identified should be added, and which ones should be omitted.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35478551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35584712", "body": ":memo: In later releases of WiX 3.10, this name changes to `VS2015_ROOT_FOLDER`. It's not available in the current build from NuGet, but the value here works just as well.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35584712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35669279", "body": "This is the same as the note above.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35669279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35916930", "body": ":question: Any reason not to make this use `IEnumerable<T>` instead of `IEnumerable<Attribute>`? My guess is the current form was easier for copy/paste. I'm assuming the static checker doesn't have a problem with variance like this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35916930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287703", "body": ":thought_balloon: I don't like this extension method. Soon (as soon as we start building the project in VS2015) we will be able to use the following, and until then I think we should just write the expression where it's used.\n\n```\nlist?.Count() ?? 0\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287741", "body": ":thought_balloon: I don't like this extension method for the same reason as `CountOrDefault`. The way to write this is the following:\n\n```\ntypeNode.TemplateArguments?.Count ?? 0\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287869", "body": ":bulb: I would rather this be an extension method on `TypeNode`, and be renamed to more accurately reflect the behavior:\n\n``` csharp\n/// <summary>\n/// Gets the metadata name of the type. For generic types the arity is appended, such\n/// as <c>Func`2</c> for <see cref=\"Func{T, TResult}\"/>.\n/// </summary>\npublic static string GetMetadataName(this TypeNode typeNode)\n{\n  Contract.Requires(typeNode != null);\n  return HelperMethods.Unspecialize(typeNode).Name.Name;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287921", "body": ":bulb: This is a US-based project, so the expected spelling here is 'behavior'.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35287921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288083", "body": ":question: Should this condition instead throw?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288159", "body": ":question: You use 'precondition' many times from here through where exceptional postconditions section starts. Do you mean to use 'postcondition' instead?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288242", "body": ":exclamation: If \"previously\" does not mean \"earlier in this method\", this statement should be removed. Maintain focus instead of the current behavior and the reason it is correct.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288302", "body": ":bulb: This entire block is just:\n\n``` csharp\nreturn asyncPostConditions.Where(post => !(post is EnsuresExceptional));\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288325", "body": ":bulb: This entire block is just:\n\n``` csharp\nreturn asyncPostConditions.OfType<EnsuresExceptional>();\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288411", "body": ":question: Will this still work for corefx, where `TaskExtensions` is not in System.Core? I don't think we need to address it now, but if we know it will fail for some cases that users will want it probably makes sense to add an issue to track it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288503", "body": ":exclamation: This seems incorrect (it might match the IL, but it's not how we would expect it to behave). Async/await only unwrap exactly the first exception, and only unwrap one level. I'm willing to create a separate issue to track this if you want.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35288503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291729", "body": ":arrow_right: Let's create an issue for it. Initially mark it as **blocked** on updating to development in VS 2015, but also mark it with an **easy** label to draw in new contributors.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291778", "body": ":arrow_right: I'm not sure this code or associated comment(s) could be improved within the scope of this pull request, so I'm :ok: with it at least for now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291849", "body": ":arrow_right: Assuming this code is covered by the tests, it will also be covered if/when we start to test against CoreCLR/DNX/other newness. I think getting a test to cover this (which you already have) is the important part for this PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35291849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36574381", "body": "I'd like to see the constant added to (and used in) [`MethodMap`](https://github.com/Microsoft/CodeContracts/blob/c71ef8f1dee388ae3559c2f92969849c977c2d35/Microsoft.Research/Clousot.Cache/Models/Mapping/MethodMap.cs#L37), and then referenced from this location.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36574381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36577794", "body": ":bulb: You could change this to your name instead. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36577794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36577807", "body": ":thought_balloon: Rather than use this strategy, you can use a [non-editable literal](https://gist.github.com/sharwell/cb8e5bfd2c1435936c27#file-throwifargumentnull-snippet-L24-L29) to automatically reference `Contract` using the shortest available form. It does make the behavior different, so perhaps this is best left for a separate change that gets applied to _all_ snippets or _none_ of them.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36577807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36969813", "body": ":bulb: If you move this up to above the `using System;`, it won't be removed if someone does Remove and Sort Usings without this directive defined. The `#endif` should be moved to the end of the file at the same time.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36969813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36969114", "body": ":exclamation: Please revert this header change (and any like it).\n\n**Edit:** This is part of the first three formatting commits which can simply be dropped from this pull request. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36969114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36969223", "body": ":exclamation: I would be comfortable with this in the test suite, but not in the application itself. We should find another way if at all possible.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36969223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36971766", "body": "Can we not put it in the test suite initialization code?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36971766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36974635", "body": "> The tests are just calling the .exe - we would need another argument to pass the culture to the other process.\n\nThat would be preferable. My vote is for [`/LCID` to match **devenv.exe**](https://msdn.microsoft.com/en-us/library/9cytz106.aspx).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/36974635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37697218", "body": ":thought_balloon: Consider rewording this paragraph. I don't feel that the references to \"Roslyn\" and \"old-style equality comparison\" help the reader understand why this code is needed. In fact, even if Roslyn _didn't_ use this style of null check, it would still make since to include this. The following comes to mind.\n\n> Since there is no `cne` instruction, ECMA-335 \u00a7III.1.5 makes a note that `cgt.un` may be used instead for the specific case where the right-hand-side is null. For all integer inputs to the `cgt.un` instruction, if the right side is null or zero, we treat the instruction as a \"not equal\" instruction for improved results from the static checker.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37697218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812165", "body": "We could, but it probably wouldn't resolve to [Xunit.Abstractions.ITestOutputHelper](https://github.com/xunit/xunit/blob/master/src/abstractions/xunit.abstractions/TestCases/ITestOutputHelper.cs). :wink:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812469", "body": "Xunit doesn't support this overload unfortunately.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812548", "body": "Not supported by Xunit for Assert.Equal. :\\\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812644", "body": "This is the only way it worked with test discovery (something to do with type serialization and `Options` is not a trivial type).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812800", "body": "We do (have O(n\u00b2) complexity). We could get `ExtractorTestData` to return a new array instance instead of using `yield return`, but for the duration of these tests and the length of data returned by `ExtractorTestData` it just didn't matter in the end.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812893", "body": "The beta has a number of performance improvements. We've been using it with good success in StyleCopAnalyzers, and I believe both Roslyn and corefx are using this build as well.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812973", "body": "The tests manipulate static state. MSTest was never parallelized so this attribute is just included to match that behavior. I could add a comment.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37812973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37813017", "body": "Your assumption is correct. This is the xunit equivalent.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37813017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37813040", "body": "I would too. :(\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37813040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833815", "body": "The problem is the way we are using the parameters. `Options` is a mutable class which provides both behavior and data, but the data structures used to parameterize tests _should_ be immutable and only contain the test data. This would be a problem regardless of the test framework in use. This is something we can improve on in the future, but for now I'm just happy to see all the tests able to run on AppVeyor and start getting some reports. :smile: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833894", "body": "As I mentioned above, the problem is the `Options` class is exceptionally poorly designed as a storage location for test inputs. The complexity is due exclusively to this design and would be corrected in the future if `Options` were made immutable or if we passed parameter values directly to the test methods without wrapping them in `Options`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37833894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38046408", "body": ":question: Did I mess up the formatting? I tried to match the formatting already in place.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38046408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38047133", "body": "Yes that's correct :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38047133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38274788", "body": "All instances of that warning were resolved sometime in the past.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38274788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38350290", "body": "@SergeyTeplyakov I'm fairly certain we are going to change it _exactly_ one more time, but it still could be a good idea to separate it. :+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/38350290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40704357", "body": "It does. The rest of the build today uses Visual Studio 2013, so I updated this line to match. I can include a third line if you think that would be better:\n\n``` xml\n<VisualStudioVersion Condition=\"'$(MSBuildToolsVersion)'=='14.0'\">14.0</VisualStudioVersion>\n<VisualStudioVersion Condition=\"'$(MSBuildToolsVersion)'=='12.0'\">12.0</VisualStudioVersion>\n<VisualStudioVersion Condition=\"'$(VisualStudioVersion)'==''\">11.0</VisualStudioVersion>\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40704357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42520732", "body": ":exclamation: We are not yet ready to make this change. The last time I checked, CodeContracts.sln has build failures if you try to compile it inside Visual Studio 2015. It should open by default in 2013 until we make a separate decision to move to 2015 for primary development.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42520732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936633", "body": ":bulb: Seems like this could be the following:\n\n``` csharp\npublic List<Exception> MetadataImportWarnings\n{\n  get;\n  set;\n}\n```\n\nAnd the backing field `metadataImportWarnings` removed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936661", "body": ":bulb: 'instance' is misspelled.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/42936661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mcetkovsky": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/211", "title": "Duplicating confiugurable severity id 'Custom Warning for legacy contracts'", "body": "The following exception might be caused by the Code Contract editing extensions.\nhttps://youtrack.jetbrains.com/issue/DEXP-55258\n\nBased on my experience, the exception is raised each time the Visual Studio 2015 with ReSharper 9.1.3/9.2EAP and CodeContracts editing extension is started.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fedotovalex": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/199", "title": "Use nameof in VS2015 code snippets", "body": "Currently precondition snippets include the name of the parameter as a string literal, e.g.\n\ncren => `Conract.Requires<ArgumentNullException>(arg != null, \"arg\");`\n\nFor Visual Studio 2015, it makes sense to use nameof() instead of a string literal, e.g.\n\ncren => `Conract.Requires<ArgumentNullException>(arg != null, nameof(arg));`\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/199/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/197", "title": "(Yet another) NullReferenceException in Clousot/cccheck", "body": "This seems to be different from #138 as the call stack is very different. On a plus side, I managed to reduce it to a small reproducible case:\n\n``` c#\nusing System;\nusing System.Diagnostics.Contracts;\n\nnamespace Library\n{\n    public class Base\n    {\n        public Base(\n            string a\n            )\n        {\n            if (a == null)\n                throw new ArgumentNullException(\"a\");\n\n            Contract.EndContractBlock();\n\n            _b = 1;\n            _a = a;\n            _c = C();\n        }\n\n        protected Base(\n            string a,\n            byte[] c\n            )\n        {\n            if (a == null)\n                throw new ArgumentNullException(\"a\");\n\n            Contract.EndContractBlock();\n\n            _b = 1;\n            _a = a;\n            _c = c;\n        }\n\n        protected static byte[] C()\n        {\n            Contract.Ensures(Contract.Result<byte[]>() != null);\n            return new byte[1];\n        }\n\n        [ContractInvariantMethod]\n        private void ObjectInvariant()\n        {\n            Contract.Invariant(_b > 0 && _b < 8);\n            Contract.Invariant(_a != null);\n        }\n\n        private readonly int _b;\n        private readonly string _a;\n        private readonly byte[] _c;\n    }\n\n    public class Derived : Base\n    {\n        public Derived(\n            )\n            : base(\"Hello, world!\")\n        {\n        }\n    }\n}\n```\n\ncccheck command line:\n\n```\n-nobox -nologo -nopex -remote  -suggest=!! -premode combined -suggest codefixes -framework:v4.5 -warninglevel full  -maxwarnings 1200 -nonnull -bounds: -arrays -wp=true -bounds:type=subpolyhedra,reduction=simplex,diseq=false  -arrays -adaptive -arithmetic -enum -suggest asserttocontracts -missingPublicRequiresAreErrors -missingPublicEnsuresAreErrors -suggest assumes -suggest objectinvariants -suggest readonlyfields -infer requires -infer autopropertiesensures -infer objectinvariants -outputwarnmasks -timeout 300 -show progress \"-resolvedPaths:C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\Microsoft.CSharp.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\mscorlib.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Core.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Data.DataSetExtensions.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Data.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Net.Http.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Xml.dll;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Xml.Linq.dll\" \"-libPaths:C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\CodeContracts;C:\\Program Files (x86)\\Microsoft\\Contracts\\Contracts\\.NETFramework\\v4.5 \" \"C:\\Projects\\Library\\obj\\Release\\Decl\\Library.dll\"\n```\n\ncccheck output:\n\n```\nCodeContracts: Library: Background contract analysis started.\nCodeContracts: Library: Method 1 :  System.Diagnostics.Contracts.ContractDeclarativeAssemblyAttribute.#ctor()\nCodeContracts: Library: Method 2 :  Library.Base.#ctor(System.String,System.Byte[])\nCodeContracts: Library: Method 3 :  Library.Base.C()\nCodeContracts: Library: Method 4 :  Library.Base.#ctor(System.String)\nCodeContracts: Library: Installing the object invariants\nCodeContracts: Library: assume(invariant) this._a != null\nCodeContracts: Library: Method 5 :  Library.Derived.#ctor()\nCodeContracts: Library: Internal error in Clousot/cccheck --- catching it, and continuing\nCodeContracts: Library: \\nException Type:System.NullReferenceException\nCodeContracts: Library: \\nMessage:Object reference not set to an instance of an object.\\, Stack TraceSystem.NullReferenceException: Object reference not set to an instance of an object.\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.SymbolicValue.GetUniqueKey(SymbolicValue v)\nCodeContracts: Library: \\n   at Microsoft.Research.DataStructures.FunctionalIntKeyMap`2.get_Item(A key)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.Analyzers.NonNull.TypeBindings`11.Analysis.EdgeConversion(APC from\\, APC to\\, Boolean isJoin\\, IFunctionalMap`2 sourceTargetMap\\, Domain state)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.AnalysisWrapper.TypeBindings`11.ArrayAnalysis`2.EdgeConversion(APC from\\, APC to\\, Boolean isJoin\\, IFunctionalMap`2 sourceTargetMap\\, ArrayState state)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.ForwardAnalysisSolver`3.PushState(APC pc\\, APC next\\, AState state)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.DFARoot`2.ComputeFixpoint()\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.ForwardDFA`2.Run(AState startState)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.CodeLayer`13.<>c__DisplayClass1`1.<CreateForward>b__0(AnalysisState initialState)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.AnalysisWrapper.TypeBindings`11.RunTheAnalysis[AbstractDomain\\,Options](String methodName\\, IMethodDriver`12 driver\\, GenericValueAnalysis`2 analysis)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.Analyzers.Arrays.Analyze[Local\\,Parameter\\,Method\\,Field\\,Property\\,Event\\,Type\\,Attribute\\,Assembly\\,Expression\\,Variable](String fullMethodName\\, IMethodDriver`12 mdriver\\, Predicate`1 cachePCs)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.RunFactsDiscoveryAnalyses(Method method\\, Int32 phasecount\\, String methodFullName\\, IClassDriver`13 cdriver\\, IMethodDriver`12 mdriver\\, List`1 results\\, List`1 obligations\\, ComposedFactQuery`1 factQuery)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.MethodAnalysisNonCached(Method method\\, MethodAnalysisFlags& analysisFlags\\, Int32& phasecount\\, String methodFullName\\, IClassDriver`13 cdriver\\, IMethodDriver`12 mdriver\\, AnalysisStatistics& methodStats\\, ContractDensity& methodContractDensity)\nCodeContracts: Library: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethodInternal2(Method method\\, MethodAnalysisFlags analysisFlags\\, IClassDriver`13& cdriver\\, AnalysisStatistics& methodStats\\, APC& entryPC)\nCodeContracts: Library: Validated: 100.0 %\nCodeContracts: Library: Checked 15 assertions: 15 correct\nCodeContracts: Library: Contract density: 1.88\nCodeContracts: Library: Total methods analyzed 5\nCodeContracts: Library: Methods analyzed with a faster abstract domain 0\nCodeContracts: Library: Methods with 0 warnings 5\nCodeContracts: Library: Time spent in internal, potentially costly, operations\nCodeContracts: Library: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.0069984 (invoked 159 times)\nOverall time spent performing action #KarrIsBottom: 00:00:00.0099966 (invoked 571 times)\nOverall time spent performing action #CheckIfEqual: 00:00:00.0179988 (invoked 44 times)\nOverall time spent performing action #ArraysAssignInParallel: 00:00:00.1155192 (invoked 5 times)\nOverall time spent performing action #ArraysJoin: 00:00:00.0599800 (invoked 1 times)\nCodeContracts: Library: Total time 4.101sec. 820ms/method\nCodeContracts: Library: Retained 0 preconditions after filtering\nCodeContracts: Library: Inferred 1 object invariants\nCodeContracts: Library: Retained 0 object invariants after filtering\nCodeContracts: Library: Discovered 3 postconditions to suggest\nCodeContracts: Library: Retained 0 postconditions after filtering\nCodeContracts: Library: Detected 0 code fixes\nCodeContracts: Library: Proof obligations with a code fix: 0\nC:\\WINDOWS\\system32\\Library.dll(1,1): message : CodeContracts: Checked 15 assertions: 15 correct\nCodeContracts: Library: \nCodeContracts: Library: Background contract analysis done.\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9acac35e49f6cf92c11fdd9ffce1f95dc5b573a3", "message": "Some .NET Framework 4.6 contracts"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1230c02c2d22a494139fb48ceb56b2773d5db1c3", "message": "Producing contract reference assemblies for .NET Framework 4.6"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6d0ded3dc409c9654b176de839c33bb68b476011", "message": "Added missing overloads for GetFileSystemEntries, GetFiles, and GetDirectories (fixes #249)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476986", "body": "Yeah, this was a great source of confusion to me. It appears that as a general rule they promote nulls to empty collections, unless that collection is expected to be non-empty. If that's the case they require it be non-null.\n\nThere are many methods in Expression that don't require non-null on IEnumerable<> and params arrays for that reason. Should those be changed as well?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35476986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481210", "body": "Added.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481247", "body": "Unfortunately, neither MemberInfo nor PropertyInfo have IsStatic, which makes it difficult to construct a reasonable precondition. \n\nThe `Member is FieldInfo || Member is PropertyInfo` precondition is redundant because it is an object invariant. So I added it as a postcondition for the Member property and also as a precondition to Expression.MakeMemberAccess.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481248", "body": "Added.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481282", "body": "For this and all similar cases:\n\nI added `Contract.Requires(cases != null);`. For the methods that accept a params array, I also added `Contract.Requires(cases.Length >= 1);`. I did not add `Contract.Requires(cases.Any());` or `Contract.Requires(Contract.ForAll(cases, case => case != null);` because those cannot be proven by the static checker and it will be constant hassle for application developers. Perhaps we can revisit it when the static checker gets smarter.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481291", "body": "Again, this always holds true because Type is an array.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481317", "body": "I decided not to do this because it is fairly complicated (and the fact I barely understand the logic doesn't help either). In addition, the precondition would involve a call to constructor.GetParameters().Length which the static checker will unlikely be able to prove.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481321", "body": "Again insured by object invariant.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481324", "body": "Added this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35481324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35922268", "body": "This is a copy/paste typo, thanks for catching it! Fixed now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/35922268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37702868", "body": "I don't believe FileDialog.FileNames has a setter.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37702868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37702874", "body": "Same here, I don't believe this setter exists.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37702874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40022095", "body": "Well, that's what MSDN says, although honestly I just copied and pasted this part without much thinking. Looking closer, I'm not sure if there is much value in adding `EnsuresOnThrow` in this form.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/40022095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/45297940", "body": "I think this meant to be `return default(string)`.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/45297940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "OnurGumus": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/194", "title": "When you install code contracts you lose extension method support in immediate window.", "body": "Normally we can use extension methods in immediate window on debugging. However after installing code contracts this support simply dies. You have to write it in verbose way.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vmelamed": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/188", "title": "ccdocgen crash", "body": "When I check the option \"Emit contracts into XML doc file\" the build fails with the following error:\n\nC:\\Program Files (x86)\\Microsoft\\Contracts\\MsBuild\\v14.0\\Microsoft.CodeContracts.targets(642,5): error MSB3073: The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccdocgen.exe\" \"@obj\\Debug\\DataIQccdocgen.rsp\"\" exited with code -1073741571.\n\nI believe the error is \"stack overflow\".\n\nEnvironment: VS 2015, CC v.1.9.10714.2.\n\nVal\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111706352", "body": "This is great news! The only obstacle for me to start using VS2015(RC) are the code contracts. Currently almost all my projects use it. Can't wait for the release.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111706352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stokara": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/185", "title": "Configuration warnings", "body": "I am using 1.9.10714.2\n\nI have a bunch of warnings like this:\nThe element 'ItemGroup' in namespace 'http://schemas.microsoft.com/developer/msbuild/2003' has invalid child element '_CodeContractsCCDocGenArgumentLines' in namespace 'http://schemas.microsoft.com/developer/msbuild/2003'. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RSuter": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/179", "title": "Wrong path to sn.exe in Microsoft.CodeContracts.targets", "body": "I cannot build a project with CC and signing because the path in `CodeContracts\\Microsoft.Research\\ManagedContract.Setup\\MSBuild\\v14.0\\Microsoft.CodeContracts.targets` seems to be wrong: \n\n```\n$(MSBuildProgramFiles32)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.6 Tools\\sn.exe\n```\n\nIf I check this path on my system, the `sn.exe` is either in \n\n```\n$(MSBuildProgramFiles32)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6 Tools\\sn.exe\n```\n\nor \n\n```\n$(MSBuildProgramFiles32)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.5.1 Tools\\sn.exe\n```\n\nDo I need to install something or is this a problem in the targets file?\n\n(Running VS 2015 RTM with 10240 Windows SDK)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yatajga": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/176", "title": "Invalid vesrion number in Visual Studio 2015 RTM", "body": "![untitled](https://cloud.githubusercontent.com/assets/11560903/8935665/eecca394-355e-11e5-862a-3311e5ef4000.jpg)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "njannink": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/174", "title": "CodeContracts and SCA (CA1062)", "body": "This issue is out there for many years now and I really would like it to be solved.\n\nWhen I use:\n\nContracts.Requires<ArgumentException>(arg 1= null, nameof(arg));\n\nThen Static Code Analysis still complains with CA1062:\n\nCA1062 : Microsoft.Design : In externally visible method 'XXXXX', validate parameter 'arg' before using it. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JaCraig": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/169", "title": "Process is terminated due to StackOverflowException.", "body": "So it looks like the newest version of ccdocgen is throwing a stackoverflowexception. No stacktrace, just the message in the title. Happens on any project that I've built with any sort of complexity that has the \"Emit contracts into XML doc files\" checked. Killed many a build today.\n\nAlso, I figured that I could spend the night putting in a fix. Did a fork, pulled down, opened up Visual Studio... And I got stuck. I have no idea where that app lives in the code base. I found ccdoc10 but I can't figure out which solution that is housed in. Nor when opening up the project file can I find DataStructures10 or ContractMSInternal. Also it's late and I'm getting tired... If you can point me in the right direction, I'll take a crack at it but otherwise I guess I'll just say glhf (good luck, have fun).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Aospade": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/160", "title": "Getting sn.exe error code 3 with Code Contracts enabled", "body": "When I have Runtime Checking and Static Checking enabled and my dll is strongly named I get the following error when trying to build in VS 2015 RTM.\n\nThe command \"\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.6 Tools\\sn.exe\" /Rc \"obj\\Debug\\MyDllProject.dll\" \"MyStrongKey\"\" exited with code 3.\n\nIf I turn off the runtime and static checking the dll works just fine.   Seems similar to this past problem with code contracts\n\nhttps://social.msdn.microsoft.com/Forums/en-US/4edaa3b3-50a5-4672-82bd-4ca5b48b7c27/release-156081310-now-live?forum=codecontracts\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettshearer": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/143", "title": "contracts in invalid locations", "body": "I am attempting to roll out code contracts using multiple developers across an established code base.\nGoing ok, but some developers are using ReviewBot which seems to be suggesting Contract.Requires in methods without referring to the values being passed to the method, and Contract.Ensures for values not being returned from the method.\n\nThese contracts seem to be invalid to me - they should possibly be in the Invariant method.\nShould these be flagged as invalid in all cases, or is there a valid condition for them?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/88", "title": "DateTime.Now versus Stopwatch (or DateTime.UtcNow)", "body": "Code such as:\n   var elapsed = DateTime.Now - _startTime;\n(in VSServiceProvider) allows time to travel backward (and is slower) when clocks are resynced or daylight saving finishes.\n\nWould you like me to change all code to use Stopwatch where practical?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/88/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/9", "title": "Centralise/Decentralise SQL Database for caching?", "body": "We are planning on implementing code contracts in a very mature product. We have already retrofitted a few years ago to our newer products and have had good success.\n\nWe intend to move contract checking outside of the build process and into our automated test framework. We run about 220 test clients each hour through about 1/2 million tests. These clients would end up running an assembly each until completion of the test run. It is possible that we may run contract testing on a daily basis if load is too great to perform on each checkin (we merge about 200 checkins daily, to create about 30 discrete test runs daily).\n\nDo you have any advice as to whether using a centralised database would be ok for this sort of scale?\nI assume we may need it to be centralised to have access to contracts from earlier assemblies in the build order?\nAlso, I assume we would need to stagger contract evaluation so that earlier assemblies in the build order are completed before we start later assemblies? We have a parallelised build process that does this already and could be modified to provide assemblies in the correct order.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/9/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119000146", "body": "Ok \u2013 will stay away from files with pending requests/changes.\nThe initial reason I was looking into this was the caching side. We are getting slowdown in caching that seems to be resolved by clearing the cache.\nThe first thing I noticed when I opened the source was datetime.now..\n\nFrom: Sam Harwell [mailto:notifications@github.com]\nSent: Tuesday, 7 July 2015 5:02 AM\nTo: Microsoft/CodeContracts\nCc: Brett Shearer\nSubject: Re: [CodeContracts] DateTime.Now versus Stopwatch (or DateTime.UtcNow) (#88)\n\n@brettshearerhttps://github.com/brettshearer Keep in mind #66https://github.com/Microsoft/CodeContracts/pull/66 includes substantial changes to the project containing the file you are referring to.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/CodeContracts/issues/88#issuecomment-118961040.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119000146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DanTup": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/141", "title": "Contract extension not showing contacts in tooltips", "body": "I've installed the latest vsix from the Releases page (v1.9.10714.2), but I'm not seeing Contact info in the tooltips as @sharwell's screenshot on Twitter showed.\n\nI'm testing with the Where() method on an IQueryable. There's definitely a contract on that method (if I don't have a `!= null` assert, I get a squiggle), the editor extension is just not showing it.\n\n![cc](https://cloud.githubusercontent.com/assets/1078012/8698257/44d9c5f2-2af4-11e5-8ebd-d997717c3f64.jpg)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/140", "title": "What's the correct way to set up Code Contracts on a build server?", "body": "I made this work previously, but it was a lot of faffing around copying things from a dev machine to the build server.\n\nI wondered whether there was a preferred way to do this (ideally one that doesn't involve manually installing or copying files onto the build server)?\n\nIt would make sense to have this documented somewhere (if it already is, I apologise, I can't find it!)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/139", "title": "What's the best way to share CC settings across all projects in a solution?", "body": "I'd like to use the same CC settings for all projects in a solution, rather than maintain them separately. Is there a supported way to have these in a single file and imported into each project (ideally that works when you make changes in the UI)?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/138", "title": "NullReferenceException in Clousot/cccheck", "body": "I enabled Code Contracts (all default settings, except unticked Check In Background hoping it might work around #137 - it didn't) on a project in a big solution I have, and this was spat into the output window as it ran.\n\nUnfortunately the chances of my getting a repro I can provide are slim (it's a massive project I can't share, and I doubt I could repro it in small, shareable codebase), but I'm hoping since it's an NRE with a stack, it might be possible to figure out from the error alone.\n\nThere are no contract annotations in any of our code (though the default settings include inferring and suggesting some).\n\n```\nCodeContracts: MyProject.Thing.AL: Run static contract analysis.\nCodeContracts: MyProject.Thing.AL: Time spent connecting to the cache: 00:00:01.0514598\nCodeContracts: MyProject.Thing.AL: Cache used: (LocalDb)\\MSSQLLocalDB\nC:\\Work\\Source\\Thing\\Thing-Code-Contracts\\MyProject.Thing.AL\\DataFields\\MediaDataField.cs(83,5): message : CodeContracts: Suggested ensures for member Retrieve: The caller expects the postcondition Contract.Ensures(Contract.Result<SystemWrapper.IO.IFileInfoWrap>() != null); to hold for the interface member Retrieve. Consider adding such postcondition to enforce all implementations to guarantee it\nC:\\Work\\Source\\Thing\\Thing-Code-Contracts\\MyProject.Thing.AL\\DataFields\\CollectionDataField.cs(37,4): message : CodeContracts: Suggested ensures for member get_Value: The caller expects the postcondition Contract.Ensures(Contract.Result<System.Collections.Generic.List<T>>() != null); to hold for the interface member get_Value. Consider adding the postcondition to enforce all implementations to guarantee it\nCodeContracts: MyProject.Thing.AL: Internal error in Clousot/cccheck --- catching it, and continuing\nCodeContracts: MyProject.Thing.AL: \\nException Type:System.NullReferenceException\nCodeContracts: MyProject.Thing.AL: \\nMessage:Object reference not set to an instance of an object.\\, Stack TraceSystem.NullReferenceException: Object reference not set to an instance of an object.\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.BoxedExpression.ContractExpression.get_SourceAssertionCondition()\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.ClousotExpressionCodeProvider`5.SourceAssertionCondition(PC pc)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.MethodCache`9.SubroutineBase`1.SourceAssertionCondition(Label label)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.MethodCache`9.BlockWithLabels`1.SourceAssertionCondition(APC pc)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.AnalysisWrapper.TypeBindings`11.GenericValueAnalysis`2.<ReducePostconditions>b__12(SyntacticTest test)\nCodeContracts: MyProject.Thing.AL: \\n   at System.Linq.Enumerable.WhereSelectListIterator`2.MoveNext()\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.DataStructures.Set`1.AddRange(IEnumerable`1 range)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.DataStructures.Set`1..ctor(IEnumerable`1 original)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.AnalysisWrapper.TypeBindings`11.GenericValueAnalysis`2.ReducePostconditions(List`1 postconditions)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.AnalysisWrapper.TypeBindings`11.GenericValueAnalysis`2.SuggestPostcondition(ContractInferenceManager inferenceManager\\, IFixpointInfo`2 fixpointInfo)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.RunContractInference(Int32 phasecount\\, String methodFullName\\, IMethodDriver`12 mdriver\\, AnalysisStatistics& methodStats\\, List`1 results\\, ContractInferenceManager inferenceManager\\, ComposedFactQuery`1 factQuery)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.MethodAnalysisNonCached(Method method\\, MethodAnalysisFlags& analysisFlags\\, Int32& phasecount\\, String methodFullName\\, IClassDriver`13 cdriver\\, IMethodDriver`12 mdriver\\, AnalysisStatistics& methodStats\\, ContractDensity& methodContractDensity)\nCodeContracts: MyProject.Thing.AL: \\n   at Microsoft.Research.CodeAnalysis.Clousot.TypeBinder`9.AnalyzeMethodInternal2(Method method\\, MethodAnalysisFlags analysisFlags\\, IClassDriver`13& cdriver\\, AnalysisStatistics& methodStats\\, APC& entryPC)\nCodeContracts: MyProject.Thing.AL: Validated:  99.6%\nCodeContracts: MyProject.Thing.AL: Checked 880 assertions: 833 correct 3 unknown (44 masked)\nCodeContracts: MyProject.Thing.AL: Contract density: 2.55\nCodeContracts: MyProject.Thing.AL: Total methods analyzed 89\nCodeContracts: MyProject.Thing.AL: Methods analyzed with a faster abstract domain 0\nCodeContracts: MyProject.Thing.AL: Method analyses read from the cache 75\nCodeContracts: MyProject.Thing.AL: Methods not found in the cache 14\nCodeContracts: MyProject.Thing.AL: Methods with 0 warnings 77\nCodeContracts: MyProject.Thing.AL: Time spent in internal, potentially costly, operations\nCodeContracts: MyProject.Thing.AL: Overall time spent performing action #KarrPutIntoRowEchelonForm: 00:00:00.1861224 (invoked 79224 times)\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flipchart": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/136", "title": "Contracts and Code Coverage Highlighting", "body": "From the [forum](https://social.msdn.microsoft.com/Forums/en-US/9833613d-50a0-4f99-b083-a120ff7fc088/contracts-and-code-coverage-highlighting?forum=codecontracts), and was never answered/addressed\n\nI have a solution with multiple assemblies using Code Contracts. When running code coverage for the unit tests for the solution, I have certain methods which are being tested, but which are not highlighted by code coverage in VS. I have tracked this down to the Code Contracts reference assembly. A simplified scenario is presented below:\n\n3 assemblies: Interfaces, Implementations, Tests\n\nAssembly Interfaces contains interfaces and abstract classes. Assembly Implementations references Interfaces and contains a collection of implementations of the abstract classes defined in Interfaces. Assembly Tests references both of the other 2 assemblies and contains unit tests for the Implementations assembly classes.\n\nScenario 1: Contract reference assembly building set to none (or do not build) for all assemblies => Highlighting works\n\nScenario 2: Contract reference assembly building set to Build for Implementations assembly only => Highlighting works\n\nScenario 3: Contract reference assembly building set to Build for Interfaces (and any value for the others) => Highlighting DOES NOT work\n\nWhat I find when the contract reference assembly is built for the Interfaces assembly is that the Contract Class implementation is highlighted with code coverage (rather than the actual implementation).\n\nI have uploaded a sample project to Github (https://github.com/flipchart/CodeContractAnalysis) which demonstrates the problem in detail. I have set the Interfaces assembly to build the contract reference assembly so that the problem is visible. Please try with the various settings as outlined in the scenarios above to see what I mean\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alaendle": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/113", "title": "Code contracts should be able to verify type parameters.", "body": "For the following code you'll get the message \"CodeContracts: requires unproven: typeof(T) == typeof(string)\"; but from my point of view Code Contracts analyzer should be able to verify this piece of code.\n\n``` csharp\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      var x = new ServiceProviderImplementation();\n      var result = x.GetService<string>();\n    }\n  }\n\n  [ContractClass(typeof(IServiceProviderContract))]\n  public interface IServiceProvider\n  {\n    T GetService<T>() where T : class;\n  }\n\n  [ContractClassFor(typeof(IServiceProvider))]\n  abstract class IServiceProviderContract : IServiceProvider\n  {\n    public T GetService<T>() where T : class\n    {\n      Contract.Requires(typeof(T) == typeof(string));\n      Contract.Ensures(Contract.Result<T>() != null);\n      return default(T);\n    }\n  }\n\n  class ServiceProviderImplementation : IServiceProvider\n  {\n    public T GetService<T>() where T : class\n    {\n      if (typeof(T) == typeof(string))\n      {\n        return \"Hello World!\" as T;\n      }\n\n      throw new InvalidOperationException();\n    }\n  }\n```\n\nMainly because it isn't far a away from the non-generic variant that could be verified.\n\n``` csharp\nclass Program\n  {\n    static void Main(string[] args)\n    {\n      var x = new ServiceProviderImplementation();\n      var result = x.GetService(typeof(string));\n    }\n  }\n\n  [ContractClass(typeof(IServiceProviderContract))]\n  public interface IServiceProvider\n  {\n    object GetService(Type serviceType);\n  }\n\n  [ContractClassFor(typeof(IServiceProvider))]\n  abstract class IServiceProviderContract : IServiceProvider\n  {\n    public object GetService(Type serviceType)\n    {\n      Contract.Requires(serviceType == typeof(string));\n      Contract.Ensures(Contract.Result<object>() != null);\n      return null;\n    }\n  }\n\n  class ServiceProviderImplementation : IServiceProvider\n  {\n    public object GetService(Type serviceType)\n    {\n      if (serviceType == typeof(string))\n      {\n        return \"Hello World!\";\n      }\n\n      throw new InvalidOperationException();\n    }\n  }\n```\n\nMore details can be found on the original post: https://social.msdn.microsoft.com/Forums/en-US/f5ee822a-f4ba-414b-88bc-9e0bd09bdcbb/why-did-i-get-quotrequires-unprovenquot-in-this-case?forum=codecontracts\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/67", "title": "False positive: precondition is redundant", "body": "As described [in this Stackoverflow post](http://stackoverflow.com/questions/30914794/false-positive-precondition-is-redundant) the following code:\n\n```\npublic int Foo(int a)\n{\n    if (a >= 0) throw new ArgumentException(\"a should be negative\", \"a\");\n    Contract.EndContractBlock();\n    return a;\n}\n```\n\ngives the following warning during static checking: CodeContracts: Suggested requires: This precondition is redundant: Consider removing it. Are you comparing a struct value to null?\n\nwhen compiled with warning level 2 or higher. The corresponding Contract.Requires() does not produce the same error.\n\nThis happens with the newest version at this time (1.7.11202.10) under Visual Studio 2013 Professional at least.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mike-barnett": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/59", "title": "Future plans for Code Contracts", "body": "This issue is meant to provide a single place where we can keep people notified about the status of the Code Contracts project. We (Microsoft) now have some resources and will do the work (in conjunction with the community of course) to update the sources so the tools will work in VS2015. After that, we are looking to transition the repo **outside** of the Microsoft organization in GitHub and turn ownership over to any community members that are interested.\n\nAs far as we are aware, the current work items are:\n1. Updating the rewriter to understand the new Roslyn code-generation patterns for iterators/async.\n2. Updating the Visual Studio integration so that the Code Contracts pane appears in the project properties window.\n3. Fixing some other missing files, etc.\n\nSeparately, there is a Roslyn discussion (https://github.com/dotnet/roslyn/issues/119) about adding contracts to a future version of C#. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/59/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b1f94fb43e66b965e00f5c39a2571717ac596631", "message": "Fro 32-bit assemblies, use the default imageBase, because doing otherwise causes bad assemblies if the module's imageBase is bigger than 0x400000."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6429392003af42655271598543cd4d55e482cae2", "message": "Correctly propagate the imagebase and sizeofStackReserve for 64-bit assemblies."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72229791", "body": "@aarondandy: Thanks so much for writing such a fantastic guide! It is great to see people in the community doing such great work!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72229791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278289", "body": "How about adding it to the CodeContracts sources themselves while continuing to own it? This is supposed to be a community-based project now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82395985", "body": "Have you generated a contract assembly for the one containing the abbreviators? And is that contract assembly found by the rewriter when it is writing the assembly that calls the abbreviator?\n\nThanks,\n\nMike\n\nFrom: Pavel Voronin [mailto:notifications@github.com]\nSent: Tuesday, March 17, 2015 5:46 AM\nTo: Microsoft/CodeContracts\nSubject: [CodeContracts] Code Contracts Abbreviators do not work if placed in a separate assembly. (#23)\n\nWe have moved frequent and common requirements to a separate assembly.\nContract.Requires<ArgumentNullException>(...) became just Requires.NotNull(...). so we have fewer typing in many places. Bu then we discovered that ccrewriter does not do its job. Abbreviators are simply ignored if they are called from another assembly.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/CodeContracts/issues/23.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82395985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104332320", "body": "We (Microsoft, folks both in research and in product groups) are _very_ interested in keeping the project going, but are severely constrained in how much time we can devote to it. Why would you need to fork it? Why can\u2019t the community just keep it going in the current branch?\n\nWe are planning on spending time working on updating the code to work with Roslyn-generated binaries. We\u2019re just slow\u2026\n\nMike\n\nFrom: Aaron Dandy [mailto:notifications@github.com]\nSent: Thursday, May 21, 2015 8:53 AM\nTo: Microsoft/CodeContracts\nSubject: Re: [CodeContracts] Contract.Requires not rewritten in async methods compiled by Roslyn (#51)\n\n@matteo-moscahttps://github.com/matteo-mosca Microsoft Research is still deciding how they want to manage the project going forward but I have been they would like to keep it going in the absence of the original product owner. Worst case we will fork as there are many of us that are interested in keeping this project going. If you check the network graph you can see solid community progress, especially from @hubukhttps://github.com/hubuk\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/CodeContracts/issues/51#issuecomment-104328472.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104332320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/108122409", "body": "We (the people in Microsoft who are still working on the Code Contracts code) are very sorry about how slow we\u2019ve been responding to things. We definitely plan to accept the pull requests that are outstanding and are currently working on some of the issues about Roslyn-generated binaries. We hope to have more information soon.\n\nMike\n\nFrom: Robin Sue [mailto:notifications@github.com]\nSent: Tuesday, June 2, 2015 3:41 PM\nTo: Microsoft/CodeContracts\nSubject: Re: [CodeContracts] Alternative active fork (#56)\n\n@aarondandyhttps://github.com/aarondandy what leads you to this conclusion? All i see is microsoft pushed their internal source, applied on 2 days in january community pull requests and on 3 days in february a few another community pull requests. After that there have been many more pull requests from the community which are neither answered nor pulled and everything i can see on the network graph is community activity.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/CodeContracts/issues/56#issuecomment-108118366.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/108122409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111234779", "body": "I've looked into this with @hubuk and it turns out that it is just a matter of updating ILMerge.exe to the latest version. He's looking into making it a NuGet reference so it will always stay up to date. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/111234779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113185154", "body": "I'm fine with using that copyright header. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113185154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113188145", "body": "Thanks so much! This is really great. You are all doing an amazing job getting this code base into shape. I can't tell you how much I appreciate it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113188145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115896191", "body": "Looks great! Please merge this in.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115896191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116883881", "body": "Thanks for doing this! It looks great.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/116883881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119248937", "body": "I\u2019m not sure if the best route here is to get rid of the contracts. If they are valid preconditions, but something that the static checker seems unable to prove at call sites (and I\u2019m not sure how you are certain that is true), then you can always add a Contract.Assume just before the call site.\n\nI also don\u2019t understand why you have gotten rid of some postconditions. Why would you do that? The checker never tries to prove a postcondition except when it is verifying the implementation of a method. Are you saying that you are trying to run the static checker on the source of Mscorlib\u2019s implementation?\n\nMike\n\nFrom: tom-englert [mailto:notifications@github.com]\nSent: Friday, July 3, 2015 10:50 AM\nTo: Microsoft/CodeContracts\nSubject: [CodeContracts] Remove/replace unproofable contracts. (#85)\n\nSome contracts that are theoretically valid but can't be proofed by the static checker.\n\n---\n\nYou can view, comment on, or merge this pull request online at:\n\n  https://github.com/Microsoft/CodeContracts/pull/85\n\nCommit Summary\n-   Disable Contract.Requires that the static checker can't prove.\n-   Contracts in System.Math that the checker can't proof.\n\nFile Changes\n-   M Microsoft.Research/Contracts/MsCorlib/System.Math.cshttps://github.com/Microsoft/CodeContracts/pull/85/files#diff-0 (27)\n-   M Microsoft.Research/Contracts/WindowsBase/System.Windows.Rect.cshttps://github.com/Microsoft/CodeContracts/pull/85/files#diff-1 (41)\n-   M Microsoft.Research/Contracts/WindowsBase/System.Windows.Size.cshttps://github.com/Microsoft/CodeContracts/pull/85/files#diff-2 (4)\n\nPatch Links:\n-   https://github.com/Microsoft/CodeContracts/pull/85.patch\n-   https://github.com/Microsoft/CodeContracts/pull/85.diff\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/CodeContracts/pull/85.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119248937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119282843", "body": "Ah, those are great points. Yes, I totally agree in general. But in this case, wouldn't it be better to add a postcondition to the constructor Rect that says it isn't empty? For the latter example, is it that Math.Abs lacks a postcondition or is it that the checker is not good at proving this because they are floating point numbers?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119282843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119283120", "body": "What does the rewriter produce today?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119283120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119289078", "body": "Yes, I guess out belief was that exceptions should be, well, exceptional and so performance for the failing case was not important. Note that the form you propose would have to be contingent on the user wanting exactly that behavior: if they want to provide custom methods for handling contract failures or fail-fast behavior then the current rewriting should be retained.\n\nWe would like to get all of the VS2015 issues resolved before we start making these kinds of changes, but if you would like to implement this, then that would be great!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119289078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119347976", "body": "Yep, that all sounds reasonable. I think it would be a great thing --- I hope my comments didn't sound negative about it. I just want to make sure that we don't preclude any of the existing behavior.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119347976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119652306", "body": "Oh, good point about having contracts on the nullary ctor for structs. Yes, I agree now with your changes to the contracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119652306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119652897", "body": "@sharwell Umm, just to make sure: you mean you interpreted my comments as sounding too negative? If so, I am very sorry. Your contributions to the project are fantastic!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119652897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119654507", "body": "@SergeyTeplyakov : Looks great! Let's get a new release out!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119654507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119654675", "body": "Phew! Electronic communication is tough...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/119654675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26491295", "body": "I think you should feel free to change the convention to 4. Maybe just open an issue to ask for a vote. But it would be easier for everyone if it matched the VS standard.\n\nMike\n\nSent from my Windows Phone\n\n---\n\nFrom: tom-englertmailto:notifications@github.com\nSent: \u00fd3/\u00fd16/\u00fd2015 2:07 AM\nTo: Microsoft/CodeContractsmailto:CodeContracts@noreply.github.com\nSubject: Re: [CodeContracts] Add some missing system contracts; fix bad contracts in Application and ... (#21)\n\nIn Microsoft.Research/Contracts/PresentationFramework/Sources/System.Windows.Controls.Panel.cshttps://github.com/Microsoft/CodeContracts/pull/21#discussion_r26468792:\n\n> ```\n>  }\n> ```\n> -    protected override System.Windows.Media.Visual GetVisualChild(int index)\n> -      protected override System.Windows.Media.Visual GetVisualChild(int index)\n\nSorry, it's hard to keep the old formatting with 2 spaces indent where the default in VS is 4 spaces. Are there any coding guidelines for CC project?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Microsoft/CodeContracts/pull/21/files#r26468792.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26491295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "GeirGrusom": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/58", "title": "CodeContract static analyzer fails the build for no specific reason", "body": "I have an issue where the static analyzer will claim that the build has failed without actually specifying any build errors. 'Fail build on warning' is disabled.\n\nI do get one warning however:\n\n`******\\packages\\Microsoft.Net.Http.2.2.29\\lib\\portable-net40+sl4+win8+wp71+wpa81\\System.Net.Http.dll(1,1): warning : CodeContracts: Could not find the method/type 'System.Diagnostics.Contracts.PureAttribute' in assembly '******\\packages\\Microsoft.Net.Http.2.2.29\\lib\\portable-net40+sl4+win8+wp71+wpa81\\System.Net.Http.dll'`\n\nTo me this warning doesn't make sense. Why is it looking for System.Diagnostics.Contracts.PureAttribute in System.Net.Http?\n\nThis is the build log: http://pastebin.com/1Fu4REbr\n\nIt also claims that it ran the test on the dll, and that the dll is located in C:\\Windows\\System32, which is not correct as far as I know, since the process probably does not have write access to C:\\Windows\\System32, and there is no dll of that name there.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/58/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/109302648", "body": "I figured out a workaround for this issue: add `-cclib mscorlib` to the static analyzer command line.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/109302648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nikolaiessel": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/50", "title": "FindOne Contract for System.DirectoryServices.DirectorySearcher", "body": "Contract is defined as:\n\n> Contract.Ensures(Contract.Result<SearchResult>() != null);\n\nBut [MSDN](https://msdn.microsoft.com/de-de/library/system.directoryservices.directorysearcher.findone.aspx) describes a null possibility:\n\n> If no entries are found to match the search criteria, a null reference (Nothing in Visual Basic) is returned\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/50/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "papaneko": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/35", "title": "ccrewrite incorrect pdb files, Causes problem in Open RIA Services Client Code generation (Code Contracts 1.7.11202.10)", "body": "We are using OpenRIA Services to generate silverlight client code from a server application.\n\nWhen enabling Runtime Contract Checing : Full, the client code is not generated properly. There are a lot of missing entity properties in the generated code.\n\nWhen debugging the OpenRiaServices.DomainServices.Tools project (during client code generation) it seems that when ccrewrite has done its job, the web-projects .pdb-file refers to the wrong .cs files.\n\nThis is the code used by OpenRiaServices to read the pdb. http://openriaservices.codeplex.com/SourceControl/latest#OpenRiaServices.DomainServices.Tools/Framework/Pdb/PdbSourceFileProviderFactory.cs\n\nBy checking the Read/Writes from MSBuild it seems that it reads the correct pdb atleast, but since the wrong files are refered from the pdb the properties for each entity is not found.\n\nIt seems like we are not the first to stumble upon this/similar problem : https://social.msdn.microsoft.com/Forums/en-US/e7a48a93-fe1d-4678-a150-6d025331388a/ria-services-client-code-generation-broken-after-installing-code-contracts-146031712?forum=codecontracts\n\nThis only happens when we enable Code Contracts. The pdb file refers to the correct files when Code Contracts is not enabled, and the client code is generated correctly.\n\n(Also, i have tried to reinstall Code Contracts but same problem exists.)\n\n(link to same issue on msdn : https://social.msdn.microsoft.com/Forums/en-US/1742d91f-a33e-41c9-b20f-5df5196267bc/ccrewrite-incorrect-pdb-files-causes-problem-in-open-ria-services-client-code-generation-code?forum=codecontracts)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/35/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "billings7": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/34", "title": "Missing UpdateManifestVersion.exe", "body": "Its not possible to build the setup by running buildCC as it expects the executable UpdateManifestVersion.exe to exist in Microsoft.Research\\common\\bin.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/97368152", "body": "The assemblies in Microsoft.Research\\ImportedCCI2 are what needs to be updated. I could do it, however I can't seem to find the source for a few of the assemblies, AsmMeta.exe and Microsoft.Cci.VBSourceEmitter.dll.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/97368152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98138814", "body": "I'll have to check if an updated CCI will fix it but I haven't been able to build a project I am working on in 2015, the rewriter fails with some error about not being able to resolve a type. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98138814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/101792876", "body": "The problem I have is caused by another issue. I have a solution, just need to get around to do a pull request.\nA problem with how type names are parsed in part of the re-writer causes it to fail for certain iterator methods. Will post a full issue soon.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/101792876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103534115", "body": "I have fixed one problem I was having (#47, pr #48), but that has lead me on to another problem that I currently have no clue how to solve (#49)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103534115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103534413", "body": "I have fixed one problem I was having (#47, pr #48), but that has lead me on to another problem that I currently have no clue how to solve (#49)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103534413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114075139", "body": "@hubuk re: the installer changes, would those have any effect on or benefit from PR #36 at all?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114075139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114147725", "body": "@hubuk I will have a look into that when I can. Changing how CodeTools is built would probably be better in a different PR, from what I can remember some part of it needs VS2012 to build it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/114147725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115911708", "body": "@hubuk suggested that the binary files should not be committed, but be created by part of the build process, which I agree with. However I feel that would be better suited for a different PR, so leave them here for now as they would be a pain for anyone else to built ATM (they were for me anyway) and so we can get an updated setup out ASAP. As long as we are fine with that, this one should be good to go.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115911708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "reitzmichnicht": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/32", "title": "ccdoc ArrayOutOfRangeException", "body": "Running ccdocgen on my project fails with this stacktrace\n\n```\n5>  \"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccdocgen.exe\" \"@obj\\Debug\\fooccdocgen.rsp\"\n5>  CCDoc failed with uncaught exception: Der Index war au\u00dferhalb des Arraybereichs.\n5>  Stack trace:    bei Microsoft.Cci.Analysis.Stack`1.Pop()\n5>     bei Microsoft.Cci.Analysis.DataFlowInferencer`2.SetupDataFlowFor(Instruction instruction)\n5>     bei Microsoft.Cci.Analysis.DataFlowInferencer`2.DequeueBlockAndSetupDataFlow()\n5>     bei Microsoft.Cci.Analysis.DataFlowInferencer`2.SetupDataFlowFor(IMethodBody methodBody)\n5>     bei Microsoft.Cci.ILToCodeModel.SourceMethodBody..ctor(IMethodBody ilMethodBody, IMetadataHost host, ISourceLocationProvider sourceLocationProvider, ILocalScopeProvider localScopeProvider, DecompilerOptions options)\n5>     bei Microsoft.Cci.MutableContracts.ContractExtractor.SplitMethodBodyIntoContractAndCode(IContractAwareHost host, ISourceMethodBody sourceMethodBody, PdbReader pdbReader)\n5>     bei Microsoft.Cci.Contracts.LazyContractExtractor.GetMethodContractFor(Object method)\n5>     bei Microsoft.Cci.Contracts.CodeContractsContractExtractor.GetMethodContractFor(Object method)\n5>     bei CCDoc.CCDocContractHelper.TryGetMethodContract(CodeContractAwareHostEnvironment host, IMethodReference method, IMethodContract& methodContract, DocTracker docTracker)\n5>     bei CCDoc.ContractVisitor.ContractPackager.PackageMethodContracts(IMethodDefinition method, Boolean isPure)\n5>     bei CCDoc.ContractVisitor.Visit(IMethodDefinition methodDefinition)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IMethodDefinition method)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IEnumerable`1 methods)\n5>     bei Microsoft.Cci.MetadataTraverser.TraverseChildren(ITypeDefinition typeDefinition)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(INamespaceTypeDefinition namespaceTypeDefinition)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IEnumerable`1 namespaceMembers)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(INestedUnitNamespace nestedUnitNamespace)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IEnumerable`1 namespaceMembers)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(INestedUnitNamespace nestedUnitNamespace)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IEnumerable`1 namespaceMembers)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(INestedUnitNamespace nestedUnitNamespace)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IEnumerable`1 namespaceMembers)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(INestedUnitNamespace nestedUnitNamespace)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IEnumerable`1 namespaceMembers)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IRootUnitNamespace rootUnitNamespace)\n5>     bei Microsoft.Cci.MetadataTraverser.Traverse(IAssembly assembly)\n5>     bei CCDoc.CCDoc.GetContracts(Options options, DocTracker docTracker)\n5>     bei CCDoc.CCDoc.RealMain(String[] args)\n5>     bei CCDoc.CCDoc.Main(String[] args)\n```\n\nKind regards,\nMichael\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/32/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/5", "title": "Add treat warnings as error option for ccrewriter", "body": "Please add an option for the ccrewriter to treat warnings as errors. Without that I can't prevent checkins with contract warnings.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/5/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69346791", "body": "Microsoft.VisualStudio.Csharp.Services.Language.dll is the dll it tries to load from VS2012\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69346791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69347015", "body": "Corresponding forum post:\nhttps://social.msdn.microsoft.com/Forums/en-US/a79a3a31-ef22-4946-8b00-9953c2d57617/code-contracts-editor-extensions-on-vs-2013-rtm-crash?forum=codecontracts\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69347015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/70224375", "body": "I can confirm this.Happens on every update in VS2013.4\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/70224375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103838080", "body": "No ccrewriter is correct. ccrewriter issues warnings for example when contracts are added to interface methods. I want to treat this as error.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103838080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jbcutting": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/31", "title": "Microsoft.CodeContracts.targets reverts to .NET v3.5 reference assemblies for 4.5.2", "body": "There's no When block for .NET 4.5.2, so the CodeContractsReferenceAssemblyLibPath falls back to v3.5 contracts for projects that target 4.5.2. Consider adding a block for 4.5.2, a StartsWith('4.5') check can work for any 4.5 release, defaulting to 4.5 rather than 3.5, or using Substring() on the TargetFrameworkVersion to avoid hard-coded versions.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/31/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/106017895", "body": "It's not an issue if the entire MSBuild folder is there, but when adding to source control, it's preferable to reduce things to what's needed. Since the v12.0 file references the v4.0 folder, both folders have to be there. This would also be an issue if the 4.0 folder were removed at some point.\n\nThe simple change is to do the following, which avoids the need to worry about the version at all. This can be applied to the 4.0, 12.0, and 14.0 .targets files.\n\n<CodeContractAnalysisTargets>$(MSBuildThisFileDirectory)Microsoft.CodeContractAnalysis.targets</CodeContractAnalysisTargets>\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/106017895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Igorbek": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/19", "title": "Enumerable lazy checks", "body": "I found that `Contract.ForAll` enumerates it's argument when perform checking post- or pre- conditions. Such behavior could produce unexpected multiple enumeration in some cases where it isn't desirable. For example:\n- enumerable has no ending (infinite sequence)\n- generator has side effects\n- generator is resource eager\n\nI propose to generate substitution for parameters/arguments that checks conditions lazily.\n\n``` cs\npublic IEnumerable<int> Generator()\n{\n    Contract.Requires(Contract.ForAll(Contract.Result<IEnumerable<int>>(), x => x > 0))\n\n    while (...)\n        yield return ...;\n}\n```\n\nThis code should be rewritten to validate once the values will be produced.\nLet's say we have captured the result into `result` of type `IEnumerable<int>` from code above. Then instead of enumerating it, need to replace with `result.Select(x => { contract_check(x > 0); return x; })`.\nSame thing could be done with preconditions.\nThere's still an option to check by enumerating when the argument is array or `List` (`IList` doesn't work, because it also could be generated).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/19/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/13", "title": "CodeContracts as NuGet package", "body": "When I worked with Azure build system I found that it doesn't support CodeContracts out of the box.\nThe same issue I run into on AppVeyor build system.\n\nSince CodeContracts only support installation as MSI it was very annoying to make build work.\nIn deployment script I perform downloading of the installation package and run setup. Since setup is asynchronous without result there wasn't good way to check installation except of pulling directory or registry entries.\nFor Azure I hadn't even try =)\n\nTo make integration for build more elegant and native I created NuGet package which simply contains all the binaries and other files required for building. Upon installation it adds targets for CodeContracts rewriter explicitly to ensure it will be part of the build process.\n\nThe project lives [as sources on GitHub here](https://github.com/Igorbek/CodeContracts.MSBuild) and [as a package on NuGet](http://www.nuget.org/packages/CodeContracts.MSBuild/).\n\nIt has been tested only on .Net 4.5 targets but I believe it should work with other that CC targets.\n\nIf you guys could could take care of it I can transfer the ownership to you.\nAnyways, I support it by updating versions of CodeContracts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/13/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278556", "body": "Sure, I'll arrange some time on the next week to make PR with sources.\nWill try to merge with history.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72278556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MicahZoltu": {"issues": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/10", "title": "Remove -nologo from msbuild task.", "body": "Currently, nologo is enabled by default when building a Code Contract enabled project from Visual Studio or MSBuild.  It does not appear there is any way to disable this behavior.\n\nAs it stands now, troubleshooting code contract discrepancies between a remote build server and a local developer environment is challenging because there is no way to easily find out what version of Code Contracts is being executed on the build server or the local machine. Locally, you can check the project properties page to get the version (though this may not be what is actually executed).  On a remote build server that you don't have access too, there is no way to identify the version of Code Contracts that I can find.\n\nI _believe_ the problem is here:\nhttps://github.com/Microsoft/CodeContracts/blob/180c3ae426fae1c31105fc672eeba57c91f76ed0/Microsoft.Research/ManagedContract.Setup/MSBuild/v3.5/Microsoft.CodeContractAnalysis.targets#L207\n\nBut I really don't know much about the msbuild tasks in Code Contracts or how they are executed so I am not certain.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/10/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vanillajonathan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8bdc7180bd2d202a8b75fc8c5c33fc377c7a9512", "message": "Fixed capitalization in parameter\n\nFixed capitalization of `scopeid` parameter to camelCase in order to adhere to the .NET naming convention."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wuestholz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6cc1fafd925d87c60dfc754f63e2e249170807c6", "message": "Add a test."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e904c8d4531baa2b9b97b5e76f7d02e5eb476840", "message": "Minor changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6b1f006f8c426d3fa04969b3f737ed846803c5ff", "message": "Merge pull request #412 from wuestholz/master\n\nAdd support for bounded static analysis"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fddedc7946e673ebffb74dd879eb60b76ee8d9bc", "message": "Minor fix"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a334dbf224471282f233ce68d9779f88c0835050", "message": "Merge https://github.com/Microsoft/CodeContracts"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/566fdfb3c22f51f0b3712030d28ad23c6334afde", "message": "Extend the CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/84347fa1b821a4a0f8fe32b39bfa968d9a699e47", "message": "Add license header to test program files."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/90764e839c46179fb2a8c9d8adf5f041b84c5b3c", "message": "Merge https://github.com/Microsoft/CodeContracts"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/5c9cb2a655558d5bf0097c222dfc95cb59020356", "message": "Fix minor issue."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/db43eae59158cf6ba2a30d63a64ec069bb607545", "message": "Add new option '/maxFieldReads'."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/080baa72a20ac492c1376ab8b6ee1fc1fe97569f", "message": "Minor refactoring"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a5a9b49359210132d22212366751c32e101f7769", "message": "Minor change"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7e78df59fa71abd9cb83b9d1613821ddb0689ee4", "message": "Fix more issues."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a475a27d854fc58e92a7ff6cf08b343ab148c576", "message": "Fix an issue."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7a482caf1b1286df1dffb1e5c3ad5f3fc4290d83", "message": "Minor fix in CSV output"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ebc1dd12de0df11908f3d0a4ece85cea49b8a612", "message": "Change how the CSV file is accessed."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/cc1a49148f33b5072ec189eb836558cfc2fbae8f", "message": "Extend CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/86149e5f1e3d53916dc6591bc92d70cfe04069b0", "message": "Minor change"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/8c223ea3e674e012f402794b5af11df7b1b91afb", "message": "Make it use a synchronized 'TextWriter' for the CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/59352877b3bfb6cd405b448cba9ed47167d83537", "message": "Extend CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b1b37f437af4acfb6a5b9697754fb12d13432098", "message": "Extend CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/cbbe9f6410cfbf561f3f84ccdda76723db771215", "message": "Add checking mode for DFA controller."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ada5541ddd18f90bec4118d4218723fdb0b7a389", "message": "Minor changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fc2a73769d9f3df7df9662014dbf7809b3629661", "message": "Minor changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/84b1b47f282ee0f2f14ee705b410612ad4e5cb7a", "message": "Extend the CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d4c661d206d4bc1d9ae6dbf73650be1f63697f99", "message": "Extend the CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1b58b9a185ce3d7ba9d5b789fb160ca58730a88e", "message": "Fix minor issue."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ea62c7be9a1877693c8d522a693c430be9d62e58", "message": "Minor changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a69c883e4031199caef3b97528987b4c266f083d", "message": "Minor changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0f8f547439173b3581bb4885e0e9b0e4d01356ce", "message": "Make it log all operations that may result in imprecision."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/861be3e09ff9cce0059208442e63a4c2aab3cc01", "message": "Minor change"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f968402afa05e8a808417213a2bef339ec07df01", "message": "Extend the CSV analysis statistics."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1633c8746f154e81fd6f08d41f22e5c68160d187", "message": "Fix issue with error counting in CSV output."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e64f223fa3d1063e9a7f5b8704e80abdb9522525", "message": "Do some cleanup."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a3410b810c7ca2e80b4c9f5e4a39b7c0da1a8ca2", "message": "Remove symbolic timeouts."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/75aa955c5ad69ecd9d0765f02885093a69394b37", "message": "Minor refactoring"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3132c9515bba102ebb4058d55c5ee7705564bd7c", "message": "Minor refactoring"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/eaede46884c881eb2666bee57ff445bfc4090959", "message": "Move some tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/68399a0046297c82880ecb2b0bf546fc702a8b07", "message": "Make options more consistent."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/a5ba0318f78de7a66fb551b7b7c830afa747a20f", "message": "Add support for bounding number of analysis steps."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ac425bd04df107705dca290b1e72339d111e4dd8", "message": "Make it write to CSV file when reaching end of analysis."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/aee846d735ee903e941349d69eb674f32b25a1a0", "message": "Do some refactoring."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/4640c3e60595fbcf3ae20171fc352acafb8ee38b", "message": "Drop field 'CurrentState' from class 'DFAController'."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/dd16e9eb1f4cf9d8d4a810d856ed768abcaa4d15", "message": "Enable DFA bounds for more analyses."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/33b7980bf503e645fd21678e93f931704c50cf10", "message": "Drop methods 'Pause' and 'Resume' in class 'TimeOutChecker'."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/240fcf9f96d205c5dfe2f766f03da835c0481fb9", "message": "Minor changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/21289c2c74ded861b848c373e5b7a2071e8dc24a", "message": "Eliminate trailing whitespace."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/7df745c0a9cf562ab04040129de2c1e2a8460026", "message": "Add tests for bounded contract inference."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/cdde0b29c316721c80a3a55271fdafe698b67afa", "message": "Do some cleanup."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/0438049a7de3d6d5f8880523f60f32c65b5962f8", "message": "Do some cleanup."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f8841b340ae7e4a067634ca99dfd5a430bf63375", "message": "Do some cleanup."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/91cd760c2e9ddc99b4b86e7d95b619512061c679", "message": "Add tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9c62cd696b82dbc427b682655e3bcf314d0fdd89", "message": "Add more tests."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/17a382f61d4fa3e5aeba5e8f05fc2bd7c897dac4", "message": "Address todo in a test."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ba65771f4f53b29183a38a39289d7940f1d338af", "message": "Make it not bound calls with no modified locations."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/2871f540cc1f74321bce9986cd405e3c607ea2b7", "message": "Make it create a fresh DFA controller per analysis."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1c590c4499c11c315955e76fe6faa528595857ec", "message": "Do some refactoring."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9ee534a617197d56e5299fc8a9df0f1a32d7d4fe", "message": "Add a todo."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/ae583b38ff9e0c6d74cb85fd00763e2489c96efb", "message": "Add tests for calls to the test suite."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/bc18ed67d9461dff4e2ca1dba943ac5c3a439780", "message": "Minor fix"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d8c31424896d5752830eb67c55d5f7ae669287cd", "message": "Minor change"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/35a0a6c7fac00bd60eeb4dedebbe0e79bfd97430", "message": "Include time in CSV output for imprecisions."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e63b12215b66c136bd6a156716a3d5f6f7674956", "message": "Improve CSV output for imprecisions."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/662b22aec69df0465d079c51979d8d613d1afe3e", "message": "Minor change"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/66f9f8824be43690baa87c07dbc61917f7db803b", "message": "Add trace output for suspended program points."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/d7dd1952f8f4189911d78621e9f7676f4a86c213", "message": "Improve handling of bounds in DFA."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/291d3b8462c8b24c6cd55a47bc12bed751bdeabf", "message": "Improve precision of abstract interpreter for modulo operations."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/4b3fb904b7efed4a33baf7afd88cd9d02194d4ec", "message": "Add statistics about imprecision."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/f38d81ede5f8362f5196d92b9530fd920d3f9fcb", "message": "Add counter for possible sources of imprecision."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e5576e51636d48daee9b425cc5bb5ab09a43d4d7", "message": "Improve support for symbolic timeouts (with Maria)."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1af11e8da5c46f5fb8f1c92111fca7ef50bac9ab", "message": "Fix build warning in VS 2015."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/10631afa07db16e84d2418f76a4a812a4c579fc5", "message": "Fix build error in VS 2015."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/fbc26afa27e7d11ee003a04911f530812712a355", "message": "Fix build warning."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/143ceff2bbfcce909ad65296e5b459e3d4d0d2e4", "message": "Merge pull request #287 from mariachris/master\n\nCleaning up, so that build, analysis, and tests succeed"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/43795fe4a1b486076ad05c2c56a3961339cef7c4", "message": "Do refactoring of timers to allow us to add symbolic timers and timeouts."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/9d185042bc5fa7beb485618030cdee0449d0e2c1", "message": "Do refactoring of timers to allow us to add symbolic timers and timeouts."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DanAtkinson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/1ed660749d9860a772e1410097faf79e3475e112", "message": "Comment modification for language code\n\nNoticed that the comment for the `lang` on `AddSort` had 'us-en', not en-us."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidhesselbom": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/eeb23f5b6967fd71cd794cfb8c62c73646e84c5e", "message": "Replaced \"did you meant\" with \"did you mean\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeroen-mostert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b19896233e4fb392376f1a10979727f778982b38", "message": "Rearrange terms to avoid failing on overflow; do null checks first"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/6034514fd981b1135c2da03906eba22bd2ac0a6e", "message": "Add missing preconditions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asvishnyakov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/43497d0a4ec5f3dc06ce419d8cafd8eb2981e911", "message": "Foxtrot & Clousot tests are disable because of time limit in AppVeyor free plan\n\nMust be restored when Microsoft upgarde CodeContracts' AppVeyor plan to Basic or high"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/59fbfd477ab8508fe29277e9feb738e62b37a307", "message": "Enable automated execution of Clousot tests in AppVeyor"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/bd2c36e820279821e72a0d78a9357d5c55c418eb", "message": "Merge remote-tracking branch 'refs/remotes/sharwell/appveyor-cache'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ndykman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/b760e1250fbb2a53c3a1ba0fa241a1da6901228b", "message": "Update ExtractorVisitor.cs\n\nAgain, removing whitespace changes."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/3a4e7d16740ecfaed8190299950d15005ae1c498", "message": "Update ExtractorVisitor.cs\n\nRemoved extra line to simplify pull request merge."}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/83d9d29bce9d66df9f041ee122080a9b18da8bf4", "message": "Removing extra changes"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/e9aa5e5f8c83a7af0323d6c843988fd9e220adbf", "message": "Added override to BooleanExpressionHelper.cs for greater than expressions that look like x > null, which is a Roslyn code generated idiom for x != null."}], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/239", "title": "Changes to support contracts for FileDialog (and other common Dialogs)", "body": "This is a set of contract for FileDialog.cs and other classes to address #217. This is a fairly small set of contracts. Thanks again for reviewing.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/238", "title": "Supporting DataGridView (and it's many related classes)", "body": "Okay, this is a big merge, but all of it is in support of DataGridView as requested in issue #216. I have gone over it a few times, but peer review and comments are very much welcomed and needed. \n\nThere are some complex contract code that matches the if/throw code in the source bases. It's unclear if some of these really could be checked by the static checker, but they are there to match the source. Others are fairly straightforward.\n\nAlso, of note, there are some cases in which some obvious seem missing, but I couldn't see that the code actually would guarantee or require them (for example, a Height property always being >= 0). I am open to adding these, but I'm already doing a lot and I'm trying to be very conservative. \n\nI'm sure there are things I missed here. I just appreciate your consideration. Hopefully, this is useful down the road. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/224", "title": "Changes in System.Windows.Forms.Control", "body": "In regards to #214. There were some formatting changes to be made more consistent with other files, so the diff is fairly large. Also, there was a renamed file to fix a spelling error in a file name. \n\nAgain, thanks for your consideration. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/223", "title": "Added Contract for GetAllNetworkInterfaces", "body": "In regards to issue #215. Fairly straightforward. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FrancescoLogozzo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/commits/746523a6bb8183ede06cef85657bab06ac01c44d", "message": "Fix all remaining line endings\n\nThis commit updates all remaining text files in the repository which do\nnot follow .gitattributes to follow it. After updating to this commit,\nwe will no longer see unstaged changes appearing in branches due to these\nfiles."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098957", "body": "thanks. In general we are very open (and we expect!) for contributions\nI will add the license file\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73909241", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73909241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79141494", "body": "Foxtrot will generate the rewriter.\nThen we ILMerge it to generate ccrewrite.exe\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79141494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "aidmsu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/499", "title": "Add AppVeyor build status badge", "body": "This PR adds build status badge to Readme page.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aarondandy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098511", "body": "Should also consider creating a related issue with respect to contributing. Any CLA stuff to worry about? ASP.NET could be used as an example, they have a minimal source header and spell things out pretty well.\n- https://github.com/aspnet/Home/blob/master/LICENSE.txt\n- https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md\n- https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Formatters/DelegatingStream.cs#L2\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69098511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69340470", "body": "If somebody has a machine that reproduces this could they provide a Fusion Log for the failed bind, assuming it is a failed bind.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/69340470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72215906", "body": "@kant2002 \nThis is how I setup my configurations: http://mediocresoft.com/things/code-contracts-from-new-project-to-nuget#build-config\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72215906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72404650", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72404650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/74784992", "body": "There is a similar package for stylecop: http://www.nuget.org/packages/StyleCop.MSBuild/ . Could be a source of some inspiration.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/74784992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/77725808", "body": "I wonder if this would be a large undertaking as the compiler output from Roslyn may be different enough to cause problems. I think 2015 support is going to be very important to keep this project going but it seems like we are going to be the ones that need to do it. Hopefully somebody can get enough time to dig in and learn the code base.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/77725808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79114981", "body": "May be related:\n- https://social.msdn.microsoft.com/Forums/en-US/acdb74d0-e48d-4f45-89d6-8f845d861559/ccrewriter-crash-unable-to-cast-object-of-type-systemcompilertypeparameter-to-type?forum=codecontracts\n- https://github.com/Microsoft/CodeContracts/blob/180c3ae426fae1c31105fc672eeba57c91f76ed0/System.Compiler/StandardVisitor.cs#L1687\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79114981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79168216", "body": "Did you mean to close this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79168216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191037", "body": "I'm done reading up to 227167b042b5657b98e34736b15bebb6123e4b08 . Some good changes in this PR. Found some stuff I was unsure about but only found one item that I think needs to be addressed: https://github.com/Microsoft/CodeContracts/pull/21/files#diff-cace338ba5980de8d18370a9d6b804e2R389\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191909", "body": "While you can add post conditions I have found in my experience that CC seems to ignore them. Not sure if this is a bug or not.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81191909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81192803", "body": "When I make contract classes (sorry if my assumption is wrong) for interfaces I get around these issues by using `abstract override` or `abstract` to signal that I don't want to add a contract for that method or property.\n\nIn this case you could probably just do `abstract bool ICollection.IsSynchronized { get; }` and leave it out of your contract class.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81192803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82394297", "body": "I wonder if [ContractClass(For)] would silence it. Seems overkill even if it does work though.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82394297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84816073", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84816073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/97115553", "body": "Is anybody watching this PR with access to upload a new installer?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/97115553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104328472", "body": "@matteo-mosca Microsoft Research is still deciding how they want to manage the project going forward but I have been told they would like to keep it going in the absence of the original product owner. Worst case we will fork as there are many of us that are interested in keeping this project going. If you check the network graph you can see solid community progress, especially from @hubuk\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104328472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104344277", "body": "The project is already forked as the current branch merging PRs is: https://github.com/hubuk/CodeContracts/tree/latest . This does not exclude that branch from being merged into CodeContracts/master later when ready. Forks don't have to be a bad thing, they allow the community to keep making forward progress. This project needs some place to integrate these various branches and right now hubuk is doing an awesome job of taking care of that. I think this is a good sign, people are showing interest in this project.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104344277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105644070", "body": "If you submit your PR to this repository they will likely be picked up by other developers and merged into their working branches. There is no official fork although each person working on the project technically has a fork of it. Microsoft has not abandoned the project but is working getting back into a more active role on it. The network graph shows the current state of things: https://github.com/Microsoft/CodeContracts/network\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105644070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113346575", "body": "Part of me just wants one label for a contract change, mostly because a method may have a contract that allows all input and guarantees nothing for the input. Externally for users a method that previously had no preconditions which after an update has preconditions added will appear as a contract change.\n\nOn the other hand I see benefit to the distinct labels as we don't have a good way to distinguish between a method that does not restrict input and another that was neglected. I also see the bug vs enhancement point of view but you could also apply two labels, one being contract-change and another being enhancement.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113346575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113348433", "body": "Requiring those tags will probably be important for generating release notes, which is another topic that may be important.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113348433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113349906", "body": "Good point, I think most of those \"jump-in\" sites that pop up can be configured to take different labels too \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/113349906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115426556", "body": "I think that for some people the CC Editor Extensions are very important. I would not hold off on releasing CC for VS 2015 over it but it should at least be in the next milestone. @Daniel-Svensson is at least one user that finds it important and I also would like to see that functionality.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115426556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115544993", "body": "If tests get blacklisted we should create a separate issue to look into them and remove them or fix them to work in other environments.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115544993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115901201", "body": "I have found that tools like SourceTree help me out a bunch in that they let me visually review the branches before I do anything. I also have mine setup to show me the active PRs too.\n\nIn ./.git/config\n\n```\n[remote \"upstream\"]\n    url = git@github.com:Microsoft/CodeContracts.git\n    fetch = +refs/heads/*:refs/remotes/upstream/*\n    fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*\n```\n\nThis change combined with SourceTree's auto fetch feature and nice rendering make is easier for _me_ to see what is going on, give it a try.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/115901201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385491", "body": "Rebracer may be a nice solution for keeping formatting for the project the same for everybody, works well for me at work.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32385491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449760", "body": "Should this maybe throw a NotImplementedException?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449963", "body": "Looks like strange whitespace here\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26449963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450043", "body": "I can't find anything backing this one up. Can you add a comment for it?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450044", "body": "I can't find anything backing this one up. Can you add a comment for it?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450108", "body": "Probably right but I am curious, why not `Contract.Result<TDelegate>() != null` ?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450227", "body": "This makes sense to me but I don't see anything that would indicate it is required. Could you justify with a comment maybe?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450232", "body": "This makes sense to me but I don't see anything that would indicate it is required. Could you justify with a comment maybe?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450396", "body": "The documentation mentions that this could return null if there are no groups: https://msdn.microsoft.com/en-us/library/system.componentmodel.icollectionview.groups(v=vs.110).aspx\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450445", "body": "I'm more curious here. I prefer to return as I think it is lighter but was wondering it it made any difference. I suppose it does not matter if we have a standard, not yet at least.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26450445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26497908", "body": "My comment was meant for OnCollectionChanged but you answered it below, thanks.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/26497908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32904450", "body": "> create chat room \n\nA few people here and here have been in https://jabbr.net/#/rooms/CodeContracts but most of the action is happening here in github issues.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32904450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kant2002": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72198900", "body": "Thanks for explanation. I have a project where I was trying to enforce the Code Contracts. Having Code Contracts enabled during development was significantly slow me down during development and I decide to adopt them gradually and have different configuration.\n\nI use VS tools for Code Contracts and want to turn them off on the dev solution configuration. I was not able do that. Maybe I miss some other option in the VS tooling how I could configure such scenario.\n\nI post this on Connect but not receive any feedback. Maybe I miss something in the docs. I will try to play again with more understanding. Still this is not very obvious message.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72198900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72247244", "body": "@aarondandy Thank you so much. A lot of helpful stuff in your guide!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72247244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "RxDave": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72277122", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/72277122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81190536", "body": "Adding a post-condition shouldn't be a problem. Did you try adding it? If you're getting another warning or an error then it may be a bug in Code Contracts.\n\nThe rule is: You can't add preconditions to inherited members, but you can add post-conditions. See [Liskov Substitution Principle](http://en.wikipedia.org/wiki/Liskov_substitution_principle).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/81190536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98480287", "body": "+1\nLooks like the CCI bug was partially fixed already (_Edit:_ It no longer throws on case '5' in version > 4): \nhttps://ccimetadata.codeplex.com/SourceControl/changeset/73073 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98480287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sryze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73029470", "body": "I noticed this too. Shouldn't [this](https://github.com/Microsoft/CodeContracts/blob/180c3ae426fae1c31105fc672eeba57c91f76ed0/Microsoft.Research/ManagedContract.Setup/ManagedContracts.wxs#L263) be `<DirectoryRef Id=\"VS11_ROOT_FOLDER\">`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/73029470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "DzonnyDZ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79138412", "body": "If somebody can advise me which project produces ccrewrite.exe, I can try to fix the issue myself, but I was unable to figure it out myself :-(.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/79138412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105405935", "body": "So, you no longer need repro project from me. Do you?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105405935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chtoucas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82506629", "body": "I do observe this quite a lot, even with very simple methods. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/82506629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fahndrich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84467705", "body": "This is expected. CodeContracts only considers non-exceptional paths at the moment. So the method TryGetSettings looks like it only contains the first return.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84467705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84682332", "body": "Well, the CC infrastructure really gets rid of exceptional paths very early in the analysis. So it's difficult to avoid this problem. At the moment it's by design. Adding support for exception paths would be a major work item. \n\n-MaF\n\n> On Mar 22, 2015, at 06:00, tom-englert notifications@github.com wrote:\n> \n> Wouldn't it be better to make no suggestions in this case, instead of wrong ones?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/84682332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kwhitefoot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/88029422", "body": "Happens in VB with VS 2013 update 4 and contracts.1.7.11202.10 if I declare a field with an initializer.\nfor instance:\n\nclass x\n  private y as integer = 42\n\npublic function z(a as integer) as integer\n  contract.requires( 0 < a)\n....\n\nCompiling with contracts enabled gives a malformed contract error point at the requires in public function z.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/88029422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "icnocop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/91082711", "body": "This causes VS2013.4 to indicate that there's an update to the Code Contracts for .NET extension even though the latest version is installed.\nFor example:\nCurrent Version: 1.7.11106.10\nNew Version: 1.7.11202.10\n\nIn this case, there's a directory for both versions in that folder:\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\Extensions\\Microsoft\\CodeContracts\\1.7.11106.10\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\Extensions\\Microsoft\\CodeContracts\\1.7.11202.10\n\nFor reference, see the following (and its links):\nhttp://stackoverflow.com/questions/27914824/code-contracts-version-does-not-updated\n\nThank you.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/91082711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "VSadov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/97296518", "body": "Re: needs CCI to be updated to support the custom metadata added by the Roslyn \n\nAs I understand the most recent version of contract tools should already have updated CCI that has fixes to handle Roslyn outputs. I am not familiar with this codebase though, so I do not know where CCI lives in the tree.\n\ncc @tmat\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/97296518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "adamvoss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98132241", "body": "With VS2015 having released an RC build, it would be great for a build with this to be released :)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98132241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wasabii": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98771200", "body": "Mine is actually throwing an error on 7. ;)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/98771200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "erwinwolff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/101647328", "body": "Keep up the good work! I am also working with code contracts on a large project and I have to see them go.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/101647328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "danielcweber": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103170488", "body": "@Daniel-Svensson: Can you provide some working minimal example of some async code that makes the rewriter miss Contract.Requires when complied with Roslyn ?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103170488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103640923", "body": "I opened a separate issue for the rewriter missing Contract.Requires in async methods along with the results of some investigation (#51) and a pull request (#52).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103640923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103966782", "body": "Can you clarify: You posted two examples, one for async, one for iterators. Does the pull request fix the async example for you ?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103966782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104542023", "body": "From my experiments it's impossible anyway to compile ccrewriter with VS2015 since these projects themselves use a lot of Code Contracts Requires/Asserts/you name it and can not be rewritten properly at the moment.\n\nCan you confirm that an updated version of ILMerge will solve the issue ?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104542023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matteo-mosca": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103791603", "body": "I'm actually looking forward to this. This is the only thing preventing me to migrate my current work to .net 4.6 and aspnet v5.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/103791603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104204461", "body": "I truly hope this project is not dead. It hasn't been updated in months. This bug is preventing me to upgrade my current work to roslyn, even if it's still in RC I'd love to begin the migration\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104204461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104342463", "body": "That's reassuring. This is one of the tools I deem critical in my development, along with Stylecop, JSLint, XUnit, AutoFixture and Moq.\n\nKeep up the good work ^^\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104342463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "damageboy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104564092", "body": "Wouldn't it make sense, for the time being, to only attempt to compile CC with VS2013 for VS2015 in order to bootstrap the CC VS2015 compilation?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104564092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104564716", "body": "Also, another approache could be to start using the opensource ILRepack instead of ILMerge.\nThe former is also known to run successfully on Mono/Linux/MacOS\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/104564716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "NikitaEgorov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105170540", "body": "I have some trouble too\n\n```\npublic interface IIdentityObject<out TIdentity>\n{\n}\n\npublic abstract class DefaultDomainBLLBase<TPersistentDomainObjectBase, TDomainObjectBase, TDomainObject, TIdent>\n    where TPersistentDomainObjectBase : class, IIdentityObject<TIdent>, TDomainObjectBase\n    where TDomainObjectBase : class\n    where TDomainObject : class, TPersistentDomainObjectBase\n{\n    protected TDomainObject GetNested<TNestedDomainObject>(TDomainObject x) where TNestedDomainObject : TDomainObject\n    {\n        return default(TDomainObject);\n    }\n}\n\npublic abstract class DefaultSecurityDomainBLLBase<TPersistentDomainObjectBase, TDomainObjectBase, TDomainObject, TIdent> \n    : DefaultDomainBLLBase<TPersistentDomainObjectBase, TDomainObjectBase, TDomainObject, TIdent>\n    where TPersistentDomainObjectBase : class, IIdentityObject<TIdent>, TDomainObjectBase\n    where TDomainObjectBase : class\n    where TDomainObject : class, TPersistentDomainObjectBase\n{\n}\n```\n\nError   2   The command \"\"C:\\Program Files (x86)\\Microsoft\\Contracts\\Bin\\ccrewrite.exe\" \"@testccrewrite.rsp\"\" exited with code -1.  test\nError   1   Unable to cast object of type 'System.Compiler.TypeParameter' to type 'System.Compiler.Class'.  c:\\users\\negorov\\documents\\visual studio 2013\\Projects\\test\\test\\ccrewrite  test\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/105170540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Suchiman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/108118366", "body": "@aarondandy what leads you to this conclusion? All i see is microsoft pushed their internal source, applied on 2 days in january community pull requests and on 3 days in february a few another community pull requests. After that there have been many more pull requests from the community which are neither answered nor pulled and everything i can see on the network graph is community activity.\n\nEDIT: I'm sorry, i've slightly missed the core statement of your post. Though from where have you got the information about microsoft getting back into activity on this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/108118366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/108136986", "body": "Thanks for the offical statement @mike-barnett , i'll keep watching for news then :+1:\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/108136986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "krk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112117951", "body": "Possibly related to the \"next step\" for code contracts being stated as \"re-architecturing to integrate Z3\" in [this document (CodeContracts.pptx)](http://research.microsoft.com/pubs/141092/CodeContracts.pptx).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/112117951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11925556", "body": "typo now -> nor\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/comments/11925556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33415899", "body": "typo now -> nor\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/33415899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "xdaDaveShaw": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118316538", "body": "I have seen the same error appearing inside iterator blocks. I don't have a small repro at the moment. Let me know if you need one and I'll see if I can get one.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/issues/comments/118316538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Maxwe11": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32816002", "body": "Also consider create chat room in gitter.im like [corefx](https://gitter.im/dotnet/corefx), [roslyn](https://gitter.im/dotnet/roslyn), etc.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/32816002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "panacekcz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37023628", "body": "This file causes ClousotTests not to show in Test Explorer, because it contains methods declared `extern`.\n\n```\nError loading C:\\\u2026\\CodeContracts\\Microsoft.Research\\RegressionTest\\ClousotTests\\bin\\Debug\\ClousotTests.dll: Unable to load the test container 'C:\\\u2026\\CodeContracts\\Microsoft.Research\\RegressionTest\\ClousotTests\\bin\\Debug\\ClousotTests.dll' or one of its dependencies. Error details:\nSystem.TypeLoadException: Could not load type 'TestPostconditionInference.FilterRedundantPostcondition' from assembly 'ClousotTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because the method 'GetApplicationVersion' has no implementation (no RVA).\nSystem.TypeLoadException: Could not load type 'TestPostconditionInference.Array' from assembly 'ClousotTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because the method 'get_Length' has no implementation (no RVA).\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37023628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37066807", "body": ":bulb: What about using invariant culture if `/regression` option is used? Possible implementation: 4c98ec5a4e181a9d05b627f04c56507317d0c3ec\nI think a more complicated `/LCID` does not add much value (why would you use it other than for this?).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37066807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37971898", "body": "Should be `Contract.Result<string[]>`?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/37971898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AlexanderTaeschner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/43110847", "body": "In the loop version instead of\n\n```\ncurrentType = declaringType.BaseType\n```\n\nthis should be\n\n```\ncurrentType = currentType.BaseType\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/CodeContracts/pulls/comments/43110847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}