{"_default": {"1": {"cbales": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/132", "title": "Capability annotations are not inherited correctly", "body": "", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e3c3b511a228e44f92eb997e33af6e03edc3aaed", "message": "Merge pull request #136 from Microsoft/bom-fix\n\nRemove BOM from encoding"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/81a7c8284b229b352c9185852b10a885f9e433a5", "message": "Remove BOM from encoding"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/59eb5e4009b48ae343c139a900c159b851285fe1", "message": "Fix sp error in catch"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/480e5107de1bd3afd82aa7395dc62d30aaae8657", "message": "Merge pull request #133 from Microsoft/error-handling\n\nCatch non-fatal errors"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/31f59ec40f4582b86ec431aa4613e62974d4d855", "message": "Merge pull request #135 from Microsoft/perf-improvements\n\nMultithread file I/O"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/dba179f8818f84a09783221c86c5586d4b2596ab", "message": "Switch to using lazy locks"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1b7db3027e61adc583f7971d79dc233eab902b5f", "message": "Catch race condition on directory creation"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3a1002b0eb414d1f870251dc7503ca41b7a2dd7e", "message": "Switched to async locks with awaits\nUses batching to prevent I/O overload. Saves about 1m of processing time"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bdbc58c769c5f0ad1ec97a3cca5bec35108e0429", "message": "Merge branch 'error-handling' of https://github.com/Microsoft/Vipr into error-handling"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e080bc23ef1a4da256be328e54c223f289a5e083", "message": "Update caught error messages and severities"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ab5245d0d1d9c2df3b6f30886b3562f3fd651410", "message": "Merge pull request #134 from Microsoft/error-testing\n\nAdd error tests for properties and primitives"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b32d6017ab2168cad0654518c1ff9eb32b7b7ae8", "message": "Add case for locked files"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bc4858afa84864c2e714000fe3f3da001e3cca93", "message": "Write files to system asynchronously"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c9fbc055378f024b648b5d02415c306a1bb68a63", "message": "Remove incomplete tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a4f04e3265260dcee9c10a0d737ce158b2532bb2", "message": "Add tests for catching invalid property types"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a530268cb62b3ac1fe72e37f2d2ff9d33dddf68d", "message": "Utilize provided Logger"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9f33d68ad6b409d4cea87a85637216a2274e0622", "message": "Catch non-fatal errors to allow generation to continue"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/316466194", "body": "Causes customers to build libraries that are missing available functionality. See microsoftgraph/MSGraph-SDK-Code-Generator#93", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/316466194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jamescro": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/105", "title": "OutlookServicesClient.Me.SendMailAsync does not refresh access token", "body": "I'm upgrading an app from v 1.0.22 to v1.0.34 of the OutlookServices .NET client library. I have existing code that creates a message and then sends it like this:\n\nawait outlookClient.Me.SendMailAsync(message, true);\n\nWhen I do that, the REST call does not include the access token because the OutlookServicesClient doesn't have a populated access token value.  The result is a 401 (unauthorized) error.\n\nIf I add the message to the drafts folder before sending it, I don't have this problem because the AddMessageAsync method uses the access token getter method that I supply in the constructor to refresh the access token:\n\nawait outlookClient.Me.Messages.AddMessageAsync(draft);\n\nI've stepped through the code and confirmed that AddMessageAsync calls the access token getter method.\n\nI did not see this issue in v 1.0.22 of the library. Should the SendMailAsync() method always refresh the access token, just as AddMessageAsync does? If not, how can I ensure that the OutlookServices client will pass an access token with the request?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martellaj": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/102", "title": "Implement ThenBy and ThenByDescending LINQ methods in ProxyExtensions.", "body": "", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/73", "title": "Requests need to include the Cache-Control header for Windows Phone usage.", "body": "Windows Phone caches all HTTP requests by default. A request, i.e. getting emails from Inbox, may not reflect the true state of the resource after the first call.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sridhar-MS": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/101", "title": "Create a Fetcher class for Media Entities with methods UploadMediaAsync and DownloadMediaAsync", "body": "\"MediaEntityBase\" class in proxy extensions currently has the methods UploadMediaAsync and DownloadMediaAsync. Ideally data classes must not build http requests instead it must be done by fetcher classes. \n\nSo create a new Fetcher class for media entities which supports media entities related methods  UploadMediaAsync and DownloadMediaAsync.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/99", "title": "Add support for \"?$search\" query option in Vipr", "body": "[?$search](http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part2-url-conventions/odata-v4.0-errata02-os-part2-url-conventions-complete.html#_Toc406398167) isn't supported\nExample:\u00a0\u00a0GET ~/pages?$search=disney\n\u00a0Search isn't supported. We would use this similar to .Expand(\"string\"), where a string is passed in and then URLEncoded into the query param.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/99/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/98", "title": "Better exceptions can be thrown by Vipr generated C# proxies", "body": "In a number of the call patterns, for example in CopyToSectionGroupAsync(String) (or any actions/functions), there's a Uri check that is followed by throwing a naked exception:\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri myUri = this.GetUrl();\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (myUri == (Uri) null)\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new Exception(\"cannot find entity\");\n\u00a0\n\nCould we throw a better exception than this? The expected catch block I'd have to write to catch and handle\u00a0this exception would feel silly if I have to catch an Exception and then dispatch on the message.\u00a0\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/97", "title": "Fix Ugly code formatting in Vipr generated C# proxies ", "body": "Example:\npublic enum PatchActionType : int\n\u00a0\n\u00a0 \u00a0 {\n\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 Replace\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 0\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Append\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 1\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Delete\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 2\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Insert\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 3\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 \u00a0 \u00a0 Prepend\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 4\n\u00a0 \u00a0 \u00a0 \u00a0 ,\n\u00a0 \u00a0 }\u00a0\n\nWould probably look better w/o the extra new lines. Maybe something like this instead:\n\u00a0 \u00a0 public enum PatchActionType : int\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 Replace\u00a0= 0,\n\u00a0 \u00a0 \u00a0 \u00a0 Append\u00a0= 1,\n\u00a0 \u00a0 \u00a0 \u00a0 Delete\u00a0= 2,\n\u00a0 \u00a0 \u00a0 \u00a0 Insert\u00a0= 3,\n\u00a0 \u00a0 \u00a0 \u00a0 Prepend\u00a0= 4\n\u00a0 \u00a0 }\u00a0\n\nA space on the generated class names between the name of the class and its parent may be nice.\nSQUO: \u00a0 \u00a0 public partial class PageLinks:Microsoft.OData.ProxyExtensions.Lite.ComplexTypeBase\nPROPOSED:\u00a0\u00a0 \u00a0 public partial class PageLinks\u00a0:\u00a0Microsoft.OData.ProxyExtensions.Lite.ComplexTypeBase\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/97/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/86", "title": "[C#Writer]: Abstract EntityType without Key produces non-compiling c# code", "body": "For example the below edmx produces non-compiling c# code.\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<edmx:Edmx Version=\"4.0\" xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\">\n  <edmx:DataServices>\n    <Schema Namespace=\"mscrm\" xmlns=\"http://docs.oasis-open.org/odata/ns/edm\">\n      <EntityType Name=\"crmbaseentity\" Abstract=\"true\" />\n      <EntityType Name=\"customerrelationship\" BaseType=\"mscrm.crmbaseentity\">\n        <Key>\n          <PropertyRef Name=\"customerrelationshipid\" />\n        </Key>\n        <Property Name=\"customerrelationshipid\" Type=\"Edm.Guid\" />        \n        </EntityType>\n        <EntityContainer Name=\"System\">\n        <EntitySet Name=\"customerrelationships\" EntityType=\"mscrm.customerrelationship\"/>\n        </EntityContainer>\n        </Schema>\n  </edmx:DataServices>\n</edmx:Edmx>\n```\n\nThe collection class for 'crmbaseentity' uses the Key property to overload the index [] operator. But since the key is missing the generated code looks like below snippet and compilation fails with error - \"Indexers must have at least one parameter\".\n\npublic global::mscrm.IcrmbaseentityFetcher this[] {}\n\nAccording to [OData CSDL spec](http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_Toc406397975) an abstract EntityType may or may not define a Key element.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/86/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/77", "title": "Rename Fetcher classes to something better like \"RequestBuilder\" or \"Requestors\".", "body": "Fetcher classes does a lot more than just fetching entities from the server. It constructs the http request and parses the http response too. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/77/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/75", "title": "Fetcher.DeleteAsync must not take the entity type object to be deleted as a parameter.", "body": "DeleteAsync method (inside a fetcher) takes the entity type object to be deleted as a parameter. This is not required. The fetcher class has the URL path to that entity type. It must be able to just send a DELETE request with that URL.\n\nBut right now we take a dependency on OData Client libraries. We call DataServiceContext.DeleteAsync to delete an entity type. But this method requires that entity type object as a parameter to send that DELETE request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/74", "title": "For ReadOnly properties CSharp writer must not generate setters", "body": "If a property is annotated as readonly, CSharp writer must not generate setters for that property.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/74/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/72", "title": "SaveChangesAsync must not be a part of the Fetcher classes", "body": "Calling Fetcher.SaveChangesAsync method not only saves the corresponding entities but the entire model changes that are cached in the client. This can be somewhat misleading.\n\nConsider removing it from the Fetcher class. And developers can use client.Context.SaveChangesAsync directly to save all the cached changes in the model (where 'client' is an entity container object). \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/72/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/71", "title": "Fetcher classes of abstract entities should have Update/Delete/Execute/Expand methods", "body": "Given an abstract entity should its fetcher class have the Update/Delete/Execute/Expand methods? Having these methods would allow to iterate through collections of the base type to update/delete the derived types. \n\nRight now these methods are not generated for such fetchers. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/70", "title": "[ProxyExtensions.Lite]: Move DownloadMediaAsync and UploadMediaAsync out of MediaEntityBase.", "body": "In the light-weight version of proxy extensions (Microsoft.OData.ProxyExtensions.Lite) DownloadMediaAsync and UploadMediaAsync methods must be moved from MediaEntityBase to a new fetcher class (example 'MediaEntityFetcher'). So in the generated proxy 'MediaEntityFetcher' must be used to download/upload media instead of using the media entity objects themselves.\n\nThis is similar to having the Update/Delete method inside 'RestShallowObjectFetcher' instead of 'EntityBase'.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/70/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/01b11a11d135c03cdfa89eba545145cb68b1b009", "message": "Add missing test files to fix build failures"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f206a436752fa7d89eb103dc16794bd141a876f9", "message": "Enable Capability Annotations support in Vipr CSharpWriter\n\n- The fetcher/collection methods which enables capabilities can be turned on-off with capability annotations.\n- For each OdcmProjection for an OdcmType, the CSharpWriter emits fetcher and collection interfaces with supported methods.\n- The Fetcher/Collection class is the underlying implementation for all the fetcher/collection interfaces.\n- The type of a navigation property is based on its OdcmProjection."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/dcfc884a250fd1d2882b974069b0b807bafce07d", "message": "Merge pull request #95 from piotrpMSFT/master\n\nFixes accesstokengetter deadlock issue"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/10f64c0d3e1faa86348991a0419a2f4766838de2", "message": "Add new OdcmCapability - OdcmUpdateLinkCapability and OdcmDeleteLinkCapability to the OdcmModel\n\n- The OdcmModel now supports these two additional capabilities.\n- The OdataReader now sets default capabilities for EntitySet, Singleton and NavigationProperties.\n- Each OdcmProperty starts with a default set of capabilities and then based on annotations their capabilities are mutated.\n- Creating Projections for a property is now done after parsing the entire EdmModel when we have deterministic view of all the capabilities of all the properties."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/06fe25a4ad2072c106d972337882725230ecd431", "message": "Merge pull request #92 from Sridhar-MS/fetcher-refactoring\n\nAdd methods AddLinkAsync/RemoveLinkAsync/UpdateAsync/DeleteAsync to the Collection Fetcher Classes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5c7118fb7ce2a445b9e0b03579985cebe5fd1b1e", "message": "Remove redundant Fetcher class tests\n\nFetcher methods like Execute/Update/Delete etc are verified by the Fetcher interface test 'Given_an_OdcmClass_Entity_Fetcher_Interface'. So removing the tests from Fetcher class scenarios."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/92832660234cf1c74799899584a1b8454ea228cb", "message": "Merge branch 'master' into Annotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/261ba6ddefc1475dac97e300d18cd68d3fa7b41e", "message": "Address PR Feedback - Add batching tests for the newly added methods to Fetcher\\Collection methods"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/35cd4b23a867ec37500d9be3206e993f7cb02005", "message": "Address PR Feedback - Fix Collection/Fetcher link-related tests to implement 'NavigationPropertyTestBase'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d50fd1d63e3821473251aeac24efe87d0d3b1004", "message": "Add methods AddLinkAsync/RemoveLinkAsync/UpdateAsync/DeleteAsync to the Collection Fetcher Classes\n\n- AddLinkAsync - Adds an entity reference to an entity collection (entity sets, collection-valued navigation properties)\n- RemoveLinkAsync - Removes an entity reference from an entity collection (entity sets, collection-valued navigation properties)\n- UpdateAsync - Update a single entity in an entity collection (entity sets, collection-valued navigation properties)\n- DeleteAsync - Delete a single entity from an entity collection (entity sets, collection-valued navigation properties)\n\nThe data-classes from now will only have properties that hold an entity value. It does not send/receive any request/response to/from an OData service. Any operation requiring to talk to the OData service has to go through the Fetcher and Collection classes.\n\nThe data classes still explicitly implement the data-interface navigation properties. Ideally this is not required, just the explicit properties are sufficient. But due to a bug in 'Expand' scenario this is not yet removed in the generated proxies."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2849073245862544561432a889d533a7eaafc94b", "message": "Merge pull request #91 from Sridhar-MS/fetcher-refactoring\n\nAdd methods SetAsync/UpdateLinkAsync/DeleteLinkAsync to the Fetcher Classes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6d2814061e475c5898e0510c46026ed889ebcafa", "message": "Add unit tests to make sure Set/UpdateLink/DeleteLink methods are emmitted for Fetcher classes."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/171eaec1738e1bde6816c9a16ae9b2f5cfdae3f6", "message": "Add methods SetAsync/UpdateLinkAsync/DeleteLinkAsync to the Fetcher Classes\n\nDeleteLinkAsync\n - It deletes the link between an EntityType and its single-valued navigation property.\n\nUpdateLinkAsync\n - It updates/modifies the link between an EntityType and its single-valued navigation property.\n\nSetAsync\n - Its sets/creates a new entity for the navigation property of an entity type.\n\nNote: The explicit interface navigation properties are not yet removed from the data/concrete classes. It will be done when all the appropriate methods for the collection fetchers."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c082dfb5eb07204a223507e4567b91413371ed1c", "message": "Remove the parsing of annotations by 'ODataVocabularyReader'.\n\nODataVocabularyReader does not gracefully fail for unknown annotations. It aggressively throws exceptions whenever it encounters annotations it is unable to parse. \"ODataVocabularyReader.GetOdcmAnnotations\" parses and creates a list of 'OdcmVocabularyAnnotation'. But this list not currently used by the odcmwriters to do anything useful. So I have removed the call to \"ODataVocabularyReader.GetOdcmAnnotations\" as a workaround. We can add this call to parse annotations once it is stable enough to handle unknown annotations. See issue #84."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/948b768163193edf7c405d5a25eb519b1364a7c3", "message": "Merge pull request #81 from Sridhar-MS/fetcher-refactoring\n\nPorting changes into the 'Lite' version of assemblies"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7882f209bb367ea7352ff9d36969cb84d30e6b20", "message": "Porting changes into the 'Lite' version of assemblies\n\nAssemblies:\n- Changes from Microsoft.OData.ProxyExtensions to Microsoft.OData.ProxyExtensions.Lite\n- Changes from CSharpWriterUnitTests to CSharpLiteWriterUnitTests\n- Changes from ProxyExtensionsUnitTests to ProxyExtensionsLiteUnitTests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/aec7e2970a88b0c543ad9c18084fc9738313caf2", "message": "Merge branch 'master' into Annotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b0fba813ac158d16693039bb359bdc06efa85124", "message": "Merge pull request #68 from Sridhar-MS/fetcher-refactoring\n\nMove Update/Delete/SaveChanges method from Concrete class to Fetcher class"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d3bf4e262a64954f060f3ea22468540d28481054", "message": "Reduced the accessibility of some of the EntityBase members from 'public' to 'protected internal'."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f3da46395f5cbd401b749340dfae811d820bbb38", "message": "Remove tests which checks for - Concrete class/interface does not have methods for EDM actions/functions.\n\nThis is overtesting the Concrete class/interface. There is already a test which makes sure that Concrete class/interface do not implement Fetcher interface and hence do not implement any of its methods."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/dd50966604cac49a6664e7fb89a729f852d5a53d", "message": "Fix ProxyExtensionsLiteUnitTests to use Fetcher Update/Delete/SaveChanges methods"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1da500726512fb07e885f279a95bdcf7d101cd8f", "message": "Change the reference from \"Microsoft.OData.ProxyExtensions\" to \"Microsoft.OData.ProxyExtensions.Lite\" for ProxyExtensionsLiteUnitTests project."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e7b0476a87ef3c6ac8ccd452f1a5483550e46289", "message": "Create unit tests project for Microsoft.OData.ProxyExtensions.Lite.\n\nIt is forked from the current ProxyExtensionsUnitTests project and new tests/changes will be added on top of it."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8ab7b8b319d3f1bb6a7b259bbd04c419ce200d0f", "message": "Add new unit tests for Update/Delete/SaveChanges methods in the Fetcher class."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2ed18d87262fd698385f225980183467442c5098", "message": "Fix CSharpLiteWriter unit tests\n\n- Fix the namespace reference to \"Microsoft.OData.ProxyExtensions.Lite\".\n- Fixed tests to make up for changes in the generated concrete classes when using \"Vipr.Writer.CSharp.Lite\"."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/698dfe9443bd324576ed1478d9c096246e6e7c79", "message": "Create unit tests project for Vipr.Writer.CSharp.Lite\n\nIt is forked from the current CSharpWriterUnitTests project and new tests/changes will be added on top of it."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8965a720dbc0d4232114fe9775bd2124a64ae9cf", "message": "Move Update/Delete/SaveChanges method from Concrete class to Fetcher class\n\nConcrete Class (for EntityType) changes\n- No longer implements Fetcher class\n- Removed Fetcher properties and fields\n- Removed Fetcher UpCast methods\n- Removed action/functions.\n- Removed EnsureQuery private method.\n- Removed ExecuteAsync/Expand methods.\n\nFetcher Class (for EntityType) changes\n- Added UpdateAsync/DeleteAsync/SaveChangesAsync methods\n\nEntityBase class changes\n- Removed UpdateAsync/DeleteAsync/SaveChangesAsync methods.\n- OnPropertyChanged will no longer aggresively try to update the entity.\n\nRestShallowObjectFetcher Class (for EntityType) changes\n- Added UpdateAsync/DeleteAsync/SaveChangesAsync methods"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f0a6e517718804a26588258690ca4a38466c076c", "message": "Creating Microsoft.OData.ProxyExtensions.Lite project, to be used for generating light-weight client proxies.\n\nIt is forked from the current Microsoft.OData.ProxyExtensions project and new features/changes will be done on top of it."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/11f21444bac5d06023d5361df65d8364ab9a1043", "message": "Creating Vipr.Writer.CSharp.Lite project, to be used for generating light-weight client proxies.\n\nIt is forked from the current Vipr.Writer.CSharp project and new features/changes will be done on top of it."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/53cfd76b07790571545232bc9667eb6d3ff6aebe", "message": "Updating the namespace for OData Capabilities parsing files"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/518fe9afe04570798570c379ed5f48873b38e609", "message": "Merge branch 'assembly-rename' of https://github.com/Sridhar-MS/Vipr into fetcher-refactoring"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/adf530dc14c46d0fcf8d991a827b210a467fffe1", "message": "Renaming the assemblies and namespaces to match the csproj names"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/246be4ac422ffd271d225e0b01f63662e18c53c5", "message": "Merge branch 'master' into Annotations\n\nConflicts:\n\tsrc/Core/Vipr.Core/Vipr.Core.csproj\n\nResolving conflicts and fixing build breaks created by the merge"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2517c027c890baa00503e92ecca7c18abd395e2f", "message": "Removal of Capabilities Annotations parsing logic from the OdcmModel\n\nOdcmModel is designed to be protocol agnostic. Earlier OData concepts like Capabilities annotations parsing were wrongly introduced into the OdcmModel in the spirit of code simplification. But it violated a core principle of the OdcmModel that it should be protocol agnostic. The fix is to abstract away OData Capabilities annotations parsing into the ODataReader.\n\nFix #60"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e7482098a22b72740da95a535963f4be6dbf4c31", "message": "Merge branch 'Annotations' of https://github.com/Microsoft/Vipr into Annotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6398c5e09a2b8b3232e9f763825735a28114e89b", "message": "Fixing build break caused by merging 'master' with 'Annotations' branch.\n\nOdcmProperty.Type is a readonly property with the recent support for Capabilities support. So fixed the test by creating a new Projection for an OdcmProperty."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b3bc859033e0284d4d78c93d319b7dbe54dd1ad9", "message": "Merge branch 'master' into Annotation"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3c2920143e85f2593ff950c46924de54adbb8183", "message": "Capability Annotation Unit tests for OdcmModel"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/01e98b70aa4365a69e3207575e4da856a49ab82e", "message": "Merge pull request #53 from Sridhar-MS/Annotations\n\nSupport for Capability Annotations Reading in OdcmModel"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/192f58c87c7fd498c5f98f9ebcab595976545f9a", "message": "Addressing Code Review Feedback for Capabilities annotation in OdcmModel"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a0b9b2800a45eb7b67fe37e0b50e66e6a9c00022", "message": "Coupling of OdcmCapabilities and Capability Annotations Parsing Logic\n\n- Removed the Capability Annotations Parsing Logic from ODataReader.\n- Coupled the above logic with the corresponding OdcmCapability class."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bf9e8f80a9afdbb85925655e7ca16789395f397a", "message": "Support for Capability Annotations Reading in OdcmModel\n\nWe are starting with a limited set of Capabilities - InsertRestriction, UpdateRestriction, DeleteRestriction and ExpandRestriction. Capabilities define how an EntityType or its collection is projected in the generated code. To enable that OdcmModel introduces a new class called \u0091OdcmProjection\u0092. This class contains the OdcmType (EntityType to be projected) and the capabilities (the operations to be projected for the EntityType). On the other hand each OdcmType will maintain a list of corresponding OdcmProjections. The OdcmWriters will use this projection information to drive the codegen of interfaces (or similar artifacts) for a given OdcmType. The emitted interfaces will only project those capabilities that are available when accessing an EntityType (or its collection) from a given context.\n\nIn the OdcmModel, both Entity Sets (of an EntityContainer) and Navigation Properties (of an EntityType) are both modeled into OdcmProperty. Given that the Capabilities we are supporting will affect Client Library properties which give access to Entities and Entity sets, the OdcmProperty class will be updated to expose a Projection property. OdcmProjection is added as a property to the OdcmProperty class, so each OdcmProperty is mapped to an OdcmProjection.  [BreakingChange] Also the OdcmType property of the OdcmProperty class is now redundant and will be removed [/BreakingChange].\n\nEssentially there are three major changes in the OdcmModel.\n- OdcmType will have a list of OdcmProjections. The OdcmWriter will generate interfaces for each Projection of an OdcmType.\n- OdcmProperty will have a reference to an OdcmProjection. OdcmWriter will resolve this Projection to one of the interfaces generated in the above step. That resolved interface will be used as the return type of the Property when codegen\u0092ing.\n- OdcmProperty class will no longer have OdcmType property."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6799c28976ecfd6c56f2055e8497cf6ea311f7f2", "message": "Merge branch 'master' of https://github.com/Microsoft/Vipr\n\nConflicts:\n\tsrc/Core/Vipr.Core/CodeModel/OdcmAnnotatedObject.cs\n\tsrc/Core/Vipr.Core/CodeModel/OdcmNamespace.cs\n\tsrc/Core/Vipr.Core/CodeModel/OdcmObject.cs\n\tsrc/Core/Vipr.Core/CodeModel/OdcmType.cs\n\tsrc/Core/Vipr.Core/Vipr.Core.csproj\n\tsrc/Readers/ODataReader.v4/OdcmReader.cs\n\tsrc/Writers/CSharpWriter/SourceCodeGenerator.cs\n\ttest/ODataReader.v4UnitTests/ODataReader.v4UnitTests.csproj\n\nMerging 'Annotations' branch with 'master'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/276fa07d6f9a2248d4296af8f6b569b8fc231310", "message": "Merge branch 'Annotations'\n\nConflicts:\n\tsrc/Core/Vipr.Core/CodeModel/OdcmMethod.cs\n\tsrc/Core/Vipr.Core/CodeModel/OdcmNamespace.cs\n\tsrc/Readers/ODataReader.v4/ODataReader.v4.csproj\n\tsrc/Writers/CSharpWriter/Method.cs\n\ttest/CSharpWriterUnitTests/CSharpWriterUnitTests.csproj\n\ttest/CSharpWriterUnitTests/CodeGenTestBase.cs\n\ttest/ODataReader.v4UnitTests/ODataReader.v4UnitTests.csproj\n\nManually resolved merge conflicts between 'master' and 'Annotations' branch"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2b3d0845db0a71894a46ab36246d5351ed5846fb", "message": "Merge pull request #45 from Sridhar-MS/description-annotations\n\nDescription annotations support in Vipr"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5d4fb2c41aaa14c09b3d60ed66caaad9f6c9f469", "message": "Addressing Pull Request Feedback for Description Annotations."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/607da249be2eb402eb7666d5588b94f2b0211e14", "message": "Long Description Annotation support in OdcmModel\n\n- Introduced a new string property 'LongDescription' in OdcmObject. It captures the LongDescription Annotation text.\n- Writers can use this property to emit docs or comments in source files.\n- Changes in OdcmReader.cs to read the long description annotations of various entities."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/54769f1d4a6a58b8a5e97282401f4fc7b175be86", "message": "Description Annotation Support in CSharpwriter\n\n- Changes in CSharpwriter to create a summary tag for a given description annotation.\n- This summary tag enables the description annotation to show up via intellisense in Visual Studio.\n- Added unit tests to test the summary tags generation."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d4ede6ab6c5ff7fd65e6dfe241d00ad737238017", "message": "Description Annotation Support in OdcmModel\n\n- Introduced a new string property 'Description' in OdcmObject. It captures the Description Annotation text.\n- Changes in OdcmReader.cs to read the description annotations of various entities."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1dcfc211b65b291e92660c914b623c2f3790eb03", "message": "Merge branch 'master' into Annotations\n\nConflicts:\n\tsrc/Core/Vipr.Core/Vipr.Core.csproj\n\nResolving merge conflict between 'master' and 'Annotations' branch"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a1cdae689dba8f69c5dbfeacc4cab45b0437f75a", "message": "Merge branch 'master' into Annotations\n\nConflicts:\n\tsrc/Core/Vipr.Core/CodeModel/OdcmObject.cs\n\tsrc/Core/Vipr.Core/Vipr.Core.csproj\n\tsrc/Readers/ODataReader.v4/ODataReader.v4.csproj\n\tsrc/Readers/ODataReader.v4/OdcmReader.cs\n\ttest/ODataReader.v4UnitTests/ODataReader.v4UnitTests.csproj\n\ttest/ODataReader.v4UnitTests/packages.config\n\nResolving the merge conflicts between 'master' and 'annotations' branch."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/50cd225bc5f5d3ea32ea80cbc8a4fd3176d1deeb", "message": "Merge branch 'master' into Annotations\n\nConflicts:\n\tsrc/Core/Vipr.Core/Vipr.Core.csproj\n\nResolving conflicts and fixing build breaks after merging 'master' branch with 'Annotations' branch."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e53abaf6a0dba75b94d83670d75c60632557e8ea", "message": "Build Break Fix - Merge 'Master' with 'Annotations' branch.\n\nFixed the build break caused by merging 'master' with 'Annotations' branch."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/72ec3f12338ef150b37937afc2e1e9da818b89e1", "message": "Merge branch 'master' into Annotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e35deb1f00f61c7f2c24df0c1ea8f67890bf72fb", "message": "Merge pull request #29 from MrTomWhite/Annotations\n\nRead annotations into Code Model"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ea9afaffa118bd69dea4f6c6160fcfd0b8c1455e", "message": "Merge pull request #19 from Sridhar-MS/jenkins\n\nFixing the build status badges for the Jenkins CI"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6ed5902a2282bc960310be3db7ba53830f31d300", "message": "Fixing the build status badges for the Jenkins CI\n\nJenkins CI has been setup for Vipr repo. This enables to navigate to the Jenkins URL for the Vipr repo from the Readme.md file."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72280891", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Monday Jan 26, 2015 at 22:05 GMT_\n\n---\n\n@tonycrider is working on a pull request that specifies whether a given OdcmParameter should be passed to the service in the URL or in the request body. It will also specify the HTTP Verb that a given OdcmMethod should use. I will fix this issue once that PR is in.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72280891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72287853", "body": "This is a duplicate of issue #8.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72287853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72347469", "body": "It seems one of the ProxyExtensions tests is timing out in the appveyor environment. I will take a look.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72347469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72512560", "body": "Jenkens CI system has been setup for Vipr. So this is no longer required.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72512560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72549376", "body": "@tonycrider addresses the same issue in his PR #20 . So closing this pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72549376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72943459", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72943459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632187", "body": "@MrTomWhite Can you please create this PR against the Annotations branch? We are planning to do the Annotations feature in that branch and merge back into master.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632282", "body": "@MrTomWhite 'Annotations' branch is even with master. So creating a PR should be easy.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74586447", "body": "LGTM apart from my minor comments.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74586447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/76789116", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/76789116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86694498", "body": "LGTM!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86694498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88167343", "body": "Other than the folders renaming, everything LGTM!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88167343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/90988096", "body": "Ping @tonycrider @piotrpMSFT - all the test fixes are in now.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/90988096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/91058255", "body": "I have created issues for some of the comments and I have fixed others.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/91058255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/91712055", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/91712055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/99153084", "body": "The failing test has nothing to do with the changes in this PR. It seems to be a flaky test which needs to be fixed. I am working on it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/99153084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26860830", "body": "In the new commit, OdcmProjection has a list of OdcmCapability. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26860830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26860900", "body": "Changed this to get a List of default OdcmCapability for an OdcmProjection.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26860900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26861653", "body": "Changed this to use a collection of OdcmCapability. Now Writers can iterate over this collection to get a list of capability. it also make adding new capabilities support a bit easy.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26861653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26861710", "body": "Refactored this method into 2 different 'Get' methods.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26861710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26869264", "body": "@MrTomWhite I feel the original model adds an extra layer in converting the raw annotations into OdcmCapability. Also in this case the raw annotation (like insertrestriction) properties do not map directly to OdcmCapbility class. \n\nAlso OdataCapabiltiesReader right now dispatches the parsing logic to a list of parsers which can parse the annotations any way they want. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26869264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26875114", "body": "> \" There's not going to be custom parsing semantics for annotations that are already defined in some schema somewhere.\"\n\nThis is not true. For example take the case UpdateRestriction annotation. We do not directly parse and convert this annotation into strongly typed CLR object using the generic parser. That is not very useful in how we want to represent OdcmCapability for OdcmProperty. Instead we do custom parsing to represent this annotation in the OdcmModel.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26875114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27310280", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27310280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27311290", "body": "Fixed. Added more details.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27311290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27311607", "body": "For a matching Projection, we don't create a new one. Let me change the name to Ensure.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27311607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27311867", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27311867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27312345", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27312345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27314241", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27314241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27316958", "body": "The exception is because of a malformed annotation. But at this point we do not have more details like the row/column number etc. I will add this text to exception - \"This can be caused by malformed Capability Annotation on an EntitySet\"\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27316958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27316999", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27316999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317301", "body": "I think renaming it to something like \"SetCapabilitiesForOdcmProperty\" will make it difficult to read the code. Mainly because the logic inside this method assumes that an entity set is going to be parsed for capabilities.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317939", "body": "The way to think is that every property starts with a default projection with all the capabilities. As we encounter capabilities annotations, this projection is replaced/overwritten.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27318245", "body": "I specifically named it as BooleanValue to capture the **Bool** attribute of the capability annotation in the edmx. \nFor example - \n\n``` xml\n<Annotation Term=\"Org.OData.Capabilities.V1.DeleteRestrictions\">\n    <PropertyValue Property=\"Deletable\" Bool=\"false\" />              \n</Annotation>\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27318245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27318764", "body": "These constructors capture the default value of an annotation as specified in the [capabilities edmx](http://docs.oasis-open.org/odata/odata/v4.0/os/vocabularies/Org.OData.Capabilities.V1.xml).\nIt is just a coincidence that all these capabilities support a default value of true.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27318764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27318799", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27318799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27320037", "body": "At the time of construction of an OdcmProperty, we will not have enough knowledge of the restriction annotations on it. An example being a navigation property whose restriction annotation is not defined on it but rather on an entity set (via NonInsertableNavigationProperties etc,). \n\nAlso reading of raw annotations is something which is not done in the Vipr.Core library. It is left to the OdataReader to read them and convert into OdcmAnnotations\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27320037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27320583", "body": "I am thinking of keeping Type as a property inside OdcmProperty \n\n``` c#\npublic OdcmType Type\n{ \n    get\n    {\n          //do some null check\n           return this.Projection.Type;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27320583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27330850", "body": "In the first commit of the PR I had written the parsing logic in the OdataReader. But that seemed to make the code complicated and a bit difficult to understand since the OdcmCapability and its parser lie in different places. That is why in the second commit I coupled both in one place inside the OdcmCapability class. It made the code look much cleaner and easier to understand.\n\nAlso what about \"OdcmVocabularyAnnotation\" class in OdcmModel? It is used to capture the list of annotations on an OdcmObject. Isn't this specific to OData?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27330850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339626", "body": "I am going ahead with the merge. I will file an issue to track the decoupling of Annotation Parsing and OdcmCapability.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339771", "body": "Created issue #60 to track this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28016999", "body": "Created issue #70 to track this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28016999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28018006", "body": "Created issue #71 to track this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28018006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28019481", "body": "Created issue #72 to track this.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28019481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28019623", "body": "The no-op is used to prevent saving changes immediately when calling UpdateAsync(true) or DeleteAsync(true). It enables the concept of delay saving.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/28019623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29201441", "body": "There is already a test for 'SaveChangesAsync' method which tests this scenario. I believe that test is sufficient enough.\n\nTest:\nGiven_an_OdcmClass_Entity_Fetcher_SaveChangesAsync_Method.It_updates_and_delay_saves_an_entity_from_its_own_path\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29201441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717027", "body": "Fixed the test to derive from 'NavigationPropertyTestBase'. It was not easily discoverable before.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717041", "body": "Fixed the test to derive from 'NavigationPropertyTestBase'.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717046", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717068", "body": "Fixed the test to derive from 'NavigationPropertyTestBase'.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29717068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727638", "body": "Add the batch test.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727646", "body": "Add the batch test.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727662", "body": "Add the batch test.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727665", "body": "Add the batch test.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29727665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "TheRealPiotrP": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/87", "title": "C# Client Library should expose Edm.Stream using an IStreamFetcher", "body": "StreamFetchers provide convenient upload/download capabilities instead of requiring users to interact with a separate Http Client. Edm.Stream properties do not currently leverage these but should.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/69", "title": "NotHaveExplicitMethod should not throw when the explicit interface is not implemented by the target type", "body": "[Fact]\n-        public void The_Concrete_class_does_not_implement_an_explicit_Expand_method()\n-        {\n-            ConcreteType.Should()\n-                .NotHaveExplicitMethod(FetcherInterface, \"Expand\", \"Because abstract Entities cannot be queried\");\n-        }\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/69/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/43", "title": "Enable materialization of derived types based on odata.type property", "body": "When a request to an OData v4 service returns a base Entity Type, according to $metadata, it is feasible for the service to actually return a derived type. Today, the CSharp proxy will ignore the @odata.type property and materialize the entity as the Base type. Ideally, the proxy would use the @odata.type information to realize that a derived type was returned and would instantiatiate the corresponding derived C# type.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/43/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/30", "title": "Support Property Default Values", "body": "# Default Values\n\nNon-nullable properties that are not set on the client during object creation will typically have their values defaulted on the server and then sent back on subsequent requests. When properties do have default values they should be expressed in the client-side model. This allows for minimizing bits on the wire [values that are default need not be sent] and improves developer experiences [inspecting a 'new' object instance is representative on the server's projection of that object].\n## OData v4 Description\n\n[Property Default Value](http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_Toc406397961)\n## Model description\n\nThe default values will be represented on the OdcmProperty type. Consider making OdcmProperty generic so that readers can be responsible for parsing the value and store it in a strongly-typed DefaultValue property.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/30/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/27", "title": "ReadOnlyQueryableSetBase navigationPropertyAccessor should respect ForceToPascalCase", "body": "When the code writer is configured to rename properties, Pascal Casing for example, users will generate a navigationPropertyAccessor which uses the new names. When passed to .Expand the selected properties should be replaced by the original model's properties.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/27/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/26", "title": "QueryableSet whereExpression should respect ForceToPascalCase", "body": "When the code writer is configured to rename properties, Pascal Casing for example, users will generate a whereExpression which uses the new names. When passed to .GetPath the selected properties should be replaced by the original model's properties.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/26/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/24", "title": "Navigation Properties exposed on Concrete Types should be retrievable.", "body": "\\vipr\\test\\csharpwriterunittests\\given_an_odcmclass_entity_navigation_property_collection_forced_to_pascal_case.cs\nWhen_retrieved_through_Concrete_ConcreteInterface_Property_then_request_is_sent_with_original_name\n\nNavigation properties exposed on the Concrete Interface, when not expanded, appear as empty collections or null properties. They instead should use a construct like Nullable which depicts that their value is unknown but can be fetched.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/24/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8605ca8a49584d140d23f45bee9e08ef90967f64", "message": "Merge pull request #108 from ysanghi/master\n\nOData v4 TypeDefinition Support\r\nEnables using TypeDefinitions to specialize primitive types. TypeDefinitions are represented as their primitive in the generated OdcmModel."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f742b3e554758e1157558df8804b45d4631459f9", "message": "Merge pull request #96 from Sridhar-MS/fetcher-refactoring\n\nAdd new OdcmCapability - OdcmUpdateLinkCapability and OdcmDeleteLinkCapability to the OdcmModel"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f22a7cf4dd002b06fd9fff506be3abfe55e71e38", "message": "Merge pull request #100 from tonycrider/AsyncAccessTokenFix\n\nAsync Access Token Fix"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/aaeff5cb94204c23d7501be8fa74b0260ddc52d9", "message": "Fixes accesstokengetter deadlock issue"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/541985d4226c247e8aa83366988eeb1f6bbbc761", "message": "Merge pull request #93 from Microsoft/revert-90-revert-89-EntityCollectionImplFix\n\nFix for EmtityCollectionImpl."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/de9ffde54712ea0a16a40f10cf91b2f987274a59", "message": "Revert \"Revert \"Fix for EmtityCollectionImpl.\"\""}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2618f430ce73181fb156fde30b568a8ac513f15c", "message": "Merge pull request #90 from Microsoft/revert-89-EntityCollectionImplFix\n\nRevert \"Fix for EmtityCollectionImpl.\""}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/307dcd58a0855f885b64e9dbf7daed94f267845c", "message": "Revert \"Fix for EmtityCollectionImpl.\""}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e29473c8e3db20adea37717d1abe608405ae8c92", "message": "Merge pull request #88 from piotrpMSFT/master\n\nX-ClientService-ClientTag for OutlookServices sample"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b738ab52c278877e97b7185ab80567e09f93160e", "message": "Merge pull request #89 from tonycrider/EntityCollectionImplFix\n\nFix for EmtityCollectionImpl."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bc64861f627ffebc7fcc17ddacaae0697dec8b5b", "message": "X-ClientService-ClientTag for OutlookServices\n\nAlso removing Vipr NuGet reference until a stable build is hosted on a MyGet feed. This prevents build issues when moving across machines."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/0b0a6ec18204d19e40827863bf3029e27bdc0013", "message": "Merge pull request #85 from Sridhar-MS/unknown-annotations\n\nlgtm!"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ac227a854a62d9d921b5fda1f50e945a563d6ba0", "message": "Merge pull request #83 from piotrpMSFT/master"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/88d868ddf61ab13adf299f669e17c76fdc16f434", "message": "OmitMethodNamespaceInUriPaths in OutlookServicesClient"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e372af8d82acea0e2ef16ad1790fdacddfd06a64", "message": "Lock down Assembly version numbers"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a0d8722b5f5c7d8f121e744ba71d11dcafe9ff09", "message": "Enables OmitMethodNamespaceInUriPaths configuration feature\n\nOData requires that services honor requests to Namespace-prefixed Method names. However, some\nexisting server-side implementations do not honor this aspect of the spec and expect method names to not include\nthe Namespace."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/63cc5887387ce1393a244b38c6371df5b70a54e0", "message": "Merge pull request #82 from piotrpMSFT/master\n\nSmall fixes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3d25b95e1092d363dcbbd44cfedc3892293cd14f", "message": "Small fixes\n\nFix double-slash bug in fetcher base\nMake .targets file take advantage of Incremental Build"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/efae8a72ee524e8af500ccda7614fd37a6ce7c03", "message": "Merge pull request #80 from piotrpMSFT/master\n\nDevelopmentDependency, targets, and updated Outlook $metadata"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6083f94aaf778df6782190f45f7be9095686c81d", "message": "DevelopmentDependency, targets, and updated Outlook $metadata\n\nConverted Vipr.CommandLineInterface package into development dependency\nCreated Vipr.CommandLineInterface.targets\nMoved Outlook Services onto Vipr.CommandLineInterface.targets\nRemoved GenerateProxy.bat from Outlook Services\nUpdated OutlookServices to latest EDMX"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/081887ff1ae3d93ee3a4516c0b2f2bddee5795cc", "message": "Merge pull request #78 from piotrpMSFT/master\n\nOData 6.11, Proxy Extension fixes, NuGet of Vipr Tool"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8121f86546bb86fc83b7013adf349f2cc5d4b240", "message": "Merge pull request #79 from piotrpMSFT/pr/n57_joshgav\n\nFix small formatting issue"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/260d99edd30e5868696ef3d87ba60a2551aacf9a", "message": "Merge pull request #57 from MSOpenTech/output-path-fixes\n\nMinor fixes for output writer"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/cd0ebee79a82e5c277aef766b26df5680e351845", "message": "Fixing small formatting issue"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d47de373234ee1e957d45d11bf0fb68b88dedd98", "message": "Add salting to JObject response generation, ensuring that client library does not fail on unexpected properties.\n\nMove OutlookServices sample onto latest Client Library\nAdd TimeZone test to Outlook sample"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/351c324507981e70bc4883709a2c8529eb3f9feb", "message": "Disable building the tools package under NCrunch.\n\nThis is not ideal. The build system should be ignorant of NCrunch. It is required because NCrunch does not copy the NuGet's sources into predicatable directories."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d6444a2f80088e0368331239f322d1e4365b960e", "message": "Fix tests broken by OData's enforcement of blocking unknown properties."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/afa8104d08210112a0e8dd90627cc4f3136142e6", "message": "Update NuGet Dependencies"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/52618f774d25ed8992f81dcdf6071637c0c49647", "message": "Add simple contacts test to Outlook Sample"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/60c9886298e6026c5fae121c7c396d57cf9b69a1", "message": "Move OutlookServices sample onto Vipr nuget"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/837d17b9f32c32880cd41a44ec65bb302dcc369f", "message": "Fix several integration issues in ProxyExtensions"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/106da14acc2e7e1df545c40c1b61518bef04dc02", "message": "Updates the CommandLineInterface NuGet package to contain all of its\ndefault dependencies"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/787ee92824342c976a20f765ede9946cdb752eca", "message": "Merge pull request #67 from Sridhar-MS/assembly-rename\n\nRenaming the assemblies and namespaces to match the csproj names"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8e6740986c372df713e3c2bae2399d1e9abe562d", "message": "Merge pull request #66 from piotrpMSFT/master\n\nAddressed feedback"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a4e8f7d4d49879b033bfae19267ae9b22cb4d192", "message": "Rebase onto master"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3ca60310cf61f1e8321119e34983e5ee2584f0b8", "message": "Moving renamed projects to matching directories"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1e5eb4209dcd39b10a4eb12d604dedf6340d616d", "message": "Enable automatic versioning and Nuget packaging of shippable Vipr binaries"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9c762f3e509a0628b656dec19e9c5bcd6318c11f", "message": "Enable automatic versioning and Nuget packaging of shippable Vipr binaries"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5301f0196eb64d34220637ae4cb70490bb584022", "message": "Moving renamed projects to matching directories"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c42255f3923bd1c4c0f3fbee3211c2722e03a6fd", "message": "Merge pull request #65 from Sridhar-MS/capabilities-parsing\n\nRemoval of Capabilities Annotations parsing logic from the OdcmModel"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/48875e20d0e056fe2262ce3a2fa763b7d5cca773", "message": "Merge pull request #55 from MSOpenTech/iodcmwriter-return-type\n\nReplace TextFileCollection with IEnumerable<TextFile>"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/0d671a902c669a2753e56dba114c3026407cec67", "message": "Enable automatic versioning and Nuget packaging of shippable Vipr binaries"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/78f39713ad373f5afc3e02484fd9c30c48138075", "message": "Enable automatic versioning and Nuget packaging of shippable Vipr binaries"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d3a5a330c8b7ee64658a34a1219f67f2c687b804", "message": "Merge pull request #58 from piotrpMSFT/OutlookNuget\n\nBcl.Build version issue has been addressed."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9eb9b8d8bd4e94a118c4560098de63c6f104efe2", "message": "Fix up Outlook Services NuGet references"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/75c2e05b92119c7dd51b38fb31dc7c755934b42d", "message": "Enable NuGet packaging of OutlookService sample\n\nEnable Microsoft.OData.ProxyExtensions to be used in projects targetting WP8"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2df52289dc5a40ffe6a619317d9c2e4f3870faf4", "message": "Merge pull request #59 from piotrpMSFT/pr/n47_gyorgys\n\nglobal:: prefix to C# Writer Namespaces\r\n\r\nThanks @gyorgys for the base implementation!"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/dc78e77cf24bf81ad5e0730914ab9ff64e86f598", "message": "Enables namespaces to contain classes with the same name by prepending global::\n\nCorrects naming of Any.EntityOdcmClass to Any.OdcmEntityClass to match type name"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/40d9ba58b865929b14a3f5643bb39d6f2599712c", "message": "Merge pull request #56 from piotrpMSFT/MockServiceRefactoring\n\nTest Infrastructure Maintenance [Service Mock Refactoring, bug fixes]"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b34bd75655f6a6622883457d37c6b008485b0522", "message": "adding msbuild xunit runners"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/4e0e505455f9053c256105d80484e077b110340a", "message": "Fix NuGet Update issues"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5dc933a6862179367343950b8914c1a9cbca3a26", "message": "Updates MockService to only print debug messages when the debugger is attached."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ca2a038e611d1e209cfb44d86dc893421a28d532", "message": "Test Fixes for Vipr CLI. Cleans up files/directories that were previously leaking past the end of the test pass."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b93981f83c2577ddfde7a739d66249d478961e05", "message": "Updating NuGet references to latest release versions."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ffb6adafca449d06fe9d8b288346b083a6705fb4", "message": "Move all ODataV4 MockServiceExtensions into OnRequest/RespondWith model"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a509e007230aa32cfb415554b6f3a4f0c56dea49", "message": "Migrate SetupMethod(...) onto OnInvokeMethodRequest(...).RespondWith(...)"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2a81b7da2c6a9a16b504b3688e16608496a7d80e", "message": "Merge pull request #51 from MSOpenTech/dev-msot\n\nFix up project references and HintPaths"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5231b55d79a0332a7c374b73e9410e7180a46962", "message": "Split Setup method into OnRequest and RespondWith"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/13ffd1fc1542fe825461991f822476d0e5e1615e", "message": "Remove .Start() method. MockService now starts at construction time."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8cf0b79de979a0371b9d6706606d887957fb511f", "message": "Merge pull request #44 from piotrpMSFT/PiotrpMSFT-Issue11-ProxyExtensionsNuGet\n\nPull request was reviewed with @tonycrider and resultant feedback, along with Jenkins-specific build issues, have been resolved."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/709f595b0a49b8369d55f545d555526aef807983", "message": "Updates CodeGenTestBase to build Client Libraries that leverage the Profile259 portable subset"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/0284486435a029ba046f418f82557866a9d9d5fb", "message": "Adding iconUrl to nuspec\n\nAddressing PR review feedback"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e855d98dea25d804f84e8089ac93a0e5fde521b9", "message": "Enable build-time generation of Proxy Extensions NuGet package."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/35e84618ac9c2e336ea1901c16af41c0f0192a0b", "message": "Makes the OdcmNamespace a required parameter for the OdcmMethod constructor"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/312705da8eab8a97ec30c819d5df872c74bcc892", "message": "Enables Methods to use their namespaces in request Uri composition through the CSharpWriter"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c241654ccc44dec5545984c5179e584ba53c6be8", "message": "Enable testing of Collection Methods on Service classes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/78746c2aea43944770f56300d05025a570ad9c6a", "message": "Validation of colleciton-bound collection-returning methods\n\nClean up old test files that are no longer useful"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c285371a2c3fab1db89658f5cff46c5451ca99bd", "message": "Enable Collection Methods on Collections and Fetchers\n\nSplits EntityFunctionMethod into EntityFunctionMethod and EntityCollectionFunctionMethod\nBreaks out ServerMethod into its own file\nAdds helpers to create common generic types\nExtracts base class from Given_an_OdcmClass_Entity_Bound_Function, provides implementation for instances and collections.\nAdds tests to validate that instance functions and collection functions parse responses correctly\nFixes a test issue that prevented parameterless method requests from being recognized as successful"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/4a78a70c0d0e5f9cf94c0ad924124a0f48e8a688", "message": "Enable NuGet package restore"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/009db9b5ece7e1e75114289cc0b35a92a363a228", "message": "Update SharePoint with latest proxy"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9f39cf456bbf2abec5ec747db1f80d643b4ef165", "message": "Updates Exchange Proxy with latest generator."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b4762eecfe7d6f8ee1dd7670d310385e4538dab4", "message": "Fixes bug whereby renamed namespaces were being replaced in the wrong order. The client should send the Old Namespace to the server, not the New Namespace."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ef19d0e13450911dc9b3443c3b60027a337e9dc5", "message": "Causes collection navigation accessors to throw if the collection property owner is not initialized."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/62ae4b40a032890c08774368f0eb1336cbf0f19a", "message": "Fix a bug whereby NameFromType and TypeFromName were not honoring namespace changes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7033c1612ba334628217b043dd0307ebe28e9895", "message": "Replace default Edmx with OdcmModel Edmx\n\nEnables CodeGenTestBase to inspect whether the OdcmModel's Edmx is default and, if so, replaces it with an Edmx projection of the model itself. This showed some test to have broken OdcmModels, which have been fixed."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8fcfae2098e078765e51b157bff607484b841dd0", "message": "Fixes issues in EdmxWriter due to which it was failing for OdcmModels with empty collections [e.g. no classes in a namespace]"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b2b988b3e7a97f892420dffe61c4f919a2b4a3d8", "message": "Move GetByIdIndexer to centralized GetKeyParameters implementation"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5ba4c0651d05de816cf0380869b68853d35b1be1", "message": "Convert OdcmType.Namespace from a String to an OdcmNamespace"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/11bdb69ccf5bfda44cec0818d1f7d629d0640112", "message": "Update OutlookServicesClient"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/13d80bf8e38c47674835de7d4d5b7d8370316db8", "message": "Update Nuget Packages"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/928a36e435707adb1270feaf5060b5a98bd4fdba", "message": "Improve developer experience when test credentials are not available"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b141fd658f2942ef87b7be6d02907fb18d4aeaf3", "message": "Add missintegrated methods to DataServiceContextWrapperExtensions\n\nClean up code formatting in DataServiceContextWrapperExtensions"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e37ce1534b718fb17320dc0245ff97c0267176b8", "message": "Fix issues in SourceCodeGenerator whereby generated code differed from T4 template generated code"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a8be8a0bf5f35bf0eb7a8046d3b0927023bb463e", "message": "Move ExchangeManagedOMTests to Its.Configuration, enabling local dev configuration."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9b7666700f00bb8c28a6efd6fe7fa4f179146bd0", "message": "Update Exchange Edmx"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/764ed8057ab31749b017f0259eeef24555487e4e", "message": "Small fixes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/08b363bda19b1ebc349f78f0266d0ff548023466", "message": "Update OutlookServices with latest EDMX"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c58798db92bbd4671efb68432e2c5c3bd72d881e", "message": "Remove duplicate implementation of BeDecoratedWith from PropertyInfoAssertionExtensions"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/fd2620d2504c66e157ff4335d88ccd4569718bf8", "message": "Fix naming of protected properties in NavigationPropertyTestBase and add an EntityArtifacts property"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/091c70283d224fe4dc2e0c66c06be367a53cd794", "message": "Migrate SharePoint sample to Vipr\n\nFixes a breaking change [new parameter] in DataServiceContextWrapper.cs"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1d0562826a1c013a3f0c7db41c6f85a317838d6c", "message": "Update Outlook Sample to use Vipr"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/42f38feebbcade59606e0a17460a204809d3551c", "message": "Enable tests to treat warnings as errors\n\nPrevent generation of unused fields in Concrete and Fetcher classes\nPrevent generation of Upcast methods on derived entities"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c211fe28cffefffc51e0f1a642f52018069ed914", "message": "Refactor Upcast Methods into a Feature"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f8ddfc019c456e8ec795953ffc78a7fc7b92d0eb", "message": "Enabled FileWriter to respect Environment.CurrentDirectory\n\nFixed a bug in Given_a_TypeResolver where it sometimes generated illegal paths"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/282803abface62a08d2b010d0a119c9437ed6dce", "message": "Fixed two bugs in Configuration provider and tests\n\n- Test issue due to Its.Configuration caching the configuration for a given Type\n- Issue in ConfigurationProvider where it was ignoring the Environment.CurrentDirectory"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c2199fe1bcb236281dbb657a60125acfdb51ab7f", "message": "Add nuspec file"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/32c87971d5e06c208d7f3c68a1671b8ef8d923b6", "message": "Merge pull request #41 from piotrpMSFT/TypeResolver\n\nThanks all.\r\n\r\n@Sridhar-MS I will add the logging you suggest in my next PR. Thanks!"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/06fafdfbd5a3e3fdc5d45b2a1d4c0f3ac6055215", "message": "Fix location of TestReaderWriter and DoubleReader helper projects"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3946deee54c0275031bdf1de35431dd9275c446a", "message": "Replace Dictionary<string, string> with a TextFileCollection which is a List of TextFile\n\nA TextFile is a relative path to a text file, along with the content of that text file."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7707c902aada66bbd2e1a651faf18277814c236e", "message": "Revamps command line parameters Isolates and tests various responsibilities of the CLI [metadata getting, file   writing, type resolution] Enables Type Resolution"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b74b3b300419fba4c16726118c8cab36bd1489c5", "message": "Merge pull request #40 from piotrpMSFT/PiotrpMSFT-Issue14-CountAsync\n\nPiotrp msft issue14 count async"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e31d763f3033e1c155c11cba1dc40fc49291b32f", "message": "Making use of factory methods more consistent"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/eef64fbe16f6eed43ae54bf47f6ccd0ce935962a", "message": "Update Nuget packages"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/68b2e230e2516b8537ec3af260a924ef3b5bd305", "message": "CSharpWriter Collection Count Feature\n\nAdds the ability to call CountAsync on collections generated by the CSharpWriter.\nUses our new Features concept to contain the code artifacts produced by this feature.\nWhen we enable Count Restriction annotations, taking advantage of them will be as easy as\ndisabling this feature for Entities affected by the annotation."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a63f5c80f4db703a07ec8726528797c161ee3d22", "message": "Merge pull request #35 from piotrpMSFT/ConfigurationProvider\n\nIntegrate Its.Configuration"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bb156a788cfd3355215023a9c3d574542f426515", "message": "Upgrade configuration system to take advantage of Its.Configuration. Rename and move the Vipr test project. Clean up unnecessary references"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ab952ae20c0474c6c4f32acc24b02c0b06febc25", "message": "Merge pull request #34 from piotrpMSFT/ViprCLI\n\nRefactoring and CLI Improvements"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/caf356315edcabc05193dc57735be68a43dbec54", "message": "Addressing review feedback."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3b90863508a83527d4b9d09bae1669d852a6e4cd", "message": "Improve Command Line exe (Thanks @MrTomWhite for the original prototype!) Refactor CSharpWriter.Code.cs, seperating ODCM-->CSharp translation from CSharp   Code Generation Added testing for Vipr when loading from filesystem and web"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/36f0fffd8d6725c54e35138a88541c042b592a0c", "message": "Remove unused sources in CSharpModel\nAdd validation for Entity-Bound, Collection-Bound, and Unbound methods\nChanges OdcmModel ServiceMetadata to a RW Dictionary to improve testability\nEnsures runtime-generated Edmx is representative of the generated Service"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8180ddc17669c633e5c54fafe117def895527e20", "message": "Merge pull request #25 from piotrpMSFT/master\n\nFixes Issue #2 \r\nAdds MockService"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/906592e036b310142ca51d95cb87be705b894378", "message": "Renamed Key test\n\nAdded tests to validate that renamed key properties are usable in GetById calls\nAdded test to validate that renamed properties are usable in Expand calls\nMoved OdcmProperty renaming to an extension method\nFixed conflicting value bug in Given_an_OdcmEnum\nMoved extension methods into appropriate container classes\nImplemented MockScenario extensions for common setups\nMigrated tests leveraging MockScenario to use the extension method setups"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/54e5eda0d4007a4c9bddf8a4d922a30b3aa35d38", "message": "Merge remote-tracking branch 'Microsoft/master'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d8ccf03737536a4b1cff1d08994aaf9d88872a08", "message": "CSharpWriter\n\nCreate Attributes.cs as Factory for Attribute instances\nMove CreateQuery logic into ProxyExtensions\nEnable renaming of model properties\nEnable obsoleted properties for renamed model properties\nFixed bug in EnsureQueryMethod whereby code was generated with the wrong Type\nFixed bug in FetcherNavigationCollectionProperty whereby the Instance Type was set incorrectly\n\nCSharpWriterUnitTests\nEnables stepping into generated code when debugging generated code\nRemoves Mock-based tests\nAdds MockScenario-based tests\nAdds property renaming tests for services separately from entities\nCleaned up test names\nAdds missing test for Concrete Interface LowerCasePropertyAttribute\nReduces risk of bug whereby enum values are duplicated\nCreates EdmxWriter that translates ODCMModel --> OdataV4 edmx\nFixes github urls\n\nGeneral\nReduce test output when not running under a debugger"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ef1a1194c300afedf559aac93fc9f4a0855bcfb3", "message": "Merge pull request #23 from MrTomWhite/cleanup_fieldsclass\n\nRemoving the OdcmFields unit tests because fields have been removed\r\n\r\nThanks for catching this, @MrTomWhite!"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/775e7e46a5f58ccfbad076eb3972c06f43d21b7b", "message": "Split ProxyExtensions.cs into one source file per class"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72332730", "body": "Sridhar, looks like this was blocked by AppVeyor. It looks like we have a task that is failing to complete. Can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72332730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72947292", "body": "Some comments, LGTM otherwise.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72947292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73328161", "body": "It is, @MrTomWhite. \n\n@tonycrider, fixed this in PR #22. Closing the issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73328161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74131200", "body": "@joshgav it looks like these changes broke the build validation. Can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74131200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74135204", "body": "Tony, can you please make the required ODCM Model enhancements?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74135204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74618398", "body": "@Sridhar-MS \n- Added basic console output as suggested\n- Will rename test project to ViprCLI in next PR. Those merges are messy so I don't want to have to do them twice.\n\n@joshgav \nAgreed. This feature is two PRs away. I'm revamping the configuration system next, then will use that as a basis for configuring Readers & Writers.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74618398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74982681", "body": "LGTM, aside from comments.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74982681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983334", "body": "Fixed in PR #37 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983502", "body": "Fixed in PR #34 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74983502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74984482", "body": "After conversations with a bunch of folks we decided to go with a solution based on Its.Configuraiton which allows strongly-typed settings objects to be retrieved from simple json files on disk. This was implemented in PR #35.\n\nFor a usage example, a Reader or Writer should implement the IConfigurable interface which will force the host to inject a ConfigurationProvider. The ConfigurationProvider exposes a single method called .GetConfiguration<T>(). Call this Method with T being set to the Settings type you'd like to have populated. A sample Settings type looks like this:\n\n```\npublic class Settings\n{\n    public bool BooleanValue {get; set;}\n    public List<String> StringValues {get; set;}\n}\n```\n\nNow, just drop a matching .json file into a folder called .config which should sit next to Vipr.exe:\n\n```\nVipr.exe\n.config\\Settings.json\n```\n\nThat file should contain:\n\n```\n{\n    \"BooleanValue\":true,\n    \"StringValues\" : {\"abc\",\"def\"}\n}\n```\n\nAnd that's it. Now each component can have strongly-typed settings and can expose as many settings classes as they'd like!\n\nFor more on Its.Configuration, check out this page:\nhttps://github.com/jonsequitur/Its.Configuration\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74984482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74984554", "body": "Fixed by Pull Request #33 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74984554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74985093", "body": "@joshgav, this issue should be fully resolved with PR #37. You can now specify custom readers and custom writers. You can also specify a custom outputPath and ask the system to dump the Odcm Model to an exportPath. The generated model now supports having a directory structure by having the Writer return a Dictionary<string, string> where the first string is a relative path and the second is the contents of the file we are to write. \n\nWe have not revisited the idea of custom cmd-line parameters yet, though feel free to open a follow up issue for this one. Please close this issue if you feel it has been addressed or let me know what is still broken. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74985093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75152928", "body": "Thanks @marcote \n\nI agree that the use of a Dictionary as the return value is not ideal and should be revisited. @MrTomWhite raised a similar concern, and we should refine the design to meet all of our needs.\n\nThe intent of the dictionary was to represent a path/content structure that could then be written to a storage medium. This medium could be a file system, it could also be some other sort of structured storage [we're not ready to talk about other hosts for Vipr yet... coming soon:)]. My expectation was that this was sufficiently expressive as one can express arbitrary project structures within this data structure:\n\n```\nnew Dictionary<string, string>\n{\n    { \"foo.csproj\", \"<csprojcontents>\" },\n    { \"dir1\\bar.cs\", \"using Sys...\"},\n    { \"dir2\\dir3\\zap.cs\", \"...\"}\n};\n```\n\nI don't have access to the MSOpenTech repo you referenced so the implementation therein is not available to me. I think we can go with an alternate design, perhaps one that handles non-text file contents for example, but we should assume that we are dealing with a relative-path key and a file content value. Feel free to suggest an alternative design here, or I'm happy to have a phone conversation today/tomorrow to discuss.\n\nThanks!\n\nPiotr\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75152928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75153319", "body": "I'll throw out one alternate design to get us started. Instead of a `Dictionary<string, string>` we can have an `IEnumerable<OutputFile>`\n\n```\npublic struct OutputFile\n{\n    string RelativePath {get;set;}\n    string FileContents {get; set;}\n}\n```\n\nThis does a much better job of expressing the intent of the Writer's output, I think.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75153319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75308357", "body": "I'll update this PR and reopen\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75308357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75341432", "body": "Please see PR #41 for a proposed fix.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75341432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75772713", "body": "@marcote I chose to go with a class because I expect we're going to want to furhter enhance the state being passed around between readers/writers and the host. A class is much easier to refactor into what we want than would be an enumerable of TextFile. Since I had to touch all of the callsites of the old Dictionary<string, string> I decided to bite the bullet on this one.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75772713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/77298024", "body": "The intention of this PR is unclear. OdcmMethods are being augmented with a Namespace property but there are no consumers for that property. Furthermore, there are no tests added which capture and validate the intent of the PR. I would expect to see Unit Tests added to:\n\n```\nGiven_an_OdcmClass_Entity_Bound_Function.cs \nGiven_an_OdcmClass_Entity_Bound_VoidMethod.cs \nGiven_an_OdcmClass_Entity_Collection_Bound_Function.cs \nGiven_an_OdcmClass_Entity_Collection_Bound_VoidMethod.cs \nGiven_an_OdcmClass_Service_Bound_Function.cs \nGiven_an_OdcmClass_Service_Bound_VoidMethod.cs \n```\n\nPlease address these issues, along with the build breaks, and re-submit the PR!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/77298024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78201117", "body": "Some small feedback. The change looks great overall!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78201117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78371831", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78371831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78701480", "body": "Thanks for pointing this out, @MIchaelMainer !\n\n@joshgav, can the Objective-C Writer folks take a look?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78701480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78719376", "body": "@gyorgys before we merge this, can you please:\n- Fix the test that became broken by this change\n- Add a test to cover this scenario\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78719376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78767932", "body": "Fixed in PR #40 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78767932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78768324", "body": "Duplicate of #12 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78768324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78768450", "body": "Fixed in PR #44 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78768450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78768832", "body": "Fixed by @Sridhar-MS in PR #45 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78768832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78769297", "body": "Fixed in PR #41 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78769297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78771253", "body": "@marcote since there hasn't been any further conversation on this topic I'm closing the issue. Please Reopen if we need further discussion :)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/78771253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/79177967", "body": "@joshgav, please close this issue once the iOS repo is public and @MIchaelMainer has access to the true tracking issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/79177967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85235928", "body": "Do you have a strategy for limiting output to failing tests only in XUnit?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85235928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85237232", "body": "You can assign to me. I'll move the output to show up only when running under the debugger. 5 points to anyone who figures out how to determine we're on a test failure path, though :)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85237232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85646542", "body": "This work is not yet completed. #36 was required pre-requisite work.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85646542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85646802", "body": "#31 was a duplicate of this workitem. This item is not completed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85646802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86102954", "body": "This type was originally a Dictionary<string, string>. When replacing that primitive with types that were easier to reason about [TextFile, TextFileCollection] we noticed two things:\n1. The return type of GenerateProxy is used in many callsites across the solution\n2. As the first few writers solidified, we expected some churn on the data that was to be returned\n\nTo avoid a repeat manual refactoring we therefore decided to introduce the TextFileCollection which we could grow and rename to meet the needs of writers as they matured.\n\n@marcote, your team is the other primary contributor of writers at this time. Do you feel an IEnumerable<TextFile> is sufficient and we should remove the TextFileCollection abstraction? Will you not need non-text files to fully describe Java/Objective-C content?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86102954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86125992", "body": "For cleanliness, can you create an abstract base class called OutputFile which has just the relative path, make TextFile a derived class of that one, and make the return value an IEnumerable<OutputFile>? I think that deriving, say, ImageFile from TextFile will be pretty strange...\n\nThanks @marcote !\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86125992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256152", "body": "@marcote the xunit update was a bit involved. Please rebase atop pull request 56 once it is reviewed & merged and you'll be good to go!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256213", "body": "@MrTomWhite This is addressed in PR #56. Please verify & close the issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256298", "body": "@marcote, can you assign to yourself?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256443", "body": "@joshgav, can we close the Vipr copy of this issue now?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86256443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86347721", "body": "@joshgav please add unit tests to Given_a_Bootstrapper for the behaviors you are introducing.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86347721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86743813", "body": "superseded by PR #59 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86743813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86743947", "body": "Fixed by PR #56 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86743947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86773815", "body": ":dancers: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86773815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86828908", "body": "LGTM overall. I'm looking forward to the tests that exercise all this goodness :)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86828908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86831527", "body": "The change to the OData Client did not get integrated... this fix might take a while.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86831527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86834432", "body": "We had a discussion about this item and closed on the following strategy:\n\nA property whose value is not yet assigned, whether nullable or not, will be tracked with an unknown value state. So long as the value is unknown it can be set but not retrieved. Setting the property will clear the unknown flag. Retrieving the property value will result in an exception. InvalidOperationException seems like a good candidate but we should consider whether introducing a new exception type makes sense here. \n\nProperties should only be in the unknown state in two scenarios: the containing object was created on the Client and the property was not yet initialized OR the containing object was retrieved from the server and the property is a navigation property that was not expanded.\n\nIn the case that the object was created on the Client we would like to take advantage of OData Default Property Values where available. If such a value is defined then the Property will be initialized to said value and will not be unknown. \n\nA new construct akin to Nullable<T> seems like a reasonable implementation for capturing the Unknown value state. We are looking for nearly the identical behavior of Nullable<T>  but want an independent concept since the property whose value is not yet known might itself be Nullable. Proposed names include: Fetchable<T>, Retrievable<T>, Initializable<T>, Maybe<T>, Settable<T>. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86834432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86834718", "body": "Issue #30 has a proposed design which seems analagous to this problem. A solution here would be to introduce a construct akin to Nullable<T> called NonNullable<T> [or similar]. NonNullable<T> would support setting its internal Value property to any value but null. This construct would itself be wrapped in a Fetchable<T> [or whatever we decide to call it] such that it can exist in the uninitialized state.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86834718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86834768", "body": "@Sridhar-MS does the current annotations design cover this scenario? Or is this still a future enhancement?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86834768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86836007", "body": "@joshgav you mentioned we should have tests for:\nShould probably have tests for when output path:\n- isn't specified (default)\n- specified as empty string \"\"\n- specified as single folder (e.g. \".\\mycode\")\n- specified as multi-level folder (e.g. \".\\mycode\\csharp\")\n\nbut I think the PR does not include tests for\n- specified as empty string \"\"\n- specified as multi-level folder (e.g. \".\\mycode\\csharp\")\n\nCan you please add?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86836007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88298697", "body": "Some small feedback, but LGTM.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88298697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88303705", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88303705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/91002513", "body": "LGTM. Some small comments/tracking issues.\n\nThanks for breaking out the \"Create copy of project\". That made this huge code review a breeze!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/91002513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/96801160", "body": "Can you add some 'structural' tests that show that these methods are being emitted on the right objects in the right places? E.G. Given an OdcmClassEntity  it should have an update/delete/set method. This will be useful when we start turning stuff off with capabilities.\n\nOtherwise, LGTM.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/96801160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/101845974", "body": "How do we prevent ourselves from regressing this again?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/101845974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/122123317", "body": "Functions are a very strong OData-ism, in my opinion. We tried to decompose the distinction between functions and Actions  into OdcmMethod.AllowedVerbs and OdcmParameter.CallingConvention. A Function would have the Verb set to Post and the CallingConvention to be Uri for all parameters. Is this insufficient to make the determination you are looking for? If not, a simple extension method atop OdcmMethod should do the trick. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/122123317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122515", "body": "This looks like a reference to a developer's local file system...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122725", "body": "Do we still need ODataWriter.cs?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122997", "body": "This should just be removed. The CSharp model included Odcm fields for completeness but did not take dependencies on the fields existing, IIRC. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24122997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24123002", "body": "This should just be removed. The CSharp model included Odcm fields for completeness but did not take dependencies on the fields existing, IIRC. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24123002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793847", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793854", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793868", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793875", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793882", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793888", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793895", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793909", "body": "Done. Nope, git picked up this new file as a renamed file. it had a lot of content moved.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793933", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793943", "body": "Done. Yes.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793953", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793963", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793970", "body": "This is fixed in my next PR\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793978", "body": "This will be done in my next PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793985", "body": "This will be done in my next PR.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24793985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24953419", "body": "I want to leave it as is, I think. Not at all ODCM specific...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24953419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957243", "body": "unnecessary semicolon\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957331", "body": "These methods seem to produce C# names. Do they belong in the core OdcmModel?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957589", "body": "Nice! the new model makes this much easier to read!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957782", "body": "Create a tracking issue?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957862", "body": "Issue?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957911", "body": "Since this attribute is only applicable to Entity Classes, why not make the parameter type OdcmEntityClass?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957938", "body": "Since this indexer is only applicable to Entity Classes, why not make the parameter type OdcmEntityClass?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957955", "body": "hahaha\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24957955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958001", "body": "You changed the type of Class to OdcmEntityClass. Is the cast still necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958025", "body": "You changed the type of Class to OdcmEntityClass. Is the cast still necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958034", "body": "You changed the type of Class to OdcmEntityClass. Is the cast still necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958051", "body": "You changed the type of Class to OdcmEntityClass. Is the cast still necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24958051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/25836164", "body": "Please revert these whitespace changes\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/25836164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/25836222", "body": "This property is being set in the PR, but it is not being read anywhere. What, then, is the purpose of the property?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/25836222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546366", "body": "This was originally discussed as a collection of OdcmCapability with writers intended to iterate over the collection. Why the change of direction? Did that design prove too cumbersome?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546386", "body": "Agreed. Can't we capture this in the constructor or, if laziness is the intent, in the getter?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546546", "body": "Can we use the return value instead of an out parameter? Out parameters are generally used in TrySomething(out result) scenarios.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546753", "body": "The name here is confusing because the method does not return a value. Consider modeling this as an extension method on odcmProperty, showing who is being acted upon, and rename it to something like SetNavigationProperty*Restrictions\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546766", "body": "The name here is confusing because the method does not return a value. Consider modeling this as an extension method on odcmProperty, showing who is being acted upon, and rename it to something like SetNavigationProperty*Restrictions\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546775", "body": "The name here is confusing because the method does not return a value. Consider modeling this as an extension method on odcmProperty, showing who is being acted upon, and rename it to something like SetNavigationProperty*Restrictions\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546780", "body": "The name here is confusing because the method does not return a value. Consider modeling this as an extension method on odcmProperty, showing who is being acted upon, and rename it to something like SetNavigationProperty*Restrictions\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546792", "body": "The name here is confusing because the method does not return a value. Consider modeling this as an extension method on odcmProperty, showing who is being acted upon, and rename it to something like SetNavigationProperty*Restrictions\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546831", "body": "It seems like each of these private methods does approximately the same action but with different constants for reading annotations. Consider refactoring the common logic into a generalized method and calling that method with specific constants.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546917", "body": "Shouldn't we be de-duping Projections here? I think we'd be safe to assume that so long as two Properties require the same capabilities then it's safe to re-use an existing projection. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26546917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27056259", "body": "should this be an IList? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27056259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27056420", "body": "If we're including comments then they should  be a bit more fleshed out...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27056420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269287", "body": "Nit: consider wrapping this up as a ContainsAll extension method.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269362", "body": "This seems like it should be a helper method\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269380", "body": "This also seems like it should be a helper method.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269399", "body": "And this seems like a third helper\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269425", "body": "Will this have enough context? Should we mention that the exception is the result of a malformatted annotation?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269668", "body": "This name is OData specific. Let's generalize to SetCapabilitiesForOdcmServiceClass or something akin.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269701", "body": "Same here. Let's generalize to Odcm so we don't start sneaking in unintentional limitations.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269738", "body": "Create? Or Ensure? What happens if a matching Projection already exists?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269752", "body": "This should live in a separate file. If it's internal, just make the parent partial.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27269752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276127", "body": "This pattern feels funny. It seems like we have a temporary/throwaway Projection on the property which we're now replacing. This can get confusing down the line if somehow the temporary projection is not overwritten. I'm not sure the design allows for a clearer implementation...\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276176", "body": "This is already a BooleanCapability. Can we just call the property Value?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276197", "body": "Is the value always initialized to true for BooleanCapabilities? Should we set the value in the base class, then?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276210", "body": "It seems equality can also be handled in the base class and overridden only if special cases appear.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276401", "body": "I would love to see this get collapsed into the construction of the OdcmProperty, if possible.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276429", "body": "Same here. To clarify, I think this is important because we currently have the responsibility of setting the OdcmProjection of an OdcmProperty split amongst two  actors which means future edits will require remembering that we need to think about both.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276472", "body": "Seems apparent enough from the DefaultOdcmCapabilities. We should remove this comment.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276508", "body": "It would be great to have this temporary scafolding handled by an extension method on odcmProperty. It would be bad if folks took this pattern as an intended long-term practice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27276508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27324217", "body": "I think that Booleancapability captures this point sufficiently.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27324217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339132", "body": "Our intent is not to think of annotations as an OData concept but a generalized Odcm concept. As we build readers for other metadata formats it would be desirable to provide them with annotations like Description for 'free'\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339287", "body": "RelativeFile sounds fine :)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27339287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27535176", "body": "Can this be an extension method?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27535176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27535246", "body": "I think all navigation properties should have the expand capability and the annotation should determine true vs. false. Thougths?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27535246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995728", "body": "please make this Protected Internal\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995765", "body": "please make this Protected Internal\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995854", "body": "please make this Protected Internal\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995877", "body": "please make this Protected Internal\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27995877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27996130", "body": "please create issue tracking  moving this to a fetcher.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27996130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27996340", "body": "It's not clear this belongs on the fetcher today... It's not clear that calling SaveChangesAsync on a MessageFetcher should impact the overall model being cached by the client... open issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27996340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27996534", "body": "This seems like a no-op when deferSaveChanges is true. Why do we take that parameter here?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27996534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27997404", "body": "Let's consider the IsAbstract check on SaveChanges, Update, Delete, Execute. Should these not exist, though the abstract type itself cannot be instatiated? this would allow iterating through collections of the base type to update/delete/save the derived types. This is likely a new feature.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27997404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27277364", "body": "How do we specify that we want to use the current directory as the output path? Can we have a test for this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27277364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27277391", "body": "Great catch here!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27277391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27450085", "body": "We don't use test playlists in Vipr. Any reason we need to add one here?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27450085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29185318", "body": "spacing?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29185318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29185325", "body": "spacing?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29185325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29185392", "body": "should we make sure that the batch later does execute the delete?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29185392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29484671", "body": "I'm not comfortable with this resolution. We are building debt and and a false sense of security. We can now refactor the delete code to have it no-op when a user attempts to batch delete. We will only learn that there is an issue when a user experiences frustration.\n\nThis is an easy enhancement to add and we should do it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29484671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29695270", "body": "Why not derive from NavigationPropertyTestBase?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29695270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29695299", "body": "NavPropertyTestBase will give you this EntityArtifacts.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29695299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29695476", "body": "relatedEntity?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29695476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700724", "body": "We should test both sides of the delay save. This should be fairly easy:\n- add a config setting to MockService that makes it throw if it gets an unexpected request\n- Once you invoke the delaySave version of AddLinkAsync, setup the MockService to expect the AddLink request\n- execute the batch\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700840", "body": "Should test the batch operation\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700922", "body": "NavigationPropertyTestBase?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700943", "body": "Should test the batch operation\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29700943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29701029", "body": "Should test the batch operation\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29701029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29701156", "body": "Can you add a page to our wiki describing the breaking changes we're making?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/29701156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "joshgav": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/63", "title": "Generated output files should stream to disk", "body": "Currently all output files are aggregated in a TextFileCollection or IEnumerable<TextFile>, and only after all processing is complete are they written to disk.\n\nFor large APIs with lots of types and operations, this may lead to a lot of text being held in memory longer than necessary. It seems it would be better if files were written out to disk as soon as available.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/513798f7e50053c0a8aff6b91c02cfa70f399410", "message": "Add InternalsVisibleTo for T4 Tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1b6697eefa35741144b1163deac4a3893e5a5d78", "message": "fix braces, remove test playlist, test"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/40575d5cd6fdd5f145ee39a07bfcd419c26cbbb6", "message": "test for two-level output path and empty string output path"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6f289a764317154e4919db036de3ecdaf89bd4c7", "message": "Refactored to use constants"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/beb068fe684ac1a09a0719f35fa3846fc8b0d751", "message": "update Bootstrapper unit tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/02053b7255d0009d712ad043312de72dd8192287", "message": ".\\output as default directory for output, minor msg fixes"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e22d3a7045037ad6dab687ab19c0deaf408485f8", "message": "Create directory if needed"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7ec2f5ed4064e1a6f6535d319a9694a2b49759c9", "message": "HintPaths for NuGet packages point to $(SolutionDir)packages instead of relative paths"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74133075", "body": "Thanks Peter, I didn't intend for this to be merged as is. Can you review the proposals though and comment? Once we settle on interfaces we can adjust other parts of the code. This is one of the reasons I'd like to have consensus on these core bits now.\n\nI propose we create a branch for CLI and Core feature work - we can update the current ViprCLI branch to that end.\n\n@marcote will also review and we'll potentially work on this in our fork first.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74133075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/79026169", "body": "+@greathansen @marcote\n\nI believe we are currently retaining the capitalization from the service descriptor for Obj-C properties with intent to increase readability. However, we're about to review capitalization practices across APIs and libraries and the Cocoa Guidelines will be helpful.\n\nThe templates used for Obj-C generation will also be public soon so you'll be able to suggest changes directly. In the meantime I crosslinked here for tracking: https://github.com/OfficeDev/Office-365-SDK-for-iOS/issues/57\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/79026169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86552908", "body": "Will do. Not surprisingly, I found this error in Jenkins:\n\n```\nGenerating Client Library to d:\\j\\workspace\\microsoft_vipr_prtest\\test\\ViprCliUnitTests\\bin\\Debug\\output\nDone.\nz:\\Builds\\work\\b7ceef20fdfcf0ee\\Shared\\Execution\\FallbackTestFramework.cs(21): error : ViprCliUnitTests.Given_a_Bootstrapper.When_custom_outputPath_is_not_specified_then_defaults_are_used: FluentAssertions.Execution.AssertionFailedException : Expected True Because the proxy was created in the working directory., but found False. [d:\\j\\workspace\\microsoft_vipr_prtest\\test.proj]\n```\n\nShould probably have tests for when output path:\n- isn't specified (default)\n- specified as empty string `\"\"`\n- specified as single folder (e.g. \".\\mycode\")\n- specified as multi-level folder (e.g. \".\\mycode\\csharp\")\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86552908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86554577", "body": "Yes, I don't have close rights so can you please close?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86554577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86830822", "body": "I believe there are assumptions in Given_a_bootstrapper.ValidateProxyConfiguration that output will be in the current working directory, as FileSystemHelpers.ValidateTextFiles is configured by default to look in the working directory. In the command lines passed in to ValidateProxyConfiguration currently that is the case, but it may not always be. The output directory should be parsed from the command line passed to ValidateProxyConfiguration, or passed as a separate parameter, and then specified directly in FileSystemHelpers.ValidateTextFiles.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86830822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87900152", "body": "Done!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87900152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27448128", "body": "empty string or dot - e.g. `--outputPath=\"\"` or `--outputPath=\".\"` or `--outputPath=\".\\\"`\nI added a test for the empty string case.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27448128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tonycrider": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/39", "title": "Add warning mechanism for OdcmModel readers.", "body": "In both the v3 and v4 OData readers, there are cases where a warning rather than an error is warranted. The GenerateOdcmModel() method should be updated to permit the return of an array or warning and/or informational messages.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/39/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/aad2574e49582663eb8578e9db8cfd7eeaeefd53", "message": "Revert change to access token logic. Restores two-step acquisition of access tokens on asynchronous calls."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/708e9eb13aba16c734f141429eaa981578bd0c07", "message": "Fix for EmtityCollectionImpl. If item to be added/replaced in an entity's navigation collection is already tracked by the OData client library, then Context.AddLink should be used instead of Context.AddRelatedObject."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ff84d4e178702475c0248112d8db80bd2696b620", "message": "Merge pull request #46 from tonycrider/MediaEntityGeneration\n\nAdd Media Entity support to code generation."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/53f1c6ebd9788d70034930b8db884f09c9b78170", "message": "Update the entity type with a complex type property unit test."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3939906d367f55f56d44ab58c6ae7998c4a554ef", "message": "Removed unused \"Global\" Namespace identifier."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8d1a7e1c5c47d3da6e050a4b04d9a422d8ea3e1c", "message": "Add another unit test and fix up the error messages of a the entity type key tests."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/178385d5f7dd6bcf2f11537df25eadcd324e1975", "message": "Minor tweaks after merge with latest changes in Microsoft/Vipr."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/163b3ea21d2fad22ec099b0ea4c2ce08fc0f6a42", "message": "Code clean up in ProxyExtensions.\nAdd MediaEntityBase to ProxyExtensions.\nAdd AddAsyncMediaMethod to CSharpWriter.\nPropagate code clean up from ProxyExtensions into CSharpWriter.\nAdd Visibility enumeration to Member in CSharpWriter.\nAdd EdmxTestCase class to simplify creating Edmx documents for ODataReader.v4UnitTests.\nUpdate EdmxTestCase to use TextFileCollection after rebase on to upstream/master.\nAdd OdcmComplexClass derivation of OdcmClass so as to allow consumer's to use strong typing to control code generation. The OdcmClassKind enumeration remains to allow walking an OdcmNamespace using a weak typing strategy.\nModified EdmxTestCase and corresponding test cases to allow for a fluent API calling strategy.\nAdded ConfigurationSettings (and unit tests) to control visibility of Media Entity AddAsync methods to allow for custom media entity creation.\nRename Complex type unit test to reflect OdcmComplexClass change."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f2657940f7e64a49d7b6524ab4c93332bfbdcc7f", "message": "Merge pull request #36 from tonycrider/CollectionFix\n\nEntity/Media/Service class derivatives on Class"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d76a5c875d559c32871382661e6657792ec11153", "message": "Changes per Pull Request review."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9f2cbaf1ba5d19ab1cc8ae19a6b26327f21cc468", "message": "Adding formalism for Entity, Media, and Service classes.\n\n[1] Introduced OdcmEntityClass, OdcmMediaClass, OdcmServiceClass.\n[2] Enforce and propagate CanonicalName throughout model.\n[3] Updated readers to better handle type resolution through three stage approach: (1) first stage introduces Edm primitives, (2) second stage introduces shallow types from Edmx, and (3) third stage completes type decomposition.\n[4] Add support for DefaultValue in OdcmProperty."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bbe804e43d50e6ba40c0d55479d555856e09c3b0", "message": "Merge pull request #33 from piotrpMSFT/PiotrPMSFT-Issue1-MethodCallingContentions\n\nFix action/function implementations and tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/82f1794a3db102c34f48a78dad7fe82a4b1401ae", "message": "Merge pull request #22 from tonycrider/Unittests\n\nOdcmModel Refinements"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f4aa1dbb575109955d0560e5b6ea2dd75d5a4628", "message": "Additional Refinements:\n\n[1] Cleaned out Vipr.exe project with intent to add CLI functionality at a later date.\n[2] Removed Write(OdcmProperty) and related from CSharpWriter.Code."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/04fa495e58fc9adbd6e88160e7dd14e9b0bd1de2", "message": "OdcmModel Refinements:\n\n[1] Remove OdcmField, consolidating relevant properties into OdcmProperty.\n[2] Fix OdcmClass Key property to recursively find Key properties in base classes.\n[3] Removed the unused \"AsReference\" methods."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/899f3e3ad059b9db65935979413e1aa5f8601c2d", "message": "Merge pull request #20 from tonycrider/Staging\n\nRefinements to the OdcmModel:\r\n\r\n[1] Since only classes inherit, Base and Derived properties moved from OdcmType to OdcmClass.\r\n[2] Added IsAbstract and IsFlags to OdcmClass and OdcmEnum, respectively.\r\n[3] Removed OdcmModel property from IReader and enabled multi-threaded execution of ODataReader.v3 and ODataReader.v4.\r\n[4] Added a few new unit tests to ODataReader.v4UnitTests.\r\n[5] Added IsOpen property to OdcmClass.\r\n[6] Propagate OdcmClassKind.MediaEntity classes through generation model as OdcmClassKind.Entity clasess until code generation implements distinguishing characteristics of media types."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7562f969400ee6b0bb67745454286494dc8b2a61", "message": "Fix for MediaEntity changes in ODataReader.v3 and ODataReader.v4."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9dc7fa25e61f1c13ff6210f2c5aada9f5193ad9a", "message": "Refinements to the OdcmModel:\n\n[1] Since only classes inherit, Base and Derived properties moved from OdcmType to OdcmClass.\n[2] Added IsAbstract and IsFlags to OdcmClass and OdcmEnum, respectively.\n[3] Removed OdcmModel property from IReader and enabled multi-threaded execution of ODataReader.v3 and ODataReader.v4.\n[4] Added a few new unit tests to ODataReader.v4UnitTests."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9190c7cfa7dbf1502ad1ca6afa42b44bafd1befe", "message": "Refinements to the OdcmModel:\n\n[1] Since only classes inherit, Base and Derived properties moved from OdcmType to OdcmClass.\n[2] Added IsAbstract and IsFlags to OdcmClass and OdcmEnum, respectively.\n[3] Removed OdcmModel property from IReader and enabled multi-threaded execution of ODataReader.v3 and ODataReader.v4.\n[4] Added a few new unit tests to ODataReader.v4UnitTests."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72543535", "body": "There is a latent bug with the new MediaEntity class kind. I'm correcting the problem and will revise the pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72543535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74546835", "body": "Looked good -- just committed it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74546835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74579753", "body": "In general, this looks good--just a few i's and t's.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74579753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74934819", "body": "Completes Odcm model changes for Issue #30\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/74934819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87010438", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87010438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87032133", "body": "LGTM modulo Bcl.Build version dependency.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87032133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87037704", "body": "Please make sure that all tabs are replaced by 4 spaces. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87037704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/96051606", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/96051606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357548", "body": "Move to TypeExtensions.cs\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357647", "body": "Just make Name read/write.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357809", "body": "Formatting?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24357809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24358136", "body": "Please remove.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24358136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775877", "body": "Copyright notice\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775962", "body": "Copyright notice.\nJust to make sure: Are all using statements necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24775962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776029", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776050", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776087", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776101", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776114", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776144", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776160", "body": "Did you intend to remove the copyright notice?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776213", "body": "Copyright notice.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776246", "body": "Copyright notice.\nAnd just to make sure: Are all using statements necessary?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776274", "body": "Remove extra whitespace.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776291", "body": "Remove extra whitespace.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776373", "body": "Should the DeleteFiles() call be done using a try/finally block?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776417", "body": "Should the DeleteFiles() call (and the following File.Delete() call) be done in a try/finally block?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776427", "body": "Should the DeleteFiles() call be done in a try/finally block?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24776427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24930874", "body": "IOdcmConfigurationProvider?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/24930874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/25028117", "body": "Actually, these are canonical names. While they may resemble names from an arbitrary language, such as C#, they are not meant to be used as such. For example, an OdcmMethod's canonical name is given as the concatenation of its parameter types, return value, and name, e.g., \"violet.Strike(violet.Quake,Edm.String,Edm.Int32):Edm.DateTimeOffset\".\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/25028117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27322904", "body": "Perhaps, but the OdcmModel is not intended to be specific to OData. Swagger, RAML, WADL, et al, do not have EntitySets or EntityContainers, but the Service and EntityClass concepts are universal. Are you making the claim here that the capability model can be used by OData only?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27322904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27325141", "body": "I don't think that the default projection should be considered throw away. It is a valid projection of the type. The property simply uses a projection on the type and in the absence of any better information, the default projection must be assumed. Since we build up the model in three phases, i.e., shallow, deep and capability, this is really the best way. That said, we could revise the processing model so that there are only two phases again and then make the deep phase call the capability model to get projections on types at the time the properties are initially processed. This is certainly achievable, but we'd have to rethink things a bit.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27325141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27326660", "body": "I think this is a problem. We have now definitely crossed the line between abstracting away from OData concepts and including OData concepts in the Odcm model. It seems that this behavior should be driven by the reader and not by the model. Perhaps we can allow the reader to register handlers for this kind of processing since it is very OData specific.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27326660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27316863", "body": "Spacing here? Could be tab issue.\n\nAlso, I'm concerned that large swaths of files are considered changes when in fact there are no differences. This might be due to line-ending mismatches. Can you verify that we are preserving the line endings?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27316863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317259", "body": "OutputFile is a bit of a misnomer here since TextFiles which derive from OutputFile are also used on input. How about we call it RelativeFile since its purpose is to name the file relative to an arbitrary/unknown root path?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317365", "body": "More tabs.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27317365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dotnet-bot": {"issues": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/17", "title": "Support custom annotation registration beyond Core and Capabilities", "body": "<a href=\"https://github.com/MrTomWhite\"><img src=\"https://avatars.githubusercontent.com/u/2236580?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [MrTomWhite](https://github.com/MrTomWhite)**\n_Friday Jan 23, 2015 at 23:08 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/59_\n\n---\n### Status Quo\n\nOur code writers will only need to consume annotations for Capabiltiies and Core vocabularies. Although it's not general or extensible, it's acceptable at the moment to hard-code references to these vocabularies. This entails registering a mapping from the vocabulary namespace to a namespace that contains implementations of complex types:  \n\n``` C#\n        // TODO: Extend / modify this to more clearly support custom annotation registration. \n        private static Dictionary<string, string> VocabularyNamespaceMappings = new Dictionary<string, string>()\n        {\n            { \"Org.OData.Capabilities.V1\", ViprCoreVocabularyRoot + \".Capabilities\" }\n        };\n```\n\nAdditionally, this requires loading the Edm Model that defines entities in the referenced vocabulary.\n\n``` C#\n// TODO: As above, Extend / modify this to more clearly support custom annotation registration. \n            using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(CapabilitiesXmlFilePath))\n            { /*etc...*/ \n```\n### Reasons to fix\n\nIn the future, if we have consumers of Vipr that would like to write custom writers which use custom annotations for code generation (SAP may find this functionality useful, for example), this design will need to be changed. \n\nA possible fix is to refactor registration to a static method that can be invoked with the namespace mapping and a path to the vocabulary definiton; the remainder of the vocabulary parsing code should be general enough to handle this case. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/17/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/15", "title": "Prevent setting non-nullable reference properties to NULL", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Tuesday Jan 20, 2015 at 19:16 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/50_\n\n---\n\nOData supports properties of structrural reference types [e.g. string, Complex Types]. These reference type properties can be specified to be nullable or non-nullable. When non-nullable, the generated proxy cannot express that a user is unable to set the value to null.\n\nWhen a user tries setting such a property's value to null we could throw an exception from the property Setter. It is unclear if this is necessary or beneficial since the generated proxy would not provide design-time support for preventing invalid code, and a runtime exception would be propagated from the service when a request is made. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/15/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/4", "title": "Fix Expand Extension Method in ProxyExtensions", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Wednesday Jan 28, 2015 at 22:02 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/81_\n\n---\n\n\\vipr\\test\\ProxyExtensionsUnitTests\\Given_A_ReadOnlyQueryableSet.cs\npublic void When_Using_Expand_Clause_On_EntityType_Interface_Then_Resulting_Sequence_Must_Be_Expanded()\n\nThis test passes when we create a ReadOnlyQueryableSet of the class type but fails when we use the interface type with System.NotSupportedException: The expression 'p => p.Supplier' is not a valid expression for navigation path. The only supported operations inside the lambda expression body are MemberAccess and TypeAs. The expression must contain at least one MemberAccess and it cannot end with TypeAs.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/4/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/3", "title": "Enable patching OData GeoSpatial properties in ODataV4TestService", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"96\" height=\"96\" hspace=\"10\"></img></a> **Issue by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Thursday Jan 29, 2015 at 01:46 GMT_\n_Originally opened as https://github.com/Microsoft/vipr-old/issues/84_\n\n---\n\n\\vipr\\test\\ProxyExtensionsUnitTests\\Given_An_EntityType_From_Server.cs\nWhen_Updating_GeoSpatial_Primitive_Property_On_Client_Then_That_Property_Must_Be_Updated_On_Server\n\nUsing a GeoSpatial property seems to be causing issues with converting the payload into a Delta<Supplier>. This issue, deserialization of GeoJson, is discussed in a few places like http://blogs.microsoft.co.il/applisec/2014/06/03/spatial-support-in-web-api-and-odata/. Unfortunately, it seems that since we are using Delta<T> a custom Json deserializer is not even getting triggered. We need to find a workaround for this issue.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/3/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e048c2bdebe8abd7375b75d8812cb4dcdff46a73", "message": "Initial Commit of Vipr"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284397", "body": "<a href=\"https://github.com/marcote\"><img src=\"https://avatars.githubusercontent.com/u/2897427?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [marcote](https://github.com/marcote)**\n_Friday Jan 16, 2015 at 20:45 GMT_\n\n---\n\nOur current configuration settings are simply some key/value and and don't think we will need more than that. \n@joshgav, @lt72  What do you think? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284399", "body": "<a href=\"https://github.com/MrTomWhite\"><img src=\"https://avatars.githubusercontent.com/u/2236580?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [MrTomWhite](https://github.com/MrTomWhite)**\n_Friday Jan 16, 2015 at 21:02 GMT_\n\n---\n\nHow do other C# libraries handle this problem? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284401", "body": "<a href=\"https://github.com/piotrpMSFT\"><img src=\"https://avatars.githubusercontent.com/u/2379589?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [piotrpMSFT](https://github.com/piotrpMSFT)**\n_Friday Jan 16, 2015 at 21:18 GMT_\n\n---\n\nThis is not a library problem but an application problem. We are enabling communication of state between an application [the Vipr host applicaiton] and the Components [Readers, Writers].\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284403", "body": "<a href=\"https://github.com/joshgav\"><img src=\"https://avatars.githubusercontent.com/u/4421720?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [joshgav](https://github.com/joshgav)**\n_Tuesday Jan 20, 2015 at 16:41 GMT_\n\n---\n\nUnder the two proposals, how would configuration be shared between **multiple writers or readers**? Do we need a hierarchy of configuration? If so, do at least the top levels of this hierarchy need to be typed as dictionaries?\n\nPerhaps to leverage config files, we could extend the dictionary with the ability to read config files from disk at an expected location (e.g. typename.config) as a strongly-typed element such as XmlDocument.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284406", "body": "<a href=\"https://github.com/joshgav\"><img src=\"https://avatars.githubusercontent.com/u/4421720?v=3\" align=\"left\" width=\"48\" height=\"48\" hspace=\"10\"></img></a> **Comment by [joshgav](https://github.com/joshgav)**\n_Tuesday Jan 20, 2015 at 16:57 GMT_\n\n---\n\nAn alternative suggestion: What if instead of IDictionary, we surface configuration data through a \"dynamic\" object produced from JSON? That is, we create an object that acts like a complete tree (not just a dictionary), from a JSON config file? It seems [JSON.NET](http://james.newtonking.com/json) has [this capability](http://james.newtonking.com/json/help/html/SerializationGuide.htm#Dynamic).\n\nI think if we did this we wouldn't have complex objects as nodes/leaves in the tree. The final leaf node would always be a primitive type.\n\nNB: It would be even better if we could use [YAML](http://www.yaml.org/). IMHO it's so much easier to read and write then JSON, which is a big advantage for config files. There's a C# lib for it [here](https://github.com/aaubry/YamlDotNet).\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/72284406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "MIchaelMainer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/61c45d9e51ac7a343c0b3db8892791bd6e0c18db", "message": "Removed packages from outdated OutlookServicesVIPR\n\nWe are using vipr as a submodule of a submodule. This means we are using a deep recursive clone which leads to the Nuget restore step being done on this package.json. There isn't a vipr nuget package so the restore fails here."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shiftylogic": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ef3b93be53c8944a76e3b3873147f639bc02c8d7", "message": "Merge pull request #131 from Microsoft/mmitche-patch-1\n\nhttp://dotnet-ci.cloudapp.net -> https://ci.dot.net"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f69c3b7f36e29dcf694be140c0601aed7e062465", "message": "Merge pull request #130 from Microsoft/shiftylogic/working3\n\nUpdating to only use latest MSBuild."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/25bbbad1de5214ad25e9644887ca899292caca0c", "message": "Merge pull request #127 from v-am/master\n\nAdd support for logging via NLog"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b53bb03d53450fc1b3335943d26f990934764854", "message": "Merge pull request #126 from v-am/master\n\nFix for #125."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9af0da1eb56ea4166b44af2ca1b4138f63f09c16", "message": "Merge pull request #124 from v-am/master\n\nAdd Code of Conduct text."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/0551621e3265d26b688bb00c89cbc530f33280ef", "message": "Merge pull request #123 from v-am/master\n\nAdd description annotations support for enum members (Issue #50)"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/31e3f67a8a938a4acb887d243b7bdb1e5e97ea32", "message": "Merge pull request #122 from v-am/master\n\nAdd unit tests to get better coverage of vocabulary annnotations"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/217560001", "body": "These changes broken the build when using Mono which is required for building on a Mac.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/217560001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218228255", "body": "I did a quick CR for you and added some comments. How quick can we get this pushed to master? I'm targeting pushing my SDK changes by EOW and would need this live in master so I don't have to take a dependency on your private fork.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218228255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/235017031", "body": "Fixed with PR #126.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/235017031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/242824602", "body": "I found a better way to fix all these issues by switching exclusively to the latest MSBuild.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/242824602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62711144", "body": "If this isn't being used, why leave it in the code?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62711144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62711266", "body": "Can you add support like this for select and filter?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62711266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62712572", "body": "This file should just be removed since it effectively is doing nothing, unless you think this code will be re-enabled at some point in the future.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62712572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62712753", "body": "Again, if this block is intentional, just remove the unused block.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62712753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62713020", "body": "Delete the file?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62713020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mmitche": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/60fbd36baa0abc9e925fbeb6f747d443651a0952", "message": "http://dotnet-ci.cloudapp.net -> https://ci.dot.net"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/24a35077cef271f47e7fc38435c459b19a074e14", "message": "Merge pull request #119 from mmitche/update-badges\n\nUpdate badge locations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9759fa3d8faca8ff567a8e876a014eab17cf5278", "message": "Update badge locations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/53895a5519ca75dc11d49f21a0c2be77ae8afda5", "message": "Merge pull request #118 from mmitche/branchify\n\nBranchify and move to dynamic labels"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/305bf7c0f500446aacc098ef9fe454501ee04c87", "message": "Branchify and move to dynamic labels"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d0a79c54ecc48d52d393f81384bd127139d6a7f8", "message": "Merge pull request #110 from mmitche/update-badges\n\nUpdate the build badges to new job locations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/550393823c520283881046fbb63e136409d0b29c", "message": "Update the build badges to new job locations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e24c50f03de71c98c0170a470e7562f7ff535ce8", "message": "Merge pull request #109 from mmitche/add-netci\n\nMove to netci job setup"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/28ede5a6c814d02fa5ad7edb0dde4608284f8f06", "message": "Move to netci job setup"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/157782375", "body": "test ci please\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/157782375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/157785929", "body": "test ci please\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/157785929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/157786629", "body": "test ci please\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/157786629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/210046474", "body": "@dotnet-bot test ci please\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/210046474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/210048655", "body": "@dotnet-bot test ci please\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/210048655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "v-am": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/96727e464ba5580852cfbe85b3c1a15e1897dd10", "message": "Add support for logging via NLog"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e99c82d93efd66c0e330e5b08a22bca997c1e183", "message": "Fix for #125.\n\nWhen ODATA lib returns a list of vocabulary annotations for an EntityType, this list consists of all annotations defined for this type plus all annotations inherited from its base types. The type annotations and the inherited annotations differ by their Target property. The annotation list is parsed by VIPR into Projection for a OdcmClass object. However, VIPR requires only one copy of a particular annotation type to be present in any OdcmObject.Projection list.\n\nThis particular crash is caused by redefinition of a base EntityType annotation by its derived class.\n\nThe fix takes into account that base type annotations can be redefined (or overridden) by derived types.The OdcmObject.Projection for any type would contain base type annotation only if this annotation hasn't been redefined or overridden by this type.\n\nThe change also adds a new unit test for annotation inheritance scenario."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/cffb0cdadeb04f16fb983f9c4c053eb2dc64ea49", "message": "Add Code of Conduct text."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7e93a23d95808bc5ee9e2b7431e80df16aeeb790", "message": "Add description annotations support for enum members (Issue #50)"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/35050b2b8bb975982aae3698625e8980816b6155", "message": "Add unit tests to get better coverage of vocabulary annnotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e425f2651b8792d87a87c5d01f7d54b557c02eef", "message": "Add support for function overrides"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8dc18a5ba269433faac3af27869f8058f41bf53f", "message": "Addressing CR comments; updating unit tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/06b6481977ffcce54e399e2b237a550bf653434f", "message": "Ensure Projection definition on EntityType."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/527451f0daa231b3a6ab3c54b77477b62437062f", "message": "1. Get rid of RunVipr project\n2. Remove usage of OdcmRecordCapability\n3. Tests refactoring"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/8fd7e0665ce779c73700b82d2871940fafbfc8ac", "message": "Minor change"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a5821e809ed098b3d57ec05510beb123585530e2", "message": "Merge branch 'Vipr-master'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/f6b6e27bcf892b9223d2fc5eee16f584c364bba0", "message": "Tests refactoring plus a bit of clean-up"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/47bdc5e5cb9a3048e66624ab27755d1825bccbe4", "message": "Merge remote-tracking branch 'upstream/master'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6f85b6286df10558cea8ff6fbc158e9f2b672c35", "message": "Merge remote-tracking branch 'refs/remotes/Microsoft/master'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/31493048c90c422c9637040939cd2cd6f9ae45c1", "message": "Delete unused/moved files"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3edbba357b01057a0aaac1187f609506d06bb9ec", "message": "Numerous changes related to annotations support. For details, see Annotations.md"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/028b867f8e79b61e3ea8071ab710be71bf5d674d", "message": "Merge branch 'int-msot'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ca11381bd1637b9c6ea1e1933857300dcdb3cc1c", "message": "Merge branch 'Annotations'"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/33477c949b50eabfb887ad92778e8e5a28bba5ec", "message": "Upgrade solution to VS 2015"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/09b5e02af3a653115649972e08cdd7b1deb2717c", "message": "Merge from v-am/Vipr to Microsoft/Vipr-Annotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/6744426c926adcbe0feddb4613e9157c62d83215", "message": "Remove unused references from OdcmReader"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/189385487", "body": "These are cumulative changes that were created by:\n1. Merging Microsoft/Vipr(master) into Microsoft/Vipr(Annotations)\n2. Merging the result of step 1 back into Microsoft/Vipr(master).\n\nThere are also some minor changes removing unused references and upgrading solution to VS2015.\n\nThe Microsoft/Vipr(Annotations) branch is not being modified.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/189385487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197603937", "body": "This doesn't belong to Vipr project.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197603937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197970652", "body": "The code fails while generating ODCM model:\n\n```\nVipr.Reader.OData.v4.OdcmReader.ReaderDaemon.WriteNamespaceDeep C#\nVipr.Reader.OData.v4.OdcmReader.ReaderDaemon.WriteNamespaces    C#\nVipr.Reader.OData.v4.OdcmReader.ReaderDaemon.GenerateOdcmModel  C#\nVipr.Reader.OData.v4.OdcmReader.GenerateOdcmModel   C#\nVipr.Bootstrapper.MetadataToClientSource    C#\nVipr.Bootstrapper.MetadataToClientSource    C#\nVipr.Bootstrapper.Start C#\nVipr.Program.Main   C#\n```\n\nThe logic in WriteNamespaceDeep does assume that all base entity types are defined before their derived types. If that's not the case, the code might fail when it tries to go up hierarchy tree trying to resolve a property defined in a base class.\n\nThis can probably be fixed by making a preliminary pass through all entity types just to establish their hierarchy.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197970652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197975731", "body": "I believe this is an issue in C# code generator. ODCM model has enough information to generate an appropriate code.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197975731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197985147", "body": "The logic in Vipr.Reader.OData.v4.OdcmReader.ReaderDaemon.WriteNamespaceDeep assumes that all functions are defined in the same namespace as entity types they are bound to.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/197985147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/198006588", "body": "Looks like OdcmModel already supports that.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/198006588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218867822", "body": "It's a different issue: code expects a collection of navigation properties and it's not there.\n\nShould be fixed with my latest pull request.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218867822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218912748", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218912748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218913120", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218913120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62912046", "body": "This code is mostly for backwards compatibility with Vipr.WriterCSharp.Lite; it might go away eventually.\n\nI think we should try to keep Vipr as agnostic of any specific annotations as possible. It should be responsibility of OdcmWriter implementation to provide the correct defaults;\nOdcmProjection.UserDefaultCapabilityProvider property can used for this purpose (see its usage in Given_a_valid_edmx_with_Capability_Annotations tests).\n\nFor now it's probably safe to assume that if BooleanValueOf() method returns null, the default is \"true\", but I can start working on changes to T4TemplateWriter to provide specific defaults.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/62912046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mattgeim": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/cdab05788e4f9ec8dc7d1fb8f219728372a6a627", "message": "Merge pull request #121 from v-am/master\n\nAdd support for function overrides"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/72838f694c04d8afd5000813dff218fd730c345c", "message": "Merge pull request #120 from v-am/master\n\nBetter Annotations support - tests passing local per @v-am and @shiftylogic"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/16ed2764da44fc86ad3a12dd756e53d854afb3f5", "message": "Merge pull request #117 from shiftylogic/master\n\nIssue #116: Upgrade Its.Configuration to latest to fix a bug when using Vipr on Mac with Mono."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/411bdb3910a34a7f7a0e8790140140527fcb969a", "message": "Merge pull request #114 from v-am/master\n\nMerge MsOpenTech/Vipr(int-msot) into Microsoft/Vipr(master)"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3820fa25b0320dd00e602c55074e6ba18b2693a4", "message": "Merge pull request #113 from v-am/master\n\nRemove unused references from OdcmReader"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3f2deba24ac7d54f847dfb78bde41b71914325c4", "message": "Merge pull request #111 from iambmelt/patch-1\n\nSpelling correction"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199407000", "body": "v-am has a fix and will close out when complete.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199407000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199407891", "body": "This will not be fixed currently, documentation is sufficient.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199407891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199408206", "body": "due to no response and the previous concerns, closing.  Model should have enough to handle already.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199408206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199410004", "body": "Issue doesn't exist anymore in current code based on removal.  \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199410004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199411182", "body": "@v-am will take on this to investigate\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199411182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199412342", "body": "There isn't a large need for this, don't see it being prioritized over other issues.  Re-open if needed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199412342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199413300", "body": "Same as issue 84.  closing.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199413300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199413626", "body": "@v-am will confirm and close.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199413626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199415936", "body": "see also issue #27 \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199415936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199416987", "body": "re-open if still needed.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199416987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199418067", "body": "closing this issue as we have #31 and #12 that are the same.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199418067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/200867218", "body": "Pull request merged.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/200867218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "iambmelt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/753e7ee7982c8cfab89564645db1d1b6e365afde", "message": "Spelling correction"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199412480", "body": "Disagree. What does ODCM stand for? It seems awfully important and awfully specific to _this_ project. If we're going to mention it in READMEs we ought to give enough context such that people can understand what we expect them to read.\n\n![screen shot 2016-03-21 at 11 19 08 am](https://cloud.githubusercontent.com/assets/990063/13929376/1518a87e-ef57-11e5-9565-58efd6df3f13.png)\n\n![screen shot 2016-03-21 at 11 19 22 am](https://cloud.githubusercontent.com/assets/990063/13929380/1f2105be-ef57-11e5-99be-765976238669.png)\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/199412480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "marcote": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/7ab0717ac52b1a2b5ab8e611a2959b0134a8cb80", "message": "adding function in OdcmMethod"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c72471fa121c17d73f9d21888a49824e8f15a704", "message": "updating nuget.targets"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/d4f263e9599f7a38ff127a2cb1fa5504ee2ecee4", "message": "Merge remote-tracking branch 'upstream/master' into int-msot"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/40bd9280f6211d00ad112d7cace1fcd23f0a66ea", "message": "Merge pull request #3 from zlash/int-msot\n\nModified NuGet.targets to work with mono."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c2a02542bb157bffbded42da1374f7d718f9c345", "message": "updating nuget targets"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/3f8b4dc7343a11375b28aef3bab5eef902939b13", "message": "renaming outputfile -> relativefile"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/4eeeab5badfd81dbf94432e03a49bf383631609c", "message": "fixing formatting issues"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/ca5977769645a437bb1b34ba9469a24a18c909a7", "message": "fix multiple enumeration"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/fcf5744a76b57f8be4ea4f88dc59ceac8500c5f6", "message": "merge with latest PR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c70d17607d34fadcebdb57620e71d310a87453f6", "message": "fixing broken tests"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/a3ad2c41a9355897ca6041a050b3303476b45d3f", "message": "working on return IOdcmWriter return type changes"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75158039", "body": "@piotrpMSFT yes, we have something more similar to this approach. In our particular case we iterate through each entity, we apply a transformation using the T4 engine and the Template and we get the output : \n\n```\n        public void ProcessingAction(IEnumerable<OdcmObject> source, Template template)\n        {\n            foreach (var complexType in source)\n            {\n                ProcessTemplate(template, complexType);\n            }\n        }\n\n        protected virtual void ProcessTemplate(Template template, OdcmObject odcmObject)\n        {\n            var host = GetCustomHost(template, odcmObject);\n\n            var templateContent = File.ReadAllText(host.TemplateFile);\n            var output = Engine.ProcessTemplate(templateContent, host);\n\n            if (host.Errors != null && host.Errors.HasErrors)\n            {\n                var errors = LogErrors(host, template);\n                throw new InvalidOperationException(errors);\n            }\n            FileWriter.WriteText(template, odcmObject.Name, output);\n        }\n```\n\nThe Template class has some information to tell the FileWriter \"-Hey, this is how we need to persist the file\"\nThe FileWriter has a specific implementation depending on the language we choose.\n\nSince we have multiple templates, with multiple outputs, aggregate them into an Enumeration can be tricky with our current approach, but I prefer that option rather than a Dictionary.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/75158039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86123207", "body": "@piotrpMSFT right now we have a proper implementation of the IOdcmWriter interface in our T4TemplateWriter, relying on the Vipr's FileWriter class for write to disk ops and works fine. We don't need (so far) anything extra to generate Java/Objective-C code but if that were the case, we could subclass the TextFile class and add what we need there.\n\nI can create a PR with the refactor if interested. I'm pretty sure the code will be cleaner and worse case scenario, while working in the PR I can discover a blocking issue that prevents the refactor.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86123207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86233075", "body": "d:\\j\\workspace\\microsoft_vipr_prtest\\test.proj(21,5): error : System.MissingMethodException: Constructor on type 'Xunit.Sdk.TestFrameworkProxy' not found.\n\nThis is a related error I get when I tried to run the tests. Not sure the cause, but most likely the xUnit test runner is not compatible : / @piotrpMSFT do you wanna try this in your environment first please? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86233075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86261242", "body": "@piotrpMSFT I can't assign to myself. Otherwise I would do it.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86261242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87040475", "body": "Will double check that. Sorry. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87040475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87049821", "body": "Most formatting issues fixed, specially the ones related to mixed tabs and spaces. The rest is formatting stuff created by hitting `crtl+k, crtl+d` as a tick.  :-/  \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/87049821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88070035", "body": "Thank you guys!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/88070035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27319070", "body": "@tonycrider please check this comment : https://github.com/Microsoft/Vipr/issues/54#issuecomment-86125992 \n\nI like your proposal though, @piotrpMSFT what do you think?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27319070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27319118", "body": "yes, Will do.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27319118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27384067", "body": "Done!\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/27384067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ysanghi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2fd308fcaacc78cfe9501a53a3d1a8795a333c43", "message": "Type definitions should only accept primitive types as the underlying type.\n\nPreviously, I was allowing type definitions to have any valid type as\nthe underlying base type. However, according to OData spec only\nprimitive types can be used as base types for underlying types. I have\nadded an explicit check to make sure bad edmx is not allowed.\n\nAdded couple of test cases to test the behavior as well."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/30e75520637ca7de2d8c55bfb2829798612a6e0e", "message": "Some cleanup.\n\nAdding blank lines between validation statements"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/de281d9db03e00715e7041e34f269841b0248d14", "message": "Adding Type definition type related test case\n\nMake sure that when a property is of type typedefinition then it gets\nresolved as underlying type."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/9ed1e6676d1e3e8ca83a90ad32f2af2a7a74ccbc", "message": "Test cases for Type definition support"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/1967a4437a1df76a264dc1c7d7b3b6689097b3f2", "message": "Renaming TypeDef to TypeDefinition"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/2a710adf058cfb048193b866d72305d3b6ed20be", "message": "Initial support for OData TypeDefs\n\nSupport TypeDef as an alias for underlying base type"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zlash": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/5059d3c4cccafe91defcdf4cc2b3af230a5f7502", "message": "Modified NuGet.targets to work with mono."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gyorgys": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/c88f84d27159bd41200fbcf78e1e708173175af5", "message": "prefix namespace with global::"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MrTomWhite": {"issues": [], "commits": [{"url": "https://api.github.com/repos/Microsoft/Vipr/commits/30fc3b328ccf1559bf1157ac5c01400005e1ad88", "message": "Adding a change to ensure that a ODataVocabulary Reader's constructor cache is never uninitialized"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/efa182a14333bf99bd51057bffba00332adcc74b", "message": "Add copy of CapabilitiesVocabulary as a resource\n\nIn order to correctly parse vocabulary objects, we need some copy of the\nvocabulary. Since the capabilities vocabulary is a core part of the OData\nspec,\nit makes sense for it to be an embedded resource."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/626e95b774757dc8d856f7a473a393e117b97678", "message": "Merge branch 'read-annotations' of https://github.com/MrTomWhite/Vipr into read-annotations"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b3d1a1c19ab6bfc09a029b60f04753f4eda1fa25", "message": "Add annotation reading support to the Reader\n\nThis commit adds code that uses the ODataVocabularyReader to add\nannotation information to Odcm objects created by the Reader.\n\nTest coverage does not expansively cover the entirety of annotations at\nthis\ntime, but does cover the primary annotations that are needed\nfor suppressing general CRUD activities."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/bfc8d4a3897ca67402bbdc47896bd6448d2444ec", "message": "Add unit tests for the ODataVocabulary reader"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/865aa8fce0e352db2b188a1eb64a2f9407776149", "message": "Add the ODataVocabularyReader\n\nVocabulary annotations are not exposed with the niceset of APi's at the\nOData level. This commit adds a utility class to hide the interpretation\nof annotation values from EdmModels and returns instances of\nOdcmVocabularyAnnotation.\n\nThis code leverages reflection to create instances of annotation complex\ntypes\nand mostly uses the EdmLib's EdmExpresion evaluation facilities, except\nin some small cases.\n\nIn order to properly interpret the vocabulary, an xml resource is added\nwhich has the latest version of the capabilities vocabulary from OASIS."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/e850625534c84cd9f185c57c7d0c5746c720eb81", "message": "Add representations of ComplexTypes in Capabilities vocab\n\nThere are a few different complex types that are used in the\nOneNote metadata document. This commit adds those complex types so that\nthey may be parsed and represented.\n\nThis is obviously incomplete coverage of the annotations. Additionally,\nthis code should not be hand written and probably should be generated."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/4f3e9f9f075e875b3fb350d5d42079f2560fc8de", "message": "Modify the code model to support annotations\n\nThis commit removes the OdcmAnnotated object and modifies the remainder of\nobjects in the code model so that vocabulary annotations can be\nrepresented\nin the code model.\n\nAlmost all entities in an Edm should be annotatable by at least a\nCore.Description.\nAs such, almost anything that is an object should have a collection of\nannotations\n\nOData defines annotations in a way that most closely represents a named\ntriple of Namespace, Name, and Value. As such, the code dom representation\nof an object should be a string, string and an object, Consumers\nof the annotation value can accordingly reference the value for\nannotations they know of by casting the object."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/884f4fd94b42bd6857626ebf80332d5ab0f1773c", "message": "Modify the code model to support annotations\n\nThis commit removes the OdcmAnnotated object and modifies the remainder of\nobjects in the code model so that vocabulary annotations can be\nrepresented\nin the code model.\n\nAlmost all entities in an Edm should be annotatable by at least a\nCore.Description.\nAs such, almost anything that is an object should have a collection of\nannotations\n\nOData defines annotations in a way that most closely represents a named\ntriple of Namespace, Name, and Value. As such, the code dom representation\nof an object should be a string, string and an object, Consumers\nof the annotation value can accordingly reference the value for\nannotations they know of by casting the object."}, {"url": "https://api.github.com/repos/Microsoft/Vipr/commits/b29016bac8a8ccc0a5a0dc25a4326586b451ba13", "message": "Removing the OdcmFields unit tests because fields have been removed from the code model and the test is entirely commented out"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73317052", "body": "@piotrpMSFT Isn't this already resolved? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73317052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632571", "body": "I'll close this and open a PR on Annotations. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/73632571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/83147837", "body": "> Removed reference to CSharpWriter from Vipr.Core. We need to load Vipr.Core to test against our T4TemplateWriter and don't need to include CSharpWriter. If you need an output folder with CSharpWriter along with the rest of the Vipr components, consider referring to the Vipr components from the CSharpWriter project. \n\n+1 This is an awesome catch\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/83147837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85158891", "body": "@gyorgys The broken test in particular is `CSharpWriterUnitTests.Given_an_OdcmObject_with_Description.When_Navigation_OdcmProperty_has_Description_then_concrete_class_properties_have_the_right_summary_tags`\n\nThe failure is:\n\n```\nz:\\Builds\\work\\b7ceef20fdfcf0ee\\Shared\\Execution\\FallbackTestFramework.cs(21): error : CSharpWriterUnitTests.Given_an_OdcmObject_with_Description.When_Navigation_OdcmProperty_has_Description_then_concrete_class_properties_have_the_right_summary_tags: FluentAssertions.Execution.AssertionFailedException : Expected string to be equivalent to \\r\\n\"boy mustard call right planet house whole age on lie executive song farm\" with a length of 72 because OdcmProperty.Description should be captured as C# document comment for explicit concrete interface property, but \\r\\n\"\" has a length of 0. [d:\\j\\workspace\\microsoft_vipr_prtest\\test.proj]\n```\n\nhttp://dotnet-ci.cloudapp.net/job/microsoft_vipr_prtest/65/consoleFull\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85158891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85236873", "body": "I've got no clue. I was doing a build and figured I'd log an issue to track this. I'd tag this as up-for-grabs + needs-investigation. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85236873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85644744", "body": "Is this work completed with PR #36? @piotrpMSFT \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85644744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85644881", "body": "Is this work completed with #31? @piotrpMSFT \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/85644881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86769763", "body": "Commits 126791b ~ f4c4b13 could probably be squashed together. (They all address the same file) \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86769763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86771022", "body": ":tada: Love the commit history on this PR :fireworks: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/86771022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/96276070", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/96276070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/101440550", "body": "Thanks for adding these issues Sridhar!!!\n\ud83d\ude03\ud83c\udf89\ud83d\udca5\n\n> On May 12, 2015, at 3:14 PM, Sridhar Periyasamy notifications@github.com wrote:\n> \n> In a number of the call patterns, for example in CopyToSectionGroupAsync(String) (or any actions/functions), there's a Uri check that is followed by throwing a naked exception: \n>             Uri myUri = this.GetUrl();\n> \n> ```\n>         if (myUri == (Uri) null)\n> \n>          throw new Exception(\"cannot find entity\");\n> ```\n> \n> Could we throw a better exception than this? The expected catch block I'd have to write to catch and handle this exception would feel silly if I have to catch an Exception and then dispatch on the message. \n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/101440550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/101455397", "body": "We should also add support for the corresponding search capability annotation at the same time! \u261d\ud83c\udffb\n\n> On May 12, 2015, at 3:24 PM, Sridhar Periyasamy notifications@github.com wrote:\n> \n> ?$search isn't supported\n> Example:  GET ~/pages?$search=disney\n>  Search isn't supported. We would use this similar to .Expand(\"string\"), where a string is passed in and then URLEncoded into the query param.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/101455397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542816", "body": "Why do we need this? What's the call pattern for `EnsureCapabilties()`? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542855", "body": "This is going to turn into a rehash of CapabilitiesHelper from the OData.net folks. We already had some code that parses annotations, why do we need more? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542870", "body": "+This boiler plate all follows from the Edm type of the annotation itself.  \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542890", "body": "Why use a null here instead of a default capabilities object? \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26542890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26550630", "body": "I don't think the OdcmCapabilties representation is mutually excusive with the originally discussed model. (You can create the original model -> parse the original model to get a OdcmCapabiltiies instance)\nThe current implementation reimplements the original parsing specified to items in the capabilities vocabulary and then populates the OdcmCapabilities datastructure. I don't think that's the right approach. :( \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26550630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26873301", "body": "> \"I feel the original model adds an extra layer in converting the raw annotations into OdcmCapability.\" \n\nWe don't really need an extra level of abstraction here do we? This \"Extra level\" is going to produce a collection of capability objects which will have roughly the same set of call patterns from the other proposal; it doesn't feel like it makes our lives easier and adds some complexity. \n\n> \"Also OdataCapabiltiesReader right now dispatches the parsing logic to a list of parsers which can parse the annotations any way they want. \" \n\nI don't really agree that this is nescessary. There's not going to be custom parsing semantics for annotations that are already defined in some schema somewhere. The \"custom parsing\" is just defined as being able to interpret the EDM model, which is parsable fully from knowledge of the types.  Handwriting a bunch of parsers to parse different structures of annotations is going to get old fast ++ produces debt we don't need to take on. \n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/26873301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "datimson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/169171510", "body": "I'm experiencing the same problem. Any update on this?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/169171510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "stokara": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/182991713", "body": "Same issue.  Is the source for outlookClient library available anywhere?\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/182991713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rifuller": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218859088", "body": "I'm encountering an InvalidOperationException when trying to parse the O365 Exchange API Metadata: https://outlook.office365.com/api/beta/$metadata\n\nIs this the same issue?\n\nCall stack is:\n\nException: Exception thrown: 'System.InvalidOperationException' in System.Core.dll (\"Sequence contains no matching element\"). \n\n```\n   at System.Linq.Enumerable.Single[TSource](IEnumerable1 source, Func2 predicate)\n   at Vipr.Reader.OData.v4.Capabilities.BooleanCapabilityAnnotationParser.GetNavigationProperties(IEdmRecordExpression recordExpression, OdcmClass class)   Capabilities\\BooleanCapabilityAnnotationParser.cs:line 82\n   at Vipr.Reader.OData.v4.Capabilities.BooleanCapabilityAnnotationParser.ParseCapabilityAnnotationForEntitySet(OdcmProperty odcmEntitySet, IEdmValueAnnotation annotation)   Capabilities\\BooleanCapabilityAnnotationParser.cs:line 53\n   at Vipr.Reader.OData.v4.Capabilities.ODataCapabilitiesReader.SetCapabilitiesForEntitySet(OdcmProperty odcmEntitySet, IEdmEntitySet edmEntitySet, IEdmModel serviceModel, PropertyCapabilitiesCache propertyCapabilitiesCache)   Capabilities\\ODataCapabilitiesReader.cs:line 57\n   at Vipr.Reader.OData.v4.OdcmReader.ReaderDaemon.AddVocabularyAnnotations(OdcmObject odcmObject, IEdmVocabularyAnnotatable annotatableEdmEntity)   OdcmReader.cs:line 127\n   at Vipr.Reader.OData.v4.OdcmReader.ReaderDaemon.WriteProperty(OdcmClass odcmClass, IEdmEntitySet entitySet)   OdcmReader.cs:line 464\n   at Vipr.Reader.OData.v4.OdcmReader.ReaderDaemon.WriteNamespaceDeep(IEdmModel edmModel, String namespace)   OdcmReader.cs:line 404\n   at Vipr.Reader.OData.v4.OdcmReader.ReaderDaemon.WriteNamespaces()   OdcmReader.cs:line 145\n```\n", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/218859088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "msftclas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/316866925", "body": "\r\n@cbales,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\n_Thanks,\nMicrosoft Pull Request Bot_", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/316866925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/317824031", "body": "\r\n@cbales,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\n_Thanks,\nMicrosoft Pull Request Bot_", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/317824031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/319509533", "body": "\r\n@cbales,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\n_Thanks,\nMicrosoft Pull Request Bot_", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/319509533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/330370748", "body": "\r\n@cbales,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\n_Thanks,\nMicrosoft Pull Request Bot_", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/issues/comments/330370748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LouMM": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131777979", "body": "We might be overwhelmed with logging errors here. Could the logger have a level/scoping related to it so this is only logged under 'verbose'? If we feel this should only throw an exception when there is something missing that shouldn't be, we could log under 'error'. ", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131777979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131778254", "body": "We should add comments here around what exceptions we expect. Since we don't have explicit exception types, code readers will have a better expectations. At some point, we can move to collecting specific exception types and handling them differently. Same comment for all other {catch} blocks.", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131778254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131779459", "body": "Possible Race Condition: Directory.CreateDirectory is thread safe in itself, but if another thread comes in here and tries to check the directory existed, the very same time another thread is creating the directory, and tries to create it again, it will throw an exception. There is no exception handling here to handle that case.", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131779459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131780562", "body": "Would be better to use a Monitor around this code than sleeping the thread. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/lock-statement\r\n\r\nIf you are hitting this code often, than a {lock} might have performance implications. We can discuss other patterns if that is the case. \r\nhttps://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131780562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131781127", "body": "Since this is a static class re-using a StreamWriter <here> per file is not easy to do. If this method is called often, creating a new writer per write might have a huge performance hit. We might want to add some perf counters here if we are finding writes are taking too long to consume.", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131781127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131781634", "body": "Another note is you may want to lock based on the file path??? This means more streamwriters could be created if it is a different filepath.", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131781634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131782301", "body": "If you do add a {lock} you could put the directory creation inside that as well which guard against this issue.", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/131782301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/134292365", "body": "Possible option would be to extract the batch sizes and pull defaults from constants, if not supplied, but allow for the invoking process to specify the batch sizes. Either by Config file or parameters. Not required ATM, but we could put a TODO to extract the values.", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/134292365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/134292614", "body": "nit pick: Please comment on the abstracted method. ", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/134292614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/134294023", "body": "Looks like GetorAdd is not Thread Safe. https://docs.microsoft.com/en-us/dotnet/standard/collections/thread-safe/how-to-add-and-remove-items\r\n\r\nOne Option would to use 'Lazy' ConcurrentDictionary<string, Lazy < AsyncLock > >.  \r\nhttps://aka.ms/qb74cz", "reactions": {"url": "https://api.github.com/repos/Microsoft/Vipr/pulls/comments/134294023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}}}}