{"_default": {"1": {"fabiopedrosa": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2250", "title": "Timeout with HEAD method of AsyncHTTPClient on valid URL", "body": "I can't get AsyncHTTPClient to do a simple HEAD request.\r\n\r\nNot working:\r\n```python\r\n#!/usr/bin/env python\r\nimport logging\r\nfrom tornado import ioloop\r\nfrom tornado.web import gen\r\nfrom tornado.httpclient import AsyncHTTPClient\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\n\r\n@gen.coroutine\r\ndef test():\r\n    url = \"https://r4---sn-8vq54vox2u-apne.googlevideo.com/videoplayback?aitags=133%2C134%2C135%2C136%2C160&sparams=aitags%2Cclen%2Cdur%2Cei%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Crequiressl%2Csource%2Cexpire&mime=video%2Fmp4&id=o-AK1r9zLt8iQEN-zyIbOXynTtGcj201h1Qivmb4INkx0Q&itag=135&dur=125.600&lmt=1380999388644463&ip=94.62.195.82&key=yt6&expire=1516640181&clen=2196699&signature=53D81AE57372BADC88F66B6B33EB220E42847E10.B3EAC4C02578FFBAA553A47652BE63312A8DFF7D&ms=au&ei=VcNlWq62DtilWOP7m8AB&mv=m&mt=1516618492&ipbits=0&mn=sn-8vq54vox2u-apne&mm=31&requiressl=yes&keepalive=yes&pl=16&source=youtube&gir=yes&initcwndbps=940000&ratebypass=yes\"\r\n    client = AsyncHTTPClient()\r\n    try:\r\n        response = yield client.fetch(url, method=\"HEAD\", validate_cert=False)\r\n        print response.status\r\n        print response.headers\r\n    except:\r\n        logging.exception(\"error\")\r\n\r\n    ioloop.IOLoop.current().stop()\r\n\r\n\r\nif __name__ == '__main__':\r\n    test()\r\n    ioloop.IOLoop.current().start()\r\n```\r\n\r\nworking just fine:\r\n\r\n```python\r\nimport requests\r\nurl = \"https://r4---sn-8vq54vox2u-apne.googlevideo.com/videoplayback?aitags=133%2C134%2C135%2C136%2C160&sparams=aitags%2Cclen%2Cdur%2Cei%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Crequiressl%2Csource%2Cexpire&mime=video%2Fmp4&id=o-AK1r9zLt8iQEN-zyIbOXynTtGcj201h1Qivmb4INkx0Q&itag=135&dur=125.600&lmt=1380999388644463&ip=94.62.195.82&key=yt6&expire=1516640181&clen=2196699&signature=53D81AE57372BADC88F66B6B33EB220E42847E10.B3EAC4C02578FFBAA553A47652BE63312A8DFF7D&ms=au&ei=VcNlWq62DtilWOP7m8AB&mv=m&mt=1516618492&ipbits=0&mn=sn-8vq54vox2u-apne&mm=31&requiressl=yes&keepalive=yes&pl=16&source=youtube&gir=yes&initcwndbps=940000&ratebypass=yes\"\r\nr = requests.request('HEAD', url)\r\nprint r.headers\r\n```", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Deathangel908": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2243", "title": "'autoreload=true' throws 'KeyboardInterrupt' while debugging with python3.6", "body": "To reproduce the issue you can use [default example](http://www.tornadoweb.org/en/stable/#hello-world): \r\n\r\n```\r\nimport tornado.ioloop\r\nimport tornado.web\r\n\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.write(\"Hellof, world!\")\r\n\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        (r\"/\", MainHandler),\r\n    ], debug=True, autoreload=True)\r\n\r\nif __name__ == \"__main__\":\r\n    app = make_app()\r\n    app.listen(8888)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nPycharm starts the script with \r\n`/usr/bin/python3.6 /opt/pycharm-eap/helpers/pydev/pydevd.py --multiproc --qt-support=auto --client 127.0.0.1 --port 33261 --file file_name.py`\r\nIf I edit the file and then save it I receive \r\n```\r\nFailed to import the site module\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/site.py\", line 73, in <module>\r\n    import os\r\n  File \"/usr/lib/python3.6/os.py\", line 652, in <module>\r\n    from _collections_abc import MutableMapping\r\n  File \"/usr/lib/python3.6/_collections_abc.py\", line 288, in <module>\r\n    Iterator.register(str_iterator)\r\n  File \"/usr/lib/python3.6/abc.py\", line 158, in register\r\n    if issubclass(subclass, cls):\r\n  File \"/usr/lib/python3.6/abc.py\", line 207, in __subclasscheck__\r\n    ok = cls.__subclasshook__(subclass)\r\nKeyboardInterrupt\r\n```\r\n\r\nThis issue reproduces with `python 3.6`. On `python 2.7` autoreload works ok. I also tried to turn off `Safe write` in pycharm, but that doesn't affect it at all. \r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bdarnell": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2239", "title": "release: 5.0", "body": "A companion to #2234, this issue is a place to track or suggest issues/PRs that aren't yet fixed/merged in master but should be included in the 5.0 release.\r\n\r\n(The fact that this is empty doesn't mean that I'm planning to take master as it is for 5.0. I haven't done a pass over the queue yet to see what makes my list. I'm just opening this up to suggestions before I finish that)", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2061", "title": "RequestHandler.finish should return a Future", "body": "`RequestHandler.finish` may call `flush()`, which returns a Future, but this Future is simply discarded. The main reason for that Future is flow control in streaming responses, which is no longer relevant by the time we are closing the connection, but it also contains errors if the stream is closed while the response is streamed. This error will be logged as a stack trace if left uncaught, so some applications may wish to await their calls to `finish()` to be able to catch it. \r\n\r\nThis logic also extends to `render()`, which calls `finish()`. \r\n\r\nFrom https://github.com/tornadoweb/tornado/issues/2055#issuecomment-304456147", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2061/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2049", "title": "httpclient: Consider removing magic from AsyncHTTPClient", "body": "`AsyncHTTPClient.__new__` is very magical: Unless you pass `force_instance=True` when constructing an `AsyncHTTPClient`, you may be reusing an existing object. This is partly done for convenience and efficiency (so you don't have to pass a single object around to reuse existing `curl` objects with their connection cache), but also to enforce good internet citizenship (so you have to think about what you're doing and increase `max_clients` before unleashing a massively parallel webcrawler). \r\n\r\nThe downside, of course, is that this magic is surprising and arguably un-pythonic and un-tornadoic. The `force_instance` workaround is unnatural, and this arrangement makes `AsyncHTTPClient.close` difficult to use safely (see #2026). \r\n\r\nFor Tornado 5.0, does it make sense to eliminate this magic and encourage developers to create a single AsyncHTTPClient at startup and pass it around? (or we could start encouraging this pattern now and make the actual change in a future x.0 release) The creation of a SimpleAsyncHTTPClient is fairly cheap since they are stateless, so the main \"cost\" to users of that client implementation would be the fact that the `max_clients` limit would effectively be lifted (some of these users will see that as a benefit rather than a cost). This change would have a larger performance impact on users of `CurlAsyncHTTPClient` since they'd lose the benefit of that objects' connection cache if they were \"creating\" new clients all over the place. The absence of an explicit `close()` call would also mean that these newly-created objects would be relying on GC for cleanup, which is expensive due to internal circular references.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1983", "title": "autoreload: Fix argv preservation", "body": "`autoreload` currently has a wrapper mode (e.g. `python -m tornado.autoreload -m tornado.test`) for scripts, and an in-process mode (enabled by `Application(..., debug=True)`). It's useful to combine these, since the wrapper can catch syntax errors that cause the process to abort before entering its IOLoop. However, this doesn't work as well as it should, because the `main` wrapper only restores `sys.argv` if the process exits, meaning the `-m tornado.autoreload` flags are lost if the inner autoreload fires. The original argv needs to be stored in a global when `autoreload` is `__main__`, so that it can be used in `_reload()`.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1983/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1981", "title": "Websocket error handling hook", "body": "WebSocketHandler doesn't currently have a good way of installing a class-wide handler for uncaught exceptions. The only way is to override `_run_callback`, but that's awkward (and the method is changing in Tornado 4.5 so naive overrides may break the ability to use coroutines). We should add an explicit error-handling hook.\r\n\r\nThe `add_future` call to `f.result()` also needs to be refactored so its exceptions can be handled in the same way instead of escaping to the IOLoop.\r\n\r\nSee https://stackoverflow.com/questions/42822958/tornado-websocket-handler-uncaught-exception/43017469#43017469", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1981/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1895", "title": "Revert #1893 when coverage.py 4.3 is released", "body": "#1893 works around a bug in coverage versions < 4.3; once 4.3 is released (and we require it in our CI configs), we can revert that PR. ", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1361", "title": "Flaky test: double-close of PipeIOStream", "body": "Sample build:\nhttps://travis-ci.org/tornadoweb/tornado/jobs/52565157\n\nObserved error configurations: py3.4 with TwistedIOLoop\n\nThe tests pass, but on rare occasions they log this error:\n\n```\n[E 150228 20:23:37 ioloop:595] Exception in callback functools.partial(<function wrap.<locals>.null_wrapper at 0x7f778816e9d8>)\n    Traceback (most recent call last):\n      File \"/home/travis/virtualenv/python3.4.2/lib/python3.4/site-packages/tornado-4.2.dev1-py3.4-linux-x86_64.egg/tornado/ioloop.py\", line 575, in _run_callback\n        ret = callback()\n      File \"/home/travis/virtualenv/python3.4.2/lib/python3.4/site-packages/tornado-4.2.dev1-py3.4-linux-x86_64.egg/tornado/stack_context.py\", line 275, in null_wrapper\n        return fn(*args, **kwargs)\n      File \"/home/travis/virtualenv/python3.4.2/lib/python3.4/site-packages/tornado-4.2.dev1-py3.4-linux-x86_64.egg/tornado/iostream.py\", line 422, in close\n        self.close_fd()\n      File \"/home/travis/virtualenv/python3.4.2/lib/python3.4/site-packages/tornado-4.2.dev1-py3.4-linux-x86_64.egg/tornado/iostream.py\", line 1406, in close_fd\n        os.close(self.fd)\n    OSError: [Errno 9] Bad file descriptor\n```\n\nIt's unclear which test is failing, but since the stack trace is in PipeIOStream.close_fd it's either a test for PipeIOStream or Subprocess. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1321", "title": "static_path should only claim /favicon.ico and /robots.txt if they exist", "body": "Since static_path inserts its handlers at the front of the list, it shouldn't claim additional top-level paths if the corresponding files don't exist.\n\nhttp://stackoverflow.com/questions/28278157/python-tornado-dont-match-favicon-ico\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1269", "title": "Websocket message size limits", "body": "Websocket servers need a way to limit the size of messages they will accept. The max_body_size limit applies to individual message fragments, but there is no limit on the number or size of fragments that make up a message. The websocket compression support (that is new in 4.1) will also need to be made aware of size limits, like the gzip support for http bodies in 4.0.\n\nFlow control is also an issue; we should allow on_message to return a Future similarly to data_received.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1237", "title": "AsyncTestCase.wait(condition) doesn't work if stop called too soon", "body": "If stop() is called before wait() begins, wait() never enters the loop in which it checks the condition. If a condition is set and has not been met, we should enter the loop even if stopped is true.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1122", "title": "Unused client_secret parameter in OAuth2Mixin.authorize_redirect", "body": "OAut2Mixin.authorize_redirect takes a cilent_secret parameter but doesn't use it (`_oauth_request_token_url` also takes a client_secret and uses it, but it is not called form authorize_redirect).  None of the other auth mixins take a client_secret parameter so this unused parameter should probably just be removed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1066", "title": "Add debug-mode flag for translation files", "body": "There is currently no way to reload translations (csv and gettext) without restarting the server.  We should add a debug-mode flag to either reload the translations when they change, or watch them in autoreload so the whole server can restart.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1063", "title": "Stack-context-local variable pattern", "body": "Stack contexts can be used to provide thread-local-like variables, but this is not obvious.  We should provide a standard implementation of this pattern or at least document how to build your own.  \n\nNotable implementations:\nhttps://gist.github.com/simon-weber/7755289 (discussed on the mailing list)\nhttps://github.com/viewfinderco/viewfinder/blob/master/backend/base/context_local.py\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1036", "title": "Parse proxy-style (absolute-url) requests", "body": "According to http://tools.ietf.org/html/rfc2616#section-5.1.2 it's valid to use absolute urls in the start line even for non-proxy requests, and servers MUST support it.  Tornado needs to parse the url if it doesn't start with a slash (this will need to be messaged for people who are currently writing http proxies with a `.*` routing rule)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/904", "title": "Add method to get client's claimed IP", "body": "The `HTTPRequest.remote_ip` field is intended to contain a trustworthy equivalent of the TCP-level remote address, so it accepts only a single `X-Forwarded-For` hop, and only when configured to do so.  For some purposes (e.g. geolocation), it is useful to take whatever IP address the client claims to be using even through a chain of untrusted proxies.  There should be some method to return the first public IP address from `X-Forwarded-For`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/903", "title": "Use stricter/platform-independent IP parsing for X-Forwarded-For", "body": "`netutil.is_valid_ip` uses `getaddrinfo` in `AI_NUMERICHOST` mode to parse IP addresses.  This method accepts some surprising formats (e.g. \"x.y\" is parsed as `x.(y >> 16).((y>>8)&0xff).(y&0xff)`, at least on mac and linux).  It would be good to limit this to a more formal specification (e.g. the one in http://tools.ietf.org/html/rfc3986#section-3.2.2, which is cited in http://tools.ietf.org/html/draft-ietf-appsawg-http-forwarded-10#section-6.1).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/865", "title": "XSRF cookie expiration issues", "body": "The xsrf cookie is not refreshed gracefully when it expires.  Form-based applications will usually be OK since they will request a page with a fresh token before any form submission, but long-lived AJAXy pages can have trouble if a session crosses the 30-day boundary.  There should be some way to refresh the token before it expires.  \n\nAdditionally, the cache expiration of any page that includes xsrf_form_html should not be greater than the remaining time on the xsrf cookie.\n\nDiscussion: https://groups.google.com/forum/#!searchin/python-tornado/xsrf/python-tornado/1aN84IYC7h8/cW9-J9JbxcUJ\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/864", "title": "Framework for setting cache-related headers", "body": "If certain features of Tornado are used, the resulting pages should not be cached (e.g. xsrf tokens, locale detection).  The Cache-Control and Vary headers are currently left up to the application (except for the Vary: Accept-Encoding header added by the gzip encoder).  We should set the appropriate cache-related headers by default and probably introduce some new interfaces to coordinate these headers between the framework and application-level code (and middleware/mixins).\n- Treat Vary header as a set while the response is being generated, both so multiple cookies don't each append their own Vary: Cookie header and for consistency between the multi-header form and the comma-separated list.\n- Consider adding a method like get_header(name, default=None, set_vary=True).\n- Document recommended idioms for setting Vary header (e.g. emphasizing that Vary must be set whether the header you looked for was present or not).\n- XSRF tokens (and cookies generally) often imply Cache-Control: private instead of Vary: cookie, but the single-valued Cache-Control header is tricker to coordinate than the multi-valued Vary.\n- Consider making Cache-Control: private the default (except for StaticFileHandler) since public caching generally requires some care by the application developer.\n\nDiscussion: https://groups.google.com/forum/#!searchin/python-tornado/xsrf/python-tornado/1aN84IYC7h8/cW9-J9JbxcUJ\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/845", "title": "Clear IOStream read buffer on connection close", "body": "Commit c43996288e52a8f68728164f9284cf286d38543a clears the IOStream write buffer when the stream is closed.  We should clear the read buffer as well, but there are currently tests that fail when that is done.\n\nThe issue is that we allow reads from buffered data after the underlying connection is closed.  As long as one read leads directly (and synchronously) to another, the close callback is delayed.  When there is a gap between the two reads, the close callback is run at that point, but we have some tests that rely on the availability of buffered data at this point.  (We could perhaps declare these tests to be incorrect, but would need to offer some way for applications to indicate an intent to read when they need to preserve the buffered data).\n\nThere is additional discussion in #747, but note that the solution I mention there (acting as if there is a pending read when the buffer is non-empty but no read_callback is set) won't work because there is no guarantee that a read will come later (consider HTTPServer while a request is in flight)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/804", "title": "FacebookGraphMixin needs some work", "body": "FacebookGraphMixin returns byte strings for access tokens on python 3.  It also returns a one-element list for the 'expires' field.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/771", "title": "IOStream runs its close callback too soon.", "body": "IOStream allows for reads after close only as long as there is an unbroken chain of callbacks.  If anything else happens in the meantime, the close callback will be run even if there is buffered data.  _maybe_run_close_callback should check the status of the buffer and only run the close callback if either the buffer is empty or if there is a pending read that cannot be satisfied from the buffer.\n\nSee discussion in #747.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/764", "title": "ssl_options in httpclient.HTTPRequest", "body": "It should be possible to pass more SSL options through HTTPRequest (specific example: ssl_version, for servers that only accept a specific version instead of the ssl3/tls1 hybrid handshake we use).  Ideally this would be the same ssl_options/SSLContext option as seen in the server-side configuration.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/763", "title": "Refactor xheaders configuration", "body": "Xheader usage should not just be on or off, but specify which headers are expected (so an outsider can't spoof the one your proxy doesn't touch).  For advanced usage (i.e. multiple layers of proxies) it might be nice to allow selection of a different value from the X-Forwarded-For list.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/731", "title": "Template loader problems with absolute paths", "body": "Several problems in Loader.resolve_path:\n- If RequestHandler.render() is passed an absolute path, relative paths in {%extends%} and friends don't work.\n- It uses startswith('/') instead of isabs()\n- Strange things happen if you use .. in an extends directive to break out of the template loader's root.\n\nFrom the mailing list:\n  In my project, template folder is not include the template root path, such as Template Load: self.root is \"D:\\website\\app_1\\template\" \n  but some common template file is not include in this path. so When I use the {% extends%} like follow:\n    {% extends \"../../template/common/layout.html\" %}\n  I found if the \"../../template/common/layout.html\" has \"{% include logo.html%}\", the logo.html cannot be found in the current folder.\n\n  Website tree like that:\n    |- template\n    |   `- common\n    |           |- layout.html #{%include logo.html%}\n    |`\\- logo.html   #ERROR, cannot found this path\n    `- app\n`\\- template\n             `-  main.html  -- #{%extend ../../template/common/layout.html%}\n\n  I found there is a bug in class Loader(BaseLoader) resolve_path method:\n\n```\ndef resolve_path(self, name, parent_path=None):\n    if parent_path and not parent_path.startswith(\"<\") and \\\n       not parent_path.startswith(\"/\") and \\\n       not name.startswith(\"/\"):\n        current_path = os.path.join(self.root, parent_path)\n        file_dir = os.path.dirname(os.path.abspath(current_path))\n        relative_path = os.path.abspath(os.path.join(file_dir, name))\n        if relative_path.startswith(self.root):\n            name = relative_path[len(self.root) + 1:]\n        #BUG: should add else here\n        else:\n            name = relative_path\n    return name\n```\n\nbdarnell:\nHmm, this code is strange - it doesn't really make sense to call abspath and put the result in a variable called \"relative_path\", but it's been there since the beginning.  It looks like there are other issues too - the startswith(\"/\") calls should probably be os.path.isabs() to work on windows.  If we make that change, your proposed fix no longer works, since layout.html's \"name\" will be absolute and it will no longer try to load logo.html as a relative path.\n\nIt doesn't feel right to use a template loader to access files outside of its root in the first place.  I think it would be better if your loader's root was the common ancestor of all the templates you need.  Or maybe we need a way to chain multiple loaders together.  I'll have to think more about this code and what it's trying to do.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/729", "title": "Google OpenID switches from GET to POST when the response is large", "body": "https://developers.google.com/google-apps/marketplace/testing#openid_post\n\nThis is a problem both because the docs only talk about overriding GET, and XSRF checking needs to be disabled.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/728", "title": "Gracefully handle ssl errors when client cert is required but not given", "body": "From the mailing list:\nI'm working on a web service that requires a client-side certificate.\nI have noticed when a client without a certificate connects, the\nserver-side crashes and the client-side hangs until the server is\nterminated.  On the server-side, I see this error:\n\n[E 111026 01:00:24 ioloop:296] Exception in I/O handler for fd 6\n    Traceback (most recent call last):\n      File \"/home/berto/.virtualenvs/tornado/lib/python2.7/site-packages/tornado/ioloop.py\",\nline 287, in start\n        self._handlers[fd](fd, events)\n      File \"/home/berto/.virtualenvs/tornado/lib/python2.7/site-packages/tornado/stack_context.py\",\nline 159, in wrapped\n        callback(_args, *_kwargs)\n      File \"/home/berto/.virtualenvs/tornado/lib/python2.7/site-packages/tornado/httpserver.py\",\nline 293, in _handle_events\n        **self.ssl_options)\n      File \"/usr/lib/python2.7/ssl.py\", line 344, in wrap_socket\n        ciphers=ciphers)\n      File \"/usr/lib/python2.7/ssl.py\", line 119, in __init__\n        ciphers)\n    SSLError: _ssl.c:327: No root certificates specified for\nverification of other-side certificates.\n\nShould tornado close the connection when the required certificate is\nnot provided?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/871358d4078889b374758ecc1a8174d4764651d2", "message": "Merge pull request #2251 from bdarnell/read_into\n\niostream: Add read_into"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f2020e5de80094ff46e74fffb7f9ca6f8485a81b", "message": "iostream: Add read_into method.\n\nTests come from Antoine Pitrou's #2193\n\nFixes #2176"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1215cd2631fff0a7d93ad6e4c8f3f82f8f7bb3fa", "message": "iostream: Use recv_into and friends in read_from_fd\n\nThis has the same memory-allocation behavior as before, but it moves\nthe buffer out of the recv() call to python code."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/67abb73db1fed569ae14b9acb3be2bbd949ccba1", "message": "Merge pull request #2249 from bdarnell/pipe-iostream\n\niostream: Use file objects instead of raw descriptors in PipeIOStream"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5ab1eba2c28af1e9e6365fca9cebe9b9e6837fce", "message": "netutil_test: Disable error tests on TwistedResolver\n\nThese tests are flaky with the new \"messages to stderr are errors\"\ncheck."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/374575517384829e9b1b015bb833c2346a91f479", "message": "test: Count writes to stderr as failures\n\nPython 3 logs warnings in destructors if objects responsible for file\ndescriptors are not explicitly closed. These warnings were previously\nbeing ignored by our test suite unless a human was looking at the log\noutput, but several recent PRs have introduced these issues. This\nchange ensures we catch them (and fixes the most recent one in\nprocess_test. The leak has always been there, but the previous commit\ncaused it to be logged)."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f5df1e4df7ca149342957f71bf4f98710f6cccdf", "message": "Merge pull request #2248 from bdarnell/work\n\nioloop,gen,asyncio: Improvements to IOLoop GC"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e964f989399b6a961b3e97e723f03fbe5fc620bc", "message": "ioloop,asyncio: Be more careful to restore old asyncio loop\n\nAny asyncio event loop that was created but neither closed nor set as\ncurrent for some thread will log a warning at the end of the test (in\na way that doesn't cause the test to fail). Fix a bug in\nmake_current() (in which multiple calls would clobber\nself.old_asyncio) and use it more consistently when \"current\" status\nchanges."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2d7fb199ca91d0e6fb521f347fa1807efe7e121e", "message": "ioloop: Make clear_current work if called first in a thread\n\nFixes #2240"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1294b0765ff3041342d45bc5a6539a5c8aa2370f", "message": "asyncio: AsyncIOMainLoop.close now closes the underlying loop"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/023a9ac87aa2de87585b71b8fee213346f4b590c", "message": "Merge pull request #2245 from ploxiln/shebang_exec\n\nmake executable git and shebang consistent on various source files"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e5a214825d0c8374e6dc335b96643582948128de", "message": "Merge pull request #2244 from bdarnell/lint-ci\n\nbuild: Enforce flake8-cleanliness in CI"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/19e54b091fd640d0b9a6b8bedcc02438017fd197", "message": "lint: Check doctest code too"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3d9ae0e3759f29d5c4c79e56cb727c8ad4d337bf", "message": "lint: Un-skip a few rules"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f7a7026c8b189d240b2452f0d9ef069df93dcc19", "message": "build: Enforce flake8-cleanliness in CI"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/61bfba41f283340a223f1e31d3691cee12916065", "message": "Merge pull request #2237 from ploxiln/flake8_trivial\n\ntrivial flake8/pyflakes style fixes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0a06d4a4099017e8a2a5407f0c3c2e97dbfa235c", "message": "Merge branch 'branch4.5'"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8e9e75502ff910629663c4cdd7779d43ea2dd150", "message": "Correct version and date on 4.5.3 release notes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1cd0e9dde37018558d5ef7aab75df66eb841d9ec", "message": "Merge pull request #2242 from bdarnell/release-4.5.3\n\nRelease 4.5.3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/09c63c55e05674a51f2cce86d5fda090843afb3a", "message": "Release notes for 4.5.3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7be09af39047c8e528946e3dea10f1309be78953", "message": "Get tests passing on latest version of pypy3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/716ab7d509a44bb00c5cbfec37ad3d16cdcd2618", "message": "Update travis-ci python versions to match master.\n\n2.7.8 is no longer available and \"pypy3\" is old and has\nother issues."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b525e423c3d143f3e67dba26fea2f1103b9bb6d4", "message": "test: More robust ipv6 detection\n\nThere are many ways ipv6 can be disabled or broken (and it just\nstopped working on travis-ci), so instead of checking flags like\nsocket.has_ipv6, attempt to actually bind to an ipv6 address.\n\nCloses #2185"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/84bb2e285e15415bb86cbdf2326b19f0debb80fd", "message": "testing: Connect to 127.0.0.1 instead of localhost\n\nThe servers used in tests are only listening for ipv4, not ipv6\n(to avoid spurious firewall prompts on macos). In what is apparently\na recent macos change, connecting to `localhost` when the ipv6 port\nis unbound now incurs a 200ms delay, slowing a full test run down\nby a factor of 20."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/63e869f4e4ba3fdfd6e6bc3715349519215c73f7", "message": "options: Report redefinition errors when underscores are used\n\nFixes #2020"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ab13d199f820ca788f277b8b6175af53b866b982", "message": "Merge pull request #2238 from bdarnell/misc\n\nasyncio,options,httpclient: Various small updates"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/98e0e76b115a7e18fd3b49f9032fd5847f6a63f3", "message": "Merge pull request #2135 from FlorianLudwig/master\n\nupdate google oauth URLs"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/90bc79fd88a1a8311b062a1dc341cf0305e7abaa", "message": "gen_test: Mark a timing-sensitive test as skipped on travis"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/207ff24d273195043cc8d8e874da890160619b90", "message": "asyncio: Don't raise \"IOLoop is closing\" in add_callback\n\nThis mirrors a previous change to PollIOLoop. Fix a test that had\nrotted and become meaningless.\n\nFixes #2191"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f2f2d6c2cbf15804bf51e992e4701cdcc4daa5a8", "message": "options: Rewrite docs\n\nClarify the overall philosophy of the module and divide up docs\nbetween define() and the parse_* functions.\n\nAdds a note about doubled log messages.\n\nFixes #1866"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5560b7a7ee62c0ec93baed8629c5da08b93e6715", "message": "asyncio: Add an event loop policy to allow creation on any thread\n\nFixes #2183"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/dbcfcdc5a163b1a32fd639d450e3aa14213dae2a", "message": "httpclient: Add proxy options to CLI\n\nFor testing #2145"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4c8cace2a2a85ee35722e719cfe46c232f9d7445", "message": "Merge pull request #2235 from ploxiln/exc_info_var\n\nfix iostream exc_info using missing Exception var"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f0a726ca3883dc1d7372d8fea784ad0816b3e56a", "message": "Merge pull request #2236 from ploxiln/fix_chunked_exception\n\nfix HTTPInputError reference for improperly terminated chunked request"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6fb82ae77a0a41a2c1349e4fa0e9c5b5c0f08b41", "message": "Merge pull request #2225 from ploxiln/fix_chunked_requests\n\nhttp: read final crlf of chunked requests"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c60c7f0ec4593602225a877a56b1defc6002addb", "message": "Merge pull request #2228 from bdarnell/5.0a1\n\nsetup: Set version number to 5.0a1"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b2468aec07d789f866c1fde6e74f39fb326ec84e", "message": "setup: Set version number to 5.0a1"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/be5d8114064293d50ffefed8d0bc88e0fdc96c9a", "message": "setup.py: Add python_requires"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/bc6f066c2cb8a09586033e0ba24cef04b31d0433", "message": "netutil: Update docs for OverrideResolver and release notes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/da3039b64f0174654f6a9d4fa4fccfe8d916198d", "message": "Merge pull request #2227 from mivade/options-docs\n\nDocument that options can be booleans"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c4bad500c666ce9ad11bca5a58d9ac8d7f91adef", "message": "Merge pull request #2224 from bdarnell/default-resolver\n\nnetutil: Use a threaded resolver by default"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/cfe8e9ea0e6ee1d3dde52d1795bf6ead39afb3b5", "message": "asyncio: Delegate executor methods to asyncio loop\n\nAvoid creating a second default thread pool to be managed."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1d113d861e09c6f2996039cb8b21253ba4bad2eb", "message": "netutil: Use a threaded resolver by default\n\nUses IOLoop.run_in_executor.\nconcurrent.futures is now required on Python 2."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0b235351b32cb11760cc2ce80d4c3c529d572dcc", "message": "Merge pull request #2220 from bdarnell/fix-multiprocess\n\ntcpserver: Fix multiprocess modes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/bf1b21ab4289d45c1292c6d73cafe4b5a1320b2b", "message": "tcpserver: Fix multiprocess modes\n\nTwo recent changes broke Tornado's multiprocess modes by initializing\nthe event loop before the fork in typical patterns.\n- The removal of `io_loop` arguments moved a call to\n  IOLoop.current() earlier in TCPServer's constructor.\n- The change to `asyncio.Future` initialized the asyncio event loop at\n  import time.\n\nMove the call in TCPServer earlier (and audit the rest of that change\nto make sure this didn't happen anywhere else) and replace\n`gen.moment` and `gen._null_future` with dummy objects that do not\ninvolve the asyncio event loop."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/268aaf689595cef80c5cef762f28ee91720f508f", "message": "Merge pull request #2219 from bdarnell/release-notes\n\ndocs: Start release notes for 5.0."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/121f85f8839489e0b198592d349ecfd5582450c9", "message": "Merge branch 'branch4.5' into release-notes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1e758ad5aac22dbacc3f51f9d18ac39a11ae3517", "message": "docs: Start release notes for 5.0.\n\nUpdate versionadded/versionchanged tags. Misc other doc updates"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/35e3a0f0a26b3084a8aa723b4965a08a15ee6bd5", "message": "Merge pull request #2218 from bdarnell/current-asyncio\n\nioloop: Setting AsyncIOLoop as current also sets asyncio event loop"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5de0928e6e3111e27fffb02c1de4c42e63b08555", "message": "ioloop: Setting AsyncIOLoop as current also sets asyncio event loop\n\nThis should eliminate the need for explicit asyncio manipulations\nfrom applications migrating to Tornado 5.0"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ccd4930b2fe17ecf13127c7fd31e51de64948d8e", "message": "Merge pull request #2213 from bdarnell/asyncio-task-runner\n\ngen: Use the asyncio task runner for native coroutines"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/91a2e3bd8ea91d04d6485b53adcc6516484ae41e", "message": "gen: Use the asyncio task runner for native coroutines"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8e2ade8e1e3d815b3cab1df95bd7863601cb933d", "message": "ioloop_test: Explicitly close an IOLoop\n\nThis avoids a warning logged at GC time."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b11bc45cc259b3e6a09365308b6fdb19eeac033b", "message": "Merge pull request #2212 from bdarnell/pypy3\n\ntravis.yml: Upgrade pypy3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/12a4627b3569d69c8da7b86736a68b34caa1e8a1", "message": "travis.yml: Upgrade pypy3\n\nThis may fix weird test failures as seen in #2193"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/64a8fe490df7b808ce95ab8127b18d8947c9c728", "message": "Merge pull request #2210 from hipro/patch-3\n\nUpdate structure.rst `.get(\"Content-Type\", \"\")`"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/36cd58cf2e8da3cbccef5f0b09b3918113a04fdd", "message": "Merge pull request #2208 from shangdahao/impove_doc\n\nMake the example code in the document \"tornado.ioloop \u2014 Main event loop\" can copy-paste-run directly."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0ab82637d0f7acffac605999c9cd1499cc7174e5", "message": "Merge pull request #2200 from pitrou/set_result_unless_cancelled\n\nIssue #2188: check whether a future was cancelled before calling set_result()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/59087aa647faa677f7837e0f8e3cb635c51d248d", "message": "Merge pull request #2195 from kkopachev/circular-refs\n\nBreak circular references when async request handler raises exception"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e8d39dbe28b74dbfc9675e37a5a6d44161185eac", "message": "Merge pull request #2192 from pitrou/asyncio_future_debug_info\n\nImprove debug support for asyncio futures"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/cccd5fad380f22ab45ecd2a6b3ab60638778efb3", "message": "routing_test: Remove test of log message"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4d4c1e0afa11d92c98c79c27a60e855b18f47aa7", "message": "Merge pull request #2073 from bdarnell/asyncio-future\n\nconcurrent: Use asyncio.Future when available"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ac13ee5f64cd3bceb1628dbcbbfc77445358038f", "message": "concurrent: Use asyncio.Future when available\n\nThis improves compatibility with asyncio, but required small tweaks to\nvarious tests due to changes in callback timing (asyncio future\ncallbacks are always scheduled for the next IOLoop iteration)\n\nconcurrent: Always schedule Future callbacks on the IOLoop\n\nMake the python 2/tornado-specific Future implementation more\nconsistent with asyncio's."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/42a1d23bf4b11f1575def9875219ee7bc78b2e7e", "message": "gen: Correctly accept concurrent futures in gen.with_timeout.\n\nThe existing implementation happened to work for tornado's Future\nimplementation but breaks with the move to asyncio Futures."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3fb845db0b2d2c78d53d8e0cdc2ed1b11a02f170", "message": "twisted: Be more tolerant of leaked current IOLoops in tests"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/941d6f30d738de1e979b94c3a45c9f6b628836f3", "message": "asyncio: Drop support for trollius\n\nThis package is no longer maintained and was never widely used."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b7d2a152f96c349648f1212c67d05f8aebd027fb", "message": "ioloop: Disallow non-asyncio IOLoops on python 3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/89b46a51720776a57cbdf89e8615a09cc020404a", "message": "concurrent: Introduce future_add_done_callback\n\nThis function guarantees synchronous execution of the callback for\nFutures that are already done, allowing the Future implementation to\nchange to one that does not provide this guarantee."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4ccfc4c3f7fa7fdf68e4bbd03a0a654c1330a02f", "message": "concurrent: Remove TracebackFuture alias"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/694a5a9c4c1b77b01b904608f45d69f70265f6d3", "message": "concurrent: Introduce future_set_exc_info function\n\nThis function is equivalent to future.set_exc_info for TracebackFuture\nbut also falls back to set_exception for other Futures."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a42b028ca26150b41ca537f08b06aff3163a682e", "message": "Merge pull request #2187 from bdarnell/ipv6-detection\n\ntest: More robust avoidance of broken ipv6"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/33abbbd48332f4950a686fbb389e802e1853a6e3", "message": "test: More robust ipv6 detection\n\nThere are many ways ipv6 can be disabled or broken (and it just\nstopped working on travis-ci), so instead of checking flags like\nsocket.has_ipv6, attempt to actually bind to an ipv6 address.\n\nCloses #2185"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fab9550e8723adddc47e3fbd50e37da49a8a2afc", "message": "testing: Connect to 127.0.0.1 instead of localhost\n\nThe servers used in tests are only listening for ipv4, not ipv6\n(to avoid spurious firewall prompts on macos). In what is apparently\na recent macos change, connecting to `localhost` when the ipv6 port\nis unbound now incurs a 200ms delay, slowing a full test run down\nby a factor of 20."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/def56207da3c08291963a3e8e8e5ba079a5b594e", "message": "Merge pull request #2180 from EtiennePelletier/master\n\nDon't let invalid bytes stop the Webspider demo"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5bc492495e77f2dfea8a2fb3b8c398d101879ca1", "message": "Merge pull request #2179 from pitrou/periodic_callback_ioloop_compat\n\nFetch IOLoop in PeriodicCallback.start(), not __init__()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5ee7f4573e7542bc2c2dc4f5b5d162ad58499383", "message": "Merge pull request #2178 from bdarnell/run-in-executor-fix\n\nFixes for IOLoop.run_in_executor"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a3b44cd701e0e82693363701bc0346b0125d2362", "message": "Fixes for IOLoop.run_in_executor\n\nCorrectly transform the concurrent Future into a Tornado Future\nand test that the result is usable with await."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0c2a2d5ac753e4846d6e7044c33a4ac6c43ad4f9", "message": "Merge pull request #2167 from pitrou/remove_ssl_hack\n\nRemove SSL hack"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7f2c91299921b2b9b3f3fe4d7c09a1fa602fd68c", "message": "Merge pull request #2177 from bdarnell/require-ssl\n\nRequire modern SSL features"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7484b61b6dbff6797738d1ef769020ae322a1012", "message": "Document ssl module requirements in index.rst"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/30cc9fdbd23329be41d9a5a7a3858350a363b9fb", "message": "Use SSLContext APIs in simple_httpclient\n\nSet OP_NO_COMPRESSION more consistently."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b6b26e3deea1a17a187fd80e57efcfe79d2aa9bd", "message": "Remove some vestigial workarounds for py26"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8cf55df456561077f363ce46d9760716daa1580a", "message": "Require modern ssl features (SSLContext, etc)\n\nNow that we've dropped python 3.3 (so create_default_context is\npresent on all supported versions), we can drop all ssl\nbackwards-compatibility and require the modern feature set."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/37081d792896a44d27c3423b73001937d972c806", "message": "Merge pull request #2157 from pjknkda/master\n\nwebsocket: fix missing websocket header causes an exception"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ad088464a81b8349904e637279d3a24247a88260", "message": "Merge pull request #2155 from dawncold/fix-iostream-exception-alias\n\nfix: iostream exception alias"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4bc35ee9bfdb1f35c90ed354312aba4c30db9d93", "message": "Merge pull request #2154 from juanpabloaj/removed-unused-import-logging\n\nremoved unused import logging"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1c2eb6727bf3eb1c465ad34e5b2f506817c98a20", "message": "Merge pull request #2149 from ploxiln/file_upload_yield\n\nfile_upload demo: yield write() cb in body_producer"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/34c43f4775971ab9b2b8ed43356f218add6387b2", "message": "Drop support for python 3.3, 3.5.[01] (#2116)\n\n* Drop support for python 3.3\r\n\r\nIn June 2017, Python 3.3 accounted for 0.2% of Tornado's downloads\r\nfrom pypi.\r\n\r\n* travis.yml: Use trusty, update pypy versions\r\n\r\nGet a py35-compatible version of pypy3. Plain \"pypy\" no longer seems\r\nto work in this environment, so specify a version.\r\n\r\nDrop testing of python 2.7.8, which no longer seems to be available.\r\n\r\n* gen,queues: Drop the \"legacy aiter protocol\"\r\n\r\nThis protocol changed in Python 3.5.2 (after being introduced in\r\n3.5.0). Async iteration now requires that version of Python (or\r\nnewer).\r\n\r\nCloses #2107\r\n\r\n* travis.yml: Only run doctests on one version of python 3\r\n\r\n* Get tests passing on latest version of pypy3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/810c341d2488c11813995dd2beadab7ba00ff44d", "message": "Merge pull request #2143 from bdarnell/cherrypick-cloexec\n\nCherrypick FD_CLOEXEC change for 4.5.2"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7cb24cfbe1bf5bf9aeebdbffe856ac5e67c4a7fb", "message": "Merge pull request #2132 from felliott/stop-logging-headers\n\nRemove headers from HTTPServerRequest repr"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f354f9b7b951e2170f9e9951e1743ae36a770166", "message": "Merge pull request #2130 from jaimegago/master\n\nAdd SSL/SSH handshake timing to response properties (curl client)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c4911bf2e7b8640a8730b9e5a539152869444f12", "message": "Release version 4.5.2"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c85dfd2e11ded1edfa937c535d5eb6483e715597", "message": "tcpclient,netutil: Set FD_CLOEXEC on all sockets created by Tornado\n\nPR #1984 was based on the mistaken belief that we were already\ndoing this (and in python 3.4+, it's true, thanks to PEP 446). This\nfixes a regression introduced in Tornado 4.5 in which autoreload would\nleak file descriptors and leave client connections hanging.\n\nFixes #2057"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d4094a0c2a7cddc654381c162ee7786d4bf8453b", "message": "Fix various typos in comments"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/59d80a6219d605a8a1da4c64deb8d4246d8fe174", "message": "Merge pull request #2109 from yiliangt5/fix/redirecthandler_passes_get_args\n\nfeat: RedirectHandler to pass GET query"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d0fd7977b303e4e8b02167881fdc9fb5e2b5ef88", "message": "Merge pull request #2106 from minrk/pycurl-debug-str\n\ncast pycurl debug messages to str"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b873c804f75a4d7d052f5023b036c68a0b7e4772", "message": "Merge pull request #2098 from sebbov/master\n\nDo not send/expect Content-Length on 1xx"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0e869e3f4735685cb2460aac499b509e6f5cc58a", "message": "Merge pull request #2075 from pitrou/accept_ebadf_race\n\nFix #2069: Fix race condition between accept() handler and TCPServer.stop()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/52bec504f714785a3c30e76f6925fd65d2298848", "message": "Merge pull request #2081 from noyainrain/fix-autoreload-module\n\nFix module autoreload for __main__ with relative imports"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a1abb710bdf996262ee8a40568a14370b39a0307", "message": "Merge pull request #2084 from bdarnell/docs\n\ntesting: Fix incorrect docs for gen_test"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0e5c9a36f429c480ec5a684b782a0eb699356f63", "message": "testing: Fix incorrect docs for gen_test\n\nPointed out in #1154"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3a25d7a9c36f27397e9c4f88351dde0f557a5e9b", "message": "Merge pull request #2083 from bdarnell/log-cleanup\n\nClean up test logging"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1be87fdddac548ef3f1fd6b93a40bd3b183a041b", "message": "test: Make log detection sensitive to info logs\n\nSilence one in httpserver_test"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/427d0e65df5c7f382d60ea0705cfa0b042ad13b5", "message": "testing: Remove deprecated LogTrapTestCase\n\nMove the tests that relied on this in concurrent_test.py to use\nlog.debug instead. (The redbot test has been broken and needs work\nanyway."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d68abdb4b68632f675f41ff817c370dbc8f1e21f", "message": "Merge pull request #2082 from bdarnell/timeouterror\n\nioloop,gen: Unify TimeoutErrors"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/edf1232c3502a3755c8e87e6fa63c7c63adf9b0f", "message": "ioloop,gen: Unify TimeoutErrors\n\nFixes #1929"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3163c606f06065b296df70bef5390afa548825d8", "message": "Merge pull request #2077 from vladimirbright/clarify_timeouts_in_queues\n\nAdded information about timeout arg in Queue get and put methods"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/28e631ae242dec1ae51877fed92d1b16e7a07dd4", "message": "Merge pull request #2074 from ploxiln/http1_connection_close\n\nhttp1connection: add \"Connection: close\" header if appropriate"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/cb8d42197f48e172cca849ec8b43392f38223446", "message": "Merge pull request #2058 from jehiah/http_request_line_bad_request_2058\n\nReturn HTTP 400 on bad request lines"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/62e47215ce12aee83f951758c96775a43e80475b", "message": "Merge pull request #2072 from bdarnell/asyncio-default\n\nioloop: Make asyncio the default when available"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/dc7b58d8fe115bff41258dc5c80e28f03082b480", "message": "ioloop: Make asyncio the default when available\n\nIn addition to changing the configurable default, add a special case\nin IOLoop.current() so that the current IOLoop will be backed by\nthe main asyncio event loop."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ebf18ec84242935f84046c8ed5140f9164f703ef", "message": "ioloop: Add tests for IOLoop configuration"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/09e255779dc1db78a0c76e720660f802d7dc9cab", "message": "Merge pull request #2063 from bdarnell/ioloop-instance\n\nioloop: Redefine instance() in terms of current()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3236f0704a2522a208d4d43afcecf2b8e6bfb538", "message": "Merge pull request #2064 from bdarnell/cloexec\n\ntcpclient,netutil: Set FD_CLOEXEC on all sockets created by Tornado"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/920302327f354083033ad8a8f1919477410a3f4f", "message": "tcpclient,netutil: Set FD_CLOEXEC on all sockets created by Tornado\n\nPR #1984 was based on the mistaken belief that we were already\ndoing this (and in python 3.4+, it's true, thanks to PEP 446). This\nfixes a regression introduced in Tornado 4.5 in which autoreload would\nleak file descriptors and leave client connections hanging.\n\nFixes #2057"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1fd67df25d0517c8ba54e9154815012f5fb575aa", "message": "ioloop: Redefine instance() in terms of current()\n\nThis aligns us more closely with asyncio, which only has a single\nget_event_loop() function. Most uses of instance() are simply a\nholdover from before current() was introduced and are not actually\nrelying on its slightly different behavior, so we redefine it (and the\nrelated methods install(), initialized(), and clear_instance()) in\nterms of current()."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2e622ae71df4b877a4e3ced76c3fc3e93d416322", "message": "Merge pull request #2062 from bdarnell/configure-pollioloop\n\nioloop: Make PollIOLoop separately configurable"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ce0c4aafe12ba26c4cac0400b12fe46ec5359e57", "message": "ioloop: Make PollIOLoop separately configurable\n\nThis makes it possible to construct a PollIOLoop even when the default\nIOLoop is configured to something else."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6453ce8f2e553d5a1f393975daa89bc5a21e70f6", "message": "util: Enable multiple configurable bases in one hierarchy\n\nThis allows a mid-level class like PollIOLoop to have its own\nconfigurability."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c2c0f383f491215eaf8129c8ebc6625c441761bf", "message": "Merge pull request #2052 from bdarnell/deprecated\n\nall: Remove deprecated io_loop arguments"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a73bfc9ddd7515489508f194759e71b92e3b7ff7", "message": "Merge pull request #2028 from pitrou/close_exc_info\n\nAvoid IOStream.close(exc_info=True)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/df0ee54c4718e021a38460801995b93099dc6af2", "message": "concurrent: Remove use of self.io_loop from run_on_executor"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/547e0f98d56bb8f22a89c009b6d2b3cf6b802284", "message": "all: Remove deprecated io_loop arguments\n\nIOLoop.current() is now used in all cases; it is no longer possible to\npass IOLoops around and use them directly. This occasionally requires\nawkward workarounds with IOLoop.run_sync, but mainly in test code\n(and the synchronous HTTPClient)."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/330729617e292ec68378ce7c3527704f1a6a0044", "message": "testing: Remove deprecated get_unused_port()\n\nThis function never did a good job and has long since been deprecated\nin favor of bind_unused_port."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/dce186641b516f76924de7dbfc5de035e25e310f", "message": "Merge pull request #2002 from nvllsvm/master\n\nFetch absolute URL in AsyncHTTPTestCase"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/01dd415e070403e79d3d4dd0ae6e12edbb04cb0a", "message": "Merge pull request #2051 from bdarnell/appveyor-speedup\n\nbuild: Speed up appveyor tests by not running the full matrix."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ae56c4d4e6691fb9dc2d7594f927bcca78555a60", "message": "build: Speed up appveyor tests by not running the full matrix.\n\nOnly run partial tests in two of the four environments."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/031641b573b0b1c8a159b2c1c3a4d844dd07352c", "message": "Merge pull request #2050 from bdarnell/appveyor-config\n\nbuild: Don't double-test on appveyor"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/69f2e69822422a2008ce8a49b65da044d397d71b", "message": "Merge pull request #2048 from bdarnell/option-redefinition\n\noptions: Report redefinition errors when underscores are used"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e9b3cee7f505ad53aef870e4ce1df642ed968e6a", "message": "Merge pull request #2045 from bdarnell/websocket-raise\n\nwebsocket: Don't swallow exceptions in _write_frame"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/74fff92cc2acd6bab64426104f4ad620c0634a5a", "message": "Merge pull request #2038 from schlamar/patch-2\n\ndon't check error code in test_set_close_exec"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c16c8415bbfb226ad294358cec60fa39465e7045", "message": "Merge pull request #2047 from bdarnell/assert-pid\n\nioloop: Document the incompatibility of IOLoop and fork()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/9291944071ec17f9496667920ba89bec72dfba06", "message": "Merge pull request #2046 from bdarnell/cookie-docs\n\nweb: Clarify cookie method docs"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/02d8f02f59bc60895fd30773699dd7382e7a3a79", "message": "build: Don't double-test on appveyor\n\nPointed out in #2028"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/9a18f6cd82d14eb278e55a3119f8d0fb25082fd9", "message": "Merge pull request #2024 from pjknkda/master\n\nwebsocket: optimize C websocket_mask function"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/230b16a0dfe5178a4b4154a0e95d276e38682246", "message": "Merge pull request #2022 from coldnight/master\n\nFix CurlAsyncHTTPClient cause memory leak with `force_instance=True`"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4b36b4e78241d88fcb77da406b574f317a4d9221", "message": "options: Report redefinition errors when underscores are used\n\nFixes #2020"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/73c48f328c247a40c444a9e0fdee65157231fff7", "message": "websocket: Don't swallow exceptions in _write_frame\n\nSwallowing the exception violated the method's interface (by returning\nNone instead of a Future), and differs from stream-closed behavior in\nother contexts in Tornado.\n\nFixes #1980"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d032618c577638867471eb608c5e2f182bf20e83", "message": "ioloop: Document the incompatibility of IOLoop and fork()\n\nFixes #2004"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f0d67b41b3b1223822186e861184b48ae1d3be20", "message": "web: Clarify cookie method docs\n\nBe explicit that get_cookie cannot see the cookies set within the\ncurrent request, avoiding confusion as seen in #1993"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/06be57c11f98b24ce0f6ee2d04f0cfe8bfdb3b4d", "message": "Merge pull request #1979 from SuminAndrew/responses-py2-py34\n\nweb: Don't raise on unknown HTTP response codes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6595297b2b733f22ee75ccdbc95f5638c5dc5484", "message": "Bump master version to 5.0.dev1"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/79b2683437ad49e26fc33d5975b6a661ee0b863c", "message": "Fix header for 4.5.1 release notes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e4f26acdabca32f6cc94a2681fb518dbce132688", "message": "Version 4.5.1"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ccf2e1eecc06ac222612ec91baf98c3436075c64", "message": "Merge pull request #2019 from bdarnell/colorama-fix\n\nlog: Fix color logging detection"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/57680da7b759010eaaa2f5325dbcc1be4a3bc848", "message": "log: Fix color logging detection\n\nThe previous logic would fail whenever curses is missing (which is\nalways true on windows, and is occasionally true on other platforms)\nand colorama is installed but not initialized in this process (this is\na common occurrence for users of jupyter and ipython on windows).\n\nFixes #2013\nFixes #2015"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0f31bd6b125d52b7266cfe3624e1af31af6c1b1e", "message": "Merge pull request #2018 from aetherson/master\n\nfix backwards compatibility of url_concat for args=None"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c9d2a3fa573987629ad576e991c2f3b65f4daab4", "message": "Set version to 4.5"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/517fb7e3454390b2f77e42ac9526492646678dc7", "message": "Merge pull request #2011 from bdarnell/websocket-render\n\nwebsocket: Fix use of render_string in websocket handlers"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5931d913b4ea250891a0b582f1f8b2901b868c79", "message": "websocket: Fix use of render_string in websocket handlers\n\nPR #1917 caused websocket connections to be \"finished\" early, which\nbroke the use of render_string by setting self.ui to None.\n\nFixes #2010"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ecd8968c5135b810cd607b5902dda2cd32122b39", "message": "Merge pull request #2009 from methane/travis\n\ntravis: fix using wrong Python version"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5570350d9390e62d64aae457808f29f4140b5ec4", "message": "travis: Skip \"nodeps\" build on pypy3\n\nvirtualenv (or pip, or setuptools) no longer supports py32, so this\nwon't work until travis has pypy3 3.5 available."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5dc6a1bfbf25e7a3ed4b7e481d2ea939ed14b80e", "message": "Bump to 4.5b2, update release notes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/df9fb49d11ae1c146e0560915cb16270bfca4727", "message": "Merge pull request #2006 from bdarnell/cleanups\n\nCleanups from various linters"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0a706fa666da91162466ae0d0d79d6dbfe923216", "message": "Merge pull request #2005 from bdarnell/auth-facebook-expires\n\nauth: Update, doc, and test the facebook session_expires field"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ed99997728f5f582f79e56e10c7307329c3fbc44", "message": "docs: Add uncovered function"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/037bb0ed255151770130d31efd7c1f166e6a30e6", "message": "*: Fix pyflakes warnings"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2e9bcce2c14a2aa6c533510e2e2f1f543aba9684", "message": "*: Run the new autopep8\n\nMainly adds a bunch of blank lines."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6642df96be5462808905ac7aeb1111dca8a6c8cd", "message": "maint: Update requirements"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2e25e817162d832f1ea292e81b781660a7276dac", "message": "auth: Update, doc, and test the facebook session_expires field\n\nThis was recently broken by the move from url-encoding to json.\n\nCloses #2001"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/608c6072bbe39bd0bb9d1ac7dd0455992f9fc2a1", "message": "Merge pull request #1999 from bdarnell/tcpclient-test\n\ntcpclient_test: Attempt to deflake on windows"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/104a302b750131d463f7e3b8e0f71dd334e5f904", "message": "websocket: Impose a size limit on incoming websocket messages (#1997)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/24ab348640b93d08f997595fbf715f680470042a", "message": "tcpclient_test: Attempt to deflake on windows\n\nIt appears that on windows the client connect call can sometimes\nsucceed before the server has processed the request, so introduce\nadditional synchronization."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4ff46deab7c2827015a1d9dbda2d7c6d9ba402bf", "message": "Merge branch 'branch4.4'"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/50f1890e3e972eb49caebfe5b4fb5ef5fbfdcbc9", "message": "Version bump and release notes for 4.4.3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/355315d272372530e7411906e16b172c26fe90ed", "message": "Merge pull request #1989 from bdarnell/appveyor36\n\nappveyor: Build for python 3.5 and 3.6"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e5cedc0a030e97bb314b4bd6685afe08ce093887", "message": "appveyor: Build for python 3.5 and 3.6"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/987291b495ced9d1e7fcc42fd10138ec67abd5a9", "message": "Release notes and doc updates for 4.5"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0ad63fcce409aac3ff398734319386c96d4392b0", "message": "Merge pull request #1917 from retinator/master\n\nAllow custom websocket upgrade response headers"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/50aeb5a1cad06f3dd291e7608cf6067a6ce20408", "message": "Merge pull request #1988 from bdarnell/subprocess-test-detail\n\nprocess_test: Report more details when test_sigchild_signal fails"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8a4fc8652c32dad0fbe627b08a3563404765a2a7", "message": "Check in test script for circular references\n\nFrom #1936"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b642b83ea99a80417153ea2ee801fdb91155905e", "message": "Merge pull request #1936 from homm/break-circrefs\n\nBreak circular reference to exc_info when exception is thrown"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/148b0c6bda61426d85244cc259d1d6537c05a384", "message": "Merge pull request #1987 from bdarnell/iostream-orphan-future\n\nFix IOStream.write() to never orphan Future"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fc6bfe47390de2b42ae71e4b0c7ec1c6e2593290", "message": "Merge pull request #1927 from minrk/copy-list-in-close\n\ncopy handler list in IOLoop.close(all_fds=True)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/71a8d194e7be8655c04d6083ac650da182879081", "message": "Merge branch 'master' into master"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/4361451694b8c001b9ebc8a9b6bbb3b997582b59", "message": "process_test: Report more details when test_sigchild_signal fails\n\nThis test occasionally fails on pypy on travis-ci."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d73210f0926cb11f92b267cf5f9f379c11ee6ec9", "message": "Merge pull request #1986 from bdarnell/yield-none-test\n\ngen: Add tests for `yield None`"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/df31744f765e8dbd63f219c8aa827bb5a61e20d8", "message": "Merge pull request #1985 from bdarnell/websocket-convert-yielded\n\nwebsocket: Avoid calling convert_yielded twice on the same object"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5d1a07581bf001e92f197cedfd69d78aacb623cd", "message": "Merge pull request #1864 from leynos/master\n\nAllow specificion of trusted downstream proxies for xheaders"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/528ebe97cfceafbb818c56da3f60cafce9eec56c", "message": "gen: Add tests for `yield None`\n\nSee #1716"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/95e9ef9fbf06eedbdc8b534df3aab3337a42b13b", "message": "Merge pull request #1716 from seirl/master\n\ngen: handle None in convert_yielded"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/62d1c62021243f3b4abeea0456d01527afde4338", "message": "Merge pull request #1817 from mivade/colorama\n\nEnable color logging on Windows via colorama"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e90ed039d2b1d5a519329d321cde9e0ba25c2931", "message": "Merge pull request #1972 from andreasrosdal/master\n\nAdd compression_level and mem_level to WebSocketHandler.get_compression_options()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b2a8a10c37366282e90e33252db198018c797ef9", "message": "Merge pull request #1984 from bdarnell/autoreload-no-close\n\nautoreload: Don't close the IOLoop on reload"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5a451d63fc492177ce86959ef33cd70394517c19", "message": "websocket: Avoid calling convert_yielded twice on the same object\n\nThis is not allowed for native coroutines, although for reasons I\ncan't put my finger on it only fails intermittently (in the one test\nwe have that uses this with native coroutines)."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fa809ed12348fea956444720ffc653516e4651e0", "message": "autoreload: Don't close the IOLoop on reload\n\nThis was a last-ditch effort to close file descriptors that were not\nmarked as CLOEXEC. However, it was never complete (it didn't touch\nfile descriptors that were not registered on the IOLoop), and it can't\nwork with asyncio (which does not allow closing the IOLoop without\nstopping it and unwinding the stack first). Since Tornado (and\nhopefully all major libraries using the IOLoop) is careful about\nsetting CLOEXEC when needed, just get rid of the close.\n\nFixes #1543"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8ea13db107f4d44fadd24578e693f2838012caa7", "message": "Merge pull request #1971 from SuminAndrew/remove-with_statement\n\nremove redundant with_statement feature"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8cd37e04bf469cc49ac96d4de2152f040d7bab63", "message": "Merge pull request #1963 from protonpopsicle/master\n\nHTTPServer pass no_keep_alive option to conn params"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8c94e8ea7cce21380fdbd94467a0e62680afe1eb", "message": "Merge pull request #1966 from JZQT/master\n\nMake `tornado.log.LogFormatter` compatible with `logging.config.dictConfig`."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d456f1b3db5323d6f0d30c00e9a2d67e7de2d319", "message": "Merge pull request #1909 from ajdavis/on-message-coroutine\n\nwebsocket: WebSocketHandler.on_message allows coroutines"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e15dbaa53fa21e31cbda9a6b5e53b795b9919496", "message": "Merge pull request #1957 from bdarnell/ws-ping\n\nwebsocket: Periodic pinging for failure detection"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b926bde7015086e428f3c4927e6a412066548b70", "message": "Merge pull request #1964 from dv321/websocket-client-callback\n\nwebsocket: fix client message callback error"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d32446dfe31cad7a51fa3f76864d081098f2a524", "message": "Merge pull request #1873 from pitrou/bytearray_buffers\n\nUse bytearray buffers in IOStream"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/72e8695089833483c1352073679b4cffe3d47232", "message": "web: Remove accidentally-set execute bit"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/95c4408ee0068618815557137eadf17886c50d9e", "message": "Merge commit 'pull/origin/1653'"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fb10f7c243529ad8ca7b9d74e064602fea80cebb", "message": "Merge pull request #1649 from xrmx/docwindows\n\ndocs: give more hints on why windows is unsupported"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/816ebe6cc8764ebe5b0a4c7527912362d3025907", "message": "websocket: Support periodic pings from client side"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a4215304d8ff0ba55a0aee7783d9e11f22cfe460", "message": "Merge commit 'pull/origin/1938' into ws-ping"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2a157f41480f29131983758a61fb988c33443399", "message": "websocket: Move periodic pings from handler to protocol\n\nAdd a basic test."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/624f5d4fb2ad7b37876b3bfe447f5755a3c25d71", "message": "Merge pull request #1956 from bdarnell/master\n\nMisc updates"}], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2253", "title": "Misc small fixes for 5.0", "body": "", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2252", "title": "ioloop: current() and friends delegate to asyncio", "body": "Instead of a redundant IOLoop._current thread-local, pass through\r\ndirectly to asyncio and maintain a one-to-one mapping of asyncio loops\r\nto IOLoops. This brings us a bit closer to the asyncio-only future.\r\n\r\nAlso remove IOLoop.initialized(). It is no longer possible to provide this method with reasonable\r\nsemantics.", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/130596", "body": "Thanks for the patch and detailed reproduction instructions.  I'm a little confused as to what's going on, though.  kqueue is supposed to be level triggered unless EV_CLEAR is used, so it should be returning all writable sockets as long as they are writable (http://mail-index.netbsd.org/tech-userlevel/2010/01/19/msg003167.html).  Also, if I'm reading your change correctly, a socket registered for writes will be immediately added to self._writers, and not removed unless later modified to not be registered for writes (or there is an error).  When I added some extra logging I saw that fd 4 was getting added to the event list by the loop at the end of _KQueue.poll, but that fd was never returned by kqueue.control.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/130596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/131898", "body": "Ah, I see the problem now.  I followed the epoll example too closely when writing _KQueue.  The kqueue filter constants are not flags to be bitwise-combined, they're separate values.  To listen for both reads and writes requires two separate calls to control().  I think the tornado http client and server never listen for reads and writes at the same time, so that's why this hasn't been noticed before.\n\nIt happens that KQ_FILTER_READ | KQ_FILTER_WRITE == KQ_FILTER_READ, so in the original implementation the unregister call in _KQueue.modify clobbers the existing registration and leaves the fd registered only for reads.  The modified version works, but by accident:  The modify() call is adding a new registration for writes rather than replacing the existing read registration with a read/write one.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/131898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/136775", "body": "Thanks.  I've committed a variation of this (changed to collapse multiple events on the same fd to one entry in the result from poll()).  I didn't add set_handler because I'm not sure whether it just removes needless bookkeeping from the caller or if it could mask real bugs (at the very least it's strange to replace add_handler with set_handler without doing the same for update_handler).  Feel free to open up another bug for that if you want.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/136775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/145844", "body": "Fixed in commit 1ae186a504224e9f6cf5375b56f8e26e4774e2a0\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/145844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/185391", "body": "Thanks, I've made it use the original request's protocol now.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/185391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/213870", "body": "Fixed,thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/213870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/215339", "body": "I've reverted the change that made tornado use per-module logger objects, so now everything should work out of the box with no explicit configuration.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/215339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/234949", "body": "I've added keyword arguments to RequestHandler.set_cookie.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/234949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/239861", "body": "Should reversing this url result in \"/login\" or \"/login/\"?  You can't really say without deeply inspecting the handler to see if it's using addslash or removeslash (or possibly not using either).  In general, I think that reverse_url gets too hard to understand if it tries to handle ambiguous cases like this.\n\nPersonally I would probably just split the rule and not use addslash:\n  url(\"/login/\", handler.LoginHandler, name=\"login\"),\n  url(\"/login\", RedirectHandler, dict(url=\"/login/\")),\n\nIn general, regexes can only be unambiguously reversed if they have no special characters outside of matching groups.  While I wouldn't use this strategy for a case as simple as this, you could do\n  url(\"/login(/?)\", handler.LoginHandler, name=\"login\"),\nand reverse it with either\n  reverse_url(\"login\", \"/\")\nor\n  reverse_url(\"login\", \"\")\nbut I prefer the split rule because it makes it clear which version is canonical.  If I had a better regex parser I would disallow reversing of URLSpecs that use special characters outside of parens.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/239861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/250495", "body": "Yeah, the use of different methods (RequestHandler.get vs RequestHandler.post) addresses most of the get-vs-post issues.  It's true that for POSTs Tornado masks the distinction between parameters in the url and those in the body, but I can't think of a scenario in which an attacker could modify the url without also being able to modify the body.  I'm going to close this bug, but please re-open it if there is some specific way in which this behavior could be abused.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/250495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253121", "body": "Closing since this is a duplicate of http://github.com/facebook/tornado/issues/issue/95\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253125", "body": "It's a cycle all right, but without some external reference the whole lot should be garbage collected at once.  Is any of these objects being referred to from outside the cycle?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258769", "body": "Does that work?  I think there's more work to be done to support non-ascii paths than just redefining the regex character classes.  For example, it is my understanding that browsers may send non-ascii paths as percent-encoded utf-8, and tornado does not currently make any attempt to decode them.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258809", "body": "Thanks, I've committed the fix. (locally; I'll push it to github once I've had a chance to do a little testing).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258821", "body": "I don't want this to be the default (since, among other things, the method is currently case-sensitive and I don't know what would happen if you tried to pass in something lowercase), but I've added an option to HTTPRequest that will cause it to allow any method.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/259213", "body": "I don't have test code for tornado itself.  I have unittests for an app that uses tornado that exercise some basic functionality, but when I talk about testing I mostly mean running my app with a new version of tornado and poking around in a browser.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/259213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/266166", "body": "Fixed, thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/266166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286135", "body": "I've removed the parameter, thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286142", "body": "Linux doesn't really have asynchronous IO for regular files, only for sockets and pipes.  A regular file is always \"ready\" for reading, so trying to use it with select() or an equivalent doesn't really make much sense (and epoll doesn't let you even try).  In this case you gain nothing by trying to read the file asynchronously - you'll just read in the file as quickly as possible and pump it into the IOStream's buffer.  What you really want to do (assuming this is going over the internet rather than a fast LAN) is to write the file only as quickly as the client can consume it, but that's tricky and tornado does not currently provide any support for this.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286145", "body": "As I understand it /id returns a discovery file, which among other things points you to the /ud url.  Technically clients should fetch the file at /id and use it to find the current endpoint, but since it changes rarely it's simpler to just hard-code /ud.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286877", "body": "You can't just replace /ud with /id and use it directly - using /id would mean adding an extra step to parse the document it returns.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/289307", "body": "What platform are you using? What type of socket is this?  What exactly is the exception?  In general, socket.send with a streaming protocol (e.g. TCP) supports write buffers that are larger than it can send at one time.  The only time it should complain about the buffer being too large is for message-oriented protocols like UDP, but in that case it doesn't make sense to split the data arbitrarily at 8KB boundaries.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/289307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308065", "body": "Questions like this should be posted to the mailing list instead of the issue tracker:  http://groups.google.com/group/python-tornado\n\nTornado doesn't have a standard test harness like django does, but here's an old thread discussing one way to do it: \n\nhttp://groups.google.com/group/python-tornado/browse_thread/thread/867cfb2665ea10a9/fc9a53000f4c104d?lnk=gst&q=testcase#fc9a53000f4c104d\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308069", "body": "This has actually been fixed for some time in head, it's just been too long since we did a proper release.  It'll be fixed in the next release (which is coming soon).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309481", "body": "I just tested this with my own app (on a mac using the kqueue ioloop, libcurl 7.19.7, and AsyncHTTPClient2) and I'm not seeing this delay.  I'd suggest using wireshark or tcpdump first to verify whether the delay is visible on the wire (and therefore whether the problem is client or server side).  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/310856", "body": "OK, I've been able to reproduce this with ubuntu (9.10), but I'm not sure what exactly is going on. FWIW, when I run the client and servers on different machines the problem occurs when the server is on the mac and the client is on ubuntu but not vice versa.\n\nFrom tcpdump, clients on ubuntu are sending the request as two packets, one with the headers and one with the body.  On the mac the entire request is sent as one packet.  The delay is because the client is waiting for a tcp ack from the server before sending the second packet.  It is the tcp ack from the server that is getting delayed by 30ms. I'm not sure why that would be so slow, or why it would be different after the first request on the connection. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/310856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/311070", "body": "So this appears to be an interaction between TCP delayed ACKs and Nagle's algorithm.  The server is waiting (40ms) to see if there is another packet coming before sending an ack, while the client is waiting for that ack to send the next packet.  The problem goes away if I call curl.setopt(pycurl.TCP_NODELAY, 1) from a prepare_curl_callback, but I don't know if that has other undesirable consequences.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/311070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/312016", "body": "Fixed now, thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/312016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/318957", "body": "Good idea, done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/318957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/319824", "body": "Good idea.  Changed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/319824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/321645", "body": "Recent versions of simplejson are faster, but older versions are not (in fact, the built-in json module is based on an older version of simplejson).  I'd prefer to minimize magical changes in behavior based on the presence of third-party modules.  Since tornado doesn't use json much internally, it's easy enough for apps that care about performance to use simplejson themselves.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/321645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/323394", "body": "This was fixed recently by adding a call to urllib.unquote in Application.**call**\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/323394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/325157", "body": "The old version of websockets was only supported in Chrome 5, and will stop working when Chrome 6 is released (the latest versions of Safari and Firefox also only support the new version of websockets).  There is an implementation of the new protocol here, which may get merged back in for tornado 1.1: http://github.com/eklitzke/tornado/blob/draft76/tornado/websocket.py  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/325157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/339965", "body": "Malformed requests with spaces in the URL no longer cause hanging connections (the connection gets closed by an exception handler in IOStream).  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/339965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341546", "body": "RequestHandler now has a get_arguments() method.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341548", "body": "RequestHandler now has a get_arguments() method.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341560", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341563", "body": "This exception is now caught.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341585", "body": "This should no longer throw an exception.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341601", "body": "This has been changed to not use functools.partial and so now works with older versions of pycurl.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341606", "body": "Tornado has never used a C extension for HTTPHeaders.  The only extensions it uses outside the standard library are pycurl, simplejson, and its own epoll.c (for python 2.5 on linux).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341611", "body": "Tornado now has limited support for win32 (via a different patch)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341615", "body": "This should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341616", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341624", "body": "This has been fixed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341627", "body": "This has been fixed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341634", "body": "This has been changed to use READ instead of WRITE, and so no longer causes high CPU usage on solaris.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341640", "body": "Tornado's outdated websocket support has been removed until we have an implementation of the new protocol (and hopefully the protocol stops changing).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341646", "body": "There is no reason to send a body with a GET request, and in fact it is a good way to break things in confusing ways.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341666", "body": "You'll probably have better luck with this question on the mailing list rather than the issue tracker.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341678", "body": "This has been fixed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341681", "body": "This should be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341748", "body": "Closing as this doesn't appear to still be an issue (if it ever was)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341849", "body": "I believe the issue is simply that the openid check_authentication call is supposed to be POST instead of GET.  Google just didn't distinguish between the two methods, but other providers do.  I've just fixed this, after yet another detour down the libcurl rathole.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/341849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/344459", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/344459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/365043", "body": "Actually, the \"and\" is subject to translation.  The entire phrase _(\"%(commas)s and %(last)s\") is translated as a unit to accomodate languages that require punctuation or different structures. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/365043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372233", "body": "Add a tornado.version variable, and use it anywhere we use the current\ntornado version to produce a Server: header.\n\nClosed by 803f33c153408076c1493300acc8010c656e7197.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372248", "body": "Since self._write_buffer is not empty, the IOLoop state should be set correctly at the end of _handle_events, so it should not be necessary to call _add_io_state here.  The handling of EWOULDBLOCK looks right to me (maybe it's been fixed since this bug was originally reported?), so I'm going to close this bug, but feel free to reopen the bug if it's still happening or you have additional information on reproducing it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372250", "body": "Set PeriodicCallback._running to True in start instead of __init__\n\nClosed by fcab3583c051093d6f59baee420cfeace91ba0aa.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372253", "body": "add_handlers is working as intended:  All handlers for a given host pattern should be added at the same time (otherwise, the precedence of overlapping host_patterns becomes unclear)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372254", "body": "add_handlers is working as intended:  All handlers for a given host pattern should be added at the same time (otherwise, the precedence of overlapping host_patterns becomes unclear)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/372254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373461", "body": "Your analysis is correct.  This was actually the reason the prepare_curl_callback was introduced (to avoid the need for monkey patching), although the need to set NOSIGNAL apparently never made it in to the documentation.  I'll add a check that sets NOSIGNAL when threading.active_count() > 1, which should handle the common case, with a comment that apps with short-lived threads may need to do so manually.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373471", "body": "Set pycurl.NOSIGNAL when multiple threads are detected.\n\nClosed by 318ec31c3d164361e99eac654a41eeb95f37f6be.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373498", "body": "This is intentional.  host_patterns are regexes, and it's possible to have a wildcard as the last entry in the list to match only those hosts that did not match a previous entry.  Each host_pattern should only be added once, with all of its handlers at the same time.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373508", "body": "Because of the way tornado templates are compiled to python code, error messages are often confusing.  In this case the problem is probably caused by an error on the previous line.  The logging output that preceded this error should include the generated python code.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373515", "body": "Document the limitations of multi-process mode.\n\nClosed by 86667742944aec95bb909876be486ca278254e5a.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373526", "body": "For platform/tool-specific debris like .DS_Store, it's probably better to set this in your global settings: http://jqr.github.com/2009/02/03/global-git-ignore.html\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373536", "body": "Hmm, so some reverse proxies step on the Host header?  That seems really weird to me.  Can you configure your proxy to not modify the Host header? (nginx does some silly things with the Host header by default, but doesn't appear to set X-Forwarded-Host)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373869", "body": "I'm not sure I understand the use case that lead the apache developers to think that ProxyPreserveHost should usually be turned off, but using reverse proxying for load balancing is one of the cases where turning on ProxyPreserveHost is appropriate.  The semantics of the X-Forwarded headers (chaining rather than overwriting) are also slightly more complicated to deal with.  In general, load balancing proxies should be configured to change the request only when it's unavoidable (as it is for remote IP and port/protocol).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373874", "body": "I don't think the problem here is that the cookie is non-ascii, it's that get_cookie operates on the request and set_cookie operates on the response.  That is, the cookies you set with set_cookie are not visible to get_cookie until the _next_ request.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373876", "body": "A bug that could cause 100% cpu usage was fixed in tornado 1.0; please reopen this bug if the problem is still happening.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373879", "body": "This was fixed in tornado 1.0\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/375835", "body": "That's intentional.  See http://github.com/facebook/tornado/issues/closed#issue/109\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/375835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/379422", "body": "Update class docstring for HTTPServer.\n\nClosed by aab1be8bc885494f43680b2fc492dd224f68816b.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/379422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/379518", "body": "I cannot reproduce the problem.  When I telnet to the server and manually issue a bad request (no HTTP/1.0 in the first line, or a very large value in the Content-Length header), the connection is closed by the server.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/379518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381269", "body": "But python can GC cyclical references, so this shouldn't cause an actual leak.  The objects will live a little longer since simple refcounting won't work, but I don't think weak references help with that.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381492", "body": "But neither HTTPResponse nor HTTPError has a **del** method.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381693", "body": "Ah, I must have misspelled when I grepped for `__del__` earlier.  I'll see if we can just get rid of the `__del__` method; I don't think it actually matters whether you close a cStringIO or not.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381926", "body": "OAuth10aMixin:\n\nDo you find that the retry loop for authorizing youtube tokens is still necessary?  I think there's a bug in that loop (auth_token_retry flag is only passed on the first iteration), which suggests that only one attempt is needed.  If you do still need to wait and retry, I'll check with my contacts on the Google Accounts team to see if this is expected.  \n\nEncoding the cookie as \"|\".join([request_token[\"key\"], request_token[\"secret\"]]) doesn't seem safe.  Maybe base64-encode the two parts?\n\nOauth2Mixin:\n\nCapitalize that first 'a' for consistency with the other OAuth variants.\n\nIs it really that simple?  That's refreshing if so, but it looks kind of incomplete.  Should any parts of FacebookGraphMixin be moved into this class, or is it all facebook-specific?\n\nGoogleMixin:  Should this use OAuth10aMixin too, or do some parts of google still use oauth 1.0?\n\nI'll look at YoutubeMixin and FacebookGraphMixin later.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384032", "body": "Remove **del** method from HTTPResponse.  Closing cStringIO objects isn't\nreally necessary, and the presence of a **del** method prevents python's\nGC from breaking cyclical references (which happen on errors as HTTPError\nand HTTPResponse refer to each other).\n\nClosed by 0aae8f9052b8b05059cfbe4f94972beb28b4f9b5.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384172", "body": "Doesn't access_token_retry_limit need to be passed in to the next iteration of _on_access_token at line 470? That's what made me think it might be dead code.  \n\nUsing secure cookies may be a good idea (albeit slightly backwards-incompatible), but to fix the problem I was referring to you really need to encode the data earlier, when assembling the string at line 429.  \n\nRe: GoogleMixin, I'm not sure about the current state of openid and oauth.  Maybe we should just leave it as-is for now.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384269", "body": "Getting down to the rest of the file, FacebookGraphMixin looks fine, but I'm not sure about YoutubeMixin.  Much of it is really about google accounts and not youtube-specific, so it seems like it should be at most a thin layer on top of a more general google mixin.  YoutubeMixin feels like it's creating a precedent that leads to a bunch of product-specific classes in this module, which is something I'd like to avoid.  Twitter/Facebook/Google are of course also product-specific in a sense, but they're much more well-established as sources of single-sign-on.  How would you feel about gettting the oauth 1.0a/2.0 classes and updates for twitter and facebook in tornado, but leaving youtube support out (at least until we can figure out what the future of GoogleMixin is)?  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384270", "body": "Closing this one since the new commits have been added to pull request #126 and discussion is taking place over there.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/385969", "body": "These libraries have differences beyond just speed.  In particular, cjson has significant bugs (at least last time I tested), so I wouldn't want to change behavior based on what packages happen to be installed.  Apps that want to use a json encoder other than the one in the standard library should just call the version they want.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/385969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/386117", "body": "I just diffed OAuthMixin and OAuth10aMixin, and there's really not that much difference between them.  Now I'm wondering whether it might be better to do all of this in one class (even if it means adding a handful of \"if self._OAUTH_VERSION == \"1.0a\"\" conditionals).  What do you think?  The only real differences look like the existence of the verifier and callback uri, and a different signature method.  \n\nFor google/youtube, I actually think that YoutubeMixin is being too clever by prefixing the request urls with http://gdata.youtube.com/feeds/api, and I'd rather have the client pass in a full url (if it's going to be relative, it should at least be relative to the root of the domain).  The one thing that makes me think that a separate YoutubeMixin class might be justified is the youtube-specific _oauth_get_user.  \n\nIt looks to me like the openid + oauth combination in GoogleMixin is currently broken (and may have been broken for a long time).  Ideally I think GoogleMixin should become openid + oauth10a (the google docs seem to indicate that openid+oauth is still recommended in some cases, but I'm not sure I understand the difference between the combination and oauth alone), but since combining the two is nontrivial and e.g. TwitterMixin seems to get by OK without openid, a GoogleOAuth10aMixin might be the way to go for now.  \n\nCan you test youtube without the access token retry?  I'd like to get rid of it if we can, and it seems unlikely that google accounts would have that kind of delay.\n\nI'm not sure \"largest social site\" is a meaningful category.  Youtube's traffic is huge, but I don't know how many users even do anything that requires login.  I think the gmail contacts API is probably the most widely used google API requiring authentication.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/386117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389011", "body": "Actually, since the commits got added to the other pull request (magically? just by being in the same branch? not sure how this works yet), let's keep the discussion over in #128.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389041", "body": "Thanks, this looks great.  I've just submitted it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389803", "body": "This is not something we plan to build for Tornado.  It's easy to use whatever third-party database library you want from a Tornado application (SQLAlchemy is a popular choice)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/390470", "body": "Remove superfluous lambdas in tornado.escape.\n\nClosed by 8e34c59edd9a72fdc4be9f16074aaa3f1c3ee9cf.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/390470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/391345", "body": "Fix typo in websocket.py\n\nClosed by 6d7e515ea490f1ab587fe7fa10bee001ac2f2dbd.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/391345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/394358", "body": "soplakanets, can you give me ownership of the tornado entry on pypi?  My username over there is ben.darnell.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/394358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/395654", "body": "Try capitalizing it: \"Ben.Darnell\".  It's not a new account, but I signed in with openid which might make it weird.  \"Ben.Darnell\" is what I see as my user name on my account details page.  If that doesn't work I'll just create a regular account with a password.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/395654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396318", "body": "Check self._running before rescheduling a PeriodicCallback, so stop() can\nbe called from inside the callback.\n\nClosed by 9163e3470da3bb82f310ad00925af8e92188a381.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396320", "body": "Fixed.  (put the wrong issue number in the commit message)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396333", "body": "That commit was actually for #134.  As for this issue, I don't agree.  stop() should refer the object to its pre-start() state, so that it can be started again (if I was designing from scratch I'd call start() from **init** and then stop() could destroy the object, but the current design implies that matched pairs of start and stop are allowed).  The cyclical reference is only a problem in rare cases (where there is a **del** method).  In cases where GC is an issue, the cycle should be broken by the code that calls stop(), since that is the level that knows that the PeriodicCallback will not be restarted.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/397734", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/397734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/398271", "body": "Tornado 1.1 includes Joe's new FacebookGraphMixin\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/398271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/404216", "body": "This traceback is not completely useless, but it is masking the root cause.  If you add a third argument to the getattr call (getattr(e, 'errno', None), and the same for the next line), then you should be able to see the KeyError that's really causing the problem.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/404216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/404673", "body": "It's unfortunate that random.seed(None) doesn't include the pid.  Are you running on a platform where os.urandom is unavailable, or are you just defending against the possibility?  Anyway, I've merged both changes.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/404673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/409661", "body": "Signal handlers letting exceptions escape isn't really something you can guard against, since the signal could happen anywhere.  In the specific (common) case of the exception happening in poll/kqueue/etc we could trap the exception and continue, but that doesn't help if the signal happens during other processing.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/409661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/409668", "body": "If it were possible to distinguish exceptions from a signal handler from an exception thrown by the poller implementation I might agree, but since that's not really possible we have to assume that an exception is most likely coming from the poller implementation.  There is no reason to assume that such an exception would not be repeated on each subsequent iteration of the loop, so I think the best option is to terminate the loop.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/409668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/413766", "body": "That's actually not malformed, it's HTTP 0.9.  I don't think it's a good idea to try and support this obsolete protocol in tornado.  It appears to be possible to configure the F5 to send an HTTP 1.0 or 1.1 request (just do 1.0; it's simpler), so I suggest you do that instead: http://support.f5.com/kb/en-us/solutions/public/2000/100/sol2167.html\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/413766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/418311", "body": "I committed a fix for this just after 1.1 was released: http://github.com/facebook/tornado/commit/98e4344fe66663d690003b39af3ac5808e499623\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/418311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/421127", "body": "Fix default_host redirect.\n\nClosed by a1d94db451e57301e2f97d7c33eae6a84592d078.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/421127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/425637", "body": "Update installation instructions in README.\n\nClosed by 4973e296ebd68bdaf5bd7fc51186b56c6c69bc91.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/425637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/433172", "body": "Close the IOStream when the remote connection is closed.\n\nThis was a regression introduced by http://github.com/facebook/tornado/commit/f6f7f83719a48083f3e5ed999e19c0ec67de9b9b\n\nClosed by 8300c7ff93227a8cb3ef93b8b2cf8931949beb1c.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/433172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/433173", "body": "In the select()-based IOLoop, always listen for reads so we can tell\nwhen the other side closed the connection.\n\nClosed by 1221865747ecfde69a0463b9a0d77b3c5b87f320.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/433173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/435790", "body": "Actually, it's probably best to make IOStream.read_bytes(0) do the right thing to avoid a proliferation of special cases.  Does the change I just committed do the trick?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/435790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/447020", "body": "I believe this was fixed with http://github.com/facebook/tornado/commit/75bfe842c5afe8945ee0635ac431b27de6202f6d\n\nAre you still seeing issues?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/447020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/455225", "body": "What kind of support did you add?  I've used non-blocking connections in my own code and didn't need to do anything since IOStream.write will buffer until the connection is complete.  The examples in the docs should probably be updated to use non-blocking connections, though.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/455225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/456831", "body": "In simple cases an explicit connect event is unnecessary, since IOStream.write/read do the right thing even if they're called while the connection is pending.  However, I think adding explicit support for async connection to IOStream would simplify client-side use of SSLIOStream, so it's a good addition.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/456831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458846", "body": "Libcurl is fast, but it has some quirks, which can severely impact performance (most recently:  the \"Expect: 100-continue\" header: http://github.com/facebook/tornado/commit/becb5f270336ad972b23f2e703de677f8ece30b1).  Overall I don't believe performance is a reason to abandon libcurl, but I'd still like to provide a non-curl-based http client in tornado 1.2.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/461487", "body": "Limit the amount of data sent to socket.send at a time (for windows).\n\nClosed by 5fffe5a8c738a43821c993fab2693437f229e6c1.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/461487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/462300", "body": "This is partially intended, since that method was designed for dates in the past.  However, it is certainly surprising that it loses information like this.  I've changed it so it only \"rounds down to now\" in relative mode and when the difference is small, and uses the full format for all other future dates.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/462300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/462301", "body": "Make Locale.format_date() behave sanely with dates in the future.\n\nClosed by 7c7b0117cffb6abb336407e392f0ecd3b3e3c1da.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/462301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/465010", "body": "Refactor async connect logic from SimpleAsyncHTTPClient to IOStream.\n\nClosed by f10c7176f11ee26de1aa063ee76af672ca5854d0.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/465010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/466995", "body": "Thanks, I've fixed the errno check and updated the docs.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/466995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/467111", "body": "Cool, thanks.  I've merged it in with slight changes (no need to wait for a callback from write(), it's safe to go ahead and start listening for the challenge immediately). \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/467111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/479419", "body": "Cool.  I've merged this commit.  I also removed some uses of os.path.sep, since urls always use '/' regardless of the server platform (I haven't tested StaticFileHandler on windows, but it might actually work now).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/479419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/479430", "body": "I don't think this should be necessary, since HTTPHeaders is case-insensitive.  I just checked one of my own apps and we've got X-Real-IP in the nginx config and tornado picks it up OK.  Did you see different behavior?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/479430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/489521", "body": "I don't know if calling _finish() will shut it down cleanly.  Closing the socket will definitely work, although there's probably a more graceful way to do it.  We don't currently expose any clean way to get at this information. AsyncHTTPClient.fetch() should probably return an object with a cancel() method.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/489521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/62094", "body": "The goal is to let you configure verbosity (and maybe other things, but mostly verbosity) on a per-module basis.  The tornado.httpclient module in particular is so noisy at the debug level that I end up doing all my application logging at info or higher so I never have to turn on --logging=debug.  This change seems like a step in that direction (although I haven't yet tried to use any non-global logging configuration yet myself).  The need to explicitly define a logger using redundant information is lame, but seems to be how the logging module was (over-)designed to be used.  Did you have something else in mind for module-level logging configuration?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/62094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68108", "body": "So there's another problem with doing things this way.  The root-level logging functions (logging.info(), etc) will call logging.basicConfig() for you if no logging configuration has been done.  If you're using module-level loggers this doesn't happen, so if you're using tornado without tornado.options (which sets up logging in parse_command_line) the only log output you'll get is \"no handlers could be found for logger \"tornado.web\"\".  The recommended fix (file:///opt/local/share/doc/python26-doc/library/logging.html#configuring-logging-for-a-library) is apparently to add a null handler to each logger, which is A) incredibly verbose since you're expected to write your own NullHandler class and B) not really what you want since it means that the library's log output will go to /dev/null in the absence of explicit logging configuration.  This is absurd.  It looks like the only way to get reasonable out-of-the-box behavior is to just use the root logger.  It looks like handler.addFilter can be used to get the kind of per-module verbosity settings that I wanted without multiple loggers, so I think I'll switch everything back to the root logger and try adding a --vmodule-like filter.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68184", "body": "The trouble is that since IOLoop effectively swallows and logs all exceptions, I feel it's important to ensure that tornado's logging is visible by default out of the box.  I don't see any good way to do that with per-module loggers without adding handlers at import time (which sqlalchemy does and it's annoying to work around).\n\nAre you attaching different handlers to the different loggers, or are you just using them to set different levels?  If it's the latter, I think a logging.Filter that inspects the record's module attribute is a good alternative (and will work automatically even for libraries that take the easy way out and just use the root logger).  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80306", "body": "I'm not sure it makes sense to talk about REST here, since websockets are inherently non-restful (e.g. the resources being transferred here are the messages, which are not url-addressable).  While I can see some use cases for maintaining a sort of state machine by passing a different callback to receive_message, it seems to me that this is an uncommon use case (and has the unusual failure mode of leaving the connection in a dormant state where incoming messages are silently ignored if you fail to call either receive_message or close).  A single callback for all messages is also more consistent with the javascript side of the API.  However, on rereading the code, it does look like the one-shot behavior was intentional (e.g. the callback is passed around in the functools.partial closures rather than being an attribute of the handler).  I'm inclined to revert receive_message to its previous one-shot behavior and add a new method to set a repeating callback (or maybe just refactor the whole interface so it automatically listens for messages and invokes self.on_message for each one).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/84027", "body": "jehiah:  True, but logging.error is used for plenty of non-fatal errors so I felt that sending a fatal error to logging.error might not get noticed.  Standard error is used for other fatal errors including syntax errors at import time and errors from options.parse_command_line (unless you take special steps to catch them), so I felt it was the most appropriate channel for this fatal error.\n\nakheron:  Excellent, thanks for the pointer.  I'll take a look at multi_socket_action.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/84027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/86277", "body": "FYI I have now reverted this change.  We might add a simpler interface in the future, but for now a separate call to receive_message is required for each message.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/86277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/86858", "body": "swax, the issue is that each time the callback is passed through the receive_message/_on_frame_type/_on_end_delimiter cycle it gets wrapped in another layer of async_callback.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/86858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/96227", "body": "AsyncHTTPClient needs to do its own try/except here because _finish is called in a loop.  If multiple requests finish at once and one of them throws an exception that is allowed to bubble up to IOLoop, the rest will be lost forever.  Maybe AsyncHTTPClient should just pass the callbacks through self.io_loop._run_callback?  \n\nAlso, I don't recommend raising exceptions from IOLoop.handle_callback_exception, as it may leave the IOLoop in a broken state (not a problem for unittests as long as you create a new IOLoop for each test, but that has its own headaches if you have a lot of tests).  I use something like this for my tests:\n\nclass TestIOLoop(IOLoop):\n  def **init**(self, testcase):\n    self.testcase = testcase\n\n  def handle_callback_exception(self):\n    self.testcase._failure = sys.exc_info()\n    self.testcase.stop()\n\nclass AsyncTestCase(TestCase):\n  def **init**(self):\n    self.ioloop = TestIOLoop(self)\n    self._failure = None\n\n  def wait(self):\n    self.ioloop.start()\n    if self._failure:\n      raise self._failure[0], self._failure[1], self._failure[2]\n\n  def stop(self):\n    self.ioloop.stop()\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/96227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/97259", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/97259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/106375", "body": "Unquoting everything but %2F wouldn't work either, because then \"%252F\" becomes ambiguous.  To be clear, the case where this sort of thing matters is for a url like \"http://foo.com/article/A%2FB/edit\" and pattern \"/article/([^/]+)/edit\", right?  I'm not entirely sure whether '/' and '%2F' in a url are supposed to be distinguishable according to the spec (I think it's supposed to be allowed to %-escape any character whether such escaping is required or not).  One possible solution if we do need to preserve this distinction is to move the unquoting a little later:  match the regex against the raw form of the path, and then unquote the groups extracted from it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/106375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/106408", "body": "OK, I've looked at the spec and it looks like you basically can't unescape the path and keep it as a string, you have to split it into path segments and then unescape the segments separately.  I'll undo this and instead unquote the captured group before passing it to get() or post().  It's a little magical to do the unquoting in between the regex and get/post(), but I think it's better than requiring the app developer to unquote each parameter individually (especially when query arguments are already unquoted by cgi.parse_qs).  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/106408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/135442", "body": "Both variables exist for the same reason sys.version and sys.version_info exist:  the string is to be displayed to users, while the tuple is for programmatic comparison.  In this case there happens to be a simple translation between them, but I don't necessarily want to commit to that.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/135442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/137477", "body": "It's possible, but the convention doesn't look that strong to me (e.g. sys.version_info, pycurl.version_info(), django.VERSION), and I generally prefer non-`__magic__` names.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/137477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/189757", "body": "Yep, I fixed it a couple of commits later.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/189757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/222730", "body": "Yes, this was the performance changed discussed in the \"tornado performance decay\" thread.  I want to get a couple more features into SimpleAsyncHTTPClient before shipping 1.2.  Probably mid-January.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/222730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/404888", "body": "I don't think we care much about that case (not enough to strip off a trailing ? or & if it exists), but we might as well make it a no-op if there are no args.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/404888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/467196", "body": "Whoops, I forgot to give proper credit in the commit message before I pushed this change.  Thanks to giampaolo (https://github.com/giampaolo) for the original implementation of this change (https://github.com/facebook/tornado/pull/295)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/467196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/473191", "body": "Good catch.  The race condition remains even if the wake() call is moved to the end, so I added a lock.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/473191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/569094", "body": "Not really.  I had originally envisioned a more complicated scheme in which you could pass in a dictionary and get back a parallel dictionary, but that got messy so I dropped it.  Tuples should definitely be allowed.  Unordered containers like sets are a little weird since there's no way to match up the input and output elements, but that's not enough of a reason to restrict the types of input.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/569094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1293808", "body": "XSRF protection shouldn't matter for operations without side effects.  I think the reason is that friendfeed's \"cursor\" could be quite large, potentially larger than allowed in a GET url.  This simple demo doesn't have that issue, but since there's no real advantage to using GET here it just followed the same pattern.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1293808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2195222", "body": "I think the next full release (3.0) is still a ways off, so I'll try to put together a 2.4.1 bugfix release in the next week or so with this and other bug fixes.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2195222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2201539", "body": "I've just released 2.4.1.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2201539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2425633", "body": "Yup.  Fixed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2425633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3140253", "body": "It'll still match - the \\n is always present, but some buggy servers omit the \\r.  Both of the lines you commented on will work with \"HTTP/1.0 404 \\r\\n\" (although the space is required, so if a buggy server just sends \"HTTP/1.0 404\\r\\n\" it won't work.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3140253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3429933", "body": "This code works.  You must register a callback url with twitter, but you can also specify a different url at call time, which takes precedence.  The registered url cannot be localhost, so you must use this pattern for local development.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3429933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3583325", "body": "Did you pull the whole branch or just patch this change?  The error message should have been fixed by a33d48d30594d24f792e62e2dccb5a9ee956b9d9.  If not, what is errno 10053 on your system?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3583325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3589812", "body": "#845 shouldn't make a big difference if you're just serving video - it's more likely to be an issue if you're receiving uploads.  Are you still seeing leaks as big as you were before (5MB or the size of the video), or is it smaller now?  (Please respond by reopening #828 instead of here)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3589812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3773538", "body": "gc.collect() is expensive; it's a bad idea to call it in normal circumstances.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3773538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5029880", "body": "Indeed it is, thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5029880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7142238", "body": "@thomasdohse good catch, looks like that case didn't come up in my testing.  I'll push a fix.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7142238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7623303", "body": "I used `next(iter(_connections))` instead of `_connections.pop()` because the connection should remain in the set until it is removed in on_close.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7623303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/8129197", "body": "I don't know if it matters any more. In python 2.5, socket.error() did not have an errno attribute, but now that we only support 2.6+, there may not be any cases left where e.errno doesn't work.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/8129197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9800586", "body": "Why would I remove it? It was added in Tornado 3.0; it was a popular feature request to be able to distinguish arguments that are present-but-empty from arguments that are completely missing.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9800586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9802388", "body": "This function is only called when content-type is `application/x-www-form-urlencoded`, so it should never see json input.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9802388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9803435", "body": "Whenever you send a request body, it is your responsibility to send a content-type so the server knows how to interpret it. `x-www-form-urlencoded` is a common default because of the historical use of HTML forms.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9803435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13237067", "body": "Yup, thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13237067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13620779", "body": "It's just simpler - we don't need to handle all the parts of the URL separately and join them back together in the right order.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13620779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/15941956", "body": "Args have been passed to open since the beginning (3f0740c8); this commit only makes it so that applications that do not override `open()` don't get errors (similar to the other HTTP verb methods). See #1242\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/15941956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/17525818", "body": "Please file an issue instead of leaving a comment on a commit, and be more specific about the problem you're seeing.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/17525818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/18779004", "body": "`stable` is the docs branch, so it's ok if docs fixes go there first. Just merge it from `stable` to `master` (and push this commit to `branch4.4` so `branch4.4` and `stable` stay in sync)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/18779004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1039664", "body": "By precedent elsewhere in the module, this should use the compute_etag method, and allow for that method to return None to suppress the generation of an Etag header.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1039664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1039675", "body": "Ah, so maybe we can't just use compute_etag since this needs to be a classmethod.  Maybe call it compute_etag_for_path to echo the existing RequestHandler method but emphasize that it's based on something other than \"self\".\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1039675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1369400", "body": "Why does this need to save the configuration?  It doesn't look like it touches the global config.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1369400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1838447", "body": "I think this needs to be a deepcopy because the values are mutable lists (otherwise if the query and body both had values with the same key things would be weird)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1838447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3992303", "body": "What is the Task(None) for?  Why is this line not simply \"yield Task(self.io_loop.add_callback)\" as seen in other gen tests?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3992303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/4310666", "body": "According to http://tools.ietf.org/html/draft-ietf-httpbis-p5-range-22#section-4.2, Content-Range is undefined on response codes other than 206 and 416.  Unless chrome needs the Content-Range header to be present on this 200 response, this set_header call should be moved into the if block as well.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/4310666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5941976", "body": "mock._Call doesn't look like a public interface.  It's also not ideal that we call getLogger three times even if the first one returns a value.  I don't mind that we do it since this is not performance-critical code but I don't like tests that depend on this kind of implementation detail.  I'd probably just use an 'or' expression instead of 'any' in the test.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5941976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5941981", "body": "There's no reason for outside code to call this method so it should probably start with an underscore.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5941981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5966769", "body": "What's up with this \"and False\"?  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5966769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5966813", "body": "`GoogleOAuth2Mixin.authorize_redirect` should differ from `OAuth2Mixin.authorize_redirect` only in google-specific ways.  We don't construct absolute urls in the base class or in the facebook mixin, so we shouldn't here either (I think this may mean that some doc examples are wrong).  `overwrites` should probably be named `extra_params` for consistency.  Are scope and response_type standard enough to include in the base class?  If so then I'd rather just get rid of this method so callers won't have to think about the inheritance relationship and what's different between the two.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5966813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5966819", "body": "`FacebookGraphMixin` uses `parse_qs_bytes` to read its access token.  Do you know anything about this difference?  Should we be looking at the Content-Type or something instead of blindly using json for google and parse_qs_bytes for facebook? (is FacebookGraphMixin even working?) \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/5966819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6114381", "body": "Yes, I think it does make sense to add scope and response_type (and more generally, anything from the oauth2 spec) to the base class.  \n\n(and in case you missed it I had another comment in the diff from before, about the use of parse_qs_bytes vs json)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6114381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6676708", "body": "This is a public method so we shouldn't casually change its signature.  It should continue to take a single `arguments` parameter, and then `_on_request_body` should merge `body_arguments` and `query_arguments` into `arguments`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6676708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6676756", "body": "Again, this is a public method (even more so than parse_body_arguments) and should not have its signature changed.  If we have `get_{query,body}_argument` methods we should also have the plural variants.  I'm tempted to argue that since the need to care about this distinction is so rare we shouldn't even have RequestHandler methods for these at all (applications that care can go to `request.{query,body}_arguments` directly), but I know that if we had started with distinguished argument methods I'd fight against the merged versions even harder.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6676756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/7412091", "body": "FYI the tornado tests use unittest2 on python2.6, so we have 2.7-level features like `assertIn` (which gives nicer error messages when it fails)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/7412091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/7476858", "body": "We shouldn't access the undocumented `_fmt` attribute here.  I think we should probably manage our own private attribute for the format string since we aren't using the base class's format code.  (for datefmt I could go either way - use a private attribute and format ourselves like we always have, or pass it to the base class and start using formatTime).\n\nAlso, it should be documented that our format string behaves slightly differently from the default Formatter implementation: the message is always appended at the end, and `%(message)s` should not be included in the format string.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/7476858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8486191", "body": "This should probably use http://www.tornadoweb.org/en/stable/util.html#tornado.util.import_object instead of bringing in the importlib backport.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8486191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8486475", "body": "All logging-related options defined here should start with `log_`, and we should be cautious about adding new ones because of the potential for namespace conflicts.  I'm also concerned about adding too many options here, although I don't have a principled reason to allow the options we have but not `--log_formatter`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8486475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8714661", "body": "`color` is not a standard `logging.Formatter` constructor argument - with this change you'd only be able to use subclasses of `tornado.log.LogFormatter` (or other formatters that implement a `color` argument), instead of any `logging.Formatter`.  If we support configuring formatters by specifying a class on the command line, that suggests that formatters should not take constructor arguments and we should in fact have separate classes for colored and non-colored output (or more generally, different formatters for file and stderr output).  This is getting complicated for command-line configuration.  I think that if you need to customize your log output you may just need to forego Tornado's automatic log configuration and just configure logging yourself (either in code or using the logging.config module).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8714661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9140242", "body": "There's no guarantee that there are exactly two results.  Not all systems are configured for ipv6, and on some systems 'localhost' resolves to more than two addresses (on a mac I get ::1, 127.0.0.1, and fe80::1%lo0).  Maybe just test that `all(s.getsockname()[1] == sockets[0].getsockname()[1] for s in sockets)`?  It will be a meaningless test on non-ipv6 systems but that's OK because the problem doesn't exist there.\n\nThis is also an annoying test to run on a mac since binding to 'localhost' on ipv6 for some reason results in a firewall prompt that doesn't happen when using ipv4.  I'm not sure if there's a good way around that.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9140242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9140244", "body": "Grammar nit: \"bound\", not \"binded\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9140244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10243153", "body": "If this needs to be exposed publicly, I'd rather just make the attribute public instead of having both a semi-private attribute and a public read-only property.  \n\nIt's odd that this is public but read_buffer_size is not.  Do we need a way to inspect the buffer size here in addition to being able to try the write and catch the exception?  Keep in mind that we already have another way to manage write buffer sizes via the write callback (although I agree that that is not always suitable and we need some way to detect a stream that is not making sufficient progress).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10243153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/11616911", "body": "Why getattr() here instead of `self.stream.error.__class__(message)`?  For that matter, why not simply `raise self.stream.error`?\n\nPlease run the tests before submitting a pull request - it looks like this has broken something according to travis-ci.  It would also be good to add a test for this behavior to ensure that the correct exception type is raised.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/11616911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12261521", "body": "These constants are platform-dependent.  If we're going to check errno here we must compare to the constants in the errno module (e.g. errno.ECONNREFUSED).  However, I'm not sure it's worth it; it's probably enough to just check that a socket.error (or even just an IOError) is raised.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12261521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12261545", "body": "How would the error attribute of an IOStream ever be an HTTPError?  Why are HTTPErrors treated differently here, being converted into a string and then re-raised as a new HTTPError object?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12261545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9179844", "body": "Is it ever useful for an application to reject websockets that don't include an origin?  I think it might be better to pull this check up to `_execute`, and simply not call check_origin if no origin is given.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9179844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9179848", "body": "Since users won't be calling check_origin directly I don't think a usage example belongs in the docstring.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9179848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9179929", "body": "We can't trust the Host header here - the attacker could simply be proxying the TCP traffic from the user's browser, in which case the browser will send a Host header corresponding to the attacker's site (and Tornado's HTTPServer does no validation of the Host header by default).  I'm not sure if we can do any origin validation without an explicit specification of what hostname we expect to be (at least not for HTTP.  HTTPS mostly prevents the class of attack where the Host header is not what we expect it to be).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9179929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9253975", "body": "Yes, it's risky on its face to compare two pieces of information from the request, but it kind of makes sense given the weird browser security model.  The problem is that in a cross-site websocket scenario (does this have a name yet, like XSS or [CX]SRF?), the browser will automatically send cookies, even though the origin site does not have permission to read them.  In a non-browser scenario, the client obviously knows the cookies it is sending (if any), and if the host and origin headers match, the initiating javascript could have read the cookies out of the DOM (modulo the httponly flag.  I'm not sure how that interacts with websockets).  In the problematic case, when the browser will use the user's cookies on behalf of a site that cannot read them, the host and origin headers will not match.  \n\nI _think_ this holds across all browsers that support websockets, so that comparing the host and origin headers from the same request is in fact useful for security, but I haven't done much research on the topic.  I think it's a good practice for sites to validate the host header against an explicit whitelist (even though Tornado's defaults implicitly discourage this), but that doesn't mean it's not worthwhile to compare host and origin to provide some baseline level of security without configuration.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9253975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9254033", "body": "Can the Origin header ever be a non-absolute URL?  Off the top of my head I'd say that if the Origin header is present but does not start with \"http://\" or \"https://\" we should just reject the request, since it does not contain a hostname in a form we can positively identify.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9254033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9254134", "body": "The check_origin method should receive the entire Origin header, not just the netloc portion.  Some applications may want to implement controls that are finer-grained than the host-port level.  Perhaps there should be a `match_origin(origin_url, expected_host_port)` (or `expected_host_port_list`?) function and the url parsing could happen in there.  \n\nI'm also concerned about discarding the scheme.  It's possible (but unnatural) to run both HTTP and HTTPS on the same port and switch based on whether the incoming data looks like an HTTP request or an SSL handshake.  I can't immediately see any problems with treating http://example.com:443 as equivalent to https://example.com:443, but if we treat http://example.com:80 as distinct from https://example.com:443 we should probably do the same when the two schemes are hosted on the same port.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9254134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242878", "body": "It's not obvious that this Host header has any effect at all - I initially expected it to be clobbered by the Host header set by SimpleAsyncHTTPClient (although after checking the code I see that it's not).  This test would pass even if the Host header were ignored; if you want to test with an explicit Host header you should devise a test where it changes the outcome.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242886", "body": "We should probably also have a test with a non-empty path in the Origin to show that paths (unlike subdomains) are ignored.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242907", "body": "Style nit: This if/pass/elif structure (and the comment placement) feels very weird to me.  I'd restructure it as a single conditional (if origin is not None and not self.check_origin(origin)).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242951", "body": "I don't think it's inconsistent to reject non-absolute urls.  Non-browser clients have perfectly valid reasons (i.e. laziness :)) not to send Origin headers, but there's never a reason to send a non-absolute Origin.  If we see an Origin header that's not absolute it may be a bug in our parsing of the url (e.g. there are some little-used url schemes that don't include \"//\"; we wouldn't want to automatically allow all of those urls)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10242951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12460363", "body": "There are two hostnames given in this HTTPRequest:  \"localhost\" in the url, and \"subtenant2.somewhereelse.com\" in the headers dict.  It's unclear what an HTTP client is supposed to do with that; I could easily imagine some clients using the header, some using the url, and some throwing an error.  As it happens, tornado's simple_httpclient currently uses the header.  If it used the url instead, this test would be redundant with the previous one and there would be no test of the handling of subdomains.  \n\nI think the cleanest way to ensure that this test actually covers subdomains is to construct a new SimpleAsyncHTTPClient using the hostname_mapping parameters, so you can point both subdomains of somewhereelse.com to 127.0.0.1, and you don't have to use a host header that doesn't match the url.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12460363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12460427", "body": "You mean \"we assume it did not come from a browser and therefore we do not need to enforce the same-origin policy\", right?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12460427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12460513", "body": "I'm still of the opinion that non-absolute Origins should be rejected, but if this stays in we need a test for it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12460513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12778014", "body": "This needs an \"else: return\" instead of falling through if the regex fails.  I'd also give the secret header a more cumbersome name so it doesn't conflict with anything else that may try to use a \"Reason\" header (maybe \"X-HTTP-Reason\"?)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12778014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14631682", "body": "Would it work to simply say `token = utf8(cookie)` in this case? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14631682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14631850", "body": "Both of these are failure tests, not success tests (at least with the behavior in this commit; I'm thinking that it would be better if we allowed short and non-hex tokens instead of just transforming uncaught TypeErrors and 500s into 400s).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14631850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14653028", "body": "This fails on Python 3 (see the travis logs) - it raises binascii.Error instead of TypeError.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14653028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980324", "body": "Is normalization necessary here since you're only expecting legal base64 characters?  Why ignore errors?  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980331", "body": "Umm, looks like this needs a test.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980365", "body": "It makes me nervous to parse a value that contains an embedded signature without validating that signature.  I see that google endorses ignoring that signature given that the token was downloaded over https, but I'd still prefer to verify the signature or at least loudly warn that we ignore it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980420", "body": "parse_response is a generic name for a fairly specific method.  Maybe something like parse_user_info?  \n\nThis doesn't look like it needs to be an instance method; would it make sense for this to be somewhere else?  Maybe a more generic function that could be called as jwt_decode(response['id_token'])?\n\nIs this format google-specific or might it be useful for other oauth2 clients too?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15209638", "body": "You shouldn't need to override fetch() here; I think the only thing you need to do is pass allow_nonstandard_methods=True as a keyword argument when calling self.fetch (if I'm understanding this override correctly).  Is PATCH still counted as a non-standard method?  It shouldn't be any more.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15209638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15209652", "body": "This comment can be removed now (and so can the import of URLSpec in curl_httpclient_test.py).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15209652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/17525396", "body": "Monkey-patching a private method seems like a bad idea; I think I'd rather have a new cookie parser written from scratch than to hack around the Cookie module's limitations like this.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/17525396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/17521544", "body": "Instead of counting characters, save the match object returned by re.match and get the expires value from that.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/17521544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/17521560", "body": "timedeltas can be negative, and any negative value would pass this check.  Small negative values may be possible due to NTP adjustments, so just check that the difference is `> datetime.timedelta(seconds=10)`.  (or use timedelta_to_seconds and math.abs).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/17521560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/21612449", "body": "self.triggers shouldn't be empty; if it is it means the test isn't really testing what it is supposed to. This probably means we need to increase the request_timeout (along with the allowed range in the assertion). The request_timeout should be long enough to allow the request to be issued and reach the trigger point.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/21612449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474323", "body": "Yes. Copy it from another file and make it `Copyright 2015 The Tornado Authors`. Also copy the `__future__` import just so everything is consistent.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474360", "body": "In 4.1 I deprecated `io_loop` arguments in favor of just relying on `IOLoop.current()` everywhere. (We can't always pass an `io_loop` around, e.g. into the coroutine decorator). We shouldn't add them in new interfaces.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474417", "body": "In this case `timeout`, for consistency with `add_timeout` and `with_timeout`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474454", "body": "We have intersphinx available so you can refer to the standard library by just putting `threading.Condition` in backquotes.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474724", "body": "Import `chain_future` from its real location in `tornado.concurrent` instead of the indirect import through `gen`.\n\nThis is subtle; it's unfortunate that the timeout parameter to `wait()` behaves differently from wrapping the call in a with_timeout. I don't see a way around it though since you don't want to waste a `notify(1)` on a waiter that's not there if you can help it (although this implementation is less bulletproof than a `threading.Condition` since there is no guarantee that the caller will yield the returned Future immediately).\n\nIf timeouts are used and the `Condition` is infrequently notified, the old `Futures` will build up. Is it worthwhile to GC them? (`threading.Condition` allows spurious wakeups; assuming we do the same a cheap way to GC would simply be to `notify(1)` after every N timeouts.\n\n`threading.Condition.wait` doesn't raise an exception when the timeout is reached (again because spurious wakeups are allowed). Prior to Python 3.2 you couldn't even tell whether the timeout had been reached; now it returns a bool. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474794", "body": "Is it important that we notify the waiters outside of the `while n and self.waiters` loop? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474805", "body": "Use `from tornado.test import unittest`; this gets you the right conditional import of unittest2 for python 2.6.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474984", "body": "This can also be gen.sleep.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24474984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24591964", "body": "Hmm. You're kind of responsible for that whether you want to be or not. With a separate loop like this, waiters woken by the nested notify will be woken up before the first notify has finished. It's not a big problem since you don't make any formal guarantees of FIFO ordering (and threaded Conditions are completely unordered), but it can be a surprise to have something that is _almost_ FIFO. I think it's acceptable with or without the separate loop, but just wanted to make sure that if there is a reason for choosing one over the other that it is documented.\n\nIn a threaded Condition, the paired lock prevents this situation; a second notify can't happen until the first has finished. Do we need to reconsider pairing a lock with the Condition? It would be a lot more cumbersome to use (and much slower), but it would help adhere to the semantics of standard condition variables. On the other hand, it's so rarely necessary to use a lock on top of the single-threaded event loop and I don't think it adds that much value.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24591964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24592557", "body": "The GC looks good but I think we should change this interface to not raise TimeoutError and instead return true/false as in threading.Condition.wait.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24592557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24730579", "body": "Hmm. I think I would part ways with `threading.Event` here and raise an exception on timeout. The reason is that condition variables by their nature and by tradition allow for spurious wakeups, but Events want to guarantee that if wait() returns normally the flag has been set (I suspect threading.Event would have used a timeout instead of a return value if they were not bound by backwards-compatibility with py26, where there was no indication that a timeout had occurred).\n\nIf timeout raises instead of returns, then the timeout behavior is equivalent to gen.with_timeout. In fact, the whole class can collapse into a simple wrapper around a Future. The only attribute of an Event is a Future, and we define is_set = self._future.done(); set = self._future.set_result(None); wait = `return self._future if deadline is None else gen.with_timeout(timeout, self._future)`\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24730579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24730583", "body": "self.io_loop is unused.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24730583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24730591", "body": "I generally prefer to keep the test file structure parallel to the source files, so combine condition_test and event_test into locks_test.py.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24730591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24872257", "body": "If anyone is waiting while the event is cleared, they'll never wake up even if the Event is subsequently set. (`threading.Event.clear` is a little fuzzy too - if a `set` is followed by a `clear` some waiters may erroneously return false). This method just seems like a bad idea to me so I'd just get rid of it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24872257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24872380", "body": "Files in `tornado/test/` should always import unittest with `from tornado.test.util import unittest`. It doesn't seem to have hurt here but the interaction between unittest and unittest2 has been fragile in the past.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24872380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559374", "body": "Do we want to make this guarantee? Semaphore doesn't make this guarantee, although we are relying on it here. I'd prefer to avoid unnecessary guarantees, although I can't really see us ever moving to a non-FIFO implementation here.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559864", "body": "I'm OK with keeping the test, actually - we can remove it when and if we decide to change the implementation, and in the meantime it will make sure we don't accidentally break things.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26448873", "body": "This is an unfortunate precedent: channels with a zero bound (so a put() can only proceed when there is a waiting get()) have proven surprisingly useful in Go. But given the precedent, we should keep 0 as unbounded and use a separate class or option for zero-bounded queues if we introduce them (and I'd need to think more about whether zero-bounded queues can make sense without the `select` statement).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26448873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26448921", "body": "As before, I don't really like accessors like these and the caveats they must have (in threaded systems; they are safer here). `qsize` does seem useful for monitoring, though, so maybe keep it and get rid of empty/full (which can be easily reconstructed from qsize and maxsize if you need them, but hopefully the extra effort will get people to reconsider whether they really need it).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26448921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26448938", "body": "put() looks like it could be defined in terms of put_nowait():\n\n```\ntry:\n    self.put_nowait(item)\nexcept QueueFull:\n    # insert 'elif self.full()' block here\nelse:\n    return gen._null_future\n```\n\nSimilarly for get(). Is there some subtle difference I'm missing?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26448938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26449028", "body": "This is racy: Two calls to get() may see a qsize() of 1 and both schedule their callbacks.\n\nI'm not sure I agree with the premise of test_producer_consumer. If producer() slept for a bit before putting its first task, the test would terminate without processing anything. I think to use join() correctly you must first wait for the producer to finish (i.e. `consumer(); yield producer(); yield queue.join()`), in which case you won't have a problem of unfinished_tasks briefly hitting zero.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26449028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26449039", "body": "Why is this a separate method? Will it become clear when the other subclasses are introduced?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26449039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26449089", "body": "It's not that degenerate. In fact, none of the join tests yield between q.get() and q.task_done(), so we probably need a test in which there is such a delay (to make sure that join() resolves after the last task_done() instead of when the queue becomes empty)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26449089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453731", "body": "Ah yes, I misread the partial as a lambda.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453786", "body": "We need to cancel the timeout when the operation resolves; see the pattern used in gen.with_timeout. (also applies to get(), and we should double-check all the timeouts in locks.py).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453796", "body": "I don't feel strongly about it; it's fine to leave them in.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453906", "body": "Yeah, a separate class probably makes the most sense. IIRC go has three different channel implementations and picks one based on the capacity (0, 1, or other)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26453906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980844", "body": "We should do something to make the rest of the parsed url available.  RFC 2616 section 5.2 says that the Host header should be ignored when an absolute url is given and the host from this url should be used instead.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14980844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27182086", "body": "I'm not sure this is actually a helpful unifying principle. It makes sense for Condition and Event, but it doesn't really make sense for Lock or Semaphore, where acquire and release always occur in matched pairs. I'd probably just give each class its own examples instead of trying to extract common \"patterns\".\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27182086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27182132", "body": "Nit: We currently use `io_loop` fairly consistently as an IOLoop variable in the docs.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27182132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27330979", "body": "For the second sentence, how about \"Once it is set, calls to `yield event.wait()` will not block unless the event has been cleared.\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27330979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941293", "body": "These last two lines are non-deterministic; I just saw this in a CI run:\n\n```\nFile \"locks.rst\", line 263, in semaphore\nFailed example:\n    sem = locks.Semaphore(2)\n    @gen.coroutine\n    def worker(worker_id):\n        yield sem.acquire()\n        try:\n            print(\"Worker %d is working\" % worker_id)\n            yield use_some_resource()\n        finally:\n            print(\"Worker %d is done\" % worker_id)\n            sem.release()\n    @gen.coroutine\n    def runner():\n        # Join all workers.\n        yield [worker(i) for i in range(3)]\n    io_loop.run_sync(runner)\nExpected:\n    Worker 0 is working\n    Worker 1 is working\n    Worker 0 is done\n    Worker 2 is working\n    Worker 1 is done\n    Worker 2 is done\nGot:\n    Worker 0 is working\n    Worker 1 is working\n    Worker 0 is done\n    Worker 2 is working\n    Worker 2 is done\n    Worker 1 is done\n1 items passed all tests:\n   2 tests in default\n**********************************************************************\n1 items had failures:\n   1 of   1 in semaphore\n3 tests in 2 items.\n2 passed and 1 failed.\n***Test Failed*** 1 failures.\n```\n\nLooks like a 100ms difference in sleep time isn't enough for reliable ordering on travis; we'll need to rig things up even more deterministically.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941002", "body": "These should probably use autoexception instead of autoclass (although I don't know offhand what difference it makes).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941019", "body": "PriorityQueue and LifoQueue need autoclass directives.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941091", "body": "How does this interact with the autoclass-generated docs? Should these examples go into the class docstring instead? (I generally prefer to keep things in the docstrings to avoid this question and to have one source of truth for a given document)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941179", "body": "It seems strange to have a doctest without accompanying prose that just verifies exception behavior. I'd probably just get rid of this test. (it also needs a yield in `sem.acquire()`)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27941179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25659435", "body": "That's a syntax error. I'd also reverse this comparison and raise any error that is not equivalent to EWOULDBLOCK; most errors are likely to be persistent.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25659435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25836567", "body": "Are EWOULDBLOCK and EAGAIN equivalent on windows? This should probably use the _ERRNO_WOULDBLOCK constant from iostream.py. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25836567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28595471", "body": "Does this not default to the beginning of the file if you omit `start-after`?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28595471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28648478", "body": "I think I'd just get rid of this and require that when a key dict is used an explicit version is specified (you already do this in set_secure_cookie; it looks like this constant is only used when calling create_signed_value directly)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28648478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28648492", "body": "All of the tests in SecureCookieV2Test that successfully read a value use key_version=0; we should probably have at least one test that writes with version 1.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28648492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28648494", "body": "It doesn't matter much but it might be more realistic to swap versions 0 and 1 in this test, so that version 0 is the one getting invalidated.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28648494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28653823", "body": "There was a recent thread on the tulip mailing list in which it was suggested that QueueEmpty and QueueFull become aliases for queue.Empty and queue.Full, which seems like a nice idea (I don't want users of tornado.queues to have to import `queue`, but other than that there's no good reason to use different exception types).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28653823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29304993", "body": "Lines like this belong in your personal git `core.excludes` file instead of being checked in.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29304993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305002", "body": "Please avoid unrelated whitespace changes in your commits.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305025", "body": "What exactly is the difference between this code and the 2.7 stdlib's version? Is it significant that this is based on 2.7 instead of 3.4?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305095", "body": "Is this valid sphinx markup? Ugh. It's far better to have a line longer than 80 columns than to split a line like this requiring manual repair.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305123", "body": "The change description includes a more complex test case that should be included here as well.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305240", "body": "Also, what's important is not which version of Python's stdlib this is most similar to, but what reference governs the actual behavior. Is it following RFC 2965? 6265? Some other standard that more closely matches actual browser behavior?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29305240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29397595", "body": "And what's the difference between this version and the stdlib's? \n\nRFC 2068 was obsoleted by RFC 2616 (and subsequently by 723X), and RFC 2109 was obsoleted by 2965 (and subsequently by 6265). As far as I can tell 6265 is the current operative standard that we should be approaching. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29397595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29431978", "body": "So the only change here is the try/except in the parse_cookies function? That's all I've been asking; what is copied and what is changed. This seems like a lot of duplication just to add that. (and you're still depending on private details of the Cookie module, like `Cookie.Morsel._reserved`)\n\nWhy does it matter how common invalid cookies are \"in the real world\" when you only have to deal with cookies on your own domain (i.e. ones you set)? \n\nI'm concerned about the security implications of a change like this. Could differences in lenient cookie parsing allow someone to send a cookie header that would be parsed differently by different components? It concerns me that by catching exceptions instead of changing the regular expression, it is difficult to say precisely how this change deviates from the spec and where parsing will resume after an error.\n\nBy contrast, http://wiki.apache.org/tomcat/Cookies specifies a \"lenient RFC6256 parser\" [sic]: names may contain any ascii char but semicolon or equals; values may contain any utf8 but semicolons. \n\nIt looks like even RFC 6265 is doomed; Chrome, IE, and Safari ignore double quotes and split on semicolons: http://neugierig.org/software/chromium/notes/2009/01/cookies.html\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29431978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29734429", "body": "I think this also needs a `prune docs/build` so it doesn't include build output if the docs have been built in this workspace before.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29734429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/30461885", "body": "This should be `except Exception:`\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/30461885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/30461905", "body": "It is unsafe to close the waker while it is still set as the signal wakeup_fd, since the FD could be reassigned in another thread and the signal handler would write garbage to it. The wakeup_fd must be cleared before closing the waker, unless we can separate the code paths so that we only recreate the waker on platforms where the wakeup_fd is not supported.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/30461905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/30461939", "body": "Actually, this is unsafe for similar reasons even on windows: another thread may be in the process of calling add_callback and therefore waker.wake(). The switch needs to be done while holding `_callback_lock`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/30461939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/32887537", "body": "Even though this was named as a semi-private attribute it was documented for application use so we shouldn't change it now. I think it's better to construct the url in `facebook_request` and `google_request` so we don't have to introduce another magic customizable class attribute.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/32887537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36581108", "body": "All options defined in this file should start with `log`. Grammatically I would use `rotate` instead of `rotating`: `log_rotate_mode`, `log_rotate_interval`, `log_rotate_when`. I would also use `size` and `time` instead of `sized` and `timed`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36581108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36581142", "body": "All our other tests complete in far less than 1 second; I don't think it's worthwhile to do this here. Since the real rotation code is in the `logging` module and we're just doing a little configuration, I think it's fine not to test the actual rollover. Just do the same sort of test as `test_log_file` to make sure that the handler is configured and logs can be written to disk.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36581142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36871217", "body": "We should raise an error if log_rotate_mode is not either size or time, instead of silently replacing it with a NullHandler.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36871217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/38077300", "body": "ValueError is fine; I don't think it's necessary to create new error types here.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/38077300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/38816433", "body": "`{}` needs to be `{0}` for python 2.6 compatibility. (or use `%`-formatting, which is what we normally do in Tornado).\n\nYou don't need to check the type here; the options framework already guarantees that it's a string. Remove the TypeError and leave the ValueError.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/38816433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/39320860", "body": "I don't think we should have this workaround. It's fine if this new feature is only available to people who have a recent enough version of Python. (especially since all versions of python older than 2.7.9 have a very outdated `ssl` module; any extra incentive to get people to upgrade is a good thing)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/39320860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/39321110", "body": "`get_unused_port()` is flaky, especially on travis-ci, because the port may become used by another process on the same machine before we can grab it. Instead, this test should use bind_unused_port() (adding a `reuse_port` argument to that function too), and then try to bind a second time with `bind_sockets(reuse_port=True)`. Also, the test should be skipped whenever `reuse_port` is not supported.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/39321110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/40624062", "body": "Why the name \"node\"? `PutHandler` seems like a better name.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/40624062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41094343", "body": "Odd, I wonder when that snuck in.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41094343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41797662", "body": "No, I'm not that committed to testing tracebacks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41797662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41802289", "body": "Why is this `iscoroutinefunction(f)` instead of `iscoroutine(result)`? We should prefer `isawaitable` to `iscoroutine*` whenever possible because it is compatible with cython on python 2.7 via [`backports_abc`](https://github.com/cython/backports_abc). \n\nI thought it would work to unconditionally wrap an `async def` function in `gen.coroutine`. Aren't coroutines a subtype of generators?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41802289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41928451", "body": "If `@gen.coroutine` doesn't already support native coroutines in the way I had assumed, there's no need to change it. It never really makes sense to use `@gen.coroutine` on an `async def` function except that it allows (unusual) code like this to proceed without conditionals. Normally, the rule I would like to encourage is to use `gen.convert_yielded` on any non-None result (which guarantees a `Future`); we can't use that in `@gen_test` since it applies to generator functions without any other decorator. So I think this is fine as-is - I don't see any straightforward change that would improve it and it doesn't need the full generality of `convert_yielded`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41928451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43122462", "body": "This will allow the autoreload to work but is not ideal - it will print a warning on every reload for apps that use asyncio, but this is perfectly expected and should be silent. The reload hook should use a wrapper function so that we silence all exceptions from IOLoop.close. \n\nWhen we have that, I'm not sure that it makes sense to keep this part of the change, but if we do it should use `app_log.error` instead of `gen_log.warning` because it's potentially an error in application code.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43122462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43122725", "body": "I agree we need better documentation of asyncio usage, but I don't think copying the hello world example with one line added (and no commentary) is the way to do it. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43122725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/46910750", "body": "`parse_command_line` doesn't define any options; the only way to define options is with the `define` function.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/46910750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/46910951", "body": "Is it for overriding? I think that if both command line and config file are used the command line should override what's in the file instead of the other way around. But then I've always thought it was weird to use both and apps would choose one or the other (or perhaps use both but only pass the location of a config file on the command line. Doing it in this order would make the file override the command line, but it would be strange to pass the same option in both places if you use this style)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/46910951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/48169392", "body": "\"while interacting\" sounds weird; maybe \"during request\"?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/48169392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/48218234", "body": "This should subclass `Resolver`, not `BlockingResolver`. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/48218234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/48218304", "body": "I don't think we need this any more. Just use timeout_min = 0.09, timeout=0.1, and timeout_max=1.0. Since the `TimeoutResolver` never finishes we don't have to be very precise about the timing.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/48218304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60674390", "body": "Why does this need to be a new method? Why not override `prepare()` and call `set_header()` there?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60674390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60674554", "body": "Oh, I see now how it's used. Still, it might be better to just use `self._headers` and not introduce the new interface.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60674554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60674890", "body": "Do all browsers respect a set-cookie header set in this way?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60674890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60849257", "body": "Depends on what you're trying to do: `set_default_headers()` is called a second time on errors to reset the headers for the error page. I would probably use `prepare()` for things like this so the cookie only goes out on successful requests (and then we'd probably also need to call `self.clear()` before all the `set_status()` calls in `WebSocketHandler.get` so that any headers set during `prepare()` don't go out with the errors).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60849257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60849292", "body": "Why did you make this change? We should still be using the superclass's implementation of `clear()` here; we don't want to have to keep these two methods in sync.. If you're trying to get rid of inappropriate headers you should clear them before the stream is detached so they'll still be there for non-websocket errors (which rely on the content-type getting set from `clear()`). Only clear the headers you need to get rid of (i.e. `self.clear_header('Content-Type')`); the `Server` and `Date` headers should stay.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60849292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64142262", "body": "When I said to use `prepare`, I meant to call the usual `set_header`/`add_header` methods from `prepare()`. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64142262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64142295", "body": "Clearing `Content-Type` (and only `Content-Type`) is fishy. Does it matter to browsers whether `Content-Type` is set on websocket handshake responses? I'd rather let a bogus `Content-Type` through here than treat it as a special case as long as it works. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64142295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64141235", "body": "Tests that rely on timing like this are flaky. Can you do something like `self.stream.read_until_close(self.stop)` instead? (does the server just close the connection, or does it write a 400 error response?)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64141235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64993198", "body": "Is this necessary? I don't think it should be; the tornado directory should already be on the path. Individual tests should avoid side effects like this, so if we can't test this without manipulating the path I'd prefer to just skip the test of a custom class.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64993198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64993236", "body": "Class names [should be capitalized](https://www.python.org/dev/peps/pep-0008/#class-names)\n\nSubclassing `str` is subtle; is there some reason why it needs to be a subclass of `str` instead of just a plain class with a `value` attribute? Or you could make `email` a factory function instead of a class: in most cases all you need to do is validate the value and return a string; it doesn't need to stay a distinct class. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64993236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/66724948", "body": "There used to be two tests related to 204: This one in which the Content-Length header was used, and HTTP204NoContentTestCase, which manipulated the connection manually to create responses without Content-Length. Now HTTP204NoContentTestCase is redundant; it should be reversed and become the test of responses _with_ the header. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/66724948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/67273901", "body": "There are three cases: no header (fine), `Content-Length: 0` (fine), and non-zero content-length (error). We no longer have a case demonstrating the acceptance of `Content-Length: 0`, and the error case is made awkward by the need to write directly to the connection from a RequestHandler (which I think will break things in http2). I'm suggesting that this test just cover the simple case (no header), and both cases in which the header is present move to HTTP204NoContentTestCase. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/67273901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/75421846", "body": "Add a blank line after this definition, and expand the comment. Something like:\nUnlike regular stack frames, idle coroutines are not anchored to a garbage-collection root. Object references point in the opposite direction from what you'd expect, with child frames holding references to the parent frames that they will awaken when completed, but there is not necessarily anything keeping the child frames alive (In most cases the innermost child frame will be registered as a callback on the IOLoop, but other patterns are possible especially when weak references are used). This map provides hard references in the other direction, so that as long as the Future returned by a coroutine is referenced (typically by the parent's Runner), this coroutine's Runner will be kept alive. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/75421846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77510036", "body": "This one means something different on python 2 and python 3. To make sure that the same thing is printed in both versions, it should be something like `print(\"Error: %s\" % response.error)`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77510036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77523504", "body": "I think this needs to be in `on_connect_done` so it is consistent with the rest of our `connect()` error handling.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77523504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77529642", "body": "Ah, right. Forgot how `@gen.coroutine` works there for a minute :)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77529642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77530142", "body": "But it does need to do some of the other stuff that's in `on_connect_done`'s `except` block: it at least needs to set `self.last_error`, and maybe reset the timeout (but probably not). \n\nIt might be better if `_create_stream` trapped any error raised by `socket.socket()` and wrapped it in a `Future`. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77530142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/79990721", "body": "This method could use a different name to distinguish it from the adjacent `handle_callback_exception`. Maybe `_handle_future_result`?\n\nOr I don't think it even needs the exception handling here. Just retrieve `future.result()` and discard it if no exception is raised (so call it `_discard_future_result`?). I think this will be called from a `_run_callback` somewhere so the exception will be logged when it escapes.\n\nFor maximum cleverness (and to avoid naming anything) I suppose you could do something like `lambda f: not f.result()` (on the assumption that `convert_yielded` will never decide to be clever with boolean values).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/79990721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/79991465", "body": "The lambda is unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/79991465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/79992277", "body": "A second is a long time (the whole test suite is only 15 seconds); I'd rather keep this to 100ms at most. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/79992277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/81447507", "body": "This should be False, unless I'm misreading something.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/81447507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85922539", "body": "Are there alternatives to `bytes.find()` that we could use instead? It looks like both `bytes` and `memoryview` support the `in` operator (although I haven't verified that it's efficient and has the semantics we want)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85922539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85923427", "body": "Does `socket.send` on windows support memoryview objects? If so, we may be able to avoid this splitting and just give `send()` a memoryview. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85923427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488754", "body": "My sphinx is rusty - can we use our own text for this link so it doesn't change if python changes the header of that section? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488201", "body": "Should this be a second bytearray which can be swapped in when we unfreeze? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488230", "body": "This method needs a docstring/comment.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488307", "body": "Comment here (and at the other occurrence of this pattern) that bytearray does this itself starting in python 3.4. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488426", "body": "That issue is closed and this comment can be updated: A cleaner solution would be to set SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER, which python does starting in version 3.4. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86488426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80051217", "body": "I was hoping we'd be able to do this without changes to HTTPServer: the router would implement HTTPServerConnectionDelegate, and it would be the only thing that knows about the (app, request) binding. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80051217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80052624", "body": "What's the use case for multiple routers per application? I was thinking there would be one router per application. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80052624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83550973", "body": "These changes look good and could go in immediately as a separate PR.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83550973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551174", "body": "Please copy the apache license header and the `__future__` imports from another file (same for routing_test.py, although I don't think we're as consistent with test files). \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551574", "body": "Different router implementations may want to add their handlers differently; I'd remove this method from the base interface. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551963", "body": "This looks like it _always_ ends up going through `_CallableAdapter`, which inhibits the ability to stream request bodies. This doesn't seem right; it should allow for the target to be a `HTTPMessageDelegate`. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551994", "body": "What is `target` going to be in typical usage? A `RequestHandler` subclass? An instance of a `RequestHandler` subclass?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83551994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552141", "body": "This `if` looks unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552166", "body": "This `if` (and the local variable) look unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552169", "body": "What could `matcher` be if not a `Matcher`?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552250", "body": "I'm not sure about the naming convention here. I know that in python it's not always clear-cut whether something should be named like a class or like a function (regardless of its implementation), but my gut feeling is that these are more class-like than function-like. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552264", "body": "This is a slightly strange interface to expose; I think I'd make an `any_matches` `Matcher` instead.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552284", "body": "Does it matter that this is a `URLSpec` (instead of a `path_matches` rule)?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552312", "body": "This should probably be a property of the request instead of being added here. We could set it in the request constructor. \n\nOr maybe things should be factored differently so that the router does this instead of the matcher. This is what I was suggesting earlier, although maybe it wasn't clear. This would mean we wouldn't have a generic router/rule/matcher abstraction, we'd just have a few specific Routers which could handle certain kinds of matches internally.\n\nThat is, instead of\n\n```\nRuleRouter([\n    path_matches('/a', AHandler),\n    path_matches('/b', BHandler),\n])\n```\n\nyou'd have something like\n\n```\nPathRouter([\n    ('/a', AHandler),\n    ('/b', BHandler),\n])\n```\n\nso the router was able to pre-process the request.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552654", "body": "This seems like the wrong place for this lazy-import. This should be possible even when doing path_matches by hand (or else it should be in `web` instead of `routing`. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552963", "body": "Use single backticks instead of double backticks so that sphinx will automatically create links (and point out that this is now a broken link). \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552993", "body": "This reverses the order of host patterns from the previous implementation. I think we need to keep the wildcard at the end but leave everything else in the original order. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/83552993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "legnaleurc": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2209", "title": "Support streaming API for AsyncHTTPClient ", "body": "Mostly like this:\r\nhttps://aiohttp.readthedocs.io/en/stable/client.html#streaming-response-content\r\n\r\nThis could probably solve some usage like #157.\r\n\r\nIt is hard to control the flow by `streaming_callback`, and it does not support async function as well.\r\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2209/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2096", "title": "Feature request: Implement `body_producer` for `curl_httpclient`", "body": "This line seems implies the body is always a text, which is not always true:\r\nhttps://github.com/tornadoweb/tornado/blob/v4.5.1/tornado/curl_httpclient.py#L424\r\n\r\nCan we unify the API, e.g. wrap `body_producer` to `pycurl.READFUNCTION`?", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lxkaka": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2207", "title": "http headers are  capitalized", "body": "Is there any probability do not capitalize the customized http header.\r\nfor example:\r\n{'authtoken': '1234'} will be capitalized through tornado.httputil.HttpHeaders {'Authtoken': '1234'}.\r\nThis can bring troubles for some servers. ", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MaxLFarrell": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2206", "title": "Web Socket Disconnecting With Small Files", "body": "Web socket disconnects on messages with < 2 mb of base64. Some smaller files will work tested up to 300 kb will work. Otherwise it will just disconnect the client.\r\n\r\n**Relevant code:**\r\n**Client (using [websockets](https://github.com/aaugustin/websockets/)):**\r\n```\r\nwith open(\"private/\" + file, \"rb\") as f:\r\n    responsef = base64.b64encode(f.read()).decode()\r\n    responsej = json.dumps({\"file\": responsef})\r\n    await websocket.send(\"22::\" + responsej + \"||\" + client)\r\n```\r\n**Server:**\r\n```\r\nmh, mb = message.split(\"::\")\r\nresponse, client = mb.split(\"||\")\r\nself.clientd[client + \".client\"].write_message(\"22::\" + response)\r\n```", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sc-syf": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2190", "title": "wsgi: HEAD raises \"Tried to write more data than Content-Length\"", "body": "refers to:[Running WSGI apps on Tornado servers](http://www.tornadoweb.org/en/stable/wsgi.html#running-wsgi-apps-on-tornado-servers), I deployed Django project to tornado server. \r\nBut It will raise HTTP 500 sometimes(can not control, and the 500 error is accidental)\uff0c and while use \r\n`curl --head 127.0.0.1:8888` \r\nit will raise Exception:\r\n```\r\nERROR:tornado.application:Uncaught exception HEAD / (127.0.0.1)\r\nHTTPServerRequest(protocol='http', host='127.0.0.1:8888', method='HEAD', uri='/', version='HTTP/1.1', remote_ip='127.0.0.1', headers={'Host': '127.0.0.1:8888', 'User-Agent': 'curl/7.54.0', 'Accept': '*/*'})\r\nTraceback (most recent call last):\r\n  File \"/Users/xxx/.py3/lib/python3.6/site-packages/tornado/web.py\", line 1446, in _execute\r\n    result = self.prepare()\r\n  File \"/Users/xxx/.py3/lib/python3.6/site-packages/tornado/web.py\", line 2706, in prepare\r\n    self.fallback(self.request)\r\n  File \"/Users/xxx/.py3/lib/python3.6/site-packages/tornado/wsgi.py\", line 304, in __call__\r\n    request.connection.write_headers(start_line, header_obj, chunk=body)\r\n  File \"/Users/xxx/.py3/lib/python3.6/site-packages/tornado/http1connection.py\", line 398, in write_headers\r\n    data += self._format_chunk(chunk)\r\n  File \"/Users/xxx/.py3/lib/python3.6/site-packages/tornado/http1connection.py\", line 410, in _format_chunk\r\n    \"Tried to write more data than Content-Length\")\r\ntornado.httputil.HTTPOutputError: Tried to write more data than Content-Length\r\nERROR:tornado.access:500 HEAD / (127.0.0.1) 5.99ms\r\n```\r\nDjango version: 1.11.7\r\nTornado version: 4.5.2\r\nPython: 3.6.0\r\n\r\np.s. while degrade the Django version to 1.9.*, everything is ok.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pitrou": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2189", "title": "asyncio Futures can hang if created from the wrong thread", "body": "This snippet: https://gist.github.com/pitrou/d0ed381729ef9045491263774311e9f0 worked before changeset ac13ee5f64cd3bceb1628dbcbbfc77445358038f, but fails afterwards. The reason is `asyncio` sets the `._loop` attribute on its Future objects when said future is created, depending on the current thread's loop. If you create an asyncio Future from a thread and use it from another one, it will never awaken the proper event loop. \r\n\r\nThis seems to be biting us hard and is also very hard to debug, unfortunately. @mrocklin\r\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2171", "title": "Make IOStream class configurable", "body": "In the light of the recent performance discussion, it could be useful to make the IOStream classes configurable. I'm thinking of something like this:\r\n```\r\nclass MyTCPClient(TCPClient):\r\n    IOStream = MyIOStream\r\n\r\nclass MyTCPServer(TCPServer):\r\n    IOStream = MyIOStream\r\n\r\nclass MyIOStream(IOStream):\r\n    SSLIOStream = MySSLIOStream\r\n```\r\n\r\n(note TCPServer can use `start_tls` instead of having its own reference to SSLIOStream)", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2068", "title": "Undeprecate maybe_future()?", "body": "`maybe_future` is currently marked deprecated as it only handlers Futures and not other kinds of objects. However, `convert_yielded` already has the required logic to handle other kinds of objects.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1912", "title": "fork_processes() can leave orphan processes", "body": "fork_processes() does not attempt to detect if the parent process receives a signal or a KeyboardInterrupt. As a result, if the parent process is killed with a signal or interrupted with Ctrl-C, it happily leaves around its children.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1912/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/630", "title": "IOStream writes to the root logger", "body": "IOStream is sprinkled with calls such as `logging.warning(...)`. Instead, each IOStream should be configurable to use a dedicated Logger object.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/81dd461da39e7dd9dcd060a958437795bafeb533", "message": "iostream: Use file objects instead of raw descriptors in PipeIOStream\n\nThis makes the implementation of PipeIOStream more compatible with\nsocket streams, and allows for more of the test suite to be used with\nit.\n\nExtracted from PR #2193"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8c513117fcae553aa938427159de029da4f56edf", "message": "Issue #2229: allow GCing of suspended coroutines\n\nA suspended coroutine should be GCed if the underlying loop is closed\nand no other outside reference exists to it.  However, a suspended coroutine\nwith a refcycle would be kept alive by the _futures_to_runners mapping.\nInstead use a private attribute on the future."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a91106195905a9cfb1c40cb2cdcc1c94bf46cde9", "message": "Don't keep any reference to memoryviews\n\nSee https://github.com/tornadoweb/tornado/pull/2008 for reasons\nwhy this might be necessary."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fdc577f15f329303d2d5b3fdb6eb811eb6f0caf2", "message": "Release memoryviews explicitly\n\nSee https://github.com/tornadoweb/tornado/pull/2008 for reasons why this\nmight be necessary."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/cb9e11ef0e3057a39702dc8c2356b0f4c2a67661", "message": "Issue #2188: check whether a future was cancelled before calling set_result()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1b464c48904576b3c26969c21265796bfb1a3a33", "message": "Issue #2147: avoid copies on non-small writes (#2169)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/18dd6827d6d6cce1df9909af9b79e873063277c0", "message": "Improve debug support for asyncio futures\n\nWhen in debug mode, asyncio returns the instantiation place of a Future\nand places it in its repr(), for example:\n\n  <Future finished result=None created at /home/antoine/distributed/distributed/worker.py:1223>\n\nThis is useful when asyncio logs cancelled futures or futures that were not\nwaited upon after erroring out.\n\nHowever, when using @gen.coroutine, we need to fix the recorded stack trace\notherwise the display is much less useful:\n\n  <Future finished result=None created at /home/antoine/tornado/tornado/gen.py:295>"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b1a73900196fe9aad3113650e2cd84c1d1b094d2", "message": "Fetch IOLoop in PeriodicCallback.start(), not __init__()\n\nSee motivation at https://github.com/dask/distributed/pull/1172"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fa3409179588536f2f743d16e537f6f9827fa92f", "message": "Don't keep any reference to memoryviews (#2173)\n\nSee https://github.com/tornadoweb/tornado/pull/2008 for reasons\r\nwhy this might be necessary."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3b374d59228abb840d7d882b39876b05acd0dabb", "message": "Remove SSL hack\n\nAll recent Python versions (including recent Python 2.7 updates)\nset SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER on OpenSSL sockets, so\nwe needn't freeze the write buffer anymore."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6b6d0e0673765f3c4bbc437d1599d7b7fd01f53e", "message": "Use getitem / setitem idiom on nonlocal list"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f7d8ad2dd68b1f0b623c2ab3dc4043635e78b184", "message": "Relax test failure when failing to reproduce the race condition"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/21680e20c539aa837f9a42b1e3d82026c0e1beff", "message": "Fix #2069: Fix race condition between accept() handler and TCPServer.stop()"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7c969663dd6c422e97d77780cf25cc9d3e66ea90", "message": "Avoid IOStream.close(exc_info=True)\n\nclose(exc_info=True) calls sys.exc_info() to get the \"current\" exception.\nUnfortunately, on Python 2 this is the last raised exception even if it\nwas caught and silenced (by contrast with Python 3, which has lexically\nnested exceptions).  This could set ``IOStream.error`` and therefore\n``TCPClient.connect``'s raised exception to the wrong error.\n\nFix by passing the explicit error instance instead."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7c40bedd82e804c3e25c051bf3b3bd2526909e49", "message": "Fix IOStream.write() to never orphan Future\n\nThe current behaviour is error-prone and makes it difficult to use the\nFuture-returning variant of IOStream.write().  This change makes sure\nthe returned Future is triggered as soon as the corresponding write\nis issued."}], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2199", "title": "Fix bind_sockets(\"localhost\") on Travis-CI container builds", "body": "We noticed that moving from a VM build to a container build would trigger errors in socket.bind():\r\nhttps://github.com/dask/distributed/pull/1563\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2175", "title": "Fix #2171: Make IOStream class configurable", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2085", "title": "Add IOLoop.is_running()", "body": "This provides a public API to replace the private `_running` flag specific to PollIOLoop.\r\nAlso mirrors equivalent APIs provided by asyncio and Twisted.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402868", "body": "Unless many non-Python threads are competing for the CPU, yes. We cannot guarantee this approach will always work, but it reasonably should.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402890", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86505662", "body": "By the way, do you know how tolerant OpenSSL is with that option?\nI still had \"bad write retry\" errors on 3.5 before fixing the freeze logic:\nhttps://travis-ci.org/tornadoweb/tornado/jobs/172421214#L1284\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86505662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86507179", "body": "I don't think so. When we unfreeze, not all the write buffer has necessarily been written (e.g. on Windows with the 128KB limit).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86507179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "anonymousch": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2181", "title": "websocket: Define interface between protocol and handler/conn", "body": "https://github.com/tornadoweb/tornado/blob/5ee7f4573e7542bc2c2dc4f5b5d162ad58499383/tornado/websocket.py#L497\r\n\r\nIn old version, this line use \"self.request.path\", but  request no \"path\" attribute\uff0cso  this line \"path\" maybe modified as \"url\". ", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adamrothman": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2164", "title": "Expose HTTP request handling time", "body": "Until recently, I had my Tornado applications using `HTTPServerRequest::request_time` to report request handling latencies. While conducting some tests with users in a bandwidth-constrained environment, I noticed that our request timings were downright awful.\r\n\r\nI found this surprising, given that nothing significant had changed in the application prior to the test. After some fruitless exploration, a coworker suggested that Tornado might be including the time taken by the client to complete transmission of the request in `request_time`. Using the server and client scripts below, I verified that this is in fact the case.\r\n\r\n```python\r\nimport asyncio\r\nimport logging\r\nfrom time import time\r\n\r\nfrom tornado.httpserver import HTTPServer\r\nfrom tornado.platform.asyncio import AsyncIOMainLoop\r\nfrom tornado.web import Application\r\nfrom tornado.web import RequestHandler\r\n\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\nclass TestHandler(RequestHandler):\r\n\r\n    def post(self):\r\n        logger.info('request received')\r\n\r\n    # Lifecycle\r\n\r\n    def prepare(self):\r\n        self.start_time = time()\r\n\r\n    def on_finish(self):\r\n        tornado_time = self.request.request_time()\r\n        logger.info(f'Tornado says request took {tornado_time} s')\r\n\r\n        my_time = time() - self.start_time\r\n        logger.info(f'I say it took {my_time} s')\r\n\r\n\r\nif __name__ == '__main__':\r\n    logging.basicConfig(level=logging.INFO)\r\n    AsyncIOMainLoop().install()\r\n\r\n    app = Application(\r\n        handlers=[('/', TestHandler)],\r\n        autoescape=None,\r\n        debug=True,\r\n    )\r\n\r\n    server = HTTPServer(app)\r\n    server.listen(8080)\r\n\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_forever()\r\n```\r\n\r\n```python\r\nfrom time import sleep\r\n\r\nimport requests\r\n\r\n\r\nclass SlowFile:\r\n\r\n    lines = [\r\n        b'Now is the time',\r\n        b'for all good men',\r\n        b'to come to the aid',\r\n        b'of their country',\r\n    ]\r\n\r\n    def __iter__(self):\r\n        for l in type(self).lines:\r\n            sleep(2)\r\n            yield l\r\n\r\n\r\ndef main():\r\n    f = SlowFile()\r\n    requests.post('http://localhost:8080', data=f)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nTornado reports over 8 seconds, when the actual handling latency is well under a second.\r\n\r\nI understand the reasons for exposing this cumulative number, but I also imagine that most server app developers are more interested in the number they can affect more directly \u2013 the actual handling latency. That is, the delta between when a request is fully received and when the response is fully sent.\r\n\r\nIt's easy enough to implement this myself in a `RequestHandler` subclass, but it seems useful enough that maybe Tornado should just expose it.\r\n\r\nWhat do you think @bdarnell?", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrocklin": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2147", "title": "Zero copy send", "body": "It would be convenient to reduce CPU use when sending large memoryviews of data.  I've brought this up a couple of times \r\n\r\n- https://github.com/tornadoweb/tornado/issues/1685\r\n- https://github.com/tornadoweb/tornado/pull/1691\r\n\r\nAnd it has been raised by @bryevdv for websockets\r\n\r\n- https://github.com/tornadoweb/tornado/issues/2102\r\n\r\nPreviously I've closed my issues saying that this wasn't yet a bottleneck for my applications (dask).  However now several users are using Dask on HPC systems with fast multi-GB interconnects and this has now become a bottleneck.  I'd like to revisit the issue.\r\n\r\nAre there any objections or known challenges to handling memoryviews all the way from user input to system call?  (other than developer time of course)  I'm able to spend some cycles on this problem, but I'd like to verify that it's feasible and check in with core devs to see if there is anything that I should be aware of before starting.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2110", "title": "IOStream._handle_write blocks when _write_buffer is large", "body": "When dumping a gigabyte or so into an IOStream I observe my event loop pausing for long periods of time (about a second).  I believe that this is due to long atomic calls to `_handle_write` that continue looping while the `_write_buffer` still has data.  This can cause some unpleasant blocking in the application.\r\n\r\nIs it feasible to have `_handle_write` yield from time to time during large writes?", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1595", "title": "Hanging concurrent.futures Future", "body": "Copying from [this stackoverflow question](http://stackoverflow.com/questions/33634956/why-would-a-timeout-avoid-a-tornado-hang)\n\nWaiting on a `concurrent.futures.Future` from a `ThreadPoolExecutor` in a Tornado coroutine sometimes hangs for me:\n\n``` python\nfrom concurrent.futures import ThreadPoolExecutor\ntp_executor = ThreadPoolExecutor(8)\n\ndef slowinc(x):\n    time.sleep(0.1)\n    return x + 1\n\nyield tp_executor.submit(slowinc, 1)  # sometimes hangs\n```\n\nWhen I add a timeout it might hang for the timeout period, but seems to actually return the correct result after that time.\n\n``` python\nyield gen.with_timeout(timedelta(seconds=5), \n                       executor.submit(...))  # hangs for 5sec, then works\n```\n\nThis only happens in the context of a larger test suite, in which many unpleasant things occur (child processes are terminated mid-stride).  This error is almost certainly related to this unpleasant context and not strictly the fault of Tornado.  However, I believe that I have isolated these unpleasant things as well as possible.\n\nSo I apologize for the subtle bug and lack of a simple repeatable example.  My hope is that the odd behavior of a failing timeout actually causing success is helpful in isolating my issue.\n### Solutions in Python 3\n\nI resolve this problem In Python 3 by using a timeout and a while loop:\n\n``` python\nwhile not future.done():\n    try:\n        yield gen.with_timeout(timedelta(seconds=1), future)\n    except gen.TimeoutError:\n        pass\n\nresult = future.result()\n```\n\nIn [this answer on stackoverflow](http://stackoverflow.com/a/33643631/616616) @bdarnell suggests using a `PeriodicCallback` in order to wake up a stuck IOLoop.\n\n> I don't have a complete solution but I think I can offer a simpler workaround: start up a background PeriodicCallback that does nothing in a short interval: PeriodicCallback(lambda: None, 500).start(). This will make sure the IOLoop wakes up periodically without intruding into all your yield executor.submit() calls.\n> \n> The symptom suggests that the problem lies in the \"waker\" behavior of add_callback: https://github.com/tornadoweb/tornado/blob/d9c5bc8fb6530a03ebbb6da667e26685b8eee0ea/tornado/ioloop.py#L929-L944\n> \n> This code was changed in Tornado 4.3 (https://github.com/tornadoweb/tornado/pull/1511/files). If you're on 4.3, see if the problem still exists in 4.2. Could anything in your \"unpleasant\" environment be causing thread.get_ident() to behave differently than tornado expects?\n> \n> There are reports of (rare) problems with the waker \"pipe\" on windows: https://github.com/tornadoweb/tornado/pull/1364\n### Python 2 Failures\n\nThe timeout solution above works for Python 3.4 under both Tornado 4.2 and 4.3 but neither the `timeout` solution nor the `PeriodicCallback` solution resolves this problem under Python 2.7 Tornado 4.2 or 4.3.\n\nI still intermittently hang when yielding on `concurrent.futures.Future` objects, but only when using Python 2.\n\nDoes anyone have thoughts on what might be causing this and where I should start looking?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84774189", "body": "This bit is unfortunate.  There are times when we _need_ the object to be a bytes object.  There might be ways to get the bytes object without doing the explicit conversion.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84774189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cpointner": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2145", "title": "Proxy Setting doesn't work for HTTPs", "body": "Currently the only option to have working proxy support is to use the CurlAsyncHTTPClient together with the proxy_host and proxy_port args. Unfortunately the way this is implemented is flawed which results in not working HTTPs Proxy support (using HTTP Connect). The curl library wants the option [HTTPPROXYTUNNEL](https://curl.haxx.se/libcurl/c/CURLOPT_HTTPPROXYTUNNEL.html) in that case.\r\n\r\nThe easiest way to fix this would be to simply remove [this line](https://github.com/tornadoweb/tornado/blob/master/tornado/curl_httpclient.py#L365) as curl will then use the environment variables http_proxy and https_proxy and will set the HTTPPROXYTUNNEL option if needed. As stated in #754 using the well known environment variables is the standard way to configure proxies and they should imho be honored by tornado as well.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rajasankar": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2140", "title": "Need more parameters for auth get_authenticated_user method", "body": "Google OAuth2 has changed the parameters to be passed to change the code to access_token. \r\n\r\nparams = { 'code':code,\r\n                               'client_id':self.settings['google_oauth']['key'],\r\n                                'client_secret':self.settings['google_oauth']['secret'],\r\n                                'redirect_uri':'http://localhost',\r\n                                'grant_type':'authorization_code',\r\n                                 }\r\n\r\nAs these params cant be passed in the current get_authenticated_user method, OAuth2 method fails to get access_token. \r\n\r\nI have used to requests to get the token and it works fine. \r\n\r\nExtra params option is coded in authorize_redirect , so it can be added in get_authenticated_user\r\n\r\nI havent tested for Facebook/Twitter, get_authenticated_user method for FacebookGraphMixin has extra fields and option to pass client_id and client_secret. \r\n\r\nSame can be added for get_authenticated_user in GoogleOAuth2Mixin", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tsantor": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2136", "title": "WebSocketProtocol13.periodic_ping exception", "body": "We are running a Tornado TCP server on a Windows server 2012 machine. This machine handles both an HTTP-based dashboard and 21 TCP Websocket connected clients. Occasionally in the logs we will see the following error. It seems to be at a very low level of the Websocket13 protocol. But from a networking standpoint what does it mean? Why would the write buffer not be greater than or equal to 0?\r\n\r\n    [ERROR] [2017-08-17 11:54:14 AM] [tornado.application] Exception in callback <bound method WebSocketProtocol13.periodic_ping of <tornado.websocket.WebSocketProtocol13 object at 0x01D7AD30>>\r\n\r\n    Traceback (most recent call last):\r\n\r\n    File \"C:\\Python27\\lib\\site-packages\\tornado\\ioloop.py\", line 1026, in _run\r\n\r\n        return self.callback()\r\n\r\n    File \"C:\\Python27\\lib\\site-packages\\tornado\\websocket.py\", line 1030, in periodic_ping\r\n\r\n        self.write_ping(b'')\r\n\r\n    File \"C:\\Python27\\lib\\site-packages\\tornado\\websocket.py\", line 790, in write_ping\r\n\r\n        self._write_frame(True, 0x9, data)\r\n\r\n    File \"C:\\Python27\\lib\\site-packages\\tornado\\websocket.py\", line 768, in _write_frame\r\n\r\n        return self.stream.write(frame)\r\n\r\n    File \"C:\\Python27\\lib\\site-packages\\tornado\\iostream.py\", line 406, in write\r\n\r\n        self._handle_write()\r\n\r\n    File \"C:\\Python27\\lib\\site-packages\\tornado\\iostream.py\", line 847, in _handle_write\r\n\r\n        assert self._write_buffer_size >= 0\r\n\r\n    AssertionError", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chenasraf": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2131", "title": "IOError: fd already registered", "body": "Not sure what's going on. Our code doesn't handle its own IO loop and relies on the implementations inside tornado's defaults - and I keep getting this error:\r\n\r\n```\r\n2017-08-10 12:10:11,581 http1connection 67799:731 tornado.general ERROR Uncaught exception\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/http1connection.py\", line 722, in _server_request_loop\r\n    ret = yield conn.read_response(request_delegate)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/gen.py\", line 1055, in run\r\n    value = future.result()\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/concurrent.py\", line 238, in result\r\n    raise_exc_info(self._exc_info)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/gen.py\", line 1069, in run\r\n    yielded = self.gen.send(value)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/http1connection.py\", line 245, in _read_message\r\n    self.stream.set_close_callback(self._on_connection_close)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/iostream.py\", line 420, in set_close_callback\r\n    self._maybe_add_error_listener()\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/iostream.py\", line 941, in _maybe_add_error_listener\r\n    self._add_io_state(ioloop.IOLoop.READ)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/iostream.py\", line 971, in _add_io_state\r\n    self.fileno(), self._handle_events, self._state)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/ioloop.py\", line 728, in add_handler\r\n    self._impl.register(fd, events | self.ERROR)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/platform/kqueue.py\", line 40, in register\r\n    raise IOError(\"fd %s already registered\" % fd)\r\nIOError: fd 12 already registered\r\n2017-08-10 12:10:11,582 ioloop 67799:741 tornado.general DEBUG Error deleting fd from IOLoop\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/ioloop.py\", line 739, in remove_handler\r\n    self._impl.unregister(fd)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/platform/kqueue.py\", line 50, in unregister\r\n    self._control(fd, events, select.KQ_EV_DELETE)\r\n  File \"/usr/local/lib/python2.7/site-packages/tornado/platform/kqueue.py\", line 63, in _control\r\n    self._kqueue.control([kevent], 0)\r\nOSError: [Errno 2] No such file or directory\r\n```\r\n\r\nAnd I mean me, specifically, and I don't know where to start debugging.\r\nIt happens on one process which relies on other services that run similarly, each as its own process, but none of them give out this error.\r\n\r\nI'm not sure a de-facto solution is available but I'd at least like to find where I can even begin to find the source of this problem. Any ideas?", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ssb22": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2127", "title": "CurlAsyncHTTPClient should warn when max_clients exceeded", "body": "`max_clients` in `CurlAsyncHTTPClient` defaults to 10 (which seems low for high-load applications), and there is no option to warn when its `_process_queue` can't fit all `self._requests` into `self._free_list`. Surplus requests are queued\u2014but deadlock can occur if we're fetching from a back-end server which will not respond to the requests in progress until the queued requests are sent.\r\n\r\nIn my application, I needed to do some processing both downstream and upstream of a legacy proxy which I must treat as a \"black box\".  So when a request `R0` comes in from the client, I do things to it and then send a request `R1` to the black box.  Then the black box makes a request `R2` back to me on a different port, and I do things to that and send a request `R3` elsewhere.  When I get the response from `R3`, I can send the reply for the black box's request `R2`, and that will cause the black box to reply to my `R1` request and finally I can reply to `R0`.  Notice that I won't get the response from `R1` until I've finished servicing `R2`, which I can't do until I've sent and handled `R3`.  So `R1` depends on `R3`, so if `R3` is put into a queue waiting for `R1` to finish, I'm in trouble.  Of course there are many ways I can work around this problem: I can set a larger value of `max_clients` to decrease the chances of that queue having to come into play, or I can run a completely different Tornado process for the other port, or something.  But the issue was I had a deadlock and (for a few hours) no idea why.  If there were some way of turning off the queue and raising an exception if I overload `_free_list`, or at least logging a warning, that would have saved some debugging.  Thanks.", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bryevdv": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2102", "title": "Reduce Websocket copies / accept memoryviews", "body": "\r\nSince masking of inbound (client->server) message is mandated by RFC, a copy in that case is unavoidable. However outbound masking (server->client) is *not* mandated, and appears to be turned off by default:\r\n\r\nhttps://github.com/tornadoweb/tornado/blob/master/tornado/websocket.py#L587\r\nhttps://github.com/tornadoweb/tornado/blob/master/tornado/websocket.py#L461-L462\r\n\r\n(It is set to `True` in the WS client connection class, as expected)\r\n\r\nThis outbound case is the most relevant and important one for Bokeh, so any improvements to reduce copies on outbound messages would be beneficial for Bokeh users. \r\n\r\nBelow are some ideas from tracing through the code, I am sure there are many details I am not familiar with, but perhaps this can start a discussion. \r\n\r\n---\r\n\r\nAllow `write_messages` to accept a `memoryview`. Then in `_write_frame`, instead of doing all these concatenations:\r\n\r\nhttps://github.com/tornadoweb/tornado/blob/master/tornado/websocket.py#L762-L767\r\n\r\n Place the message chunks on the stream write buffer individually. I am not sure if multiple calls to `self.stream.write(chunk)` would suffice (I'm guessing not), or if `iostream.write` would have be modified to accept multiple ordered chunks. However, it seems that `iostream.write` is already capable of storing a list of pending writes when the write buffer is \"frozen\". Currently all of these buffers get concatenated:\r\n\r\nhttps://github.com/tornadoweb/tornado/blob/master/tornado/iostream.py#L840\r\n\r\nBut perhaps instead of concatenating before clearing pending writes, the list of buffers could be copied instead, then `_handle_write` could loop over these, instead of expecting one concatenated array.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andymaheshw": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2054", "title": "Adding labels to show beginner issues?", "body": "I'd very much like to assist with tornado development. Can tags be added to issues that indicate they are beginner level? Thanks!", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2054/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kfrendrich": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2043", "title": "httputil: Header normalization behaves oddly for \"\u00df\"", "body": "Hi.\r\n\r\nWe fuzzy tested our application and discovered a problem with the normalization of header keys.\r\nIf a header key contains special characters, the re-normalization of the key cause problems in certain cases.\r\n\r\nI am attaching the code that helps you to reproduce the problems.\r\n[bug.py.txt](https://github.com/tornadoweb/tornado/files/1007159/bug.py.txt)\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptylenda": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2039", "title": "Unable to use non-ascii characters in user/password for basic auth in curl_httpclient", "body": "Steps to reproduce (Python 3.4):\r\n1. Create tornado.httpclient.HTTPRequest with auth_username or auth_password which contains non-ascii (lower range, 0-128), for example pound sterling \u00a3 (which is 153 in ascii).\r\n2. Execute curl_httpclient fetch using that request\r\n\r\nExpected result:\r\n1. The request is successfully completed\r\n\r\nActual result:\r\n2. HTTP 599 is returned and internal exception is:\r\n'ascii' codec can't encode character '\\xa3' in position 55: ordinal not in range(128)\r\n\r\n\r\nI am not sure if I am not aware of the proper solution, but I have tried providing bytes as auth_password, but it does not solve the issue because https://github.com/tornadoweb/tornado/blob/master/tornado/curl_httpclient.py#L438 internally uses string formatting. Reading through pycurl docs (http://pycurl.io/docs/latest/unicode.html) suggests that for Python3 bytes array should be used when using curl setopt. It seems like Python3 vs Python2 issue?", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2039/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2040", "title": "Unable to use non-ascii characters in user/password for basic auth in curl_httpclient", "body": "The issue has been described in #2039.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DeoLeung": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2034", "title": "gen.WaitIterator mess up current_index", "body": "Hi, if we have some coroutines to return very quickly (using unittest mock, or quick sql query),\r\nthe result of current_index may be different in the `async for` loop, which will have less result return\r\n\r\ncurrently I need to use `gen.Multi` to avoid this\r\n```python\r\nquick_return_coros = {'name': coro, ...} # some coroutines return very quick\r\niterator = gen.WaitIterator(\r\n    **{k: ensure_future(x()) for x in quick_return_coros}\r\n)\r\nres = {}\r\nasync for result in iterator:\r\n  res[iterator.current_index] = result\r\n# res may be less than quick_return_coros   \r\n```", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Groxx": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2029", "title": "WaitIterator crashes if given the same future multiple times", "body": "While trying to do some shenanigans, I built a utility to simplify `yield gen.multi(..., quiet_exceptions=...)` for a bunch of code.  One of my goals was to be able to abort a `yield` on the first-available error when yielding on multiple futures, rather than waiting for all futures to resolve - this can lead to a fairly significant response-time improvements when multiple errors occur, and one of them is due to a lengthy timeout.\r\n\r\nSo I made a small helper with WaitIterator, and started getting errors like this in tests:\r\n```\r\n  File \".../lib/helpers.py\", line 275, in parallel\r\n    result = yield iterator.next()\r\n  File \".../env/local/lib/python2.7/site-packages/tornado/gen.py\", line 428, in next\r\n    self._return_result(self._finished.popleft())\r\n  File \".../env/local/lib/python2.7/site-packages/tornado/gen.py\", line 445, in _return_result\r\n    self.current_index = self._unfinished.pop(done)\r\nKeyError: <Future at 0x7f2fe2eedd10 state=finished returned MyEntity>\r\n```\r\n\r\nAfter a bit of hunting, I narrowed it down to this (simplified pieces of WaitIterator):\r\n```python\r\nclass WaitIterator(object):\r\n    def __init__(self, *args, **kwargs):\r\n        if args and kwargs:\r\n            raise ValueError(\r\n                \"You must provide args or kwargs, not both\")\r\n\r\n        if kwargs:\r\n            self._unfinished = dict((f, k) for (k, f) in kwargs.items())\r\n            futures = list(kwargs.values())\r\n        else:\r\n# note that this is a dictionary keyed off items in args\r\n            self._unfinished = dict((f, i) for (i, f) in enumerate(args))\r\n# while this is a list\r\n            futures = args\r\n\r\n# and this is also a list\r\n        self._finished = collections.deque()\r\n        self.current_index = self.current_future = None\r\n        self._running_future = None\r\n\r\n        for future in futures:\r\n            future.add_done_callback(self._done_callback)\r\n\r\n    def next(self):\r\n        self._running_future = TracebackFuture()\r\n\r\n        if self._finished:\r\n# pops off a future from the list\r\n            self._return_result(self._finished.popleft())\r\n\r\n        return self._running_future\r\n\r\n    def _return_result(self, done):\r\n        chain_future(done, self._running_future)\r\n\r\n        self.current_future = done\r\n# and this removes the *single* future-key that matches\r\n        self.current_index = self._unfinished.pop(done)\r\n```\r\n\r\nThis crash can be demonstrated with code like this:\r\n```python\r\n@coroutine\r\ndef tmp():\r\n  pass\r\n\r\nf = tmp()\r\ni = WaitIterator(f, f, f)\r\nwhile not i.done():\r\n  yield i.next()\r\n```\r\n\r\nIn a nutshell, we have some parallel calls that we've mocked to return the same Future.  This results in a single future being in the list multiple times, which gets deduplicated in the `_unfinished` dictionary, so the second duplicate that's finished errors with a KeyError.\r\n\r\nThis isn't actually breaking anything currently, but it strikes me as a potential landmine, and would've broken some experiments I've been planning.  The workaround for users like me is to dedup manually / wrap everything in a new Future / etc, which I can do, but this was at least surprising and took some time to hunt down.\r\n\r\n---\r\n\r\nIMO this needs one of two things.  Both seem fine to me:\r\n- Don't convert to a dictionary like this, keep both as lists.  `_unfinished.pop(_unfinished.index(done))` in `_return_result` wouldn't have this problem.\r\n  - I personally like this.  Parallel yields are likely to be relatively small quantities, there's a decent chance that it'll perform better in most cases (at least, in most languages - small list scanning and indexing often out-performs hashing).  It also lets WaitIterator return whatever was passed in, regardless of what it was given, which is what I expected.\r\n- Document it.  This is a pretty low-level tool, it shouldn't under any circumstances be surprising people who haven't read the source in detail.  At the very least this isn't *expected* behavior from reading the docs, since it allows passing in a list and not only sets/dicts.\r\n\r\nI can probably get a pull review up if it'd help, but I haven't yet looked into contributing here, and it seems like it'd be a pretty small change either way.  And it's a bit esoteric, so I figured it needed some discussion to fit it in best with existing code :)  Let me know what you think!", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/2029/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coldeasy": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1967", "title": "Logging an error for unconsumed futures", "body": "Is there a mechanism to log an error or even raise an exception when a future is not waited for?\r\nFor instance, if I accidentally left out a `yield` like\r\n```python\r\n@coroutine\r\ndef c():\r\n     tornado.gen.sleep(10) # missing yield\r\n     yield 1\r\n```\r\n\r\nI considered adding another check in `tornado.concurrent` that acted towards a `result` similarly to when an exception is not consumed. However I quickly noticed that there are times in the http request where a coroutine is not yielded (e.g. [web.py#L2123](https://github.com/tornadoweb/tornado/blob/master/tornado/web.py#L2123)).", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dwt": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1955", "title": "tornado.locale.Locale.get_closest does not find locales according to RFC", "body": "Hi there,\r\n\r\nwe noticed this problem when we translated our app to 'zh_Hant' where 'Hant' is a script not a region, but [Locale.get_closest](https://github.com/tornadoweb/tornado/blob/master/tornado/locale.py#L238) treats it as it treats region codes and tries to find it capitalized.\r\n\r\nThis is AFAIK wrong on multiple levels. First [rfc4647](https://tools.ietf.org/html/rfc4647#section-2) says that \r\n```\r\n    Language tags and thus language ranges are to be treated as case-\r\n    insensitive: there exist conventions for the capitalization of some\r\n    of the subtags, but these MUST NOT be taken to carry meaning.\r\n    Matching of language tags to language ranges MUST be done in a case-\r\n    insensitive manner.\r\n```\r\n\r\nLanguage tags are to my understanding the whole string, (so 'zh_Hant' for us) and thus all matching should happen at least case insensitive.\r\n\r\nBut that code is also making lots of assumptions and does some parsing which probably is wrong (though I'm not deep enough in the RFC to say so).\r\n\r\nSome things that could be done here (in ascending order of severance of code changes)\r\n* Add a fallback that tries to find the original argument without trying to change it, so there is at least a workaround for programmers who know what they're doing.\r\n* Change matching to be case insensitive. This would be more in line with the RFC, but also has more probability of introducing new problems for existing users.\r\n* Use a propper locale parsing library (e.g. [Babel](https://pypi.python.org/pypi/Babel/) )", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truekonrads": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1920", "title": "tcpclient: Improper close of IOStream", "body": "Hello,\r\nI am using the latest git master. This happens when the IOLoop is busy. Seems simlar to #32 and #1901:\r\n```\r\nDEBUG:tornado.general:Error deleting fd from IOLoop\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/gen.py\", line 1054, in run\r\n    yielded = self.gen.send(value)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/tcpclient.py\", line 175, in connect\r\n    raise gen.Return(stream)\r\ntornado.gen.Return: <tornado.iostream.SSLIOStream object at 0x7f0e70dba3c8>\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/ioloop.py\", line 739, in remove_handler\r\n    self._impl.unregister(fd)\r\nFileNotFoundError: [Errno 2] No such file or directory\r\n```", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "giampaolo": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1886", "title": "Add a timeout argument to read_until_* methods", "body": "...so that one can do:\r\n\r\n```\r\n    @gen.coroutine\r\n    def handle_stream(self, stream, address):\r\n        while True:\r\n            try:\r\n                data = yield stream.read_until(b\"\\r\\n\", timeout=30)\r\n            except TimeoutError:\r\n                print(\"no data was received in 30 secs\")\r\n                break\r\n```", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "M425": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1863", "title": "WebSocket with regex route doesn't call open callback", "body": "I binded a tornado.websocket.WebSocketHandler with a normal route like \"/ws\" and it works as expected. However when i bind the handler with a regex route like \"/nws/(.*)\" it doesn't call the \"open\" callback.\nFollows the shortest example i could build to show the issue:\n\n``` python\nimport os\nimport tornado\nimport tornado.web\nimport tornado.gen\nimport tornado.websocket\n\nclass SocketHandler(tornado.websocket.WebSocketHandler):\n    def initialize(self):\n        print 'initialized'\n\n    def check_origin(self, origin):\n        return True\n\n    @tornado.gen.coroutine\n    def open(self):\n        print 'opened'\n        raise tornado.gen.Return()\n\n    @tornado.gen.coroutine\n    def on_message(self, message):\n        print 'on_message {}'.format(message)\n        self.write_message('resp: {}'.format(message))\n\n    @tornado.gen.coroutine\n    def on_close(self):\n        print 'closed'\n\n\napplication = tornado.web.Application([\n    (r\"/ws\",               SocketHandler),\n    (r\"/nws/(.*)\",         SocketHandler),\n])\napplication.listen(8181)\nprint 'Server started on port: {}, pid: {}'.format(8181, os.getpid())\ntornado.ioloop.IOLoop.instance().start()\n```\n\nSo I run a normal client which fires the following operation:\n- open\n- send message \"test\"\n- close\n\nhere the output when the path is /ws\n\n```\ninitialized\nopened\non_message test\nclosed\n```\n\nhere the output when the path is /nws/abc\n\n```\ninitialized\non_message test\nclosed\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rgbyrnes": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1860", "title": "bind_sockets sporadically fails with EADDRINUSE", "body": "tornado.netutil.bind_sockets attempts to use the same port on IPv4 and IPv6 if port=None.\n\nIt does this by first letting the kernel assign a port for one protocol, and then explicitly requesting the same port for the other protocol.  However, I think the port space for IPv4 and IPv6 is independent, so there is no reason to assume that the same port is necessarily available for the other protocol.  The second bind can (and occasionally does) fail with EADDRINUSE.\n\nWhat's the rationale for using the same port?\n\nThe behavior was added in this commit: https://github.com/tornadoweb/tornado/commit/151eef74a459d9499382b926c12a476477dcc01e\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mayflaver": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1859", "title": "add_timeout optimization", "body": "To call add_timeout function,  you need to call time.time sys function, that's  heavy, when has a lot of time-based events, It is a heavy burden for cpu.\n\nhttps://github.com/mayflaver/tornado/blob/master/tornado/ioloop.py#L759   I think we can store the timestamp in every ioloop, when call add_timeout, we can use it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Deus-Vult": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1858", "title": "tornado.locale.Locale.get_closest() not getting closest match", "body": "The tornado.locale.Locale.get_closest() (and as such by extension tornado.locale.get) function is a bit malformed. It tries to match two character language codes directly against the frozenset in which the five character language codes are stored, which obviously fails. As a result it can only get exact matches and will return the default locale when using two character codes.\n\n```\n    @classmethod\n    def get_closest(cls, *locale_codes):\n        \"\"\"Returns the closest match for the given locale code.\"\"\"\n        for code in locale_codes:\n            if not code:\n                continue\n            code = code.replace(\"-\", \"_\")\n            parts = code.split(\"_\")\n            if len(parts) > 2:\n                continue\n            elif len(parts) == 2:\n                code = parts[0].lower() + \"_\" + parts[1].upper()\n            if code in _supported_locales:\n                return cls.get(code)\n            if parts[0].lower() in _supported_locales:\n                return cls.get(parts[0].lower())\n        return cls.get(_default_locale)\n```\n\nSpecifically this part:\n\n```\n            if parts[0].lower() in _supported_locales:\n                return cls.get(parts[0].lower())\n```\n\nI wrote the following simple function in my own code to bypass this problem but I bet someone else can write it a bit nicer into the intended function:\n\n```\nlocale = self.request.headers.get('Accept-Language')\n\nif locale:\n    for l in tornado.locale.get_supported_locales():\n        if locale == l.split(\"_\")[0]:\n            self.locale = tornado.locale.get(l)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "digitaldavenyc": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1856", "title": "XSRF Token mismatch", "body": "I am attempting to use `xsrf_cookies` with Tornado, Jinja2 and a JavaScript application that will submit POST requests. I am including `xsrf_form_html` in the GET requests Jinja template and  including the token in the headers of a POST request via AJAX.\n\nAfter looking threw the logs in tornado, the token being set on GET does not match what Tornado is looking for in the AJAX POST. The `xsrf_token` is being reset and Tornado throws a 403 error on all AJAX requests.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1856/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "realcr": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1849", "title": "Possible unicode issues with validate_absolute_path", "body": "Hi, I caught this traceback info in my server logs:\n\n```\n    Uncaught exception GET /s/chat.html%E2%80%8F (**.**.**.**)\n    HTTPServerRequest(protocol='http', host='www.****.com', method='GET', uri='/s/chat.html%E2%80%8F', version='HTTP/1.1', remote_ip='**.**.**.**', headers={'X-Real-Ip': '**.**.**.**, 'Accept-Language': 'he-IL,he;q=0.8,en-US;q=0.6,en;q=0.4', 'Host': 'www.****.com', 'Connection': 'upgrade', 'Upgrade-Insecure-Requests': '1', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, sdch, br', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36'})\n    Traceback (most recent call last):\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/site-packages/tornado/web.py\", line 1445, in _execute\n            result = yield result\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/site-packages/tornado/gen.py\", line 1008, in run\n            value = future.result()\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/site-packages/tornado/concurrent.py\", line 232, in result\n            raise_exc_info(self._exc_info)\n        File \"<string>\", line 3, in raise_exc_info\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/site-packages/tornado/gen.py\", line 282, in wrapper\n            yielded = next(result)\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/site-packages/tornado/web.py\", line 2265, in get\n            self.root, absolute_path)\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/site-packages/tornado/web.py\", line 2446, in validate_absolute_path\n            if (os.path.isdir(absolute_path) and\n        File \"/home/production/.virtualenvs/wchat/lib/python3.5/genericpath.py\", line 42, in isdir\n            st = os.stat(s)\n    UnicodeEncodeError: 'ascii' codec can't encode character '\\u200f' in position 52: ordinal not in range(128)\n```\n\n(I removed the exact IP of the user and the domain names).\nThis error seems to happen every time I access the path /s/chat.html%E2%80%8F in my server. Note that this path (everything under /s) is server using web.StaticFileHandler.\n\nI still haven't fully investigated this myself, though I was wondering if anyone had a similar problem. For reference, my installed Tornado version is 4.3. I am using python 3.5.1.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Lookyan": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1842", "title": "parse_multipart_form_data for stream_request_body", "body": "Hi!\n\nWe have a good feature for streaming HTTP body (decorator stream_request_body). \nUsing stream_request_body we get chunks of HTTP body in data_received method. But this data is raw. And It will be cool to have a support for higher level tool to work with streaming body (in case of multipart_form_data). \n\nIf it is not solved yet I can do this, but I'm not sure about architecture for solution.\nI want to implement smth like StreamParser, which will get boundary and infinite generator which will return file-like objects. This parser we can instantiate in `prepare` method and then simply pass chunks in `data_received` method to it. Parser will write to these file-like objects and efficiently use RAM.  But this solution has drawbacks. At least, we don't have universal solution in case if we want to handle data with some logic. Also we can't return any meta info from these file-like objects. But there can be important information such as ObjectId in case of using for example mongodb gridfs.\n\nAnother solution is to implement a subclass of RequestHandler with stream_request_body decorator and overridden `prepare` and `data_received` methods. We can add some extra abstract methods such as `open_file`, `close_file`, `new_data` and pass to them info about current state and chunks which we can write to file and do whatever we want without thinking about boundaries, headers.\n\nWhat do you think about it?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leynos": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1840", "title": "X-Forwarded-For handling appears incorrect", "body": "The handling of the X-Forwarded-For header appears to be incorrect.\n\nSquid and Nginx append each new step in the chain to the end of the list.  See the [Wikipedia article](https://en.wikipedia.org/wiki/X-Forwarded-For#Format), which cites the Squid documentation [here](http://www.squid-cache.org/Doc/config/follow_x_forwarded_for/) (\"header values are iterated in reverse order\").  The format given on Wikipedia is:\n\n```\nX-Forwarded-For: client, proxy1, proxy2\n```\n\nThis is consistent with my experience of Nginx, which has passed the client IP as the first address in the chain.\n\nThe behaviour in question (line [229](https://github.com/tornadoweb/tornado/blob/8fb0164ea63d2603e743fbd47d760b1e6df96a54/tornado/httpserver.py#L229) of httpserver.py):\n\n```\nip = ip.split(',')[-1].strip()\n```\n\nA more correct implementation would be `ip = ip.split(',')[0].strip()`\n\nFurthermore, the value in question may contain a port number.  This is handled by Nginx, for example (see [here](http://nginx.org/en/docs/http/ngx_http_realip_module.html)).  Tornado strictly rejects this value if it not an ip address.  It may be worth stripping off any port suffix, by, e.g.:\n\n```\nif (ip.startswith('[') and not ip.endswith(']')) or ('.' in ip and ':' in ip):\n    ip = ip.rsplit(':', 1)[0]\n```\n\nThe first clause of the \"if\" condition checks for IPv6 addresses with a port stated, and the second checks for IPv4 addresses with a port.  An alternative might be to use urlparse.\n\nI believe this would provide a more useful implementation of the X-Forwarded-For handler where multiple proxies are chained.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "justdoit0823": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1832", "title": "Why tornado parse GET request body?", "body": "In RFC 2616 [section 4.3](https://tools.ietf.org/html/rfc2616#section-4.3), it writes down:\n`A server SHOULD\n   read and forward a message-body on any request; if the request method\n   does not include defined semantics for an entity-body, then the\n   message-body SHOULD be ignored when handling the request.`\n\nBut in tornado, the GET request body arguments can still be obtained from web.RequestHandler.get_argument.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andrewyoung1991": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1826", "title": "CurlAsyncHTTPClient is dramatically slower than AsyncHTTPClient", "body": "I'm working on a service that calls AWS endpoints using Tornado. As recommended by the documentation, I have been using the Curl client but unfortunately this is exponentially slower than the builtin simple_http_client.\n\nMy local setup is:\n- Python 3.5 (using async/await)\n- Tornado 4.4.1\n- PycURL 7.43.0\n- libcurl 7.38.0\n- OpenSSL 1.0.1t\n- Docker (Debian base image with Python 3.5 installed)\n\nThe time spent blocking the IOLoop for the Curl client is lower than the builtin client, the builtin client will block for more than 5ms occasionally, where an equivalent call with the Curl client will never block for more than 2ms.\n\nAfter some profiling I've found that using the Curl client the code spends 98% of the time polling (`select.epoll.poll`), and ~1% of the time on prepping/sending/returning the Curl request, and ~1% of the time processing the response. The roundtrip here is over 80ms for a request where about 79ms are spent waiting. The equivalent request with the `simple_http_client` takes ~4ms...\n\nAny insights on what is going wrong or advice on how to debug?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joshsziegler": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1824", "title": "Should the Blog example use bcrypt's checkpw instead of ==", "body": "bcrypt 3.1.0 added `checkpw` which (I believe) is the recommended way to compare passwords to the hashed password now. \n- `checkpw` code [here](https://github.com/pyca/bcrypt/blob/master/src/bcrypt/__init__.py#L97)\n- tornado's blog example using `==` [here](https://github.com/tornadoweb/tornado/blob/stable/demos/blog/blog.py#L211)\n\nThe current example looks like this:\n\n``` python\n    @gen.coroutine\n    def post(self):\n        # [...]\n        hashed_password = yield executor.submit(\n            bcrypt.hashpw, \n            tornado.escape.utf8(self.get_argument(\"password\")),\n            tornado.escape.utf8(author.hashed_password))\n        if hashed_password == author.hashed_password:\n            self.set_secure_cookie(\"blogdemo_user\", str(author.id))\n            self.redirect(self.get_argument(\"next\", \"/\"))\n        else:\n            self.render(\"login.html\", error=\"incorrect password\")\n```\n\nBut maybe it should look like this?\n\n``` python\n    @gen.coroutine\n    def post(self):\n        # [...]\n        password_equal = yield executor.submit(\n            bcrypt.checkpw, \n            tornado.escape.utf8(self.get_argument(\"password\")),\n            tornado.escape.utf8(author.hashed_password))\n        if password_equal:\n            self.set_secure_cookie(\"blogdemo_user\", str(author.id))\n            self.redirect(self.get_argument(\"next\", \"/\"))\n        else:\n            self.render(\"login.html\", error=\"incorrect password\")\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1824/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onovy": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1820", "title": "Unit tests failing on hurd-i386  kfreebsd-i386 and ppc64", "body": "Hi,\n\nhttps://buildd.debian.org/status/package.php?p=python-tornado\n\nTornado unit tests is failing on this platforms.\n\nDetails:\nhttps://buildd.debian.org/status/fetch.php?pkg=python-tornado&arch=hurd-i386&ver=4.4.1-2&stamp=1470438019\nhttps://buildd.debian.org/status/fetch.php?pkg=python-tornado&arch=kfreebsd-i386&ver=4.4.1-2&stamp=1470499227\nhttps://buildd.debian.org/status/fetch.php?pkg=python-tornado&arch=ppc64&ver=4.4.1-2&stamp=1470484079\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thinkh": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1812", "title": "Custom option from config external file is \"required to be a int (<type 'long'> given)\"", "body": "In my setup I defined a custom option as following:\n\n```\ndefine(\"my_custom_int_option\", default=0, help=\"custom help text\", type=int)\n```\n\nThen I used this option in an external config file:\n\n```\nmy_custom_int_option=1461151993676\n```\n\nFor reading the config file I created the following option:\n\n```\n# override defined default options and CLI arguments with values from config file\ndefine(\"config\", default=\"\", type=str, help=\"path to global config file\", callback=lambda path: parse_config_file(path, final=False))\n```\n\nI run the tornado server using the following command: `python main.py -config=env.config.conf`\n\nWhen I request a page I get the following error on the console:\n\n```\n[E 160825 06:32:20 http1connection:54] Uncaught exception\n    Traceback (most recent call last):\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/http1connection.py\", line 238, in _read_message\n        delegate.finish()\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/httpserver.py\", line 289, in finish\n        self.delegate.finish()\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/web.py\", line 2047, in finish\n        self.execute()\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/web.py\", line 2067, in execute\n        **self.handler_kwargs)\n      File \"/var/server/tornado/data/mowis_viz/__init__.py\", line 105, in __init__\n        tornado.options.parse_config_file(config_file, final=False)\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/options.py\", line 574, in parse_config_file\n        return options.parse_config_file(path, final=final)\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/options.py\", line 322, in parse_config_file\n        self._options[normalized].set(config[name])\n      File \"/usr/local/lib/python2.7/dist-packages/tornado/options.py\", line 475, in set\n        (self.name, self.type.__name__, type(value)))\n    Error: Option 'my_custom_int_option' is required to be a int (<type 'long'> given)\n```\n\nI also tried a smaller number in the config file (e.g., `my_custom_int_option=1`) and get the same error message.\n\nDoes anyone know what could be the solution here?\n\nMy Tornado version is 4.4.1. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anders-jansson": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1798", "title": "Order of module in template random causes modules to be unable to depend on each other", "body": "If you create a template with several module statement in it and the javascript code depends on each other in a deterministic way. \n\nExample: I have module that pulls in jQuery and another module that uses jQuery, called myajax. In jQuery i have javascript_files method that point out a CDN for some version and in myajax i do a reference to jQuery. When rendered the order of jQuery and myajax is nondeterministic so it will fail in the browser.\n\nBy forcing the RequestHandler._active_modules to a OrderedDict the order will be the order the modules are defined in the template and open to decision of the developer. The below diff shows the change necessary. (Sorry for not being able to do a proper pull request but github might hate me or something).\n\n[order_module.diff.txt](https://github.com/tornadoweb/tornado/files/417038/order_module.diff.txt)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "levin-du": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1791", "title": "any way to graceful exit tornado application?", "body": "there are many gist show how to graceful exit tornado application like this:\n\n``` python\nstop_httpserver(http_server)\ndef try_stop_ioloop():\n    io_loop = IOLoop.instance()\n    if io_loop._callbacks or io_loop._timeouts:\n        io_loop.add_timeout(time.time()+1, try_stop_ioloop)\n    else:\n        io_loop.stop()\n\ntry_stop_ioloop()\n```\n\nit's safy to test io_loop._timeouts or _callbacks ? or _timeouts can be ignored?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1791/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkozlowicz": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1753", "title": "request_timeout does not stop HTTP 599: Timeout", "body": "I am getting quite a few `tornado.httpclient.HTTPError: HTTP 599: Timeout` errors. \n\nI read https://github.com/tornadoweb/tornado/issues/1400 and I increased request_timeout for all my `HTTPRequests` to 2400.00 (40 minutes) then I rerun the code and I am 100% positive that I got not as many but still a few `tornado.httpclient.HTTPError: HTTP 599: Timeout` errors even thought my code finished running after 10 minutes.\n\nI wonder why it is so and if there is something else I could do to fix it?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1753/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nojz": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1700", "title": "Cannot stop Application/HTTPServer/RequestHandler", "body": "Hello guys!\n\nI had the same problem:\n[http://stackoverflow.com/questions/23778213/stopping-a-tornado-application](url)\n\nI made a code snippet using this knowledge, but it does not work.\n\n```\nimport tornado.web\n\nhttpServer = None\n\nclass RequestHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"OK\")\n\nclass HandlerStarter(tornado.web.RequestHandler):\n    def get(self):\n        global httpServer\n        requestHandler = tornado.web.Application([\n            (r\"/\", RequestHandler),\n        ])\n        httpServer = requestHandler.listen(7777)\n        self.write(\"started handler\")\n\nclass HandlerCloser(tornado.web.RequestHandler):\n    def get(self):\n        httpServer.stop()\n        self.write(\"stopped handler\")\n\nif __name__ == \"__main__\":\n    app = tornado.web.Application([\n        (r\"/start\", HandlerStarter),\n        (r\"/stop\", HandlerCloser)\n    ])\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```\n\nHere is the problem:\n1. I open localhost:8888/start so it starts a requesthandler on port 7777.\n2. I open localhost:7777 and I got the OK.\n3. I open localhost:8888/stop so it calls stop on the previously started requesthandler.\n4. I open localhost:7777 and it still returns OK, so it does not stop.\n\nDo you guys know why this happens?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "breerly": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1687", "title": "Unable to add handlers to the same host_pattern after app init", "body": "In the following example, I add 2 handlers - one during init, and one after.\n\n``` python\napp = tornado.web.Application([\n    ('/health', HealthHandler),  # gets a host_pattern of '.*$'\n])\napp.add_handlers(\n    host_pattern='.*$',\n    host_handlers=[\n        ('.*$', CatchAllHandler),\n    ],\n)\n```\n\nI would expect that the `CatchAllHandler` would be routed to for all requests that do not match the route `/health`. Unfortunately, this is not the case.\n\nWhat actually happens is that all requests get routed to the `CatchAllHandler` - this is because that, even though they both share the same `host_pattern`, `app.hosts` is a list, and dispatching routes to the handlers in the first matched `host_pattern` in that list.\n\nThis certainly feels like a bug - how should one go about adding a handler to the _same_ `host_pattern` after the application has been instantiated?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arthurdarcet": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1684", "title": "Using asyncio.gather switch back to the asyncio runner", "body": "the asyncio runner does not handle tornado Futures, so the docs should probably warn that using asyncio.gather will fail if one of the gathered coroutine tries to await a tornado coroutine.\n\nAn option would be to try making the asyncio runner able to handle tornado futures: this seems to do the trick https://github.com/arthurdarcet/tornado/compare/master...arthurdarcet:asyncio-runner but i haven't extensively tested it\u2026\nIf the asyncio runner handles tornado coroutines, then the `to_asyncio_future` on the first awaited coroutine.\n\nExample code:\n\n``` python\nimport asyncio\nimport tornado.gen\nimport tornado.ioloop\nimport tornado.platform.asyncio\n\nasync def do_tornado():\n    await tornado.gen.coroutine(lambda: None)()\n    print('tornado')\n\nasync def main():\n    await tornado.gen.multi([do_tornado()])\n    # this will fail:\n    await asyncio.gather(do_tornado())\n\ntornado.platform.asyncio.AsyncIOMainLoop().install()\n\ncoro = main()\n# not needed anymore\n#coro = tornado.platform.asyncio.to_asyncio_future(coro)\n\nloop = tornado.ioloop.IOLoop.current()\nloop.run_sync(lambda: coro)\n# or:\n#loop = asyncio.get_event_loop()\n#loop.run_until_complete(coro)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kwarunek": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1665", "title": "AsyncHTTPTestCase's fetch swallows httpclient exception", "body": "Python: 3.5.1\nTornado: 4.3\nUbuntu 12.04\n\nCase:\n\n``` python\nimport unittest\nfrom tornado import testing\nfrom tornado import web\nfrom tornado import gen\n\nclass Handler(web.RequestHandler):\n\n    @gen.coroutine\n    def post(self):\n        self.write('spam')\n\n\nclass HandlerTest(testing.AsyncHTTPTestCase):\n    def get_app(self):\n        return web.Application([('/', Handler)])\n\n    def test_post(self):\n        response = self.fetch('/', method='POST')\n        self.assertEqual(b'spam', response.body)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nProduces:\n\n```\nF\n======================================================================\nFAIL: test_post (__main__.HandlerTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/testing.py\", line 132, in __call__\n    result = self.orig_method(*args, **kwargs)\n  File \"test.py\", line 20, in test_post\n    self.assertEqual(b'spam', response.body)\nAssertionError: b'spam' != None\n\n----------------------------------------------------------------------\nRan 1 test in 0.005s\n\nFAILED (failures=1)\n```\n\ninstead of \"meaningful\" error.\n\nIf changed to `@gen_test`, it produce proper error:\n\n``` python\nimport unittest\nfrom tornado import testing\nfrom tornado import web\nfrom tornado import gen\nfrom tornado.testing import gen_test\n\nclass Handler(web.RequestHandler):\n\n    @gen.coroutine\n    def post(self):\n        self.write('spam')\n\n\nclass HandlerTest(testing.AsyncHTTPTestCase):\n    def get_app(self):\n        return web.Application([('/', Handler)])\n\n    @gen_test\n    def test_post(self):\n        response = self.http_client.fetch(self.get_url('/'), method='POST')\n        self.assertEqual(b'spam', response.body)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nand the error, that is ok:\n\n```\nE\n======================================================================\nERROR: test_post (__main__.HandlerTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/testing.py\", line 132, in __call__\n    result = self.orig_method(*args, **kwargs)\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/testing.py\", line 525, in post_coroutine\n    timeout=timeout)\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/ioloop.py\", line 453, in run_sync\n    return future_cell[0].result()\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/concurrent.py\", line 232, in result\n    raise_exc_info(self._exc_info)\n  File \"<string>\", line 3, in raise_exc_info\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/gen.py\", line 267, in wrapper\n    result = func(*args, **kwargs)\n  File \"/tmp/t35/lib/python3.5/types.py\", line 243, in wrapped\n    coro = func(*args, **kwargs)\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/testing.py\", line 508, in pre_coroutine\n    result = f(self, *args, **kwargs)\n  File \"test.py\", line 22, in test_post\n    self.assertEqual(b'spam', response.body)\nAttributeError: 'Future' object has no attribute 'body'\n\n----------------------------------------------------------------------\nRan 1 test in 0.006s\n\nFAILED (errors=1)\nERROR:tornado.application:Future <tornado.concurrent.Future object at 0x7ffb966965c0> exception was never retrieved: Traceback (most recent call last):\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/stack_context.py\", line 314, in wrapped\n    ret = fn(*args, **kwargs)\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/gen.py\", line 264, in <lambda>\n    future, lambda future: callback(future.result()))\n  File \"/tmp/t35/lib/python3.5/site-packages/tornado/simple_httpclient.py\", line 353, in _on_connect\n    ('not ' if body_expected else '', self.request.method))\nValueError: Body must not be None for method POST (unless allow_nonstandard_methods is true)\n```\n\nRef. [http://stackoverflow.com/questions/36013805/can-only-perform-get-requests-in-tornado-test/36015750#36015750](url)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "schlamar": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1581", "title": "Vary: Accept-Encoding header for non-compressable content", "body": "You never compress non-compressable content such as png images. So why are you sending a `Vary: Accept-Encoding` header in this cases?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1580", "title": "HEAD with compress_response is wrong", "body": "Tornado does not indicate gzip encoding and chunked transfer encoding in a HEAD request, so there is a header mismatch between GET and HEAD.\n\nExample application with static file handler:\n\n```\napp = web.Application(compress_response=True, static_path='static')\napp.listen(8888)\nioloop.IOLoop.current().start()\n```\n\nGET Request\n\n```\n> GET /static/test.txt HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: 127.0.0.1:8888\n> Accept: */*\n> Accept-Encoding: deflate, gzip\n>\n< HTTP/1.1 200 OK\n< Content-Encoding: gzip\n< Transfer-Encoding: chunked\n< Accept-Ranges: bytes\n< Vary: Accept-Encoding\n* Server TornadoServer/4.4.dev1 is not blacklisted\n< Server: TornadoServer/4.4.dev1\n< Last-Modified: Wed, 11 Nov 2015 07:05:43 GMT\n< Etag: \"b08c2cde93fbd9504fbe88ec1d5c7662\"\n< Date: Wed, 11 Nov 2015 07:08:27 GMT\n< Content-Type: text/plain\n```\n\nHEAD Request\n\n```\n> HEAD /static/test.txt HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: 127.0.0.1:8888\n> Accept: */*\n> Accept-Encoding: deflate, gzip\n>\n< HTTP/1.1 200 OK\n< Content-Length: 9720\n< Accept-Ranges: bytes\n< Vary: Accept-Encoding\n* Server TornadoServer/4.4.dev1 is not blacklisted\n< Server: TornadoServer/4.4.dev1\n< Last-Modified: Wed, 11 Nov 2015 07:05:43 GMT\n< Etag: \"b08c2cde93fbd9504fbe88ec1d5c7662\"\n< Date: Wed, 11 Nov 2015 07:11:19 GMT\n< Content-Type: text/plain\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/978", "title": "Rounding issues with poll_timeout in IOLoop", "body": "If the calculated timeout from a scheduled timer is smaller than the resolution of the poll implementation, zero is passed to the underlying poll/select system call. This means that the IOLoop spins ineffectively multiple times until the scheduled timeout is finally resolved. \n\nSee this bug report against tulip for details: http://bugs.python.org/issue20311\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ff0b91a60573afc5eceaa797950ce16a4dfbadd9", "message": "don't check error code in test_set_close_exec"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5458210", "body": "I don't see this behavior on Mavericks. Do you have another OSX version? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5458210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5458277", "body": "https://github.com/facebook/tornado/pull/990\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5458277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rakeshsukla53": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1566", "title": "Invalid Scopes: read_stream error in facebook", "body": "I am trying to run [this tornado facebook application](https://github.com/tornadoweb/tornado/tree/master/demos/facebook) but I am continuously getting this error after passing my login credentials on facebook.\n\n[![enter image description here](http://i.stack.imgur.com/cqDBf.png)](http://i.stack.imgur.com/cqDBf.png)\n\nIn my client Oauth settings, I have enabled both client and web login. Could anyone help me to get rid of this error?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alunduil": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1516", "title": "tornado.httputil.HTTPServerRequest age property", "body": "In some signing and validation work I'm doing, it would be super convenient if the request had an age property (the time between request.headers['Date'] and time.time() in seconds).  This would simply provide the age of the request as provided by the client and verification of the Date header would need to occur elsewhere if needed.\n\nWhat's the stance on adding properties like this?  If you're receptive let me know and I can easily provide a pull request.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mivade": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1504", "title": "Access with server-sent events only logged after connection is closed", "body": "I have extended `tornado.web.RequestHandler` to support server-sent events:\n\n``` python\nclass EventSource(RequestHandler):\n    \"\"\"Base handler for server-sent events.\"\"\"\n    def initialize(self, source):\n        \"\"\"The ``source`` parameter is a string that is updated with\n        new data. The :class:`EventSource` instance will continuously\n        check if it is updated and publish to clients when it is.\n\n        \"\"\"\n        assert isinstance(source, stores.DataStore)\n        self.source = source\n        self._last = None\n        self.finished = False\n        self.set_header('content-type', 'text/event-stream')\n        self.set_header('cache-control', 'no-cache')\n\n    @gen.coroutine\n    def publish(self, data):\n        \"\"\"Pushes data to a listener.\"\"\"\n        try:\n            self.write('data: {}\\n\\n'.format(data))\n            yield self.flush()\n        except StreamClosedError:\n            self.finished = True\n\n    @gen.coroutine\n    def get(self):\n        while not self.finished:\n            if self.source.data != self._last:\n                yield self.publish(self.source.data)\n                self._last = self.source.data\n            else:\n                yield gen.sleep(0.01)\n        self.finish()\n```\n\nWhen connecting to an implementation of `EventSource`, I correctly receive the streamed data. However, accessing the stream is not logged until after the connection is closed. This results in access logs that indicate very long times:\n\n```\n[I 150829 14:30:20 web:1908] 200 GET /stream/all (::1) 7856.83ms\n[I 150829 14:30:22 web:1908] 200 GET /stream/all (::1) 25523.45ms\n[I 150829 14:30:23 web:1908] 200 GET /stream/all (::1) 43150.50ms\n```\n\nIt would be more useful for streams like this to log when the initial connection is made.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f8420314729e03e31845582ea9278d16ccf7832e", "message": "Document that options can be booleans\n\nAddresses #2222"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/648b3e9f7c6abe718fd5cd95fc55834efdcfa020", "message": "Implement IOLoop.run_in_executor (#2067)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c610dd403dacf850f30b4cf185cd00c3facd76c1", "message": "Replace func directive with double backticks"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/9ffd08ff8ff3decabc503f71e883ad3a26052f40", "message": "Leave calling colorama.init to the user"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Sjord": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1490", "title": "CurlAsyncHTTPClient does not support internationalized domain names", "body": "When I try to request a page with non-ASCII characters in the URL, e.g. `http://st\u00fctzstr\u00fcmpfe.de/` or `https://nl.wikipedia.org/wiki/Belgi\u00eb`, I get an UnicodeEncodeError exception when using the curl client. It works as expected with the default simple HTTP client.\n\nThis can be fixed by splitting the URL and encoding all parts correctly, as in [this example](https://gist.github.com/mnot/4576470).\n\nScript to reproduce:\n\n``` python\n# coding: utf-8\nfrom tornado.httpclient import AsyncHTTPClient, HTTPClient\nAsyncHTTPClient.configure(\"tornado.curl_httpclient.CurlAsyncHTTPClient\")\nhttp_client = HTTPClient()\nhttp_client.fetch('https://nl.wikipedia.org/wiki/Belgi\u00eb')\nhttp_client.fetch('http://www.st\u00fctzstr\u00fcmpfe.de')\n```\n\nException:\n\n```\nTraceback (most recent call last):\n  File \"reproduce.py\", line 6, in <module>\n    http_client.fetch('https://nl.wikipedia.org/wiki/Belgi\u00eb')\n  File \"/home/sjoerd/.virtualenvs/protomon/lib/python3.4/site-packages/tornado/httpclient.py\", line 102, in fetch\n    self._async_client.fetch, request, **kwargs))\n  File \"/home/sjoerd/.virtualenvs/protomon/lib/python3.4/site-packages/tornado/ioloop.py\", line 445, in run_sync\n    return future_cell[0].result()\n  File \"/home/sjoerd/.virtualenvs/protomon/lib/python3.4/site-packages/tornado/concurrent.py\", line 215, in result\n    raise_exc_info(self._exc_info)\n  File \"<string>\", line 3, in raise_exc_info\n  File \"/home/sjoerd/.virtualenvs/protomon/lib/python3.4/site-packages/tornado/curl_httpclient.py\", line 214, in _process_queue\n    curl.info[\"headers\"])\n  File \"/home/sjoerd/.virtualenvs/protomon/lib/python3.4/site-packages/tornado/curl_httpclient.py\", line 283, in _curl_setup_request\n    curl.setopt(pycurl.URL, native_str(request.url))\nUnicodeEncodeError: 'ascii' codec can't encode character '\\xeb' in position 35: ordinal not in range(128)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1490/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KenjiTakahashi": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1462", "title": "Prevent @gen.coroutine from eating 'callback' kwarg.", "body": "I have a code where I have to pass a callback (kw)argument which is used by the wrapped function for some other purpose. It would be nice to have a way to tell the `coroutine` wrapper not to \"eat\" it.\n\nLooking through the code, I see there is a `replace_callback` boolean in the `coroutine` function, but there is no way to set it when using it as decorator. And even if there was, it is not propagated to the wrapper anyway.\n\nFor now I have worked around it by calling `_make_coroutine_wrapper` directly with `replace_callback=False`, but it feels a bit clumsy.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "scoder": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1448", "title": "use os.sendfile() when available", "body": "The `StaticFileHandler` should use `os.sendfile()` if available. While static files would commonly be sent by an external webserver (nginx etc.) in a production environment, sometimes files are generated on the fly and need to be written out through the IOLoop. `sendfile()` would reduce the overhead here.\n\nI'd also like to have a general high-level `RequestHandler.send_file(file_path, content_type=None)` method for this case that the `StaticFileHandler` would call, but that other user code could conveniently use as well. If `sendfile()` is not available, it would simply fall back to forwarding chunks, but user code wouldn't have to care any more how exactly it works on the current system.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1184", "title": "Speed up stack_context.py", "body": "I profiled the tornado benchmark in CPython's test suite\n\nhttps://hg.python.org/benchmarks/file/9a1136898539/performance/bm_tornado_http.py\n\nand it gave me this (CPython 3.4 on Ubuntu 14.04):\n\n```\n         1297716 function calls (1277262 primitive calls) in 1.355 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n36663/20463    0.082    0.000    1.288    0.000 stack_context.py:269(wrapped)\n    48605    0.061    0.000    0.096    0.000 stack_context.py:253(wrap)\n    36663    0.048    0.000    0.054    0.000 stack_context.py:227(_remove_deactivated)\n    15602    0.041    0.000    0.082    0.000 ioloop.py:713(add_callback)\n    16200    0.039    0.000    0.053    0.000 iostream.py:980(_merge_prefix)\n    13200    0.039    0.000    0.132    0.000 iostream.py:337(_run_callback)\n     4200    0.039    0.000    0.039    0.000 {method 'send' of '_socket.socket' objects}\n    43856    0.037    0.000    0.037    0.000 {built-in method hasattr}\n        1    0.035    0.035    1.349    1.349 ioloop.py:549(start)\n...\n```\n\nI found it a bit surprising that so much time was spent in a helper module like `stack_context.py`, so I compiled the module with Cython (0.21) and the picture changed to this (some C calls add into their caller's timings now):\n\n```\n         1061674 function calls (1057420 primitive calls) in 1.191 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    13200    0.057    0.000    0.107    0.000 iostream.py:337(_run_callback)\n    15602    0.054    0.000    0.057    0.000 ioloop.py:713(add_callback)\n        1    0.044    0.044    1.188    1.188 ioloop.py:549(start)\n     4200    0.038    0.000    0.038    0.000 {method 'send' of '_socket.socket' objects}\n    13200    0.037    0.000    0.749    0.000 iostream.py:338(wrapper)\n    15602    0.036    0.000    0.958    0.000 ioloop.py:452(_run_callback)\n    16200    0.035    0.000    0.048    0.000 iostream.py:980(_merge_prefix)\n    15600    0.031    0.000    0.031    0.000 {method 'recv' of '_socket.socket' objects}\n...\n```\n\nThis resulted in a speedup of about 7% for the overall benchmark.\n\nI recommend doing that officially, i.e. run `cythonize(\"tornado/stack_context.py\")` before a release and ship the resulting .c file as additional extension module.\n\nhttp://docs.cython.org/src/reference/compilation.html#compiling-with-distutils\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13229196", "body": "stale comment?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13229196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dvirsky": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1438", "title": "HTTP/2 support", "body": "It would be nice to see tornado implement http/2, not that AFAIK it's a standard.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1438/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pfrantz": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1426", "title": "Problem with nested requests when using the FacebookGraphMixin get_authenticated_user call", "body": "When using the FacebookGraphMixin and calling get_authenticated_user with the extra_fields parameter set to a list of fields that contain nested fields, the returned dictionary will not contain any fields which are nested. \n\nWith the Facebook graph api you can specify nested fields which contain modifier and sub selectors. For example you can specify limit by adding a .limit(nn) to a field name. \n\nfor example a call lilke:-  \n\nauth_info = yield self.get_authenticated_user(\n                redirect_uri=my_url,\n                client_id=client_id,\n                client_secret=client_secret,\n                code=self.get_argument('code'),\n                extra_fields=['email', 'gender', 'age_range', 'permissions', 'friends.limit(5000)'])\n\nwill not return the friend list because it don't realise that .limit(5000) is a modifier and the returned field name is friends not friends.limit(5000).\n\nthe fix is relatively easy in auth.py by changing the method FacebookGraphMixin._on_get_user_info to remove modifiers prior to mapping the results. Something like this at the start of the method would do\n\nfields = [field.split('.', 1)[0] for field in fields]\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rskumar": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1414", "title": "Doc/Wiki/Example on how to write non-blocking drivers to support Tornado IOLoop", "body": "Need official extensive doc/wiki with examples on how to write non-blocking networking IO based drivers to interact with external application.\nThat would be nice addon for developers who want to write libraries around Tornado. And it will benefit tornado community.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coffeeowl": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1334", "title": "iostream - cancel read_until_close", "body": "Hello,\n\nI have a problem with switching a stream to TLS, it throws an exception saying that the stream is not idle. I guess it is because I have read_until_close called on it, so there is a read callback, but there is no actual data anywhere, so the stream could be switched to TLS.\n\nMaybe the solution is to use another read method which reads only some amount of data, but the problem is that I don't have a clear condition on where to stop waiting for new data, the process can take time and it is governed by a state machine, regex would not work there, basically I am implementing an XMPP client lib on tornado.iostream\n\nAny suggestions how to handle that? Is it possible to clear callbacks installed by read_until_close?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misuzu": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1329", "title": "Not all WebSocket servers recognize WebSocket headers sent with WebSocketClientConnection.", "body": "tornado.httputil._NormalizedHeaderCache class convert Sec-WebSocket-Key and Sec-WebSocket-Version headers to Sec-Websocket-Key and Sec-Websocket-Version (s in Websocket is lowercase).\n\nSo some servers can misinterpret WebSocket version (telnet):\n\n```\nGET /WebSocketConnection HTTP/1.1\nHost: <host>\nConnection: Upgrade\nOrigin: null\nSec-Websocket-Key: LS34zB0raD7SH1iW6KppXQ==\nSec-Websocket-Version: 13\nUpgrade: websocket\n\n\nHTTP/1.1 101 Web Socket Protocol Handshake\nUpgrade: WebSocket\nConnection: Upgrade\nWebSocket-Origin: null\nWebSocket-Location: ws://<host>/WebSocketConnection\n```\n\nBut with capital s all is fine:\n\n```\nGET /WebSocketConnection HTTP/1.1\nHost: <host>\nConnection: Upgrade\nOrigin: null\nSec-WebSocket-Key: LS34zB0raD7SH1iW6KppXQ==\nSec-WebSocket-Version: 13\nUpgrade: websocket\n\n\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: GXPYujuKxDumAkK84+pWXLTJ1RY=\n```\n\nNow i can connect to server only when i monkeypatch tornado.httputil._NormalizedHeaderCache:\n\n``` python\nimport tornado.httputil\n\n\nclass NormalizedHeaderCache(tornado.httputil._NormalizedHeaderCache):\n    def __missing__(self, key):\n        normalized = \"-\".join([w.capitalize() for w in key.split(\"-\")])\n        # Fix WebSocket issue\n        normalized = normalized.replace('Websocket', 'WebSocket')\n        self[key] = normalized\n        self.queue.append(key)\n        if len(self.queue) > self.size:\n            old_key = self.queue.popleft()\n            del self[old_key]\n        return normalized\n\n\ntornado.httputil._normalized_headers = NormalizedHeaderCache(1000)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xihan88": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1243", "title": "Anyway to modify sec_websocket_protocol using websocket_connect()?", "body": "I use original websocket in javascript, which is OK to add a subprotocol; And I use tornado httpserver to handle websocket subprotocols, which is also perfect; Now I'm trying to crate a python websocket client, but I figure out that it seems impossible to change the subprotocol using websocket_connect(). So do you plan to add sudprotocol as an argument in the future? Or I should use another way to create a websocket client which supports subprotocol in python?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shimondoodkin": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1239", "title": "enhencment: auto reload with checking file finished uploading and syntax checking", "body": "not sure how to add this to code. maybe someone to add this to project.\nthis is the first time i wrote python \n\n``` python\nimport os\nimport tornado.ioloop\nimport tornado.web\nimport tornado.autoreload\nimport time\nfrom datetime import datetime\nimport json\n\ncompileerr=\"\"\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        global compileerr\n        if compileerr!=\"\":\n            self.write(\"<pre>Compile error:\\n\"+compileerr);\n            #self.render(\"index.html\")\n        else:\n            try:\n                with open(os.path.join(os.path.dirname(__file__), 'index.html')) as f:\n                    self.write(f.read())\n            except IOError as e:\n                self.write(\"404: Not Found\")\n\nes_empty_result={ \"hits\": {\"hits\": [], \"total\": 0, \"max_score\": None}, \"_shards\": {\"successful\": 5, \"failed\": 0, \"total\": 5 }, \"took\": 3, \"timed_out\": False }\n\n#some apis\nclass List1Handler(tornado.web.RequestHandler):\n    def get(self):\n        global es_empty_result\n        id=self.get_argument(\"id\", default=None, strip=False)\n        user=self.get_argument(\"user\", default=None, strip=False)\n        self.write(json.dumps(es_empty_result, sort_keys = False, indent = 4))\n\nclass List2Handler(tornado.web.RequestHandler):\n    def get(self):\n        global es_empty_result\n        id=self.get_argument(\"id\", default=None, strip=False)\n        user=self.get_argument(\"user\", default=None, strip=False)\n        self.write(json.dumps(es_empty_result, sort_keys = False, indent = 4))\n\napplication = tornado.web.Application([\n(r\"/$\", MainHandler),\n(r\"/list1$\", List1Handler),\n(r\"/list2$\", List2Handler),\n(r\"/.*\\.py$\", MainHandler),# don't serve python as static files \n(r\"/(.*)$\", tornado.web.StaticFileHandler, dict(path=os.path.dirname(__file__))),\n ])\n\nif __name__ == \"__main__\":\n    import py_compile\n    import logging\n    from threading import Timer\n\n    def ontimer_reload(prev_mtime,filepath,mainfile): # wait for file to stop changing, than check syntax,than reload\n        global compileerr\n        statinfo=os.stat(filepath)\n\n        if statinfo.st_size>0 and statinfo.st_ctime==statinfo.st_mtime and statinfo.st_mtime-prev_mtime==0: \n            compiled=False \n            try:\n                py_compile.compile(mainfile,doraise=True)\n                compiled=True\n            except py_compile.PyCompileError as e:\n                compileerr=str(e)\n                print \"reloading: compile error...\" \n                print e;\n            if compiled:\n                logging.info(\"%s modified; restarting server\", filepath)\n                tornado.autoreload._reload()\n        else:\n            print \"reloading: waiting for file upload complete.\"\n            Timer(0.3, ontimer_reload,(statinfo.st_mtime,filepath,mainfile)).start()\n    #usage:Timer(0.3, ontimer_reload,(path,__file__)).start()\n\n    def new_check_file(modify_times, filepath):\n        try:\n            modified = os.stat(filepath).st_mtime\n        except Exception:\n            return\n        if filepath not in modify_times:\n            modify_times[filepath] = modified\n            return\n        if modify_times[filepath] != modified:\n            modify_times[filepath] = modified\n            Timer(0.3, ontimer_reload,(modified, filepath,__file__)).start()\n            #monkey patch tornado reload class\n    tornado.autoreload._check_file = new_check_file\n\n    print \"server start\"\n    application.listen(8888)\n\n    #def beforereloading():\n    #   print \"reloading: exiting...\"\n\n    #tornado.autoreload.add_reload_hook(beforereloading)\n    #tornado.autoreload.watch(os.path.abspath('./file')) #additional file to watch\n    tornado.autoreload.start()\n    tornado.ioloop.IOLoop.instance().start()\n    tornado.autoreload.wait()\n\n\"\"\"\npaste large text here to test like duplicate the folowing text until 1000 lines\n\nHOWTO'S AND FAQ'    Difference between mtime, ctime and atime \n\nA common mistake is that ctime is the file creation time. This is not correct, it is the inode/file change time. mtime is the file modification time. A often heard question is What is the ctime, mtime and atime?.This is confusing so let me explain the difference between ctime, mtime and atime.\nctime\nctime is the inode or file change time. The ctime gets updated when the file attributes are changed, like changing the owner, changing the permission or moving the file to an other filesystem but will also be updated when you modify a file.\n\nmtime\nmtime is the file modify time. The mtime gets updated when you modify a file. Whenever you update content of a file or save a file the mtime gets updated.\n\nMost of the times ctime and mtime will be the same, unless only the file attributes are updated. In that case only the ctime gets updated.\n\natime\natime is the file access time. The atime gets updated when you open a file but also when a file is used for other operations like grep, sort, cat, head, tail and so on.\n\"\"\"\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "socketpair": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1223", "title": "Exceptions in data_received() (while using @stream_request_body) are not handled properly", "body": "To overcome that, I use:\n\n```\n@stream_request_body\nclass RestoreHandler(RequestHandler):\n    ...\n    @gen.coroutine\n    def data_received(self, chunk):\n        try:\n            yield buggy_operation()\n        except Exception:\n            self.set_header('Connection', 'close')\n            self.set_status(413, 'Upload aborted')\n            self.finish()\n    ...\n```\n\nIf I do not catch exception, connection silently aborted (as browser said). But instead, Tornado should respond with HTTP response and close connection.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7622457", "body": "@bdarnell, why you have not used `conn = self._connections.pop()` ?! you have already checked that `self._connections` is not empty earlier.\n\nIn any case, if `self._connections` become empty, your original contruction will raise `StopIteration` exception. In case of using `.pop()`, `KeyError` exception will occur.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7622457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7623671", "body": "sorry, i'm idiot.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7623671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hgenru": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1154", "title": "Tornado 4.0.1, AsyncHTTPTestCase, IOLoop is already running", "body": "After the upgrade, there was a problem with the use of tornado.testing tools.\n\nI'm run this simple code: https://gist.github.com/hgenru/47ad817a199de2e33333\n\n```\n(env)\u279c pip install tornado==3.2\n\n(env)\u279c env/bin/nosetests\n.\n----------------------------------------------------------------------\nRan 1 test in 0.082s\n\nOK\n\n\n(env)\u279c pip uninstall tornado && pip install tornado\n(env)\u279c env/bin/nosetests\nE\n======================================================================\nERROR: test_response (test.HelloHandlerTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/testing.py\", line 118, in __call__\n    result = self.orig_method()\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/testing.py\", line 494, in post_coroutine\n    timeout=timeout)\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/ioloop.py\", line 418, in run_sync\n    return future_cell[0].result()\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/concurrent.py\", line 109, in result\n    raise_exc_info(self._exc_info)\n  File \"<string>\", line 3, in raise_exc_info\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/gen.py\", line 160, in wrapper\n    result = func(*args, **kwargs)\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/testing.py\", line 480, in pre_coroutine\n    result = f(self, *args, **kwargs)\n  File \"/home/hgen/test/47ad817a199de2e33333/test.py\", line 15, in test_response\n    res = self.fetch('/')\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/testing.py\", line 373, in fetch\n    return self.wait()\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/testing.py\", line 303, in wait\n    self.io_loop.start()\n  File \"/home/hgen/test/47ad817a199de2e33333/env/lib/python3.4/site-packages/tornado/ioloop.py\", line 704, in start\n    raise RuntimeError(\"IOLoop is already running\")\nRuntimeError: IOLoop is already running\n\n----------------------------------------------------------------------\nRan 1 test in 0.075s\n\nFAILED (errors=1)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "blakev": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1152", "title": "Implement PipeIOStream alternative for Windows.", "body": "In `tornado.iostream` the `_set_nonblocking` [is only not None](https://github.com/tornadoweb/tornado/blob/master/tornado/iostream.py#L44-L47) on posix systems...otherwise it defaults and causes `PipeIOStream` to not work on Windows. I'm requesting a non-breaking alternative even if the functionality doesn't match the intended implementation as is on Unix.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thehesiod": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1141", "title": "Order of Operations issue in constructor to RequestHandler", "body": "currently it first calls self.clear() and then self.initialize().  This is an issue if you've overridden set_default_headers and initialize and relies on initialization parameters set from an initialize since clear() eventually calls set_default_headers.\n\nI recommend self.initialize() should be called before self.clear()\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Knio": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1130", "title": "Update blog example to use GoogleOAuth2Mixin instead of GoogleMixin", "body": "`GoogleMixin` docs read:\n\n```\nDeprecated since version 4.0: New applications should use GoogleOAuth2Mixin below\ninstead of this class. As of May 19, 2014, Google has stopped supporting\nregistration-free authentication.\n```\n\nIt would be nice if the blog example was updated to reflect the new usage.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "virtuald": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1121", "title": "Provide a mechanism to determine if there is an IOLoop on the current thread", "body": "What I would like to be able to do is implement some function that is able to do some operation regardless of what thread it's on.\n\n```\nif IOLoop.has_ioloop():\n    # do some async thing here\nelse:\n   IOLoop.instance().add_callback( async_thing_here )\n```\n\nThe semantics of IOLoop.current() don't meet this, because it will _always_ return something if an IOLoop has been initialized somewhere. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "remh": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1111", "title": "Pycurl violates RFC 2616/10.3.2 and switch from POST to GET", "body": "Hi there,\n\nOne of our user is using a proxy that sends a 301 for a redirection.\n\nUnfortunately by default curl will change a POST method to a GET when following such a redirection.\n\nIt is possible to change that behavior by setting CURLOPT_POSTREDIR to 3.\n\nhttp://stackoverflow.com/questions/8156073/curl-violate-rfc-2616-10-3-2-and-switch-from-post-to-get\n\nWould it be possible to let the possibility to override that parameter ?\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kmike": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1110", "title": "Don't use BytesIO to make interface of read-only data file-like", "body": "Hi,\n\nWhen doing https://github.com/tornadoweb/tornado/pull/1109 and checking https://github.com/scrapy/scrapy/pull/803 I've run a couple of benchmarks:\n- http://nbviewer.ipython.org/gist/kmike/b23a3b12fac6654b1c90 (Python 3.4)\n- http://nbviewer.ipython.org/gist/kmike/4e79964c1d589faef174 (Python 2.7)\n\nThe problem is that BytesIO copies the data, so using it just to make interface file-like for readonly data could be quite wasteful. \n\nI believe this is a problem in [curl_httpclient](https://github.com/tornadoweb/tornado/blob/master/tornado/curl_httpclient.py), [simple_httpclient](https://github.com/tornadoweb/tornado/blob/master/tornado/simple_httpclient.py) and [wsgi](https://github.com/tornadoweb/tornado/blob/master/tornado/wsgi.py) tornado modules, and by using another wrapper (or at least by falling back to cStringIO in Python 2.x) they can be made faster and more memory efficient. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xose": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1099", "title": "web.authenticated: allow 403 without redirection", "body": "The `@web.authenticated` decorator will always redirect with a 302 when the user is not logged in and the method is GET or HEAD. There is currently no way to return a 403 error for GET/HEAD requests using the decorator.\n\nThis is OK if the request comes form a web browser that expects HTML, but not if you are developing an API that's meant to be consumed using other methods.\n\nHere's my proposal:\n- Allow the `get_login_url()` method to return `None`. Have the default implementation return `None` when `login_url` is not set in the config instead of raising an exception.\n- Have `@web.authenticated` return a 403 when `get_login_url()` returns `None` instead of redirecting.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "seibert": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1095", "title": "Provide control over gzip compression level in tornado.web.Application", "body": "By default, `GzipFile` in the Python standard library uses a compression level of 9 (the highest available): https://docs.python.org/2/library/gzip.html#gzip.GzipFile\n\nMost other applications (like the gzip command line tool) default to level 6 or lower.  The difference in throughput can be something like a factor of 3-5x on a single core, leading many people to incorrectly conclude that using gzip compression with Tornado is \"too slow\" compared to other web servers (like node.js, for example, which led me to discover the cause of this problem).\n\nIt would be nice if the `gzip` option to `tornado.web.Application` could also be a number (1-9), indicating the `compresslevel` to pass to `GzipFile`.  If `True` is passed, I would also advocate that a default value of 6 is used, rather than the standard library default.  The compression factor will be very close to that of level 9, but throughput will be much larger.\n\nIf this sounds reasonable, I can make a PR.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "liamcoau": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1094", "title": "HTTPHeaders.get_list() improve functionality", "body": "Currently if in the headers the `Accept` header had a value of \n`text/*, text/html, text/html;level=1, */*`,\nthen\n`self.request.headers.get_list(\"Accept\")`\nwould return:\n`[\"text/*, text/html, text/html;level=1, */*\"]`\n\nThe documentation for get_list says:\n\"Returns all values for the given header as a list.\"\n\nWhen I originally read this I thought the multiple accept types would be broken up and all added to a list such as:\n`[\"text/*\", \"text/html\", \"text/html;level=1\", \"*/*\"]`\n\nI think that this would be much more useful and make more sense, or at least it would be in the project I'm working on.\n\nI achieved the same effect by the following code:\n\n```\nresponse_type = self.request.headers.get_list(\"Accept\")\nresponse_type = [item.strip() for index in range(len(response_type)) for item in response_type[index].split(\",\")]\n```\n\nAlso it would be helpful if the documentation was explicit about what's returned if the header `name` wasn't given.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "moijes12": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1050", "title": "get_ssl_certificate is untested", "body": "The HTTPRequest.get_ssl_certificate does not contain any tests. This should be fixed especially since it can be called in multiple ways (with different values for the binary_form parameter) and because it is a way to return the security certificate.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1051", "title": "Fix for ticket #904 - Addition of get_claimed_ip() to HTTPRequest", "body": "As per ticket description of ticket #904, a method to return the first\npublic IP address from X-Forwarded-For should be implemented. This\nupdate contains the below changes:\n1. In tornado/httpserver.py\n   HTTPRequest.get_claimed_ip() is implemented which simply returns\n   remote_ip\n2. In tornado/test/httpserver_test.py\n   The test for verifying ip_headers already existed in XHeaders. I simply\n   modified the internal class Handler to retrieve the output of\n   get_claimed_ip from the request messge and write it to the dictionary.\n   The same tests that were written for verifying ip_headers have been\n   re-used except that they now check that remote ip equals claimed_ip\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rferreira": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1003", "title": "Better UDP support with a built in UDPServer class ", "body": "Let me know if this has been attempted/discussed in the past but having a sensible UDPServer class (the same way tornado provides a TCPServer one) would be tremendously helpful. I know there are examples sprinkled around the internets on how to use torando's io_loop on a UDP socket but it's all quite messy. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/1003/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/106137", "body": "I should have this fixed in my fork. Let me know what you think and feel free to pull. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/106137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jason64": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/991", "title": "UnicodeDecodeError in template", "body": "If the `template_path` setting is an unicode string and some template file contains non-ASCII characters, then tornado raises the following exception:\n\n``` python\n...\n  File \"/home/venv/local/lib/python2.7/site-packages/tornado/template.py\", line 633, in write_line\n    print(\"    \" * indent + line + line_comment, file=self.file)\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xd0 in position 18: ordinal not in range(128)\n```\n\nCause of the exception: the **line** variable is a `str` object containing non-ASCII characters and the **line_comment** variable is an `unicode` object.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mulka": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/987", "title": "Calling close() on an IOStream doesn't cancel pending read callbacks", "body": "I don't know if this is a bug or expected behavior, but I think I'm running into a situation where I want to close a stream, and then immediately reconnect. The problem is that when I call close on it, it doesn't cancel cancel read callbacks and so I end up getting AssertionError: Already reading. Is this something that can be fixed in tornado, or do I need to figure out a workaround. Any ideas?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thijsvandien": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/902", "title": "HTTP 405 response must include an Allow header", "body": "When an `HTTPError(405)` is raised, either manually or automatically because of not implementing a handler, Tornado does not set the officially required Allow header. Worse, if I set it myself, it is erased by `RequestHandler.send_error`. Bluntly said, it means that Tornado does not follow HTTP standards.\n\nWhen addressing this, please consider adding a possibility to override the list of supported methods, rather than looking only at the present handlers; I built my own mechanism to limit their usage at certain URLs:\n\n```\nclass BaseHandler(RequestHandler):\n    def initialize(self, *args, **kwargs):\n        self.allowed_methods = kwargs.get('allowed_methods', type(self).SUPPORTED_METHODS)\n\n    def prepare(self):\n        if self.request.method not in self.allowed_methods: raise HTTPError(405)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sonicisthebest": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/892", "title": "Inconsistent behaviour of static file serving", "body": "If Tornado (3.1) is not running in debug mode, when a static file is accessed for the first time the included StaticFileHandler will generate an MD5 hash for it and store that hash in perpetuity. The handler will then read the content of the file and serve it up with the corresponding version and ETag. The next time the _same_ client requests the file we get a 304 response and the client uses its own copy from its cache.\n\nNow let's modify the file and change something interesting in the static file. If the original client now requests the file again, we still get the cached copy from the local browser since the ETag is linked to the cached hash in Tornado.\n\nConsider now what happens if another distinct client that has not accessed the file before tries to fetch the same static file. Tornado will happily serve up the file, but it reads it off the disk again, and that client gets the new version of the file, but since Tornado already has a cached hash for that file it serves the new file with the old ETag. So now we have two different versions of the same file with the same ETag being shown on two different clients.\n\nSome ideas:\n- Cache the file along with the hash and always serve it consistently -- memory issues.\n- Update the hash when the file is read by the second client -- inconsistent state, the original client shouldn't get a different response on the off chance that another client without a locally cached copy has fetched since the original client did.\n- Change the ETag / revision hashing to avoid assigning the same hash two different versions of the file -- this would oblige some kind of stat call to see if the file has changed and would always serve the most recent version -- it would also need to check the hash is up to date when using static_url calls.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/892/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gagern": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/868", "title": "Accept international RFC 2231 headers", "body": "[RFC 2388 Section 4.4](http://tools.ietf.org/html/rfc2388#section-4.4) states:\n\n> if the file name of the sender's operating system is not in US-ASCII, the file name might be approximated, or encoded using the method of [RFC 2231](http://tools.ietf.org/html/rfc2231).\n\n[The current `tornado.httputil._parse_header` implementation](https://github.com/facebook/tornado/blob/1f45fc827a386b53530b3d2e1c3a70747c6e1189/tornado/httputil.py#L422) does not allow for the second of these alternatives: it does not properly decode a header of the form\n\n```\nContent-Disposition: form-data; name=\"fieldname\";\n file*=utf-8''T%C3%A4st.txt\n```\n\nThe same holds for non-ascii names of form fields. You can use [the `email.utils.decode_params` function](http://docs.python.org/2/library/email.util.html#email.utils.decode_params) to perform this kind of decoding, as well as handle the continuations described in that same RFC.\n\n_This report here is the counterpart to shazow/urllib3#119, where this bug caused a test to fail once a proper standards-conforming encoding was implemented._\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/869", "title": "Accept header parameters in RFC 2231 format.", "body": "This should fix facebook/tornado#868. Someone should test whether this works as intended with Python 2, though. In gagern/urllib3@e11e03628f8b82021a74ba7f5b39ce9ad9011382 I had to encode the input from unicode to bytes for this to work. Not sure why, though, and also not sure whether this might be handled in some other location. Python 3 accepts this modification without issues.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6045753", "body": "Whoops! Looks like something I added as a temporary hack during debugging, and then accidentially left in place. This explains why I had two places stripping quotation marks: this one and my own line 452. I guess I'd better remove lines 442 through 444. My code doesn't provide a replacement for line 444, though. That came from f249ee3ea9a2a6a4b479da3b34be29af5d1a0a63, which copied it from cpython, where it was added in http://hg.python.org/cpython/rev/846ba2972d7c. But that line can be safely removed, since `email.utils` will [remove quotes](http://hg.python.org/cpython/file/7a125913a375/Lib/email/utils.py#l234) and later on [add quotes without escaping existing ones](http://hg.python.org/cpython/file/7a125913a375/Lib/email/utils.py#l317). To play it safe, I'll include backslashes and quotation marks in my doctest.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6045753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "SuprDewd": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/820", "title": "Laziness of RequestHandler.current_user", "body": "The RequestHandler.current_user getter defers the evaluation of RequestHandler.get_current_user until it's needed. However, when either RequestHandler.get_template_namespace or UIModule.**init** is called, the current_user getter is called, and get_current_user is evaluated. This should be avoided, since the current request might not need the current user at all, and get_current_user might be expensive to evaluate.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kzahel": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/778", "title": "simple_httpclient connection pooling (feature)", "body": "I was considering using Tornado's httpclient to replace a pycurl implementation but saw that simple_httpclient does not do connection pooling. Perhaps it would make sense to implement in by pulling in from urllib3's connection pool.\n\nhttps://github.com/shazow/urllib3/blob/master/test/test_connectionpool.py\n\nDoes this seem like the right approach, or would you rather tornado rolls its own idea of a connection pool?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/384017", "body": "nice fix!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/384017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/384019", "body": "neat.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/384019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/19558", "body": "base64.b64encode would be even more efficient, I was simply reporting the bug\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/19558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "paulocheque": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/756", "title": "Suggestion: add facebook_redirect_uri in settings", "body": "So we can use the following and independent code in FacebookGraphMixin:\n\n```\n        user_data = yield self.get_authenticated_user(\n            redirect_uri=self.settings['facebook_redirect_uri']\n            client_id=self.settings[\"facebook_api_key\"],\n            client_secret=self.settings[\"facebook_secret\"],\n            code=self.get_argument(\"code\"))\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "emehrkay": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/703", "title": "A way to set default values in templates", "body": "I've been trying to get some method to set a default value without any real success. In Jinja you can do:\n\n``` python\n{% set name=name or \"John Doe\" %}\n```\n\nBut that doesn't work with Tornado because name isn't defined and I can't quite figure out what in web.template to modify to get it to work.\n\nThis would be useful for situations like:\n\n``` python\n{% set input_type=input_type or \"text\" %}\n{% set value=value or \"\" %}\n{% set attrs=attrs or \"\" %}\n<input type=\"{{ input_type }}\" value = \"{{ value }}\" {{ attrs }} />\n```\n\nAm I missing something obvious? Thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/46913946", "body": "You're right (no surprise :)\n\nI think the main point that should be outlined is that you cannot define options with either parse_command_line or parse_config_file. One needs to call define directly and use either, or both, function(s) to override what was set with define. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/46913946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nisanharamati": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/691", "title": "HTTPError creation raises an exception when connection is severed by the remote server during a long HTTPRequest", "body": "When the remote server is shutdown before an HTTPRequest completes, the HTTPError exception fails to instantiate due to a TypeError in the string formatting of the error message. This prevents the real exception from being rethrown and passed in to the HTTPResponse object.\n\nA non-integer code argument is passed at the exception instance creation. This prevents HTTPClient from creating the appropriate 5xx HTTPError to pass to the client for handling, as the compiler raises its own exception at trying to format a non-integer into an integer format place holder.\n\nApart from fixing the offending code that tries to create the HTTPError instance with non-integer code parameter (I couldn't actually track that one down to the source), I suggest to change the format string to use non-type specific formatting as per the mini string formatting language spec. This will at least prevent the runtime from choking at Exception creation.\n\nSuggested fix: \n\nIn httpclient.py\n\n```\nclass HTTPError(Exception):\n    ....\n    def __init__(self, code, message=None, response=None):\n        self.code = code\n        message = message or httputil.responses.get(code, \"Unknown\")\n        self.response = response\n        Exception.__init__(self, \"HTTP %d: %s\" % (self.code, message))\n```\n\nchange \n\n```\nException.__init__(self, \"HTTP %d: %s\" % (self.code, message))\n```\n\nto\n\n```\nException.__init__(self, \"HTTP {}: {}\" % (self.code, message))\n```\n\nletting Python manage the types.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "syrusakbary": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/629", "title": "Preprocess templates", "body": "Hello,\n\nI want to apply a function to the template source before is parsed by the Tornado Template engine.\n\nLike Jinja2 Preprocessor method http://jinja.pocoo.org/docs/api/#low-level-api\nCan I do something like this without touching the template loader?\n\nIf not, should be good add this option the templates (preprocess = [method1,method2,..])\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "igungor": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/622", "title": "xgettext cannot extract strings from templates", "body": "Consider this example:\n\n<input type=\"text\" value={{ _(\"search term\") }} />\n\nI can extract the _() wrapped string with xgettext properly but when i translate and use tornado.locale.load_gettext_translations(), I get the translation of \"search\", not \"search term\".\n\nPO file is like below:\n# : templates/index.html:1\n\nmsgid \"search term\"\nmsgstr \"terim ara\"\n\nBut i only see \"terim\" in the rendered page, not \"terim ara\". The problem here is the original string is the value of an attribute and didn't escaped by double quotes, thus the returned string from load_gettext_translations() is not escaped and contains whitespace.\n\nThe returned string from the translated text should be quoted by default, otherwise all we get is the first word before the whitespace.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ianb": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/608", "title": "WebSocket connection closed on long messages", "body": "I've encountered problems sending somewhat large messages (more than 4k) from Firefox 18, and having the connection closed.  The client reports error 1006 (which is just abnormal termination).  Nothing is logged on the server.  \n\nUsing the same client code and a Node.js server I'm not getting the same behavior, which is leading me to believe it's Tornado.\n\nI don't have a repeatable case, but wanted to at least note the issue in case anyone else encounters it, as it was hard to determine the source.  Oddly this did not happen on localhost, but when connecting to a remote server.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/608/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mitechie": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/559", "title": "Tornado httpclient fails requesting a url that urllib works with.", "body": "I've hit a url that the httpclient it failing for that works with urllib. Below is a snippet of code with the url and showing it produces a 400 bad request from the httpclient side.\n\n```\nimport urllib\nfrom tornado import httpclient\n\nurl = \"https://blogs.msdn.com/b/jmeier/archive/2012/05/13/the-rapid-research-method.aspx?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed: jmeier (J.D. Meier's Blog)&Redirected=true\"\n\nfh = urllib.urlopen(url)\n# This will load up the content just peachy...\ncontent = fh.read()\n\n# This will get me a 400 bad request response.\nhttp = httpclient.HTTPClient()\ntry:\n    response = http.fetch(url)\n    print \"Content should be in here.\"\nexcept Exception, e:\n    print \"but it goes BOOM!\"\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KevinHua": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/517", "title": "on_finish() is not called when the client closed first.", "body": "class Webbench(tornado.web.RequestHandler):\n    count = 0\n    fini_count = 0;\n    closed_count = 0;\n\n```\n@tornado.web.asynchronous\ndef get(self, *args, **kwargs):\n    Webbench.count += 1\n    logging.debug(\"Webbench client count %d\" % Webbench.count)\n\n    self.write(\"hello world \" + str(Webbench.count))\n    // the finish() cause on_finish() being called.\n    // self.finish()\n\ndef on_finish(self):\n    Webbench.fini_count += 1\n    logging.debug(\"Webbench finished %d, closed %d, total %d\" \n                  % (Webbench.fini_count, Webbench.closed_count, Webbench.count))\n\ndef on_connection_close(self):\n    // when client reset or closed connection, the on_finish() was not called.\n    tornado.web.RequestHandler.on_connection_close(self)\n\n    Webbench.closed_count += 1\n    logging.debug(\"Webbench closed %d, finished %d, total %d\" \n                  % (Webbench.closed_count, Webbench.fini_count, Webbench.count))\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tzuryby": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/462", "title": "feature request: ability to set _xsrf cookie expiration", "body": "I wanted to be able to set `_xsrf` expiration to 1 day rather than current 30 days.\nI have search the code to see where this happens and found this.\n\n```\n    @property\n    def xsrf_token(self):\n        \"\"\"The XSRF-prevention token for the current user/session.\n\n        To prevent cross-site request forgery, we set an '_xsrf' cookie\n        and include the same '_xsrf' value as an argument with all POST\n        requests. If the two do not match, we reject the form submission\n        as a potential forgery.\n\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n        \"\"\"\n        if not hasattr(self, \"_xsrf_token\"):\n            token = self.get_cookie(\"_xsrf\")\n            if not token:\n                token = binascii.b2a_hex(uuid.uuid4().bytes)\n                expires_days = 30 if self.current_user else None\n                self.set_cookie(\"_xsrf\", token, expires_days=expires_days)\n            self._xsrf_token = token\n        return self._xsrf_token\n```\n\nSo I wonder if there was a way to do so easily, e.g.\n\n`define(\"xsrf_cookie_expiration\", default=1, help=\"_xsrf cookie expiration days\", type=int)`\n\nand within the `xsrf_token` implementation:\n`expires_days = options.xsrf_cookie_expiration if self.current_user else None`\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/318189", "body": "that was quite quick. ;-)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/318189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "oyerli": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/455", "title": "Inconsistency in the IOStream.closed method", "body": "Hi,\nThe fix in the commit 501f596 caused a problem in my async web server application:\nI expect IOStream.closed method to return true AS SOON AS the close_callback is called. (This was the previous behaviour since it was not waiting for the pending callbacks).  Now, the closed() method returns true but the close_callback waits the pending callbacks to finish. Hence the connection is not actually closed. Is it the intended behaviour?\n\nI expect the closed() method to return true after all pending callbacks finished AND the close_callback is called. Otherwise we cannot know if the connection is actually closed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidgaleano": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/374", "title": "WSGIContainer does not support Keep-Alive", "body": "Apache Benchmark hangs when setting option _-k_ if using FallbackHandler to a WSGIContainer.\n\nI think the problem is that WSGIContainer does not set a _Connection_ header when the request does not support HTTP 1.1.\n\nCopying the code that sets the headers from `RequestHandler.clear` to `WSGIContainer.__call__` fixes the issue:\n\n``` python\n        if not request.supports_http_1_1():\n            if request.headers.get(\"Connection\", '').lower() == \"keep-alive\":\n                headers.append((\"Connection\", \"Keep-Alive\"))\n```\n\nBtw, I have seen some clients sending a lowercase value for _Keep-Alive_, so I also suggest doing `.lower() == \"keep-alive\"` on `RequestHandler.clear`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cheesedoily": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/324", "title": "SimpleAsyncHTTPClient and Connection:Keep-Alive", "body": "SimpleAsyncHTTPClient does not support keep-alive requests, or at least not obviously so.\n\nHappy to fork this and build it in if pointed in the right direction.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alekstorm": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/275", "title": "Module importing in templates must be block-local", "body": "Modules imported with `{% import <module> %}` outside a block cannot be used inside it - they must be imported within its scope.  I would expect imports at file scope to be available to all blocks.\n\n```\n{% import os %}\n{{os}} {% comment \"works\" %}\n{% block \"block\" %}\n    {{os}} {% comment \"error\" %}\n    {% import os %}\n    {{os}} {% comment \"works\" %}\n{% end %}\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/553", "title": "Add {%asynchronous%} directive to allow templates to call asynchronous functions with gen.Task and return their results through a callback", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/541", "title": "Finish Jython compatibility", "body": "I cherry-picked Ben's excellent start on Jython support from his personal fork and finished up the rest.\n\nNotes that aren't covered in commit messages:\n- Jython 2.5.2's `socket.inet_pton()` incorrectly reports domain names like 'www.google.com' as valid IP addresses. There isn't really a way around this short of parsing IP addresses ourselves, and it's fixed in 2.5.3b1 anyway.\n- The IP address returned from `socket.accept()` is `unicode`, not `str`. I have no idea why, and I've filed a report [here](http://bugs.jython.org/issue1928). The pull request includes a workaround.\n- The Jython 2.7 alphas would probably be working, if not for a glaring bug that I've filed [here](http://bugs.jython.org/issue1927).\n- Since all the tests pass except the (minor) one mentioned above, I took the liberty of explicitly listing support for CPython, PyPy, and Jython in the README. If anyone objects, this can easily be reverted.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/505", "title": "Enable percent-decoding of URI path before matching to RequestHandler regexes", "body": "The encoding to decode from is specified through the new `path_encoding` Application setting. If left unspecified, the current behavior is assumed (no percent-decoding).\n\nHTTPClient now percent-encodes URL characters not in either the reserved or unreserved sets (essentially, anything outside the ASCII range), so URL strings containing Unicode can now be fetched.\n\nThe `url_concat` utility function now encodes arguments to UTF-8 before percent-encoding them.\n\nTests updated.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1039696", "body": "Right, because it's a classmethod, and because it takes the file path, rather than the response body. I'll change the name.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1039696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "enki": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/157", "title": "Add some way to close an ongoing HTTPRequest (AsyncHTTPClient)", "body": "just call _finish on the handle?\n\ni have two use cases: one is to restart a streaming connection, the other is to limit the amount of data i want to read (not interested in downloading gigabytes)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/113", "title": "Get the content of the same block in parent template like block.super in Django", "body": "Maybe i can do that myself, but i really don't know how work the template system, so i think it's really fast to implement this for a person who know the system\n\nSorry for my language because I am french\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/447297", "body": "Oh i forgot to pull change before add this issue, sorry. This commit fix this bug\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/447297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shuge": {"issues": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/89", "title": "add unicode URLSpec support", "body": "Please add unicode URLSpec support.\n\nPatch:\n\n```\ndiff --git a/tornado/web.py b/tornado/web.py\nindex e51948a..cd9a6a4 100644\n--- a/tornado/web.py\n+++ b/tornado/web.py\n@@ -1368,7 +1368,7 @@ class URLSpec(object):\n         \"\"\"\n         if not pattern.endswith('$'):\n             pattern += '$'\n-        self.regex = re.compile(pattern)\n+        self.regex = re.compile(pattern, re.UNICODE)\n         self.handler_class = handler_class\n         self.kwargs = kwargs\n         self.name = name\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/89/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258928", "body": "I'm not sure it works well.\n\nI'm deprecated normal name/Unicode String as key/argument\n\n```\n/obj_type/name\n```\n\nI'm use uuid instead, \n\n```\n/obj_type/uuid \n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bp1222": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3e10b90e162c5b2548d7dd0b8ef9a138999b3d23", "message": "Alter documentation to correctly state behavior (#2114)\n\nCorrectly document that the result of Condition.wait() is\r\nnot to raise a TimeoutError, but rather False."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jehiah": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/bfcf34a95b1de4a7fd8a02b6465da8c73c693760", "message": "demos/file_uploader: add missing __name__ == __main__ stanza"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8906b3afd899bafd575135c01bb7a99bab752a8e", "message": "make executable bit and shebang consistent on various source files\n\nsetup.py is intended to be run with \"python setup.py install\"\n\nsources in the tornado module which have main functions/clauses\nare intended to be run with \"python -m tornado.xxx\"\n\nvarious demos and scripts can be run directly"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/30dd0a7ad73dcef44f5d1bce5a6111784f473df3", "message": "Return HTTP 400 (Bad Request) on malformed requests"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181198", "body": "I've added a patch for this jehiah@cbe2eeb1753de7d1a16a86c6a96b5f8e7c99dd52\n\nMy approach is to add a self.get_arguments() method modeled after self.get_argument()\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181200", "body": "I've added a patch for this jehiah@cbe2eeb1753de7d1a16a86c6a96b5f8e7c99dd52 (also mentioned on Issue 26)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181202", "body": "this should be closed as the escape method in tornado/head now escapes quotes.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181205", "body": "in tornado/head xhtml_escape does escape \" as `&quot;`\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181208", "body": "tornadoweb.org explicitly states \"Tornado currently does not attempt to handle multi-line headers and some types of malformed input.\" and it recommends running behind nginx for this very reason.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181842", "body": "@stevvooe I agree. I just wanted to comment for others who stumble across this that at the moment, it should be expected.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/238617", "body": "I've also committed a fix for this \nhttp://github.com/jehiah/tornado/commit/26de8db237411ad422acca959a365dbc91d31a35\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/238617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/252344", "body": "can you give an example of something that causes such an exception?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/252344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/83996", "body": "the rest of tornado does not use `print >> sys.stderr` so it would be nice to switch this to logging.error()\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/83996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/84148", "body": "I guess i should clarify that i'm thinking of cases where logging.error would be redirected to a common log store like syslog or scribe, but the stderr message could just be lost. I see the benefits of logging to sys.stderr as it is directly prior to existing the process, so perhaps both makes sense in this case?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/84148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/106349", "body": "I'm not sure that urllib.unquote is completely the right thing here as i don't believe this should unquote %2F ('/')\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/106349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ploxiln": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f1f7d2ef8a5428ad64877191a4efafa47b9fe752", "message": "fix HTTPInputError reference for improperly terminated chunked request\n\nbug introduced in #2225"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/17210e382571b87eb1bd80972a79c9f2f4e92adc", "message": "http: read final crlf of chunked requests\n\notherwise a subsequent request on the same connection\nwill fail to be parsed\n\nthanks to @eeelin for the bug report"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/cbd53e24b6f80a232703f95c66ea1c49b407d374", "message": "style fix: wrap or ignore long lines in remaining tests"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/120afef8e7a7c0b12a28dafd30e50570e80994eb", "message": "style fix: wrap or ignore long lines in some tests\n\ntemplate_test: rewrite long lambda to avoid long line"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6682d58bf261bcaa0d0939e4fd50a496f10a32ec", "message": "style fix: wrap or ignore long lines in tornado lib sources\n\nexcluding tests"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0a1565aba237d7a611d1e7dd6d5e47a2b166f21d", "message": "style fix: misc indent flake warnings\n\nE126 continuation line over-indented for hanging indent\nE128 continuation line under-indented for visual indent\nE129 visually indented line with same indent as next logical line"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d72dc5433d5b5e6deb0695713479113abcb7861d", "message": "fix python2.7 / python3 incompatibilities\n\nconvert remaining uses of python2 print statement to print function\nadd \"xrange = range\" for python3 where needed\nadd \"ResourceWarning = None\" for python2 where needed\na bit of long/unicode type aliasing\n\nsuch issues only remained in tests/demos"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7e2fef9fb12097b49b066a4041ef0f216a25251b", "message": "style fix: 2 blank lines around top-level class and function defs\n\nflake8 codes E302 and E305"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/27bb4eab8db21bb59d7629b7ccdba6134b6110b7", "message": "fix \"unused variable\" flake warnings\n\nin iostream_test, and\nan exception var in tornado.routing that only python2 pyflakes caught"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/26591b51450ac540ad596b66fd7bfcac27417018", "message": "style fix: multiple statements on one line\n\nflake8 code E701"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/376cfc2102621b42fcf1f419b5260b33aa204c09", "message": "style fix: missing whitespace around operators\n\nflake8 codes E225 and E226"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a358a660fbd37e4ffa6b14027d5e79d8dd16337f", "message": "style fix: 3 blank lines is too many, 0 is too few\n\naround functions and classes\n\nE306 expected 1 blank line before a nested definition, found 0\nE303 too many blank lines (3)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/48e042f2af444322e6a4167087c582718afa9c6b", "message": "style fix: closing bracket indent\n\nE123 closing bracket does not match indentation of opening bracket's line"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/9b60fc5fcdf43572a0d63af7cf450ea5bc8fa27b", "message": "style fix: remove trailing whitespace"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a87fba76b574ed3b9725f2220b1a1032bfa4a00b", "message": "fix \"imported but unused\" flake warnings"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b9a7ee5542ebfe01e05e059767b80556aa2c1466", "message": "add flake8 config\n\nignore some style checks and subdirectories"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/436e91e1efd9cd4d95417162dd0b9cd74d1cda29", "message": "fix HTTPInputError reference for improperly terminated chunked request\n\nbug introduced in #2225"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/92a3798d4857bda714ecf9be789d51a942c3e487", "message": "fix iostream exc_info using missing Exception var\n\nbug introduced in #2028\nthis fix very similar to #2155"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/9ffdefda0325f37722916816b81f6613f8129361", "message": "http: read final crlf of chunked requests\n\notherwise a subsequent request on the same connection\nwill fail to be parsed\n\nthanks to @eeelin for the bug report"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e92aa20f2d49ef1d2d9589d85d12daccb4a42c04", "message": "file_upload demo: write multi-part framing in one call"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ab42d83714b5d1f0e2d29e03e9344c9ab48dfc24", "message": "file_upload demo: yield write() cb in body_producer"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6d6d44e0fcd2e37299e0ee1f2eec1b6f9be8d7fc", "message": "httpserver: remove unused no_keep_alive attribute\n\nstill a parameter passed on to HTTP1Connection"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e7cb79779582bc4a27062795ab401adbf1faea57", "message": "http1connection: add \"Connection: close\" header if appropriate\n\nWhen HTTP1Connection acts as the server, it closes the connection\nafter writing the response if the client includes the\n\"Connection: close\" header in the request, or if the `no_keep_alive`\noption is set to True in the constructor.\n\nAccording to https://tools.ietf.org/html/rfc7230#section-6.6\n\n> The server SHOULD send a \"close\" connection option in its final\nresponse on that connection.\n\nIt was possible for an Application to set the Connection header\nappropriately. But it is very helpful for tornado to take care of\nthis automatically, particularly if \"close\" was specified in a\nrequest header."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pjknkda": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b7f9f0b9116ddb09915e7e783fb9cbc82546b301", "message": "fix websocket handshake failure causes an exception"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5d4a9ab26372efd255bbb29fde55c41395ed17b1", "message": "fix websocket handshake failure causes an exception"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2cfc0d44ded0c9c5b0f700402a2b06303afc73ec", "message": "fix build failure in MSVC compiler"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/63beb7a6a7168450acb8be4d7fb3b8baee761ecc", "message": "websocket: optimize C mask extension"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "minrk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8851634dca72d76df847947a40603681b27de44e", "message": "cast curl debug messages to str\n\nsince they come in as bytes on Python 3"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5fcfb4277514ff82e2d3b17a24a26ed505b8d453", "message": "handle multiple values in X-Forwarded-Proto (#2162)"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/2fdf11ce21b2ccf77af1d448ed4a75f53cc49124", "message": "cast curl debug messages to str\n\nsince they come in as bytes on Python 3"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sebbov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7a23296100b7a796ae42df9b0c8e250b9a7a5cf1", "message": "Handle 1xx's along 204/304's"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d67d4916a362a57fd05f8f73851efe6fe1b407a1", "message": "Do not send/expect Content-Length on 1xx"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/ee76ed4d0e0ab23c56a8503e88a7a181a78ffcce", "message": "Handle 1xx's along 204/304's"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/38e9b6ca705228fea4049b885931216dea2cca70", "message": "Do not send/expect Content-Length on 1xx"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "risboo6909": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/58434a0419c8de02d08efe990e7aeaafedfbbeb0", "message": "Add family argument to OverrideResolver->resolve method (#2201)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hipro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/cffe8c8e31a4f37496d0a193939f0aeea8814d16", "message": "Update structure.rst"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shangdahao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3f599293da43720b6cc20f3770a7a62d0a8ee5ea", "message": "Make the example code in the document \"tornado.ioloop \u2014 Main event loop\" can copy-paste-run directly."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkopachev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6e266a318b82a6508bfca1fec770df6a8bf68507", "message": "Break circular references when async request handler raises exception"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SuminAndrew": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/d7ef815c847588e882381fca8444e8e39a60b98b", "message": "return 404 when routing delegate is not found"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/beb78f0fa5cd4ecb47274d15ff0b5a32526b18df", "message": "do not raise exceptions on unknown status codes"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c162ebbc4d3c372cc71c5c7aa97f645795aef704", "message": "remove redundant with_statement feature"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12634353", "body": "You should probably use `httputil.parse_response_start_line`:\nhttps://github.com/tornadoweb/tornado/blob/master/tornado/httputil.py#L787\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12634353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/19094930", "body": "Is a new cookie parser a good idea in terms of maintainability?\nDjango https://github.com/django/django/blob/b8f2c972d0be8572727081c9c07ba18a3d446273/django/http/cookie.py#L23 and Trac http://trac.edgewall.org/ticket/2256#comment:8 seem to use the same hack (django's approach is better \u2014 it patches SimpleCookie only if it is really neccessary).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/19094930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80073198", "body": "Hmm, that sounds reasonable. I guess if you need several routers per application, you could always create a single abstraction over them.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80073198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80074207", "body": "This can be done. In fact I removed the separate HTTPServerRouter class in the last versions of the commit to simplify the code.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80074207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84263399", "body": "https://github.com/tornadoweb/tornado/pull/1862 done\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84263399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268318", "body": ":ok_hand: \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268337", "body": ":ok_hand: good point\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268368", "body": "No, it doesn't. Can be easily converted to Rule instantiation\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268487", "body": "A RequestHandler subclass mostly: ApplicationRouter (the one that knows about Application -> RequestHandler relation) overrides this method in order to provide a suitable delegate https://github.com/tornadoweb/tornado/pull/1806/files#diff-035ec61639a96ccea9c8c0e302cb243bR1749\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268501", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268535", "body": "Yes, I definitely missed an elif for HTTPMessageDelegate. Thanks for pointing it out! I guess a separate test case is in order.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84268535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271050", "body": "As the routers can be nested, we must check them all until we find a suitable match (run an exhaustive search).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271366", "body": "Well, the idea was that we could use even simple callables as Matchers: rule.matcher(request)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271414", "body": ":ok_hand: \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271483", "body": "But we could stick to the Matcher interface\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271701", "body": "Same here. Will rename it to CamelCase.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84271701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84272513", "body": "Hmm, I'll look into that.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84272513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84272623", "body": "good point\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84272623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84272683", "body": ":ok_hand: \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84272683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84273118", "body": "That's true. I think I'll add a unit test for this.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/84273118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85698700", "body": "https://github.com/tornadoweb/tornado/pull/1806/commits/1ebd9b83197988463c173a34c6698596a0daa063\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85698700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85698857", "body": "https://github.com/tornadoweb/tornado/pull/1806/commits/90fe7ef7bafddf20456eea38a8ea3948b63c32bb\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85698857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85699745", "body": "https://github.com/tornadoweb/tornado/pull/1806/commits/4c41a1c06f26c5913f24e2d56d4639abd9a236d4\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85699745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85700839", "body": "https://github.com/tornadoweb/tornado/pull/1806/commits/db0cb9b75964544fefb77a1de1b704bcd1e0c1e6\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85700839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "EtiennePelletier": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/9f75d2d42d47a351b6d2974399228c47e91f15b3", "message": "Bypass UnicodeDecodeErrors in Webspider demo"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dawncold": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f7046cfbb27bd24938a6f8015e51f62b124db885", "message": "fix: iostream exception alias"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "juanpabloaj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5a40d21658491f8f2816b9a8c00da2389f8146dc", "message": "removed unused import logging"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jrdh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/395e55872f74f6dfbef225682016e8d72a4de98c", "message": "Correctly clear and create a new ioloop during autoreload (#2137)\n\n* Correctly clear and create a new ioloop during autoreload\r\n\r\nAfter the removal of the deprecated io_loop arguments from all functions,\r\nthe autoreload module stopped working as the wait function's usage was\r\nmissed in the refactor. This resulted in the start function receiving an\r\nIOLoop object as its only argument which it then used as the check_time\r\nargument resulting in errors further down the line when the check_time\r\nis expected to be an int.\r\n\r\n* Use the ioloop's add_callback function to start the ioloop on wait\r\n\r\nThere's no need to stop and clear the loop here, just add start as\r\na callback and start up the ioloop."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FlorianLudwig": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/f64d44197de0667754f3e3de5dd54709233a019d", "message": "update google oauth URLs\n\nReference: https://developers.google.com/identity/protocols/OpenIDConnect"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felliott": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/871bf81c229cb482b67d41f460e55970e8fdf922", "message": "Remove headers from HTTPServerRequest repr\n\n * In tornadoweb/tornado#1112 it was decided to stop including headers\n   in the request repr, since they are needlessly verbose and risk\n   leaking user secrets into the application log."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yiliangt5": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e5feb2745cde2a8842fa8921e48ca5670e9c6f74", "message": "feat: RedirectHandler to pass GET query"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Lancher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/3cc3e1332aba7779c273300e2beea198f07d002e", "message": "tcpclient: Introduce connect timeout (#2094)\n\nFixes #1219"}], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2221", "title": "fix autoreload argv perservation", "body": "#1983 \r\nI think I just follow your ideas. The testcase is done by two process one is to touch the `__init__.py` file and the other is the `autoreload` process, but I not sure if it is appropriate because it kind of integration test not unit test.\r\n\r\nI have another version of testcase which work for python2 because for python>=3.4, the `tornado._reload()` will run the module use current `spec` which is `testapp` not the `tornado._reload()`.\r\n\r\n```\r\nclass AutoreloadTest(unittest.TestCase):\r\n\r\n    def test_reload_module_with_argv_preservation_only_for_python2(self):\r\n        main = \"\"\"\\\r\nimport os\r\nimport sys\r\nfrom tornado import autoreload\r\n\r\n# This import will fail if path is not set up correctly\r\nimport testapp\r\nprint(autoreload._original_argv)\r\nif 'TESTAPP_STARTED' not in os.environ:\r\n    os.environ['TESTAPP_STARTED'] = '1'\r\n    sys.stdout.flush()\r\n    autoreload._reload()\r\nelse:\r\n    sys.stdout.flush()\r\n    autoreload.add_reload_hook(lambda: os._exit(0))\r\n    autoreload._reload()\r\n\"\"\"\r\n\r\n        # Create temporary test application\r\n        path = mkdtemp()\r\n        os.mkdir(os.path.join(path, 'testapp'))\r\n        open(os.path.join(path, 'testapp/__init__.py'), 'w').close()\r\n        with open(os.path.join(path, 'testapp/__main__.py'), 'w') as f:\r\n            f.write(main)\r\n\r\n        # Make sure the tornado module under test is available to the test\r\n        # application\r\n        pythonpath = os.getcwd()\r\n        if 'PYTHONPATH' in os.environ:\r\n            pythonpath += os.pathsep + os.environ['PYTHONPATH']\r\n\r\n        p = Popen(\r\n            [sys.executable, '-m', 'tornado.autoreload', '-m', 'testapp'], stdout=subprocess.PIPE,\r\n            cwd=path, env=dict(os.environ, PYTHONPATH=pythonpath),\r\n            universal_newlines=True)\r\n        out = p.communicate()[0]\r\n        self.assertEqual((str([os.path.join(os.path.dirname(os.path.abspath(tornado.autoreload.__file__)),\r\n                                            'autoreload.py'), '-m', 'testapp']) + '\\n') * 2, out)\r\n```", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1517", "title": "TCPClient with connection timeout support.", "body": "Hi, I close the previous pull-request because of some mess.\n\n1) Add `timemout` parameter to the TCPClient.connect. Use self._future to record the current undone future.\n\n2) Add a testcase which connect to a non-routable IP address to simulate the connection timeout event.\n\nThanks\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snowch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e2677780aa74fabc76126c35ec6aa5e3585b3657", "message": "FriendFeed website seems to have gone"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "noyainrain": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/fcc21d4e45038defbcd06d4d9a3fb551d3a92858", "message": "Apply changes from review"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/7f1a58f9faacb0bb0e95c2527a348195742eb866", "message": "Fix newline handling in autoreload test"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c40cdb930b2a9335af0451ef51821d4f2838c61d", "message": "Fix module autoreload for __main__ with relative imports\n\nThe fix works for Python >= 3.4, keeping the current workaround for previous\nversions. Also introduce a first unit test for autoreload. Close #2044."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nvllsvm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/445c036bc93373d88ff7895b9bb155ec1e2d214d", "message": "Test fetch full URL if applicable"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6e2bbdafd0d9dc7e20c72d18b275b8289b6ea7fe", "message": "Fetch full URL if applicable"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ajdavis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/305d559ff7608275ca7547a35f8a0cb62fcfc657", "message": "Merge pull request #2025 from chrisgavin/python3\n\nFix file upload demo on Python 2."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a0cce97f067fac9039c4396d2e1d6552402d8cf6", "message": "Merge pull request #1969 from iver56/patch-1\n\nFix typo \"you app\" -> \"your app\""}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/b343f6ece814aa7301558405e794c54e3202a011", "message": "websocket: WebSocketHandler.on_message allows coroutines\n\nFixes #1650"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2928324", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2928324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/4931556", "body": "Thanks for cleaning up after me. This comment should be updated, too: \"See resolve_test_helper.py\".\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/4931556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9729768", "body": "I dealt with similarly surprising timeouts in Travis in my toro.locks.Condition pull request.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9729768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/12485010", "body": "Neat!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/12485010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/18765683", "body": "Oops I didn't notice this patch was to the \"stable\" branch instead of master. @bdarnell shall I revert this and apply it to master instead?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/18765683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/18786455", "body": "Done, thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/18786455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24473635", "body": "Do you prefer \"deadline\" or \"timeout\"?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24473635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24473645", "body": "Needs a license header?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24473645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24494757", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24494757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24494825", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24494825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495071", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495199", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495838", "body": "If notifying a waiter makes it wake and call notify(),  I'd rather _not_ be responsible for ensuring that works correctly.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495862", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24495862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24496258", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24496258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24501657", "body": "Done. Let me know what you think of the new patch.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24501657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24641424", "body": "Good points. asyncio.Condition _does_ pair a lock. You have to call Condition.acquire, then Condition.notify, then Condition.release:\n\nhttps://code.google.com/p/tulip/source/browse/asyncio/locks.py\n\nI think this is overkill just to resemble threading.Condition and prevent nested notify. What if I defer waiters until the next loop tick?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24641424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24641443", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24641443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24901760", "body": "Oops! I'll just fix it, I think the precedent for Event.clear is too strong to omit it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24901760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24901765", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/24901765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559829", "body": "I wondered what you'd think about this. =) I'll remove the sentence and relax the test.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559916", "body": "OK, I put it back, this time with list(range(N)) to fix the Python 3 test\nbug.\n\nOn Sat, Feb 28, 2015 at 1:36 PM, Ben Darnell notifications@github.com\nwrote:\n\n> In tornado/locks.py\n> https://github.com/tornadoweb/tornado/pull/1353#discussion_r25559864:\n> \n> > -    Releasing an unlocked lock raises `RuntimeError`.\n> >   +\n> > -    `acquire` supports the context manager protocol:\n> >   +\n> > -    >>> from tornado import gen, locks\n> > -    >>> lock = locks.Lock()\n> > -    >>>\n> > -    >>> @gen.coroutine\n> > -    ... def f():\n> > -    ...    with (yield lock.acquire()):\n> > -    ...        # Do something holding the lock.\n> > -    ...        pass\n> > -    ...\n> > -    ...    # Now the lock is released.\n> >   +\n> > -    Coroutines waiting for `acquire` are granted the lock in first-in, first-out\n> \n> I'm OK with keeping the test, actually - we can remove it when and if we\n> decide to change the implementation, and in the meantime it will make sure\n> we don't accidentally break things.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tornadoweb/tornado/pull/1353/files#r25559864.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/25559916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26451904", "body": "That sounds like very interesting future work. Incidentally, maxsize=0 once worked this way in Gevent, and they changed to match the standard Queue, introducing \"Channel\" instead:\n\nhttp://www.gevent.org/whatsnew_1_0.html#api-changes\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26451904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26451933", "body": "I agree in principle, but standard queues, Gevent, and asyncio all support empty() and full():\n\nhttps://docs.python.org/2/library/queue.html#queue-objects\n\nhttp://www.gevent.org/gevent.queue.html#gevent.queue.Queue\n\nhttps://docs.python.org/3/library/asyncio-queue.html#queue\n\nIs that convincing, or should I remove these methods from Tornado queues?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26451933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452614", "body": "Agreed, good point.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452641", "body": "It's not a race, the call to self._get() happens _now_ and decrements qsize(). It's the call to set_result that's deferred.\n\nHowever, I agree with your comment about test_producer_consumer, I'll change it and remove the deferral here.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452722", "body": "Yes, PriorityQueue will make self._queue a list so it can use heappush and heappop on it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452724", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26452724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26455238", "body": "Oops. Fixed in this PR for queues, will submit a separate PR for locks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/26455238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27343852", "body": "Done - new patch.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/27343852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28596273", "body": "Oops, a scar from a previous version. Updated.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28596273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28654381", "body": "That seems like a nice idea to me, too. But those exceptions are a bikeshed--my original queues for asyncio raised the standard Full / Empty, then they were changed to special QueueEmpty / QueueFull (the history was lost with Google Code), now we're discussing aliasing them back to the standard exceptions. Let's wait for the ball to stop bouncing.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/28654381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36054017", "body": "The reason for this apparent inconsistency is a little subtle. I propose \"Note that in this case there is no `yield lock.acquire()`, because the new `async with` statement provides a single place to wait for the lock _and_ to enter a block of code.\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/36054017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41094147", "body": "travis_retry twice?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41094147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41782259", "body": "The traceback manipulation works for native test coroutines, same as for generator-based test coroutines. In Python 3.5 this coroutine's failure traceback includes \"await gen.sleep(1)\".\n\nIt's hard to test, however, because an exec'ed string doesn't give a good traceback under any circumstances. We could move this test to its own file and import it in Python 3.5+, if we're committed to testing timeout tracebacks from native test coroutines.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41782259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41805472", "body": "Apparently coroutines are _not_ a subtype of generators:\n\n```\nfrom collections.abc import Generator, Coroutine\n\ndef gen_fn():\n    yield\n\nasync def coro_fn():\n    pass\n\nprint(isinstance(gen_fn(), Generator))   # True\nprint(isinstance(coro_fn(), Generator))  # False\nprint(isinstance(coro_fn(), Coroutine))  # True\n```\n\nBut in any case you're right, `gen.coroutine` can wrap either. I'll simplify this.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41805472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41855996", "body": "On second thought, wrapping a native coroutine in `gen.coroutine` doesn't work, is this a bug in `gen.coroutine`?:\n\n``` python\nfrom tornado import gen, ioloop\n\nio_loop = ioloop.IOLoop.current()\n\nasync def coro_fn():\n    global finished\n    finished = True\n\nfinished = False\n# Works, prints \"None\".\nprint(io_loop.run_sync(coro_fn))\nassert finished\n\nfinished = False\n# Fails, prints \"<coroutine object coro_fn>\".\nprint(io_loop.run_sync(gen.coroutine(coro_fn)))\nassert finished\n```\n\nIn the wrapping process, `_make_coroutine_wrapper` calls `types.coroutine(func)`, which as expected returns the native coroutine unchanged. Then `_make_coroutine_wrapper` returns the inner `wrapper` function.\n\nWhen `wrapper` executes, it does:\n\n``` python\nresult = func(*args, **kwargs)\n```\n\n...and `result` is the coroutine object. So far the coroutine has not actually been executed (since it hasn't been awaited). `wrapper` checks if `isinstance(result, GeneratorType)`, which is **false**, so it sets the coroutine object `result` as its return value and quits.\n\nWe either need to keep this `iscoroutinefunction` check here in testing.py or (more likely?) `gen.coroutine` isn't working as intended, and it needs another branch after `isinstance(result, GeneratorType)` to do something special with native coroutines.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/41855996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80012926", "body": "I like \"_discard_future_result\".\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/80012926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/81450146", "body": "Fixed thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/81450146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402516", "body": "Is this long enough to avoid the Beazley Effect in Python 2 on multicore? That is, is there a danger that this same thread will reacquire the GIL without actually letting another thread run?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402830", "body": "This seems distracting, could you merge this explanation with the previous comment block and delete the \"else\" branch?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86402830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85465607", "body": "Sphinx will render this like:\n\n> Use Python\u2019s [Format String Syntax](https://docs.python.org/3.5/library/string.html#formatstrings) to customize how values are substituted.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/85465607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86532572", "body": "Done.\n\n.... I write Sphinx regularly and it's never not rusty, Sphinx is not possible to learn. =)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/86532572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "chrisgavin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/26e5779a50b466f8e2a5bf14808c96ebea2a4eef", "message": "Fix file upload demo on Python 2."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coldnight": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/07983e3563a0dbc9bf81fafee77cfc40b15b2486", "message": "Fix CurlAsyncHTTPClient cause memory leak with `force_instance=True`\n\nThe CurlAsyncHTTPClient will cause memory leak when set `force_instance=True`,\nbecause the `self._multi` and `self._force_timeout_callback` hold some methods\nthat belong the instance of `CurlAsyncHTTPClient`, it will cause circular reference."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aetherson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/86cc31f52992fb9d11f92de6fd5496842fea2265", "message": "fix backwards compatibility of url_concat for args=None"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "methane": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6596545bbe125f85b4fd1715b9eec68eab16d7c8", "message": "use new virtualenv"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/6998310b554acd7b8c02030e32c2f03723d6571e", "message": "travis: fix using wrong Python version"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/8128951", "body": "When `err.errno` raises exception?\n\n```\n$ python3.4\nPython 3.4.2 (default, Oct  9 2014, 01:51:14)\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> err = OSError()\n>>> print(err.errno)\nNone\n>>> err = IOError()\n>>> print(err.errno)\nNone\n>>> import socket\n>>> err = socket.error()\n>>> print(err.errno)\nNone\n```\n\n```\n$ /usr/bin/python2.6\nPython 2.6.8 (unknown, Mar  9 2014, 22:16:00)\n[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> err = IOError()\n>>> print err.errno\nNone\n>>> err = OSError()\n>>> print err.errno\nNone\n>>> import socket\n>>> err = socket.error()\n>>> print err.errno\nNone\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/8128951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/8129214", "body": "I see.  Thank you.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/8129214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10244595", "body": "I just added it for consistency with `read_buffer_size`.\nMy real use case is limiting write buffer size to avoid OOM.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10244595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "daynejones": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/8bb8795216ba4982fcd25102fc2d9aaf82dccdf3", "message": "auth: Facebook now returns auth tokens in json instead of url-encoded\n\nFixes #1992"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/28287ea88ddd2d407dbc1584b156a8db4578292c", "message": "auth: Facebook now returns auth tokens in json instead of url-encoded\n\nFixes #1992"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andreasrosdal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/745419bf420e84687c1a290289dda8e8c2090338", "message": "Use the member variables instead of arguments for self._compression_level and self._mem_level."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/5931f544116b2e277d1ee03fa847f52c8a3b260c", "message": "Add parameter compression_options=None."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/e249267ff931b945583f43705c0efe3d7f7faab4", "message": "Make compression options argument optional."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/0ee36275d470862c59913c875409ac0d7482d9b0", "message": "Fix for Python 2.7."}, {"url": "https://api.github.com/repos/tornadoweb/tornado/commits/a69b0498665248f4255ecd40f42ff2c3878599df", "message": "Add compression_level and mem_level to WebSocketHandler.get_compression_options()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iver56": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/de977baa1d743add20f7aa4e4eb0543d0b45b625", "message": "Fix typo \"you app\" -> \"your app\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JZQT": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/c2969acc4fa57980569fb23f262db64808358b36", "message": "Make `tornado.log.LogFormatter` compatible with `logging.config.dictConfig`."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "protonpopsicle": {"issues": [], "commits": [{"url": "https://api.github.com/repos/tornadoweb/tornado/commits/1189d2a8bbd3e4e78512104dbf436cf891eb0fe9", "message": "httpserver: pass no_keep_alive option to connection params"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luojiebin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2217", "title": "Finish return future", "body": "Fix issue #2061 ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eklitzke": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2139", "title": "Allow custom loader callbacks in parse_config_file()", "body": "This change is pretty straightforward: it allows users to pass a custom callback to `options.parse_config_file()` to load the config path in some custom way. I intend to use this on a personal project to load YAML configs. The test case I added loads a JSON config using the builtin Python `json` module, to avoid introducing new dependencies.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2026", "title": "make http clients implement the context manager protocol", "body": "This lets you use HTTPClient and AsyncHTTPClient as context managers. The `__exit__` method closes the underlying client.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonmorehouse": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/2103", "title": "ioloop: add loop iteration callback", "body": "I wanted to try and build better metrics around _how_ long the `ioloop` is blocked in a few applications.\r\n\r\nSpecifically, I tried to do something like:\r\n\r\n```python\r\ndef ioloop_blocked_callback(signal, frame, threshold_ms):\r\n        metrics.incr('ioloop_blocked', tags={'duration': '{}ms'.format(threshold_ms)})\r\n\r\n    for threshold in range(50, 2000, 50):\r\n        tornado.ioloop.set_blocking_signal(threshold, functools.partial(ioloop_blocked, threshold_ms=threshold))\r\n```\r\nwhich led me to realized that we couldn't actually set more than one blocked threshold.\r\n\r\nDigging in a bit further, I was thinking it might be generally useful to add a `hook` which allows us to run a callback on each iteration of the ioloop. Specifically, here, I'm curious about how long an iteration takes as well as how much work its doing. My assumption, is that its probably just as good to understand _how_ long iterations are taking because you could use it to help understand how saturated the `ioloop` is. For instance, if we're consistently returning a lot of event pairs, we know we're saturating the `ioloop`, right? \r\n\r\nI ended up implementing a `callback` with _this_ branch where I wrote metrics for the following code to try and pull out some of this context. Here's some pseudo code:\r\n\r\n```python\r\n  iter_start_ts = time.time()\r\n\r\n    def iter_callback(ncallbacks, nevents):\r\n        global iter_start_ts\r\n\r\n        metrics.incr('io_loop_iteration.count')\r\n        metrics.timing('io_loop_iteration.latency', time.time() - iter_start_ts)\r\n        metrics.histogram('io_loop_iteration.callbacks', ncallbacks)\r\n        metrics.histogram('io_loop_iteration.events', nevents)\r\n\r\n        iter_start_ts = time.time()\r\n\r\n    tornado.ioloop.IOLoop.instance().set_loop_iter_callback(iter_callback)\r\n```\r\n\r\nMaybe there's a better way to do something like this and get these metrics, which I'd totally be open to trying!\r\n\r\n**PS** oops - I meant to open this PR on my own fork first!", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "judeaugustinej": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1959", "title": "Adding example for testing in tornado.", "body": "I have add 3 example, one for http server, https server and last one for database backed tornado app.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stiletto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1898", "title": "RFC 5987 support for 'filename' in Content-Disposition", "body": "This pull request adds support for non-english filenames encoded as specified in RFC 5987.\r\n``` filename*=utf-8''%D0%B4%D0%B6%D0%B8%D0%B3%D1%83%D1%80%D0%B4%D0%B0.jpg ```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pantuza": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1880", "title": "Simple refactoring: Isolating parameters as class member variables", "body": "This pull request has only simple modifications on the Waker class.\r\n\r\nGenerally, I've isolated parameters like, buffer size, local address and maximum number of queued connections to be a class members. Ii turns the class more extensible. \r\n\r\nNo big logic modification or interface changes were made.  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shubham0704": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1868", "title": "added ajax demo", "body": "Along with demo for handling cross origin requests\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "horejsek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1756", "title": "Mocks for async tornado functions", "body": "Hi. I created some mocks to be able mock-out some async tornado functions. I used them a lot in several projects and I wanted to make library, but I think it can be included in Tornado which is more handy.\n\nI made it in separate module because it needs also mock library which has to be installed prior Python 3.3. So it's not problem if someone don't want use those mocks in older Python but wants use testing module.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eyj": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1752", "title": "Fail early if a v1 cookie is submitted to a service configured with v2", "body": "Currently, if 'secret' is a dict and a v1 cookie is submitted, the utf8() function that is later called on secret in the v1 signing function throws a ValueError. The correct behaviour would be to return None.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gnprice": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1735", "title": "Add an optional script to install mypy", "body": "(This branch is stacked on top of #1733 -- only the last commit is new.)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Maillol": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1714", "title": "Update options to have same behavior from config file or command line", "body": "Currently, Tornado raise an error when we use types option in configuration file such as \noptions.define('datetime', type=datetime.datetime)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64999692", "body": "If we use a factory function wich return a sting, we must define string typed option, but we \ncan set any string using (options.email = \"this isn't an email\") I therefore prefer use distinct class. Using subclass of str is a possible case but I do no have raison to use it instead of plain class.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64999692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64999702", "body": "Python path manipulation isn't necessary, I'm confuse, I remove it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64999702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "murisimov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1658", "title": "Add handling of external log rotation", "body": "Recently I've ran into a problem with logrotate and tornado. When log is being rotated by an external utility, tornado doesn't know that and keeps streaming to an old log, which by that moment can be renamed or even moved to another directory. So i've made this change to my app to handle log rotation, it uses WatchedFileHandler from logging.handlers:\n\n```\n# parse_command_line() function sets RotatingFileHandler as main logger,\n# but we need WatchedFileHandler since we want be robust to guys like logrotate.\nlog_handler = logging.handlers.WatchedFileHandler(options.log_file_prefix) # Prepare handler\nlog_handler.setFormatter(LogFormatter(color=False)) # Set tornado-style log formatting\n\nlog = logging.getLogger()  # Get main logger\nlog.handlers = [] # Remove all handlers (actually it's just the RotatingFileHandler in our case)\nlog.addHandler(log_handler) # Set handler that we really need.\nlog.propagate = False # Prevent duplicate logging\n```\n\nAnd then i thought, why not add this option to tornado? Seems like it could be useful.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marrrvin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1628", "title": "Add ability to pass max_restarts into process.fork_processes call in \u2026", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mqingyn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1622", "title": "add simple_httpclient connection pool support", "body": "Keep-Alive pooling to SimpleAsyncHTTPClient per #1457 .\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sema": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1618", "title": "Make StackContext threadsafe", "body": "We are seeing some unexpected behavior from StackContext when sharing StackContexts between multiple threads. Most notably, user-supplied contexts created and mannaged by StackContext are exited before being entered, and are sometimes entered/exited by different threads.\n\nLet me explain the underlying race fixed by this PR by giving a brief overview of StackContext.\n\n``````\n- When entering a context, create an instance of StackContext and\n  add add this instance to the current \"context stack\"\n- If execution transfers to another thread (using the wraps helper method), copy the current\n  \"context stack\" and apply that in the new thread when execution starts\n- A context stack can be entered/exited by traversing the stack and calling enter/exit on all\n  StackContext et al. instances. This is how the `wraps` helper method enters/exits in new threads.\n- StackContext has an internal pointer to user-supplied context factories, and an\n  internal stack of entered user-supplied contexts.\n\nThe relevant logic inside StackContext for entering/exiting contexts.\n\n```\ndef __init__(self, context_factory):\n    self.context_factory = context_factory\n    self.contexts = []\n    self.active = True\n\ndef enter(self):\n    context = self.context_factory()\n    self.contexts.append(context)\n    context.__enter__()\n\ndef exit(self, type, value, traceback):\n    context = self.contexts.pop()\n    context.__exit__(type, value, traceback)\n```\n``````\n\nHowever, the above code does not work as expected if the request context is used across multiple\nthreads together with wraps. The following executing illustrates the issue:\n1. thread A enters a context, creating the instance (alpha) and adds it to self.contexts\n2. thread A schedules a function to run on thread B using `wraps`\n3. thread B enters the context, creating the instance (bravo) and adds it to self.contexts\n4. thread A exits its context, popping (bravo)  of the stack and calling exit on it\n- In the above case, the exit by thread A pops the instance created by thread B and calls exit\n  on this instance.\n- There exists a race between `enter` and `exit` where thread A executes the two first\n  statements of enter (create instance and add it to contexts) and thread B executes exit\n  (pop the newly added instance from contexts and call exit on it). As a result, context\n  instances may be created and \"exited\" before \"entered\".\n\nThe solution to this issue is to manage the context instances using a thread local.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonathanstrong": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1603", "title": "Django-style kwargs for reverse_url", "body": "This adds Django-style url kwargs for Application.reverse_url without breaking the current args-only API. URLSpec.find_groups has been changed to a shameless theft of the core Django function that powers their url reverse functionality: django.utils.regex_helper.normalize. \n\nExample:\n\n```\n>>> import tornado.web\n>>> optional_kwarg_scheme = r'so-many-possibilities(?:/kwarg1/(?P<kwarg1>\\d+))?(?:/kwarg2/(?P<kwarg2>\\w+))?$'\n>>> u = tornado.web.URLSpec(optional_kwarg_scheme, None, 'options')\n>>> u.reverse()\n'so-many-possibilities'\n>>> u.reverse(kwarg1=1)\n'so-many-possibilities/kwarg1/1'\n>>> u.reverse(kwarg2='a')\n'so-many-possibilities/kwarg2/a'\n>>> u.reverse(kwarg1=1, kwarg2='a')\n'so-many-possibilities/kwarg1/1/kwarg2/a'\n```\n\nNotes: \n- Like the one this replaces, reverse does no checking that the kwargs (or args) match the regex scheme, other than that the kwarg keys must matched the named groups, so you could do this: \n\n```\n>>> u.reverse(kwarg1='a')\n'so-many-possibilities/kwarg1/a'\n```\n\nwhich creates a bad url. If desired, URLSpec.reverse could be changed to check the final result is a match to self.regex.\n- I noticed that this had come up a few years ago, and it seems like some kw functionality was added, but I've found this to be quite helpful in django url routing. \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rudyryk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1569", "title": "Fix #1543 and add hello world example for running on asyncio event loop", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43139626", "body": "Sure, that was a quick snippet for testing auto-reload feature, I've just extended it to highlight tricky things!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43139626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43140452", "body": "I see! Just committed fix with a wrapper function, should be better now. And I removed this try...except part.\n\nHm... btw should we ignore IO loop closing exceptions only for asyncio event loop?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/43140452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mehmetkose": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1481", "title": "Added localization demo", "body": "I think people are looking for details on the localization;\nhttps://groups.google.com/forum/#!topic/python-tornado/olR9J3ThH8I\nI wrote a localization demo quickly. Maybe this could help better understanding.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/12487305", "body": "The answer to all of questions :) Cool.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/12487305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "drewmiller": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1457", "title": "Initial work on Keep-Alive", "body": "An initial attempt at adding Connection: Keep-Alive pooling to SimpleAsyncHTTPClient per #324.\n\nIn order to prevent duplication of the url-parsing step, I converted the current process to a class method that is called and compared against idle connections if the reuse_connections attribute is set. If a new connection is required, the \"_ConnectionBase\" namedtuple is passed as a parameter to the private _HTTPConnection class so that re-parsing is not necessary.\n\nPlease let me know what we can do to improve the testing here.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1311", "title": "gen.coroutine support in Templates", "body": "[Edited to fix failing tests in python3--apologies for the spam.]\n\nWe're building a semi-lazy-loading asynchronous ORM and have found the `gen.coroutine` decorator to be a great resource. Our objects come out looking something like the below:\n\nModel.attribute = value\nModel.reference = `Future`\nModel.collection_name = `[Future, Future]`\n\nSo it's very efficient for us to start generating content from our templates and only wait for references and collections if we need to. Hence, our templates look like the below:\n\n``` html\n<html>\n<head>\n   <title>{{ Model.some_value }} </title>\n<body>\n<h1>{{ yield Model.some_reference }}</h1>\n</body>\n```\n\nWe love working with the most recent version of Tornado, and aren't willing to break off from the main fork. With that in mind, we're currently using a modified version of the `template.py`, represented in the pull. If this is something that you aren't interested in incorporating into the main repo, we'll happily subclass as necessary to accomplish it without conflict.\n\nObviously, it's easier for us to modify the code in place, and I'm happy to help incorporate these changes more thoroughly if you think the feature could be useful in, e.g. the UIModules. Those changes could be non-trivial, however, as I believe ultimately everything that uses a coroutine=True argument will need to be decorated with `gen.coroutine`.  Please correct me if I'm wrong. If so, separate methods for .render() and .render_string() are probably necessary.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anandology": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1455", "title": "Support for incremental template rendering", "body": "The current implementation generates the template as a big string. This pull request, tries to make that an iterator.\n\nInstead of appending the generated output to a buffer, it yield each item making the function a generator. With this it'll be possible to give away control in the middle of a template.\n\nI've also added a `render_async` function to `RequestHandler` class.\n\nAn example to try this out is available at:\nhttps://gist.github.com/anandology/16189f58c7486885fe45\n\nAll the tests in the testsuite are passing.\n\nMy non-scientific benchmark is showing that the generator version is running slightly faster than original version.\n\n**Possible Issues**:\n- The `_Node.generate` now returns a generator instead of a string. This could potentially break backward compatibility.\n- `render_async` may not the most appropriate name for that function.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sangsta": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1364", "title": "Reset waker if it errors out.", "body": "This is the diff that fixes the issue discussed in the following thread:\nhttps://groups.google.com/forum/#!topic/python-tornado/oNE8KcdflqQ\nIf the Waker's reader socket encounters an ECONNRESET error, the ioloop spins, causing 100% CPU usage. We fix this by resetting the waker whenever we encounter this error.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Paranaix": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1323", "title": "Better extends blocks", "body": "This pull request improves the \"extends\" block and introduces a \"default\" block which solves #703 and integrates nicely with the improved extends blocks.\n### The new default block\n\nThe default block allows one to define default values for global variables. Those defaults will only apply to the template where they were defined. Example:\n\n``` html\n<!-- base.html -->\n{% block main %}\n<span style=\"color: {{color}};\">Color will be undefined</span>\n{% end %}\n\n<!-- child1.html: -->\n{% extend base.html %}\n{% default color to \"#ababab\" %}\n\n{% block main %}\n<span style=\"color: {{color}}\">Color properly defined</span>\n{% end %}\n```\n### The better extends block\n\nIn any OOP language one can usually pass values to parent classes in order to modify their behavior. E.g:\n\n``` python\nclass Base:\n    def __init__(self, someParameter):\n        pass\n\nclass Child(Base):\n    def __init__(self):\n        Base.__init__(self, 42)\n```\n\nThe current tags are not enough to emulate this behaviour properly. The closet you can get to the above behaviour at the moment is to use extra named blocks like so:\n\n``` html\n<!-- base.html -->\n<body style=\"color: {% block color%}red{% end %}\">\n    {% block main %}Hello from base{% end %}\n</body>\n\n<!-- child1.html: -->\n{% extend base.html %}\n{% block color %}blue{% end %}\n\n{% block main %}Hello from child{% end %}\n```\n\nHowever this approach is not only quite verbose (especially if more than on variable is required) but it also does not provide enough functionality. The problem is, that one does not pass true python variables but rather a (textual) block which is simply not sufficient for more complex templates (e.g if calculations have to be performed) Sure, in conjunction with the \"set\" block one can also pass variables, but that solution is quite hacky and can quickly become complicated if more than two templates are involved.\n\nIt would be nice if we had a syntax similiar to the \"module\" block which allows to pass parameter directly to the module. This pull request just implements this feature and enable one to write templates just like this:\n\n``` html\n<!-- base.html -->\n<body style=\"color: {{color}};\">\n    {% block main %}Hello from base{% end %}\n</body>\n\n<!-- child1.html: -->\n{% extend base.html with color = \"blue\"%}\n\n{% block main %}Hello from child{% end %}\n```\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xs23933": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1271", "title": "Support alternate hostname for static_url", "body": "add RequestHandler set self.include_host can use domain can setting other domain with static_url, \nany better ideas,  please tell me, thanks.\ne.g:\nclass MainHandler(tornado.web.RequestHandler):\n    def **init**(....):\n        self.include_host = 'apple.com'\nwill be to get http://apple.com/static/js/jquery.js\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skazhy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1180", "title": "Allow setting query params for HTTPRequest", "body": "Allow setting queryparams explicitly via `query_params` in HTTPRequest constructor.\n\nThis makes things less error prone, as urlencoding is done automatically, via the already existing `httputils.url_concat` method.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "encorehu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1149", "title": "normalize the code param of set_default_locale", "body": "when tornado.locale.set_default_locale('en-us') or 'en-US',  there is no checking for the locale code, so the translation would failed.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "heynemann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1137", "title": "Refactored method execution in tornado.web", "body": "Refactored the part that executes the method, so it can be easily overwritten.\n\nThe scenario here is that I need to do something before and after the method execution. Right now, I have to override the whole `_execute` method. It would be a lot easier to just override the `execute_method` method instead.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lullis": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1098", "title": "Small change on WSGIContainer.__call__ to allow environ method overriding in subclasses.", "body": "Scenario: you have a django application sitting behind uwsgi. This application now needs to offer some websocket capability. This application needs to be mounted on a subfolder and your cheap host really does not open many ports, and nginx/apache needs to be in front of it all times.\n\nProblem: After replacing uwsgi with tornado, you see it running and everything looks good in your machine, until your app goes to staging and you learn that Tornado's find out that WSGIContainer does not honor environment variables such as `SCRIPT_NAME` set by nginx. With this, your poor django application is now getting all wrong reversed urls. What do?\n\n(Mind you, I believe I see a bug report in there, but let's assume that this is by design - after all tornado is designed to be the front web server.)\n\nSolution: Subclass WSGIContainer and override `environ`, so we can get `SCRIPT_NAME`. This should work, except that the call to environ calls explicitly for `WSGIContainer.environ`. The game is not over, you say: there are two options left: \n1. Override the whole `__call__` method, and change the call on environ to the class you have.\n2. Change it at the source, Luke.\n\nThis pull request - should the tornado overlords choose to accept it - argues that option number 2 makes more sense.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "manhg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1088", "title": "Add functions to parse response from Google OAuth2", "body": "Make the Mixin easier to get data from encoded response\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15200001", "body": "Actually I don't really understand JWT. I took this from Google code https://developers.google.com/wallet/digital/docs/jwtdecoder\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15200001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15200338", "body": "Yeah, you are right. This is insecure...\nBecause I didn't find any document on the response, there was no check.\n\nMy original target is to provide a simple way to get the result. \nWe need more work on it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15200338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15255892", "body": "I think it's a \"helper\" method and Google-specific one, can be moved somewhere else.\nparse_user_info() is fine. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15255892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "anton-ryzhov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1075", "title": "WSGIContainer in Executor", "body": "Nowadays only way to insert WSGI application into Tornado webserver is WSGIContainer, which runs application directly in event loop thread. It runs only one WSGI instance at once and totally hangs eventloop.\n\nI've created wrapper which delegates WSGI invocation to ThreadPoolExecutor. Even one thread on pool keeps IOLoop in operation.\nIt doesn't work with ProcessPoolExecutor because of unserializable WSGI environment.\n\nIt's just proof of concept and lack of documentation and tests now. Is it useful for the project?\n\n``` python\nwith ThreadPoolExecutor(1) as executor:\n    container = tornado.wsgi.ExecutorWSGIContainer(simple_app, executor=executor)\n    http_server = tornado.httpserver.HTTPServer(container)\n    http_server.listen(8888)\n    tornado.ioloop.IOLoop.instance().start()\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "liftoff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1060", "title": "log.py: enable_pretty_logging() is now idempotent", "body": "This pull request makes the enable_pretty_logging() function idempotent.  If called more than once it will no longer result in duplicated log lines (which is a common problem for tornado applications that import things from other tornado applications).\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "whardier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1032", "title": "Add start_time to httpclient and curl_httpclient to better indicate timing reference", "body": "I'm using Tornado for some load testing another site (hah) and I found that I have no real way of knowing when a request was executed.  This should get me within a few ms at least.\n\nIt'd be cool to have this instead go into time_info as well.  Honestly having the start timestamp and a redundant request_time in time_info for both httpclient and curl_httpclient would be rather handy.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/853", "title": "Add spec to HTTPRequest/Application.__call__", "body": "I found for both debugging and logic I needed to know which spec was used.  If this is otherwise attainable I would love to know.\n\nHere's my simple patch to get this going.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2899645", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2899645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "zhang-peter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/1027", "title": "Correct function that converts object to unicode string or string encoded as utf8", "body": "``` Python\nclass Foo(object):\n    text = u'\\u4e2d\\u56fd' # they are two chinese characters    \n\n    def __str__(self):\n        return self.text\n    def __unicode__(self):\n        return self.text\n\nfoo = Foo()\nprint str(foo)\n```\n\nIf object \"foo\" is an instance of class \"Foo\", str(foo) will raise the following Exception:\n\n``` Python\nTraceback (most recent call last):\n  File \"/tmp/test.py\", line 12, in <module>\n    print str(foo)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n```\n\nunicode(foo) will work. Under Python3.x, we use str(). In case of Python2.x, we use unicode().\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "puentesarrin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/970", "title": "Added support of choices to options.", "body": "With this feature, it's possible to check an option from a restricted set of values. This feature is quite similar to the Python's argparse module.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tahajahangir": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/968", "title": "Use `tornado.general.multipart` to log multipart warnings", "body": "This allows silencing only multipart parse warnings without affecting whole gen_log.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "derekchiang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/776", "title": "Adding helper function to HTTPResponse for getting charset of response body", "body": "The body of HTTPResponse is `bytes` in Python 3, as a result of which I had to decode it before I could use it with other functions that expect a string object.  However I couldn't find a way to easily get the charset of the response body.  I had to manually inspect the header.  Therefore, I figured that adding a helper function might be helpful.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gabtremblay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/626", "title": "CachedResolver", "body": "Added a new resolver that avoids to hit socket.getaddrinfo for each request. \n\nThis resolver adds a fair speed increase in Single-Host multi-request code where the dns server is slow or rate-limited. It also gives a noticeable performance increase and network noise decrease when doing 1k+ requests on the same host.\n\nCache timeout can be controlled with expire_minutes constructor params.\n\nI had to fix the netutil_test.py since socket.getaddrinfo returns IPPROTO_TCP as the protocol on linux and IPPROTO_IP under windows. Tested both platforms.\n\nSupplementary notes: If you are to compare the speed of both resolver, don't forget to add force_instance=True to your constructor since tornado will re-use the previous instance.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ierror": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/602", "title": "Add support for cookies on redirects for the simple_httpclient", "body": "some sites do redirects or interrupt them based on cookies. \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cpiro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/572", "title": "use hostnames and ports in warnings", "body": "instead of just file descriptor numbers. the address is stored on connect attempt, so even if the connect was unsuccessful we'll have the address of the attempted remote. compatible with at least AF_INET and AF_INET6\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marinho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/381", "title": "Server-Sent Events implementation", "body": "Hello,\n\nI implemented the the long polling protocol Server-Sent events ( http://dev.w3.org/html5/eventsource/ ) and I guess you like the idea because it is a good, more stable and simpler alternative to WebSockets.\n\nTested on latest version of Opera, Chrome, Safari and Firefox.\n\nI hope you like.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickNeedsAName": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/328", "title": "Keep-alives and connect_timeout bug", "body": "Added support for keep-alive in SimpleAsyncClient, also fixed bug where Async connections would close due to connection timeout even after the connection had been established\n\nDecided to not go with the suggested implementation of keeping a pool of _HTTPConnections as it seemed cumbersome to maintain all the state of an object that would (potentially) be overwritten every time.  Decided instead on keeping a queue of streams (essentially sockets) that are reused as soon as they become available.\n\nStreams are keyed in the stream_map with a (scheme,host,port) tuple (or some permutation, i forget)\n\nClient defaults to keep_alive, dead sockets are cycled through if they're dead and not used, when a stream is no longer in use it drops references to the current _HTTPConnection and readies itself for the next one.\n\nAny suggestions/problems/fixes let me know.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caseymrm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47248", "body": "We'd love some help testing performance Pykler, let us know what you discover.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47553", "body": "Thanks, done!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47554", "body": "Thanks, done!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120161", "body": "Thanks Victor, fixed: http://github.com/facebook/tornado/commit/47db027764c32e097353f1119a80c04b6b0d0b79\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120163", "body": "Thanks akheron, fixed: http://github.com/facebook/tornado/commit/a2adfa1f997e6ad731c0d8da81dfd9831e4d4999\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120177", "body": "Thanks stevvooe and others, this has been fixed: http://github.com/facebook/tornado/commit/57ec818a3f8ab56dec1b6cf585fa7c8c4d6ab80a\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120182", "body": "That wiki page is discussing desktop applications, which treat the application and session secrets differently than web applications do.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "greut": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47446", "body": "web.by fires up a thread; I've done it by using an external worker.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "finiteloop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47940", "body": "I don't like this as a default behavior, but I think an addslashes decorator would be useful.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/47940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/49491", "body": "Fixed, thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/49491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/49492", "body": "That is not really a solution because it makes Tornado insecure. See http://groups.google.com/group/python-tornado/msg/2add351bb61376fd and the rest of the thread for more secure potential solutions.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/49492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53870", "body": "Thanks, fixed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53871", "body": "Thanks, fixed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53873", "body": "Subclassing is probably the only reasonable way right now. Thinking about better ways to do this in the future, but that is the best way currently.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53874", "body": "We will consider this for future releases.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53877", "body": "Can you explain the use case? Why do you want to prevent Unicode escaping?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/53877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/56770", "body": "Good idea, we will add this in the next release.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/56770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/86014", "body": "Fixed: http://github.com/facebook/tornado/commit/c50d9b8c789eb1914f31bd4dc7adbf1383c8fdb1\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/86014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/113495", "body": "This is not on our current roadmap. Typically, decorators like yashh referenced above are what we use for \"middleware\". Closing b/c we don't have a current concrete plan.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/113495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164231", "body": "The fix for this was committed long ago, Twisol\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164540", "body": "It doesn't really make sense, though. If there is an XSS bug, you can just read all the cookies out and use them, so there is no need for XSRF; you can just send the cookies to some malicious server and then use them directly. If you have an XSS bug, XSRF is not necessary to compromise any account.\n\nIt is a big deal to leave in because it means every user of Tornado has to instrument their JavaScript libraries to include the XSRF argument, which led to a lot of developer confusion and issues.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/62087", "body": "I really don't like this change - why did we commit this? What is the goal?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/62087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "joerussbowman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/48539", "body": "And I see addslashed and removeslashes decorators have already been added :) And I agree, it's a good solution. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/48539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/92169", "body": "Here's the html standard for character escape codes - http://www.w3.org/MarkUp/html-spec/html-spec_13.html&usg=AFQjCNGCQbZOzkxqFKwH95Je32SifjWLpA\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/92169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/292231", "body": "Unless someone beats me to it, one of the things I plan on doing is creating a new FacebookMixin which would use the graph api, and also use the new oauth2 implementation for authentication. I was hoping to see someone else (like Twitter) go all in with oauth2 first. \n\nI've got a newborn right now, and this is still pretty far down on my plate to implement for my project, so not volunteering to knock this out any time soon. However, when I do, I'll be sure to contribute the changes to the project. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/292231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/315167", "body": "This is a repeat of issue 106\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/315167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/318517", "body": "I snuck in a couple hours in very small increments over the past week, and actually just got a successful authentication attempt done with Facebook Graph. I'm putting together an Oauth2Mixin and FacebookGraphMixin. I want to get permission requests working, and then I'll branch master and do a pull request. No idea how long real time that will take, I really am not getting a lot of time for anything have a 2 year old and a 4 week old at the moment. And, I'm not exactly complaining either. :)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/318517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/321236", "body": "Check out my branch at \n\nhttp://github.com/joerussbowman/tornado \n\nand see how that works for you. I've really only tested authentication, and my app is focusing on unauthenticated requests at the moment so not sure when I will personally have time to do a full test of reading and writing information to facebook. If anyone else has more time to try it out, I will appreciate it.\n\nI did change some of the keys in the user profile information to reflect Facebook's changes. For example user[\"pic_square\"] is now user[\"picture\"] and user[\"profile_url\"] is now user[\"link\"]. I opted for keeping current with Facebook rather than keeping consistent with previous incarnations of Facebook Connect output. This is of course open for debate and could easily just duplicate data to maintain both if that's what people want.\n\nThat branch was forked on 7/21/2010 so it includes all recent changes to tornado itself.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/321236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/321238", "body": "btw: not doing a pull request until I get some others to verify it's working. Thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/321238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/382819", "body": "Yea, I actually found that I forgot to copy over the ioloop import because I tripped over the Google Account issue during one of my tests. auth_token_retry sets the amount of times to try the attempt. What happens is a request is made to get the access token. If there isn't a valid one (yet) an error response is returned. The retry then sets the last attempt variable and keeps retrying, calling the same callback, until either it gets a valid response or it hits the auth_token_retry limit. I think I poorly named that variable, and will change it to access_token_retry_limit and it will make more sense. \n\nI just checked over the spec for oauth, and there's no governance for character sets, encoding or size. So yea, base64-encoding that is a really good idea, I'll get that in.\n\nCapitalize A, noted.\n\nYea, Oauth2 really is super simple. Facebook I think is the only real world implementation of it right now though. Basically instead of complicated token exchanges it relies on https. A much better implementation in my opinion and I can't wait for more providers to move to it.\n\nThe GoogleMixin uses a mix of OpenID and Oauth. Not sure if it needs Oauth1.0a as well or not. I'll try it out and see if it's still working in my test app. If changes are necessary I'll get them in.\n\nI'm not sure if I'll have a lot of time to work on this, this week. I'll see what I can do though. Thanks for the review, and I'm going to push and try to get the updates in so you can have them for 1.1\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/382819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384370", "body": "closing this as I get set to do another pull request.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/384370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/386379", "body": "Let me see what I can come up with on mixing the two into one OAuthMixin, I suppose adding an optional argument oauth_version? What should the default be? The sysadmin in me says default to 1.0a as it's the more secure version and both Twitter and Google have moved to it, but with Tornado originally being what FriendFeed was built on is that a reason to keep 1.0 the default? Is FriendFeed going to move to Oauth2 or at 1.0a in the near future or is development on it pretty much stopped?\n\nI'll poke at the GoogleMixin, I haven't really played with it much as while openid does present a nice way to get a permanent identifier for a user, oauth + getting the username works just as well and doesn't require the additional layer of working with openid and keeping up with any changes it might have as well. For my own purposes I think I'd be more likely to use a GoogleMixin that is entirely oauth based. Is the openid implementation in it even compatible with OpenID v2, which is what Google says they are running now?\n\nI banged on the Youtube for 2 days and couldn't get that warning, however when I originally packaged up the changes with the newer version of auth.py, it errored at least once. I can't be sure if it was the delay or not, because when the error happened I got an error because I forgot to add the import for ioloop. \n\nAs for YoutubeMixin or not, at this point I think I'm in agreement to just figure out the best solution for GoogleMixin and cut it there. If GoogleMixin is indeed broke, I'd like to get something working for that though. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/386379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389050", "body": "Well that's neat on the pull requests automatically updating.\n\nOAuth2 hasn't been finalized yet, I'll do my best to keep it up to date if Facebook makes any changes. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/389050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/418082", "body": "I'll take a look at this sometime this week.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/418082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1292592", "body": "I believe the point is to use the built in xsrf protection for post requests.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1292592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "severb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/49624", "body": "You can also accomplish the same thing using key.indices(size).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/49624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jed": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/54704", "body": "Well, in my case, I'm doing string matching on the client that is impeded by escaping (the strings no longer match). This is definitely something that can be solved in Javascript, but it seems to me that Tornado (which is awesome by the way) might be better off providing the options that Python users expect for JSON.\n\nTo be honest, I'm not sure why escaping is the default for simplejson, since most text needs no escaping, and it doubles the size of the payload for some languages (like Japanese).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/54704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lucky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/55294", "body": "You probably want [subprocess](http://docs.python.org/library/subprocess.html).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/55294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "csytan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/55570", "body": "Here's a patch:\n\n```\ndiff --git a/tornado/web.py b/tornado/web.py\nindex 08047a4..bc626a8 100644\n--- a/tornado/web.py\n+++ b/tornado/web.py\n@@ -590,6 +590,9 @@ class RequestHandler(object):\n\n         See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n         \"\"\"\n+        if self.request.headers.get(\"X-Requested-With\") == \"XMLHttpRequest\":\n+            return\n+        \n         token = self.get_argument(\"_xsrf\", None)\n         if not token:\n             raise HTTPError(403, \"'_xsrf' argument missing from POST\")\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/55570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/72200", "body": "As I understand, no, since modification of request headers needs to be done programmatically using javascript, flash, java, etc.  These environments implement the \"same origin policy\" so that requests may only be sent to the same domain that the scripts are served from.\n\nHere's some more info if you're interested:\nhttp://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/72200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164507", "body": "Twisol, XSRF attacks must originate from the user's browser.\n\nThe attack works like this:\nSay you visit Site A and log in -- your browser now has a cookie which identifies you on each request.  The attack happens if you visit Site B, and unknowingly submit a form which POSTs to Site A using your credentials.\n\nTornado protects against this is by using a randomly generated XSRF token.  This token is set as a cookie and also sent in each POST request.  If the user's cookie matches the token sent in the request, then the request is valid.  This is because Site B cannot access cookies from Site A and therefore cannot send the correct XSRF token to validate the request.\n\nAJAX requests however, are special in that they are restricted to the same domain. Therefore, a POST cannot be made from Site B to Site A using the visitor's credentials.\n\nHope I explained it well.  If you want more info, I'd check out Wikipedia:\nhttp://en.wikipedia.org/wiki/Cross-site_request_forgery\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164517", "body": "No problem, it's good to question things, that's how bugs are found =)\n\nThe scenario you described could happen, and has happened before.  However, it's not what the token is meant to protect from.  This is a different attack, called XSS (or cross-site scripting) in which a user can insert a script into your site's page.\n\nhttp://en.wikipedia.org/wiki/Cross-site_scripting\n\nThe way to protect against this is to always escape or validate user generated content.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/248829", "body": "How would this be exploited?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/248829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/462395", "body": "Thanks, appreciate it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/462395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sirpengi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/65228", "body": "I did self.db.execute(\"UPDATE t SET %s = %%s WHERE id =%%s\" % (field), value, id)\nThough I'm not too happy with how it looks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/65228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Kuze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/65403", "body": "After building out a few models like this I came to the same conclusion, it doesn't look so clean, extremely repetitive, and error prone. I think as advertised Tornado's database.py is really for light use, so I've decided to bite the bullet and go with Elixir. I'm finding to be a good fit and more.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/65403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gmr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/68306", "body": "Hmm this is not the right solution.  I am seeing an issue with no_keep_alive = True due to an issue with tornado not handling redirects properly with Cherokee with keep-alives on.  Will open another ticket when I track this down further.  I do think line 127 should be qualified, but see that the no_keep_alive is passed into HTTPServer and not application.settings\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/68306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/68311", "body": "The fix for this is:\n\n```\n    if not self.request.connection.no_keep_alive:\n        if not self.request.supports_http_1_1():\n            if self.request.headers.get(\"Connection\") == \"Keep-Alive\":\n                self.set_header(\"Connection\", \"Keep-Alive\")\n```\n\nIt should not be telling the browser to keep-alive if no_keep_alive is set.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/68311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/155410", "body": "You can implement the last handler in your chain as a catchall and render a custom template.  Something like /(.*) -- needs to be the very last handler in your list though.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/155410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "araddon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/71779", "body": "Wouldn't you be able to forge the http header X-Requested-With if you are an attacker and bypass this protection mechanism?  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/71779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99546", "body": "Whoops, dupe of #41\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cactus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/72074", "body": "It would also be useful for doing json 'pretty printing' with the `indent` and `sort_keys` arguments.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/72074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/107233", "body": "Kind of related to issue #16 too.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/107233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/239866", "body": "I agree that the case becomes ambiguous.. \nI kind of like the simple and straightforward first example. Can't believe I didn't think of that!\n:)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/239866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/72366", "body": "Agree\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/72366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/166694", "body": "Yes, your right. but http  protocol get method can send  small amount of data. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/166694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "elephantum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/74334", "body": "that seems to be general problem which is caused by inconsistency between epoll.c and select.epoll in py2.6\n\nepoll.c raises OSError, while select.epoll raises IOError.\n\nmay be the best way to fix this is to alter epoll.c and tornado to use IOError like select.epoll does\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/74334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/77157", "body": "I'm sorry, where did you find the usage of C-extension for HTTPHeaders?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/77157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/125784", "body": "that's why I've separated\nparse_command_line and process_options in my branch\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/125784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253379", "body": "It seems that python's cyclic garbage collector has some latency. i.e. objects are not collected at once, but after some time. This means larger memory consumption for unnecessary objects.\n\nFor example here is picture from monitoring of my project in production environment before and after the proposed patch.\n\nhttp://skitch.com/elephantum/dff2m/monik\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253401", "body": "And one more point: python's cyclic gc doesn't work on objects which has **del** method defined. It means, that if any of users define **del** method in RequestHandler subclass then memory would never be freed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/253401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258876", "body": "thanks.\n\nBTW. You've mentioned testing more than once in issues and mailing list. I can't find any testing code in tornado/ though. Does it mean that you have test code somewhere outside github?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/258876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/281246", "body": "proofpic from hh.ru production: http://skitch.com/elephantum/de6j4/monik\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/281246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/281664", "body": "the same problem exists in recently introduced AsyncHTTPClient2. patch: http://github.com/elephantum/tornado/commit/947d2d0124ed8a9512fc440435c0de2732874a81\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/281664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/290388", "body": "some more data from hh.ru production:\n\ndistribution of number of multi.perform() calls at a time: http://skitch.com/elephantum/djh23/figure-1\ndistribution of duration of multi.perform() chain: http://skitch.com/elephantum/djh3f/figure-2\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/290388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59217", "body": "You're wrong. Logical operators are traditionally lazy in almost any language to permit this kind of notation.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59294", "body": "Sorry, I was wrong and was sure that I've deleted my comment. But somehow it wasn't deleted.\n\nOn the topic: here \"if self.handlers\" is used to test list on emptiness. Your suggestion wont work in case self.handlers == [].\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/194893", "body": "may be it would be a good idea to log queue size if it's not empty?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/194893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "stevvooe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/74523", "body": "This sounds reasonable.\n\nIs this project being maintained? There hasn't been any activity on it in month and I don't want to maintain a fork for simple bug fixes.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/74523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181838", "body": "I understand this policy, as a best practice, but its a clear bug with an simple fix. There is no reason not to bring tornado closer to HTTP compliance.\n\nCurrently, this variation of malformed input crashes the entire I/O handler. It should at least be caught so as not to affect other requests in the system.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181899", "body": "Sounds good. Thanks for the response on this.\n\nKeep up the good work!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sashka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/82715", "body": "Silently closed by original authors.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/82715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ketralnis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/88476", "body": "Gabriel Farrel responds:\n\nThe DELETE method is supported by pycurl in the same way it supports\nany other libcurl option.  The documentation for DELETE via curl is at\nhttp://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTCUSTOMREQUEST,\nwhere they note:\n\n   This is useful for doing DELETE or other more or less obscure HTTP requests.\n\nIf you would like to add the functionality to Tornado, you could use\nsomething similar to\nhttp://hg.basho.com/riak/src/tip/client_lib/jiak.py#cl-110 in that\nsection of httpclient.py you pointed to.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/88476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/110823", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/110823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pitchfork": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/92634", "body": "or [celery](http://celeryproject.org/)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/92634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/93352", "body": "I've made a quick fix to add DELETE support in my experimental (using socket_action instead of multi_perfom) tornado httpclient. \n\nSo far it's working good.\n\nHere's the commit:\nhttp://github.com/sris/tornado/commit/eed718ae849596789cb675796f2f4cdf6bbc6d85\n\nThe cleanup code is needed since httpclient reuses curl handles and the CUSTOMREQUEST will take precedence over the standard methods when the same handle is used again. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/93352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yashh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99673", "body": "The better way to handle this is using a message queue. You push a job onto a queue and a worker picks it up and process it. Check out RabbitMQ, pyres, gearman, bealstalkd etc.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99934", "body": "Yup it is better to handle with regex. Tornado supports methods [removeslash](http://github.com/facebook/tornado/blob/master/tornado/web.py#L772) and [addslash](http://github.com/facebook/tornado/blob/master/tornado/web.py#L792) as well.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/111579", "body": "awesome. just started reading template.py, there quite many tags template supports. Cool!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/111579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/155521", "body": "thanks for the options. sounds good\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/155521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/489323", "body": "Is there a way to run a set of mysql queries in parallel. Bret Taylor's post on mysql explains that they query all mysql shards in parallel. Can we do this in tornado ?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/489323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pplante": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99686", "body": "The performance \"hit\" with the example you provided would be negligible.  Can you measure any actual hit?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "enaeseth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99801", "body": "You can hook up middleware, actually. `HTTPServer` request handlers are just callable objects (function, methods, or objects that implement `__call__`). You can write your own handler that passes on requests to your `Application`:\n\n```\nmy_app = tornado.web.Application(...)\n\ndef middleware(request):\n    # do whatever transformation you want here\n    my_app(request)\n\nif __name__ == '__main__':\n    http_server = tornado.httpserver.HTTPServer(middleware)\n    # ...\n```\n\nSince Tornado request handling can be asynchronous, you can't modify the response in your middleware, but you can at least work with the request.\n\n(That said, it's probably best to just keep using the regex for your particular example.)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/99801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mackstann": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/101877", "body": "Seeing this problem as well.  It doesn't actually seem to break my code at all; it just adds a bunch of slightly alarming little tracebacks in the logging output.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/101877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/101880", "body": "As a workaround, you can use:\n\n```\npip install -e 'git+git://github.com/facebook/tornado.git#egg=tornado'\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/101880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ask": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/101892", "body": "Yeah, I know, but that's not compatible with setuptools.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/101892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/323670", "body": "soplakanets: Can you release 1.0 to PyPI?\nI guess you're the release master now ;)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/323670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fictorial": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/109578", "body": "+1 for yashh\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/109578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akheron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/109837", "body": "This has been fixed by 6ee22230f8e657591ef3cd5d3dda8e9b36125786, please close.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/109837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/74815", "body": "A normal comparison leaks timing information to an attacker. Because a normal compare exits as soon as the first inequal byte is encountered, an attacker could determine the value of the hash byte by byte, by looking at how long the comparison takes.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/74815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/83997", "body": "I think that the upper bound of 1024 for file descriptors can be overcome by using curl_multi_socket_action() and CURLMOPT_SOCKETFUNCTION instead of curl_multi_perform() and curl_multi_fdset(). See http://curl.haxx.se/libcurl/c/curl_multi_socket_action.html for the C API. There also seems to be a fork of tornado that has a version of httpclient that uses this new API: http://github.com/sris/tornado/blob/master/tornado/httpclient2.py\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/83997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/95989", "body": "Why? ioloop's _run_callback() already catches these, and produces exactly the same error message, doesn't it?\n\nThis makes it harder for me to write unit tests on my code that uses tornado, as I want all exceptions through. Until this commit, it was enough to subclass IOLoop and re-raise in handle_callback_exception(). AsyncHTTPClient doesn't even allow specifying a custom handler for the exceptions.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/95989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/97010", "body": "You're right. I hadn't thought about the fact that one AsyncHTTPClient actually handles many HTTP connections. Passing callbacks through self.io_loop.run_callback sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/97010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Bessonov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/110699", "body": "Try:\n\n{% set data_dict = json_decode(json_string) %}\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/110699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/117645", "body": "Bred, you can read more about middleware at Django http://docs.djangoproject.com/en/dev/topics/http/middleware/\n\nIt's very-nice-to-have feature.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/117645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "acdha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/116607", "body": "I just encountered the same problem on a new system and added this patch to avoid silent failures:\n\nhttp://gist.github.com/284713\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/116607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mbferg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/116729", "body": "you can find an example at http://brianglass.wordpress.com/2009/11/29/asynchronous-shell-commands-with-tornado/\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/116729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/124877", "body": "Another good place to hook up middleware is prepare() in tornado.web.RequestHandler.  The method is called before any other request processing is done, and is very unobtrusive.  See http://github.com/facebook/tornado/blob/master/tornado/web.py#L119\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/124877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tsharju": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120192", "body": "Yes. But this is the API that tornado uses and it does not take away the problem that the Facebook authentication does not work unless some changes are made to the code.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/120192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "milancermak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/124037", "body": "I'll add that there's a typo in the docstring to the flush method (nextwork vs. network).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/124037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mgenti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/125308", "body": "This fix is needed, in addition to others, to get Tornado running under win32\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/125308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "weaver": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/131135", "body": "Thanks for the quick reply. I reviewed the patch again and eliminated the writers set from KQueue. I thought I'd tried it without adding _writers and still saw problems, but must have made a mistake. Anyway, it seems like the hang-on-waiting-for-WRITE problems I was seeing might be due to lots of unregister/register/modify activity on the same client socket.\n\nHere's an [updated example](http://gist.github.com/300540) that demonstrates the problem I'm seeing. The script can be run against the original or modified KQueue by using a command-line argument. Debugging statements have been added in key places to show what's going on. I've also attached \"modified.txt\" to show the behavior I need and \"original.txt\" to show what happens when the original KQueue is used.\n\nThis [new patch](http://github.com/weaver/tornado/commit/e86c07ca003ef43410c4a95fe8a3bca4cf820c1e) adds \"set_handler()\" to IOLoop and contains the updated _KQueue logic.\n\nThe set_handler() method quietly replaces an existing handler and uses impl.modify() if possible. This change isn't strictly required for the updated example, but in my original STARTTLS example, it's necessary because the event handler on a socket is swapped out while TLS negotiation takes place. Without set_handler(), EPoll throws an error if add_handler() is called on a socket already being handled.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/131135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/132536", "body": "Aha; I'd been overlooking the part in the kqueue(2) man page about kevents being identified by (fd, filter) items, not just by fd.  Here's the [updated example](http://gist.github.com/300540) and [updated patch](http://github.com/weaver/tornado/commit/97e528cf6b92bbb590579864962e2d51c22202e0).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/132536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "fangpenlin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/132083", "body": "Hum... It seems some kind of auto recognizing system mess the patch up.  I have no idea how to submit a patch with this.  So I just upload the patch file here:\n\nhttp://static.ez2learn.com/temp/windows-support.patch\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/132083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thecleanmachine": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/133768", "body": "I've included the fix here:\nhttp://github.com/thecleanmachine/tornado/blob/master/tornado/httpserver.py\nI've also submitted pull requests, but they haven't been accepted :-/.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/133768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "parente": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/140809", "body": "The multiprocessing package in Python 2.6 std lib works well with Tornado's IO loop.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/140809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/269590", "body": "Part of the problem is that http://github.com/facebook/tornado/blob/master/tornado/websocket.py#L81 hard codes the location response as ws:// even though the connection was made using wss://.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/269590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/269591", "body": "Similar problem on Chrome 5 even after the correction to respond with wss://, but it falls back on ws:// instead when the server throws exception:\n\nSSLError: [Errno 6] _ssl.c:480: TLS/SSL connection has been closed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/269591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309983", "body": "Is anyone actively maintaining the websocket implementation in Tornado? Are there plans to continue to track the lastest version of the spec?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/408442", "body": "<pre>\nTraceback (most recent call last):\n  File \"pbs3.py\", line 129, in <module>\n    run_server(opts.port, opts.configPath, opts.debug)\n  File \"pbs3.py\", line 115, in run_server\n    ioloop.start()\n  File \"/Library/Python/2.6/site-packages/tornado-1.1-py2.6.egg/tornado/ioloop.py\", line 227, in start\n    event_pairs = self._impl.poll(poll_timeout)\n  File \"/Library/Python/2.6/site-packages/tornado-1.1-py2.6.egg/tornado/ioloop.py\", line 455, in poll\n    kevents = self._kqueue.control(None, 1000, timeout)\n  File \"/Users/bburns/dev/forestfire/server/pbs3/service/launcher.py\", line 117, in _handle_sigchld\n    self._kill_zombies()\n  File \"/Users/bburns/dev/forestfire/server/pbs3/service/launcher.py\", line 92, in _kill_zombies\n    del self._processes[key]\nKeyError: ('d4bb6eed137f2403258a79d09417f4449a6a1096', u'copd_data')\n</pre>\n\n\nSo what's happening is an exception is getting raised in a SIGCHLD handler that isn't getting caught. I can definitely fix that bug in our code. But it's probably a good ideaif the try/except in ioloop guarded against these kinds of exceptions too.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/408442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/409664", "body": "I understand the shortcomings, but thought guarding against the exception in the main loop at least would be worthwhile.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/409664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sgala": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/145459", "body": "The commit http://github.com/sgala/tornado/commit/bec7029562a00b0b0087309d97f8181b51f315f5\nshould make the internal tornado httpserver work with IPv6.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/145459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/145501", "body": "Rather use http://github.com/sgala/tornado/commit/85c2bf6e668cb74232d1dbe786ceb5f49082e78f as a commit, there was an extra print statement left over in the previous one.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/145501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/166062", "body": "http://tech.groups.yahoo.com/group/rest-discuss/message/9962 (why using a body in a GET request is not a good idea)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/166062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373569", "body": "Apache will send a Host: header that points to whatever we configured the reverse proxy to be (say an internal IP or hostname). So OpenID redirects will be completely broken.\n\nOptionally the X-Forwarded-Host is set to the Host: the client asked for, and the patch I posted sets it up, so that the auth demos in tornado work when tornado is reverse proxied and accessed over the external (proxy) host. Accessing the external host is typically what one wants when reverse-proxying.\n\nI'm not sure if I'm being clear, but trying to make the auth/\\* demos over a reverse proxied host will make it very clear.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373592", "body": "See for instance http://httpd.apache.org/docs/current/mod/mod_proxy.html#x-headers and http://httpd.apache.org/docs/current/mod/mod_proxy.html#proxypreservehost for the Apache behaviour. Actually X-Forwarded-Host is not optional, passing the original Host: header is.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/373592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/434876", "body": "Be it reverse or forward proxy, the proxy requests \"us\" (i.e. tornado) using standard (augmented with some headers) HTTP protocol. What the Apache HTTP server's mod_proxy does is to generate a standard HTTP client request towards us and add the proxy headers. What ProxyPreserveHost does is to \"fake\" the client HTTP request. When you say \"change the request\" you are assuming that it is the same, which it is not. There is a remote request to the proxy and a client (proxy) request from the proxy to the reverse-proxied server... What you call \"not modify\" is actually faking a Host header in the client request. I guess this is the logics in Apache.\n\nFor instance, reverse proxying a virtual host out of many in the internal machine will not work unless the real, internal \"Host:\" header is used. I guess this is the reasoning why Apache keeps the real Host: header and adds the \"X-Forwarded-Host:\" one unless the ProxyPreserveHost option is used.\n\nNot a biggie, I just wanted to make sure the examples, especially OAuth and co., would work out of the box when using out of the box reverse proxying with Apache's mod_proxy.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/434876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "leepa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/148997", "body": "The problem appears to center around the usage of a pipe to awake the poll/select when it's idle. Naturally it's always ready for writing and thusly you get a constant loop. With the _Select there's no need for the 'waking' - at least not that I can see.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/148997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/151929", "body": "Another 'thing' that might be related. The call to self.add_handler for the reader waker looks at the reader for WRITE events... surely it means READ?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/151929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "moshen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/155464", "body": "An alternative is to define your custom error page in nginx ( or apache or whatever else ):\n    error_page 500 502 503 504 /static/500.html;\n    error_page 400 402 403 404 /static/400.html;\n\nAnd generate the static pages from your Tornado templates:\n    import tornado.template as template\n\n```\nloader = template.Loader(\"./\")\n\nerr500 = open(\"./static/500.html\" , \"w\")\nerr500.write(loader.load(\"Error.html\").generate(error=\"<h2>Server Error</h2>\", title=\"Error\"))\nerr500.close()\n\nerr400 = open(\"./static/400.html\" , \"w\")\nerr400.write(loader.load(\"Error.html\").generate(error=\"<h2>Not Found</h2>\", title=\"Error\"))\nerr400.close()\n```\n\nError.html template:\n    {% extends defaultTemplate.html %}\n\n```\n{% block content %}\n    {{ error }}\n{% end %}\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/155464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Twisol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164081", "body": "Forgive me for digging up an old issue, but I agree with araddon. Web browsers aren't the only method of sending an HTTP request; it's only the script/flash/etc within the browser that can't spoof it. Disabling a security function based solely on the existence of a spoofable header seems very bizarre to me. (EDIT: You might even be able to use curl to spoof it, I don't know. I've never used curl. But that would be a very easy way to bypass the XSRF protection.)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164412", "body": "Right; I'm suggesting rolling it back. Should I open a new issue? I've never done this before.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164516", "body": "Hmm, okay... If I may suggest my own scenario:\n\nThe user visits a site and has the XSRF token and user ID placed in cookies. Third-party code somehow gets into the page, perhaps through content submitted by another user, and gets the user's ID cookie. If I understand it right, the XSRF token will be invalidated after a certain period of time, right? But once the attack has the user's ID, they can spoof an AJAX request by using, say, cURL and adding an X-Requested-With header. That bypasses the XSRF token check, and they have the user's ID cookie, so they get through security.\n\nThanks for taking the time to listen, by the way. I understand that this is an old issue, and it's probably annoying to deal with some impertinent whippersnapper who doesn't know what he's talking about. But thanks for putting up with it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164531", "body": "Alright, fair enough. Does leaving the XSRF check in cause so many problems that it's not worth the extra security, though? It's easy to forget, sometimes, to check user content, but it's not hard to always check the XSRF token, especially since it's built into Tornado. XSS wouldn't be totally blocked by keeping the XSRF check, but I would imagine it's still helpful to have. (EDIT: Strictly speaking, it only blocks one of the possible uses of XSS, but one which I think is related to XSRF)\n\nThis patch was only two lines, after all.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164552", "body": "Adding the _xsrf parameter to my AJAX requests was very simple, for me. Honestly, I'm having more trouble with getting the blasted thing (kidding) to set the XSRF cookie in the first place. But that's unrelated...\n\nOn your first paragraph, I'm not sure I follow. Once you've stolen the cookies and copied them elsewhere, how else would you use them but to send them through a manufactured page or crafted HTTP request? Leaving out the X-Requested-By check would at least prevent the attack from that angle[1]; I think they would have to send an AJAX request straight from the infected page to do anything. But at least it happens in front of the user, and not at someone else's computer.\n\n[1] Well, that's also assuming the attack takes place within the timeframe that the XSRF token stays valid. But that's still a smaller window of time...\n\nEDIT: At any rate, you've made it clear that my suggested scenario would open many more holes than just this, so I suppose this is probably the least of one's worries. I guess it's not such a big deal. Thanks for setting me straight!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/164552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59064", "body": "Won't this else still be executed if self.handlers doesn't exist? The previous version didn't have an self.handlers check, either, so it seems like either the self.handlers check could be removed, or it should look like this...\n\n```\nif self.handlers:\n    if self.handlers[-1][0].pattern == '.*$':\n        # stuff\n    else:\n        # stuff\n```\n\nOr am I wrong?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59291", "body": "No, I'm talking about the else! If the if is false, the else will get called. If there is no list of handlers, there will still be an action done assuming the handlers exist.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59298", "body": "Good catch. In that case, neither will the original code, because if handlers is empty (quite reasonable here), the first test will fail. This went from a nitpick to a bug, if I'm seeing this right. (EDIT: No, wait, it does the right thing precisely because it's empty. len(self.handlers) would be clearer, I think, but...)\n\nI think we can assume that handlers will always exist, can't we? They're set up in the __init__ method. If we can't (or don't want to) assume that, we have to check it somehow. (EDIT: this line not really relevant in light of the first edit)\n\nActually, for that matter, why do we create a local 'hanndlers' list in that same function, then only append to it once later and not do anything else with it? Was it, maybe, intended that the appends in this if-else section were meant to append to that local variable? I honestly don't know, I haven't spent much time with Tornado's internals. Just pointing out little things that I'm not quite getting. :)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/59298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "passy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/173059", "body": "You can reference a gist instead of uploading an attachment: http://gist.github.com/\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/173059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "khamidou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181120", "body": "I've written a fix for this; could someone review it : User@SHA ref: khamidou@08b1be283430c2060a47ef1f9bbd9bfbacace06b\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ldenoue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181695", "body": "great, thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/181695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wangchyz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/217992", "body": "I think you can not do that\nIf your write_buffer two large, you will waiting too much time in a busy loop\n\"break\" works well, It give others a chance and send the leave write_buffer next loop\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/217992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/219212", "body": "break can cause browser timeout?\nmay be we should do this:\nif e[0] in (errno.EWOULDBLOCK, errno.EAGAIN):\n    self._add_io_state(self.io_loop.WRITE)\n    break\nYou can try it and tell me result, please\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/219212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mdagosta": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/218665", "body": "Hi wangchyz. In my experience, when write_buffer is large (serving a PDF for example) and break is called, ioloop doesn't return to streaming the buffer and the browser times out. Yes, using continue causes ioloop to block. Maybe there's an event loop registration that can be done before 'break' that will indicate the loop should return to the buffer?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/218665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dlo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/229888", "body": "Fixed in dlo/tornado@9ea5f8a277db96557ae7867375c7db4d8c5f633a and just submitted a pull request.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/229888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80278", "body": "Maybe a better solution would be to add a parameter to `receive_message` such as `auto_call` that allows the user to specify whether or not the callback should be auto-called. This would necessitate adding another class variable but I think it may be worth it.\n\nI say this because I probably wasted several hours playing around with this class until I realized that the callback wasn't automatic, thinking that either 1) my browser's websocket implementation was broken or 2) there was a bug in this class. Even after I realized it was neither, I had already found numerous references on the web from people who thought that tornado was broken because of this limitation. Not to mention that the issue tracker had this specific issue listed as a problem.\n\nHere's how I think this could work:\n\n```\ndef __init__(self, application, request):\n    tornado.web.RequestHandler.__init__(self, application, request)\n    self.stream = request.connection.stream\n    self.auto_call = True\n```\n\nor\n\n```\ndef receive_message(self, callback, auto_call = True):\n    \"\"\"Calls callback when the browser calls send() on this Web Socket.\"\"\"\n    callback = self.async_callback(callback)\n    self.auto_call = auto_call\n    self.stream.read_bytes(\n        1, functools.partial(self._on_frame_type, callback))\n```\n\nAnd in both cases:\n\n```\ndef _on_end_delimiter(self, callback, frame):\n    callback(frame[:-1].decode(\"utf-8\", \"replace\"))\n    if self.auto_call:\n        self.receive_message(callback)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80302", "body": "I'm assuming it was reviewed when it was merged into master.\n\nOn another note, the use case for **not** keeping the connection open (or using a different callback at the same socket) seems to be very limited and against REST philosophy. Can you give an example of what sort of usage you would hope to get by reverting to the previous functionality?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "funtoo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/240846", "body": "Can we get a comment from the Tornado developers on this bug? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/240846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "soplakanets": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/244880", "body": "I just added latest sources as version 0.2 to PyPi for my own purposes. \n\nhttp://pypi.python.org/pypi/tornado/0.2\n\nIt's working OK, so you can use it. I uploaded it under my profile, authors can contact me to transfer rights on PyPi if needed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/244880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/323876", "body": ":)\n\nI uploaded source distribution to pypi. However, I can't be sure upload was correct as Tornado doesn't have any test suite. So test it yourself.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/323876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/394794", "body": "bdarnell, I tried to. Used \"ben.darnell\" as username. And I get this error:\n\"Error processing form\nuser doesn't exist\"\n\nAre you  sure this is correct user name? Maybe it is because of some caches, if you've just registered.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/394794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396980", "body": "Capitalizing worked. Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/396980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "garyburd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/248957", "body": "Note that the HTTP request method (GET,POST) and the location of request parameters (query string, request body) are different concepts. \n\nBecause Tornado dispatches to different handler methods for each HTTP request method, there is no danger of an application confusing a GET request as a POST request or vice versa.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/248957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/249032", "body": "Yes, that is by design.  Most applications don't need to distinguish between parameters in the query string and the request body.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/249032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308900", "body": "Because top level JSON arrays are susceptible to cross site attacks, I do not think it's a good idea to auto-convert lists at the top level of RequestHandler.write. See http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx for a discussion of one such attack.  I recommend wrapping lists with a dict.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/82961", "body": "If there's no pending data and the peer has performed an orderly shutdown, then recv returns an empty chunk.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/82961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kellym": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/248966", "body": "Although try a POST request with a query string attached to it.  Both will still be on the argument list.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/248966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jefimm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/255578", "body": "upload a multipart-form with  attachment of more than 100 MB or just send the HTTP header with content length more than 100 MB\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/255578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/377234", "body": "it was not fixed as connection is still not closed in this case\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/377234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brimcfadden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/285344", "body": "Nevermind; it _is_ `/ud`. I've seen `/id` thrown around on the internet a bunch, though. What's the difference?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/285344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286669", "body": "I wasn't able to get it working using /id; it wasn't discovering correctly with the example handler implementations. Perhaps my understanding of the Tornado code was poor, but I'm making more progress using the python-openid at this point. Thanks for the response.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/137455", "body": "Would it be possible to change it to `__version__`, or at least add that attribute? It would conform to what I have seen to be a stronger convention.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/137455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yangofzeal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286314", "body": "thanks for the patient and clear explanation!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/286314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jokey2k": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/307500", "body": "meh, seems stuff failed here, uploaded the diff to\nhttp://www.markus-ullmann.de/dokumente/0001-Properly-call-close-on-application-objects.patch\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/307500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kulasama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308299", "body": "i am a chinese. china gov forbid  http://groups.google.com  with great firewall\u3002so i can't visit this website.\n\nhttp://groups.google.com/group/python-tornado/browse_thread/thread/867cfb2665ea10a9/fc9a53000f4c104d?lnk=gst&amp;q=testcase#fc9a53000f4c104d\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "benweatherman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308952", "body": "Ah, I was actually not aware of such attacks.  Thanks for the heads up.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/308952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vishnevskiy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309500", "body": "Here I provided a server and a client which will show the issue.\n\n**server.py**\n\n```\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.options\n\nclass MainHandler(tornado.web.RequestHandler):\n    def post(self):\n        self.write(self.request.body)\n\napplication = tornado.web.Application([\n    (r\"/\", MainHandler),\n])\n\nif __name__ == '__main__':\n    tornado.options.parse_command_line()\n    http_server = tornado.httpserver.HTTPServer(application)\n    http_server.listen(8888)\n    tornado.ioloop.IOLoop.instance().start()\n```\n\n**client.py**\n\n```\nfrom tornado import escape\nfrom tornado.httpclient import HTTPRequest, AsyncHTTPClient\nimport time\nimport tornado.ioloop\n\ni = 0\n\ndef callback(response):\n    print response.body\n\ndef request():\n    body = escape.json_encode([{'test': 1}])\n    AsyncHTTPClient().fetch(HTTPRequest('http://localhost:8888/', method='POST', body=body), callback)\n\nwhile i < 10:\n    tornado.ioloop.IOLoop.instance().add_timeout(time.time() + i * 2, request)\n    i += 1\n\nif __name__ == '__main__':\n    tornado.ioloop.IOLoop.instance().start()\n```\n\nI am Ubuntu 10.04\n\nOur server has the same issue as our dev machine.\n\nYou will see an exact 40ms overhead after the first request.\n\nThis issue seems to exist in all the HTTPClients, and it only occurs after a certain amount of time it seems. If you don't put a delay between requests, they are all fast.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309689", "body": "Something I found in my testing, if I close() the HTTPClient and use a new one every time, this issue does not exist, but this does not seem efficient\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/309689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/310868", "body": "Something to note, when we originally found this bug few months ago we switched to the standard Python httplib to send requests and there was no delay. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/310868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/311085", "body": "I put that in for our code base, I will tell you if anything goes horribly wrong.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/311085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mfussenegger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/314070", "body": "It's been 9 month since this comment. Any plans on a 0.3 release or something?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/314070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "douglasgraves": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/315548", "body": "Ah, thanks for pointing this out!  Pardon my GitHub n00bness.  Closing the ticket.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/315548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "swasheck": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/318696", "body": "Thanks!  If I wasn't just cutting my teeth on Python I'd actually try to contribute more than the \"issue.\"  I have a 3 yo and 5 yo so I know the time constraints. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/318696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "GvS666": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/325192", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/325192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aloksingh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/327764", "body": "Same issue in the loop that calls remove_handler(fd)\n\n<pre>\n2010-07-26 12:00:50,449 [ERROR] - Exception in callback <bound method AsyncHTTPClient._perform of <tornado.httpclient.AsyncHTTPClient object at 0xe70af10>>\nTraceback (most recent call last):\n  File \"/usr/local/jive/python/lib/python2.6/site-packages/tornado/ioloop.py\", line 245, in _run_callback\n    callback()\n  File \"/usr/local/jive/python/lib/python2.6/site-packages/tornado/httpclient.py\", line 214, in _perform\n    self.io_loop.remove_handler(fd)\n  File \"/usr/local/jive/python/lib/python2.6/site-packages/tornado/ioloop.py\", line 135, in remove_handler\n    self._impl.unregister(fd)\nIOError: [Errno 2] No such file or directory\n</pre>\n\n\nIn httpclient.py\n\n```\nfor fd in self._fds:\n        if fd not in fds:\n            self.io_loop.remove_handler(fd)\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/327764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Sh4rK": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/342173", "body": "ok thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/342173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sagelywizard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381422", "body": "Oh, I forgot to mention something: Python CAN'T GC cyclical references if anything in the cycle has a __del__ method.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381674", "body": "I believe HTTPResponse has a __del__ method on line 472. (http://github.com/facebook/tornado/blob/master/tornado/httpclient.py#L472)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/381674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "allanca": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/437312", "body": "Yup. That works. Thanks\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/437312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ghazel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/455258", "body": "The only pieces missing from IOStream are a connect method which issues a connect_ex call and registers for read+write events, and then a check in _handle_events (or _handle_read and _handle_write) to call _handle_connect when an event occurs.\n\nYou can write this by hand in a few ways, as I did, but all of them result in some kind of ioloop._add_handler or iostream._add_io_state call to register for the event.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/455258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458115", "body": "Well, if I call IOStream.read on Windows before the connection is complete I get \"socket.error: [Errno 10057] A request to send or receive data was disallowed because the socket is not connected ...\"\n\nBut anyway, something like this maybe? https://gist.github.com/9972b217b2be7a26f8dd\n\nOpen questions:\n1) stream.connect(host, port, callback) or stream.connect((host, port), callback)?\n2) leave the check for _connecting in _handle_events forever, or use a temporary _handle_events replacement while connecting?\n3) more ssl options when wrapping an SSLIOStream?\n\nAlso this doesn't update any of the examples or tests yet, obviously.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458120", "body": "In any case I've ever run in to, pycurl has outperformed a pure-python http client. Can you post some benchmark or profiling of pycurl which illustrate your issue?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458198", "body": "I tried this on Windows 7 x64 with a TCP socket. Writing a few hundred MB in one send call, one time, I was able to get:\nWARNING:root:Write error on 120: [Errno 10055] An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full\n\nBy writing 3GB in one send call I seem to be able to reliably get:\nWARNING:root:Write error on 120: [Errno 2] No such file or directory\n\nwhich happens right before my display driver crashes. Fun.\n\nTwisted limits their sends to 128kB, and tests sending 60MB, citing problems on Windows. So, some sort of upper bound might be a good idea. 8kB does seems a bit small.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/465127", "body": "Almost. In non-blocking mode connect() raises EWOULDBLOCK\n\n```\nC:\\Users\\Greg\\projects\\tornado.master>test_connect.py\nTraceback (most recent call last):\n  File \"C:\\Users\\Greg\\projects\\tornado.master\\test_connect.py\", line 20, in <module>\n    stream.connect((\"friendfeed.com\", 80))\n  File \"C:\\Users\\Greg\\projects\\tornado.master\\tornado\\iostream.py\", line 110, in connect\n    self.socket.connect(address)\n  File \"C:\\Python27\\lib\\socket.py\", line 222, in meth\n    return getattr(self._sock,name)(*args)\nsocket.error: [Errno 10035] A non-blocking socket operation could not be completed immediately\n```\n\nAnd of course even after fixing that, the example in the iostream comments fails because of the 10057 error I pasted above, when it tries to read to the end of the HTTP headers before the socket is connected.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/465127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mdg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458544", "body": "Withdrawing this request, I realized the path=None part of this shouldn't be in there.  Will submit a new diff.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458822", "body": "Still screwed up the diff on this one too.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/458822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "upalse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/466687", "body": "it seems to be rather common for epoll to spuriously forget about descriptors once they become unpollable (e.g. peer shuts down connection).\n\n```\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.6/dist-packages/tornado-1.1-py2.6.egg/tornado/httpclient.py\", line 205, in _handle_socket\n    self.io_loop.update_handler(fd, ioloop_event)\n  File \"/usr/local/lib/python2.6/dist-packages/tornado-1.1-py2.6.egg/tornado/ioloop.py\", line 155, in update_handler\n    self._impl.modify(fd, events | self.ERROR)\nIOError: [Errno 2] No such file or directory\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.6/dist-packages/tornado-1.1-py2.6.egg/tornado/httpclient.py\", line 205, in _handle_socket\n    self.io_loop.update_handler(fd, ioloop_event)\n  File \"/usr/local/lib/python2.6/dist-packages/tornado-1.1-py2.6.egg/tornado/ioloop.py\", line 155, in update_handler\n    self._impl.modify(fd, events | self.ERROR)\nIOError: [Errno 2] No such file or directory\n```\n\nfix:\n\n```\n$ git diff\ndiff --git a/tornado/ioloop.py b/tornado/ioloop.py\nindex ea34e0f..dbda034 100644\n--- a/tornado/ioloop.py\n+++ b/tornado/ioloop.py\n@@ -152,7 +152,11 @@ class IOLoop(object):\n\n     def update_handler(self, fd, events):\n         \"\"\"Changes the events we listen for fd.\"\"\"\n-        self._impl.modify(fd, events | self.ERROR)\n+        try:\n+            self._impl.modify(fd, events | self.ERROR)\n+        except (OSError, IOError):\n+            logging.debug(\"Error updating fd in IOLoop\", exc_info=True)\n+\n\n     def remove_handler(self, fd):\n         \"\"\"Stop listening for events on fd.\"\"\"\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/466687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akrymski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/468313", "body": "thats great, is reverse_url available in templates btw?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/468313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "clofresh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/468731", "body": "Yes, reverse_url is available in templates as just reverse_url() (no self)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/468731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/481288", "body": "rethinking the approach based on feedback from the [mailing list](http://groups.google.com/group/python-tornado/browse_thread/thread/2f1b7a60caf259c8#)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/481288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "readysetawesome": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/469550", "body": "Oh right, good call.  love that async magic in the stream interface...\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/469550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mikelikespie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/479440", "body": "Woops, you're correct.  I think I came across this when I had a bug in my code. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/479440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alexdong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/488838", "body": "I wrote a module for tornado similar to the AsyncHTTPClient just for this purpose. \nhttp://github.com/alexdong/tornado/blob/master/tornado/async_process.py\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/488838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/490128", "body": "Well, you might want to leverage the `async_process` and pipe the result into tornado. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/issues/comments/490128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bickfordb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68168", "body": "That's unfortunate: this made debugging and using Tornado significantly easier for me.   Global logging configuration (e.g. 'logging.getLogger(\"tornado.web\").setLevel(logging.ERROR)' seems to work fine. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68435", "body": "That make sense to me.  In my application I'm configuring root handlers to log to stderr + scribe globally in my run script.  I missed the \"no loggers configured\" message and the fact that module-logged messages aren't visible by default.  \n\nThis isn't the first time the logging module has been a pain point for me.  I started working on [what I believe is] a better logging library called \"logit\" (http://github.com/bickfordb/logit) if anyone reading this is interested in contributing or has any ideas.  \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/68435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cv12": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/74787", "body": "Can you please explain the purpose of the time independent compare?  Why didn't the simple compare suffice?  Thanks in advance for your explanation.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/74787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/75007", "body": "Thanks.  Very helpful.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/75007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nadako": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/77835", "body": "Why close socket on empty chunk?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/77835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "swax": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80276", "body": "I thought calling receive_message, to get the next message, was by design. So that we can choose whether to get another message, or have a different function handle the next message. I think if the receive_message callback was meant to be auto-called, it would have been part of the websocket constructor.  Also this breaks anyone currently using websockets. Can you please double check this?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80300", "body": "I don't think having two ways to do the same thing is the best answer. I liked the simple design before and the confusion seems to stem from a documentation deficiency in the header of the file. Can you get this change reviewed by other contributors?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/80300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/86566", "body": "inferno, I can see a recursion error happening if the recv buffer for the websocket is always full. Meaning when read_until is called in websocket.py, it is always immediately raising the callback, instead of passing the callback to the ioloop and returning. Is this what you were seeing, and was it actually happening in production, what were the circumstances? I like bdarnell's on_message solution. Implementers already make use of on_accept and on_close, so an on_message override makes sense.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/86566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/87129", "body": "Ah ok. Guess that's fixed with the revert. I checked out that other potential recursion issue - if sys.getrecursionlimit > # packets in the iostream read buffer then there'd be a max recursion error. Luckily the read buffer is at 4k and sys.getrecursionlimit is 1000 (on my machine at least.) So it's pretty unlikely to pop up.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/87129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rickardb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/85798", "body": "With this code the callback is decorated for each message, causing an maximum recursion depth error.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/85798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/87275", "body": "Swax, I've actually had the error you described as well. This happened when I did performance test on the system. The read_buffer is actually self.max_buffer_size (104857600) and each chunk 4k. i.e. the buffer can hold around 25k packets before the buffer is full.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/87275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rhcarvalho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/97168", "body": "Is there a typo here?\n\"Since we _run using_ processes and not threads\" OR\n\"Since we _run_ processes and not threads\" OR\n\"Since we _use_ processes and not threads\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/97168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tolka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/114847", "body": "test\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/114847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tjgillies": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/115252", "body": "Congrats on 1.0!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/115252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nijikon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/135088", "body": "the version_info is declared but not used, purge it or use the tuple as version indicator and in the code switch to something like '.'.join([str(v) for v in version_info]) where needed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/135088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/195013", "body": "listen method should have possibility of passing host after port and after that kwargs\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/195013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ithayer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/189742", "body": "This should be \"self.socket\" instead of \"socket\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/189742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "peterbe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/194979", "body": "Excellent! I like this commit. It makes the code look less scary as a complete newbie\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/194979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/222336", "body": "Did this commit boost the performance that I skimmed about on the mailing list?\n\nLooks like a rather big change. Any idea when you might make a release out of it?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/222336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/407594", "body": "Hurray! I like it!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/407594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "joshstaiger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/200482", "body": "This is causing a multipart/form-data posts to fail from Firefox and Safari.\n\nIn the debugger, I'm seeing k = \" boundary\" (leading space), which causes the mime fields not to get parsed.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/200482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "marrow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/216854", "body": "I've added a benchmark tool, modeled after this one, to my own Tornado IOLoop/IOStream-based HTTP server: https://github.com/pulp/marrow.server.http/blob/master/examples/benchmark.py\n\nIt uses marrow.script for command-line processing.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/216854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jparise": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/222383", "body": "It looks like this was the only use of `contextlib` in this module.  The `import contextlib` line up top can be removed, too.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/222383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/246700", "body": "It's possible for connection to be None here.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/246700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/569058", "body": "Any reason not to also allow tuples (or any sequence, for that matter)?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/569058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1950707", "body": "`s/StreamClosedException/StreamClosedError/`\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1950707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/19556", "body": "Because this is intended to attack the newline added by the base64 encoding, perhaps `rstrip()` would be slightly more explicit/efficient?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/19556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/61329", "body": "Could this be made even more useful by having it return the number of days until expiration?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/61329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/291505", "body": "I think you should protect the `MySQLdb` and `psycopg2` imports so that neither is required until the point that the user selects a particular database connection type.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/291505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/291522", "body": "Instead of using enumeration-ish constants for `db_type`, what if you either passed in a string (containing the letters \"mysql\" or \"postgresql\") or the desired connection class object (`MysqlConnection` or `PostgresConnection`)?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/291522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292076", "body": "I suppose I don't really see the practical benefit of:\n\n```\nfrom database import MYSQL, Connection\nc = Connection('localhost', 'database', MYSQL)\n```\n\nover:\n\n```\nfrom database import Connection\nc = Connection('localhost', 'database', 'mysql')\n```\n\nI'm still typing the letters \"mysql\", and both cases will result in some sort of runtime failure if I mispel it.  If that `MYSQL` symbol wrapped a particularly interesting value (other than just a faux enum) and was used in more than one place (other than the `create()` factory method), I'd consider it more useful.\n\nMy opinion here is rather Python-specific, by the way, because it doesn't actually have enumerations in the strict typing sense.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/912950", "body": "Shouldn't this always be `\"1.0\"`?  The rest of the `tornado.auth` code is pretty much hardwired to handle either version 1.0 or 1.0a, and if we always need to send 1.0 in the 1.0a case, all cases are covered.\n\nThis also makes the `_oauth_version_to_send()` method unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/912950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1921528", "body": "If we're going to verify the time value, it would be more complete to test `<= 0`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/1921528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "justindujardin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/321089", "body": "Thanks, this was exactly the fix I was looking for!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/321089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nixon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/404832", "body": "Much nicer than my original url_concat :)\n\nDo you care about the args={} case?  It will result in a trailing '?' or '&' on the url.\n\n```\ndef test_url_concat_no_params(self):\n    url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n            {},\n            )\n    self.assertEqual(url, \"https://localhost/path?r=1&t=2\")\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/404832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "fancycode": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/473080", "body": "There is a potential race condition when the ioloop thread is woken up and processes the callbacks before the callback is actually added to the list here. When this happens, the newly added callback could be delayed up to the maximum poll interval of the ioloop thread.\n\nThe callback should be added to the list first and \"wake\" should be called afterwards.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/473080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mitchellh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/638673", "body": "<3 \n\nLet me know if you run into any troubles with Vagrant. Thanks for using it, this is a great use case!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/638673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mrjoes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/913958", "body": "This commit essentialy decreased performance of the websockets by, at least, 20%:\n\n> > > timeit.timeit('bytearray(\"1234567890\")')\n> > > 0.20886757960613522\n> > > \n> > > timeit.timeit('array.array(\"B\",\"1234567890\")', 'import array')\n> > > 0.2745079673895674\n\nI'm working on some optimizations and will provide alternative way to support python 2.5 without degrading performance on 2.6+\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/913958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2830726", "body": "This broke compatibility with Python 2.7. TypeError: object of type 'generator' has no len()\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2830726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "yangjuven": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1291477", "body": "You know, it is a just read operation that pull message from server. Why using http post method in poll request?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/1291477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mchruszcz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2182796", "body": "This is a very important fix and I would love to see it in the next stable version as soon as possible. Is there an approximate date I could expect this to be released?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2182796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2202857", "body": "That's good news! Thanks a lot.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2202857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jagguli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2200600", "body": "why cant we  just do lower(), the rfc states headers to be lower case, is there any reason for this ?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2200600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "omarish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2424448", "body": "Was just reading through the docs. Minor detail but should this read \"epoll or kqueue\" ?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2424448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "anders": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2608309", "body": "tornado.netutil -> tornado.tcpserver? it was only changed once.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2608309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "saghul": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2961686", "body": "Great, thank you for this!\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/2961686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "superduper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3140007", "body": "Hey there! Why was that changed? What if `HTTP/1.0 404 \\r\\n` header will be passed there(like PHP sometimes does)? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3140007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3140300", "body": "Thanks for a prompt reply, I guess thats the reason.. As it fails with php builtin webserver (php5.4, http://php.net/manual/en/features.commandline.webserver.php) \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3140300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "karpitsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3291519", "body": "My code get error in this line. Variable 'parent' is None.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3291519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "letoss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3428420", "body": "Who do you use the callback here? In documentation says that this is wrong, You cannot set the callback here, you must set in the app in twitter. This code works?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3428420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3437777", "body": "Sorry for \"Who\" I mean \"Where\". I use your code and There's a exception \"Could not get request token\". And I don't know why =(. My apoligies for write this here. I can't found your email en github.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3437777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wsantos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3437911", "body": "I use this code for my twitter login handler:\nhttps://gist.github.com/wsantos/5796726\n\nand checked option \"Allow this application to be used to Sign in with\nTwitter\", and all works fine.\n\nif you need more assistance let me now.\n\nGrato,\n\nWaldecir\n\nOn Mon, Jun 17, 2013 at 4:49 AM, Leandro Moreno notifications@github.comwrote:\n\n> Sorry for \"Who\" I mean \"Where\". I use your code and There's a exception\n> \"Could not get request token\". And I don't know why =(. My apoligies for\n> write this here. I can't found your email en github.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/facebook/tornado/commit/9298756eec8ea5076e123ad38c3b274a285dd317#commitcomment-3437777\n> .\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3437911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3731681", "body": "Look \u00e1t. Line 91. \n\nEnviado via iPad\n\nEm 10/04/2013, \u00e0s 07:05, Brian Jones notifications@github.com escreveu:\n\n> In tornado/auth.py:\n> \n> > @@ -1096,6 +1096,7 @@ class FacebookGraphMixin(OAuth2Mixin):\n> >      _OAUTH_AUTHORIZE_URL = \"https://graph.facebook.com/oauth/authorize?\"\n> >      _OAUTH_NO_CALLBACKS = False\n> > -    @_auth_return_future\n> >    def get_authenticated_user(self, redirect_uri, client_id, client_secret,\n> >   Sorry I know that this is a bit of a newbie comment, but what does this line do? It does not look like a future statement, I can't find the documentation for the @ decorator.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3731681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "luwenjin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3580250", "body": "Let me try.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3580250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3580283", "body": "Thanks, but I still got the same error when I refreshing a page with mp4 &lt;video&gt;\n\n``` python\nWARNING:tornado.general:error on read\nTraceback (most recent call last):\n  File \"D:\\Python27\\lib\\site-packages\\tornado\\iostream.py\", line 392, in _handle_read\n    if self._read_to_buffer() == 0:\n  File \"D:\\Python27\\lib\\site-packages\\tornado\\iostream.py\", line 448, in _read_to_buffer\n    chunk = self.read_from_fd()\n  File \"D:\\Python27\\lib\\site-packages\\tornado\\iostream.py\", line 684, in read_from_fd\n    chunk = self.socket.recv(self.read_chunk_size)\nerror: [Errno 10053] \n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3580283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3589769", "body": "Sorry, I just patched this change.\nWith the whole branch, the error message is gone, great!\n\nAlso, I saw #845 mentioned a situation similar to mine(memory leaks when serving page with &lt;video&gt; tag). And I can still see memory leaks with the whole branch.\nSo it's going to be fixed in the future (not fixed now), right?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3589769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ethan-Zhang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3581467", "body": "works for me. I'm using version 2.3, and intend to change to 3.0. And finding the way to iteritem() the options dic like v2.3 and find out this commit.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3581467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "twinsant": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3764954", "body": "How about manual call gc.collect?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/3764954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "leonsim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/4501128", "body": "Great job. But the `name` parameter is still not supported in the tuple/list format. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/4501128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "soulrebel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5024319", "body": "line 159: isn't the .get call superfluous?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/5024319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "v3ss0n": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/6904665", "body": "That's very interesting.  Its true that async callback version is a bit easier. But to understand coroutine properly this will help a lot.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/6904665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "thomasdohse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7142199", "body": "It looks like callback was removed from the parameters on wait_for_messages but it's still used on line 52\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/7142199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tumbleweed": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9800520", "body": "Why did u left `keep_blank_values` in this code?\nExplain the reason please..\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9800520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9801502", "body": "Thank you for quick response.\nIf in post body is json as string it will be added to arguments list.. For me it seems like a bug, and \"present-but-empty\"  arguments can be passed in url. Nothing stops user to put argument as a pair \"key=1\" into a post-data.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9801502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9803305", "body": "Ouhh.. I see.\nBut it seems that I make requests with `SimpleAsyncHTTPClient` and it by default sets `content-type` of POST to `application/x-www-form-urlencoded`\n\n``` python\nif (self.request.method == \"POST\" and\n                \"Content-Type\" not in self.request.headers):\n    self.request.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9803305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9803809", "body": "Thank you.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/9803809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lujinda": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/10903803", "body": "Repair: in Python 2.7, when using the \"from **future** import unicode_literals\", to Chinese characters will lead to the problem of UnicodeDecodeError\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/10903803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nitipit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/11825345", "body": "I have some issue about slow response time.\nI think by adding `multi_accept on;` should help.\nhttp://serverfault.com/questions/422537/nginx-reverse-proxy-slows-down-my-throughput-by-half\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/11825345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "meetchandan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13619084", "body": "What is the advantage of the above?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13619084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "chrisseto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13718038", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/13718038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Cypher1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/15934485", "body": "I don't think the change actually implemented passing any args and kwargs to the websocket.open function\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/15934485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "awong1900": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/comments/17525785", "body": "Still have permission problem. #1566 \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/comments/17525785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "e98cuenc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/253726", "body": "it should be: \"... to implement a simple\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/253726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jonchu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292028", "body": "Yea, I agree. I'll go ahead and do this.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292030", "body": "Passing in strings seems really ugly to me. There's a reason why enums exist, and when code gets a lot larger, strings become unmaintainable and generally exhibit bad code smell.\n\nI like the idea of passing in the class object itself, but I'll need to ponder this a little more before I go ahead and do that.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292354", "body": "I decided the right thing to do was remove the static method and factory class altogether and just allow the programmer to use duck typing. :)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/292354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "grimley517": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3730927", "body": "Sorry I know that this is a bit of a newbie comment, but what does this line do?  It does not look like a future statement, I can't find the documentation for the @ decorator. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3730927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "homm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3992389", "body": "I tried to make sure that Task arguments also released.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/3992389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wolever": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/4310684", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/4310684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sclm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6102710", "body": "Thanks for taking the time to look at this:\n1. I've updated this so that we no longer construct the absolute URL, I think you're correct about the examples, and I'll take a look at that in a bit.\n2. I've renamed that for consistency.\n3. scope and response_type are both part of the oauth2 spec, with scope a \"SHOULD\" that is required by Google when doing it.  Facebook seems to be the exception in not using the scope.  For response_type, that is a required param with only \"code\" set as a defined value.  I think we may want to merge this into the base class since they're given, with scope defaulting to null and implementations allowing for a default scope and response_type defaulting to \"code\"\n\nDoes 3 make sense?  I'm starting a branch that makes those changes to the base class for you to take a look at.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6102710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6140280", "body": "I haven't had a chance to look into this one yet, but I'm going to be working on if we can use a content-type header here or not.  I think we should definitely check for it in the base class, and then default sensibly if that header is missing.\n\nI'll update this PR in a bit to fix that up.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/6140280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mooosu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8492009", "body": "any other suggestions about the name?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/8492009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "rgbkrk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9174383", "body": "Whoops, this typo fix was meant to go in a separate PR. I can move this if necessary.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9174383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9214606", "body": "I really don't know, so I'll move it.\n\nThe reason I put it there was that I wanted to allow people to override how tornado handles the lack of an origin header.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9214606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9214683", "body": "Pardon my lack of knowledge here, but how do you spoof the host header clientside?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9214683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9216471", "body": "Re-reading this again, the idea is that an attacker would be doing a MITM attack between the client and the actual web server?\n\nWhat prevents them from bypassing this entirely by just not adding the Origin and Host headers?\n\nClearly websockets should be done over HTTPS and that additional auth on websockets should be required.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9216471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10021992", "body": "The Origin header shouldn't ever be a non-absolute URL.\n\nHowever, this is opposite the behavior of letting a lack of Origin pass. We need to pick one or the other.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10021992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10022026", "body": "Namely:\n\n```\n        # When origin is None, assume it didn't come from a browser and we can\n        # pass it on\n        if origin is None:\n            pass\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10022026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10022158", "body": "The host won't necessarily have the scheme.\n\nChrome, for one, just delivers the hostname (+port if in the URL).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10022158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10022191", "body": "I will go ahead and move the origin header parsing into `check_origin`.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/10022191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12446734", "body": "The origin and host header are both provided by the browser. I'm not sure what you want to test here.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12446734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/13034689", "body": "Yes, \"did _not_ come from a browser\".\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/13034689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ellisonbg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9215165", "body": "I agree that to do proper origin validation we need to have an explicit list of acceptable origin values.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9215165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9218258", "body": "My statement was not based on preventing any particular method of attack the HOST header. It more has to do with the general idea that I don't think it is a good idea to trust the incoming request for both pieces of information.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/9218258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "dano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12639128", "body": "Ah, good tip. I'll update it.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12639128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12801150", "body": "Thanks, I've made the suggested changes. My pull request isn't updated to reflect the pushes I'm making to my fork, though. I've opened a ticket with github to try to figure out what the issue is, but you can see the actual content of the pull request here in the meantime: https://github.com/dano/tornado/compare/tornadoweb:master...master\n\nedit: The github folks tell me that tornado moving from facebook to tornadoweb caused the pull request issue. Seems to be fixed now.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/12801150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tiwilliam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14653334", "body": "You've got me, we're using Python 2 :cry: \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/14653334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tatiana": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15367744", "body": "@bdarnell  thanks a lot for all the guidance :)\n\nThis fetch overwrite was a internal hack, before the patch. Just removed it, thanks!\nRegarding PATCH being a non-standard method, it was treated as custom method before at tornado/curl_httpclient.py. It now works without allow_nonstandard_methods.\n\nI couldn't find PATCH as a HTTP standard method at the RFC though:\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n\nAm I looking the wrong place?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15367744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15367775", "body": "Thanks again @bdarnell, just removed it :)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/15367775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "DriverX": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29317699", "body": "Cookie stdlib has no difference between python2.7 and python 3.4, and follow RFC 2109 and RFC 2068. \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29317699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29317876", "body": "Ok, i fix it and docstrings too. Sorry.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29317876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29318160", "body": "This changes required individual test case?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29318160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29411975", "body": "No difference. This code duplication needs only for partial (key=value) custom parse cookies with catch exceptions if need, because stdlib not provide convenient method to implement some custom handle other situation. But problem with incorrect name is very frequent in real world, even if some symbols is not allowed in RFC 2616 (http://tools.ietf.org/html/rfc2616#section-2.2). Probably solution is not pretty but it works. I will be glad if you offer anything better :)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29411975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29447254", "body": "Yes, a lot of changes for simple check, but i not found better solution. For example django project use ugly method to fix this https://github.com/django/django/blob/master/django/http/cookie.py#L76 or based on it https://github.com/hhru/tornado/blob/master/tornado/httputil.py#L68\nWerkzeug uses its implementations of parse cookies https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/_internal.py#L271\nFinally there is a third-party library https://github.com/sashahart/cookies\nMaybe it's better solution than mine, maybe not, but many developers faced with this.\n\n> Why does it matter how common invalid cookies are \"in the real world\" when you only have to deal with cookies on your own domain (i.e. ones you set)?\n\nBecause my project working on subdomain and many other projects works on other subdomains too, but all of them can set cookie to global domain (i.e. .foo.com) and some cookie may be invalid to my project. Without this changes i lost all users cookie if even one cookie is bad, and it makes me sad.\n\nI understand your risk. I understand it you reject my pull request, but the problem should be solved and need to learn to ignore bad cookies instead raise exception and ignore all of cookies.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/29447254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mr-ping": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/37954516", "body": "Use TypeError & ValueError directly or define new Error Classes like \"OptionValueError\",  which is more suitable here? \n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/37954516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/38818655", "body": "I removed the TypeError and fixed the string formatting problems.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/38818655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "noxiouz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/39322956", "body": "Ok, so I will raise an exception if \n\n``` python\nreuse_port=True and not hasattr(socket, \"SO_REUSEPORT\")\n```\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/39322956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "obsh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60765579", "body": "At least it works in latest Chrome and Firefox on OS X - I've tested there. But as I see from cookies RFC 6265 - browsers are free to ignore it: \"User agents MAY ignore Set-Cookie headers contained in responses with 100-level status codes\"\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60765579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60766972", "body": "PR updated to not introduce new interface.\nWhat do you think on using `set_default_headers` method for this purpose?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/60766972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/61733606", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/61733606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "daftshady": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64144147", "body": "I fixed it. The server closes connection here.\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/64144147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nickcoutsos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/66849635", "body": "Yeah, I was a little unsure about how best to organize it. Wasn't this test already covering that by doing its followup request for `\"/no_content?error=1\"`? Or do you mean to move that part of the test into the other test case (and rename I suppose)?\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/66849635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lilydjwg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77525981", "body": "But it can't go there. The error is raised before the future is created (from `_create_stream` which will fail to create an IPv6 socket).\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77525981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77569460", "body": "I'll try to do that later :-)\n", "reactions": {"url": "https://api.github.com/repos/tornadoweb/tornado/pulls/comments/77569460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}