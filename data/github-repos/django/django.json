{"_default": {"1": {"jdufresne": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/ff05de760cc4ef4c7f188e163c722ec3bc1f0cbf", "message": "Fixed #29038 -- Removed closing slash from HTML void tags."}, {"url": "https://api.github.com/repos/django/django/commits/4b0f39d9fb2033a9597e30ac13af162440b82ebc", "message": "Refs #29041 -- Fixed typo in docs/releases/2.1.txt."}, {"url": "https://api.github.com/repos/django/django/commits/47d238b69602711c06c369a5555bb554a4b3f7fb", "message": "Fixed #29041 -- Changed SelectMultiple's multiple attribute to HTML5 boolean syntax."}, {"url": "https://api.github.com/repos/django/django/commits/90ca9412e4d2f0b543938a1fa3fbc43c2c7ac57f", "message": "Removed unnecessary microsecond truncation in SplitDateTimeWidget.\n\nThe microseconds are already truncated by the TimeInput subwidget."}, {"url": "https://api.github.com/repos/django/django/commits/3c34452ab5e5de816357aee99cd2a98a0c7c4e50", "message": "Refs #23668 -- Removed passing default argument of current TZ to make_aware()/naive."}, {"url": "https://api.github.com/repos/django/django/commits/1e81a4b897b6b4343fcae58e9dc1349cc95fade5", "message": "Fixed #28638 -- Made allowed_hosts a required argument of is_safe_url()."}, {"url": "https://api.github.com/repos/django/django/commits/da82939e5a31dea21a4f4d5085dfcd449fcbed3a", "message": "Fixed #28912 -- Made EmailMessage.message() omit an empty To header."}, {"url": "https://api.github.com/repos/django/django/commits/b03d5002955256c4b3ed7cfae5150eb79c0eb97e", "message": "Fixed #28971 -- Made EmailMessage.message() set Cc from headers dict if it exists."}, {"url": "https://api.github.com/repos/django/django/commits/63349394170347241c48a445c843ff2be53e3a8a", "message": "Tested passing To/Cc/Reply-To in EmailMessage(headers=...) without the corresponding argument."}, {"url": "https://api.github.com/repos/django/django/commits/7a6fbf36b1fdb8978ea0842075ccce83bcd63789", "message": "Fixed #28853 -- Updated connection.cursor() uses to use a context manager."}, {"url": "https://api.github.com/repos/django/django/commits/6ed347d8518e23d7e453bdb21f7fa59ce2c4a885", "message": "Fixed #28706 -- Moved AuthenticationFormn invalid login ValidationError to a method for reuse."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9611", "title": "Refs #21221 -- Deprecated staticfiles templatetag in favor of static.", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "felixxm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/aad1833fa05eb3376dc614de4a17c82f5635f36c", "message": "Refs #20487 -- Added test for querying mixed case fields with common related model.\n\nThanks Shai Berger for the review."}, {"url": "https://api.github.com/repos/django/django/commits/7fbb1bd00d8a3e9a834de83d36ebcbff15c18938", "message": "Fixed #29032 -- Fixed an example of using expressions in QuerySet.values()."}, {"url": "https://api.github.com/repos/django/django/commits/385e6fb352f3cb80d2f72838e08372cb392aaa45", "message": "Removed Query.split_exclude()'s unused prefix argument.\n\nUnused since b4492a8ca4a7ae4daa3a6b03c3d7a845fad74931."}, {"url": "https://api.github.com/repos/django/django/commits/7c81b28ebcaebbc2e5bbca9a73427d81166ce3dc", "message": "Updated various links in docs to use HTTPS."}, {"url": "https://api.github.com/repos/django/django/commits/8f8a93a9ae49fa807348f9f456b6635c8ebc5d0c", "message": "Fixed #28859 -- Made Oracle backend raise DatabaseError if \"no data found\" exception is hidden by the Oracle OCI library.\n\nThanks Tim Graham for the review and Jani Tiainen for the report."}, {"url": "https://api.github.com/repos/django/django/commits/c86e9b5847bc2853fc6a3fcfbf8daa56786d3210", "message": "Removed DeferredAttribute.__init__()'s unused model argument.\n\nUnused since a8a81aae20a81e012fddc24f3ede556501af64a2."}, {"url": "https://api.github.com/repos/django/django/commits/51a00749e9d1814acfb6bf8732ecd21f18944083", "message": "Used Decimal.scaleb() in backends.utils.format_number() and DecimalField.widget_attrs() to improve performance."}, {"url": "https://api.github.com/repos/django/django/commits/83a36ac49a98d5d8801ed8428612e9a56aeb8699", "message": "Removed unnecessary trailing commas and spaces in various code."}, {"url": "https://api.github.com/repos/django/django/commits/1d00923848d504c6132019492b8d5a6cdf8261db", "message": "Refs #28958 -- Added a test for ModelAdmin with query expressions in ordering.\n\nThis provides additional test coverage but isn't a regression test for\r\nthe ticket's issue."}, {"url": "https://api.github.com/repos/django/django/commits/c8152137400b5932578cd1788b79560c9772e56b", "message": "Fixed #28958 -- Fixed admin changelist crash when using a query expression in the page's ordering.\n\nThanks Tim Graham for the review."}, {"url": "https://api.github.com/repos/django/django/commits/fc9eec7bb7d5e3e6426bb612277bfcecb943e8ac", "message": "Fixed #28934 -- Prevented Cast from truncating microseconds on Oracle."}, {"url": "https://api.github.com/repos/django/django/commits/4420761ea9457d386b2000cf9df5b2f6f88f8f91", "message": "Fixed #28727 -- Fixed Cast crash on SQLite when casting a Python date/datetime to Date/DateTimeField."}, {"url": "https://api.github.com/repos/django/django/commits/78247b80a8cbf1ebfb7a54624de7dc92e1a1f888", "message": "Simplified and improved performance of floatformat filter.\n\nThanks Sergey Fedoseev for the review."}, {"url": "https://api.github.com/repos/django/django/commits/fc48047586a8f92262f55d9d2bfb976325844b23", "message": "Refs #28876 -- Fixed incorrect foreign key constraint name for models with quoted db_table.\n\nThanks Simon Charette and Tim Graham for the review and Carlos E. C.\nLeite for the report."}, {"url": "https://api.github.com/repos/django/django/commits/f79d9a322c6008e5fada1453aebfb56afc316cc8", "message": "Refs #28876 -- Fixed incorrect class-based model index name generation for models with quoted db_table.\n\nThanks Simon Charette and Tim Graham for the review and Carlos E. C.\nLeite for the report."}, {"url": "https://api.github.com/repos/django/django/commits/ad5f33ee03edd26c7947e9beab949a6a8bfdb16f", "message": "Refs #27954 -- Fixed typo in django/db/backends/postgresql/client.py comment."}, {"url": "https://api.github.com/repos/django/django/commits/fc22a0a2142c3416d7113dec95c4026bd846a851", "message": "Removed unused words from docs/spelling_wordlist."}, {"url": "https://api.github.com/repos/django/django/commits/2d3cc94284674638c334670903d49565039d77ae", "message": "Fixed #28781 -- Added QuerySet.values()/values_list() support for union(), difference(), and intersection().\n\nThanks Tim Graham for the review."}, {"url": "https://api.github.com/repos/django/django/commits/81e357a7e19f35235cc998459a10213532727d4e", "message": "Fixed #28689 -- Fixed unquoted table names in Subquery SQL when using OuterRef.\n\nRegression in f48bc7c3dbd204eefb3c19016b1e4906ac26bee3."}, {"url": "https://api.github.com/repos/django/django/commits/0f722d865ee556816c36ae6c6bf229904b5142dd", "message": "Removed redundant inner imports."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9612", "title": "Refs #11487 -- Removed redundant test_long_string() on Oracle.", "body": "Redundant with `model_regress.tests.ModelTests.test_long_textfield()` since 3ede430b9a94e3c2aed64d2cf898920635bdf4ae.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9220", "title": "Refs #28643 -- Added LTrim, RTrim, and Trim database functions with aliases LStrip, RStrip, and Strip, respectively.", "body": "https://code.djangoproject.com/ticket/28643", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ramiro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/37c17846ad6b02c6dca72e8087a279cca04a0c27", "message": "Fixed #28343 -- Add an OS chooser for docs command line examples."}, {"url": "https://api.github.com/repos/django/django/commits/e67733aa65c727fb378c34e79272c9b12bd33762", "message": "Fixed #28963 -- Raised minimum Sphinx version."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9538", "title": "Fixed #25790 -- Added option to disable column sort in admin changelist.", "body": "https://code.djangoproject.com/ticket/25790", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5999356", "body": "IS there any online resource where information about this can be confirmed?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5999356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1759160", "body": "@mageshkhanna \n\nFrom `help(str.find)` output: _S.find(sub [,start [,end]]) -> int -- Return the lowest index in S where substring sub is found [...] Return -1 on failure._\n\nSo, the code is correct as it is.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1759160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2201421", "body": "s/paramater/parameter/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2201421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2335065", "body": "Oh sorry for not searching Trac and thanks for your work on that ticket.\n\nI've found about this while trying to learn about the 1.3.->1.4->1.5 migration path and I've read one thread in the last week related to this (i.e. this is affecting users in the real world).\n\nI can undo the commit easily but OTOH I think it's better to it documented and don't block on a theoretical future doc refactoring.\n\nAlso, w/ this we have dummy :setting:`PASSWORD_HASHERS` in other parts of the docs.\n\nAnd we already have another django.contrib.auth setting (PASSWORD_RESET_TIMEOUT_DAYS) just below it.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2335065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2476929", "body": "My bad. Will fix it soon. Thanks Claude.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2476929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2553710", "body": "It's simply to check if settings are available just like the documentation of can_import_settings says.\n\nThis is what used to be implemented by importing django.util.traslation (which then load settings to know the value of USE_I18N)\n\nI see in the file history that previously it used to try/catch and report the error condition but it seems to have been changed to simply trying to trigger settings loading. I suspect because the ImportError is handled at an upper level.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2553710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2622154", "body": "Thank you very much for catching this old thinko!\n\nSome notes:\n- dirnames is returned by  os.walk and we can modifiy it in place. As you've found, problem is that we were doing that in place mod wrongly.\n- We can't use filter() because we need dirnames to still be a list and we need to be compatible with Python3.\n\nI think I'm going to replace all the loop with:\n\n```\n    dirnames[:] = [d for d in dirnames if not d.startswith('.') and d != '__pycache__'] \n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2622154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "timgraham": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/a22ef3bb379a8783d0a2c3d7e1de531dce220a75", "message": "Removed library name from file names of admin's JavaScript library licenses."}, {"url": "https://api.github.com/repos/django/django/commits/afd50a301996484816022c9595acd026ad51f40d", "message": "Replaced \"trunk\" with \"master branch\" in docs."}, {"url": "https://api.github.com/repos/django/django/commits/b902878fd61feb83159a4770ccf327d532963b67", "message": "Doc'd the latest state of the Jenkins pull request builders."}, {"url": "https://api.github.com/repos/django/django/commits/cea5fe94c6bb1b61e791f1375c246566c950b3e3", "message": "Added stub release notes for 1.11.10."}, {"url": "https://api.github.com/repos/django/django/commits/b17c1d53fd7875dd0e3ffcffbfdeff348834b9b0", "message": "Removed unused query log clearing in bulk_create tests."}, {"url": "https://api.github.com/repos/django/django/commits/b9cec9fa1fc50207ab68a59853c851a945c5db5e", "message": "Fixed #29017 -- Updated BaseCommand.leave_locale_alone doc per refs #24073."}, {"url": "https://api.github.com/repos/django/django/commits/4bcec02368b7e5466f64dc17286689b16613c94b", "message": "Added tests for django.forms.formsets.all_valid()."}, {"url": "https://api.github.com/repos/django/django/commits/a8e492bc81fca829f5d270e2d57703c02e58701e", "message": "Removed note in tutorial about bypassing manage.py.\n\nThis isn't relevant for beginners."}, {"url": "https://api.github.com/repos/django/django/commits/7c00f9fb1cc47e1c993f7728e2b592a1be29dd40", "message": "Fixed #29002 -- Corrected cached template loader docs about when it's automatically enabled.\n\nThanks oTree-org for the suggestion."}, {"url": "https://api.github.com/repos/django/django/commits/1c95737ebebb9fe1b59e9de08d4e8cd7226de00d", "message": "Reduced redundancy in DecimalField tests with subTest()."}, {"url": "https://api.github.com/repos/django/django/commits/db9cd1b37e5fee2fdcbf888cb390dc751a8b8150", "message": "Unified construction of WITH SQL in contrib.postgres.indexes."}, {"url": "https://api.github.com/repos/django/django/commits/366451880abc7f4d3c9b40e5640e1b75fe7b14dc", "message": "Updated HttpRequest.build_absolute_uri() tests to use subTest()."}, {"url": "https://api.github.com/repos/django/django/commits/66d74676e23c32bc676fb0706af8580b391953b6", "message": "Fixed a GeoIP2 test failure with the latest GeoIP2 database."}, {"url": "https://api.github.com/repos/django/django/commits/d60e8b856b49922deb85a168e48e56f16facd5df", "message": "Added DatabaseFeatures.is_postgresql_9_5 to avoid repetition."}, {"url": "https://api.github.com/repos/django/django/commits/8e94f9f7dd515e49621b4a8395077a0cd2ab4c78", "message": "Moved HttpResponse.set_cookie() tests to an appropriate location."}, {"url": "https://api.github.com/repos/django/django/commits/ec2ce4517ac89f6c6334fe5322d1fc2007dfcbd4", "message": "Fixed #28882 -- Fixed cleaning of disabled MultiValueFields.\n\nThanks avalanchy for the initial patch."}, {"url": "https://api.github.com/repos/django/django/commits/5d5a2bd299c97f8e03d79380345ec8713d612f58", "message": "Confirmed support for PostGIS 2.4."}, {"url": "https://api.github.com/repos/django/django/commits/8e1a7dab4b98dee2c696d435ea02f56de6250aa0", "message": "Reorganized test_runner test apps."}, {"url": "https://api.github.com/repos/django/django/commits/acc8dd4142ec81def9a73507120c0262ba6b1264", "message": "Fixed #28984 -- Made assorted code simplifications."}, {"url": "https://api.github.com/repos/django/django/commits/ab7f4c330629f24f006a35729ee0d758711312fa", "message": "Refs #28965 -- Deprecated unused django.utils.http.cookie_date()."}, {"url": "https://api.github.com/repos/django/django/commits/5f456408a0f52dc16f627d4a89ced5f52c36ad2f", "message": "Refs #28930 -- Simplified schemas test with any()."}, {"url": "https://api.github.com/repos/django/django/commits/0f5a741ada39f5ac193b9b9cfc00088ebd325f32", "message": "Added stub release notes for 2.0.2."}, {"url": "https://api.github.com/repos/django/django/commits/3ae2bcc7689bb912399c08329d2baa4b5d8bd6b2", "message": "Added release date for 2.0.1 and 1.11.9."}, {"url": "https://api.github.com/repos/django/django/commits/d065c92678f5d11a70b88e195c6357576eb3a2ef", "message": "Fixed #28918 -- Fixed Model.refresh_from_db() for instances hidden by the default manager."}, {"url": "https://api.github.com/repos/django/django/commits/46d1af2e82c2b2a6976397719afde33b5cff2498", "message": "Moved generic_inlineformset_factory() tests to a separate file."}, {"url": "https://api.github.com/repos/django/django/commits/058d112ed2635873d415661bdf0fcc8752ec37c9", "message": "Refs #27175 -- Removed an obsolete test comment and DEBUG=True.\n\nAs of e62165b898785e890661953c3b2c9c36d98aee57, {% include %}\ndoesn't silence exceptions."}, {"url": "https://api.github.com/repos/django/django/commits/038ea4f8593618cf0f408f15f756f2145de0d40e", "message": "Fixed #28966 -- Doc'd that the uuid URL path converter requires dashes"}, {"url": "https://api.github.com/repos/django/django/commits/6deaddcca367d0143c815aaa42342021baa3b41e", "message": "Fixed #28956 -- Updated admin's jQuery to 3.2.1."}, {"url": "https://api.github.com/repos/django/django/commits/0fc4b1f31f3cf7788e38a3d53f32254d340f50e8", "message": "Refs #28956 -- Removed usage of jQuery's deprecated event methods in admin JavaScript."}, {"url": "https://api.github.com/repos/django/django/commits/b730973fff14f4e0184f5522eaf9f5e64891d431", "message": "Refs #28956 -- Removed usage of jQuery's deprecated .selector property in admin JavaScript."}, {"url": "https://api.github.com/repos/django/django/commits/8dbaeb61389d9a04394e9191cb27bf8faf72642f", "message": "Updated minified admin JavaScript for the latest closure compiler."}, {"url": "https://api.github.com/repos/django/django/commits/04d1454350dc92a68ef315ce8ed4d0a0482c587e", "message": "Moved unnecessary inner imports in admin_scripts tests."}, {"url": "https://api.github.com/repos/django/django/commits/e7b804c060a1f9fc089cf935801aa85b09db062b", "message": "Fixed #28941 -- Fixed crash in testserver command startup.\n\nRegression in 2b09e4c88e96cb03b29f5a6b0e4838ab4271e631."}, {"url": "https://api.github.com/repos/django/django/commits/770b9ea77fb5e39d616e62b54c06755e6d4f4d36", "message": "Fixed #25277 -- Restored test dependency to the original python-memcached."}, {"url": "https://api.github.com/repos/django/django/commits/2b81faab257832d3dbd42947a884f7ec99685d18", "message": "Fixed #28906 -- Removed unnecessary bool() calls."}, {"url": "https://api.github.com/repos/django/django/commits/02d9419fe34eaa4d41d8a8df93373f286a36a2ae", "message": "Fixed #28907 -- Removed unnecessary if statements."}, {"url": "https://api.github.com/repos/django/django/commits/a862af383969ade774f6b0fa1d331bc87b188b89", "message": "Fixed #28893 -- Removed unnecessary dict.items() calls."}, {"url": "https://api.github.com/repos/django/django/commits/4114b441ee63e5e9196f20beee5cb071d1a21b3b", "message": "Fixed #28886 -- Updated prefix for example django.contrib.auth.urls URLs."}, {"url": "https://api.github.com/repos/django/django/commits/bae365e13c38f0e33b9f00453768de2aac6c727e", "message": "Fixed #28883 -- Doc'd that the uuid URL path converter matches lowercase only letters."}, {"url": "https://api.github.com/repos/django/django/commits/dfeb19121b40cadd22b81c4b9d0373d617a695ed", "message": "Added stub release notes for 1.11.9."}, {"url": "https://api.github.com/repos/django/django/commits/450c933fff2b180825dc2c7c1289380431479695", "message": "Added stub release notes for 2.0.1."}, {"url": "https://api.github.com/repos/django/django/commits/7664fe275910bb31fcca2d54844bedde19fc4ed9", "message": "Refs #28871 -- Fixed admin_views selenium test failure."}, {"url": "https://api.github.com/repos/django/django/commits/335aad5d9170b3e3807ebd35a7dd74800df03588", "message": "Added release dates for 2.0 and 1.11.8."}, {"url": "https://api.github.com/repos/django/django/commits/81057645f61fe545f4f11737dbd3040043ed2436", "message": "Fixed #28871 -- Fixed initialization of autocomplete widgets in \"Add another\" inlines.\n\nAlso allowed autocomplete widgets to work on AdminSites with a name other\nthan 'admin'."}, {"url": "https://api.github.com/repos/django/django/commits/474bd7a5d4b0b47eeedc03ad471ae9e630e95258", "message": "Used a separate admin site for autocomplete tests."}, {"url": "https://api.github.com/repos/django/django/commits/c3e0adcad8d8ba94b33cabd137056166ed36dae0", "message": "Fixed #28305 -- Fixed \"Cannot change column 'x': used in a foreign key constraint\" crash on MySQL with a sequence of AlterField or RenameField operations.\n\nRegression in 45ded053b1f4320284aa5dac63052f6d1baefea9."}, {"url": "https://api.github.com/repos/django/django/commits/6cb6382639cbd29c8348b42c4d43b02c950eff3a", "message": "Added assertion helpers for PostgreSQL's server-side cursor tests."}, {"url": "https://api.github.com/repos/django/django/commits/e3c852cbd609484b272f563f3c21066fb12ef7f8", "message": "Fixed #28804 -- Fixed \"Unknown system variable 'transaction_isolation'\" on MariaDB.\n\nRegression in 967450a3bf940c43db891fe1e2ef3bcf73456ff8."}, {"url": "https://api.github.com/repos/django/django/commits/9d1d3b2d2fe0bef995b024368088eeabbdf73629", "message": "Refs #28814 -- Fixed test_runner failure on Python 3.7.\n\nDue to https://bugs.python.org/issue30399."}, {"url": "https://api.github.com/repos/django/django/commits/931c60c5216bd71bc11f489e00e063331cf21f40", "message": "Refs #28814 -- Fixed \"SyntaxError: Generator expression must be parenthesized\" on Python 3.7.\n\nDue to https://bugs.python.org/issue32012."}, {"url": "https://api.github.com/repos/django/django/commits/d392fc293c9439c19451e152f9560f24d1659563", "message": "Fixed #28802 -- Fixed typo in docs/topics/auth/default.txt."}, {"url": "https://api.github.com/repos/django/django/commits/6bf85ff7e3b837378589e449ba27be8971d9b14c", "message": "Fixed #28796 -- Doc'd backwards incompatibility when reverse() receives bytestring args/kwargs.\n\nDue to 301de774c21d055e9e5a7073e5bffdb52bc71079."}, {"url": "https://api.github.com/repos/django/django/commits/9bea555d06e0e585645053ae6ca9ac3dc8b899bd", "message": "Fixed test failures due to ordering differences on PostgreSQL 10."}, {"url": "https://api.github.com/repos/django/django/commits/532a4f22ad94db320cb0fd66f4c7ee57d17ac65a", "message": "Fixed invalid escape sequence warning in check_framework test."}, {"url": "https://api.github.com/repos/django/django/commits/bc95314ca6af0b5e993ae07fdc7d8e6166d3b8ca", "message": "Fixed #28786 -- Doc'd middleware ordering considerations due to CommonMiddleware setting Content-Length."}, {"url": "https://api.github.com/repos/django/django/commits/8f8a4d10d34c1fd6104b08efd16c5c377c142865", "message": "Refs #26447 -- Removed outdated ETag comment in CommonMiddleware.\n\nFollow up to 48d57788ee56811fa77cd37b9edf40535f82d87e."}, {"url": "https://api.github.com/repos/django/django/commits/abaf0ab4a444977dc8ac07b9b63256814c352245", "message": "Fixed #28777 -- Clarified the docs for admin.register's args."}, {"url": "https://api.github.com/repos/django/django/commits/327f0f37ce3c1e5ac3a19668add237ddd92266d6", "message": "Fixed #28770 -- Warned that quoting a placeholder in a raw SQL string is unsafe.\n\nThanks Hynek Cernoch for the report and review."}, {"url": "https://api.github.com/repos/django/django/commits/00b93c2b1ecdda978f067309c6feafda633a7264", "message": "Fixed typo in docs/topics/db/aggregation.txt."}, {"url": "https://api.github.com/repos/django/django/commits/5587485d49af8b32ab660854f751a234baa6610b", "message": "Fixed #28765 -- Clarified docs about what types the __in lookup accepts."}, {"url": "https://api.github.com/repos/django/django/commits/872be5976d1009ee8b90944a2fb14b1515172825", "message": "Improved technique for matching input prompts in contrib.auth management tests."}, {"url": "https://api.github.com/repos/django/django/commits/ef718a72b3db81d35a6c1273b1565b48dd867e90", "message": "Added stub release notes for 1.11.8."}, {"url": "https://api.github.com/repos/django/django/commits/5f5425f74e57aa3caff056082a8899c0fdedb07e", "message": "Added release date for 1.11.7."}, {"url": "https://api.github.com/repos/django/django/commits/c70086473e48df2989f27e0cd03533725dc94cfe", "message": "Fixed #28759 -- Promoted the contributing guide in the docs for the django-developers mailing list."}, {"url": "https://api.github.com/repos/django/django/commits/6e8508734b070b30db9259b64bb748fb2a5a1bfb", "message": "Described how querysets are protected from SQL injection in more detail."}, {"url": "https://api.github.com/repos/django/django/commits/1e7dbbdec5ca2bd236b8ab64fa172a8fc0abcb1e", "message": "Fixed #28680 -- Doc'd Func.__init__()'s **extra and as_sql()'s **extra_context aren't escaped.\n\nThanks Hynek Cernoch for the report and review."}, {"url": "https://api.github.com/repos/django/django/commits/7945bc1d08f7c8fd8f25eed0327e71dca81975e4", "message": "Refs #23919 -- Replaced doc references to django.utils.http.urlquote() and urlquote_plus() with standard library alternatives.\n\nFollow up to fee42fd99ee470528858c2ccb3621135c30ec262."}, {"url": "https://api.github.com/repos/django/django/commits/afd375fc343baa46e61036087bc43b3d096bb0ca", "message": "Fixed #28741 -- Removed unnecessary leading dot from cross-domain cookie examples."}, {"url": "https://api.github.com/repos/django/django/commits/171c7cc863eafc2346aa84ffd1d540644539f1a4", "message": "Fixed #28737 -- Clarified {% cache %} tag's handling of arguments.\n\nThanks Tom Aratyn for the report."}, {"url": "https://api.github.com/repos/django/django/commits/3642c3758b3426292e02fe4669cc2d2028a9ac8c", "message": "Suggested LoginView rather than @login_required as an alternative to authenticate()."}, {"url": "https://api.github.com/repos/django/django/commits/3576bfe07c3c541b6ecd97d56daad0cf3d3f45fc", "message": "Added a link in README.rst for people new to IRC."}, {"url": "https://api.github.com/repos/django/django/commits/8b9a163afa553ee9d57febae69c9eb0c88259012", "message": "Refs #28688 -- Updated a selenium test for admin's URLify.js change.\n\nEnglish words aren't removed if non-ASCII chars are present."}, {"url": "https://api.github.com/repos/django/django/commits/7fb913c80555594a6dd756733fdb5869d5dba213", "message": "Removed Python 2 comment in ValidationError."}, {"url": "https://api.github.com/repos/django/django/commits/1a82fc245eb8ac4b131ec02a6ac3e112deb8d5a6", "message": "Fixed #28613 -- Doc'd the return value for GenericForeignKey when the related object is deleted."}, {"url": "https://api.github.com/repos/django/django/commits/eb9b56c5b60215a683c80e68f08ae6fca0ec24ef", "message": "Fixed #28729 -- Replaced a numbered list with unordered list in TemplatesSetting docs."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9498", "title": "Fixed #28858 -- Removed unnecessary \"else\" statements.", "body": "Opinions on this patch are welcome. I'm not sure if it's an improvement.\r\nhttps://code.djangoproject.com/ticket/28858", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/8467", "title": "[WIP] Refs #23130 -- Allowed BooleanField to be null=True.", "body": "https://code.djangoproject.com/ticket/23130", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1826844", "body": "Thanks for catching that, I'll fix it shortly.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1826844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1992194", "body": "Thanks Karen, I've added an amended patch to the ticket.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1992194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2073653", "body": "This is backwards incompatible in that I have the following code for an API which relies on the checkbox input returning the actual submitted value:\n\n``` python\nclass BooleanChoiceField(forms.BooleanField):\n\n    def clean(self, value):\n         if value in (False, 'False', 'false', '0'):\n            value = False\n        elif value in (True, 'True', 'true', '1'):\n            value = True\n        else:\n            raise ValidationError(\"Invalid choice '%s' for boolean field.\" % value)\n        return value\n```\n\nNow `value_from_datadict` returns True for something like 'bad input'\n\nDo you think I should rewrite my code with a different widget or should we made a change to Django itself?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2073653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2334304", "body": "FWIW, this was discussed and sort of rejected in https://code.djangoproject.com/ticket/19014\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2334304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "cjerdonek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b98dc1706e9c63a4cc7d061a3d8a95f6cbf5e950", "message": "Refs #25604 -- Removed docs for makemigrations --exit.\n\nFollow up to e0910dcc9283cd8f782cb97836c291f6f395f3f0."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atombrella": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/65728550bd6296871562da02069ddb86e9dd3482", "message": "Refs #28643 -- Added Replace database function."}, {"url": "https://api.github.com/repos/django/django/commits/999fc0687d6b27309e3604602cf996c71b229537", "message": "Added a few tests for smtp EmailBackend."}, {"url": "https://api.github.com/repos/django/django/commits/59b1aaa5a5136702f5b7b2ab718d91128473b9c3", "message": "Added a couple tests for collectstatic."}, {"url": "https://api.github.com/repos/django/django/commits/a613feb5d387ecbacf24a6022eb9e2eb6db23aa3", "message": "Completed test coverage for ModelDetailView."}, {"url": "https://api.github.com/repos/django/django/commits/ef6c680f60a8e2ab45c936ec91f856fb3d7dc651", "message": "Removed unused variable in QuerySet._earliest_or_latest()."}, {"url": "https://api.github.com/repos/django/django/commits/f0a68c25118786d47041d0a435b2afa953be3c86", "message": "Fixed #28702 -- Made query lookups for CIText fields use citext."}, {"url": "https://api.github.com/repos/django/django/commits/45d5d2dcaa72aa60a2ad2b8d7f0f299b8410b314", "message": "Removed unnecessary tuple()/list() calls."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9543", "title": "Refs #28643 -- Implemented the NullIf SQL function.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpoulailleau": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fcd431c6c3159a753f1cc0658cc4b25803ffccc1", "message": "Improved generic detail view error message for when pk or slug is missing."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SShayashi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/27557a7a99ab1ad032c699dc01e114a5e6504b0a", "message": "Fixed #28857 -- Fixed invalid SQL when using Cast with complex expressions on PostgreSQL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PeterW-LWL": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/196c257a230bba8f2f1b2021c383eb2744e8df41", "message": "Fixed typo in docs/topics/i18n/translation.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "klu17": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/4fcd28d442c2fec56f544f99cb658f33f847824c", "message": "Fixed #28881 -- Doc'd that CommonPasswordValidator's password list must be lowercase."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timmartin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/02365d3f38a64a5c2f3e932f23925a381d5bb151", "message": "Fixed #28542 -- Fixed deletion of primary key constraint if the new field is unique."}, {"url": "https://api.github.com/repos/django/django/commits/5778b5701d6a0feb3053b70891cd8ce80b6e8601", "message": "Fixed #28731 -- Added an error message when using an empty Q() in a When expression.\n\nOtherwise it generates invalid SQL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JayWelborn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/56e590cc0be4d8c8b6fe0967583a6e02d18ee03e", "message": "Fixed #28761 -- Documented how an inline formset's prefix works."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Nimn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9a621edf624a4eb1f1645fca628a9e432f0de776", "message": "Fixed #29016 -- Fixed incorrect foreign key nullification on related instance deletion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "botondus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/52aa26e6979ba81b00f1593d5ee8c5c73aaa6391", "message": "Fixed #28231 -- Doc'd that QuerySet.bulk_create() casts objs to a list."}, {"url": "https://api.github.com/repos/django/django/commits/56b364bacca0d6a6cd8fbcd93aeb49f3ad46e58c", "message": "Fixed #28205 -- Doc'd that ModelAdmin.prepopulated_fields only works on add forms."}, {"url": "https://api.github.com/repos/django/django/commits/51d7feff872e74d5a53479f62163d5e0024b00ed", "message": "Fixed #28131 -- Corrected examples of using attribute lookups on the \"perms\" template variable."}, {"url": "https://api.github.com/repos/django/django/commits/ec5f7cb92e315846cb020b909b0ab7e0489aad05", "message": "Fixed typo in docs/ref/models/querysets.txt."}, {"url": "https://api.github.com/repos/django/django/commits/95a14cfc47de5762ddb1400e6e5152f9e3172657", "message": "Fixed #28395 -- Doc'd that QuerySet.first() can affect aggregation queries."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "h-chauhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1b753b2d60230974e7d537ddacbcc1ad23348e7c", "message": "Fixed #28885 -- Fixed hidden content at the bottom of the \"The install worked successfully!\" page for some languages."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pope1ni": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1f0813ca7e8a15d10fcdaad1a5d66b7eec28dedb", "message": "Fixed string format specifier for fillfactor in GistIndex."}, {"url": "https://api.github.com/repos/django/django/commits/d95f1e711b9d1b3e60f7728e9710b8f542cec385", "message": "Allowed indexes in contrib.postgres to have suffixes of any length."}, {"url": "https://api.github.com/repos/django/django/commits/f3a98224e6dd5f8846008512f281e452dc3b1909", "message": "Refs #28909 -- Simplifed code using unpacking generalizations."}, {"url": "https://api.github.com/repos/django/django/commits/d13a9e44ded4e93570c6ba42ec84e45ddca2505b", "message": "Fixed #28909 -- Simplified code using tuple/list/set/dict unpacking."}, {"url": "https://api.github.com/repos/django/django/commits/81abece192923d1ec9b1dca91bdb3393e1a07037", "message": "Corrected type of MESSAGE_TAGS setting override in tests."}, {"url": "https://api.github.com/repos/django/django/commits/c68f66e0144b69367e98692cba313251a36b85a8", "message": "Refs #23919 -- Replaced super() calls for old-style classes."}, {"url": "https://api.github.com/repos/django/django/commits/1818d13de792df0c8efd129c4e0927360e873e73", "message": "Added \"Python 3 Only\" trove classifier."}, {"url": "https://api.github.com/repos/django/django/commits/e014f91a70aa3ccdddb363a733c76e35597424fa", "message": "Fixed #28890 -- Removed newlines between MultiWidget's subwidgets.\n\nRegression in b52c73008a9d67e9ddbb841872dc15cdd3d6ee01."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9424", "title": "Fixed #26974, #28887, #28990 -- Added support for Hash and SP-Gist indexes; BrinIndex autosummarize parameter.", "body": "Tickets [#26974](https://code.djangoproject.com/ticket/26974), [#28887](https://code.djangoproject.com/ticket/28887) & [#28990](https://code.djangoproject.com/ticket/28990).\r\n\r\nThis should round out the support for PostgreSQL indexes in Django.\r\n\r\nThere are a few small bits of refactoring to pave the way for the additional index types. I've also added some version checks to `create_sql()` for `BrinIndex` and `GinIndex`.\r\n\r\nA few things for some consideration:\r\n\r\n- [ ] Can we somehow add support for `fillfactor` to `django.db.models.indexes.Index`?\r\n  - _Perhaps we will be forced to add `django.contrib.postgres.indexes.BtreeIndex`..._\r\n- [ ] ~~Is there some way we can refactor out the option handling? It's not very DRY...~~\r\n- [ ] ~~Should there be better validation of the options? e.g. `fillfactor` is an integer between 10 and 100.~~\r\n- [x] Tests still need adding for the feature flag checking.\r\n  - ~~_Perhaps we should add a `check_supported()` method to `django.db.models.indexes.Index`?_~~\r\n  \r\n  \r\n  \r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sir-sigurd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1dce629c038b88a26d02ddc9d5e7f047933581ee", "message": "Refs #29006 -- Simplified handling of SNaN values in DecimalField.validate()."}, {"url": "https://api.github.com/repos/django/django/commits/762bd34c3699875d315d478b3efb090155beb743", "message": "Fixed #28842 -- Added SpatiaLite support for ForcePolygonCW function."}, {"url": "https://api.github.com/repos/django/django/commits/44c5b239e0f3ec81f8428c30ce784b4ad7e3adec", "message": "Simplified django.utils.feedgenerator.rfc2822_date()."}, {"url": "https://api.github.com/repos/django/django/commits/c794b5681187ca799b34b819eb774b12604fa091", "message": "Simplified django.utils.feedgenerator.rfc3339_date()."}, {"url": "https://api.github.com/repos/django/django/commits/2115be616b10f4542df7155e3a4c3f02f97cc2a3", "message": "Refs #28459 -- Improved performance of duration expressions on SQLite."}, {"url": "https://api.github.com/repos/django/django/commits/c2d0f8c084456b5073252a91eeb09ab3d7453b18", "message": "Simplified an iterator in core.serializers.sort_dependencies().\n\nFollow up to acc8dd4142ec81def9a73507120c0262ba6b1264."}, {"url": "https://api.github.com/repos/django/django/commits/149061103829fb3ad74d050b4ae3cc815b2f451c", "message": "Fixed #28908 -- Allowed ArrayField lookups on ArrayAgg annotations."}, {"url": "https://api.github.com/repos/django/django/commits/98e78ac754c56aad94319fe8e16495633c0540bb", "message": "Bumped minimum supported mysqlclient version to 1.3.7.\n\nFollow up to ad9390bba27cb41da92f734db4d0e36ef3dfc58f."}, {"url": "https://api.github.com/repos/django/django/commits/51ae4e1f324afcf1c7f6a102335dc78bfa51c126", "message": "Refs #28459 -- Used default date converter on SQLite for better performance.\n\nSee https://docs.python.org/3/library/sqlite3.html#default-adapters-and-converters."}, {"url": "https://api.github.com/repos/django/django/commits/ae6fa914aa2f43d39ae491ac7d3140dda69702fa", "message": "Fixed #28926 -- Fixed loss of precision of big DurationField values on SQLite and MySQL."}, {"url": "https://api.github.com/repos/django/django/commits/47aba5ed1fca234a43b0088009e5b9d891a029c7", "message": "Linked GIS functions docs to corresponding MySQL docs."}, {"url": "https://api.github.com/repos/django/django/commits/aefe624c62639c189845803f0935fc29e20b5fb8", "message": "Fixed #28841 -- Added ForcePolygonCW GIS function and deprecated ForceRHR."}, {"url": "https://api.github.com/repos/django/django/commits/44908d4d9360f72b9511aa0a878458285ba326d4", "message": "Fixed #28967 -- Prevented Cast to FloatField from rounding to integer on MySQL."}, {"url": "https://api.github.com/repos/django/django/commits/ae1baa7d1d7fcb823e71ce9cb7c17de47ab2ff5e", "message": "Refs #28459 -- Improved performance of loading DurationField on SQLite and MySQL."}, {"url": "https://api.github.com/repos/django/django/commits/d0f569b350bca89eeb186523d8905a6e31b5a947", "message": "Refs #28459 -- Improved performance of loading DecimalField on SQLite."}, {"url": "https://api.github.com/repos/django/django/commits/ebc4ee3369694e6dca5cf216d4176bdefd930fd6", "message": "Refs #23941 -- Prevented incorrect rounding of DecimalField annotations on SQLite."}, {"url": "https://api.github.com/repos/django/django/commits/c8a85e3e91bf829671b4a8cbd105fbabce945174", "message": "Fixed #28932 -- Prevented Oracle from truncating trailing zeros in the fractional part of DecimalField.\n\nFixes the test added in 6fd6d8383f48ea2fe4e058725fa30529a083e9a5.\r\nRegression in 7c1f3901bcdabb1340a621e7df9b24f3acd0d6f3."}, {"url": "https://api.github.com/repos/django/django/commits/a7a36bb4d8ef7f03c2df9e3279c8f488ab3641d1", "message": "Refs #25181 -- Updated timezone.now() docs about obtaining the time in the current time zone."}, {"url": "https://api.github.com/repos/django/django/commits/9c9ef5835200a1bc6410d2769b9699baba9f9a8b", "message": "Removed unused DatabaseOperations.date_interval_sql() on Oracle.\n\nUnused since 5ca82e710e2f92b8c5114492205c8764918407d3."}, {"url": "https://api.github.com/repos/django/django/commits/6fd6d8383f48ea2fe4e058725fa30529a083e9a5", "message": "Fixed #28915 -- Prevented SQLite from truncating trailing zeros in the fractional part of DecimalField.\n\nThis reverts commit a146b65628e702a9a3ed5be21542ca45366fbb29 and adds\na test for the regression."}, {"url": "https://api.github.com/repos/django/django/commits/f9a0766f1c451a98a59adaf9fa8e43a3693f79db", "message": "Simplified SQLite converter for bool type."}, {"url": "https://api.github.com/repos/django/django/commits/da71e4bb086593b5ca76bf698358d27ead2cfed2", "message": "Fixed #28896 -- Reallowed filtering a queryset with GeometryField=None.\n\nRegression in 58da81a5a372a69f0bac801c412b57f3cce5f188."}, {"url": "https://api.github.com/repos/django/django/commits/10bfa876be59feec24bb6a40fa11bece808ee405", "message": "Refs #27985 -- Reallowed using __exact=None as an alias for __isnull=True if a custom lookup class with lookup_name != None is registered as the exact lookup.\n\nRegression in 58da81a5a372a69f0bac801c412b57f3cce5f188 and prerequisite\nfor refs #28896."}, {"url": "https://api.github.com/repos/django/django/commits/c5a2f48bed44e024fa9cf9512ad948af9bcbad96", "message": "Improved performance of loading DateTimeField on Oracle and MySQL."}, {"url": "https://api.github.com/repos/django/django/commits/23a27f2c03afddba7076d7f491fe8391c2931e3e", "message": "Simplified widgets.Select._choice_has_empty_value()."}, {"url": "https://api.github.com/repos/django/django/commits/183fb7b2b9778f7d7cc91f5a7e5afec61b85179e", "message": "Fixed #28870 -- Added support for functools.partialmethod serialization in migrations."}, {"url": "https://api.github.com/repos/django/django/commits/b728ab22e1b349e4c716ab005d305c48ad0338dd", "message": "Simplified BaseModelAdmin.lookup_allowed() a bit."}, {"url": "https://api.github.com/repos/django/django/commits/3922f02dc6b10a3268a710a2837027d3999957a3", "message": "Fixed typo in docs/topics/testing/advanced.txt. (#9416)"}, {"url": "https://api.github.com/repos/django/django/commits/cf12257db23fa248c89a3da3f718aa01a50ca659", "message": "Fixed #28863 -- Fixed filter on annotation that contains Q."}, {"url": "https://api.github.com/repos/django/django/commits/31425f71bc08dc8b13a18de530dfd68b7f26916c", "message": "Used bytes.hex() and bytes.fromhex() in postgis.pgraster to simplify.\n\nThis was missed in 93cdd07e8fb08d7bb3f1e4a7117aa9d0d76581cd."}, {"url": "https://api.github.com/repos/django/django/commits/93cdd07e8fb08d7bb3f1e4a7117aa9d0d76581cd", "message": "Used bytes.hex() and bytes.fromhex() to simplify."}, {"url": "https://api.github.com/repos/django/django/commits/967450a3bf940c43db891fe1e2ef3bcf73456ff8", "message": "Fixed #28794 -- Fixed tx_isolation deprecation warning on MySQL 5.7.20+."}, {"url": "https://api.github.com/repos/django/django/commits/a2ec1e6b2d05a1de86a6d02d1e035250b9fefa77", "message": "Used BaseSimpleSerializer for serializing str and bytes in migrations.\n\nFollow up to c716fe87821df00f9f03ecc761c914d1682591a2."}, {"url": "https://api.github.com/repos/django/django/commits/b5ecbf1e12e7d1eecebd708d1e2a73c505d69c60", "message": "Simplified choices iterators in tests.model_fields.models."}, {"url": "https://api.github.com/repos/django/django/commits/bdb747a5f2ffe7356c722c67184a2bc1e24c7f73", "message": "Simplified Field.get_choices()."}, {"url": "https://api.github.com/repos/django/django/commits/f152678d36d45abef3ccd2588390e318d286d761", "message": "Removed unneeded iter() call in IfNode.nodelist."}, {"url": "https://api.github.com/repos/django/django/commits/a4f9ef4fe8048264c5d9e193e2ff79f735626c65", "message": "Refs #28518 -- Improved performance of assigning values to GeometryFields."}, {"url": "https://api.github.com/repos/django/django/commits/8869142a4d5b069c61781c0e4c5fdc971b017949", "message": "Fixed #28632 -- Updated docs about using raw SQL with GIS and doc'd changes from refs #28518 in release notes."}, {"url": "https://api.github.com/repos/django/django/commits/69922d303dbe8e83952f769caff205abbe100bba", "message": "Refs #17448 -- Fixed GeoModelTest.test_raw_sql_query.\n\nThe test was a false positive."}, {"url": "https://api.github.com/repos/django/django/commits/e9a370bb6a8bbe824f62b4c59364c1e0b105282f", "message": "Simplified GeometryField.select_format()."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9548", "title": "Simplified handling of timezone names.", "body": "`tzname()` of correctly implemented `tzinfo` subclass must return string: https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname.\r\n\r\n```\r\nIn [190]: class CustomTZ(datetime.tzinfo):\r\n     ...:     def tzname(self, dt):\r\n     ...:         return b'bytes'\r\n     ...: \r\n\r\nIn [191]: datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-191-1f9927218b78> in <module>()\r\n----> 1 datetime.datetime(1, 1, 1, tzinfo=CustomTZ()).tzname()\r\n\r\nTypeError: tzinfo.tzname() must return None or a string, not 'bytes'\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9484", "title": "Used datetime.timezone.utc instead of pytz.utc for better performance.", "body": "Before:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n2.77 \u00b5s \u00b1 57.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\nAfter:\r\n```\r\nIn [2]: %timeit django.utils.timezone.now()\r\n937 ns \u00b1 5.35 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9462", "title": "Fixed #28925 -- Made durations-only expressions work on SQLite and MySQL.", "body": "https://code.djangoproject.com/ticket/28925", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9070", "title": "Refs #28459 -- Improved performance of loading models from DB.", "body": "https://code.djangoproject.com/ticket/28459\r\n\r\n```\r\nclass TestModel(models.Model):\r\n    field1 = models.IntegerField(null=True)\r\n    field2 = models.IntegerField(null=True)\r\n    field3 = models.IntegerField(null=True)\r\n    field4 = models.IntegerField(null=True)\r\n    field5 = models.IntegerField(null=True)\r\n```\r\n`TestModel.objects.count() == 20000`, values for all fields `is None`.\r\n\r\nBefore:\r\n```\r\nIn [7]: %timeit for x in TestModel.objects.all(): pass\r\n163 ms \u00b1 1.41 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n```\r\n\r\nAfter:\r\n```\r\nIn [7]: %timeit for x in TestModel.objects.all(): pass\r\n143 ms \u00b1 1.07 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/8806", "title": "Fixed #28358 -- Added LazyObject.__getattribute__() to mimic better the wrapped.", "body": "https://code.djangoproject.com/ticket/28358", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WillAyd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/09530e61a0035192ca8bcdebc5ead13d14c16eb0", "message": "Fixed #28869 -- Made tagged test classes and methods inherit tags from parents."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srinivasreddy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/acd3baf2ae3f74846731447df66e8c3ce7a772f7", "message": "Improved readability of utils.datetime_safe._findall()."}, {"url": "https://api.github.com/repos/django/django/commits/58ec55b157b3c4cc9dc0a944804f8a719ff4e12f", "message": "Fixed #28117 -- Added a helpful message in loaddata when psycopg2 can't load a fixture due to NUL characters."}, {"url": "https://api.github.com/repos/django/django/commits/55b5393bd235aa6c55ea9a7da6f0e8b75b204084", "message": "Fixed #28474 -- Made DurationField raise ValidationError for inputs that raised OverflowError."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8773", "title": "Fixed#27468: Move utils.crypto.salted_hmac() from SHA1 toward SHA256", "body": "@timgraham  May be a settings variable to enable SHA256?", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alvinlindstam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/47a99d701277f6ec98e6fd220feb9c8a1e66718e", "message": "Fixed #28989 -- Fixed HttpResponse.delete_cookie() for cookies that use __Secure/Host prefixes."}, {"url": "https://api.github.com/repos/django/django/commits/2cb6b7732dc7b172797cebb1e8f19be2de89e264", "message": "Fixed #28902 -- Fixed password_validators_help_text_html() double escaping."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vangelou": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/777f216d555496798a1e65fd899b0f8a0349aeca", "message": "Fixed #15522 -- Added ModelAdmin.delete_queryset() to customize \"delete selected objects\" deletion."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shangdahao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3333d935d2914cd80cf31f4803821ad5c0e2a51d", "message": "Fixed #28757 -- Allowed using contrib.auth forms without installing contrib.auth.\n\nAlso fixed #28608 -- Allowed UserCreationForm and UserChangeForm to\nwork with custom user models.\n\nThanks Sagar Chalise and R\u00f4mulo Collopy for reports, and Tim Graham\nand Tim Martin for reviews."}, {"url": "https://api.github.com/repos/django/django/commits/cc6bcc6ff5cab320c5e5ae2760549a6c732067d8", "message": "Fixed #28867 -- Added system check for a model property that clashes with a related field accessor."}, {"url": "https://api.github.com/repos/django/django/commits/b0a2a2b07eea99291a63530a8e4882dbd3141fe2", "message": "Made a few cleanups to invalid_models_tests.test_models."}, {"url": "https://api.github.com/repos/django/django/commits/f1aa58479cdc6051dd2e97feca2d584c43aee1e7", "message": "Fixed #28714 -- Added system checks for invalid model field names in Meta.indexes.\n\nThanks Gabriel for the report and Adam Johnson for the review."}, {"url": "https://api.github.com/repos/django/django/commits/1907fc9b1292a55f1b8d54f4dbcdbda16bbb36c1", "message": "Fixed #28534 -- Made JSONField.has_changed() ignore key order and consider True/1 values as different."}, {"url": "https://api.github.com/repos/django/django/commits/ebb998976e2889c669972ed3d1b372cc6a2b5229", "message": "Fixed #28751 -- Corrected the error message for inactive users in AdminAuthenticationForm.\n\nThanks SeungWon Kang for the report and Tim Graham for the review."}, {"url": "https://api.github.com/repos/django/django/commits/359370a8b8ca0efe99b1d4630b291ec060b69225", "message": "Fixed #28645 -- Reallowed AuthenticationForm to raise the inactive user error when using ModelBackend.\n\nRegression in e0a3d937309a82b8beea8f41b17d8b6298da2a86.\n\nThanks Guilherme Junqueira for the report and Tim Graham for the review."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9587", "title": "Fixed #28838 -- Fixed crash on Model.save() after annotate.", "body": "https://code.djangoproject.com/ticket/28838", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "m1guelpf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/cd41f7d6b8f0f66550fd9eb6906a5026b6527b80", "message": "Updated Python license for 2018."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "czpython": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/d1286a8a689e31435c07534fee7b61f41cea37f8", "message": "Fixed #28517 -- Fixed admin delete confirmation view crash when related models don't have a delete permission."}, {"url": "https://api.github.com/repos/django/django/commits/ee49306176a2d2f1751cb890bd607d42c7c09196", "message": "Fixed #27710 -- Made Model.save() invalidate cached, stale relations after a primary key assignment."}, {"url": "https://api.github.com/repos/django/django/commits/fcfcf8aae470d893b0d2ef176434461edf9e9c4d", "message": "Fixed #28742 -- Fixed AttributeError crash when assigning None to cached reverse relations."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9120", "title": "Fixed #18620 -- Redirect to the current site only if its attached to the object", "body": "https://code.djangoproject.com/ticket/18620\r\n\r\nInitial patch: https://github.com/django/django/pull/203/\r\n\r\nI had to adapt an existing test because the proposed solution will always use an absolute url if one is available. The previous solution would always use one only if the sites framework was not installed.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonashaag": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/602481d0c9edb79692955e073fa481c322f1df47", "message": "Fixed #28986 -- Prevented boolean values in admin list display from being formatted with thousand separators."}, {"url": "https://api.github.com/repos/django/django/commits/ea10efebfaa15fd7a9dcdd01c6d044ded0a8306a", "message": "Added display_for_value() tests for boolean values."}, {"url": "https://api.github.com/repos/django/django/commits/a2851f204c6431330042d0343ee99f33449f78e0", "message": "Fixed #28720 -- Added HttpRequest.get_full_path_info()."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9546", "title": "Fixed #28991 -- Added new BlankFieldListFilter admin filter.", "body": "https://code.djangoproject.com/ticket/28991  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9336", "title": "[WIP] Fixed #28788 -- Added Model.clean_<fieldname>().", "body": "https://code.djangoproject.com/ticket/28788", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9235", "title": "Fixed #17419 -- Added json_tag template filter", "body": "https://code.djangoproject.com/ticket/17419", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1373178", "body": "doubletest!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1373178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "claudep": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b3cd9fb18ba127c067a4f3c79a32e51c8d8cc6ae", "message": "Refs #15902 -- Made set_language() view always set the current language in a cookie.\n\nThe plan is to later deprecate/remove storing the language in the session."}, {"url": "https://api.github.com/repos/django/django/commits/23b21db31bfcf2a065d485617412cca43a311a4c", "message": "Fixed #28594 -- Removed Jython docs and specific code\n\nThanks Andrey Martyanov for the reporti, and Tim Graham for the review."}, {"url": "https://api.github.com/repos/django/django/commits/f2ec89691236b59f54f9cf41bccd79a5853af36c", "message": "Removed 'development' word in contributing docs"}, {"url": "https://api.github.com/repos/django/django/commits/d6859a14891f028dde8c6d27fb2960ef9984a072", "message": "Added Kabyle language\n\nForward port of bfc3fa3d3b291b40ed1e2ce6da3b2675b40f0a54 from stable/2.0.x"}, {"url": "https://api.github.com/repos/django/django/commits/d0932ce8fca14f5c65820da1a520ce4312a3ca7e", "message": "Updated contrib translations from Transifex\n\nForward port of 765e6de92493aa638555408172597e054e813ce3 from stable/2.0.x"}, {"url": "https://api.github.com/repos/django/django/commits/b36ed9bf92b750b492a9903cc240545fdebdc2ca", "message": " Updated core translations from Transifex\n\nForward port of e886205988db2ee57bab64a6b59135caef8e28a2 from stable/2.0.x"}, {"url": "https://api.github.com/repos/django/django/commits/4f5526e346861c0b2ffa2ea7229747c883e14432", "message": "Fixed #28773 -- Forced pot files to use UNIX-style newlines\n\nThanks Hendy Irawan for the analysis and report."}, {"url": "https://api.github.com/repos/django/django/commits/95496740434fd990b0f9ff9feacbd12907457e43", "message": "Updated main translation catalog\n\nForward port of cd6d18abc31902a13013de61aacd0ae92d6f68a2 from stable/2.0.x."}, {"url": "https://api.github.com/repos/django/django/commits/0cf00769ad11fa5ff0dff585d7f491a80f3e45ef", "message": "Fixed #28585 -- Calculated admin's change form multipart context variable from forms and formsets\n\nThanks Tim Graham for the review."}, {"url": "https://api.github.com/repos/django/django/commits/1b7780ea0802116eeef80b398a0432ac3f0ba9ef", "message": "Fixed #28544 -- Made unlocalize template filter behave like {% localize off %} tag\n\nThanks Beda Kosata for the report and Tim Graham for the review."}, {"url": "https://api.github.com/repos/django/django/commits/68407e3545f4b3e051c87cd530c97765bf2cdd80", "message": "Refs #14807 -- Removed unneeded mark_safe call"}, {"url": "https://api.github.com/repos/django/django/commits/9ec7d8e514e09636b0ab4bcac74b5f7a5be335a3", "message": "Fixed #28730 -- Fixed loss of precision for large integer literals in templates\n\nThanks Fraser Nevett for the report and Tim Graham for patch edits."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9132", "title": "Fixed #28661 -- Auto-truncated too long indexes on MySQL", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/8886", "title": "Fixed #18392 -- Defaulted to the utf8mb4 character set for MySQL data\u2026", "body": "\u2026bases", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/8848", "title": "Allowed (partial) indexes for text fields on MySQL", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/8627", "title": "Fixed #17379 -- Removed management commands leave_locale_alone setting", "body": "https://code.djangoproject.com/ticket/17379", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/7850", "title": "[WIP] Fixed #27704 -- Used TypedMultipleChoiceField for array fields with choices", "body": "https://code.djangoproject.com/ticket/27704", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/7205", "title": "Refs #25706 -- Moved GIS-related JavaScript out of templates", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/7161", "title": "Fixed #25594 -- Propagated validators from model to form fields", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/6942", "title": " Fixed #24928 -- Added introspection support for PostgreSQL-specific fields", "body": "The first two commits are supposed to be committed separately. I'll rebase after that.\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5829296", "body": "Alex, this will not be enough to let the test suite even start on Python 3. We'll still have to add the utils/py3.py compatibility layer, then applying at least a bunch of syntax fixes (metaclass, reraise exceptions, etc.).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5829296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6040099", "body": "Many thanks, pushed in ba10be70322027074e5f9defc1423eb0cc77473c.\nHope you don't mind I just added a line to your patch (so as a test comparison is made against a translated error message).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6040099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6179986", "body": "There are already tests in tests/regressiontests/i18n/commands/compilation.py and tests/regressiontests/i18n/commands/extraction.py. You shouldn't create new test files.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6179986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6180223", "body": "Thanks a lot for the review. Pushed in 4a103086d5c67fa4fcc53c106c9fdf644c742dd8\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6180223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6180897", "body": "Pushed in 5e6ded2e58.\nThanks for the review. I'm not sure if I included all what you meant in the review comments, feel free to open tickets to fix unsolved issues or to add further improvements.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6180897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6555609", "body": "Fixed in 531878302735e6a2b36d82b584947bbf8eae8111\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6555609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1296009", "body": "No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296021", "body": "Pushed in 208e26b39\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1297319", "body": "See https://code.djangoproject.com/ticket/11739. Let's discuss it on the ticket (and yes, I should update the patch on this ticket).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1351363", "body": "Granted, this is inconsitent. At some point, I think that the csrf processor will simply return a Unicode string, but I'm not there yet. Feel free to create a ticket if you want to track this issue.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1451035", "body": "Thanks for the notice. Now as we will replace utils.py3 by utils.six, it might be that this paragraph will be removed. Wait and see...\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1451035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1462067", "body": "Thanks Luke for fixing it and sorry for the confusion I made.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1462067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1462849", "body": "No, no, that's fine. That's collaborate work, isn't it? :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1462849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1526672", "body": "I think that more modern syntax would use skipUnless and skipUnlessDBFeature as decorators. Other bikeshedding: generally, the tearDown method is always following setUp in Django tests.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1526672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1526943", "body": "Reading django/test/testcases.py, I suspect skipIfDBFeature/skipUnlessDBFeature cannot be used as class decorators (ticket #18551 created).\n+1 to your last suggestion. \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1526943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1583184", "body": "Sorry, will remove this one ASAP\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1583184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1612271", "body": "Thanks, fixed in 9ecd978e269f\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1612271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1717896", "body": "I guess the smart_bytes import is a remainder of trials?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1717896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1723532", "body": "Fixed in d69bd23b55\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1723532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1751391", "body": "AttributeError: 'super' object has no attribute 'content'\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1751391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1907404", "body": "When files are completely unrelated to the added feature, PEP8-only changes should possibly be committed separately. For the next time :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1926798", "body": "The 1.3 notices were removed in 837425b42. I guess you shouldn't add new here, right?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1926798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1926802", "body": "s/serialised/serialized/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1926802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1938598", "body": "Thanks for the notice. Should we remove it, or add a note like this: \"No PostGIS topology functionalities are yet available from GeoDjango, so the creation of the `postgis_topology` extension is entirely optional.\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1938598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1967472", "body": "At first, I'd say that FakePayload would only expect a bytestring in the content argument. But your comment gave me an idea about a slightly better implementation which would also accept unicode content. Feel free to open a ticket, and I might upload a patch.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1967472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1991087", "body": "What about this note:\n\"The csrf_token template tag is no more enclosed in a div. If you need HTML\nvalidation against pre-HTML5 Strict DTDs, you should add a div around it in your pages.\"\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1991320", "body": "Committed in e6f45aa6. Thanks Mark for the grammatical tip. I'm at war with no more/no longer :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2001360", "body": "in `__init__`, we already get the username field to set the label, what about to also set the max_length from the real username field?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2001360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2027815", "body": "Unfortunately, some of those test cases are affected by https://code.djangoproject.com/ticket/18417. With your patch, they are silently dropped. We'll have to talk :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2027815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2074898", "body": "Hi Tim,\nBasically, I think that a BooleanField should return a boolean value. If you have a different specific need, I'd suggest you just subclass the form field and redefine clean(). Post on the ticket if you'd like some larger audience.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2074898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2221691", "body": "Some deprecated \"assertEqual_s_\" leaked in  the test...\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2221691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2237737", "body": "I don't think much changed for people having their own format module. If they have included ISO formats, `get_format` will simply not add them a second time. If they have not, the ISO formats will be appended to their strings. Is that latter behaviour worth of being mentioned in the release notes? Or did I misunderstood you?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2237737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2282627", "body": "Thanks, fixed in 0cdfa76e68 \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2282627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2370814", "body": "Raises: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\nYou should probably use `e.args[0]` here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2370814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2370818", "body": "or simply `raise` ?\nGenerally, reraising is interesting when you want to modify exception parameters.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2370818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2475435", "body": "+1, I guess the final assertFalse should also be updated?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2475435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2553670", "body": "I'm not sure I understand those 2 lines. Why are you importing settings here while there are not used later in the method?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2553670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2564851", "body": "> Should (or could) this be considered a public API now?\n\nNot until it is documented on https://docs.djangoproject.com/en/dev/ref/utils/. However, feel free to open a Trac ticket requesting it to be documented (hence public API), if you think it's really useful.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2564851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2621078", "body": "Doh... Sorry :-(\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2621078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2650497", "body": "Yes, we really need a good bunch of tests. Please follow-up on the ticket instead (https://code.djangoproject.com/ticket/19237).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2650497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2678158", "body": "Stable releases only receives serious crasher or security updates. See https://docs.djangoproject.com/en/dev/internals/release-process/#supported-versions\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2678158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2680512", "body": "This test will surely fail on Python 3 (no u prefix). Either use the `str_prefix` utility in the test, or simply don't use the %r placeholder in the exception.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2680512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2681260", "body": "I don't think this was intended in the patch, was it?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2681260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2681271", "body": "What is the rationale behind this `tearDown` method?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2681271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/3036826", "body": "Carl, what about https://gist.github.com/claudep/5411204\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3036826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/3039848", "body": "Of course, that makes sense!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3039848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mvasilkov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/ccc25bfe4f0964a00df3af6f91c2d9e20159a0c2", "message": "Refs #23919 -- Removed obsolete __init__.py files in management command directories."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RobinRamael": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fbf647287ebd9898bff69c65a89fa09a903adaa5", "message": "Fixed #28811 -- Fixed crash when combining regular and group by annotations."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ogonkov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/0afffae4ecb660f2ecb94a756c2ab7729654ecf6", "message": "Fixed #28965 -- Updated Set-Cookie's Expires date format to follow RFC 7231."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charettes": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/f5a989e60394ac11f5dce886468a34533caefcbf", "message": "Fixed #28974 -- Made refresh_from_db() hint routers about its instance."}, {"url": "https://api.github.com/repos/django/django/commits/dcdd219ee1e062dc6189f382e0298e0adf5d5ddf", "message": "Fixed #25817 -- Made RenameField repoint to_field/to_fields references.\n\nAlso updated the autodetector to assume the RenameField operation will\nperform the required repointing."}, {"url": "https://api.github.com/repos/django/django/commits/2faeb21d2f618d5bfe9f8f6c574730d3f9407b2a", "message": "Moved _get_model_tuple() to the base Operation class.\n\nThis allows field and special operations to use this logic."}, {"url": "https://api.github.com/repos/django/django/commits/9f7772e098439f9edea3d25ab127539fc514eeb2", "message": "Fixed #28884 -- Fixed crash on SQLite when renaming a field in a model referenced by a ManyToManyField.\n\nIntrospected database constraints instead of relying on _meta.related_objects\nto determine whether or not a table or a column is referenced on rename\noperations.\n\nThis has the side effect of ignoring both db_constraint=False and virtual\nfields such as GenericRelation which aren't backend by database level\nconstraints and thus shouldn't prevent the rename operations from being\nperformed in a transaction.\n\nRegression in 095c1aaa898bed40568009db836aa8434f1b983d.\n\nThanks Tim for the additional tests and edits, and Mariusz for the review."}, {"url": "https://api.github.com/repos/django/django/commits/b43acf22dfa59815a1f4db0558acd98816325f66", "message": "Refs #27849 -- Removed empty Q() hack in filtered Aggregate.as_sql().\n\nThis required allowing WhereNode to be provided as When(condition).\r\n\r\nThis was made possible by cf12257db23fa248c89a3da3f718aa01a50ca659."}, {"url": "https://api.github.com/repos/django/django/commits/095c1aaa898bed40568009db836aa8434f1b983d", "message": "Fixed #28849 -- Fixed referenced table and column rename on SQLite.\n\nThanks Ramiro for the input and Tim for the review."}, {"url": "https://api.github.com/repos/django/django/commits/e50add6ca1605dcc06c8c5a5770342779a4d5124", "message": "Fixed #28856 -- Fixed a regression in caching of a GenericForeignKey pointing to a MTI model.\n\nRegression in b9f8635f58ad743995cad2081b3dc395e55761e5."}, {"url": "https://api.github.com/repos/django/django/commits/78c5e7b90eee10067d39a8ba6588e6b53ba00d82", "message": "Fixed #28834 -- Followed ancestor links on field cache lookup failure.\n\nThanks Tim for the review."}, {"url": "https://api.github.com/repos/django/django/commits/ee85ef8315db839e5723dea19d8b971420a2ebb4", "message": "Fixed #28792 -- Fixed index name truncation of namespaced tables.\n\nRefs #27458, #27843.\n\nThanks Tim and Mariusz for the review."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9353", "title": "[PoC] Moved contrib.postgres uninstallation logic to the app config.", "body": "As discussed in #9291.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/9174", "title": "Fixed #28658 -- Moved DISTINCT handling to the Aggregate base class.", "body": "This is still missing documentation and tests for MySQL and Oracle `unsupported_distinct_aggregates`.\r\n\r\n- [ ] Documentation adjustments and release notes.\r\n- [ ] Tests MySQL and Oracle `NotSupported`.\r\n- [ ] Test `distinct=True` and `filter=Q(...)`.\r\n\r\n@orf you might be interested in that since you initially worked on #8324.\r\n\r\n### PostgreSQL\r\n\r\n> `aggregate_name (DISTINCT expression [ , ... ] [ order_by_clause ] ) [ FILTER ( WHERE filter_clause ) ]`\r\n\r\nhttps://www.postgresql.org/docs/current/static/sql-expressions.html#SYNTAX-AGGREGATES\r\n\r\n### SQLite\r\n\r\n>  In any aggregate function that takes a single argument, that argument can be preceded by the keyword DISTINCT.\r\n\r\nhttps://sqlite.org/lang_aggfunc.html\r\n\r\n### MySQL\r\n\r\nhttps://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html\r\n\r\n### Oracle\r\n\r\nhttps://docs.oracle.com/database/121/SQLRF/functions003.htm", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/8340", "title": "Prevent late registration of models.", "body": "@timgraham here's what I had in mind. There's a couple of migration tests failures that would require adjustments but I'm pretty sure they could work with `isolated_apps`.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/7999", "title": "Fixed #27768 -- Allowed migration optimization of CreateModel order.", "body": "", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5734017", "body": "Great patch! I think `defered_*` should be renamed to `deferred_` (two r).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5734017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6179975", "body": "I'd say _tuple of tuples_ is less confusing.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6179975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1301669", "body": "@akaariai I can't figure out why [CI is failing](http://ci.djangoproject.com/job/Django%20trunk/database=sqlite3,python=python2.7/lastBuild/console)... Re-ran full test suite and everything pass on sqlite3.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301699", "body": "Argh... I've got 2.7.3 on my machine. It looks like [python 2.7 shipped with an incorrect implementation](https://regebro.wordpress.com/2010/12/13/python-implementing-rich-comparison-the-correct-way/).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1301718", "body": "Here's the [python bug report](http://bugs.python.org/issue10042).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1301718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1526207", "body": "I think `raise` is more appropriate here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1526207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1526217", "body": "@akaariai small comment typo.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1526217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1612903", "body": "Maybe we should use the `except re.error as e` syntax here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1612903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1613190", "body": "@gilsondev [the module](https://github.com/django/django/blob/4ceb9db9d849905720a1c958a5f8629753ef6604/django/core/urlresolvers.py#L9) import `unicode_literals`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1613190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1718471", "body": "Is the `if` necessary now?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1718471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1722344", "body": "@aaugustin shouldn't we check against `(2, 7, 0)`?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1722344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1752562", "body": "http://bugs.python.org/issue14965\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1752562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1915053", "body": "@rach We'll this should be officially released [on Christmas eve](https://groups.google.com/d/topic/django-developers/4EvlunsJ0LY/discussion) :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1915053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1991019", "body": "Maybe we should add a release note about this?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1991091", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2028404", "body": "This changed the return type of `get_m2m_with_model` from `tuple` to `list`. I know it's a private API but it's a bit inconsistent with the `get_fields_with_model` which still returns a `tuple`. I stumbled on this regression when trying to concatenate both doing `get_fields_with_models() + get_m2m_with_models()`. This used to work but is broken as of this commit. \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2028404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2035137", "body": "Nevermind, `get_m2m_with_models()` [always returned a list](https://github.com/django/django/blob/stable/1.4.x/django/db/models/options.py#L271), was just surprised it returns a `list` when `get_fields_with_models` returns a `tuple`.\n\nI guess that's what you get when playing with internal API.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2035137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2036542", "body": "I don't think my consistency arguments is worth a possible break of backward compatibility, there might be a couple of projects relying on this in the wild.\n\nThanks for suggesting filing a ticket.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2036542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2071861", "body": "Minor issue: `e` is unused here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2071861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2201284", "body": "Small typo: `takes requires`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2201284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2316300", "body": "Is there a reason why you use `LOOKUP_SEP` for splitting but not for joining?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2316300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2465901", "body": "Won't this break Python 3?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2465901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2465946", "body": "Ahhh right, no `assertQuerySetEqual` to stumble upon.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2465946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2475641", "body": "This introduce a regression with related managers on 1.5.X since `none` returns an `EmptyQuerySet` instance while it works fine on `master` since `none` sets the underlying query to empty while returning a `queryset.__class__` instance. I'll open a ticket with a failing test case.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2475641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/3088022", "body": "We could even remove the list comprehension here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3088022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "philippbosch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/248fa208cb2c7607fb7a464238fb8ebe62e6a54c", "message": "Fixed typo in TemplateCommand argument help text."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "r3m0t": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9bc4d90d1a8c4d1dee54115a0995a7b6fca8635b", "message": "Fixed #14642 -- Fixed generic inline formsets crash when using save_as_new=True."}, {"url": "https://api.github.com/repos/django/django/commits/21a3a29dc9d138c248fd7922923b3ec710735c6c", "message": "Fixed #28722 -- Made QuerySet.reverse() affect nulls_first/nulls_last."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9438", "title": "Fixed #28646 -- Postgres migration fails with error '_like index already exists'", "body": "https://code.djangoproject.com/ticket/28646", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9322", "title": "Fix #28762: make array literals hashable", "body": "https://code.djangoproject.com/ticket/28762", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9268", "title": "Fixed #28693 -- Fixed DisallowedHost crash in CsrfViewMiddleware when an HTTPS request has an invalid host.", "body": "https://code.djangoproject.com/ticket/28693", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bluetech": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/c21f158295d92e35caf96436bfdbbff554fc5569", "message": "Fixed #28944 -- Fixed crash when chaining values()/values_list() after QuerySet.select_for_update(of=())."}, {"url": "https://api.github.com/repos/django/django/commits/03049fb8d96ccd1f1ed0285486103542de42faba", "message": "Refs #28010 -- Allowed reverse related fields in SELECT FOR UPDATE .. OF.\n\nThanks Adam Chidlow for polishing the patch."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Zac-HD": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/32ade4d73b50aed77efdb9dd7371c17f89061afc", "message": "Fixed #28878 -- Added python_requires in setup.py and a warning for older pips that don't recognize it."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cameroncurry": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/622ead6aaf55288cd355f22e8bb9c56d8e12556c", "message": "Fixed #28937 -- Allowed BinaryField to be editable=True."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "berkerpeksag": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/ad9390bba27cb41da92f734db4d0e36ef3dfc58f", "message": "Updated documented mysqlclient requirement to 1.3.7.\n\nThe test requirement was bumped in\r\n2514e044a7fce58176c4e79eec298f3d8f70e89b."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7300", "title": "Fixed #18119 -- Added a DomainNameValidator validator.", "body": "https://code.djangoproject.com/ticket/18119\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/7153", "title": "Fixed #18763 -- Added with_perm() to User manager.", "body": "https://code.djangoproject.com/ticket/18763\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1269110", "body": "```\ngit remote add upstream git://github.com/django/django.git\ngit pull --rebase upstream master\n```\n\nwould be better.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1269110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "tiltec": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/01384ce36c3fddfbcc5af6e1108bdb8cd3e9389d", "message": "Fixed #28947 -- Fixed crash when coercing a translatable URL pattern to str.\n\nRegression in df41b5a05d4e00e80e73afe629072e37873e767a."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weijunji": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/1ef8b30abed6ecf0c28517001e7fd8a84e6e47d3", "message": "Fixed #28929 -- Corrected QUnit examples."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9479", "title": "Fixed #28917 Remove paginator's unordered queryset warning for a .none() queryset ", "body": "https://code.djangoproject.com/ticket/28917", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dhepper": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/4dcd7723d59a666ab8e6dc29b0cc6eb7f2658ec1", "message": "Fixed #28938 -- Corrected Python compatibility in the tutorial."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fenrrir": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/30a389bd7795016d7f48bcda997e5dea5116f9bb", "message": "Fixed #28898 -- Corrected admin check to allow a OneToOneField in ModelAdmin.autocomplete_fields."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daniilr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/7c7bc6391a3e83566f9ace59955e63503bc76cee", "message": "Fixed #28874 -- Prevented double escaping of errors on hidden form fields."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "morganwahl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/a9e5ac823df8ba8b786b6450c967ca378c008d0e", "message": "Refs #28856 -- Added test for caching of a GenericForeignKey pointing to a model that uses more than one level of MTI.\n\nForwardport of test and release notes of\n35222035029863f95769e2e59beeeb953d125689 from stable/1.11.x"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "knaperek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/fff86cfa46d6c5da645f162488216b08eb60db8d", "message": "Made session loading in cached_db engine more DRY."}, {"url": "https://api.github.com/repos/django/django/commits/3d94ee85005ff658f9419269a6719cbbf7903dab", "message": "Simplified django.utils.cache.get_max_age()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geekodour": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/c6864a01b25591d3a709da8071413b69c9e35341", "message": "Fixed #28791 -- Allowed commands that don't require settings to work if the DJANGO_SETTINGS_MODULE doesn't exist."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dracos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/16bd4964dfd75759cb3ec0c786e1b5dcc8296fd9", "message": "Fixed #28891 -- Documented Origin's loader attribute."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MightySCollins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/2d75e74e18def5de8b23f88f4257f262f18fe1a9", "message": "Fixed typo in docs/ref/contrib/admin/index.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meloie": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9d1d0e2b702fe1a3f979a95bc4583f1a1691c74f", "message": "Fixed import in docs/ref/models/conditional-expressions.txt example."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uranusjr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/85e6a1c634fed55c43090e37b802c721d9e7eaaa", "message": "Fixed #28877 -- Made ordinal template filter results more localizable.\n\nMarked the whole pattern (e.g. \"{value}th\") as translatable, instead of\njust this suffix, so that languages not using suffixes for ordinals can\nuse this tag."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "idlesign": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3cc08f4b2ba6fe7931cf551676fa86a4966987e4", "message": "Fixed typo in docs/ref/models/expressions.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidszotten": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/bee4c2baede18d8c8c0a29cd9affb18074dafd3a", "message": "Fixed grammer in docs/releases/2.0.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "clincher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/03974d81220ffd237754a82c77913799dd5909a4", "message": "Fixed #28866 -- Made InlineAdminFormSet include InlineModelAdmin's Media before its formset's Media.\n\nThis provides better backwards compatibility following refs #28377."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ticosax": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/746caf3ef821dbf7588797cb2600fa81b9df9d1d", "message": "Fixed #28837 -- Fixed test client crash if an exception with more than one arg is raised.\n\nAlso removed usage of the problematic pattern elsewhere.\n\nRegression in 6e55e1d88a5c4453e25f0caf7ffb68973de5c0ba."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dilyanpalauzov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3308085838f520db49f606b72345a301c1cf2a3e", "message": "Fixed #28854 -- Replaced type(True) with bool in sqlite's SchemaEditor."}, {"url": "https://api.github.com/repos/django/django/commits/23bf4ad87f86f44a5ecf9aea722ced76fe7b7fdf", "message": "Fixed #28795 -- Removed 'not in' checks and used dict.setdefault()."}, {"url": "https://api.github.com/repos/django/django/commits/c69e4bc69166b2d752b437a651dfa91f8b53ecfd", "message": "Fixed #28769 -- Replaced 'x if x else y' with 'x or y'."}, {"url": "https://api.github.com/repos/django/django/commits/6c0042430e3618ce5c276d195d92a6b884daa3a3", "message": "Fixed #28776 -- Fixed a/an/and typos in docs and comments."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "raphaelm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/616f468760e4984915bb2ccca6b9eb3d80ddadb0", "message": "Fixed #28848 -- Fixed SQLite/MySQL crash when ordering by a filtered subquery that uses nulls_first/nulls_last."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8309", "title": "Fixed #27833 -- Allowed QuerySet.prefetch_related() to avoid the max query parameter limitation of SQLite.", "body": "prefetch_related used to fail with SQLite when used with 1000 parent records\r\n\r\nsee https://code.djangoproject.com/ticket/27833", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spookylukey": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/e283c1a2675d1336aba0e8141ed94efa3ac68b04", "message": "Linked to prefetch_related_objects func in DB optimization docs."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1462821", "body": "On 15/06/12 08:48, Claude Paroz wrote:\n\n> Thanks Luke for fixing it and sorry for the confusion I made.\n\nNo problem, it happens. Hope you didn't mind me just going ahead and\nmaking the change - it was definitely a mistake so I thought it would\ntake more work for everyone to check with you etc.\n\nRegards,\n\nLuke\n## \n\n\"Outside of a dog, a book is a man's best friend... inside of a\ndog, it's too dark to read.\"\n\nLuke Plant || http://lukeplant.me.uk/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1462821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1492612", "body": "There's a similar issue in django-piston - here was my fix: https://bitbucket.org/jespern/django-piston/pull-request/25/compatibility-fix-for-json-emitter-with\n\nI think we should just document the problem, given that the workaround isn't too bad. Doing anything else would just perpetuate the problems that simplejson has caused.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1492612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "lqez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3f237c1a5b936a9b85304cffbf3343f491e395d6", "message": "Fixed typo in docs/topics/forms/media.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vonafor": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/54e5c4a00e116ff4be257accdc9aa9e068c7f4ee", "message": "Fixed #28820 -- Eliminated an extra query with QuerySet.update() on proxy models."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FMCorz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/a5f1e5809f26d93ea0c6010bb44895b3d1992089", "message": "Clarified who the AdminEmailHandler emails."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dodobas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/d97f026a7ab5212192426e45121f7a52751a2044", "message": "Fixed #28817 -- Made QuerySet.iterator() use server-side cursors after values() and values_list()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nazarewk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/244cc401559e924355cf943b6b8e66ccf2f6da3a", "message": "Fixed #26184 -- Allowed using any lookups in ModelAdmin.search_fields.\n\nThanks Krzysztof Nazarewski for the initial patch."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lamby": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3af305e8b8a89f4b0e5874cd601568ab8dcd7334", "message": "Fixed #28810 -- Replaced '%' style logging formatting with str.format() style."}, {"url": "https://api.github.com/repos/django/django/commits/648957b707491b99dc32a3cdbeaaa3fe9f3164cf", "message": "Fixed #28798 -- Removed unused django.utils.dates.WEEKDAYS_REV, MONTHS_3_REV."}, {"url": "https://api.github.com/repos/django/django/commits/998c9dd599cd907bb38f440fff13a808571589f8", "message": "Fixed #28663 -- Add a check for likely incorrectly migrated django.urls.path() routes."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "benjaoming": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/bf49d9eb0b33aefc7179d3843fad0cb7df4e7790", "message": "Fixed #28815 -- Fixed ExtractYear imports in docs/ref/models/expressions.txt."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andreif": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3ae9c356c5d4b89caf8343aa3ffe0a66e713c9fd", "message": "Refs #28593 -- Updated old class names in comments following URL routing changes."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bjornkri": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/ac6a4eb9f95138628a7eec76bee91eb067af80a9", "message": "Fixed #28719 -- Added a helpful exception if MultipleObjectTemplateResponseMixin doesn't generate any template names."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "myii": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3e7497a05e7f7cf0ff157d88cef18e95e3cff57b", "message": "Fixed #28758 -- Fixed RangeMax/MinValueValidators crash with unbound ranges."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ymyzk": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/278d66b94bb443e1c1581e014fee2593a33f338c", "message": "Fixed #28501 -- Fixed \"python -m django runserver\" crash."}, {"url": "https://api.github.com/repos/django/django/commits/ac21f2e39148c8683445eef01ef4323500711fb0", "message": "Added RestartWithReloaderTests."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/b81905bfd4a745a407d246e899a7c0db1c7555be", "message": "Fixed #28571 -- Added a prompt to bypass password validation in createsuperuser."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9606", "title": "Fixed #29037 - Add a bulk_save method to models", "body": "Ticket: https://code.djangoproject.com/ticket/29037\r\n\r\nThis ticket has not been accepted yet, so I might be jumping the gun, but I thought I would make a PR to explore how complex it would be to add.\r\n\r\nAdding basic support using no special syntax seems pretty easy.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9192", "title": "Fixed #28668 -- Support ignoring conflicts with bulk_create()", "body": "[Ticket](https://code.djangoproject.com/ticket/28668)\r\n\r\nNot sure about the API for this one, passing in the string 'ignore' seemed good as a first stab.\r\n\r\nIt's a bit tricky to implement, as some backends (mysql, sqlite) need to add a statement or two after the `INSERT` statement, but Postgres needs to add it after the `VALUES` but *before* the `RETURNING`. \r\n\r\nI hope this is the right place to implement this. I was going to add a custom per-backend `SQLInsertCompiler` that handles this, but it seemed overkill.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9053", "title": "Fixed #28574 -- Add Queryset.explain() method", "body": "[Ticket](https://code.djangoproject.com/ticket/28574)\r\n\r\n```python\r\n>> qs = Tag.objects.filter(name='test').all()\r\n>> print(qs.explain())\r\nSeq Scan on queries_tag  (cost=0.00..23.00 rows=5 width=50)\r\n  Filter: ((name)::text = 'test'::text)\r\n>> print(qs.explain(verbose=True))\r\nSeq Scan on public.queries_tag  (cost=0.00..23.00 rows=5 width=50) (actual time=0.054..0.054 rows=0 loops=1)\r\n  Output: id, name, parent_id, category_id\r\n  Filter: ((queries_tag.name)::text = 'test'::text)\r\n  Rows Removed by Filter: 5\r\nPlanning time: 0.382 ms\r\nExecution time: 0.189 ms\r\n>> print(qs.explain(verbose=True, format='json'))\r\n[{'Execution Time': 0.177, 'Triggers': [], 'Planning Time': 0.419, 'Plan': {'Actual Loops': 1, 'Filter': \"((queries_tag.name)::text = 'test'::text)\", 'Node Type': 'Seq Scan', 'Rows Removed by Filter': 5, 'Alias': 'queries_tag', 'Output': ['id', 'name', 'parent_id', 'category_id'], 'Actual Startup Time': 0.067, 'Actual Total Time': 0.067, 'Relation Name': 'queries_tag', 'Parallel Aware': False, 'Plan Rows': 5, 'Plan Width': 50, 'Actual Rows': 0, 'Total Cost': 23.0, 'Schema': 'public', 'Startup Cost': 0.0}}]\r\n```\r\n\r\nI need to add docs, but I hope the general implementation is OK with regards to modifying the `operations` and `features` db-backend files, and their interaction with the compiler/queryset/query etc.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8928", "title": "[WIP] Refs #28477 --  Strip unused annotations from count queries", "body": "[Ticket](https://code.djangoproject.com/ticket/28477)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8819", "title": "Refs #27685 -- Refactor the autoreloader", "body": "[Ticket](https://code.djangoproject.com/ticket/27685)\r\n\r\nThe ticket is about adding support for watchman to the autoreloader, but a lot of Aymeric's points rang true - especially about a complete rewrite rather than a bit-by-bit refactor. There are a few other related tickets to do with the autoreloader that would require some re-engineering before they could be got right.\r\n\r\nThis MR does a big cleanup of the autoreloader code, which ends up to be half the size, be (i hope) a lot less hairy and have some interesting features. \r\n\r\nFirstly, it implements two signals (`autoreload_started` and `file_changed`) that allow other parts of Django and perhaps even third party apps to customize what files are watched and offer custom handing when a file is changed. This is used to implement the `i18n` translations reset code, which currently lives in the autoreload code (and IMO really should not). Users of the signal are given the auto-reload instance which has a `watch` method, which accepts a `glob` argument, e.g:\r\n\r\n`autoreloader.watch('some_directory/', '**/*.html')`\r\n\r\nSecondly the autoreload code is split into two classes, a `BaseReloader` and a concrete `StatReloader`. In the future this can be used to add support for watchman or any other algorithm for detecting changes - it just needs to implement a `yield_changes` function that yields the paths of files that have changed.\r\n\r\nIt also changes the behaviour slightly: the current implementation replaces `.pyc` files with `.py`, but I'm not sure this is still valid. It assumes that `.py` files live next to `.pyc` files, which in Python 3 and `__pycache__` directories may not be true. So I removed the code that handled that, as well as Jython-specific stuff.\r\n\r\nIt doesn't currently include support for catching SyntaxErrors, which I kept out in case anyone had a good idea of how to do a clean implementation of it. The current code (to quote Aymeric) is 'horrific'. It also doesn't include the `ensure_echo_on` code, which was a ticket that was added a long time ago. It has no tests and perhaps it's not required any more?", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8797", "title": "Refs #23919 -- Remove os.path usages", "body": "This continues cleaning up some `os.path` usages. I believe none of these changes break any public API's.\r\n\r\n[Ticket](https://code.djangoproject.com/ticket/23919)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8562", "title": "WIP: Fixed #28236 - Integrate dj-database-url into Django ", "body": "[#28236](https://code.djangoproject.com/ticket/28236)\r\n\r\nI took a stab at integrating `dj-database-url` into Django. I quite like the idea of it being a self-contained `util` function that people can include as-needed:\r\n\r\n```python\r\n# settings.py\r\nfrom django.utils.database_url import parse_from_environment\r\n\r\nDATABASES = parse_from_environment()\r\n# Or:\r\nimport os\r\nfrom django.utils.database_url import parse_url\r\n\r\nDATABASES = {\r\n   'default': parse_url(os.environ['MY_ENV']),\r\n   'second': parse_url(os.environ['MY_SECOND_ENV'])\r\n}\r\n```\r\n\r\nI removed some support for third party database backends that was in `dj-database-url`, I don't think we want to hard code support for them (but we do need to support the kind-of-third-party-but-not-really `contrib.gis` backends, annoyingly). I also copied all the tests over and got them to pass, after converting them to use `self.assertX` over just `assert`.\r\n\r\nI doubt this is anywhere near ready to merge, but I like the idea and I thought I would take the first step and propose one way to integrate the library into Django.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8531", "title": "Fixed #27999 -- Add test Client support for HTTP 307 and 308 redirects", "body": "For [#27999](https://code.djangoproject.com/ticket/27999)\r\n\r\nNot sure about the `getattr()` inside `_handle_redirects`, the other way to do this would be to pass in the method explicitly from each callsite. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nickrsan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/3d22121a0b5b4087487ada62b7f2a20fb30a3856", "message": "Clarified error message for when sqlplarse isn't installed."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mwhansen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/514b2c989a948e3c59bda0da0c9427acf643cf5b", "message": "Fixed #28723 -- Fixed RelatedManager's prefetch_related() cache name."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SamMorrowDrums": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/dcc0427c58df19863e260de13b7a86a3648d57e9", "message": "Fixed #28745 -- Added first and last page links to paginator docs example."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mpasternak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/e554b72a2a5473f3f1e57a32565758757a9e8e87", "message": "Fixed #28749 -- Added subquery support for ArrayField's __in lookup."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adamchainz": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/629dde8db10bb830e88e01aa85eef81d6f81672f", "message": "Made assorted edits to docs/releases/2.0.txt."}, {"url": "https://api.github.com/repos/django/django/commits/acc989f037f4185b3f55cb76ab51c5224f30f0d1", "message": "Fixed #28760 -- Removed DummyCache's unnecessary get/set/delete_many()."}, {"url": "https://api.github.com/repos/django/django/commits/f8946fbb5d7e8eb6c8ca7481b0cd4e78627ef8cf", "message": "Removed docs for obsolete compatibility checks."}, {"url": "https://api.github.com/repos/django/django/commits/abacd09f07f4bb0aa1a3a32bc6e3c3570fa76912", "message": "Refs #27318 -- Made DummyCache.set_many() return a list for consistency with other backends."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8855", "title": "[WIP] Fixed #28469 -- Added missing HttpResponse subclasses", "body": "[ticket](https://code.djangoproject.com/ticket/28469)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "meshy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/cbe334918a0a80762249706a15b699714b5dc828", "message": "Fixed #28750 -- Allowed models to define Meta.manager_inheritance_from_future for backwards compatibility.\n\nRefs 631f4ab06112aca5bd6a57b81159048f936050bf."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2385742", "body": "Is this commit 1.5c1? It does not appear to have a tag.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2385742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "scop": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/23e551ce6c7956e4c143357643dab2e89d30bfe0", "message": "Refs #23919 -- Updated references to urllib.quote() to Python 3 location."}, {"url": "https://api.github.com/repos/django/django/commits/617686e226231fe8ad3f2e49d3efabf6f5f434d3", "message": "Fixed 'a'/'an' mix-ups in docs."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rajesh-Veeranki": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/5e1a356060b6d9b3efa583b5a2c419d1fd630054", "message": "Fixed typo in tests/many_to_many/tests.py."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8570", "title": "Fixed #19580 -- Made nullable relations work consistently", "body": "Rebased the previous PR https://github.com/django/django/pull/7098/ with the master here. Modified the release text. The tests fail when I remove any newly added line. Please review and suggest any changes. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tbaxter-18f": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/73241132f21356f44d77ae23511b7eb122cfab2b", "message": "Refs #28457 -- Removed unused .next-step CSS in django/views/templates/default_urlconf.html."}, {"url": "https://api.github.com/repos/django/django/commits/f6b5cecc71d7d429fc33e6b3f7f4e5112f9251af", "message": "Refs #28457 -- Updated the colors of the 'Congrats' page for WCAG AA compliance."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "solarissmoke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/6c98c5abdfb8572936992b5395aab001aeb245f2", "message": "Refs #21927 -- Removed docs for include()'s old instance_namespace parameter.\n\nFollow up to ad393beeb71e8774e4bf9ad842b97022e50f1231."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8752", "title": "Fixed #26688 -- Fixed HTTP request logging inconsistencies.", "body": "https://code.djangoproject.com/ticket/26688", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "duartefq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/019c2600a6771d2cd0574062dee468ce96d7e69d", "message": "Fixed #28747 -- Fixed typos in django/conf/global_settings.py comments."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xfxf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/9473a8481a29ff6272664b19eeb91bfc3640f705", "message": "Fixed #28740 -- Added 'continent_code' and 'continent_name' in GeoIP2.city() dict."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "medmunds": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/d1317edad0a2908574d2a5b07383bfe58884628c", "message": "Fixed #28739 -- Fixed get_fixed_timezone() for negative timedeltas."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shacker": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/6642a646f07a33cf1b807d398824048f3b17631c", "message": "Fixed #28735 -- Fixed typo in django/views/templates/default_urlconf.html."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "levidyrek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/django/django/commits/6c3104221b2cb9f068c07adf3ef24c9f49627834", "message": "Refs #28721 -- Added test for variations of 'inf'/'infinity' as a template variable names.\n\nFixed by 9ec7d8e514e09636b0ab4bcac74b5f7a5be335a3."}], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9276", "title": "Fixed #28718 -- Allowed password reset if a user's current password doesn't use an enabled hasher.", "body": "[#28718](https://code.djangoproject.com/ticket/28718)\r\n\r\n> Currently the built in django password reset system requires that you have an active account and that your password can be compared to by an enabled hasher. \r\nI think that this is in error, as you are about to reset the password to something new (hence resetting it) and the standard process of password resetting requires an email confirmation. I can see no way in which this is able to be abused by a malicious 3rd party. If I'm mistaken here then feel free to correct me.\r\nI propose that the system is changed to just require that the user is active and that their password is not marked disabled as per the UNUSABLE_PASSWORD_PREFIX.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "senthilcodr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9610", "title": "Fixed #28784 -- Re-phrased the documentation for the fake option in migrate command.", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "astandley": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9609", "title": "9475", "body": "Updated Fix for #9475 -- allow add(), create(), etc for m2m with through", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kb0304": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9608", "title": "Fixed #28889 -- Disabled submit buttons on admin form submission to prevent double submission", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IlianIliev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9603", "title": "Using the same DB connection for the mirror", "body": "Ticket #23718 -> https://code.djangoproject.com/ticket/23718", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "priyanshsaxena": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9600", "title": "Fixed #29015 -- Added error-message for too long PostgreSQL database name", "body": "PostgreSQL imposes a limit of 63 bytes for all identifiers by default.\r\nAdded a 'NotSupportedError' if the NAME value in settings.DATABASES\r\nis longer than 63 characters.\r\nUses 'len' method instead of 'sys.getsizeof' for getting the size.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "T-101": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9598", "title": "Added exception raise when form_class not defined in FormMixin", "body": "Not having a form_class defined in FormView and parents will cause an Exception with a nonsensical error message and trace about NoneType not being callable.\r\n\r\nThis will check if form_class is defined, and raise ImproperlyConfigured Exception with a accurate error message for the user to define form_class or override get_form_class()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobort": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9583", "title": "Refs #28643 -- Added Ord, Chr, Left, and Right database functions", "body": "This is my first time contributing.  I appreciate advice and guidance.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "doganmeh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9581", "title": "ModelBackend object permissions fallback to model permissions", "body": "This is for the issue:\r\n\r\nhttps://code.djangoproject.com/ticket/20218\r\n\r\nand the discussion:\r\n\r\nhttps://groups.google.com/forum/#!topic/django-developers/MLWfvPPVwDk", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "onkruid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9577", "title": "Refs #28643 -- Added Abs function", "body": "Ticket: [#28643](https://code.djangoproject.com/ticket/28643)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jschneier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9575", "title": "Fixed #28959 -- Fixed 'No, take me back' button on admin's inline popup.", "body": "https://code.djangoproject.com/ticket/28959\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8191", "title": "Fixed #27944 -- Allowed Model.meta.get_field('pk') to return the primary key.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Demo318": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9572", "title": "Change shell launch from django-admin to manage.py", "body": "At this point in the tutorial, project has not configured django-admin to launch commands. Launching the shell through django-admin will produce an error. Launching the shell through manage.py will yield same result, without requiring student to backtrack and configure django-admin. Configuring django-admin is beyond the scope of this tutorial.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stkrp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9560", "title": "Fixed #28960 -- Implemented GEOS.BufferWithStyle.", "body": "Ticket: https://code.djangoproject.com/ticket/28960\r\n\r\nPossible improvement, for which I could not find a place:\r\n```\r\n/// End cap styles\r\nenum EndCapStyle {\r\n\r\n    /// Specifies a round line buffer end cap style.\r\n    CAP_ROUND=1,\r\n\r\n    /// Specifies a flat line buffer end cap style.\r\n    CAP_FLAT=2,\r\n\r\n    /// Specifies a square line buffer end cap style.\r\n    CAP_SQUARE=3\r\n};\r\n\r\n/// Join styles\r\nenum JoinStyle {\r\n    \r\n    /// Specifies a round join style.\r\n    JOIN_ROUND=1,\r\n    \r\n    /// Specifies a mitre join style.\r\n    JOIN_MITRE=2,\r\n    \r\n    /// Specifies a bevel join style.\r\n    JOIN_BEVEL=3\r\n};\r\n```\r\nSource: https://github.com/OSGeo/geos/blob/master/include/geos/operation/buffer/BufferParameters.h#L62", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bquinn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9559", "title": "Fixed #29004 -- Optional database view support for inspectdb command", "body": "Added --include-views option to inspectdb command which creates Django\r\nmodels from database views as well as tables.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2390239", "body": "why this change? if you wanted to change the tense of this line it should be changed for all the other lines as well, eg \"install the instrumented...\" It's a very small issue, but you want a quality release, right?! :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2390239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/2397204", "body": "oh I see, fair enough! Thanks for replying, and thanks for all your work on Django, we really appreciate it!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2397204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "grantjenks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9555", "title": "Fixed #28977 -- Changed local memory cache to use LRU-eviction policy.", "body": "The previous locmem cache eviction policy was psuedo-random. Now that\r\nDjango requires Python 3.4 or greater, the collections.OrderedDict can\r\nbe used to impelement an LRU-eviction policy. These changes do the\r\nfollowing:\r\n\r\n1. Add a failing test to validate LRU-eviction.\r\n2. Update the locmem backend to evict keys in LRU-order.\r\n3. Update locmem cache tests regarding locking.\r\n4. Remove RWLock in utils/synch.py as it is no longer used.\r\n\r\nLRU-eviction is a well-regarded policy but turns every read into a kind\r\nof write to the cache: cache keys are moved to the first position in the\r\nOrderedDict when they are retrieved. The previous implementation used a\r\nspecial RWLock which permitted multiple readers while prioritizing a\r\nsingle writer. LRU turns all accesses into writes, effectively removing\r\nthe utility of the RWLock. In its place, threading.RLock is used, which\r\nhas the added benefit of being re-entrant and so simplifying the\r\nimplementation.\r\nhttps://code.djangoproject.com/ticket/28977", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinvol": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9533", "title": "Added documentation for User.has_usable_password method", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sliverc": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9529", "title": "Fixed #28442 - Fixed nested OuterRefs on primary key", "body": "Avoid exception in AutoField get_prep_value when value is an OuterRef.\r\nhttps://code.djangoproject.com/ticket/28442", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vinayinvicible": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9520", "title": "Fixed #28950 -- Made Arrayfield.has_changed compare empty values properly", "body": "https://code.djangoproject.com/ticket/28950", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/9332", "title": "Fixes #28783: Added support for custom operator class for indexes", "body": "https://code.djangoproject.com/ticket/28783", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/7759", "title": "Fixed #27654 -- Propogate alters_data value to subclasses", "body": "https://code.djangoproject.com/ticket/27654", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sphrak": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9518", "title": "[WIP] Fixes 28975 -- Allows to skip create extension statement for postgis", "body": "Background: https://code.djangoproject.com/ticket/28975\r\n\r\nThis patch check for the result of `SELECT installed_version FROM pg_available_extensions WHERE name ='postgis';` - if it returns something, the function simply returns since we dont want to create the extension then - however if it doesnt return anything the expected behaivor of autocreating the extension is executed.\r\n\r\nAllows for a bit more freedom when running the migration with a non-superuser db user. However it will still raise:\r\n```\r\ndjango.db.utils.ProgrammingError: permission denied to create extension \"postgis\"\r\nHINT:  Must be superuser to create this extension.\r\n```\r\n\r\n..if the extension does not exist, and the user is not a superuser.\r\n\r\n* [x] logic\r\n* [x] docs\r\n* [ ] tests\r\n* [ ] ready to merge\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "funkybob": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9510", "title": "Fixed #24754 -- Added support for per-app permissions (not tied to a model)", "body": "- Allow Permission.content_type to be Null\r\n- Add settings.GLOBAL_PERMS as a list of permission details\r\n- Update a few places to handle ContentType being None.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2871301", "body": "Here you parse_filter the fragment_name, but it's never  resolved above.  It only works because the FilterExpression.**str** method returns self.token\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2871301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jieter": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9480", "title": "Fixed #27398 -- Ignore order of query string params in assertRedirects", "body": "Both url and expected url are normalized so any differences in the\r\nordering of the query string parameters doesn't make the test fail.\r\n\r\nhttps://code.djangoproject.com/ticket/27398", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hakib": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9469", "title": "Fixed #28933 -- Custom range-based filter for date_hierarchy", "body": "[Ticket](https://code.djangoproject.com/ticket/28933#ticket)\r\n\r\nThe predicate generated by date_hierarchy makes it very difficult for databases to optimize the query.\r\n\r\nThe following date hierarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16\r\n```\r\n\r\nWill generate the following where clause (PostgreSql):\r\n```\r\nWHERE created between '2017-01-01' and '2017-31-12' and EXTRACT('month', created) = 12 and EXTRACT('day', created) = 16\r\n```\r\n\r\nThe query above will not be able to utilize range based indexes on the date hierarchy column - on big tables this has a significant performance impact.\r\n\r\nThe current implementation of date hierarchy is relying on the \"default\" filtering mechinizem used by Django Admin. **I propose implementing custom filtering for Django Admin that will better utilize it's hierarchical nature and make it more database \"friendly\".**\r\n\r\nInstead of the query above the date hierarchy would generate the following predicates for different levels of the heirarchy:\r\n```\r\n/admin/app/model?created__year=2017&created__month=12&created__day=16 \r\nWHERE created >= '2017-12-16' and created < '2017-12-17'\r\n```\r\n```\r\n/admin/app/model?created__year=2017&created__month=12\r\nWHERE created >= '2017-12-01' and created < '2018-01-01'\r\n```\r\n```\r\n/admin/app/model?created__year=2017\r\nWHERE created >= '2017-01-01' and created < '2018-01-01'\r\n```\r\n\r\nPlease let me know if this is acceptable.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "snyff": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9464", "title": "Update shell.py", "body": "Not having globals() here prevents people from using python manage.py shell < script.py. More details can be found in https://stackoverflow.com/questions/47748824/very-weird-issue-with-import", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaap3": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9440", "title": "Fixed #28905 - Added optional dependencies to extra_requires", "body": "https://code.djangoproject.com/ticket/28905\r\n\r\nMake it easier to install Django including optional dependencies (like pyscopg2, Pillow etc.) with the correct minimum version by using, i.e.:\r\n\r\n    pip install Django[postgresql,images]", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1907534", "body": "With the break gone, this continue has no purpose\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "francoisfreitag": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9409", "title": "Fixed #28748: Made CharField choices' check stricter.", "body": "A malformed choices structure would pass the Django system checks, but trigger an exception when attempting to migrate the field.\r\n```python\r\nclass Model(models.Model):\r\n    field = models.CharField(max_length=1, [\r\n        'knights', [\r\n            ['G', 'Galahad'],\r\n            ['L', 'Lancelot', 'Du Lac'],\r\n        ],\r\n    ])\r\n```\r\n\r\n\r\nTicket: https://code.djangoproject.com/ticket/28748", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ashaba": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9399", "title": "Fixed #28403 -- modified format_module_path doc", "body": "added DATE_INPUT_FORMATS and\r\nDATETIME_INPUT_FORMATS to FORMAT_MODULE_PATH settings example", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geranazavr555": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9391", "title": "Fixed #28404 -- showing empty value for empty strings in Django admin", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zauddelig": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9368", "title": "Index.fields default value was not immutable", "body": "One should really promote the use of tuples rather than lists to avoid creepy side effects.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srfilipek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9360", "title": "Fixed #27629 -- Made calls to allow_relation() more consistent.", "body": "Modified the behavior surrounding router.allow_relation checks within\r\nthe related_descriptors module. It will now always resolve the\r\ninstance and value database if needed and then always call the\r\nrelation check.\r\n\r\nhttps://code.djangoproject.com/ticket/27629", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChillarAnand": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9351", "title": "Fixed #28755 -- Added app locale paths to locale paths", "body": "Ticket: https://code.djangoproject.com/ticket/28755", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "funkyfuture": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9341", "title": "Fixes #28782, WIP: Template variable lookup on non-mappings with a __getitem__ method.", "body": "see [#28782](https://code.djangoproject.com/ticket/28782) regarding the initial problem.\r\n\r\nthe solution comes among other changes:\r\n\r\n- introduces a `utils.typing`\r\n  - see bd3fdf7f0feba86ab99f3e4830b56df432e55e7d's commit message for rationale\r\n  - the registration of a `numpy.ndarray` as `Sequence` is essential here\r\n- i couldn't resist to get rid of calls to deprecated functions in `inspect` (0b325977ee7867b024efc452c97637e89e2d46d0)\r\n  - i could move that to another pr and amend a modernization of the remaining use within the project\r\n\r\nso far, this implementation works against all test in `template_tests`, i'll look into the other tests if the approach is approved.\r\n\r\ni also looked into a refactoring that bases `template.context.BaseContext` on `collections.ChainMap` and it looks promising regarding a simpler code. but this would require more effort for which i have no time atm and isn't necessary in the scope here. however, i'd highly recommend to modernize this part.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sonus21": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9339", "title": "Fixed #28785 -- Made makemigrations print a warning if a migration file is deleted.", "body": "This change would provide a fix for ticket 28785\r\nSee the ticket for more details.\r\nScenario:\r\n1. App is migrated\r\n2. Delete all the migrations file\r\n3. Create migrations using `manage.py makemigrations`\r\n4. Apply migrations using `manage.py migrate` \r\n\r\nAt step 4 this will print no change and nothing will happen but we should've updated the django_migrations table and reflect the warning log.\r\n\r\nError message would something like as below,\r\n\r\nWARNING: Inconsistent migrations\r\n   App 'CoreApp':\r\n        '0002_room_me'\r\n\r\n ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkabrda": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9338", "title": "Fixed #28835 -- Made development server shutdown on SIGTERM.", "body": "Hi, I've run into an issue where shutting down django devserver in a container (e.g. in kubernetes/openshift environment) doesn't work well. The original report is at [1].\r\n\r\nExplanation:\r\n* kubernetes/openshift send SIGTERM to PID 1 in the container when shutting the container down.\r\n* If `manage.py runserver` is an entrypoint, it gets executed as PID 1 in container.\r\n* Linux kernel won't propagate SIGTERM to any process that is PID 1 (in or outside of container) if it doesn't have a handler installed for this signal.\r\n\r\nThe implication of this is that the container with django devserver will not do \"soft\" shutdown on SIGTERM and Kubernetes/Openshift will wait for timeout and kill the container with SIGKILL. Therefore the container will keep hanging and occupying system resources during the whole timeout.\r\n\r\nEven though I understand that people should only use devserver for development and not for deployment, I think it's quite common to first make the container working with devserver for development and then consider Gunicorn or similar solution when moving from early stage of the project. IOW, I think this would really be beneficial for people using Kubernetes like environments to develop/deploy Django apps.\r\n\r\nThanks for considering!\r\n\r\n[1] https://github.com/sclorg/s2i-python-container/issues/93", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timgivois": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9337", "title": "Fixed #28780 -- Added customization for INTERNAL_RESET_URL_TOKEN", "body": "https://code.djangoproject.com/ticket/28780", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "beniwohli": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9323", "title": "Fixed #28766 -- Added ResolverMatch.route.", "body": "This adds the \"route\" attribute to ResolverMatch, which is set if\r\nthe new django.urls.path function is used to define URL patterns.\r\n\r\nTrack ticket: https://code.djangoproject.com/ticket/28766", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jherencia": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9318", "title": "Fixed #28763 -- Allow SessionStore's to be easily overridden to make dynamic the session cookie age", "body": "https://code.djangoproject.com/ticket/28763", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jezeniel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9314", "title": "Fixed #28514 -- Clarifed docs about idempotence of RelatedManager.add()", "body": "- Added signals documentation on ``add()`` for the many-to-many topic.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denys-tarykin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9309", "title": "Ticket 23816 Implemented default deferred fields", "body": "mplemented new feature that allow to define fields which will be deferred for reading.\r\nAdded new parameter to fields - \"defer\". By default this param is equal False.Before executing query the fields which have defer=True will be marked as deferred\r\nExample:\r\n```\r\nclass Sub(Super):\r\n    is_super = models.BooleanField(default=False, defer=True)\r\n    len = models.IntegerField(default=2)\r\n```\r\n\r\nThis logic is equal to Sub.objects.defer(\"is_super\").get()", "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/pulls/9126", "title": "Fixed #28198 -- Prevented model attributes from overriding deferred fields.", "body": "Attributes from parent classes will not overload attributes in child classes. During model creation process, attributes which are dublicated in parent and child classes will be removed. That attributes will restored for all parent classes after model creation process", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tstirrat15": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9296", "title": "Add iteration behavior to Paginator", "body": "## Fixes\r\nNo open ticket.\r\n\r\n## Motivation\r\nI went to use the `Paginator` in a context where I just wanted batches of objects out of a queryset, rather than needing to get a particular page out of the queryset. I ended up expressing it like this:\r\n```python\r\npaginator = Paginator(queryset, 200)\r\nfor page_number in paginator.page_range:\r\n  do_stuff_to(paginator.page(page_number))\r\n```\r\nThis seemed clumsy, so I went looking to see if there was an `__iter__` method on `Paginator`, which there wasn't. Given that it's a small amount of code and a simple change, I implemented it.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kosmos342": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9295", "title": "Added option to sort message strings for translations by msgid", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kimle": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9289", "title": "Used subTest() in timezones tests", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apollo13": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9272", "title": "cleanup duplicated connection functionality.", "body": "", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6180128", "body": "Updated (with a forced push) to check if the admin properly uses .pk everywhere and not .id.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6180128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6199086", "body": "This was fixed in 17f3e9258e6050c274a7294213bd08bb71f2d2da\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6199398", "body": "Yes, a ticket is required. Aside from that docs and tests are needed too.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6199464", "body": "Can you please add tests and a ticket and then squash those commits into one as described in https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/working-with-git/#rebasing-branches\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6507443", "body": "Fixed in 6bc1b22\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6507443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6525161", "body": "Can you please add tests which check that the backend in question is actually used?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6525161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6525194", "body": "Fixed in c864b36ba1. Thx!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6525194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6525254", "body": "Fixed in 946d3d9. Thx!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6525254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6525270", "body": "Wontfix as in the ticket.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6525270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6525474", "body": "Commited in d4da08375b. Thx!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6525474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6540678", "body": "Fixed in d69f1d7. Thx!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6540678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6540785", "body": "Dupe of PR36\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6540785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6601186", "body": "Docs, ticket and tests are missing (check that the tests for distinct on are actually executed with your changes and return the expected results) -- especially if the conjunction with order works correctly too.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6601186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1718357", "body": "Guessed right, will fix it.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1718357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2370821", "body": "Hrmpf, why doesn't my python show those :(\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2370821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2370823", "body": "_sigh_ I shouldn't touch Django today I guess :/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2370823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2715155", "body": "@carljm I don't care too much, in the long run we probably should add release notes to the master branch and backport into the relevant release branch like we do with every other changeset\u2026\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2715155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "StephenSwat": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9260", "title": "Fixed #28712 -- Add option attributes to ChoiceWidget.", "body": "The django.forms.ChoiceWidget and all its subclasses such as django.forms.Select now optionally accept a parameter `opt_attrs` which applies a dictionary of attributes to the `option` HTML nodes generated by the widget. This is similar to how the existing `attrs` parameter works. Developers can use this to style options if they so desire.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denisiko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9248", "title": "Fixed #28808 -- Allowed customizing of translation fallback", "body": "Introduction of a new setting LANGUAGE_FALLBACK, which allows controlling the fallback language of Django's translation module. It falls back to LANGUAGE_CODE if not set, ensuring backward compatibility.\r\n\r\nThanks Claude Paroz for the analysis and Dhia Abbasi for the good ideas.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yudori": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9245", "title": "Fixed #28655 -- Add example doc for widget customization using form.fields", "body": "https://code.djangoproject.com/ticket/28655", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Baguage": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9214", "title": "Fixed #28690 django.utils.http.parse_http_date two digit year check is incorrect", "body": "https://code.djangoproject.com/ticket/28690  ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hynekcer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9212", "title": "Fixed a race condition problem in migrations howto.", "body": "edited howto chapter \"Migrations that add unique fields\", how they are split to 3 migrations.\r\n\r\n* The first commit will fix the mentioned race condition. It is also more similar to a normal migration  that only value `None` is replaced by the default value, not overwritten if an existing field is migrated to `null=False`.\r\n\r\n* The second commit requires a discussion if it should be also applied:\r\n  + pros: This method is easier memorable, linear without jumping back and forth. Model migrations are created automatically. Only the data migration is edited.\r\n  - cons: It the problem was recognized late, this method requires to delete the migration file, not to edit it. That is controversial.\r\n\r\n    > If you have created an invalid migration yet for that field then remove it. It will be replaced by three smaller migrations.\r\n\r\n  The migrations are finally the same, only the steps differs.\r\n  Number of non empty lines in howto is the same, but most of it is descriptive now and can be massively simplified, eventually by removing the two file snippets that are created automatically now.\r\n\r\nMy texts require language adjustment, please.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "melvyn-sopacua": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9188", "title": "Fixed #28659 -- Fixed Layermapping crash with null fields.", "body": "- Add test models and shape files to expose the problem\r\n- Fix bug by testing for None and simply adding the new geom", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JunyiJ": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9185", "title": "Fixed #28628 --Replaced '\\d' in regexes with [0-9] for more strict matching.", "body": "In Python2 and Python3 '\\d' in regular expression matches to different patterns. To avoid errors, '\\d' was replaced with [0-9].", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZachLiuGIS": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9173", "title": "Ticket #28622: Allow password reset token to expire in under a day", "body": "can set PASSWORD_RESET_TIMEOUT using seconds, so it can be expired within a day.\r\n\r\nchanging making token to use seconds instead of days. \r\n\r\nIt should be backward compatible, because PASSWORD_RESET_TIMEOUT_DAYS can still be used. Old tokens generated should be checked without problems.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ljodal": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9163", "title": "Fixed #28650 -- Add TruncWeek to truncate to monday of week", "body": "https://code.djangoproject.com/ticket/28650\r\n\r\n(haven't gotten the tests up and running locally, but hopefully this works)", "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/pulls/9162", "title": "Fixed #28649 -- Added ExtractIsoYear to extract ISO week-numbering year.", "body": "https://code.djangoproject.com/ticket/28649\r\n\r\n(haven't gotten the tests up and running locally, but hopefully this works)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uadnan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9151", "title": "Refs #28600 -- prefetch_related support in RawQuerySet", "body": "This PR adds\r\n\r\n- Results caching support in `RawQuerySet`\r\n- Prefetch related support in `RawQuerySet`\r\n\r\nTicket: https://code.djangoproject.com/ticket/28600", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "a8568730": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9145", "title": "Bug#28635. Preserved filters with unicode url prefix", "body": "The ticket is [#28635](https://code.djangoproject.com/ticket/28635)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "c-bata": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9131", "title": "Refs #28535 -- Add rebase option in makemigrations command", "body": "Hi! I added `--rebase` option for `makemigrations` command.\r\nUsage is like this:\r\n\r\n```\r\n$ ls snippets/migrations/\r\n0001_initial.py            0002_snippet_created_at.py 0002_snippet_updated_at.py __init__.py\r\n$ python manage.py makemigrations --rebase -v 3\r\nRebasing snippets\r\n  Branch 0002_snippet_updated_at\r\n    - Add field updated_at to snippet\r\n  Branch 0002_snippet_created_at\r\n    - Add field created_at to snippet\r\n\r\nRebasing will only work if the operations printed above do not conflict\r\nwith each other (working on different fields or models)\r\nDo you want to rebase these migration branches? [y/N] y\r\n\r\nCreated new rebase migrations:\r\n  - /Users/a14737/PycharmProjects/django-book/tutorial/blog/snippets/migrations/0003_snippet_created_at.py\r\n$ ls snippets/migrations/\r\n0001_initial.py            0002_snippet_updated_at.py 0003_snippet_created_at.py __init__.py\r\n```\r\n\r\nTicket URL is https://code.djangoproject.com/ticket/28535.\r\nThanks.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adamsowa": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9093", "title": "Fixed #28602 - file watch based autoreload for Windows", "body": "Currently utils/autoreload.py has implementation for inotify based file system watcher. On Windows it scans all files for changes every 1 second which takes a lot of CPU. Windows provides file system watching API (FindFirstChangeNotification) which does the same thing as inotify on Linux. Django should take advantage of the API to make autoreload more efficient.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jleclanche": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9088", "title": "[RFC] Implement an EstimatedCountPaginator", "body": "**RFC, please discuss**\r\n\r\nThis PR implements a paginator which takes advantage of Postgres and mysql's ability to estimate the amount of rows in a table.\r\nEven as early as 1 million rows, SQL count operations can become slow and the Django administration unexplicably slows down. It becomes unusable within a couple of magnitudes.\r\nThis is basically a different way to approach [8408](https://code.djangoproject.com/ticket/8408), which has a `no_count` PR in #8858.\r\n\r\nNotes:\r\n\r\n* Only postgres and mysql are supported; I have no idea how to do it with other engines (and I don't think it's necessary, this is best-effort after all).\r\n* MySQL is completely untested. I rewrote a postgres version I'm currently using in production.\r\n* Estimations can be off by a lot! I've seen discrepancies of up to 3-4% on postgres.\r\n* This is obviously only meant to be used on QuerySets. It will fail gracefully if given a non-queryset object though.\r\n* No tests/docs yet (and I would welcome help writing those). I'd like input on whether this is an acceptable approach to be merged first.\r\n* Is `django.core.paginator` an ok place for this to live? It's where I would expect it, but the module doesn't do db stuff in general.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "evildmp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9071", "title": "Fixed #28592 -- Updated security documentation", "body": "Ticket https://code.djangoproject.com/ticket/28592\r\n* Moved material from ref/csrf.txt to howto/topic sections as appropriate\r\n* Added new howto/csrf-protection.txt\r\n* Expanded discussion of CSRF policy in topics/security", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tolomea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9064", "title": "Fixed #28586 -- Added support for automatically prefetching 2one fields.", "body": "[ticket](https://code.djangoproject.com/ticket/28586)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FingalP": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9063", "title": "Fixed #28589 -- Removed readonly/uneditable fields from SQL query in admin save", "body": "\r\nCreated get_update_fields() on ModelAdmin and pass it as an argument to\r\n.save() in save_model on ModelAdmin", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luto": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9052", "title": "Fixed #28581 -- Pagination topic docs restructuring", "body": "https://code.djangoproject.com/ticket/28581", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dspechnikov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9023", "title": "Fixed #21381 -- Remove contrib.redirects dependency on contrib.sites", "body": "Redirect model now has optional `domain` field. If it's specified and matched with request domain, such redirect will be used over the one with the same `old_path` and blank domain.\r\n\r\nOther than that, redirect logic is the same.\r\n\r\nIf `sites` framework is installed, admin redirect form will have optional `site` field which can be used to fill redirect domain.\r\n\r\nFor existing database installations, existing redirect sites domains data will be migrated to new redirect domain field.\r\n\r\nTODO:\r\n\r\n- [x] Raise an exception in data migration if sites framework is not installed to prevent data loss\r\n- [x] <del>via @knbk: maybe we could add the necessary migrations for the model changes including the data migration, and include a squashed migration without the sites dependency so that new deployments don't need to install sites just to migrate</del> add `site` foreign key conditionally instead. If any redirects data exist, require `sites` app to be installed to prevent data loss. New deployments don't need `sites` app at all.\r\n- [x] rewrite form save\r\n- [x] <del>consider adding reverse migration</del> I think it doesn't make sense here since it would require sites app installed again in order to redirects app to function.\r\n- [x] add sites app requirement for existing data migration to docs", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yellowcap": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9021", "title": "Fixed #28566 -- Added full file path matching to collectstatic ignore patterns.", "body": "https://code.djangoproject.com/ticket/28566", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lynncyrin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9016", "title": "Refs #23130 -- Allowed BooleanField to be null=True", "body": "https://code.djangoproject.com/ticket/23130\r\n\r\nPicks up were @timgraham left off in https://github.com/django/django/pull/8467\r\n\r\nrefs:\r\n- https://github.com/django/django/pull/3025\r\n- https://code.djangoproject.com/ticket/22282\r\n- https://code.djangoproject.com/ticket/26168\r\n- https://code.djangoproject.com/ticket/22282\r\n\r\ndetails:\r\n- `BooleanField` model field can take `null=True`\r\n- ~`NullBooleanField` is now just `BooleanField(null=True)`~\r\n- depreciates `NullBooleanField` (this decision was made in @timgraham's PR)\r\n- ~normalizes boolean type casting, and incorporates `distutils.util.strtobool`~\r\n- ~collects all the different boolean casting special cases into a single file `django/utils/typecasting.py`~\r\n\r\nstill TODO:\r\n- [x] there's at least a dozen tests failing <<< resolved\r\n- [x] determine if this is a large enough PR to get added to [AUTHORS](https://github.com/django/django/blob/master/AUTHORS) ^_^ <<< call: no. the PR is much simpler without the `typecasting.py` change\r\n- [ ] check for `NullBooleanField` isinstance calls to turn into `null=True`\r\n- ~`typecasting.py` entrypoint functions need better names~\r\n- ~evaluate `typecasting.py` `nullable=[ True | False ]` handling~\r\n- ~add a few more cases to `test_typecasting.py`~\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codingjoe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/9011", "title": "Fixes #28554 -- Added support for multiple files for forms.FileField", "body": "https://code.djangoproject.com/ticket/28554", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "collinanderson": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8981", "title": "Fixed #9475 -- allow add(), create(), etc for m2m with through", "body": "https://code.djangoproject.com/ticket/9475", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "caleblogan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8978", "title": "Fixed #28507 -- Added __eq__ feature to ValidationError", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "theoden-dd": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8975", "title": "Documented usage subtlety of the `set` method of related managers", "body": "There's an inconsistency of the `set` method between [RelatedManager](https://github.com/django/django/blob/stable/1.11.x/django/db/models/fields/related_descriptors.py#L706) and [ManyRelatedManager](https://github.com/django/django/blob/stable/1.11.x/django/db/models/fields/related_descriptors.py#L972), which should be at least documented, I suppose.\r\n\r\nThis cost me some time of re-reading the docs and wondering \"What's wrong with my PKs?\".", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rogeremasse": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8974", "title": "Fixed #28050 -- Included template name in TemplateSyntaxError.", "body": "https://code.djangoproject.com/ticket/28050", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ziima": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8973", "title": "Fixed #28529 -- Cleaned variable errors in admin templates", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "knbk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8957", "title": "Fixed #28520 -- Added --start-at/after options to Django's test suite.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8577", "title": "Fixed #28250 -- Ignored soft applied migrations in consistency check.", "body": "Ignored initial migrations that have been soft applied and may be faked\r\nwith the --fake-initial flag in the migration history consistency\r\ncheck. Does not ignore the initial migration if a later migration in\r\nthe same app has been recorded as applied.\r\n\r\nThanks to Rapha\u00ebl Hertzog for the initial patch.\r\n\r\nTicket: https://code.djangoproject.com/ticket/28250", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vanadium23": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8947", "title": "Fixed #28510 -- Added json response to technical_500_response", "body": "Better handling technical 500 views, when client waits json response. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkang8": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8940", "title": "[WIP] Ref #21429 Added output logger to BaseCommand", "body": "Ref: https://code.djangoproject.com/ticket/21429\r\n\r\nWIP\r\nI added a logger to BaseCommand. I need to add tests for the new loggers. Would love feedback to improve this PR. :)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "patjenk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8931", "title": "Fixed #28337 -- assertRedirects correctly replays requests", "body": "Refactored django.test.clients.py:Client so that 'extra' parameters\r\npassed into requests are stored so they can be accessed in the future.\r\nThis because useful in assertRedirects when the original request has\r\nfollow=False and the call to assertRedirects has\r\nfetch_direct_response=True.\r\n\r\nThe problem with reported in the ticket is that under certain conditions\r\nassertRedirect will replay the request with different parameters than\r\noriginally specified. The conditions necessary for this to occur are\r\npassing follow=False to the original client.get and also passing 'extra'\r\nparameters that will be interpreted as HTTP header's. Assert redirect\r\nmakes an assumption that it is possible to exactly recreate the original\r\nrequest with the information that is available.\r\n\r\nTo properly recreate the the original request it would be necessary to\r\npass ALL method parameters AND all of the kwarg parameters that were\r\noriginally passed in. This would require storing the 'extras' in the\r\nClient (django.test.client.py) so they could be acccessed in\r\nassertRedrrects and properly replayed.\r\n\r\nI believe this is the proper solution because it removes the assumptions\r\npresent when assertRedirect attempts to recreate the request. Although\r\nthis is a corner case, it is certainly acceptable for django users to\r\nutilize the infinite space that is HTTP headers and provide varrying\r\nlogic depending on the values present. The downside of this\r\nimplementation is that it bloats the Client by requiring it to store the\r\nextra parameters passed in. These extra parameters will rarely be used\r\nbut I believe the tradeoff of adding properties to Client and\r\npotentially increasing memory footprint are small enough to warrant this\r\nchange.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kennethreitz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8924", "title": "BigAutoField as new default in 2.0", "body": "This pull request uses bigints (`BigAutoField`) as the new default for auto created primary keys in Django applications. \r\n\r\n- New applications will use `BigAutoField` by default, instead of `AutoField`. \r\n- `SmallAutoField` is introduced, and `AutoField` is aliased to it, for later deprecation. \r\n- Migration path is to warn about the expensive migration, and guide the user to hardcode their models to the new `SmallAutoField`, if desired (and to the release notes). \r\n\r\nDiscussed at length with @andrewgodwin, and paired with him on this. \r\n\r\nTests are all passing locally. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1440427", "body": ":heart:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1440427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dpatterson-aio": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8919", "title": "Serialize Enum migrations by name", "body": "- avoids unnecessary imports if the values are complicated", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nerogit": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8908", "title": "Fixed #28044 -- Combine the logic for both interactive and not-interactive(\u2014noinput mode)", "body": "https://code.djangoproject.com/ticket/28044", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bettsmatt": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8858", "title": "Disable count in admin", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DrMeers": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8856", "title": "Fixed #22569 -- Allowed ModelAdmin.lookup_allowed() to respect get_list_filter().", "body": "https://code.djangoproject.com/ticket/22569", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1746921", "body": "Agreed and reverted, thanks Karen.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1746921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "theodesp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8803", "title": "Fixed #27994 -- Documented contrib.staticfiles.storage.ManifestFilesM\u2026", "body": "\u2026ixin\r\n\r\nTIcket\r\n=====\r\nhttps://code.djangoproject.com/ticket/27994\r\n\r\nDescription\r\n========\r\nThis is my first contribution so the more feedback I can get the better.\r\nProvided documentation for the **ManifestFilesMixin**\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmytrostriletskyi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8801", "title": "Fixed #28385 -- Avoided ignoring natural keys when primary key has a default value.", "body": "## Ticket\r\n\r\nhttps://code.djangoproject.com/ticket/28385\r\n\r\n## Bug space\r\n\r\nWhen a models primary key has default set, and a fixture is loaded that does not have a pk attribute, then the serialisation code will refuse to update the existing instance and instead try to create a new record in the db.\r\n\r\nWhen the primary key attribute has a default value - such as models using UUID primary keys - the model will fill the pk attribute with that at instantiation time, and the check in build_instance will see that default value and refuse to goto the database to fetch the existing instance.\r\n\r\nThis is against the expectations set in the docs, that when the model/manager implement the natural keys interfaces and the primary key is omitted, the framework will update the existing instance when deserialising.\r\n\r\n(c) reporter Daniel Knell\r\n\r\n## How to reproduce\r\n\r\n1. Create the same model like [there](https://github.com/django/django/pull/8801/files#diff-2cf99154fd579c9e2d2ee0945f90ef4bR26).\r\n\r\n2. Make `loaddata` fixtures flow like [there](https://github.com/django/django/pull/8801/files#diff-79e3f82c439838acf1377e2ec7e1342bR79).\r\n\r\nWe expect, that if `loaddata` dictionary has no `pk`, it will get object by `natural key` and update object, but it raises:\r\n\r\n```\r\ndjango.db.utils.IntegrityError: Problem installing fixture 'filename.json': \r\nCould not load app.Model(pk=<pk_number>): UNIQUE constraint failed: app_model.some_field\r\n```\r\n## Why it happens \r\n\r\n1. [Deserializer](https://github.com/django/django/blob/master/django/core/serializers/python.py#L98) flow does not provide `pk` for objects without it.\r\n2. `Deserializer` try to get `pk` from `natural_key` in [build_instance](https://github.com/django/django/blob/master/django/core/serializers/base.py#L215) method.\r\n3. But this method create new model object with default `pk` before implement point `2` [there](https://github.com/django/django/blob/master/django/core/serializers/base.py#L222).\r\n\r\nAgain: when model is created, we can get `pk` of this model (because `pk` has default value).\r\nQuestion: how we can get model's `pk` by `natural key` from model without `pk`, if we create one instance before with default `pk`?\r\n\r\n## Solution\r\n\r\nI got `build_instance` logic and move it to previous level within [Deserializer](https://github.com/DmytryiStriletskyi/django/blob/8d2564a2805f2ebe48a9e5194b5c678f016f4e59/django/core/serializers/python.py#L79) to suitable place.\r\n\r\nIf it seems okay, we can go ahead and rewrite logic for [that](https://github.com/django/django/blob/d0f59054d0c4b2291a4e0e94ec00537f98a4ab50/django/core/serializers/xml_serializer.py#L213). Also, we can change `build_instance` logic for this two cases instead of touch serializers flow. \r\n\r\nIt was not possible to use `TDD`. May add tests in last commit.\r\nThank you for paying attention.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "markkohdev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8776", "title": "[WIP] Fixes #28404 -- Show empty_value for empty strings", "body": "Fixes https://code.djangoproject.com/ticket/28404", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vdboor": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8760", "title": "Fixed #28393 -- Added a helpful exception for invalid AutoField/IntegerField values.", "body": "When a large model is updated and saved with invalid values, it produces a traceback deep within the ORM, with no clue which field assignment caused the error. Developers are faced with tracebacks like:\r\n\r\n```\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/base.py\", line 953, in _do_update\r\n    return filtered._update(values) > 0\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/query.py\", line 661, in _update\r\n    return query.get_compiler(self.db).execute_sql(CURSOR)\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1191, in execute_sql\r\n    cursor = super(SQLUpdateCompiler, self).execute_sql(result_type)\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 863, in execute_sql\r\n    sql, params = self.as_sql()\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1157, in as_sql\r\n    val = field.get_db_prep_save(val, connection=self.connection)\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/fields/__init__.py\", line 766, in get_db_prep_save\r\n    prepared=False)\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/fields/__init__.py\", line 758, in get_db_prep_value\r\n    value = self.get_prep_value(value)\r\n  File \"/Users/diederik/Sites/virtualenvs/test/lib/python3.6/site-packages/django/db/models/fields/__init__.py\", line 1853, in get_prep_value\r\n    self.name, repr(value)\r\n   TypeError: int() argument must be a string, a bytes-like object or a number, not 'tuple'\r\n```\r\n\r\nThis change displays the field name which makes spotting errors a lot easier.\r\n\r\nFor example, it shows:\r\n\r\n    TypeError: remote_id: expected string or a number, not (39468135737,)\r\n\r\nTrac issue: https://code.djangoproject.com/ticket/28393", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1907596", "body": "Awesome to see this commit, and fully agree on the removal of `get_profile()`. It distracted developers from the fact you can just have a one-to-one relation between `User` and a `UserProfile` model.\n\nI'm curious, why is `@skipIfCustomUser` not written as `@skip_if_custom_user` ?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1939769", "body": "@agafonovdmitry: I guess because the `Options` class (which `model._meta` is) only accepts a fixed set of known fields. `class Meta` isn't a bag of state you can just throw any attribute at, unless someone finds a way to extend that mechanism (e.g. via the base class). Yet I would also like to know what was decided about that in django-core.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1939769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "karolyi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8745", "title": "Fixed #28316: to_field_name handled properly on ModelChoiceFields", "body": "The form `initial` state should also reflect the `to_field_name` on a previously setup `ModelChoiceField`.\r\n\r\nAlso, please be less OCD on the PEP8 enforced newlines.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dyve": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8741", "title": "Fixed #28379 -- AccessMixin will not redirect authenticated user to login page, but raise Permissiondenied instead", "body": "`AccessMixin` has been changed so that authenticated users will not be redirected to the login url. Instead, `Permissiondenied` will be raised. This means that the value of `AccessMixin.raise_exception` is only relevant for the workflow of unauthenticated users.\r\n\r\nTicket: https://code.djangoproject.com/ticket/28379", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chris-griffin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8736", "title": "Fixed #21076 -- Store hashes of session keys in backends", "body": "Added the ability to store a one-way hash of the session key instead of storing it as plain-text in the backend to improve security. This is particularly beneficial if a malicious actor only gains access to a read-only version of the backend or an unencrypted backend backup. Further discussion can be found on the [django-developers Google group](https://groups.google.com/forum/#!topic/django-developers/XMZXYBGQDZU).\r\n\r\nThe [Trac ticket](https://code.djangoproject.com/ticket/21076) mentioned the ability to turn this feature off since some installs rely upon shared backend stores to handle authentication across applications. I added the SESSION_STORE_KEY_HASH global setting to allow developers to disable this behavior if desired.\r\n\r\nSome design considerations:\r\n\r\n- Ensure we don't break current user sessions\r\n- Use a fast hashing algorithm to have minimal performance impact\r\n- Store the hashing function used so that we can change the function used gracefully if needed\r\n- Expose an API method to hash the key\r\n- Support this functionality in all backends (except the cookie backend)\r\n\r\nAn area of concern:\r\n- If a developer currently accesses a Session through the `objects` manager, they'll need to update their code to hash the key before querying via the `session_key` or `pk` fields. For instance,\r\n\r\n```py\r\nSession.objects.get(session_key=session_key)\r\n```\r\nwould now need to be:\r\n\r\n```py\r\nSession.objects.get(session_key=get_session_key_hash(session_key))\r\n```\r\n\r\nIs there a better way to address this shortcoming?", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "elinaldosoft": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8733", "title": "Fixed #28694 -- Made slugify() remove redundant underscores and dashes.", "body": "Improvement in the slugify for treatment of underscore and dash", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yeago": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8710", "title": "Fixed #28369 -- Added ModelAdmin hooks for reversing URLs.", "body": "https://code.djangoproject.com/ticket/28369#ticket", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ssangervasi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8682", "title": "Fixed #27449 -- Added get_supported_language_variant to public API", "body": "Added django.utils.translation.trans_real.get_supported_language_variant\r\nto the public API in django.utils.translation.get_supported_language_variant.\r\nAdded unit tests for the original function which were lacking. Added\r\ndocumentation and updated the doc string to match.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "julianandrews": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8681", "title": "Fixed #28342 -- Fixed PyLibMCCache error handling", "body": "https://code.djangoproject.com/ticket/28342", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickStefan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8661", "title": "Fixed #21961 -- added support for database level on delete cascade", "body": "Ticket https://code.djangoproject.com/ticket/21961\r\n\r\nGeneral Approach:\r\n- I've added a `models.DB_CASCADE` option for `on_delete`. Its essentially, `DO_NOTHING`, but the ForeignKey field sets a flag that affects the sql strings in `/backends/base/schemas`.\r\n\r\nCaveats for `models.DB_CASCADE` :\r\n- does not support on_delete signals\r\n- will not cascade delete multiple inherited tables as expected\r\n- will not trigger CASCADE on another model. E.g. Model A points to model B, via -\r\n DB_CASCADE. Model B points to model C, via CASCADE. A will cascade delete B, B will django delete C, but deleting A will not delete C!\r\n- ManyToMany with db level cascade delete will require manually defining a through table and setting the ForeignKeys as DB_CASCADE\r\n\r\nExisting Packages:\r\n- I originally proof of concept'd this as a postgres only external package https://github.com/NickStefan/django-db-cascade. I think we can actually support Postgres, MySQL, and even SQLite. With that scope, I believe its better as part of django.\r\n\r\nOther relevant tickets if we wish to support SQLite ON DELETE CASCADE\r\n- we'd need to enable `PRAGMA foreign_keys = 1`\r\n- ticket: https://code.djangoproject.com/ticket/14204\r\n- thread: https://groups.google.com/forum/#!topic/django-developers/_NpZ9K4hpv0 . \r\n- I'd be happy to do something related, but I wasn't sure where we could parameterize the option of setting the SQLite foreign key functionality. `settings.DATABASES.OPTIONS[\"PRAGMA_foreign_keys\"]` has been suggested, but is that an appropriate use of the that dictionary? We'd have to pop off that kwarg before passing it to the Database connection.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rennomarcus": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8640", "title": "Fixed #28297 -- Fixed join in an annotate().filter().annotate().filter() query.", "body": "[Ticket](https://code.djangoproject.com/ticket/28297)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ThinkChaos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8630", "title": "Fixed #28216 -- Added next_page attribute to LoginView", "body": "[Django Ticket](https://code.djangoproject.com/ticket/28216)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wil": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8612", "title": "Fixed #28280 -- Prevented numberformat.format() from formatting large/tiny floats in scientific notation.", "body": "This fix takes into account float values that gets represented in scientific notation.\r\n\r\nPlease see https://code.djangoproject.com/ticket/28280", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MatthewWilkes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8528", "title": "Fixed #24747 -- Allowed transforms in QuerySet.order_by()", "body": "This is a PR to fix #24747, and other related tickets. It allows order_by to include results of arbitrary transforms.\r\n\r\nThis works by making setup_joins understand transforms and return an additional value that converts a fiel object to something the SQL compiler can understand that takes the transforms into account.\r\n\r\nPractically, this allows order_by and distinct on JSONField, HStoreField and ArrayField.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mbeijen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8521", "title": "Fixed #18332 - generic function for db version", "body": "I took the old patch from https://code.djangoproject.com/ticket/18332 and brushed it up a bit. To the original SQLite implementation I added PostgreSQL, MySQL and Oracle implementations.\r\n\r\nWe also no longer return a `namedtuple` but a `dict` instead because it feels more in line with the rest of Django.\r\n\r\nThe thing I'm unsure about is if it would not be better to have the 'vendor' be the 'vendor' and a 'type' that can indicate the type. For instance for MySQL there is MySQL and MariaDB with each their own version numbering schemes.\r\n\r\n-----\r\n\r\nThis provides an option `get_backend_info()` that allows you to retrieve the\r\ndatabase type (vendor) and version, as a tuple.\r\n\r\n    >>> from django.db import connection\r\n    >>> connection.backend_info()\r\n    {'vendor': 'postgresql', 'version': (9, 6, 2)}\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andriisoldatenko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8491", "title": "Fixed #27899 -- Added phrase search query for postgres full text search", "body": "https://code.djangoproject.com/ticket/27899", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "miigotu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8477", "title": "Fixed #28184 -- Allowed passing a callable storage to FileField.", "body": "Adds the ability to pass a callable as the storage param of FileField, and testing for this new ability\r\n\r\nSee [ticket 28184](https://code.djangoproject.com/ticket/28184#ticket) for details.\r\n\r\nSigned-off-by: miigotu <miigotu@gmail.com>", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jonprindiville": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8476", "title": "Fixed #28144 -- Extract FileSystemStorage._save's os.open flags to a class attribute", "body": "Moves the flags passed to `os.open` in `FileSystemStorage._save` to a class attribute, `FileSystemStorage. OS_OPEN_FLAGS`. Enables subclassers to control the flags.\r\n\r\nSee [ticket 28144](https://code.djangoproject.com/ticket/28144) for details.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "byashimov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8470", "title": "Fixed #13091 \u2014 Performs unique together check if any constraint field presented in form", "body": "This is probably just a part of solution:\r\n- it makes appear hidden fields (non-presented in form) in an error message which may be undesirable\r\n- generic relation fields should probably refer to `content_object` in a message (see 6243e9b). This may be confusing to user, because \"this Content type, Object id and Foo already exists\" error doesn't help at all.\r\n\r\nBoth of them can be fixed by filtering them out in a message, but Model doesn't really know if they are presented in the form for real.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "blueyed": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8435", "title": "Optimized ModelAdmin.changelist_view if actions are not used", "body": "This avoids calling `len()` on `cl.result_list`.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/7181", "title": "Fixed #28458 --  Added ModelMultipleChoiceField.validate_choices() ", "body": "This allows to easily override it, e.g. when using django-filter and you\ndo not want the evaluation of the queryset, and/but instead validate the\ninput manually.\n\nRef: https://code.djangoproject.com/ticket/27148\n\nTODO:\n- [x] documentation\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ErwinJunge": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8434", "title": "Fixed #28147 -- Fixed loss of parent pk in child model when saving child after parent.", "body": "Fix for https://code.djangoproject.com/ticket/28147#ticket", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kravietz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8380", "title": "Fixed #27863 -- Added support for the SameSite cookie flag.", "body": "Resolving https://code.djangoproject.com/ticket/27863", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "denys-duchier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8370", "title": "Fixed #24607 -- Serialized natural keys in multi-table inheritance models.", "body": "I slightly reworked @jpmelos earlier PR #7231 to hopefully avoid the problem with spurious migrations.  When a parent link is being promoted as a pk, I don't modify that field, but I take note of the promotion in the inheriting model's _meta (well, Options actually, but that ends up the same).  Then a field is always serialized if it has been promoted, even if it is marked `serialize=False`", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rixx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8327", "title": "Fixed #13677 -- Propogated database choice from ModelFormSet queryset to ModelForm's choices.", "body": "Moved the patch by @dgouldin to current Django.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjtamlyn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8322", "title": "[WIP] Fixed #28053 -- Support db_index=Index()", "body": "WIP PR for expanding `db_index` to allow explicitly setting an index. It moves the responsibility for the indexes on a field to the field. This is also a step towards allowing a field type to define a default index type (e.g. for JSON or HStore fields, and for GIS).\r\n\r\nTODO:\r\n- [ ] Allow (for PG at least) [ops classes](https://www.postgresql.org/docs/9.5/static/indexes-opclass.html) when creating an index, so the Like index can be explicitly added. This can probably be done with an expression after #8056 is complete. **At present the logic for creating the like index (named `_like`) is there, but it creates a plan btree index!**\r\n- [ ] Handle MySQL ForeignKey special case\r\n- [ ] Possibly also fix #8118 - relates to `TextField` not having indexes on MySQL (or Oracle?) when indexed.\r\n- [x] Handle Postgres Like indexes naming properly - maybe allow passing a max_length to an index?\r\n- [ ] Possibly also address [this ticket](https://code.djangoproject.com/ticket/24082) about `unique=True` and indexes on PG text fields\r\n- [ ] Some other tests need `clone_model` adding to fix things\r\n- [x] Handle legacy index names (see also #8329)\r\n- [ ] Change to using `Index.set_name_from_model()` (i.e. short index names) in both cases, and update all the tests where names change.\r\n- [ ] More tests for changing values of `db_index`, especially changing from one kind of index to another\r\n- [ ] Docs (including documenting change to `SchemaEditor.add_field`)\r\n\r\nQuestions:\r\n- Should we be more careful about setting `Index.fields()`? Do we need to verify that it only affects this field, or that no fields should be permitted on init when it's a `db_index`? How does this fit with indexes taking expressions?\r\n\r\nBackwards incompatible changes:\r\n- `SchemaEditor.add_field` now takes the `to_model` in the signature. This could possibly be handled more carefully, and the `to_model` is not *always* necessary, only when an index changes, so the code could be crafted to make `to_model` optional except where necessary for backwards compatibility reasons. I'm not sure it's worth it though.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6199127", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6210561", "body": "Looks good. The use of autodoc in the main documentation is going to go away (see @jacobian's comment on #144) but adding docstrings to undocumented functions is always a good idea!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6210561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1816087", "body": "Hmm, it's a blog post model, so I guess `pub_date` is more likely to be a `datetime` than a `date`. I know you can compare the two, and this is a date, but it's not that clear.\n\nThen again if it's _not_ a date, it should probably be called `published` or `pub_time` not `pub_date`...\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1816087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1907361", "body": "The thing you're adding it to is a tuple and you can't concatenate a tuple and a generator\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1946073", "body": "This is a bit of an issue in the long run though - not that I have any idea what the solution is.\n\nSee this commit for instance: 24154b216682dfef7ff647a5c2f698b89ba429a6 - doesn't have anything to do with #225\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1946073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2491699", "body": "It's to do with the fact Django is now WSGI compliant so gunicorn is wrapping Django's own WSGI rather than hacking around inside django as it used to need to. I think it rather substantially reduces the amount of code on both sides.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2491699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2560276", "body": "Should (or could) this be considered a public API now?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2560276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2565754", "body": "I know of a lot of libraries which utilise this sort of functionality for their own settings. Opened https://code.djangoproject.com/ticket/19748\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2565754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2576922", "body": "It's nothing to do with AUTHORS - as you wrote this patch you should be able to add yourself to AUTHORS if you wish. I believe it's an effort to keep the history cleaner - it helps to see the complete accepted solution to a ticket in one go.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2576922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2712666", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2712666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/3255587", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3255587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "joetsoi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8313", "title": "Fixed #28041 -- Added prefix matching for PostgreSQL full text search.", "body": "Hi,\r\n\r\nI took a stab at putting together something for https://code.djangoproject.com/ticket/28041\r\nI do however, think it is horrendous and I'm not a fan of the way I'm combining `Lexeme`s", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lefterisnik": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8307", "title": "Fixed #28048 -- Allowed generic date views to use related fields as date_field.", "body": "This PR tries to resolve a small issue on the date generic views. On the date generic views right now you cannot specify as a date_field a related field (you get FieldDoesNotExist). ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "icu0755": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8304", "title": "Fixed #27991 -- Add 'obj' kwarg to InlineModelAdmin.has_add_permission()", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luojiebin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8280", "title": "Fixed #27923 -- Added signals related to form.", "body": "Added six signals that are useful for form: pre_init, post_init, pre_clean,\r\npost_clean, pre_save, post_save.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rebkwok": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8267", "title": "Fixed #17962 -- Added get_deleted_objects hook to ModelAdmin", "body": "This commit adds a get_delete_selected() method to the ModelAdmin to allow increased control over permissions for deleting objects from the admin interface as well as format of the deletable objects returned.  By default the method just calls the get_deleted_objects() function from `contrib.admin.utils`.\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Stranger6667": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8239", "title": "Fixed #25718 -- Allowed using None as a JSONField lookup value.", "body": "It's my follow up on #5617.\r\nIn general it provides an ability to use ``None`` in queries if querying is applied to some key inside value of ``JSONBField``.\r\n\r\nThank you!", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "desecho": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8227", "title": "Improved tests for django.contrib.contenttypes.views.", "body": "I added missing tests, renamed some tests, removed duplicated tests and moved some tests from test_models which didn't belong there.\r\nIt should be 100% covered now, except for this code: https://github.com/django/django/blob/master/django/contrib/contenttypes/views.py#L71-L72\r\nI couldn't find a way to test it. It looks like this scenario can't happen. Please see if that is the case.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/8160", "title": "Fixed #27852 -- Fixed object deletion to show all protected related objects rather than just the first one.", "body": "https://code.djangoproject.com/ticket/27852", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alaminopu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8156", "title": "Fixed #27888 -- Added button to clear all admin filters", "body": "Fixed #27888 -- Added button to clear all admin filters", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "auvipy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8121", "title": "Fixed #3461 -- Made DatabaseWrapper.cursor() pass args/kwargs to the database adapter.", "body": "this PR aims to complete https://github.com/django/django/pull/7514 \r\n\r\nI found some changes in internal codes. so tests and docs are incomplete right now.\r\n\r\nas the reviewer of previous PR https://github.com/django/django/pull/7514 could you suggest the changes are OK here and input about tests? @felixxm I have also added oracle backend here.\r\n\r\nplease verify and let me know.\r\n\r\nI am not so good in testing so suggestions are wellcome.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "schinckel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8119", "title": "Filter expressions/Expression filters", "body": "Here is a first crack at making it possible to do nice things like:\r\n\r\n    queryset.filter(Exists(subquery))\r\n\r\nAlso:\r\n\r\n    queryset.annotate(foo=Case(When(Exists(subquery), then=...))\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "harisibrahimkv": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8081", "title": "Fixed #26423 -- Match email validation with html.", "body": "References https://github.com/django/django/pull/7742.\r\n\r\nAdds documentation describing what the Validation logic is based on.\r\n\r\nTicket: https://code.djangoproject.com/ticket/26423", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MarkusH": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8056", "title": "Fixed #26167 -- Added support for functional indexes", "body": "This is a first shot at it would or could look like. There are probably dozens more things to look into and consider.\r\n\r\n```bash\r\n$ cat app/models.py\r\n```\r\n```python\r\nfrom django.db import models\r\nfrom django.db.models.expressions import Ref, Value\r\nfrom django.db.models.functions import Concat, Lower\r\n\r\n\r\nclass Foo(models.Model):\r\n    name = models.CharField(max_length=255)\r\n\r\n    class Meta:\r\n        indexes = [\r\n            models.FuncIndex(\r\n                Concat(\r\n                    Lower(Ref('name', None), output_field=models.CharField()),\r\n                    Value('blub'),\r\n                    output_field=models.CharField(),\r\n                ),\r\n                name='some_func_index'\r\n            ),\r\n        ]\r\n```\r\n```bash\r\n$ python manage.py makemigrations -v 3\r\nMigrations for 'app':\r\n  app/migrations/0001_initial.py\r\n    - Create model Foo\r\n    - Create index some_func_index for model foo\r\n```\r\n```bash\r\n$ cat app/migrations/0001_initial.py\r\n```\r\n```python\r\n# Generated by Django 2.0.dev20170212181215 on 2017-02-12 18:14\r\n\r\nfrom django.db import migrations, models\r\nimport django.db.models.expressions\r\nimport django.db.models.functions.base\r\n\r\n\r\nclass Migration(migrations.Migration):\r\n\r\n    initial = True\r\n\r\n    dependencies = [\r\n    ]\r\n\r\n    operations = [\r\n        migrations.CreateModel(\r\n            name='Foo',\r\n            fields=[\r\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\r\n                ('name', models.CharField(max_length=255)),\r\n            ],\r\n        ),\r\n        migrations.AddIndex(\r\n            model_name='foo',\r\n            index=models.FuncIndex(expression=django.db.models.functions.base.Concat(django.db.models.functions.base.Lower(django.db.models.expressions.Ref('name', None), output_field=models.CharField()), django.db.models.expressions.Value('blub'), output_field=models.CharField()), name='some_func_index'),\r\n        ),\r\n    ]\r\n```\r\n```bash\r\n$ python manage.py migrate app\r\nOperations to perform:\r\n  Apply all migrations: app\r\nRunning migrations:\r\n  Applying app.0001_initial... OK\r\n```\r\n```bash\r\n$ sqlite3 db.sqlite3\r\nSQLite version 3.16.2 2017-01-06 16:32:41\r\nEnter \".help\" for usage hints.\r\nsqlite> .schema\r\nCREATE TABLE IF NOT EXISTS \"django_migrations\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"app\" varchar(255) NOT NULL, \"name\" varchar(255) NOT NULL, \"applied\" datetime NOT NULL);\r\nCREATE TABLE IF NOT EXISTS \"app_foo\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"name\" varchar(255) NOT NULL);\r\nCREATE INDEX \"some_func_index\" ON \"app_foo\" (COALESCE(LOWER(\"name\"), '') || COALESCE('blub', ''));\r\nsqlite> .quit\r\n```", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/6870", "title": "Fixed #26739 -- Made reverse RemoveField handle non-nullable columns", "body": "Ticket: https://code.djangoproject.com/ticket/26739\n\nThanks @Gagaro for the report and @apollo13 for the initial patch\nand pair programming.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pelme": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/8026", "title": "Fixed #27810 - allow query expressions in admin_order_field.", "body": "This commit makes the admin handle query expression objects properly as specified by admin_order_field.\r\n\r\nTicket link: https://code.djangoproject.com/ticket/27810", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "audiolion": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7996", "title": "Fixed #23004 -- Cleanse sensitive request.META keys from DEBUG Views", "body": "- Fixed ticket [#23004](https://code.djangoproject.com/ticket/23004)\r\n- Signed and sent CLA agreement\r\n- Added tests and documentation", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "twz915": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7920", "title": "Fixed #27755 -- Added ModelAdmin.get_inlines() hook.", "body": "https://code.djangoproject.com/ticket/27755", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rsalmaso": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7840", "title": "Fixed #27728 -- Allowed overriding admin templatetag's templates.", "body": "ticket https://code.djangoproject.com/ticket/27728\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/7765", "title": "Fixed #8500 -- Allowed overriding the default admin site instance.", "body": "ticket https://code.djangoproject.com/ticket/8500", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aaboffill": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7805", "title": "Fixed #27487--  Added admin JavaScript support to RadioSelect and CheckboxSelectMultiple widgets.", "body": "This problem occur when you override the defaults `Select` and `SelectMultiple` widgets in the admin by `RadioSelect` or `CheckboxSelectMultiple` respectively, and you need to add a new object of the relationship. Both widgets are rendered as `UL` `HTML` list, and there are not JavaScript support for that in `RelatedObjectLookups.js`. Every time when you add a new object of the relationship, you need to refresh the page to update the list with the added object.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gtnx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7745", "title": "Fixed #23268 -- Added natural key support for for generic foreign keys fixtures.", "body": "[Ticket](https://code.djangoproject.com/ticket/23268)\r\n\r\nWith this ticket, natural keys can be used for Generic Foreign Keys. This works for fixtures serialization & deserialization for each format (python, json, xml, yaml).\r\n\r\nWhen a natural key is available for a GenericForeignKey, this one is used with the field name \"content_object\" rather than \"object_id\". \r\n\r\nHere's an example. With\r\n- `Foo` a model with a `natural_key`\r\n- `Bar` a model with no `natural_key`\r\n- `TaggedItem` a model with a `GenericForeignKey`\r\n\r\n```python\r\nclass Foo(models.Model):\r\n    foo = models.IntegerField()\r\n\r\nclass Bar(models.Model):\r\n    bar = models.IntegerField()\r\n\r\n\r\nclass TaggedItem(models.Model):\r\n    content_type = models.ForeignKey(ContentType)\r\n    object_id = models.PositiveIntegerField()\r\n    content_object = GenericForeignKey()\r\n\r\nit1 = TaggedItem(content_object=Foo(foo=1))\r\nit2 = TaggedItem(content_object=Bar(bar=1))\r\n```\r\n\r\nDeserializing `it1` will give:\r\n```json\r\n{\r\n    \"fields\": {\r\n        \"content_type\": [\"app\", \"foo\"],\r\n        \"content_object\": [1]\r\n    }\r\n}\r\n```\r\n\r\nDeserializing `it2` will give:\r\n```json\r\n{\r\n    \"fields\": {\r\n        \"content_type\": [\"app\", \"foo\"],\r\n        \"object_id\": 1\r\n    }\r\n}\r\n```\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sihaelov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7683", "title": "Fixed #27533 -- Fixed inspectdb crashing on unique index with Coalesce", "body": "https://code.djangoproject.com/ticket/27533", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ellmetha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7673", "title": "Fixed #27489 -- Renamed permission codenames/names upon model renaming.", "body": "https://code.djangoproject.com/ticket/27489", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "frishberg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7663", "title": "Fixed #9435 -- Redirected on empty path_info when APPEND_SLASH is set.", "body": "This fixes the bug #6978 was intended to fix: namely, that `APPEND_SLASH` does not cause a trailing slash to be appended to the root URL of a Django project that is at a sub-path of its domain. Tests are included. However, I am not certain that this will not cause problems when an `HttpRequest` object is created that is not a `WSGIRequest`, and when the common middleware is used. Will the line `full_path = '' if request.path_info_is_empty else request.get_full_path()` cause problems in that case, since `request` will be of a different class than `WSGIRequest` and therefore will not have `path_info_is_empty`? How would I add a test for this case?\r\n\r\nhttps://code.djangoproject.com/ticket/9435", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ian-Foote": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7615", "title": "Fixed #11964 -- Added support for check constraints in model Meta.", "body": "https://code.djangoproject.com/ticket/11964", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niconoe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7610", "title": "Fixed #27480 -- Added cache.touch() method.", "body": "Here I provide a naive implementation in BaseCache. I'd also like to contribute more optimized versions in subclasses.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "florisdenhengst": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7604", "title": "Fixed #26067 -- Added support for ordering ArrayAgg and StringAgg.", "body": "Original PR can be found [here](https://github.com/django/django/pull/6886).\r\n\r\nThanks again for the useful discussion!\r\n\r\nI processed all of your comments.\r\n\r\nMost notable changes are:\r\n- exposure of ordering expressions via get_source_expressions and set_source_expressions. This required some further changes, e.g. overriding `get_source_fields`. This function is used to determine the return type of the expression so this should not include expressions which are used for ordering (these expressions do not affect return value/type).\r\n- support for multiple orderings\r\n- support for string-based specification of ordering in both directions, e.g. similar to `order_by('field')` and `order_by('-field')`\r\n\r\nHappy to hear what you guys think!", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "romgar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7551", "title": "Fixed #26822: Don't keep database clones when using keepdb option if new migrations are non applied", "body": "When using --keepdb option, cloned databases created with --parallel option are not recreated or updated, which make them out-to-date as soon as we add a new migration in the project.\r\nThis patch forces the cloned databases to be recreated if they are out-to-date.\r\n\r\nSecond try after #6884 for issue https://code.djangoproject.com/ticket/26822", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/7528", "title": " Fixed #25251 -- Initial data migration lost after TransactionTestCase (3)", "body": "Data loaded in migrations are restored at the beginning of each `TransactionTestCase` and all the tables are truncated at the end of these test cases.\r\nIt means that, at the end of your whole test suite, if there was at least one `TransactionTestCase`, the migrated data are no more in the database, specially surprising when using `--keepdb` option.\r\nNow we restore data at the end of a `TransactionTestCase`, to be sure that the next test will be in the expected environment (data loaded from initial migrations)\r\nIt also means that we add some informations in the test class itself to know if the next test needs a data rollback, to handle situations where `TransactionTestCase` with `serialized_rollback = True` and `serialized_callback = False` are mixed.\r\n\r\n@timgraham At the end I preferred to create a new PR to come back to a fresh environment for further discussions. Initial proposals were https://github.com/django/django/pull/6137 and https://github.com/django/django/pull/6297.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ubernostrum": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7508", "title": "Fixed #27447 -- Added test assertions to check whether a signal was sent or not.", "body": "https://code.djangoproject.com/ticket/27447", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5969556", "body": "What ticket in Trac does this correspond to?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5969556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5969651", "body": "This still has problems. Should be \"could have an affect\", not \"could have an effect\", and \"If you did\" should be \"If you do\" to match the construction of the earlier sentence and the following clause.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5969651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dadoeyad": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7499", "title": "Fixed #25388 -- Added an option to disable migrations when running tests.", "body": "https://code.djangoproject.com/ticket/25388", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sergeykolosov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7489", "title": "Fixed #21963 -- Allowed translator comments on non-EOL positions.", "body": "This patch is based on #2410 by @dzhibas. I've made a few cleanups and upgraded it to play nicely with the master branch.\r\n\r\nDescription from the original PR:\r\n\r\n> Inline translators comment and comment blocks in PO files now are in correct places and not ignored.\r\n> \r\n> New test case added with months from ticket #21963, previous test for issue #19552 is modified because of incorrect behavior (ignoring inline comments in front and placing others for wrong translation strings)\r\n\r\nThe implementation reverts most of https://github.com/django/django/commit/47ddd6a4082d55d8856b7e6beac553485dd627f7 (authored by @ramiro), while leaves documentation in place, thus the latter may need updating.\r\n\r\nIf the approach is still considered valid, I'll proceed with this patch.\r\n\r\nThe only thing which currently concerns me is that this implementation naively concats multiple translator comments found on a single line, e. g.:\r\n\r\n```\r\n#. Translators: valid i18n comment #8 # Translators: valid i18n comment #9\r\n#: templates/comments.thtml:13\r\nmsgid \"Translatable literal #9j\"\r\nmsgstr \"\"\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "asfaltboy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7436", "title": "Fixed #27391 -- Implement SimpleTestCase.debug method", "body": "https://code.djangoproject.com/ticket/27391\n\nUsers calling debug() expect it to bubble up an exception if occurring in test, but behave the\nsame as run() when no exception occurred.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "krisavi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7434", "title": "Fixed #24128 -- Made admindocs' TemplateDetailView account for template loaders.", "body": "Modification for TemplateDetailView in admindocs to go through the directories from template loaders.\n\nhttps://code.djangoproject.com/ticket/24128\n\nMight need some improvements.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "izquierdo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7364", "title": "Fixed #27272 -- Added an on_delete RESTRICT handler to allow cascading deletions while protecting direct ones.", "body": "https://code.djangoproject.com/ticket/27272\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "renskiy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7246", "title": "Fixed #27225 -- Made FetchFromCacheMiddleware set Age header for cached responses.", "body": "https://code.djangoproject.com/ticket/27225\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/7229", "title": "Fixed #15855: include Vary header to cached response", "body": "https://code.djangoproject.com/ticket/15855\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kottenator": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/7000", "title": "Fixed #25598 -- Support for SCRIPT_NAME in STATIC_URL and MEDIA_URL", "body": "https://code.djangoproject.com/ticket/25598\r\n\r\nBuild static and media URLs using SCRIPT_NAME prefix.\r\nThe prefix should be added when displaying the URL\r\nand omitted when serving the URL.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olivierdalang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/6734", "title": "Fixed #8936 -- Added view permissions and a read-only admin [rebased]", "body": "Hi,\n\nThis is just a rebase of https://github.com/django/django/pull/5297\nThe only difference (besides fixing the merge conflicts) is that `ModelAdmin.declared_fieldsets` doesn't exist anymore and was replaced by `get_fieldsets`.\n\nThanks,\n\nOlivier\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrzechonek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/6395", "title": "Fixed #26355 -- Added API to register different expressions for operator/field combo.", "body": "The idea is to register expression class in `CombinedExpression` lookup\ndict so that it can construct i.e. a `Func` when combining two sides with\nPython's `+` operator.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "inglesp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/6221", "title": "Fixed #26291 -- Allowed loaddata to handle forward references in natural_key fixtures.", "body": "This is a first stab at supporting forward references in fixtures that\nuse natural foreign keys.  See [ticket 26291](https://code.djangoproject.com/ticket/26291)\n\nBefore this commit, the following fixture could not be deserialized by\nloaddata if an author whose name is \"John Steinbeck\" did not already\nexist:\n\n```\n[\n  {\n    \"model\": \"app.book\",\n    \"fields\": {\n      \"title\": \"East Of Eden\",\n      \"author\": [\"John Steinbeck\"]\n    }\n  },\n  {\n    \"model\": \"app.author\",\n    \"fields\": {\n      \"name\": \"John Steinbeck\",\n      \"date_of_birth\": \"1902-02-27\"\n    }\n  }\n]\n```\n\nThis problem can be avoided by careful ordering of fixtures, but it is\nunavoidable for fixtures that contain circular references.\n\nWith this commit, when loaddata tries to deserialize a fixture\ncontaining an object that has a natural foreign key to another object\nthat does not yet exist, it will defer setting the foreign key attribute\nuntil after all fixtures are loaded.\n\nTODO: documentation\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sasha0": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/5866", "title": "Fixed #25513 -- Refactored the admin pagination to make it reusable", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hvdklauw": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/django/django/pulls/5579", "title": "Fixed #8851: Added default filter option to the admin.", "body": "Added an option to add default values for filters in the admin, to be able to\ndistinguish between having no filter select and disabling the filter I added\na per ModelAdmin configurable sentinel value.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "passy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5395752", "body": "Why Markdown and not RST like the rest of the docs?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5395829", "body": "From my phone, so please excuse errors. RST is rendered as well. All you\nneed is the .rst extension. I don't think there is any difference in\nappearance.\nOn Apr 28, 2012 12:03 PM, \"James Clemence\" <\nreply@reply.github.com>\nwrote:\n\n> Unlike RST, Github renders READMEs formatted using Markdown, which makes\n> them look cleaner when visiting the front page of the Django repository on\n> GH. Clearly, it doesn't make a difference to viewing the front page in any\n> form other than through the GH web interface, so it may reasonably be\n> considered unnecessary, especially given the rest of the docs being\n> formatted in RST.\n> \n> As the front README is the front-facing text file in the respository,\n> rendered Markdown looks a bit more readable and clean via GH - may be\n> personal preference, so feel free to discard if considered superfluous!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/3#issuecomment-5395782\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jvc26": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5395782", "body": "Unlike RST, Github renders READMEs formatted using Markdown, which makes them look cleaner when visiting the front page of the Django repository on GH. Clearly, it doesn't make a difference to viewing the front page in any form other than through the GH web interface, so it may reasonably be considered unnecessary, especially given the rest of the docs being formatted in RST. \n\nAs the front README is the front-facing text file in the respository, rendered Markdown looks a bit more readable and clean via GH - may be personal preference, so feel free to discard if considered superfluous!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5395850", "body": "Aha - didn't know that! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5395850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "niwinz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5396129", "body": "This a repeated pull request - https://github.com/django/django/pull/3\nI think reStructuredText is preferable.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5396129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5437251", "body": "It seems right.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5437251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5437313", "body": "No problem, I create the patch and I will go to trac, and I will open another pull request with a single commit.\n\n;)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5437313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5667968", "body": "Well! I responded on the ticket, and indicated where my proposal.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5667968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5735628", "body": ";) I have renamed the variables!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5735628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "remiprev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5396198", "body": "Ah damnit, I didn\u2019t look through _closed_ pull requests :) Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5396198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sindresorhus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5397297", "body": "See #3 and #6\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5397297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1440460", "body": ":heart:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1440460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "domenkozar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5397666", "body": "Github renders RST aswell, just name it README.rst\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5397666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aaugustin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398291", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398297", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398305", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398307", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398452", "body": "Please be aware that pull requests won't be merged without a corresponding ticket in Trac (specifically, we need an excellent reason to add yet another setting).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398623", "body": "Thanks :) Sorry, we still need to figure out some bits of our ticket management processes after the move to GitHub.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5403332", "body": "Our quality guidelines require that patches include tests. Unfortunately, pull request #17 was merged even though it didn't include a test and it was buggy.\n\nSince the admin is currently broken in master, and since we try hard to keep trunk stable, I'll break the guidelines again and merge this pull request without adding a test -- sorry.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5403332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5403426", "body": "@aviraldg Mistakes happen. It's the job of the committer to double check everything.\n\nSince we can now merge pull requests over the web (without even copying the code to our local computer), running the tests requires a bit more effort. We need to adapt our ways of working on Django and not take too many shortcuts.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5403426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5404084", "body": "Yes, this is a reasonable location. I suppose you'd have to log an admin user in, then change his password to something unusable, and then test that the response doesn't contain the \"Change password\".\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5404084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6198733", "body": "I have merged the commits in Django, but since I've edited one of them, GitHub didn't notice.\n\nThe new version is much more readable, thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6198733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1271058", "body": "There's a syntax error here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1271058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1433467", "body": "I've clarified this in https://github.com/django/django/commit/d2ad3b0f962909c14eab2ffda2fa66740f434c79\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1433467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1491461", "body": "See https://code.djangoproject.com/ticket/18023#comment:9\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1491461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1612254", "body": "It looks like the Windows line ending was automatically scrubbed in this commit.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1612254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1613854", "body": "I just fixed the link. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1613854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1725694", "body": "Fixed in d739d531a1. Good catch!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1725694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1725707", "body": "Nothing was detected because there was nothing to detect! `x` was still created just below, in `hard_coded_bullets_re`.\n\nThe `del x` statement was removed because list comprehension no longer leak variables in the context on Python 3.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1725707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1814974", "body": "It would have been absolutely perfect to switch this example from datetimes to dates while we were there.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1814974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2031266", "body": "Would you mind creating a ticket in Trac to discuss this backwards incompatibility?\n\nIs the fix just `s/list/tuple/`?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2031266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2035274", "body": "We tend to be skeptical of tickets about internal APIs, but you can file one anyway if you have some arguments against this inconsistency.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2035274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2164554", "body": "Fixed in 1e34fd3c03e8f9a9e2b9be35488b8209178a4df0.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2164554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2355130", "body": "?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2355130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2395998", "body": "In this commit, I reverted all the changes made to this file in fd1279a4, including this minor docstring fix. Indeed, I could have kept it.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2395998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2491989", "body": "I saw that you and Anssi came up with a patch in https://code.djangoproject.com/ticket/19652.\n\nFor added safety I committed 9328ef0e84db2559af56d24c40e6b24b74e29a6f.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2491989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2579669", "body": "There are several differences between the PR and what I committed. One (the wrong versionadded directive) had been pointed out in comments. Others (the missing entry in the changelog, settings not in alphabetical order in the docs, wording in the settings, etc.) hadn't. At some point, it's faster to polish the patch myself than to walk you through every change \u2014 all the more since I usually change my mind 10 times in the process. That makes the difference between \"the ticket gets fixed\" and \"the patch languishes until it's outdated\".\n\nI'm missing your point about \"how git works\": git is just a toolkit and each project can use it in whatever way is most appropriate. I applied the diff, fine-tuned it, and credited you in the commit message. We've always done things this way for Django. We're using PRs as \"patches on steroids\" or \"diff viewers with inline commenting\".\n\nTo tell the truth \u2014 I don't care about this feature at all. There's only one reason why I did this commit: I felt bad that your previous PR had gone stale and I thought you'd like seeing the fix in Django. I'm really sorry it offended you.\n\nThat said, in the future, I'm not willing to play the \"merge-as-is or close\" game. It isn't an efficient use of my time. If you prefer that your PRs not be merged rather than be merged with edits, say it, because that isn't our expectation.\n\nI hope you understand!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2579669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2618784", "body": "`text` isn't defined here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2618784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2693875", "body": "This doesn't look correct. `request.META` is the WSGI environ, which must contain native strings (ie. `str` objects) per PEP 3333, for example:\n`request.META['HTTP_ACCEPT_ENCODING'] = str('gzip;q=1.0, identity; q=0.5, *;q=0')`.\n\nSince Python 2 is more lax with unicode handling, and this string contains only ASCII character, the original version should work: it uses `str` under Python 3, and `unicode` that can be converted to `str` under Python 2.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2693875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2725231", "body": "Fixed in 203c17c, thanks for noticing.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2725231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2783065", "body": "This breaks a test that relies on `MANAGERS` not being empty:\n\nhttp://ci.djangoproject.com/job/Django/database=sqlite3,python=python3.2/lastCompletedBuild/testReport/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2783065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3215069", "body": "Does `unique_for_date` work properly on `DateTimeField` when `USE_TZ = True`?\n\nSince I wasn't aware of this feature a few minutes ago, I suspect it doesn't; if so, the docs shouldn't imply it does.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3215069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3218086", "body": "Filed here: https://code.djangoproject.com/ticket/20409\n\n`unique_for_date` is explicitly documented to work with DateTimeField. This commit merely brought that fact to my attention.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3218086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3241799", "body": "`u'...'` is a syntax error under Python 3.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3241799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3257088", "body": "Yes, but we took the pain to remove every instance from Django, I'd like to keep it free from this historical artifact in the future! :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3257088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "davehughes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398581", "body": "Here's a Trac ticket for it:\nhttps://code.djangoproject.com/ticket/18229\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "t0m": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398678", "body": "trac ticket: https://code.djangoproject.com/ticket/18230\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "carljm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398824", "body": "Closing this pull request in favor of #6; there's no reason to convert the README to Markdown when github is just as capable of nicely rendering a README.rst, provided we change the file extension, and all the rest of Django's documentation is in reST.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1400090", "body": "manage.py is intended for use as a command-line script. It's bad behavior for a script to make modifications to the environment as a side-effect of import (explicit is better than implicit). Plus, the big advantage of this commit is that there is no longer any such thing as \"setting up the Django project\", it's nothing more than making sure DJANGO_SETTINGS_MODULE is set, which is a one-liner anyway in a script, so I can't see much advantage in doing it by importing manage.py.\n\nIn any case, if you disagree and want to do it that way, you're free to change manage.py in your projects so it sets DJANGO_SETTINGS_MODULE any time it's imported.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1400090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2689812", "body": "ISTM we can assume basic git competency, we're just outlining the steps that are a bit \"special\" to Django process.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2689812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2699615", "body": "Ok, I need to look into this more. Without this change, on Python 3 it was failing when it tries to feed Py3 `str` objects to hash construction in `learn_cache_key`, saying they needed to be bytes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2699615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2714858", "body": "This change still leaves the 1.5 release notes in master slightly out of sync with the version in the stable/1.5.x branch (i.e. the latter contains a date, there are probably other differences). This is a general problem we have, for instance I don't think the release notes for 1.3.6/1.3.7 exist anywhere except in the stable/1.3.x branch, and similar for 1.4.4/1.4.5. What is our policy on this? Should all release notes be forward-ported to master so that the master docs contain up-to-date versions of the release notes for every past release of Django? If that's what we want, then it'll require a more thorough fix.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2714858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3025664", "body": "@claudep Don't you think this deserves a mention in the backwards-incompatibility release notes? Overriding these error messages is definitely intended as public API, and if I'm not mistaken this change will break anyone who has done that and still has positional keys in their overridden message. (I agree it's still a change we need to make, just think it needs to be in the release notes.)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3025664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3039804", "body": "@claudep Looks pretty good, although it seems like the release note is focused on the wrong aspect. Generally users won't be \"using a dictionary when formatting\" these error messages, because Django is the one that provides the dictionary and does the formatting. So it seems like it would make more sense for the release note to focus on the construction of custom error message placeholders; for instance \"You must use the appropriate named placeholders (e.g. %(max)s) rather than positional placeholders (e.g. %s) in custom error messages for DecimalField and ModelMultipleChoiceField; see the corresponding field documentation etc.\" Does that make sense, or am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3039804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3060319", "body": "@prestontimmons found this failing test in his (awesome!) work on the test-discovery branch. I think there may be a few other tests that the discovery branch is finding that our current runner doesn't, but this was the only one that was failing. In any case, I'm not too concerned about tracking them all down and adding imports for them in master, since in the discovery branch all these imports go away anyway.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3060319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "adrianholovaty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5398881", "body": "Thanks, guys. I've just renamed README to README.rst so that GitHub formats it in a nicer way. Looks like there's still some formatting weirdness happening, which we can take care of.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5398937", "body": "Thanks, yuvadm. I actually did this in a separate commit before seeing your pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5398937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5399040", "body": "Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5400221", "body": "Thanks, Jason!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5400514", "body": "Thanks, Matthew!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402776", "body": "Thanks, Aviral.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5407498", "body": "I'm closing this particular pull request, as Dave and I have discussed on Trac that a different approach would be better.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5407498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5433299", "body": "Thanks, and congrats on joining the AUTHORS file. :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5433299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5433313", "body": "Yeah, what Alex said. I think it's a good idea to add this warning, but we should add a little more detail about how many sessions constitutes \"a lot\" (even a ballpark figure). Plus, what should they do if they have a lot? Delete them partially somehow?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5433313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5433320", "body": "(I'm closing this for the sake of managing pull requests. Feel free to reopen if you rewrite.)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5433320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5433346", "body": "Hey, this is looking good. I have one question, though -- should the preventDefault calls perhaps be at the _start_ of the event handler instead of the end? That way, if there's a runtime error in the handler, the link won't get followed (even though its href is \"#\").\n\nSee the Stack Overflow answer by Jeff Poulton here for a better explanation: http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false\n\nWorth changing?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5433346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5433352", "body": "Thanks for your contribution, Lee, and welcome to AUTHORS!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5433352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5743348", "body": "Thanks, techtonik!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5743348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5795051", "body": "Thanks, Stratos.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5795051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5795146", "body": "Thanks for this cleanup, @tswicegood!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5795146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5795300", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5795300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5932630", "body": "This looks fine, except for the change to the first sentence. It should indeed be \"Arguments passed to a view\". Can you fix and resubmit the request?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5932630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5932769", "body": "I'm ambivalent about this change, but if we decide to accept it, we'd have to change the docs as well (which this current patch doesn't address).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5932769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6109208", "body": "Thanks, Daniel!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6109208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6180728", "body": "Thanks, Thomas. I rewrote this a fair bit and committed it.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6180728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6183689", "body": "Hey, can you squash those two commits into a single commit and open a new pull request? We're trying to keep pull requests self-contained in a single commit where possible. Sorry for making you jump through an extra hoop.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6183689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6184126", "body": "I'd really prefer not to introduce another setting. Is there any other way to accomplish this?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6184126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6206361", "body": "Yeah, I'd say just hard-code it as HttpOnly. This would make the patch significantly smaller. :-) I'll close this one, but could you open a new pull request with a simpler patch?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6206361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272034", "body": "dswarbrick: Ah, interesting -- I can't reproduce but take your word for it. Do you know of another way of getting the hash of the current Git checkout? I'd love to avoid that subprocess call as well.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1272229", "body": "I'm on Python 2.7.1.\n\nI would _love_ to see a pure Python solution. It's gotta be possible somehow. Are you willing to do the research/work?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1277073", "body": "@dswarbrick I think 80 lines of code is overkill for the task at hand. :-/ But go ahead and paste it somewhere so we might be able to use it, or at least learn from it, in some way.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1295991", "body": "Was this line intended to be checked in? It doesn't have anything to do with context managers.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1295991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1296013", "body": "I think it definitely needs a comment next to it in the source code,\nto explain what that thing is. I'm fine with leaving it in here as\nlong as you add another commit with a comment. (Then feel free to\nclose the ticket!)\n\nOn Sat, May 5, 2012 at 9:35 AM, Claude Paroz\nreply@reply.github.com\nwrote:\n\n> No, sorry. This was intended to be checked in as a different commit as a fix for #17393. Good catch! Do you think that reverting it and recommit separately is useful, or just mark #17393 as fixed would be enough?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/commit/865cd35c9b357e20994f6c6a51f2ae000ba0a3ee#commitcomment-1296009\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1296013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1996399", "body": "No reason it wasn't there already, other than perhaps most of us core devs have very small numbers of groups per user. :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1996399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/3088288", "body": "Good call! I just committed that in 6bccbc0.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3088288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5399229", "body": "Sure thing, glad to help.  Just made the change.\n\nOn 4/28/2012 2:38 PM, Adrian Holovaty wrote:\n\n> Thanks, notcarl. If you just make one tiny formatting change to this, I'll commit it. Specifically, `.get(c,c)` should have a space after the comma.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/2#issuecomment-5399040\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5399229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6199354", "body": "Added changelog entry to 1.5.txt.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6199354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akaariai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5400781", "body": "I will try to work on this ticket/pull request - limited time, unlimited amount of work and all that.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5400781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402213", "body": "I am still unsure how I should commit code to github - so here is another pull request fixing Oracle specific stuff.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402452", "body": "All tests haven't passed in a while on Oracle. I'm working on fixes...\n\nAt least one more test passes with the patch applied (test_runner tests, related to character field primary keys having null=True). I haven't done a comparison between full test suite with and without this patch as it takes a lot of time to do that. I can leave the full test suite running for the night if needed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402498", "body": "Worth a test at least (if not already tested somewhere). It seems this could cause some weird behavior there. Should I close this pull request while I check this? I am not sure how long it will take to check and possibly correct errors caused by this...\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5404127", "body": "I have investigated the queryset usage of field.null issue a little, and it seems clear that the change could result in some queries breaking when using Oracle. It is a bit scary to use Oracle's view of if the field is nullable when constructing the query because a later .using() clause could then lead to problems.\n\nLuckily it seems that both of the field.null uses in sql/query.py will work correctly if field.null is \"guessed\" to true even if it is not true for the backend. So, I am going to update the patch so that sql/query.py will treat fields where (empty strings are allowed and connection is Oracle) as nullable. To me it seems in the worst case this generates slightly less performant queries when a query is generated using Oracle, but executed using some other backend - in other words, we really don't need to care about this issue too much...\n\nI ran the full test suite during the night, before there were 3 failures, with patch only two.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5404127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5405019", "body": "I pushed the patch manually by git push - no need for this pull request any more.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5405019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5405820", "body": "I added some tests to check that character fields are handled correctly in query.py. The field.null handling is done using is_nullable(field). It has to use the DEFAULT_DB_ALIAS when deciding if the field should be treated as nullable as the sql.QuerySet doesn't know which connection is used. The field.null handling is thus identical to pre-patch situation. That is, slightly broken in weird corner cases. \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5405820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5406397", "body": "I pushed this manually -- closing.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5406397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5415780", "body": "I am closing this as pull #25 (make get_indexes() consistent across all backends) has this pull content included.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5415780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5434033", "body": "Pulled this in manually -- closing.\n(I wonder if creating a pull request and then pulling in the commit manually is a good idea. I use this as a review tool, and IMHO this works well, maybe I should just use the merge button?)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5434033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5434503", "body": "A couple of comments (apart of the trivial WS error).\n- Is a new file needed for this: the function is used only in the views.py so maybe it should stay there.\n- I am not sure if we actually do want this - I don't know the code here too well. If that function is something that should stay strictly internal, then splitting it out for reuse isn't wise...\n- Nitpick: I think we are going to aim for at maximum 50 char summary lines in the commit message. Not that it is enforced at all currently, and I don't know how strong the consensus is on this.\n\nSo, I am not going to merge this. Somebody with more knowledge should check if that function should be reusable.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5434503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5437214", "body": "I sent you a pull request for some updates into your patch, nothing big. I hope you can squash my update and your patch to one commit and update your branch to current Django head.\n\nIf you wish I can also do this myself by closing this pull request and opening another one from my repository.\n\nTo me it seems this feature is close to commit-ready. I think this one is big enough to require a review in Trac.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5437214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5437292", "body": "There is still the problem that you need to update your branch to current django/django head. And I would hope you could form a single patch/commit from the above.\n\nMaybe the easiest way forward is to create a patch to Trac, then we could close this pull request and get a review for the patch in Trac, then again a new pull request and hopefully finally merged to django head.\n\nI am not sure what is the best way forward, this git stuff is new to me, too...\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5437292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5667739", "body": "I created a ticket for .only()/.defer() interaction, see #18306.\n\nI missed your latest changes and instead did the final cleanup myself - concurrent working has its downsides.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5667739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5674568", "body": "cramm raised a good point in #django-dev - the issue is described as MySQL specific, but it is actually about \"update_can_self_select\". MySQL just happens to be the only core database backend with that problem. I will update the commit message.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5674568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5785968", "body": "I will close this pull request for now, until the issues raised in #18306 are resolved.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5785968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5824677", "body": "Three comments:\n- What is the use of the \"enabled\" flag in the enable_identity_inserts manager? Is there some use case where calling the disable part would be wrong depending on the return value of the enable step?\n- The naming: identity_insert_enabled -> autofield_inserts_enabled: Django does not know of identity, it deals with autofields (other references to identity should be changed to identity, too).\n- Add a little more comments to enable_identity_insert, telling that no core backend needs these methods, but for example mssql needs them.\n\nSo, seems good apart of the usual final nitpicking...\n\nBTW it seems I will be real busy for the next couple of weeks - I intend to work on all of the MSSQL patches, but I can't do that now. Of course, if somebody else wants to commit these I have no objections to that...\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5824677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5854426", "body": "Pulled in manually in d5c7f9efc3702888b556cbf932116421b464e8b8\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5854426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5854509", "body": "Not directly related to this pull, but how are we going to guarantee that we do not introduce additional unicode literals (or other py3 incompatible changes) in the future. django-developers question maybe?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5854509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5856584", "body": "I splitted the patches into two for easier review.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5856584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5910150", "body": "Pushed in manually in 8c72aa237918e31a525022f72b22cac75451af86\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5910150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5915317", "body": "At this point I think it would be best to first rework the ORM internals to better shape. This should include SQLExpression, SQLEvaluator and the django.utils.Tree. I definitely think there is a lot of potential in your patch, but the existing implementation has just gotten too messy. I just can't wrap my head around all the complexities of the current implementation, and thus I don't feel comfortable adding more possible complexities.\n\nNote that my rejection is not about your patch, it's about the existing stuff in Django needing cleanup first. The idea of using SQLExpressions in aggregates is definitely a good idea. Your work looked good to me.\n\nI will close this pull request for now. I would hope to get the SQLExpression into such a state that basing the aggregate on expression should be much more straightforward to do. If it turns out that the implementation is already as simple as it will get, then lets reopen this pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5915317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5947261", "body": "I updated the patch, it handles now correctly the two different types of empty nodes, those with 0 non-empty children which should be just skipped in as_sql(), and those empty nodes which match nothing.\n\nThe logic for skipping the non-empty nodes should be removed later on - the where node should be pruned of the empty nodes, or they should not be added at all to the node. A where \"\" condition should match everything, but because of the way .exclude(Q()) is handled it actually must match everything both when negated or not which causes the complication.\n\nI am still planning to commit this patch soon.\n\nFor the curious this is one part of the work I am doing for cleaning up the query.add_q() and django/utils/tree.py cleanup.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5947261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5954144", "body": "Pushed in manually\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5954144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5955655", "body": "pulled in manually\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5955655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5955661", "body": "pulled in manually\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5955661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5955664", "body": "pulled in manually\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5955664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6042835", "body": "I am going to wait with this one - I am not sure how well other parts of the code handles autocommit mode. The code of course should handle it, but it doesn't hurt to actually check this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6042835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6071213", "body": "As said in the ticket I think this change makes sense - there are situations where you want the proxy model contenttype, and there are situations when you want the concrete model contenttype. However, the kwarg of \"for_concrete_model\" doesn't feel right. Any ideas for improving that?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6071213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6071250", "body": "I am going to wait until djangocon is done in the hope there will be some reviews and/or decisions about how to go forward with ORM refactoring.\n\nFor now, see also ticket #17000.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6071250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6162476", "body": "I am -1 on this pull request. I don't believe the benefit for average Django user will be enough to counter-balance the need for maintenance of those indexes. Whenever an user logs in all three new indexes need to be updated.\n\nConvincing evidence that most Django users would benefit from those indexes in typical workloads is needed. If there are some queries typical Django applications run and which benefit from those indexes, then reopen this pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6162476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6200956", "body": "I am closing this pull request, as the\n\n``` python\n  Species.objects.select_related(depth=1).select_related('genus__family__order')\n```\n\ncase needs some more consideration (more details in the ticket). Please reopen when this issue is dealt with.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6200956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6202217", "body": "I have added another patch into the ticket. I will close this PR until we see which way to take here. I can take this PR forward without any further editing by manfre if we choose this route.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6202217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6578699", "body": "Committed manually in b6c356b7bb97f3d6d4831b31e67868313bbbc090 with minor merge-conflicts resolved.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6578699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6578701", "body": "Committed manually in b6c356b7bb97f3d6d4831b31e67868313bbbc090 with minor merge-conflicts resolved.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6578701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6693453", "body": "Pulled in manually in 2b9fb2e6443c04e4415b17083d727bd80047b6e5\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6693453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6693845", "body": "Committed with some final polishing in bd283aa844b04651b7c8b4e85f48c6dced1678f0.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6693845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6694930", "body": "Committed with some final polish in commits f572ee0c65ec5eac9edb0cb3e35c96ec86d89ffb and da573fbb4172fb962c9f021fc0c03cf91b13e746\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6694930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1526845", "body": "For some reason moving the skips to decorators will skip the tests in all cases.\n\nThe diff is this\n\n```\n+@skipUnless(connection.vendor == 'postgresql',\n+            \"This test only valid for PostgreSQL\")\n+@skipUnlessDBFeature('supports_transactions')\n class TestPostgresAutocommit(TransactionTestCase):\n     \"\"\"\n     Tests to make sure psycopg2's autocommit mode is restored after entering\n@@ -225,11 +226,6 @@ class TestPostgresAutocommit(TransactionTestCase):\n     def tearDown(self):\n         connections[DEFAULT_DB_ALIAS] = self._old_backend\n\n-TestPostgresAutocommit = skipUnless(connection.vendor == 'postgresql',\n-    \"This test only valid for PostgreSQL\")(TestPostgresAutocommit)\n-TestPostgresAutoCommit = skipUnlessDBFeature('supports_transactions')(\n-    TestPostgresAutocommit)\n```\n\nWith the change when running under PostgreSQL:\nRan 11 tests in 4.925s\nWith master:\nRan 14 tests in 6.307s\n\nThe problem seems to be the check for transaction_support. Luckily this isn't needed at all, AFAICS postgresql always supports transactions.\n\nSo, maybe I should remove the transaction_support check, move the vendor check to decorator and move the tearDown directly below setUp?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1526845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1531714", "body": "I committed the above changes in 925a6936b94c74b2e67d90da1fcf2e19efc335cf.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1531714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1531738", "body": "I ended up rewording the comment in ab7f0710584a3cbb3737e9a7fd8e3fd21765e594.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1531738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2063287", "body": "That is not comment - it is the reason why this test was skipped - we skipped this test because No need to check...\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2063287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2221983", "body": "Sorry. I wasn't actually aware that the \"s\" version was deprecated. Will fix.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2221983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2320582", "body": "No reason, fixed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2320582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2465943", "body": "How did I miss this one...\n\nWill fix.\n\nEDIT: Technically, no it wont break anything as the **str** isn't ever called, still a mistake of course. And that is the reason I missed this, this does run on py3 just fine.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2465943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2645126", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2645126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5402418", "body": "Do all tests still pass on Oracle?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402470", "body": "Ok, FWIW my concern was whether this was needed so the correct INNER vs. OUTER JOINs were generated.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5402506", "body": "I think it's fine to leave the pull request open.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5402506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5405827", "body": "Ok now I remember this, unfortunately your analysis exactly matches what mine was.  That is: this decision should be made later, but that's a ton of work.  Patch LGTM feel free to commit!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5405827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5411519", "body": "This could use a test, and probably a note in the documentation.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5411519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5427829", "body": "Besides that one tiny comment LGTM, feel free to merge.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5427829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5430903", "body": "This isn't a very useful warning IMO, it doesn't give the user any idea of how many sessions are a lot, or what they should do under those circumstances.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5430903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/20583178", "body": "Closed by 6bdc47f75ca31d607653eebee3a144631df46aae.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/20583178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/11724692", "body": "In the future, before sending a pull request, please consider whether it's adding any value.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/11724692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/12166178", "body": "This also needs tests.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/12166178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/12173690", "body": "Sorry caused a merge conflict here :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/12173690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/14337908", "body": "#873 supersedes this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/14337908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/14330865", "body": "This totally subsumes #857 right?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/14330865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/15468406", "body": "At least stick it in ``, so that it shows up in the code formatting.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/15468406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/17967977", "body": "Yes, another PR would be helpful, thanks\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/17967977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/17969251", "body": "Thanks for catching this, sorry I suck and didn't catch it in the last PR.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/17969251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/20579881", "body": "Merged in 626fa28878b1167d20d2419d68d561297390510a\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/20579881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/18891178", "body": "How much faster?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/18891178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/18891241", "body": "I have to say this whole thing scares me quite a bit. Why isn't `@overide_settings(INSTALLED_APPS=['app1', 'app2'])` sufficient? So much global state :(\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/18891241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/20550385", "body": "Now that Djanog is 100% WSGI, is there any reason to have separate `HttpRequest` and `WSGIRequest` classes?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/20550385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/24004020", "body": "I'm pretty sure this is correct, besides the stylistic issues it looks right to me.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/24004020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/24122124", "body": "Nice catch, thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/24122124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/26680689", "body": "Is there a reason we're not looking at a package like https://pypi.python.org/pypi/watchdog (for example, not sure if this one is good) which also handles things like OS X's fsevents?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/26680689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/26680804", "body": "So the assumption is that users won't install pyinotify for django, they'll\njust have it around?\n\nOn Sun, Oct 20, 2013 at 12:43 PM, Unai Zalakain notifications@github.comwrote:\n\n> One downside of using watchdog could be that having pyinotify installed is\n> fairly more common than having watchdog.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/1731#issuecomment-26680788\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/26680804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/26298166", "body": "I don't have a particular opinion on this idea, but for it to land it needs tests and docs. Also a ticket so we don't lose track of it!\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/26298166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/26598364", "body": "I prefer the **all** approach personally\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/26598364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27634377", "body": "There's a merge conflict on this, can you merge master in?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27634377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27635659", "body": "Besides that one note, this looks merge ready,.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27635659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27635896", "body": "Thanks for contributing!\n\nOn Sat, Nov 2, 2013 at 5:21 PM, Ray Ashman Jr. notifications@github.comwrote:\n\n> Sorry, I'd checked out one commit too far and reverted changes to\n> _doctest.py that had been merged in to the last commit (coagulant@020a11fhttps://github.com/coagulant/django/commit/020a11fc3f4b9092fd8e20d148693c64aefa059f\n> ).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/1854#issuecomment-27635887\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27635896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27654972", "body": "What's that quote from?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27654972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28447052", "body": "This is the wrong approach to solving this problem. It's going to be complex, at best, to verify that this caching scheme doesn't expose a users password to an attacker in any way. The correct solution is to use API tokens in a case like this, rather than having the user provide their password on each request. I'd like to close this, but I'll let others chime in first.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28447052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28447894", "body": "An API token allows you to avoid the computation, because it isn't a\nderived key from the users password.\n\nOn Wed, Nov 13, 2013 at 4:13 PM, Erik van Zijst notifications@github.comwrote:\n\n> API tokens are like Basic Auth credentials. They are sent across the wire\n> on every request and need to be checked on the server. I don't see how that\n> would be more secure?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/1918#issuecomment-28447760\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28447894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28448434", "body": "Sure, because a token doesn't give unlimited access the way a password\ndoes, typically a token only gives you API request access, which doesn't\nlet an attacker lock the account owner out. Further, because tokens can be\nre-issues, in the event of a compromise, all tokens can just be removed.\n\nOn Wed, Nov 13, 2013 at 4:20 PM, Erik van Zijst notifications@github.comwrote:\n\n> That depends how its's stored. If it's stored in plain text in a database,\n> then yes it'd be fast. But would you store a token in plain text while\n> bcrypting the password?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/1918#issuecomment-28448174\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28448434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28722049", "body": "Thanks for working on this! Before this can land it needs a test though.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28722049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28815385", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28815385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/29143789", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/29143789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/29143847", "body": "I can take no credit for the feature :-)\n\nOn Sat, Nov 23, 2013 at 2:53 PM, Thomas Orozco notifications@github.comwrote:\n\n> Thanks for merging \u2014 This new feature looks awesome, by the way!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/1980#issuecomment-29143835\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/29143847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/30096184", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/30096184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/29581429", "body": "This looks great to me, going to wait for another person to take a look because I haven't touched this code that much.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/29581429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/29586379", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/29586379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/31357511", "body": "I haven't formed an opinion on this as a whole, but it's worth noting that it's pretty alienating to OS X users -- who by default have only Python 2, and who don't have a package manager out of the box. I think we need to address this before this can land.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/31357511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/31357994", "body": "Not sure, as a beginner I always just used the Python I had -- someone\nwho's done more teaching might want to weigh in on what their students\nusually use?\n\nOn Mon, Dec 30, 2013 at 9:47 AM, Aymeric Augustin\nnotifications@github.comwrote:\n\n> @alex https://github.com/alex http://www.python.org/download/ has\n> installers for OS X. They should be good enough for beginners, shouldn't\n> they?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/2129#issuecomment-31357956\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/31357994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/31416203", "body": "Seconds vs hours ;)\n\nOn Tue, Dec 31, 2013 at 4:37 PM, Tim Graham notifications@github.comwrote:\n\n> 50 thousand is less than 1 million.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/2135#issuecomment-31416195\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/31416203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/33889456", "body": "Has this actually been measured to produce a speedup?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/33889456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/33889465", "body": "Also, this changes the semantics, subclasses of those types will no longer be serialized.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/33889465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/38712971", "body": "I'd prefer these to live in the `django.db.backends.postgresql_psycopg2` namespace than in `contrib`, but for the most part this looks awesome -- thanks for working on this!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/38712971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/39279673", "body": "Just wanted to say I love this! One note: you seem to have standardized on `tuple` everywhere, were I to do this, I'd probably have used `list` everywhere, I think we should make a strong decision now: are we only supporting `tuple`, or do we want to support both (in which case some of the places that we're combining two with `+` need to updated).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/39279673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/39279679", "body": "Thanks so much for working on this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/39279679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/43650352", "body": "Thanks for taking the time to do this!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/43650352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/45128368", "body": "This definitely needs docs before this is landable, this is introducing a totally new convention.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/45128368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44183623", "body": "I think this is ok. Should we leave a comment, or change the impl on py3k so we don't have these branches?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44183623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44183642", "body": "Err, specifically so that some day in the mystical future when we drop python2, the `force_bytes` calls go away.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44183642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44501976", "body": "Donald and I thought about it a bunch and couldn't come up with an attack,\nFWIW\nOn May 28, 2014 9:56 PM, \"Paul McMillan\" notifications@github.com wrote:\n\n> I could imagine some extreme edge cases where force_bytes might produce\n> timing differences, but I think this is fine.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/2716#issuecomment-44494452\n> .\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44501976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/53434969", "body": "cc: @dstufft \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/53434969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/53434991", "body": "cc: @ubernostrum \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/53434991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/67255208", "body": "You can see the misrendering at https://docs.djangoproject.com/en/dev/releases/security/#december-10-2012-no-cve-2\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/67255208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/67255976", "body": "Cheers, thanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/67255976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/73423395", "body": "This issue was discovered by @fijal, and he's seen this impact macrobenchmarks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/73423395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/73423532", "body": "@fijal you have some numbers for it with this patch right? can you poste them here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/73423532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/73461015", "body": "Ooof, the tests rely on reevaluation, where `SimpleLazyObject` caches the result. Closing for now since this is DEBUG only.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/73461015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/295751368", "body": "Thanks for working on this!", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/295751368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/296215553", "body": "This probably deserves a mention in the release notes, I don't remember how we maintain those these days.", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/296215553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5828964", "body": "I started reviewing this patch by hand, but I realized it would take about 50 hours, so if all tests pass it looks fine to me.  As soon as we have the test suite running (even if ther'es a bunch of failures) we should get a buildbot going.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5828964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5829464", "body": "Right I was just thinking outloud, for the future.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5829464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5854863", "body": "Once we can run tests on py3k that will let us know, until then we just have to be careful.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5854863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6044220", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6044220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1582028", "body": "Well, that's emberassing.  Fixed in the next commit.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1582028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1720850", "body": "Yes, find_module sometimes returns `None` for the file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1720850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1751230", "body": "You can just do `super(SimpleTemplateResponse, self).content = value` AFAIK.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1751230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2168540", "body": "`(2, 6)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2168540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2644960", "body": "Should be deleted?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2644960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/749018", "body": "It's generally the style of the Django tests to do:\n\n```\nself.assertFalse(..., msg=\"foo\")\n```\n\nrather than have the if statement (there may even be an assertNotContains or similar, that'd be even more optimal)..\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/749019", "body": "No need to save the user here, we only needed to test the one assert.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/749024", "body": "Test cases are isolated, objects created in one aren't visible to another.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/749031", "body": "It doesn't matter, the semantics are that the changes you make aren't visible to other tests.  Remove these lines and try running all the tests, you'll see!\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/749031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/753279", "body": "This list should be alphabetized, if you can put your name in the right place I'll go ahead an merge it in.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/753279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/753288", "body": "Quote is misaligned by one character.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/753288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/768828", "body": "You don't need this, it's just `frozenset`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/768828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/870528", "body": "Is exec actually used anywhere besides in this file?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/870528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/870531", "body": "This section should probably note that using the various variables in the py3 module is preferrable to branching on `if PY3`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/870531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/873377", "body": "If we don't actually need exec for django why don't we simplify this implementation and give it some name so it won't be public (e.g. `_exec`).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/873377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1180400", "body": "`False` shouldn't be the default, use `None` instead.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1180400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1180406", "body": "After `interface` is `None` by default you can skip this check.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1180406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307510", "body": "Can you reformat this as:\n\n``` rest\n.. note::\n    <content>\n```\n\nAlso, \"a model named `Author`\"\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307511", "body": "This text is a little confusing, I don't have any specific suggestions to improve it though :/  Also applies to the similar text below.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307512", "body": "Same thing about note formatting as above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307518", "body": "Should be `.. classmethod::`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1307519", "body": "No extra space.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1307519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1376262", "body": "This and the subsequent ones can actually use `self.assertQuerysetEqual` (https://docs.djangoproject.com/en/1.4/topics/testing/#django.test.TestCase.assertQuerysetEqual)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1376262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1554977", "body": "These links are wrong, the methods are on `QuerySet`, not `Model`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1554977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1613733", "body": "Use `get_field_by_name('username')[0]`, `get_field` is O(n) whereas `get_field_by_name` is O(1). No joke.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1613733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1613737", "body": "+1 @jacobian \n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1613737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624264", "body": "Drop the parens (sorry, style nit of mine)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624267", "body": "Should this really be a default in the base?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624273", "body": "This probably shouldn't block this patch, but I'm starting to think it'd be cool, and seriously help readability if we replaced all these SQL strings with unmanaged models, and just used the ORM for querying...\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624284", "body": "Constraints and indexes really aren't the same things, does it really make sense to have them in the same method?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624293", "body": "Is SchemaEditor the right name for this? most of the other backend things have less action oriented names.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624787", "body": "Triple quotes for all docstrings please.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624792", "body": "Why does this have its own logging, instead of the usual query logging?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624804", "body": "This seems like it should be the caller's responsibility (same applies to create_model)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624819", "body": "I don't see **primary** mentioned anywhere else, at the minimum this needs a comment as to what that magic string is.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624828", "body": "This whole method scares me, and not in a good way. We need to find a new API for this to work, because monkey patching all this state and then cleaning up is a mess, and very very fragile.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624843", "body": "At a minimum this is the wrong place for this: objects shouldn't have their own methods for monkey patching their state. I'm seriously skeptical of whether this should exist at all, it's too much of a mess and too fragile.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624846", "body": "Just use `contextlib.contextmanager`, you'll be much happier.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624850", "body": "This should be `TransactionTestCase` right?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624855", "body": "These methods seem to duplicate a lot of the actual implementation, which definitely isn't right.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624862", "body": "Please drop all of these `self.fail` calls, they don't really add anything (a comment is much more useful) and they obscure tracebacks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1629404", "body": "So, API idea:\n\n``` python\nclass Meta:\n    auto_register = False\n```\n\ncauses the model not to go in the default `AppCache`, then we can have a `cache.load_models(*classes)` as @akaariai suggests. This seems sufficient to make this patch work?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1629404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666844", "body": "Yes, would definitely have to be a gradual migration (might be a good impetus to make the ORM more featureful in any event).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666849", "body": "Should this be named `begin`, since you're using SQL terminology elsewhere anyways.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666860", "body": "Calling a callable default in order to set a table-wide default, even if it's temporary, seems very wrong.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666863", "body": "Please add to the comment that the reason it doesn't delete by name is that it uses introspection.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666873", "body": "This doesn't seem right, you shouldn't be creating a new cache and then changing the global one. You should create the new cache, create a model with some sort of \"dont add to cache\" flag, and then explicitly adding it to the new cache.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666905", "body": "This seems like a poor idea, and probably should not exist.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668082", "body": "This comment is pretty useless\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668084", "body": "Use `or` here, not `any`, same for all the other places.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668088", "body": "This is mutating the external primary sql match functions, that shouldn't be necessary.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668089", "body": "This line spacing is really awkward, please don't make unrelated changes like this, especially when they make stuff uglier.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668091", "body": "Whatever manager is needs to be documented, or it shouldn't be a parameter on a public API.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668092", "body": "Either it's possible or it's not, if you can write a test case for it to happen it's possible and this comment is confusing, if not this condition should be removed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668098", "body": "This function should return some values to be checke by its caller, not set things on self.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668099", "body": "Drop the parens and put this all on one line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668100", "body": "`return_val = getattr(self.lookup_function, 'none_is_true', False)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668101", "body": "I can't understand this comment. If I can't I doubt anyone else will be able to.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1709521", "body": "this could be simlified to `any(link != from_field for link in model._meta.concrete_model._meta.parents.values())` I believe.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1709521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1709528", "body": "You can break here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1709528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1709538", "body": "Why not just `return False` immediately whenever any of these conditions becomes true.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1709538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2025622", "body": "`basestring` isn't correct on python3, you want to use `django.utils.six.string_types`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2025622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2442461", "body": "This should be returning the default value.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2442461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2442479", "body": "Why is this checking by name?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2442479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624273", "body": "This probably shouldn't block this patch, but I'm starting to think it'd be cool, and seriously help readability if we replaced all these SQL strings with unmanaged models, and just used the ORM for querying...\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624284", "body": "Constraints and indexes really aren't the same things, does it really make sense to have them in the same method?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624293", "body": "Is SchemaEditor the right name for this? most of the other backend things have less action oriented names.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624787", "body": "Triple quotes for all docstrings please.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624792", "body": "Why does this have its own logging, instead of the usual query logging?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624804", "body": "This seems like it should be the caller's responsibility (same applies to create_model)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624819", "body": "I don't see **primary** mentioned anywhere else, at the minimum this needs a comment as to what that magic string is.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624828", "body": "This whole method scares me, and not in a good way. We need to find a new API for this to work, because monkey patching all this state and then cleaning up is a mess, and very very fragile.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624843", "body": "At a minimum this is the wrong place for this: objects shouldn't have their own methods for monkey patching their state. I'm seriously skeptical of whether this should exist at all, it's too much of a mess and too fragile.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624846", "body": "Just use `contextlib.contextmanager`, you'll be much happier.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624850", "body": "This should be `TransactionTestCase` right?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624855", "body": "These methods seem to duplicate a lot of the actual implementation, which definitely isn't right.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1624862", "body": "Please drop all of these `self.fail` calls, they don't really add anything (a comment is much more useful) and they obscure tracebacks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1624862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1629404", "body": "So, API idea:\n\n``` python\nclass Meta:\n    auto_register = False\n```\n\ncauses the model not to go in the default `AppCache`, then we can have a `cache.load_models(*classes)` as @akaariai suggests. This seems sufficient to make this patch work?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1629404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666844", "body": "Yes, would definitely have to be a gradual migration (might be a good impetus to make the ORM more featureful in any event).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666849", "body": "Should this be named `begin`, since you're using SQL terminology elsewhere anyways.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666860", "body": "Calling a callable default in order to set a table-wide default, even if it's temporary, seems very wrong.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666863", "body": "Please add to the comment that the reason it doesn't delete by name is that it uses introspection.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666873", "body": "This doesn't seem right, you shouldn't be creating a new cache and then changing the global one. You should create the new cache, create a model with some sort of \"dont add to cache\" flag, and then explicitly adding it to the new cache.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1666905", "body": "This seems like a poor idea, and probably should not exist.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1666905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668082", "body": "This comment is pretty useless\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668084", "body": "Use `or` here, not `any`, same for all the other places.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668088", "body": "This is mutating the external primary sql match functions, that shouldn't be necessary.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668089", "body": "This line spacing is really awkward, please don't make unrelated changes like this, especially when they make stuff uglier.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668091", "body": "Whatever manager is needs to be documented, or it shouldn't be a parameter on a public API.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668092", "body": "Either it's possible or it's not, if you can write a test case for it to happen it's possible and this comment is confusing, if not this condition should be removed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668098", "body": "This function should return some values to be checke by its caller, not set things on self.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668099", "body": "Drop the parens and put this all on one line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668100", "body": "`return_val = getattr(self.lookup_function, 'none_is_true', False)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1668101", "body": "I can't understand this comment. If I can't I doubt anyone else will be able to.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1668101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1709521", "body": "this could be simlified to `any(link != from_field for link in model._meta.concrete_model._meta.parents.values())` I believe.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1709521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1709528", "body": "You can break here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1709528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1709538", "body": "Why not just `return False` immediately whenever any of these conditions becomes true.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1709538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2025622", "body": "`basestring` isn't correct on python3, you want to use `django.utils.six.string_types`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2025622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2442461", "body": "This should be returning the default value.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2442461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2442479", "body": "Why is this checking by name?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2442479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2442482", "body": "This looks like it's the same for every backend, why is this not just in the field?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2442482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2624809", "body": "This is sending a post_delete signal on effectively a random instance instance, whatever happens to be the last instance in the batch.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2624809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2625248", "body": "This isn't alphabetized correctly :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2625248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2625263", "body": "This should be in a finally block so it gets disonnected even if it fails\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2625263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2626732", "body": "I'd prefer it if this function actually did something something and then the test function made an assertion about it after `r.delete()`, as is if this function weren't called for some reason the etst would still pass.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2626732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3033081", "body": "Please close your cursor when you're done.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3033081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3049961", "body": "It makes me sad to have this in every single backend, is there any better way to factor this out?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3049961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3049971", "body": "This makes me sad, there should be an API for this, rather than just asking uses to assign random attributes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3049971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3049981", "body": "Do we only need to abort if connection is dirty?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3049981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3051430", "body": "I don't think we need a DB prefix for something in the `DATABASES` dictionary, otherwise sounds good.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3051430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3107474", "body": "SQLite let's us define our own functions (we do this for datetime stuff) any reason not to do that here as well?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3107474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3215333", "body": "I don't think this is needed, if you read the docstring you can see this method only exists for backwards compatibility, if anything it can probably be deleted by now.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3215333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3216360", "body": "Please create an `ensure_connection()` method or something, this is raelly ugly.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3216360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3308647", "body": "I thought this started at `PendingDeprecationWarning` (or did we go with an accelerated schedule for this?)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3308647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3310187", "body": "Pretty sure that `:ref.` shoudl be `:ref:`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3310187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3533500", "body": "Stray ` `before`)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3533500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3533512", "body": "Use class reference reST syntax here (and above)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3533512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3649299", "body": "This is a small semantic change (and probably more correct IMO). Previous all the messages were returned, even if some failed to send.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3649299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4138106", "body": "Can we catch something more precise here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4138106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4146638", "body": "This doesn't work, `pop` will be called as soon as this function returns which is immediately after the generator from `_stream` is created, not when it's finished iteration.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4146638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4288314", "body": "Django doesn't use `__author__` markers, you can add yourself to the `AUTHORS` file if you aren't already in it though!\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4288314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4290112", "body": "In this, and all cases, if both are allowed this really should include both.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4290112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4290633", "body": "This should probably pass `update_fields=list(defaults)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4290633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4290634", "body": "If this returns an object from `get()` it needs to do the update path I think.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4290634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4290636", "body": "Please use a more descriptive name than this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4290636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4291149", "body": "I think this should probably be an `isinstance` check, and it should return `NotImplemented` in that case.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4291149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4291182", "body": "I'm not talking about a `NotImplementedError` exception, but rather the singleton `NotImplemented` for use in comparisons: http://stackoverflow.com/questions/1062096/python-notimplemented-constant\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4291182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4298725", "body": "I know there was a already a conversation about this, but I'm _strongly_ opposed to using settings for these. They should be options on the JSONResponse constructor, there's no need to bring new global state into this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4298725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4298744", "body": "Rather than using `dumps`, you can do the super first, and then `json.dump(self, data, ...)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4298744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4364239", "body": "Please add a comment about what version this fileback is from.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4364239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4364253", "body": "This is not guarnteed to write all bytes, it should handle that case.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4364253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4831805", "body": "I'm not sure I understand the example `\"to\" in \"refactor\"` can you try rewording it? Also, if you could add a line break at ~80 columns, that'd be awesome!\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4831805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5052170", "body": "Is there any reason not to implement this using `@contextlib.contextmanager`?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5052170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5403041", "body": "Since you're moving this around: there's no a ahelper for this nonsense logic in django.utils.module_loading, please use it :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5403041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5403078", "body": "Is this even a thing anymore?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5403078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5403143", "body": "Please order the imports alpahebtically and put a newline between stdlib and django.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5403143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5570391", "body": "This line is under indented.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5570391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5797682", "body": "You can write these as `__len__ = new_method_proxy(len)` and `__contains__ = new_method_proxy(operator.contains)`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5797682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6225030", "body": "Please always put bodies of function on a newline.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6225030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/7328418", "body": "It'd be more efficient to somehow keep the kqueue object open the whole time, I guess that's messy?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/7328418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/7389211", "body": "We don't want to be modifying this file, it's skipped by the `setup.cfg`, and is a copy of the stdlib file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/7389211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/7389227", "body": "There's still a few changse here :/\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/7389227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8240279", "body": "This needs to be a copy. Otherwise:\n\n```\nqs = ...\nqs2 = qs.comment(\"foo\")\nqs2.comment(\"bar\")\n```\n\nresults in `qs` having the \"bar\" comment.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8240279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8516489", "body": "If you need a variable to say the same thing as an isinstance check, that\njust seems like a mess to me. It's not like we're duck typing based on the\nattributes we'll actually use.\n\nOn Fri, Dec 20, 2013 at 9:20 PM, Daniel Lindsley\nnotifications@github.comwrote:\n\n> In django/core/apps/base.py:\n> \n> > -    def _stub(cls, label):\n> > -        return cls(label, None, None)\n> > -    def create(cls, entry):\n> > -        \"\"\"\n> > -        Factory that creates an app config from an entry in INSTALLED_APPS.\n> > -        \"\"\"\n> > -        try:\n> > -            # Entry is a path to an app module.\n> > -            app_module = import_module(entry)\n> > -            app_config_cls = getattr(app_module, 'AppConfig', cls)\n> > -            app_name = entry\n> > -        except ImportError:\n> > -            # Entry is a path to an AppConfig subclass.\n> > -            app_config_cls = import_by_path(entry)\n> > -            # Check for obvious errors (at the cost of duck typing).\n> > -            if not issubclass(app_config_cls, AppConfig):\n> \n> Could we set a class variable on the AppConfig class instead, something\n> like is_app_config = True? Then we can duck it, just checking to see\n> that's present.\n> \n> Perhaps it's just me, but I've been bitten by isinstance/issubclass too\n> many times, especially when people vendor code or when there's a genuine\n> reason to have a different base class. OTOH, that may be overkill here.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/2089/files#r8516476\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8516489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8767038", "body": "Indents should be four spaces.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8767038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8988298", "body": "You can use `chain.from_iterable` instead of doing `*[`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8988298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/10176024", "body": "It seems much simpler to split `as_json` into two functions, one which returns a string with JSON, and another which returns a json-serializable structure; rather than putting a new flag on this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/10176024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/10987541", "body": "Please dont' create new classes dynamically for each query like this, `IndexTransform` should be factored out and take some parameter to it's constructor (and then offer an `__call__` or something), same with `SliceTransform`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/10987541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/10987574", "body": "There's got to be a better way to do this than hacks in teh test runner.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/10987574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11189604", "body": "`+=`? (Here and a few other places, feel free to ignore if you prefer the look of this)\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11189604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11233636", "body": "It looks to me like you can use just `len(self._fields) + len(aliased_fields)` for this, we dont' really need to make a whole list.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11233636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11233639", "body": "Same here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11233639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11745225", "body": "Hah. Indeed!\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11745225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/12257181", "body": "This won't pass on py3k, since `repr(u'abc')` -> `'abc'`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/12257181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/12258759", "body": "Please don't create a class object every time this is called, it has some negative performance implications.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/12258759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/12258766", "body": "This should probably be a regular property, there's no expensive computation going on here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/12258766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/12776780", "body": "Normally I think this would be done with `{% trans %}` tags, why not here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/12776780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/12776814", "body": "I think it might make more sense to move the template to a file, rather\nthan complicate the interaction of the view/template string. Do otehrs\nagree?\n\nOn Sun, May 18, 2014 at 3:56 PM, Markus Amalthea Magnuson <\nnotifications@github.com> wrote:\n\n> In django/views/debug.py:\n> \n> > @@ -1121,7 +1135,7 @@ def default_urlconf(request):\n> >  <!DOCTYPE html>\n> >  <html lang=\"en\"><head>\n> >    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n> > -  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>Welcome to Django</title>\n> > -  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>{{ window_title }}</title>\n> \n> Because this template is in a string, any trans tags are not picked up by\n> makemessages.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/2682/files#r12776809\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/12776814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/12776838", "body": "Hmm, I guess fewer moving pieces does make sense for this, OTOH if you\ncan't load a file off disk you're pretty broken :-)\n\nOn Sun, May 18, 2014 at 4:04 PM, Markus Amalthea Magnuson <\nnotifications@github.com> wrote:\n\n> In django/views/debug.py:\n> \n> > @@ -1121,7 +1135,7 @@ def default_urlconf(request):\n> >  <!DOCTYPE html>\n> >  <html lang=\"en\"><head>\n> >    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n> > -  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>Welcome to Django</title>\n> > -  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>{{ window_title }}</title>\n> \n> I figured all of these are in strings to be able to serve error pages even\n> if the template engine has failed. But that's just a theory :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/2682/files#r12776836\n> .\n\n## \n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/12776838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/13401473", "body": "The file should really be created with the correct mode, so it isn't readable in between.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/13401473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/13401493", "body": "Should this reject files which are world writable?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/13401493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/22143894", "body": "This needs to be named `related` for it to work.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/22143894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/112462347", "body": "I wouldn't bother, there's nothing bad you can do with cross-origin language headers.", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/112462347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "aviraldg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5403392", "body": "@aaugustin I'm really sorry about that; I didn't notice it ('$') there... :facepalm:\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5403392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5403550", "body": "@aaugustin I want to fix stuff though; a test for this would go in regressiontests.admin_views.tests.AdminViewBasicTest, right?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5403550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gabrielfalcao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5410985", "body": "Great work with the individual commit with tests !\n:+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5410985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pablorecio": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5413216", "body": "Thanks for the tip, I'll try to add something more.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5413216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "marcneuwirth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5440247", "body": "Good idea\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5440247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gilesbowkett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44401486", "body": "Go Django go\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44401486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aanand": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44222675", "body": "Constantly impressed by the Python community's ability to be inclusive, considerate and ahead of the curve. Nice job, folks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44222675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paulsmith": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44223317", "body": ":+1: @fcurella!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44223317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bryanveloso": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/10059033", "body": "This is also in `stable/1.5.x` as of dbe984c397d6c1e49167dd8fbfb655dd17a14572.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/10059033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/25837085", "body": "From what I see in the diff, there's a lot more going on than simple color changes. May I ask the reasoning behind some of them? For example, `.errorlist` -> `ul.errorlist` and the collapsing of `background-*` properties into shorthand.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/25837085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/3127267", "body": "This is looking great! My only qualm is since the labels themselves are no longer floated, I would want to see this done without floats. :+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3127267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "natebragg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5679141", "body": "After considering it for a little bit, I figured it would make the most sense just to rebase it into a single commit.\n\nHowever, just in case it would ease review in any way, I made [a backup full-history copy](https://github.com/natebragg/django/commits/14030-full-history)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5679141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lqc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5689371", "body": "How does this differ from the patch that is already attached to the ticket ? Quoting aaugustin:\n\n> Do you have some evidence that removing the comment is actually the right thing to do?\n> \n> I didn't commit the fix right away because I wasn't sure of that.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5689371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "httpdss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5719399", "body": "there is no difference to the submitted patch, just checking on github workflow with something very simple. \n\ni've tested iri_to_uri and works as expected so I personally think the comment was misleading.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5719399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "techtonik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5740645", "body": "```\ngit rebase -i HEAD~4\ngit push -f\n```\n\nUpdated. Wow. I am impressed.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5740645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "SmileyChris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5776465", "body": "Someone else brought this up in irc and sent me an identical pull request :)\n\nIt was merged in 7495730d\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5776465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "jezdez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5801470", "body": "The minified version needs to be updated, too.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5801470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5810315", "body": "Hm, seems like there was a ticket open, too. Please for the love of god, mention ticket numbers when creating pull requests.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5810315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5823861", "body": "Right, the problem occurs when a pull request is merged without knowing there is a ticket. The green button is rather tempting ;)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5823861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6198988", "body": "The changelog entry needs to be in `1.5.txt`, too.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6198988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6545976", "body": "This has to be done through Transifex.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6545976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6705141", "body": "I disagree that **both** tox and Travis needs to be added. There is just too big overlap between the tools when it comes to test matrix setup. Given the fact we now can and should use pull requests it's also much easier to rely on the fact that contributors can rely on the fact that the @travisbot will inform the contributor of any test failures.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6705141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1334052", "body": "Yays!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1334052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1382120", "body": "YES!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1382120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1582546", "body": "Really, @alex? Sigh.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1582546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1663456", "body": "<3\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1663456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1815498", "body": "Amen!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1815498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1907320", "body": "Am I missing something obvious that requires this to be a tuple?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1907323", "body": "Nooooooooo!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1916430", "body": "@ptone I'm pretty sure that doesn't fix #392. Please make sure to use Trac ticket IDs to reduce the number of wrong comments there (see https://code.djangoproject.com/ticket/392)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1916430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1945944", "body": "Teehee!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1945944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2237196", "body": "This definitely needs mentioning in the release notes since users may have copied some format strings to their own format module.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2237196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2549391", "body": ":rollseyes:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2549391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2556830", "body": "ZOMG YES!!!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2556830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/2681946", "body": ":trollface:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2681946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/3124316", "body": "D'oh!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3124316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/768924", "body": "It's best practice to use common string substitution.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/768924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943639", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943643", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943647", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943650", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943654", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943731", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943784", "body": "Could probably be a tuple now.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943815", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943835", "body": "A `.. versionchanged:: 1.5` directive here would be very useful.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943837", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943843", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943845", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943849", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943852", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943853", "body": "Unneeded empty line.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/943862", "body": "Unneeded empty line. Sigh, I think I should just say this in general :flushed:\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/943862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956006", "body": "Typo.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956009", "body": "You mean \"handles GET requests\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956010", "body": "\"Handles POST requests\" please.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956012", "body": "\"Instantiating a form instance with the passed POST variables, ..\" sounds simpler.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956016", "body": "If all autodoc is removed now, we can remove this, too. Including the `settings.configure()` call.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956017", "body": "Two spaces behind the punctuation?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956018", "body": "Let's use PEP8 code style here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956020", "body": "One space too much.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956022", "body": "The example is well-intended but maybe should do something else, or use the F object.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956027", "body": "We could use the intersphinx ability in Sphinx here to link to the Python docs.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956031", "body": "I don't think brackets are needed here for the `class` directive.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956032", "body": "Could we link to DateQuerySet here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956035", "body": "We should discourage using `datetime.now` given the new timezone abilities in 1.4. Instead use `django.utils.timezone.now`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956039", "body": "Indented wrong.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956042", "body": "\"use\" instead of \"interrogate\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956044", "body": "Double space after dot.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956051", "body": "lower case for \"Fundamental\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956056", "body": "I think this can also be expressed with a `.. versionchanged:: 1.4` directive.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956057", "body": "Typo in last sentence.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956059", "body": "\"interrogated\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956065", "body": "Please wrap the lines of this note.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956067", "body": "Two spaces after the dot.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956068", "body": "PEP8 please.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956073", "body": "Not sure if linking a ticket is really sensible here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956074", "body": "Link to the reverse_lazy docs here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956075", "body": "s/view/views/g\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956077", "body": "\"Everywhere that needs to make..\" sounds odd to me.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956078", "body": "Double space.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956079", "body": "\"Everywhere that needs context data\" sounds odd.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956080", "body": "PEP8\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956081", "body": "PEP8\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956201", "body": "Cool!\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956204", "body": "Try `:class:datetime.date`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/956207", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/956207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/958392", "body": "FYI, you are all commenting on a code line not on the pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/958392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1083456", "body": "No need for backslashes here, please remove them.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1083456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1083457", "body": "Again, backslashes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1083457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1129075", "body": "I'm not sure if that's technically correct as it will raise a 500. Is there any previous mentioning of what should happen if AJAX access isn't supported?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1129075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1129087", "body": "As long as we don't have an official JsonResponse in the core, I'm very hesitant to document it like that. Instead we should pass in the content_type and dump the content  on the spot in the render_to_response class as demonstrated here: https://docs.djangoproject.com/en/dev/topics/class-based-views/#more-than-just-html\n\nAlso, don't use `django.utils.simplejson` but just the `json` module.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1129087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1334502", "body": "Double spaces?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1334502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/1334551", "body": "you probably want this to be shorter\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/1334551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/2160356", "body": "Can you add a versionadded:: 1.5 statement for the new API?\n\nBasically just make your addition a new paragraph and prefix it with:\n\n```\n.. versionadded:: 1.5\n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/2160356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3670815", "body": "Maybe make that a global variable so we can extend it easily if needed?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3670815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3686689", "body": "Please don't add a new private method, just do this check in `__new__`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3686689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3686696", "body": "Let's call this `non_existent`, please.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3686696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3686720", "body": "I don't care about the underscore, only about the non-existence of the word \"inexistant\".\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3686720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3686841", "body": "Mind wrapping the line after `t,` here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3686841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3691841", "body": "Could you please wrap the line after 80 characters?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3691841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3923614", "body": "Why is the `-d dist` needed? I thought dist is the default?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3923614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3923636", "body": "Let's wrap this line?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3923636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4035086", "body": "Like so:\n\n```\nEXCLUDE_FROM_PACKAGES = ['django.conf.project_template',\n                         'django.conf.app_template',\n                         'django.bin']\n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4035086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4138473", "body": "Should be `./manage.py`\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4138473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4314055", "body": "Please use the implied line continuation in braces instead of backslashes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4314055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4588610", "body": "This should be translatable to be a good example.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4588610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4588724", "body": "Same as above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4588724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5181746", "body": "If this is an internal class, why do we check here for those settings. We control those settings, so I doubt raising exceptions makes sense.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5181746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5483216", "body": "Can you name those variables something sensible, like `result` or `candidate`?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5483216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5497932", "body": "master is not going to be 1.6, but 1.7, can you move this section in the other release notes?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5497932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/5497934", "body": "Can you add a `.. versionchanged:: 1.7` here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5497934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8502944", "body": "I'm not a fan of this pattern at all, for two reasons:\n1. it implies that importing a app package is without consequences, which is not true if you think about app packages as normal Python packages. We shouldn't limit the use of Python shell features like `help(<app_module)`. This is hindered by the fact that this piece of code promotes importing `django.core.apps.base.AppConfig` inside of app package `__init__.py`'s which in turn triggers the settings system (due to importing `django.core.apps.cache.app_cache` in `django/core/apps/__init__.py`).\n2. you're giving two options for specifying an `AppConfig`, one implicit, one explicit. Only the latter should remain to reduce the amount of confusion and abuse of this new feature.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8502944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8503616", "body": "1. Oh, Python 3.3 also added the ability to specify packages without **init**.py So basing the whole entrypoint on them would be a bad idea. Dotted paths in `INSTALLED_APPS` all the way down \\o/\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8503616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/9171233", "body": "I don't completely recall what this was needed for tbh, to only return certain app statics? Not sure.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/9171233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11645989", "body": "Is there a reason to not use `super` here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11645989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11646045", "body": "I think the error class should be called `nonfield` to show up in CSS nicely.\n\nAlso, the parameter is probably misleading as you're providing only one class. So maybe `error_class` instead?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11646045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11655139", "body": "I think if we're supporting multiple error classes we should make it a list instead of a whitespace separated string\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11655139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/11656232", "body": "Agreed, let's go with one class for now.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/11656232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/15297148", "body": "I'm not sure where the 4/5 majority role comes from. Mind elaborating what this relation is based on?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/15297148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/15297264", "body": "How is \"significant contribution\" defined here? Commits? Non-code contributions?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/15297264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/15337265", "body": "Awesome, thanks for the clarification.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/15337265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/15337270", "body": "Makes sense to me, thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/15337270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/19629724", "body": "Oh, it's in the new docs as well, you're right, removing..\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/19629724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/25800978", "body": "Why this change?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/25800978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/28207081", "body": "I'd like to second @aaugustin's point about this conceptually fitting very well into the custom user models. This does not require yet another setting, so let's not.\n\nOn the bigger picture I really would like to prevent settings.py to continue to turn into a file full of dictionaries with dotted Python paths and initialization parameters. Let's use the extension API we've built into the auth app for such a case.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/28207081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/60110545", "body": "+1 on just `ignore_patterns` since collectstatic isn't the only endpoint where this may come in handy (e.g. django-pipeline uses finders, too).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/60110545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "tswicegood": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5811727", "body": "Doh!  Didn't see the issue when I searched. :-/\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5811727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5811748", "body": "Oh wait -- was it the ticket I opened?  I did the reverse reference from it to here I thought...?  My workflow is generally create the PR first, then the ticket in Trac as housekeeping assuming it looks good to other people.\n\nI'll try to make sure to update the description on PRs once a ticket is open though.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5811748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/13266753", "body": "Note, this still needs a simple test case.  The Armstrong's commit [788aaf3](https://github.com/armstrong/armstrong.core.arm_content/commit/788aaf3fec743f36e7f540c34270b63fa43c279c) shows a broken case, but that's a bit more complex that would be reasonable to include (maybe?).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/13266753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rafaduran": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5819251", "body": "See https://groups.google.com/forum/?fromgroups#!topic/django-users/-uluKz1tHw0\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5819251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5934283", "body": "See #85\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5934283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5976518", "body": "I'm not a native English speaker, so I'm no really sure which one is more correct, 'affect' or 'effect', I think effect but I asked to change it, so finally 'effect' or 'affect'??\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5976518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ogier": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5842172", "body": "Doesn't the fallback negate any security benefit to signing? If an attacker could break the old (insecure) mechanism, they can now break yours by triggering the old mechanism.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5842172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5973038", "body": "Also, in the future, you can just push a different commit to the same branch, and it will update your old pull request. There's no need to close the old one and recreate a similar one.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5973038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5976703", "body": "Yeah, English is really confusing sometimes.\n\nThe verb \"affect\" means roughly \"to influence, or cause a change,\" as in, \"the cloudy day affected my mood.\"\n\nThe noun \"affect\" means roughly \"an emotional state or outlook,\" as in, \"he had an affect of cheerful optimism.\"\n\nThe verb \"effect\" means roughly \"to achieve, or make happen,\" as in, \"the new laws effected a dramatic change.\"\n\nThe noun \"effect\" means roughly \"the result of a process or action,\" as in, \"excessive drinking has many negative effects.\"\n\nSo yeah, English is a horrible mess. I saw the comment on #91, which is unfortunately incorrect. You were right the first time. You want the noun \"effect,\" making the phrase, \"visiting your view could have an effect\"\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5976703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1491695", "body": "I consider this a bug in simplejson.\n\n``` ipython\n>>> import json\n>>> import simplejson\n>>> simplejson.dumps({'hello': 'world'}, cls=json.JSONEncoder)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/aogier/.virtualenvs/simp/lib/python2.7/site-packages/simplejson/__init__.py\", line 334, in dumps\n    **kw).encode(obj)\nTypeError: __init__() got an unexpected keyword argument 'namedtuple_as_object'\n```\n\nBasically, simplejson 2.2 broke backwards compatibility, both with itself and with the Python standard library by adding this keyword argument.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1491695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jpic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5842933", "body": "Note that I did not open a ticket for this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5842933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1399122", "body": "Before, we could run scripts outside django, by just doing \"import manage\" at the top. Now it's not possible anymore because the django project is setup only if **name** == '**main**'. Is it normal ? Wasn't it cool to just do \"import manage\" and then be able to use the django project in a script ?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1399122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1402977", "body": "Fantastic, great answer, thanks a heap !\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1402977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "crodjer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5847820", "body": "@ogier Yes, this can be an issue. With the compatibility workaround the\nsigning checks on sessions which were created before introduction of\nthe signing framework.\n\nWe could make this optional for users to keep compatibility with old\nmechanism. Without this, the existing sessions will be reset.\n\nOn 01:50 -0700 / 22 May, Alex Ogier wrote:\n\n> Doesn't the fallback negate any security benefit to signing? If an attacker could break the old (insecure) mechanism, they can now break yours by triggering the old mechanism.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/django/django/pull/78#issuecomment-5842172\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5847820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/5970922", "body": "To remove merge commits from the pull request, I did a rebase and re-added the commits in this pull request. In that process, I lost some comments on the commit \"Check session expiry on the serve side\", [Line 79](https://github.com/crodjer/django/commit/3b018b60145b19559853ea327aa0516cf5e34fbe#L0R79) . Here are those:\n\nOn 19:57 -0700 / 21 May, Sergiy Kuzmenko (@shelldweller) wrote:\n\n> 2 compatibility issues:\n> \n> 1) This will invalidate all existing sessions that were created the old way (and will likely throw an uncaught exception).\n> 2) Exception change for tempered data: SuspiciousOperation is implicitly replaced by BadSignature. (This might be the right thing to do but it must be documented).\n\nOn 12:02 +0530 / 22 May, Rohan Jain (@crodjer) wrote:\n\n> In case of an exception while unsigning existing sessions, we can fall\n> back to the previous decoding method. Added a commit for this in the\n> pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5970922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bradbeattie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/5969582", "body": "Sorry, was unaware that parity between the two issue trackers was desired. Should I make a corresponding ticket in Django's Trac? (Cumbersome, but understandable if the vast majority of Django's tickets are in Trac.)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/5969582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jacobh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6044949", "body": "I found that i wasn't returning the instance at the end of the save() function that I overwrote. disregard\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6044949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jphalip": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6048325", "body": "Thanks for the review Alex.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6048325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6093339", "body": "Merged in f699641161a4ec8b6cbee938fd3a4379e7889ff2\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6093339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6699126", "body": "Hi Phil. Sorry for the late reply. What I mean is that, if we have an app called 'blog' and a model called 'Entry', then we should have two classes: app-blog and model-entry. Both classes would be used on the add/change/history/delete views, and only the app-blog class would be used on the app index view. Does it make sense?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6699126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1648127", "body": "Welcome to SF!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1648127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "samuraisam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6091423", "body": "@jphalip last patch from the sprint today. Hope to see you next time. Let me know if this needs anything more.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6091423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dbrgn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6120870", "body": "+1 for Travis support!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6120870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6137853", "body": "The number based language code seems to be a valid [IETF language tag](http://en.wikipedia.org/wiki/IETF_language_tag). The HTTP 1.1 [RFC 2616](http://www.ietf.org/rfc/rfc2616.txt) doesn't seem to mention alphanumeric subtags, but [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) does (Section 2.1). RFC 3066 has since been superseded by [RFC 5646](http://tools.ietf.org/rfc/rfc5646.txt), which adds a bunch of new stuff.\n\nI'm not sure which one Django would have to follow, or whether HTTP 1.1 allows newer forms of language tags.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6137853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6137952", "body": "+1 for this change, makes sense to me. Updating the docs would be a simple matter of search-replace in `grep -rli \"Development server is running at\" docs/`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6137952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6705646", "body": "@jezdez thanks, done!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6705646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6741397", "body": "I saw that the `WizardView`'s `get_all_cleaned_data()` and `get_cleaned_data_for_step(step)` were still undocumented and added their docstrings to the main documentation.\n\nMaybe `get_all_cleaned_data()` should even be mentioned in an example at https://docs.djangoproject.com/en/1.4/ref/contrib/formtools/form-wizard/#django.contrib.formtools.wizard.views.WizardView.done? It seems to be very useful (as long as form field names don't clash).\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6741397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "drtyrsa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6145016", "body": "These would be indexes with a very low selectivity and I suppose full table scan would be used anyway.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6145016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "svartalf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6145472", "body": "With a small cardinality those indexes will working fast for queries like a `WHERE is_staff = True`. For `is_staff = False` queries will depend on the index and database type.\n\nI've made a little tests for MySQL: https://gist.github.com/2880639 and PostgreSQL: https://gist.github.com/2880645, which show that such kind of indexes is useful.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6145472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jakul": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6180765", "body": "Merged the changes into the existing files; I also changed one of the tests to not use the it locale, which is used by some other tests\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6180765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6460401", "body": "I need 2 locales with .po files and without .mo files in order to check that the compilation works properly.\n\nOf the existing locales:\n  'it' has an error in the .po file and doesn't compile to a .mo file (this is intentional)\n  'fr' already has a commited .mo file\n\nI can remove the `hr` locale if it is OK to remove the .mo file from the `fr` locale, however I didn't think that was a good thing to do.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6460401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "audreyr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6183241", "body": "@aaugustin This is ready for review.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6183241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/6184897", "body": "@aaugustin Added a second commit that is still part of the same 'Working with forms' topic documentation file. I revised the text to be friendlier without losing any content.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6184897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "saschpe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6188911", "body": "Actually I added the config value just to be safe, altough I can't think of any situation where you wouldnt't want to set HttpOnly. However, I'd be fine without the config option, too ;-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6188911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2576730", "body": "Maybe I'm missing something but why did you not simply merge the pull request instead of squashing and commiting it under your name? That's just not how git works but maybe that helps to keep the AUTHORS file small....\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2576730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/2576964", "body": "Agreed on the AUTHORS part but the rest doesn't make sense. Acceping the pull is \"one go\". Either way, you still have to close the ticket in the other (i.e. not github) tool. If a single commit would have been requested, I could have squashed it myself.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2576964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jacobian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6206608", "body": "Filling in some discussion from IRC:\n\nI think this should nix the use of `autodoc`. `autodoc` isn't used in Django's docs deliberately: it prevents translation (which we _want_ to do, despite have not done it...) and it can cause the docs to be hard to build (since it means they have to be able to `import django`, risking the dreaded `DJANGO_SETTINGS_MODULE` error). Instead, I'd like to see this use the [include directive](http://docutils.sourceforge.net/docs/ref/rst/directives.html#including-an-external-document-fragment) to avoid repetition.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6206608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "lukesneeringer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/270707847", "body": "> The tutorial assumes the reader knows Python basics. It seems this might be more appropriate for a Python tutorial than for the Django tutorial.\r\n\r\nThis is not a Python basic. It has nothing to do with Python.\r\n\r\n> Strictly speaking `$` is used to show a prompt for an unprivileged user and # for the superuser. (At least for bash and similar - might differ for csh, etc.)\r\n\r\nI understand that. The issue is that a new person who is just trying to get started with this stuff might not.", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/270707847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/278684041", "body": "Great! Thank you.", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/278684041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/95021043", "body": "That sounds useful to me.", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/95021043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jamtur01": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44484283", "body": "Good change. +1.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44484283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "konklone": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44232512", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44232512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SEJeff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/73318293", "body": "Any word on if this will get merged? I just ran into this exact same issue.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/73318293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/256783051", "body": "The test clearly covers the change and the change is relatively obvious. There doesn't seem to be any real benefit for 4 different tests in this case IMO.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/256783051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ajt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44265104", "body": "Go @fcurella! \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44265104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alevy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/161454474", "body": "@lericson I'm happy to take over this pull request. We've been promoting a monkey patch to our customers that basically does this for several years and it seems like the best solution without other pretty significant change to the Django caching infrastructure.\n\n@timgraham Do you think using `mock` as you suggested to verify `disconnect_all` isn't called would be a sufficient?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/161454474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dmitry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44284168", "body": "That is so stupid! Can't believe it's not a joke.\n\nI'm not user of the django framework, but I'm really discouraged! Hope that will never happen to a rails.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44284168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jaegerpicker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44486352", "body": "Thanks for the change! Primary/replica are clearly the better terms. \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44486352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dreynolds": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/16654559", "body": "This certainly works for me. Anything we can do to get it committed?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/16654559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "valberg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44562787", "body": "Closing this in favor of a new upcoming PR.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44562787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44577256", "body": " There are still some issues with coloring though. I will address that if the rest of the PR looks good.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44577256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44584924", "body": "Yet again closing due to the discovery that the original bug (https://code.djangoproject.com/ticket/22611) actually was an old bug. New PR on the way :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44584924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44814452", "body": "@apollo13,@andrewgodwin: I've created a ticket for it: https://code.djangoproject.com/ticket/22749\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44814452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/45317003", "body": "Isn't this the same as https://github.com/django/django/commit/aa12ea05cee4af5f2655ed9526ad9852419cc82e or am I just confused?\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/45317003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/46216532", "body": "Already fixed in https://github.com/django/django/commit/2b79be2beee8531ab1ef4efca75589705774d8f7 - I knew it was an na\u00efve solution :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/46216532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/13867589", "body": "We could rely on the fact that this line is the culprit that raises an AttributeError. But that would lead to duplicate code in the except-clauses.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/13867589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "peterlandry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/8382227", "body": "IMO that documentation is more than is necessary -- it should be pretty obvious what's going on, but I'll defer to a dev to make that decision. More than just LineString.array is impacted.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/8382227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/8382489", "body": "I don't think that an exception should be raised since that would be backwards incompatible. I think it's OK as-is, since by not using the setting you get the behavior you do now, and it realistically will only be set to False.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/8382489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/37417653", "body": "I just created one: https://code.djangoproject.com/ticket/22254#ticket\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/37417653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FotoVerite": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/44232661", "body": "@nslater why did you bring BDSM into then? You're the only one in the thread mentioning sex in any shape or form. \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44232661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44232677", "body": "@nslater Besides the trolls of course but they're not actually relevant. :D\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44232677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/issues/comments/44233509", "body": "Guys leave this thread. We already won and have primary/replica merged in. All that's left now is feeding the trolls. We have more repos to create PR for to improve wordage and documentation\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/44233509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "obeattie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/10375532", "body": "In response to my posts on the mailing list, this has actually been fixed [in gevent](https://github.com/SiteSupport/gevent/commit/554ed446db75ed6b15f277ccc0094140d2b03e88), so closing this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/10375532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ssssam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/87726946", "body": "Thanks for the detailed review! I've updated this with your comments.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/87726946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/issues/comments/88025667", "body": "@MarkusH  I'm happy with what you've proposed above. I think adding 'In particular, avoid sending passwords or any other sensitive data over HTTP connections because they will be vulnerable to _password sniffing_.'  would still be good to make it stronger.\n\nI've opened a bug: https://code.djangoproject.com/ticket/24556\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/88025667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "bmispelon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/13990594", "body": "Done.\n\nAs discussed on IRC, I'll file a separate ticket for the similar issues in `contrib.comments` and `contrib.admin`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/13990594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/35197512", "body": "The pull request has been brought up-to-date in #2310.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/35197512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/17409770", "body": "You should add an empty `tests/promise/models.py` file so that one can run `./runtests promise`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/17409770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19534908", "body": "Merged in 39b245fd765bc8809cedbd0c898d5b385d8ef8ea, thanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19534908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19711939", "body": "Merged in 7462a78c1bdef2f37ea9aae5ad05170dbd14b34a, thanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19711939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19864881", "body": "It turned out there were a few other errors and inconsistencies in the topic, so I made a new pull request here: https://github.com/django/django/pull/1298\n\nThanks for the original report!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19864881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19865731", "body": "Merged in bd9fbd1497edc585c5bec28c7d4bc8d1afd1943b.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19865731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19898293", "body": "Merged in 299983616ffc146a6f5aa03af9b3f4a56853f05c.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19898293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19958707", "body": "Merged in 9a2b07f1b45741da39a7606474aec3548780032b.\n\nNote that I changed the commit message slightly. See out committing guidelines at https://docs.djangoproject.com/en/1.5/internals/contributing/committing-code/#committing-guidelines\n\nThank you for your contribution.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19958707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/19997137", "body": "Fixed in ec371ace004203100d24a74edafc16534dd5d5a9\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/19997137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/20042556", "body": "Merged in c6862d57c1e987f0f98a77826d19358b9040bad1\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/20042556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/24124398", "body": "Merged in 7008ed61c519f93a9b6c5c547ad718ad2deb959b (with a few tweaks to the tests).\n\nThanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/24124398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/24028298", "body": "Merged in 28a571348bca9c5a3c137e495e7d3c9349a5bd56.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/24028298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27386381", "body": "Merged in 9fde42a69a56cb6c8cdfd67b07c67a1b97638f12.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27386381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27369879", "body": "Merged in 3c5cdaf47aae7e4f21398be1a5eaa07f7c5ce31c\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27369879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28126139", "body": "Hi,\n\nThe pull request doesn't apply cleanly on my local checkout. Could you rebase it to the master branch (and also squash all the commits into one)?\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28126139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28157903", "body": "Thanks for the update. I can confirm that tests pass.\n\nHowever, I don't see a mention in the 1.7 release notes anymore.\nI could swear I had seen that in this patch before. Did it get lost in the squashing or did I dream it?\n\nOnce that gets in, that PR is ready for checkin as far as I'm concerned.\n\nNice work!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28157903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28161255", "body": "Thanks!\n\nI rewrote the release notes a bit, does that look OK to you?\nhttps://github.com/bmispelon/django/compare/ticket-21351?expand=1#diff-906ba4249f5f6f273015e087f88d398eR755\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28161255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28179822", "body": "Merged in 9b7455e918a437c3db91e88dcbf6d9c93fef96f8.\n\nThanks for your contribution!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28179822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27798918", "body": "Merged in e5e044da87800feb6ef63fef1765d8c05022d926.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27798918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/27956245", "body": "Fixed in ae029b440a3125937802d261e151206fda427145.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/27956245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28207600", "body": "The addition to the documentation looks good.\nMake sure you remove the trailing whitespace too though.\n\nThe only thing that's missing now is a mention of the new feature in the `docs/releases/1.7.txt` file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28207600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28207837", "body": "Once you've made all these changes, can you also squash all the commits together into one (also make sure you follow the commit messages guidelines outlined on https://docs.djangoproject.com/en/1.6/internals/contributing/committing-code/#committing-guidelines)?\n\nI'm available on the #django-dev channel on Freenode if you need some guidance.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28207837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28218147", "body": "Merged in d87127655f540747e7dc83badc015ea520b880f5.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28218147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28126662", "body": "Hi,\n\nThere's still a mention of the \"dummy\" gettext function in `docs/topics/i18n/translation.txt`.\n\nCould you fix that one too?\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28126662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28139244", "body": "Merged in 8bc350b38516d8c3a14aed113dd3402b9375b75c.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28139244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28243974", "body": "Fixed in 5fda9c9810dfdf36b557e10d0d76775a72b0e0c6.\n(sorry, I didn't see on the ticket that you had a pull request open for this).\n\nThanks for the report.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28243974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28315989", "body": "Merged in 8ed96464e99c73150ab6eff5df70b6274a871a4a.\n\nThanks for catching this.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28315989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28520572", "body": "Merged in 17ed99f3a3eea4bd27fa34be59c3582616ed8079.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28520572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28573334", "body": "Looking at the code, adding `''` as a third argument should not make a difference: https://github.com/django/django/blob/master/django/contrib/admin/static/admin/js/core.js#L41\n\nCan you open a ticket for this?\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28573334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28614049", "body": "Merged in ceecc962ad8f6bbbc2b989aec53eee6c6cca04b9.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28614049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28817835", "body": "Merged in ebfa508fa32b27de6f3e2ca04c81b46408b0506e.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28817835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/issues/comments/28906270", "body": "Merged in 331d79a77d48e1a46df0290689d4d865e67221c4.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/28906270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2969231", "body": "This commit broke the `admin_views` tests: http://dpaste.org/XZY4h/\n\nIt should be easy to fix by using the right class on lines like these: https://github.com/django/django/blob/master/tests/admin_views/tests.py#L2631\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2969231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2969328", "body": "Here's a PR that fix the tests: https://github.com/django/django/pull/1003\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2969328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/3757903", "body": "Good catch, that's indeed the case.\n\nHowever, the original version still has an issue if `id_` is False, since it will mark anything passed as `content` safe.\n\nI see two ways to fix this:\n\n1) We can either apply `conditional_escape` to `contents` after this line, but the double-escaping of lazy strings would kick in (#20221).\n\n2) Another option would be to add an `else` clause to the `if id_:` clause and apply `conditional_escape` there. \n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3757903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3783349", "body": "Very good point, that was an omission on my part.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3783349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3836922", "body": "Not important, but I think it should be `{\"key\": \"value\"}` (note the added space after the colon) per pep8.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3836922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3836935", "body": "You don't need to call `bool` since `assertFalse` does this (same goes for the next line).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3836935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4078495", "body": "The `L` suffix raise a `SyntaxError` under python3. This should be `lambda: long(9999999999999999999)`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4078495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4188739", "body": "Nitpicking: there's some double-spacing that's not needed. I would remove the space before the `{% if %}` tag and keep the one inside.\n\nAlso, this line seems pretty long now (it's the longest one in the file). Is there a way to split it over several lines while keeping the readability?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4188739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4288003", "body": "I think it's a perfect use-case for a set.\nChanging it to `set(['DATABASES', 'CACHES'])` would be compatible with python2.6+ (which is what we support for now).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4288003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4288315", "body": "This is not used only by `get_or_create`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4288315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4293290", "body": "Sorry about that, I borked my pull request by force pushing.\n\nThanks for pointing it out, I fixed it now.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4293290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4318236", "body": "There's one \"object\" too many.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4318236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4335708", "body": "Why the double-space after a period? It's not consistent with the rest of the documentation.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4335708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4335716", "body": "The `current_time` tag is no longer defined above this so this needs to be re-written.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4335716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4336136", "body": "The \"our earlier\" bit should probably be changed too.\n\nMaybe something like \"Our current_time function could thus be written like this\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4336136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4336222", "body": "This whole section should be moved back to the bottom of the page since we haven't introduced how to write complex tags yet.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4336222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4336244", "body": "This paragraph can probably be deleted since we're now introducing the simple version first.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4336244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4336259", "body": "This section should also be moved back to the bottom since it's making use of the complex way of writing custom tags, which hasn't been introduced yet.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4336259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4361172", "body": "`slug_field` should be `lookup_field`, no?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4361172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4361612", "body": "I'm not a native speaker, but isn't there one \"should\" too many?\n\nThe lookup_field attribute **should** correspond with the model field that **should** be used for object lookups...\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4361612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4519992", "body": "Since we don't have to support old python versions anymore, you can use the `@property` syntax, which I think is more readable.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4519992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4700071", "body": "I think `{{ form.as_p }}` is better here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4700071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4700079", "body": "I think this line is incorrect.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4700079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4700084", "body": "Incorrect.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4700084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4700098", "body": "One empty line is enough I think.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4700098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4700101", "body": "Incorrect\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4700101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4715488", "body": "For the name, I took inspiration from `total_form_count` which is itself a method, so I opted for consistency.\nI think a property might make more sense (like for `errors`) but then a different name might be better, to avoid the inconsistency with `total_form_count`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4715488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4778482", "body": "There's no circular import issue here, is there? The import should go at the top of the file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4778482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4791053", "body": "`self.object` should be set in `get` and `post`, otherwise it won't be available in `form_valid` (because the path we take then doesn't call `get_context_data`).\n\nPlus if you do that, then `SingleObjectMixin` will automatically pick up `self.object` and add it to the context, so we could remove `get_context_data` altogether.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4791053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4793485", "body": "I would also turn the logic of `get_context_data` around but as you note, it's a much bigger change since we'd have to do it consistently throughout this page (and maybe other pages too).\nMaybe you could open a ticket for that?\n\nI haven't tested, but I believe the current version of this code is still broken: `get_success_url` accesses `self.object` which will not be set because this code path does not call `get_context_data`.\n\nI think moving this line to `get` and `post` is the correct thing to do, and it will simplify the code too.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4793485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4831891", "body": "That model declaration was already in the file (in the \"performing extra work\" paragraph). I just brought it with the rest of the models for the sake of consistency (also, one of the other models has a M2M to it).\n\nI do agree however that there might be a better value we could use.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4831891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4831926", "body": "Well technically, `fields` is never defined on `ModelFormMixin` itself.\n`ModelFormMixin.get_form_class` does a `getattr(self, 'fields', None)`, though I'm not sure why.\nMaybe that's the reason why it wasn't added to the flattened index?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4831926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4912133", "body": "Wouldn't `assert name` be enough here?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4912133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6710188", "body": "Nice touch to follow the previous model's docstring, but I think this one should simply be:\n`Model with FK to a model with a CharField primarey key, #21194`\n\nThe `{Null,}BooleanField` of the previous one just means `NullBooleanField and BooleanField`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6710188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6710199", "body": "Nitpicky but I'd call it `PrimaryKeyCharmodel`, just to be more explicit about what it is.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6710199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6710206", "body": "Per pep8, this should be `max_length=10` (note the lack of whitespace around the equal sign).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6710206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6710317", "body": "Not sure if that's the best name for this test. How about `test_empty_string_fk`?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6710317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6710361", "body": "Make sure you reference your ticket number in the docstring (see the other tests in the file).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6710361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/6710390", "body": "I don't think the two lines (`*_normal`) are needed here since this functionality is most likely tested elsewhere (and you don't make use of those variables in your assertions later on).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/6710390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tuxcanfly": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6445982", "body": "Sorry, this pull request is limited to one commit. See #165\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6445982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dmedvinsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6452000", "body": "collection.Iterable \u2014 check\nlambda \u2014 check\nglobal var \u2014 check\ncommit message \u2014 check\n\nAll done. Thanks for helping.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6452000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ekkus93": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6467329", "body": "Julien, I'm in the process of making those changes but you can you clarify what you mean by \"the classes should in fact be app- and model-.\"?  Right now, an admin link such as '/test_admin/%s/admin_views/section/add/' will have '<body class=\"admin_views-section change-form\">' for the body tag.  I think what you're suggesting is to also have a class for the body tag for non-admin (regular) pages.  If this is true, could you give me an example of what the class for the non-admin body tag should be called?  \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6467329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adw0rd": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6584735", "body": "Found the problem: when using .select_related('other_table') all columns 'other_table' added to the GROUP BY\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6584735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dittaeva": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6679811", "body": "Hey @ei-grad, I suspect nothing has happened to this because [translations are handled at transifex.com](https://www.transifex.com/projects/p/django/language/ru/). Perhaps you should head over there and suggest the changes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6679811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ei-grad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6694085", "body": "Oh, yeah, I fixed this on transifex already.\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6694085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "deniscostadsc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6747171", "body": "Sorry.\n\n```\nIn documentation is:\n\n\"...just call manage.py loaddata, where <fixturename> is the name of the fixture...\"\n\nshould be:\n\n\"...just call manage.py loaddata <fixturename>, where <fixturename> is the name of the fixture...\"\n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6747171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rpedigoni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6768193", "body": "thanks @apollo13 \n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6768193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nagisa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/django/django/issues/comments/6769054", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/issues/comments/6769054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dswarbrick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272003", "body": "This is throwing AttributeError exceptions in ./manage.py runserver:\n\nException AttributeError: AttributeError(\"'_DummyThread' object has no attribute '_Thread__block'\",) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored\n\n...and fails completely when using gevent-socketio's SocketIOServer. I don't think using subprocess.Popen is advisable in a multithreaded environment - at least not without some additional code.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272017", "body": "Resolved gevent's failure by changing monkey.patch_all() to monkey.patch_all(select=False).\n\nI'm still not a fan of calling subprocesses from multiple threads. I expect webserver logs to start filling up with the DummyThread error mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272043", "body": "I suspect the DummyThread error may only afflict Python 2.7 (http://bugs.python.org/issue14308). What version are you testing with?\n\nI actually wrote a patch only hours before aaugustin opened a trac ticket with his patch. My patch obtained the git commit hash using only pure Python code (eg. no subprocess), but since aaugustin needs the timestamp of the commit, rather than the hash, this is a bit trickier to obtain. The Git Community Book describes in reasonable detail the format of the .git directory and pack files, so it would be feasible to get the timestamp without resorting to a subprocess.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272231", "body": "Sure... already on it ;-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272339", "body": "I've just been looking at Dulwich. Obviously it's intended to be a fairly complete implementation of git, which is unnecessary in this case (otherwise Django could simply include a copy of Dulwich). Also, a lot of the class methods appear to raise NotImplementedError().\n\nDrawing upon my earlier patch submission that ascertains the HEAD commit hash, I now have some rough Python code that parses the pack index(es) until it finds the HEAD commit object offset, then extracts the compressed object from the pack file. The Unix timestamp should then be easy to parse from there.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272500", "body": "@adrianholovaty I have the code in a reasonable shape now. It's not quite in a form that can be pulled into Django, rather a little proof of concept script containing various git repo-parsing functions. I don't have a fork of Django currently, and suggest that I simply email or paste the code somewhere, until it can be manipulated into a form suitable for inclusion. Does that work for you?\n\nIt's about 80 lines of code, most of that spent parsing the pack index files and extracting the object from the pack file.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1277082", "body": "@adrianholovaty I wish 80 LoC were an overkill, but parsing a git repo is considerably more involved than parsing a svn repo, due to the fact that a) objects can be either \"loose objects\", or stored in one of several pack files, b) if an object is not stored as a loose object, the pack indices need to be parsed in order to find the offset in the corresponding pack file where the object is located, c) the length of the object uses a somewhat bizarre variable length system, and d) only once the object is located and decompressed, do we actually get the timestamp of the commit. Fun.\n\nAnyway.... here 'tis. http://pastebin.com/r9GLEQHS\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1277082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1297074", "body": "Does this still pass tests? I would have thought that since Django liberally uses unicode, there would be TypeError exceptions where unicode strings were written to a BytesIO object without first being encode('utf_8') 'ed. The old StringIO.StringIO() supported unicode string assignment, whereas cStringIO.StringIO() did not. Since it appears that all of these files attempted to import cStringIO, I'm going to cautiously assume that there were no unicode writes happening. And yes, I do see the byte literal string prefixes, but since Django pulls strings out of DBs as unicode, I wonder if there are any situations where that string content could end up being written to a BytesIO object.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1297074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1618983", "body": "I am one of the few people who was apparently using SortedDict.insert() - to dynamically add form fields at a particular position in a `forms.ModelForm.__init__()`.\n\nThe argument order to warnings.warn() is incorrect. It should be warnings.warn(message[, category[, stacklevel]]) (http://docs.python.org/library/warnings.html#available-functions). As it stands, instead of throwing a warning, it throws an exception:\n\nTypeError: issubclass() arg 1 must be a class\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1618983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jamierumbelow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1272263", "body": "Just to chip in here; there's a pure Python Git file/repo implementation called [Dulwich](https://launchpad.net/dulwich). It'd be a good place to begin looking for a pure Python solution.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1272345", "body": "To satisfy my professional curiosity please mention this issue in the commit message so it's linked... I'd like to have a look to see how you do it :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1272345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cyberdelia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1316669", "body": ":star2:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1316669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1613379", "body": "This link point to a 404, not the docs : https://docs.djangoproject.com/en/dev/topics/python3/six/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1613379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "uruz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1351355", "body": "NOTPROVIDED have b prefix there, but not at django/template/defaulttags.py line 45. Why?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1351355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1449249", "body": "Typo: Ouptut -> Output\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1449249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1946397", "body": "Style comment: this is better written with `3 if self.hasz else 2`\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1946397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/2064176", "body": "Typo: Ameria instead of America\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2064176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/2682150", "body": "I am not sure, is there some reason not to declare fixture in a usual way of `fixtures = ['myhorses']` ? \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2682150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/2884325", "body": "Typo: forgotten quote\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2884325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "reinout": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1429144", "body": "What about \"Handling pull requests (for core developers)\"? It took me a couple of sentences before I understood that this wasn't about how I (as a non-core dev) could prepare a pull request.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1429144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Fruneau": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1429670", "body": "You can also fetch a specific branch from a repository without having to create a new remote. That's useful when there are several patches from a one-time contributor:\n\ngit fetch https://github.com/<contributor>/django.git <contributor's pull request branch> && git checkout -b pull_xxxx FETCH_HEAD\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1429670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ptone": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1430282", "body": "This actually fixes #18307 and #18436 does it not?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1430282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1917232", "body": "thanks - missed that one\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1917232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1928914", "body": "whoops - I had missed that one.\n\nDo we have the lifetime of these documented somewhere - I don't recall seeing it, but could have missed it.\n\nThanks @claudep for reviewing me so far - a second set of eye is always appreciated.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1928914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1956219", "body": "And what if the user model does not define a groups field?\n\nfine to raise an error if calling this function directly - but one should be able to get all perms, and that calls get_group_permissions\n\nseems maybe a check whether groups is available, and return nothing instead of raise an FieldDoesNotExist error?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1956219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1978851", "body": "Hooray for getting coverage in!\n\nI was thinking that this should be extended with the better parts of https://github.com/django/django/pull/120/files - which had in some ways is a more complete approach to coverage in Django (https://code.djangoproject.com/ticket/16817 - which probably should have been marked as a dupe)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1978851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2005055", "body": "see: https://code.djangoproject.com/ticket/19133\n\nThere are a couple things overlooked here - first the method should be `def clean(self, value)` - but even with that, the value that is passed from the readonly widget is None - so we need to get the password hash from the UserChangeForm's initial data as was being done before.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2005055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2681631", "body": "don't know how verbose we want/need to be here on git specific stuff, but could mention that you need to add django-private as a remote, and fetch any changes to ensure that your security/\\* branches are up to date\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2681631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "maraujop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1474944", "body": "I've updated to Djando dev and found Tastypie serialization is broken because `json.JSONEncoder` doesn't accept a keyword argument `namedtuple_as_object`, while `simplejson.JSONEncoder` does. This breaks backwards compatibility, is this the desired behavior? Should this be fixed in Django or in Tastypie?\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1474944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1474953", "body": "Most likely this is due to the fact that Tastypie is doing `simplejson.dumps(data, cls=json.DjangoJSONEncoder, sort_keys=True, ensure_ascii=False)` and passing a `DjangoJSONEncoder` which is no longer a simplejson encoder anymore, so simplejson passes to it kwargs it doesn't accept. So I'm leaning towards patching this in Tastypie.\n\nThanks, cheers\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1474953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jperelli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1525330", "body": "what is the use of\nself.kwargs.get('page')\nin this place?\ncan one define the pagenumber using a url like /view/page/4 instead of /view/?page=4\nI can't find out how to do that\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1525330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mariocesar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1582021", "body": "This change is breaking django, using Python 2.7.2+\n\n> ImportError: No module named warning\n\nCall me crazy, but I think the correct module name is **warnings**\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1582021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/2034048", "body": "@carljm Adding the argument breaks the diffsettings command, as it calls _setup() to force load all the settings.\n\nLook at line 19: \nhttps://github.com/django/django/blob/e70170c2cbc8871f3bc1f585601b831eef0be9dc/django/core/management/commands/diffsettings.py#L19\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2034048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gilsondev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1593570", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1593570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1613087", "body": "Because retired?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1613087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1850244", "body": "Congratulations!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1850244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1907687", "body": "USERNAME_FIELD!! Finally! \\0/\\0/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yedpodtrzitko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1598014", "body": "What is this if-else for, when it contains the same code?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1598014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "leotrubach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1598068", "body": "Probably LoaderOriginLite should be in the second line\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1598068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "goinnn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1598632", "body": "This a intermediate step. Please, see the final diff:\n\nhttps://github.com/django/django/pull/217/files#L2R81\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1598632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "slav0nic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1712097", "body": "{'a':0,'b':100,'c':'c'} pep8 ...\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1712097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "twoolie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1722264", "body": "How did this escape detection for 7 months? by removing this list comprehension you disable the creation of temporary variable `x` and the `del x # Temporary variable` statement on L30 then fails. Seems to be fixed in [129f1ac8484] though.\n\n(This came up in dango IRC channel: https://dl.dropbox.com/u/1204764/ssdjango.jpg)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1722264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "georgemarshall": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1725039", "body": "Breaks the usage of `type()` and strings in python 2.7\n\n```\nTraceback (most recent call last):\n  File \"/django/core/management/commands/runserver.py\", line 111, in inner_run\n    ipv6=self.use_ipv6, threading=threading)\n  File \"/django/core/servers/basehttp.py\", line 205, in run\n    httpd_cls = type('WSGIServer', (socketserver.ThreadingMixIn, WSGIServer), {})\nTypeError: type() argument 1 must be string, not unicode\n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1725039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1740903", "body": "Breaks CSRF middleware in python 2.7\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1740903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "kmtracey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1746874", "body": "I do not believe this change is correct, please see: https://code.djangoproject.com/ticket/18063#comment:8\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1746874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/1991758", "body": "I don't agree with this note. For any application you care about at all you DO need database parity between development and production. There are just way too many places where sqlite fails to catch things that are going to be caught as errors in production. I'm very strongly against Django docs recommending using sqlite for development.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "magevadi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1758773", "body": "Shouldn't it be \nif new_name.find('**') >0:  \ninstead of \nif new_name.find('**') >= 0: ? \nsame goes for the following conditions. Please correct me if I am wrong. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1758773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rehmetjan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1792003", "body": "good job\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1792003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "vickyi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1792213", "body": "very good\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1792213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kmike": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1824816", "body": "confidant -> confident?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1824816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "brutasse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1826836", "body": "That's not exactly the syntax. `**initkwargs` can be used to override attributes of the view but `as_view()` returns the callable and doesn't accept a request. The example should be `response = MyView.as_view()(request)` or with arguments, `response = MyView.as_view(template_name='my_template.html')(request)`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1826836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "robhudson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1850442", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1850442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bitprophet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1858889", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1858889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "avanheuvelen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1907415", "body": "That's beautiful. Congratulations guys!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "freakboy3742": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1907640", "body": "Ah - at one point in the patches history, there was a new exception being raised; I just neglected to back out the PEP8 fixes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1907646", "body": "@vdboor - It's @skipIfCustomUser to maintain consistency with the rest of unittest.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1907660", "body": "This is one of the few places that I'll defend import \\* -- and it's because I've been bitten _far_ to many times writing a test case and then having it _not_ be run. \n\nAdmittedly, the real fix here is to get the unittest2 test discovery in place so that this sort of **init**.py isn't required at all.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1907660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1917612", "body": "Yeah... I thought closing out a 7 year old ticket was too good to be true :-)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1917612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1918487", "body": "get_user_model() returns the fully loaded model, so using it in a model definition would introduce a circular dependency - you need to load all the models before get_user_model() will work correctly, but get_user_model() can't work until all the models are loaded.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1918487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1956234", "body": "At that point, we're reaching the stage where documentation needs to kick in IMHO.\n\nModelBackend depends heavily on the use of Django's permissions framework. If you're not using that framework, ModelBackend is completely redundant. I don't think it's unreasonable to enforce that you need to enforce names for the groups and user_permissions attributes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1956234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/django/django/comments/1978347", "body": "See ticket #19079. A fix doing exactly this is on the way.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1978347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "streeter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1908841", "body": "Congrats!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1908841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "nicholasserra": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1909579", "body": "Yes!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1909579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "eyvoro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1913200", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1913200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "anentropic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1914874", "body": "Woooo!!!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1914874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rach": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1914886", "body": "It's Christmas before Christmas !!! Alleluia \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1914886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "phonkee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1916265", "body": "Great news!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1916265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "derega": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1918371", "body": "Why this does not use get_user_model()? Is the idea that get_user_model() is used only if contrib.auth is used in a project and the contrib.comments does not want to depend on contrib.auth?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1918371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Istergul": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1918544", "body": "miracle!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1918544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gciding": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1918569", "body": "Awesome news!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1918569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "voron3x": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1918966", "body": "+100500\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1918966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "alfuken": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1919016", "body": "Awesome! And it took only 6 years!! Nice.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1919016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "agafonovdmitry": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1919202", "body": "> USERNAME_FIELD = 'email'\n> REQUIRED_FIELDS = ['date_of_birth']\n\ncurious, why not in \"class Meta\" stuff?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1919202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "capooti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1936761", "body": "You can remove the CREATE EXTENSION postgis_topology; command as topology is not used by geodjango.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1936761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1938716", "body": "the note looks perfect to me. I have been testing it now for a while, migrating a couple of apps, and it works very well, thanks :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1938716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ondrowan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1967165", "body": "Don't really want to open new ticket until I'm sure, but shouldn't this be `StringIO` in case `content` is unicode? Or will that be part of patch from [ticket #11739](https://code.djangoproject.com/ticket/11739) at some point?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1967165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "igorsobreira": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1978333", "body": "Why don't provide `USERNAME_FIELD = 'username'` on `AbstractUser` class? And maybe a placeholder (`None`?) to `AbstractBaseUser`?\n\nThis could avoid the `getattr(UserModel, 'USERNAME_FIELD', 'username')` spread everywhere.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1978333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/1978434", "body": "Nice!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1978434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "fcurella": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1982988", "body": "@jbronn:\n\nOn PostGIS 2.0, the recommended way to create a spatial database is to use `CREATE EXTENSION` instead of using a template database.\n\nIf we still require a template database, we should at least note that in the documentation.\n\nref: https://code.djangoproject.com/ticket/16455#comment:23\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1982988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1988951", "body": "I wrote a patch the reintroduce the query, but it does it just once at instantiation time.\n\nhttps://github.com/django/django/pull/439\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1988951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mlavin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/1991051", "body": "I would agree this needs a release note. This is not a backwards compatible change in terms of HTML validation. There was a longer discussion on a previous pull request #242.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/1991172", "body": "I would probably say 'no longer' rather than 'no more' but either way this would be a good addition to the release notes.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/1991172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pydanny": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2000786", "body": ":bowtie:\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2000786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "miguelchavez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2030146", "body": "There is an error in the closing <a> tag. It has a white space, it is \"</ a>\" and should be \"</a>\". \nThis causes the admin to have a the link on every other field or even text next to the bad closed tag.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2030146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nvictor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2039792", "body": "This statement makes the test fail, because the view won't raise that exception directly since Django will try to handle the display of server errors by default. A quick fix would be to set DEBUG_PROPAGATE_EXCEPTIONS = True in your test settings. But I guess assertContains(response, 'SuspiciousOperation') could work here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2039792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/2039801", "body": "If my note above is valid then this one is concerned too.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2039801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "shaib": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2062621", "body": "The comment is in contrast with the code -- the test is run _only_ for Oracle.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2062621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/2063291", "body": "Oh, I see. It is just a little ambiguous, IMO (there _is_ a need to check Oracle quote_name semantics, but not when running on Postgres...). \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2063291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/django/django/comments/3257003", "body": "For the record, only under Python 3.[0-2]. Python 3.3 makes it kosher again.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3257003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "vinilios": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2148357", "body": "you forgot to update the ref\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2148357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ludwigkraatz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2228150", "body": "\\@skipIfCustomUser\n\nis missing currently\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2228150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "manfre": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2282136", "body": "Why was this test converted to an identity insert? This bypasses SQLCompilers and any backend that needs to do special handling for identity inserts.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2282136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "xiaomang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2354884", "body": "1.7\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2354884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "typeshige": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2482308", "body": "For the curious, it would be helpful if it stated briefly why this is recommended.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2482308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kitsunde": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2490946", "body": "@typeshige It seems like the recommendation originates from gunicorn. https://gunicorn-docs.readthedocs.org/en/latest/run.html?highlight=django#gunicorn-django I'm not sure why, either.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2490946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/2491717", "body": "@mjtamlyn I see, thank you.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2491717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "matthewwithanm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2497528", "body": "@jezdez What do you think about removing the `content` arg from `file_hash()` and moving the [file reading](https://github.com/django/django/blob/5f75ac91df2ef1c19946f65e08aa50165f061cd4/django/contrib/staticfiles/storage.py#L81-L89) into it? That way, you would be able to get rid of the potential network operations of `exists()` and `open()` just by overriding `file_hash()`. (I believe [the original reason](https://code.djangoproject.com/ticket/17896) behind this patch was to avoid network operations, but it seems that\u2014with those `exists()` and `open()` calls still present in `hashed_name()`\u2014it hasn't quite gone far enough.)\n\nAs an example of why this would be rad, I'm thinking of a `CachedStaticFilesStorage` that overrides `file_hash()` and uses the local static files to compute the hash, instead of reading over the network, a la `CachedFilesMixin.post_process()`.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2497528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "camilonova": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2549203", "body": "@jphalip nice, thanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2549203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "james4388": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2550215", "body": "Hey django 1.4.3 meet this bug again :(\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2550215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sebleblanc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2562091", "body": "Wow, what a cleanup!\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2562091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "marekbrzoska": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2621762", "body": "Never ever delete from list are iterating on:\n\n> > > dirnames = ['x', '.a', '.b', 'c']\n> > > for i, dirname in enumerate(dirnames):\n> > > ...     if dirname.startswith('.') or dirname == '**pycache**':\n> > > ...         del dirnames[i]\n> > > ... \n> > > dirnames\n> > > ['x', '.b', 'c']\n\nAnd that is not the worst that can happen (IndexError can happen).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2621762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/2621781", "body": "You can do:\ndirnames = filter(lambda x: not x.startwith('.') and not x == '**pycache**', dirnames)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2621781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dantyan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2631606", "body": "Iooo \u00f1\u00f1jjjii\u00ed\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2631606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "RichardBronosky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2650255", "body": "It would be great to see some test text that fails on the old way but passes on the new way.\n\n```\nimport re\nre_old = re.compile(r'</?\\S([^=]*=(\\s*\"[^\"]*\"|\\s*\\'[^\\']*\\'|\\S*)|[^>])*?>', re.IGNORECASE)\nre_new = re.compile(r'<[^>]*?>', re.IGNORECASE)\n\ntest_text = '<a href=\"https://github.com/django/django/commit/20ac33\" id=\"the_ticket\" class=\"not_working needs_help regex_wtf\">Partially revert 9efe1a721, strip_tags improvements - 20ac331 - django/django</a>'\nexpected_result = 'Partially revert 9efe1a721, strip_tags improvements - 20ac331 - django/django'\n\nresult_new = re_new.sub('', test_text)\nresult_old = re_old.sub('', test_text)\nprint(result_new==expected_result, result_new)\nprint(result_old==expected_result, result_old)\n```\n\nPlease replace test_text and expected_result with the breaky breaky stuff. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2650255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "EliFinkelshteyn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2677892", "body": "How come this isn't in 1.4.5?\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2677892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "konradhalas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2680192", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2680192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/2680578", "body": "If you want I can remove `%r` from exception message.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2680578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "HonzaKral": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2681274", "body": "crap, you are absolutely correct, my fault, revert is coming\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2681274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Oni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2683395", "body": "The standard usage of a \"Form\" is usually:\n\n```\nif request.method == 'POST':\n    form = MyFooForm(request.POST)\n```\n\nSince \"AuthenticationForm\"'s **init** accepts an extra \"request\" parameter it becomes a little non-consistent since you have to use:\n\n```\nif request.method == 'POST':\n    form = AuthenticationForm(data=request.POST)\n```\n\nIs it a necessary inconsistency?\n\nPossible solution:\n\n```\ndef __init__(self, *args, **kwargs):\n    self.request = kwargs.pop('request', None)\n    self.user_cache = None\n    super(AuthenticationForm, self).__init__(*args, **kwargs)\n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2683395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ratson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2720515", "body": "missing import `warnings`\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2720515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pmourelle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2728444", "body": "Thanks a lot Ramiro. I screw up when trying to use squash and mess it like a sir :P.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2728444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "santanu-dey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2770912", "body": "OSQA still needs the def get_svn_revision()\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2770912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dstufft": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2884518", "body": "Fixed here https://github.com/django/django/commit/f2a0be61517d213f23100aded043e073ea66694a\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2884518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "litchfield": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/2935076", "body": "Unfortunately this new regex causes catastrophic backtracking on some strings, which causes the whole process to spin into an infinite loop. Refer to my comments on #19237 for details.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/2935076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jdunck": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3057093", "body": "Perhaps this would be a good place to use \"from .tests import *\"? What else aren't we running? :/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3057093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "alswl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3064973", "body": "```\n                    extra={\n                        'status_code': 400,\n                        'request': request\n                    }\n```\n\nBut in this line, the request raise exception again.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3064973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "russkel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3140255", "body": "This heading doesn't look right on the docs page.\nhttps://docs.djangoproject.com/en/1.5/ref/models/fields/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3140255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "denisinla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3190924", "body": "Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3190924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "buddylindsey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3191268", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3191268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "fanzeyi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3191940", "body": ":tea: \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3191940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cannona": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3217390", "body": "Good point.  We should probably have some tests to go along with this.  I'll see what I can come up with.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3217390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lechup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3242036", "body": "On what Python did you tried your tests? On my setup I get 4 errors, with 9012833af857e081b515ce760685b157638efcef i18n/tests.py I do not have those errors...\n\nmy python==2.7.3\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3242036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/3242078", "body": "http://pastebin.com/Nvkn1sK0\n\nMaybe I'll try find You tommorow at sprint? :)\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3242078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/django/django/comments/3242099", "body": "Thanks for pointers, actually /home/lechup/.virtualenvs/django-sprint/local/lib/python2.7/site-packages/django/ is a symlink to /home/lechup/github/django/django/ .\n\nI'll try that .pth thing, but I think it is not the case.\n\nPS: Pastebin? I though about it but to late (when I've already seen big letters)... Thanks for pointing this out. :+1: \n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3242099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ambv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3242052", "body": "Both Python 2.7.3 and Python 3.3.1. No errors, nobody during the DjangoCon sprints complained after it's been integrated. Your comment will be more helpful with a traceback.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3242052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/3242070", "body": "By nobody I also mean our kindly Mr Jenkins: http://ci.djangoproject.com/job/Django/2659/\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3242070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/comments/3242089", "body": "The paths in your log suggest you are trying to run tests against a different copy of Django, installed in your virtualenv. Try the following:\n1. Create a new virtualenv without installing Django in it.\n2. Create a django.pth file in the virtualenv's site-packages with the path /home/lechup/github/django/ in it.\n3. Run tests again.\n\nAlso, do you know of a concept called pastebin? :neckbeard: GitHub has gist for instance.\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3242089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "selwin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/django/django/comments/3257535", "body": "@akaariai it seems like this line is missing `[:1]`, is this intentional? If not, I'll submit a pull request correcting this issue. You can see the original implementation [here](https://github.com/selwin/django/blob/f5cf78abdd4effd71c77863dcd055e30861187a2/django/db/models/query.py#L509).\n", "reactions": {"url": "https://api.github.com/repos/django/django/comments/3257535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "brosner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/5404504", "body": "When I run `migrate` Django spews out naive datetime objects being used due to `USE_TZ = True`. Is this something that be changed to use Django's `timezone.now` function?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/5404504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "toastdriven": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/4206240", "body": "Sorry, in which part is my grammar poor? Should it be a complete sentence?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4206240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4206299", "body": "The situation is that `import Image` works (could be either PIL or Pillow), `import _imaging` does _NOT_ work (either broken PIL or working Pillow) & `Image` does _NOT_ have an attribute `alpha_composite` (definitely PIL). Since `_imaging` isn't present, they have a broken install of the PIL & need to reinstall.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4206299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/4331790", "body": "The idea was that it'd be simpler to be able to just add (& remove in future releases) a single line than to do the import & add it to a list to be processed. But you're right, additional complexity & all that. Fixing.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4331790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8516476", "body": "Could we set a class variable on the `AppConfig` class instead, something like `is_app_config = True`? Then we can duck it, just checking to see that's present.\n\nPerhaps it's just me, but I've been bitten by `isinstance/issubclass` too many times, especially when people vendor code or when there's a genuine reason to have a different base class. OTOH, that may be overkill here.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8516476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/8516536", "body": "A couple comments around/within this block would be nice, explaining the conditions it should happen under. It took me a couple reads to understand why the final statement wasn't dedented a level (seems like you _shouldn't_ be able to exit this method without setting `self._models_loaded = True`, until understanding that `populate_models` may have been called one or more times previously in the stack).\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/8516536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "matthiask": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/112838085", "body": "Thanks for the feedback! I now mention that the exception is a value error, and give some additional advice when to use this. ", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/112838085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gnosek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/3126782", "body": "Wouldn't the following be clearer and possibly more future-proof? (here and in line 111 as well)\n\n``` python\nif escape:\n    value = mark_for_escaping(value) # from django.util.safestring\n    if isinstance(value, EscapeData):\n        return escape(value)\n```\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3126782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/3127165", "body": "\"min_num (%d) must be less than or equal to max_num (%d)\"?\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/3127165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "zerok": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/django/django/pulls/comments/4237284", "body": "Since also tempfile is also part of the stdlib, I'd add it to the same block as sys, shutil etc.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/4237284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/django/django/pulls/comments/7875207", "body": "The comment is IMHO not really necessary since the name speaks for itself and it kind of separates this from the rest of the CSRF related settings.\n", "reactions": {"url": "https://api.github.com/repos/django/django/pulls/comments/7875207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}