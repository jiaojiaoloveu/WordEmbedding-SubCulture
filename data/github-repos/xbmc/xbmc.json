{"_default": {"1": {"Rechi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/a341baddb0e7e4de3ac6d4ee17cc7cd1192a7511", "message": "Merge pull request #13414 from Rechi/cleanup/warnings\n\n[fix][android] Geometry.h move missed at 7ec2489"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b9ef8fafd8ce877f35b1fbc1beeb2efcd4cd6f18", "message": "[cleanup] silence parentheses warning"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/969e941dfda27465e8fe0f92c66bcb20c11de4ef", "message": "[fix][android] Geometry.h move missed at 7ec2489"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/972da54fb4daee84d8dceabe3f8b365b931ac482", "message": "fixup! Link against curl instead of using dlopen"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/58dc67495f5d71225d17faa58970b937727ce9be", "message": "Merge pull request #13369 from Rechi/depends/rendersystem\n\n[depends] mark app_rendersystem as substitute variable"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/87ede35aad9e586da844cb746dbcda34c3bc7910", "message": "[depends] mark app_rendersystem as substitute variable"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2e9b25e4c45bf9afbb543a68b625d809f85265e9", "message": "[depends] fix APP_RENDER_SYSTEM variable name"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7599d0e428979012347500ade713ce9a55e30412", "message": "[fix] CID 1427452: Copy into fixed size buffer"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7a6185c7930ac9932be8fe8fc0d9cf8a0d2821c1", "message": "[fix] CID 1427451: Copy into fixed size buffer"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f5b13b0071105599fb1603903815b61f04f0b5e3", "message": "[fix] CID 173431: Resource leak"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/68ce3e882b93704d8974f402745372a6c8b3a6bc", "message": "[fix] CID 77588: Resource leak"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/794bfa5206ee1ec6e62b8654f77572f3d63a7eee", "message": "Merge pull request #13328 from Rechi/bumpPython\n\n[depends] bump python27 to 2.7.14"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ab80eab6dd4074a89e877b34516d7ba5c2b51705", "message": "[depends] bump python27 to 2.7.14"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/48eb261008ab342a68d44645b233ee9cdc487db6", "message": "[depends][python27] rename patch files\n\npython in the name is redundant"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0dc22173fe84e040b32f3e180f5c0a33b965f836", "message": "[depends][python27] fix whitespace of a patch"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/1f1283802f572c27b713be2edab0e1295a920106", "message": "[depends][python27] don't use built-in expat"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0df5de22a7153e322d295820f91edee40e64aead", "message": "Merge pull request #13336 from Rechi/cleanupWarnings\n\n[cmake] move ifdef conditions to cmake"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a9ae1f38a80b9fc4d50f3b2d31f3262c1508adf6", "message": "[cmake] move ifdef conditions to cmake"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/33a30965d49ffde9fb3c12f91b022d9a770f7a8f", "message": "[cmake] add TestNfsFile"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/68d5498909a1f225a6ce006269d8aa4d086b0f6d", "message": "[cleanup] remove ifdef conditions already handled by cmake"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d997bbde3f162795bcacb3506f21461d412309bc", "message": "[cleanup] only OSX uses SDL"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c262275e6707c7da48e69f4cdee58e0cc133c303", "message": "Merge pull request #13310 from Rechi/bumpExpat\n\n[depends] bump expat to 2.2.5"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c90d3ee45278fc3dafe9eb7adf481e2dea927699", "message": "[depends] bump expat to 2.2.5"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13394", "title": "[depends] curl: remove specific osx version", "body": "## Motivation and Context\r\nAs curl is now build static (#13360), symbols from shared system curl don't affect us anymore (#6287).\r\n\r\n## How Has This Been Tested?\r\nplayed videos from http source\r\n\r\n## Types of change\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12807", "title": " tvshowmatching: match xx.xx.xxxx as dd.mm.yyyy", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\ntvshowmatching: match xx.xx.xxxx as dd.mm.yyyy\r\ndot separated date format normally is interpreted as dd.mm.yyyy instead of mm.dd.yyyy\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\nfix https://trac.kodi.tv/ticket/17592\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nScraped dummy files with different date formats\r\n- `The Daily Show/05.09.2017.strm`\r\n- `The Daily Show/2017.09.05.strm`\r\n- `The Daily Show/2017-09-05.strm`\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n<!--## Screenshots (if appropriate):-->\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [x] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12738", "title": "[addons] treat repository.xbmc.org as override repository", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nIf an addonid is in the override repository, versions from other repos with the same addonid can't be installed regardless if those versions are higher, lower or equal.\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\nBlock other repositories from overriding addons which `repository.xbmc.org` contains.\r\n@MartijnKaijser FYI\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nTested with `repository.ytplugin` which had the same version of the youtube addon, but version from youtube repository wasn't show, as expected.\r\nAlso used `repository.kodinerds` which had a newer version of `service.fussballpopup` (than `repository.xbmc.org`), but only the version from the xbmc repository was installed, even if going to install from repository -> kodi nerds and install from there. (as expected)\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n<!--## Screenshots (if appropriate):-->\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FernetMenta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/3155103945448f658ba4d520797093ffeee7cae9", "message": "Merge pull request #13413 from FernetMenta/paplayer\n\npaplayer: fix bookmark at end of playback"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b817728a104fe5d67ac9a80450153276a0c1a851", "message": "paplayer: fix bookmark at end of playback"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4d568cb115ce31fc1a61529a55f1647194cce890", "message": "Merge pull request #13408 from FernetMenta/vaapi\n\nVideoPlayer: vaapi - fix bob and yadif methods"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3c06c796b6c86e72d458bf5b4345f12d1ecea996", "message": "Merge pull request #13404 from FernetMenta/audio\n\nAE: fix compensation distance"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3b3111b03b178cb92d5c3b407661e199a6f6f426", "message": "VideoPlayer: vaapi - fix bob and yadif methods"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/1f12e64618d1cbb11f1878e2915c2dda540ccf85", "message": "AE: fix compensation distance"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/69a6725a4269a69744feb8465540b07e8510a375", "message": "Merge pull request #13383 from FernetMenta/paplayer\n\npaplayer: fix playcount for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/62ff2eb0a6da0bf25c9ea5a0e3ba531869b36b75", "message": "paplayer: fix playcount for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0e33e2fdf420353102503460ab7a2f2ec4cc2881", "message": "Merge pull request #13370 from FernetMenta/bluray\n\nVideoPlayer: fix segfault when stopping bluray playback"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/da3d4e54c963f1281c30086c35726ec8b3c77ec5", "message": "VideoPlayer: fix segfault when stopping bluray playback"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/79b9e4860cbea43afd2398b7497a738836ed170b", "message": "Merge pull request #13362 from FernetMenta/x11\n\nX11: fix videosync on Intel"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/732be44bd71ce587c641ec68248cf4183d596904", "message": "Merge pull request #13363 from FernetMenta/paplayer\n\npaplayer: fix player times for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/948537138d203b52312b395b847319644c4d22ee", "message": "paplayer: fix player times for cue sheets"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3d40566fd6d74d7aecd63b035930d0a3f095f661", "message": "X11: fix videosync on Intel"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/77452d7df75a39bb1e748654668430277297f896", "message": "Merge pull request #13349 from FernetMenta/warning\n\nsettings: drop warning log, reduce log spam"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/498d91dd560c5914ecd6fb92e0d5eca8f5815e29", "message": "Merge pull request #13351 from FernetMenta/vpoutbound\n\nVideoPlayer: fix order of outbound events"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2a55e3f3cb07e4f204d5477a654d061719623cdb", "message": "settings: drop warning log, reduce log spam"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e91f9e9afef85d32011277822c3595c6f0a3991d", "message": "VideoPlayer: fix order of outbound events"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c42631e5097156c300cd0b89a0b866d0ed399026", "message": "add LambdaJob to JobQueue"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f638e4087b7346131580682b9f6c0ce4f72120fa", "message": "Merge pull request #13345 from FernetMenta/vpfix\n\nVideoPlayer: fix audio/subtitle delay"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cb00b62f4b3115b5e4e62d6b04605c8fb5dfae67", "message": "VideoPlayer: fix audio/subtitle delay"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2215d8e0c892072d92e757fee87a2eb6bdb8b2c9", "message": "Merge pull request #13337 from FernetMenta/playfile\n\nrelease application player if new type does not match old one"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/249f61cc1e3b4ecc4e15eccaf15d537a73edc546", "message": "release application player if new type does not match old one"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/adf334c35bffcac9d0406a17538ef5daf7a143b6", "message": "Merge pull request #13334 from FernetMenta/audio\n\nAE: register setting handlers inside ActiveAE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f19277138f3861ea977ab61050dcffb96f6d2e65", "message": "AE: register setting handlers inside ActiveAE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ba1dae51917c97f34fb9355e02cc96bda92798e8", "message": "Merge pull request #13325 from FernetMenta/tempo\n\nVideoPlayer: advanced setting for max tempo"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d16fa18d89234571787e68386cba8fd72ac4b21a", "message": "Merge pull request #13324 from FernetMenta/vpfixes\n\nVideoPlayer: fixes"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/5c568432f7cebaf61a9ce9208ee78c0f4c9f2807", "message": "VideoPlayer: advanced setting for max tempo"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/80b50c691d8b40a1d76c15ee73931292e3a3697c", "message": "VideoPlayer: GL - re-add nonliniear stretch, was removed by accident"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7b26d3539001ed8517addcb6a7e0189191083345", "message": "VideoPlayer: fix time_offset for GetTimes"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7366d285dc93ff00e0f0d1fca0db8f354075bd66", "message": "Merge pull request #13301 from FernetMenta/playfile\n\nfix and simplify PlayFile"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/61badc49bcbe269e3241451a4baa9431dfa53b24", "message": "fix and simplify PlayFile"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13411", "title": "fix segfault", "body": "fixes segault introduced by https://github.com/xbmc/xbmc/pull/12213", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13401", "title": "filesystem: set proper check size for smb", "body": "fix https://trac.kodi.tv/ticket/17728\r\n\r\nreading 4k chunks from smb shares makes no sense. with increasing number of high bitrate files this fix get more important.\r\n\r\nNote:\r\nSome Pi users who use modified code for caching report issues when reading bluray iso files from smb shared. Those PI builds have switchs on file caching for LAN, not default, and popcornmix has modified code for caching.\r\n\r\n@popcornmix I am not able to reproduce any issues with master branch.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pkerling": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/04f386ef4964310e87b147cca50e68b89fca1ea7", "message": "Merge pull request #13403 from pkerling/move-geometry\n\nMove Geometry.h to utils"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7ec2489f4f264e1e5967ce648a143dbfff965da6", "message": "Move Geometry.h to utils\n\nGeometry.h is used in many places that have nothing to do with guilib.\nAlso, the classes in it are generic and not limited to GUI tasks in\ntheir purpose. This commit moves the file to the general utils\ndirectory so this intention is made clear and there are no\ndependencies on guilib sprayed over the code going forward."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/27a2e3d362b6ba04e5f1a558ad30a519a3d5a8bb", "message": "Revert \"[cmake] [wayland] Require wayland-protocols >= 1.12 for xdg_wm_base\"\n\nThis reverts commit 6b1e800e11ab82b544b4ff1883b789547d5cc01c."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2292165445877e56ba70d3607510662b18f62d6d", "message": "[wayland] Use xdg-shell.xml from waylandpp\n\nUbuntu 17.10 does not have recent enough wayland-protocols for building\nwith xdg-shell stable. To avoid having to package it or adding ifdefs\nto support building with older wayland-protocols, use xdg-shell.xml\nfrom waylandpp."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/5681c4f132ffb96c92df11820dbfb9989ba170d5", "message": "Merge pull request #13344 from pkerling/wayland-xdg_shell-stable\n\n[wayland] Support xdg_shell stable"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cd651dbbf20834290ab087058ed0bcc39b8f3f52", "message": "[wayland] Fix compiler warning"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/27d61dfb26924c28f18f2b9c693aee5ca42b162e", "message": "[wayland] Prefer stable xdg-shell shell surface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7dd54e184dd841cfe5da27cfe453f4faf67c293b", "message": "[wayland] Add stable xdg-shell shell surface implementation"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/6b1e800e11ab82b544b4ff1883b789547d5cc01c", "message": "[cmake] [wayland] Require wayland-protocols >= 1.12 for xdg_wm_base"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d57c79deafe681a6f1e523d58c24ceed714a46bc", "message": "[depends] Bump wayland-protocols to 1.12"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9320596c0a805a9a3d42d81a235dcffd3b7c5055", "message": "[cmake] [wayland] Bump waylandpp dependency to 0.2.2"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3c5b1e089f58110d3cc090b1c97caab1efd4bb04", "message": "[depends] Bump waylandpp to 0.2.2"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f6aaac0295f3fe5485908ac20de5348346337db9", "message": "[cmake] Do not overwrite PKG_CONFIG_PATH\n\nSetting ENV{PKG_CONFIG_PATH} completely overrides the user-specified\ndirectories and will lead to packages not being found if PKG_CONFIG_PATH\nwas already set to a non-standard location.\nIt is also not necessary since CMake >= 3.1 will add the\nCMAKE_PREFIX_PATH to PKG_CONFIG_PATH anyway if not instructed otherwise."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/efe30507783ce1fd438df7d0a7d86459dc176585", "message": "[cmake] Fix freebsd wayland include"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0a1219eeb99466fe295824d5a42329ddf55976d0", "message": "Fix compiler warning"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/69b3bf93ec6d9141c9256b96916edbbd4f52cb3e", "message": "[wayland] Draw transparent border around visible border as resize grab"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7e8a3020b5ea5a450fb2e9f5cd5a2e71a3218f1b", "message": "Fix indentation"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0810722bc058f85840e4d4cae21665d2bf573418", "message": "[wayland] Fix some off-by-ones in decoration drawing"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7926dd1c627376ccfa345144f65efbe7d6dcb867", "message": "Allow addition/subtraction of CSize to/from CRect"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/eab1b817d5a68e555bd4f77dcee18376566a81d4", "message": "[wayland] Support older XCURSOR themes by falling back to old names"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/486b22a1e8f6e30e55f0f527e1658c9adf1bad82", "message": "[cmake] [wayland] Specify minimum version requirements for waylandpp and xkbcommon\n\nwaylandpp 0.1.5 for const-correct cursor functions\nxkbcommon 0.4.1 for xkb_state_key_get_utf32"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a7bb932a9281d14c4461e1afbd29b96af53e2588", "message": "[cmake] Require pkgconfig for libxkbcommon\n\nSince we will require a minimum libxkbcommon version, just finding the\nheaders is not enough and configuring will fail anyway if xkbcommon\nwas not found through pkgconfig."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/839b55092bd9dd955db9e3bbd3e647b3452f5dd8", "message": "[cmake] Reorganize Wayland detection\n\nThis now requires pkgconfig for correct operation. This should not be\na problem since wayland is only used on UNIX platforms anyway."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2fff60fc3c280f08f56873b95c952c2d171c159f", "message": "[depends] Link xkbcommon pkgconfig file from host\n\nxkbcommon is required for Wayland build"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/91f53a90823e0f71fe3b15a075ca04b73235535a", "message": "[cmake] Bump required CMake version to 3.4\n\nso we can rely on pkg_get_variable being available"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c26404b56118072d6933580908d270b7d6d5ddab", "message": "[cmake] Allow specifying version requirements for dependencies"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f4803e478b52b7ca8948bc99c9350a143c224f37", "message": "[cmake][wayland] Deduplicate identical CMake file for BSD and Linux"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13333", "title": "Support for vaExportSurfaceHandle", "body": "\r\n## Description\r\nReorganize Vaapi EGL interop so we can also render with vaExportSurfaceHandle\r\n\r\nThis is WIP, but open for discussion.\r\n\r\nTODO:\r\n- [ ] Check whether this still works on intel, especially HEVC10\r\n- [ ] Modify interop check name to deep color instead of hevc (since it doesn't really check anything hevc-related)\r\n- [ ] Find out if this works reliably on AMD due to possibly missing vaSyncSurface support\r\n- [ ] Check vaapi and ffmpeg postprocessing/deinterlacing\r\n\r\n## Motivation and Context\r\nHardware decoding with AMD GPUs is only supported with this new method\r\n\r\n## How Has This Been Tested?\r\nRun-tested with H.264 and HEVC10 on Linux/Wayland/AMD GPU\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "peak3d": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/6b3552ed9cdd36ee211675a3521d7921bcdaa446", "message": "Merge pull request #13391 from codesnake/aml_init_framebuffer\n\nwindowing: amlogic: set framebuffer to maximum size before initializing EGL"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/19b82f92235b1fb469d77b0b2cd0723edaf7cb7d", "message": "Merge pull request #13387 from peak3d/effective\n\n[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d19ef91b59ad064b3677e4bc60ba0866522c377b", "message": "[Filesystem] Add EfectiveUrl translation in addon interface"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0ca1bd7d00174131202dd2a8be1c56899918972a", "message": "[depends] let caller control target build options and ffmpeg options"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a4d5cafaff96ae2b68bddd057738dca30c62f758", "message": "Merge pull request #13339 from kszaq/aml_vp9_fix\n\nAMLCodec: fix hardware-accelerated VP9 playback"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/44478195a16aaae57d96e89e3e20fe2b83438d4b", "message": "Merge pull request #13368 from Owersun/master-remove-omx-pts\n\nAML: remove check for no longer used amlvideo/omx_pts"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Voyager1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f76596691a74289a5408664f1eb13a2cd0a9d606", "message": "Merge pull request #13407 from Voyager1/resume_after_sleep_fixes\n\nResume last played media after sleep - DVD and stacks update"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/5169eaec52ab1a389a36308b07db1252e4a0d365", "message": "Resume last played media after sleep - ISO and stacks update"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b6e091360625ed8835ddbd902146f8ad8b66274e", "message": "Merge pull request #13359 from Voyager1/fix_guifocus\n\nfix focus being lost when that was not intended"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cbd6f1b98cecf8ec61c5af41347236e3025da37d", "message": "Merge pull request #13356 from Voyager1/fix_estuary_lostfocus\n\n[Estuary] fix loss of focus and navigation on the Home screen"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ed9895e8bb4902cc41760cdd18f3bd2df218d0b6", "message": "Prevent invisible back-button to gain focus when on Home screen"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ecf69bafc10989333ff73116c6576022d544a507", "message": "fix focus being lost when that was not intended"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/94bcd5cc4f72e69d1b9dd1044f235e4e7373b44b", "message": "Merge pull request #13357 from Voyager1/fix_flac_playfromlib\n\n[fix] MusicDatabase Songs set real path to avoid passing MusicDB URLs to player/demuxer"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cc117454692ecd7527523eaafcd8b2838d3c23f9", "message": "[fix] don't pass musicdb url's to player"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/db046cf5746eae31c160654ebb0db5dd67455c8a", "message": "Merge pull request #13288 from Voyager1/offset-conversion\n\n[RFC] Get rid of frames-(m)sec conversion"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d1d6fc539562a1f5139987dd02c4d67733d51b5b", "message": "update music db start and end offset from frames to msec"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/99435bbbad66ababada6d27d6bb02b09ebec13a2", "message": "fix missing PRIi64 macro"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/6efbe1d9257bb743808d1d1168865884cd1037e9", "message": "Bulk Rename Offset to MilliSecs"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/8dd28a0a03ceaf364b54162c5844be7c37f6a8bb", "message": "Cue sheet standard format still uses MM:SS:FF format so ensure conversion"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0067b758d94b4e2caf8b78c3959f8f44d5ce28a", "message": "Get rid of the old frames unit and store startOffset/endOffset in milliseconds"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/5bd5ef72cb99028b7cc0da69c194380973a6d0be", "message": "Get rid of repeated constants in conversion between frames/offset (75ths of sec) and seconds/milliseconds"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a2020b6122d97d033e9d891f594aa27ebd03a624", "message": "stackhelper clear needs sync with m_itemCurrentFile"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043", "body": "rebase done, thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158", "body": "corrected cosmetics\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213", "body": "closing and replacing with another pull request from separate branch.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918", "body": "who's currently responsible for the dvdplayer code? (haven't seen elupus contributing lately).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/705918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744391", "body": "hello elupus - I have updated the commit according to your input. \n1. No longer misusing seekchapter\n2. When in Menu, since dvdplayer doesn't really know the real program chain id, we call OnPrevious/OnNext instead. This is safe with regard to the dvd stacks since we're in menu structure ONLY.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771584", "body": "great, thanks!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781045", "body": "I think so, commit was accepted by elupus\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/324155", "body": "Hi jmarshall: for some reason I still need to have ....\\xbmc\\guilib\\; in my list of additional include directories (Win32 - VC2010) because otherwise it fails to compile because not finding \"Resolution.h\" in many other files.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324404", "body": "the problem was always with xbmc/xbmc/cores/IPlayer.h , line 27: #include \"Resolution.h\"\nUpdate: I just looked and it still is like this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324425", "body": "ok, never mind. This was because one of my patches I'm using :-) My sincerest apologies.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/345347", "body": "on Windows 2 header files are missing so compile is broken: enable_shared_from_this.hpp and weak_ptr.hpp. I downloaded these from the net and added them manually to fix it... \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/345347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/345459", "body": "thanks - I had added the same versions and no issues with build thus far...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/345459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "MartijnKaijser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/73718f6fff191a5ae65d989ff77846be51dd21a7", "message": "Merge pull request #13400 from koying/chgdroidguiview\n\nCHG: [droid] Draw GUI on own View"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e4074d84d1809f7959e19df12ac3d23950f39a49", "message": "Merge pull request #13377 from kszaq/aml_nativewindow\n\nWinSystemAmlogic: don't strictly depend on fbdev_window"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c2e8a2ba831df7516539df95fc410f706f62df75", "message": "Merge pull request #13381 from lrusak/android-network\n\n[cmake] android: add HAS_LINUX_NETWORK to system defines"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/97ec14b71c79ee8903f73a688980427d044562a1", "message": "Merge pull request #13378 from koying/fixdroidarm\n\nFIX: [droid;amc] arm issue under libc++"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3873f14aa1e5ef1e9e1e8852173ceeb5e0719008", "message": "Update new splash screen for v18 alpha"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/8de4d396dd9e39c04cc69c4059aa6743778c9a7c", "message": "Merge pull request #13353 from garbear/fix-crash\n\nFix crash due to out-of-order resource destruction"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d7d9f9cd3de20cef73d47653fc945dfa5374cacd", "message": "Merge pull request #13269 from koying/fixwsgi\n\nWSGI changes"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/18013a1230d2adb1310f1cb2868e9f3452d42776", "message": "Merge pull request #13343 from notspiff/visible_not_hidden\n\nfixed: use visible, not hidden"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d8663415df468539bfa617ad31aa2128a0faf7ab", "message": "Merge pull request #13329 from xhaggi/follow-up-13326\n\n[cleanup] drop dependency to weather manager from CSettings"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/64448686749865e4a86451403794e89740eeb0d8", "message": "Merge pull request #13154 from fritsch/ffmpeg341\n\nFFmpeg: Bump to 3.4.1-Leia-Alpha-1 after rebase"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d41eb5494153df53aab38226cb65365f9e9e1ee0", "message": "Merge pull request #13213 from ronie/estuary-mastermode\n\n[Estuary] fix mastermode label in button menu"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0d733517e6b861dad90bc30e15746baac3ef6659", "message": "Merge pull request #13062 from chewitt/smbclient_leia\n\nsmbclient changes for smb minprotocol and legacysecurity"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/06e2e5c7c6810ab051deca0bf3b9cd1d0e6a641b", "message": "Merge pull request #13175 from fritsch/comparenocase\n\nFix usage of CompareNoCase"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/77c5217cea0c6d1335f4d640599e879bc82120ba", "message": "Merge pull request #13309 from fritsch/aesettingsv2\n\nActiveAESink: We can only do PT if at least one PT format is supported"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/226a5ea30c1ae297bb9a906a8955dc206e4d89f1", "message": "Merge pull request #13284 from Paxxi/cmake_sdk_ver\n\n[xbmc][WindowsStore] Set store minimum version"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/138fa3935a5ddf8ee2becb4dde8d143bd3d5b1ff", "message": "Merge pull request #13289 from pkerling/splash-jpg\n\nAllow splash to be JPG also"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koying": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/87cb8a3326588cabde3114576ce192cf2a03218f", "message": "CHG: [droid] Draw GUI on own View"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/67c3ce04c828c007b32662d45befb59e930674ef", "message": "Merge pull request #13405 from koying/rmdroiddebuggable\n\nFIX: [droid] let gradle handle debuggable"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4b1adea409a52daf9a2b2718a153fe5279b3cf15", "message": "FIX: [droid] let gradle handle debuggable"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/330a57399863141c3e16cb4d2731d759008f8d57", "message": "FIX: [droid;amc] arm issue under libc++"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0e54d9bc4ed1da2488330256a62e6f5ac5fb75b6", "message": "Merge pull request #13331 from koying/fixoreo2\n\n[droid] switch to jni for json and bitmaps"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d1bc22e13e221f052364061ae86371b345683827", "message": "FIXUP: [droid] leanback < O Recommendations"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2136b5757624d6cee4dd42c08a885beb8fa444c5", "message": "CHG: [droid] replace image provider by file provider"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b1425bb2b6606f189c0db3bd9d3054434371d7fd", "message": "CHG: [droid] use jni to read files"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d139c83822cd1eec51b8db4cff135a1897337e5c", "message": "CHG: [droid] implement jni JSON-RPC transport"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/03005571af29945ff3fb22b62ffd6ea9b060cf8e", "message": "Merge pull request #13330 from koying/fixdroidjniref\n\nFIX: [droid] \"Attempt to remove non-JNI local\" messages"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/218e94611b9f8eaeb2c5b6da1757c4265c8c7d7f", "message": "FIX: [droid] \"Attempt to remove non-JNI local\" messages"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/fd5ffe141d3b06fe8891d69c65f3ce3ea6a2ae4b", "message": "Merge pull request #13302 from koying/fixoreo1\n\nVarious Oreo leanback fixes"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13307", "title": "[WIP]: websocket does not handle frames > 1024 bytes", "body": "@Montellese @topfs2 There is a bug in our websocket implementation that it assumes that a whole websocket frame will hold in a socket buffer (currently 1024B)\r\n\r\nIf not mistaken, the RFC does not set a max value, so ideally, we should buffer on the websocket side until we get a full frame.\r\nWould one of you have time to properly fix this?\r\n\r\nFor my use case (a batch of 20 media details retrieval request, leading to a request of ~4KB), I just increased the tcp buffer, which is just a quick hack, ofc.\r\n\r\nThanks", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13191", "title": "CHG: Allow to downgrade resolution", "body": "Kodi already allows to \"upgrade\" resolution, eg from 1080p to 2160p.\r\n\r\nThis also allows Kodi to \"downgrade\" the resolution, eg from 1080p to 720p.\r\nReasoning is that the TV will always do a better job at upscaling than we do, so better switch to a resolution closest to the one of the video.\r\n\r\nI'm not sure of the reasoning for the 3D specific handling, tbh, so that might need rework.\r\nMy only personal use case is HTAB/HSBS, whose format is always 1080p.\r\nThe HDMI ref only define a 1080p 3D mode, so we might want to force to 1080p, possibly.", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12311", "title": "FIX: ensure real filename from videodb in playlists", "body": "fixes issue when downloading subtitles side-by-side", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12275", "title": "WIP: [droid] get audio devices capabilities from API", "body": "As discussed in https://github.com/xbmc/xbmc/pull/12229\r\n\r\n/cc @fritsch @MartijnKaijser ", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tamland": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/465fbf17a75634db50b6d6e0136736b197425043", "message": "Merge pull request #13396 from tamland/event_stream_order\n\nevent stream: fix order"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/8269ffb3ec0b43afab217e5e2d1b8e05c098ffa2", "message": "event stream: fix order"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13410", "title": "[jsonrpc] fix GetFavourites after dd29b3e", "body": "The JSON API `Favourites.GetFavourites` method was broken by the favorites refactoring of #11967 - \"type\", \"window\" and \"windowparameters\" were no longer returned correctly.\r\n\r\nThis fix restores the API functionality, although notes that the way favorites are  supported could be greatly improved.", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Paxxi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f4b111a0e01d04cad926ce056b1b59811987cac7", "message": "Merge pull request #13399 from Paxxi/gitignore\n\n[xbmc] Update .gitignore"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b823781c5a59013b307593023e83e61430829a48", "message": "Update .gitignore\n\nIgnore build* to make it easier to use multiple build dirs at the same time and true out of tree builds means any of the git stuff in VS doesn't work.\n\nIgnore some stuff created when using VS2017 open folder"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/68fc8d0c23a61e1c1a0cf4e09105bc071292c20d", "message": "Merge pull request #13360 from Paxxi/dllcurl\n\n[xbmc] Link against curl instead of using dlopen."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/672ab5ac4df87a5cae18906e001f640d5a80cf13", "message": "Build curl as static library in depends"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b6f32bb37a568a284a25dd4b63068bf900402489", "message": "Fix inconsistent formatting"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3f32f55ee7139fe3b4132b292986d87f925d71c4", "message": "Link against curl instead of using dlopen"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9d1230339391836170be3f71aa6f21aaff5b1fbf", "message": "Merge pull request #13355 from Rechi/fix/coverity\n\n[fix] coverity issues"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/863266b40e7a203de05d79df28182ea5e1f8eabf", "message": "Merge pull request #13253 from Paxxi/temp_name\n\n[xbmc][improvement] Add a platform abstraction for temp files / directories"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f6203e25d5d4578d22cf88abae2874c069010a69", "message": "Add a platform abstraction for temp files / directories to system folder.\n\nMake use of these in the test suite."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4e01f3da2b0f17bd4da4c507691666695393527a", "message": "Merge pull request #13279 from Paxxi/vswhere\n\n[xbmc][win32] First step in supporting VS2017"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/34b58e259ca3c99ac032efbbebcb5ce1b61c6ec9", "message": "Adds vswhere as a package.\n\nWill try to find vs2017 and fall back to vs2015 in case it's not found.\nSDK version is still hard coded and pinned to 14393 to avoid any breakage on jenkins."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/1218b57864d80bcb667d29d82fa5f3d860cd4464", "message": "Set store minimum version\n\nThis Specifies the minimum runtime version of Win10 that we support as koying figured out.\n\nFor now this won't do anything at all but once we bump the sdk to the latest version it's important to keep this at least one version behind unless we really need something from the latest version"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13409", "title": "[xbmc] Turn DllLibCurl into a proper curl wrapper.", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\nThis is part 2 of #13360 and aims to turn DllLibCurl into a proper wrapper class for Curl.\r\nMost of the work is done in the first commit before moving files to make the review easier.\r\n\r\n### Design Goals ###\r\nWrap Curl to avoid curl types and curl headers leaking into the rest of the project.\r\nAdd an abstraction over Curl that's hopefully easier to use.\r\n\r\n### Details ###\r\nThis renames DllLibCurl to CCurl and moves it into platform instead of filesystem. I was thinking about adding an externals folder but with curl maybe ending up being the only wrapper it made little sense.\r\n\r\ng_curlInterface and it's caching of connections is gone to avoid global state management that at best provides a negligible performance increase.\r\n\r\nA very simple class `CCurlGlobalInit` is added that's only job is to init/deinit curl globally and set up locks for static linking.\r\n\r\n### Doubt ###\r\nAfter I started on this I started doubting myself a bit so curious about others thoughts on this. Same goal can probably be achieved with a somewhat redesigned `CCurlFile`.\r\n\r\nMaybe use `std::error_condition` instead of `std::error_code` as I learned that technically std::error_code is for system errors and std::error_condition is for \"other\" errors.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13366", "title": "[xbmc][windows] Fix a bunch of warnings for windows x64", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis takes us from ~1260 warnings to ~1030.\r\n\r\nLeft them as a few separate commits for now for easier review, should be squashed before merge.\r\n\r\nthis touches on your stuff @tamland  and @garbear so please have a look.\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13361", "title": "[xbmc] Added clang-format that roughly matches our current style", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nThis adds a .clang-format that tries to match our current style guidelines. One change is that it does wrap long lines so applying it on a whole file does result in a lot of changes.\r\n\r\nWe've discussed a few times how to go about changing the whole codebase and not come to any consensus so this PR isn't trying to solve that.\r\n\r\nHaving a .clang-format in the repo does make things simpler without large scale reformatting as it can be applied to a single file when it's being touched or using various IDE/extensions it can be applied to parts of a file being edited.\r\n\r\nI've used https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat for Visual Studio with good results.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nTo make it easy to review the style I did apply it to CApplication.\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11520", "title": "[win32][fix] This is the non-backport version of the addon installation fix", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ksooo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/a7868186b63125f3b8d5845d278fd3655849c5be", "message": "Merge pull request #13402 from ksooo/estuary-pvr-guide-tweaks\n\n[PVR][Estuary] Guide window teaks for more consistency and readability."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0102d1094be7847cefdfe59c29d64801f7c0afc", "message": "[PVR][Estuary] Guide window teaks for more consistency and readability."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7781900ea8c2289ec7f368abdc4259439865194f", "message": "Merge pull request #13398 from ksooo/pvr-fix-guiinfo-epgeventprogress\n\n[pvr][guiinfo] Fix PVR.EpgEventProgress."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/eb1301a58e3113bf063d91204d24abfed06ab248", "message": "Merge pull request #13397 from ksooo/pvr-fix-guide-window-crash\n\n[PVR] Guide window: Fix crash when switching profiles and both old an\u2026"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/236fc813fbd8837673ec14a18bcc013531c788b0", "message": "[pvr][guiinfo] Fix PVR.EpgEventProgress."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/124ac6f4037f2c40e613e1d5feb0f358553efe38", "message": "[PVR] Guide window: Fix crash when switching profiles and both old and new profile have guide window set as startup window."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e98464a9544792a1a4d9a81eecbfb810ceff19e8", "message": "Merge pull request #13392 from ronie/bikesheddingtothepoweroften"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/33d85ac2f8a11b19d44c901c25722491e0fbf92a", "message": "Merge pull request #13389 from ksooo/video-fix-getresumestring\n\n[video] Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (on\u2026"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/dbab3db9de478fee0e35c660ef220d6021a7f8a0", "message": "[video] Fix CGUIWindowVideoBase::GetResumeItemOffset after #13288 (one more 75 missed)"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c8e69045fe7d3e3dd72f011d535c256bfbe29998", "message": "Merge pull request #13384 from ksooo/pvr-guide-channel-group-selector-refactor\n\n[PVR] Guide window: put channel group selector implementation into own class"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c778e5b7f553e255db0c53ad72c93b57313f9cfe", "message": "[PVR] Guide window: put channel group selector implementation into own class."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a462148dd3f9a01d799db30a6ed9bb89838af80a", "message": "Merge pull request #13379 from ksooo/pvr-fix-osd-close\n\n[PVR] Fix: Do not auto close OSD if it was opened manually by the user."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a1e83b88d42ea15f4ef764d84f18142ebe6b7484", "message": "Merge pull request #13382 from ksooo/pvr-guide-channel-groups-selector-back-to-square-one\n\n[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c13af596aa8de10097e87bcf170e81ecfcbede7", "message": "[PVR][Estuary] Guide window: Change channel groups selector layout."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a42a8fa4a403a0a89252a0f73632964616c08e5c", "message": "Merge pull request #13380 from ksooo/pvr-ksooo-never-ever-will-become-a-good-skinner\n\nAdd missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/dea106e71df88138e717f6a784bf4d7a4659487d", "message": "Add missing visibility condition for channel group selector background image."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2e2c752c0f0b5a476bf2163698172fd3b56426b3", "message": "[PVR] Fix: Do not auto close OSD if it was openened manually by the user using ACTION_SHOW_INFO."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2250dcc9ad11d1f093f2eeacd70ec7e26dfd9ace", "message": "[PVR] Refactor channel group's path handling."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/89ea0b5a080cdfddbdc78b52c95b40b02ac58df5", "message": "[PVR][Estuary] Guide window: Add channel group selector."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/089ffc36375a0bb374c6e3402d3dad3624ea749d", "message": "Merge pull request #13365 from ksooo/pvr-episodename-parental\n\n[PVR] Add missing parental check to CPVREpgInfoTag::EpisodeName."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/85035c7bb109263c826c2c05ea78c91621936951", "message": "[PVR] Add missing parental check to CPVREpgInfoTag::EpisodeName."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2f2abced8370314341665531aaa9f73d57e10424", "message": "[PVR][Estuary] PVRInfoPanel: Add percent played progress bar, for example for recordings."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7403b86665e0a34a499629b96748ca689a90f30f", "message": "Merge pull request #13335 from ksooo/pvr-fix-addon-install\n\n[PVR] Fix crashes on pvr client addon install/uninstall/update."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0849ae1a58da96786b3c44ab75d9649de7a5e8df", "message": "[PVR] Fix crashes on pvr client addon install/uninstall/update."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cd9ab47562c1cb181cc9e6529148ac764d39c6bb", "message": "Merge pull request #13322 from ksooo/pvr-fix-times\n\n[PVR] Fix OSD player times"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/36a0f6d3d0601be02f658d77e3763be655943509", "message": "[PVR] Rename CPVRGUIInfo::GetStartTime to CPVRGUIInfo::GetPlayingTime to reflect the actual purpose of this method."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/bba2e2152897dda53860c49c7ebf94733234c262", "message": "[PVR] PVRGUIInfo: Fix CPVRGUIInfo::Get(StartTime|Duration) to fetch data on demandinstead of using (outdated) cached values."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ac7fbf853020281efe7fa9dd697a704713ce4e3d", "message": "[PVR] PVRGUIInfo: Fix playing times for addons not supporting GetStreamTimes."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ce126f2b41acb3f3dd5f0080424d7c90b7e83e98", "message": "Merge pull request #13300 from fuzzard/estuarypvr\n\n[Estuary][PVR] Season/Ep info in PVRGuide"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/125dffeaebafd69c90837cd5c0749a2494d5a02c", "message": "Merge pull request #13311 from fuzzard/pvrlistitem\n\n[PVR] fix episode special labeling for PVR Guide, Timer, Channels"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c749b0f3866835190eca13b50ba47c39abc48f2", "message": "Merge pull request #13312 from ksooo/edl-dynpath\n\n[videoplayer] CVideoPlayer::OpenVideoStream: Pass item's dynpath to R\u2026"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/7c4e45977d1a8f5cc0d85bd95319ef2f25dc3ed2", "message": "[videoplayer] CVideoPlayer::OpenVideoStream: Pass item's dynpath to ReadEditDecisionLists, not the static path."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DaveTBlake": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/92ca60fabfb894dd742fb0e72f211e4101a5cb0d", "message": "Merge pull request #13352 from DaveTBlake/FetchAllArt\n\nMusic Artwork Consistently Availlable To GUI"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c1b6ba93a95f32848f23de99e92bea2c61ddcbb4", "message": "Extend MusicThumbloader to get all types of art, using one efficient db query per music item e.g. related artist art along with song.\n\nUse thumbloader more consistently, making all art available to skins in all places. Remove \"artistthumb\" GUIListItem property as can use ListItem.Art(artist.thumb) to achieve same thing in a more generic manner.\n\nUpdate music info dialogs to fetch all related art.\n\nRemove CMusicDatabase.GetArtistArtForItem as unused."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f71ba23c0d7adb8a1c9e43fdd5a221b13df61cb1", "message": "Merge pull request #13358 from DaveTBlake/WinMilkdropFix\n\n[Fix]Visualisation none as default for all platforms"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f289313405f55a61b132e69337b0e2c8275ccccc", "message": "Make the default visualisation none for all platforms, consistent with any installed viz addons being initially disabled ."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10098", "title": "Smart playlists: fix how song based rules applied to artists and albums lists", "body": "Since adding role and path rules to \"artists\" type smart playlists I realised that all the rules based on song criteria e.g. genre, path and role, rather than simply a field in the artist table, need to be combined in SQL rather than left as spearate SQL clauses for each rule.\n\nIn logic terms the artists with songs satisfying criteria A and songs satisfying criteria B is not the always same as those artists with songs satisfying criteria A and B.\n\nThe effects of this can be seen in Jarvis with an \"artists\" smart playlist with 2 genre rules: genre = A AND genre = B - what is wanted is all artists with songs that have both genre A and B, what you get is artists that have both at least a song  with genre A and at least a song with genre B. This is not major, but once role and path rule combinations are possible as in v17 then the impact becomes more significant.\n\nAlso having selected a playlist of artists using song criteria when that list is played it is the songs that satisfy those criteraia that are wanted. Say for example the artist has some songs of genre Jazz and other songs are Rock. You make a playlist of Jazz artists i.e. artists with songs of genre = Jazz, then currently when you play that list you would get all the songs by that artist rather than just the Jazz ones. Hence song based rules need transfering to filter the subsequent list of albums or songs shown when navigating down from an artist on smart playlist or when playing that list.\n\nThis is particularly important when there are role rules e.g. \"artist is composer\", currently clicking on a composer from such an artist list can result in nothing being displayed despite the fact thay they do compose some songs because the role rule is not passed to the list of albums or artists.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xhaggi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/a3f4c4031ad45b3a114fbb9aedd3827db8c5ac5b", "message": "Merge pull request #13390 from xhaggi/player-resume-after-sleep\n\n[pm] resume last played media after sleep"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e59a9a480e184b41c67ae85ae3c3d5b6cfff2ea1", "message": "[pvr] don\u2019t trigger play channel on startup in OnWake\n\nThis is superseded by the restore player state after sleep feature."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/deff2865e0986b554c1b1080f71e21fceebde40b", "message": "[pm] resume last played media after sleep"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d2ef378e2682f411f99e60fc04e2585c90d13792", "message": "Merge pull request #11850 from xhaggi/gui-include-nested\n\n[gui] include now supports nested element processing"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cb5788639475871ca9c1e1c3b8f0842041ce7bfc", "message": "Merge pull request #13348 from xhaggi/refactor-window-is-top-most\n\n[gui] refactor window is topmost methods and add new boolean conditions"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/5b89bf21edc48c8f88a30e85d874a482dea43a19", "message": "[gui] add new info bools Window.IsDialogTopmost and Window.IsModalDialogTopMost"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0b2eeafd4481932aff0639814e5a02c91a4ffe5a", "message": "[refactor] change some conditions to use IsModalDialogTopmost and HasModalDialog"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/612448e912ca1b0f5931e3ed3b9c0e451162a960", "message": "[gui] add method to check if modal dialog is top most to CGUIWindowManager"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d44376211f5b43123a3a6a88aa94c0108f39f989", "message": "[refactor] merge topmost dialog methods in GUIWindowManager"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d4156e58fa9d8ff0efebd39ea2a95e91ade95cb0", "message": "[cosmetics] rename topMost to topmost in vars and methods"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/6be9a3548f27488a1cb85f48ee1434fe5cdabdfb", "message": "[refactor] rename IsWindowTopMost to IsDialogTopmost as it only checks dialogs"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9b1ca4a183fe4360ea6ef86a26b730fc891ffb47", "message": "[cleanup] drop unused method HasDialogOnScreen from GUIWindowManager"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3faae1eff6c0129f49f43d6689c93cbd48733cd7", "message": "Merge pull request #13346 from xhaggi/fix-window-is-condition\n\n[fix] boolean condition window.is does not work properly"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/864f3ce413dc2b2c8c64de7baad72ce23f0b65fe", "message": "[fix] boolean condition window.is does not work properly\n\nThe boolean condition Window.Is does not work properly because the contextual window is not always set. This will try to fix the issue by introducing a fallback. Now we'll first lookup for the contextual window, than the top most dialog and as a last the top most window."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cf0ff1f73013a869eed663bfc544f1723f17e933", "message": "Merge pull request #13315 from xhaggi/use-select-dialog-for-profile-lock-mode\n\n[gui] use select dialog instead of context menu for profile lock mode selection"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d4f2e152c02f1c5ed2ee3966ef39706e857e460e", "message": "[cleanup] drop dependency to weather manager from CSettings"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a059b8c255e761bb130295b8023736491d08bf8e", "message": "Merge pull request #13326 from xhaggi/fix-register-settings\n\n[fix] register settings callback for weather manager is called before it is ready"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/48f90cc2f4318e67c071a5f34aa80e298824bafa", "message": "[fix] register settings callback for weather manager is called before it is ready"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ed353358f93b920cc6953d12db6efd091ebebf6d", "message": "Merge pull request #13319 from xhaggi/fix-weather-manager-not-ready\n\n [fix] weather manager not ready if settings get loaded for the first time"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/26330a9c5ee6ffbd732cfee4833b70ecfecec101", "message": "[fix] weather manager not ready if settings get loaded for the first time"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/23e956d3369b2c5164ca3ff3a02bdf0a58254793", "message": "[servicebroker] add method to check if service manager is up"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/eabc3b46f1367401faf58c9123e7438a331bf792", "message": "[gui] use select dialog instead of spinner for profile lock settings"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/55010fcdb330c9afdaebfddffb077f7f939d4917", "message": "[gui] use select dialog instead of context menu for profile lock mode selection"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/bfa40a1a5e42ee900c2bbfa51c4a5482a76a4272", "message": "Merge pull request #13305 from xhaggi/always-render-splash-window\n\n[gui] always render splash window but hide splash image if configured in AS"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f114d6334cdc200218b9f2d4a6874379db42487f", "message": "[gui] add splash window to WindowTranslator"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d17fe5d647871ca9ff9061f3751c7568e535c09c", "message": "[gui] always render splash window but hide splash image if configured in AS\n\nThis will also fix rendering issues if splash is disabled in advanced settings."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12846", "title": "[addons] don't use event load/unload in conjunction with async events", "body": "Follow-up after #12843 \r\n\r\n@tamland ping\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9209", "title": "[gui] new built-in functions Timer and CancelTimer", "body": "This PR will add a new built-in function as a replacement for `AlarmClock`. The function support a interval in milliseconds instead of seconds and it better fit from its naming in what's going on if you call it.\n\n@ronie @HitcherUK @BigNoid @phil65 mind taking a look.\n\n``` javascript\n/**\n * Executes a built-in function after a specified number of milliseconds.\n * @param name The name of the interval\n * @param cmd The built-in function to execute\n * @param millis The time to wait in millis before the command gets executed\n * @param repeat Should the timer repeat the execution until it'll be canceled\n */\nTimer(name,cmd,millis,repeat)\n\n/**\n * Cancel the timer\n * @param name The name of the timeout\n */\nCancelTimer(name)\n```\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ronie": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/3e98a6b2791d8e7fe1aee5bca09b5d1c6ab8b28f", "message": "Merge pull request #13306 from ronie/addonsettings\n\naddonsettings - don't lowercase condition value"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9cbd1ed183e5b50c1ab250c94789f9afe1db22f0", "message": "Merge pull request #13385 from ronie/xbmcgui-listitem\n\nxbmcgui - add option to define listitem as folder"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9d4e3e2a506ac20fd80d0381faaac4154deafc34", "message": "[Estuary] some delicate touches to the channelgroup selector"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cbdeebcbf109ecfe8f0712ee914e47bf07e85887", "message": "xbmcgui - add option to define listitem as folder"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0c21beb7b9a43577528a0993193d8521c179be23", "message": "Merge pull request #13338 from ksooo/estuary-pvrinfopanel-percentplayed\n\n[PVR][Estuary] PVRInfoPanel: Add percent played progress bar, for exa\u2026"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0563f97996fb67bbc1ef83c790b3cdaa64894536", "message": "addonsettings - don't lowercase condition value"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12853", "title": "skin changes needed for PR12850", "body": "some additional skin tweaks needed for https://github.com/xbmc/xbmc/pull/12850\r\n\r\n@phil65 please double-check if it's ok to move the button menu a bit", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11755", "title": "python music scrapers - art", "body": "this is my clumsy attempt to let the python music scrapers set some additional artwork.\r\n\r\n(needs https://github.com/xbmc/xbmc/pull/11754)\r\n\r\n@notspiff ", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11488", "title": "[python] add input validation for edit controls", "body": "allow addons to use input validation for edit controls.\r\n\r\n@tamland @phil65 @Montellese ", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11486", "title": "[python] add setType() method for edit controls", "body": "allow addons to define the edit control type.\r\n\r\n@tamland @phil65 ", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11420", "title": "[python] browse dialog - list network and/or local paths", "body": "if you open the browse dialog from addon settings, it can list both local drives and network shares.\r\nbut if you call the browse dialog from the addon itself, no such option existed.\r\n\r\nthis to great annoyances of several (including me) python devs.\r\nhttp://forum.kodi.tv/showthread.php?tid=290651\r\n\r\nthis pr unifies things by adding the same local/network drives option to xbmgui.Dialog.browse()\r\n\r\n\r\n@phil65 @tamland ", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9771", "title": "allow addons to retrieve to current mouse position", "body": "usecase: i'm working on an addon where i want to add/position controls to a window by simply clicking in the window (instead of manually adding the coordinates through a keyboard).\n\n@tamland for the python bits\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codesnake": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f5e4096827cb8e2d7cda316bdae353032fd4c7c7", "message": "windowing: amlogic: set framebuffer to maximum size before initializing EGL\n\nIf framebuffer size is less than 1920x1080 (for example 1280x720) before\ninitialization of EGL, an attempt to set resolution in Kodi to 1080p or\nhigher will result in EGL_BAD_ALLOC error during a call to eglCreateContext().\nThis commit fixes the issue by setting framebuffer to maximum possible size\nbefore initializing EGL."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "afedchin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/5d10ea5eba3343356b40dbd881a715f0dd5d01c6", "message": "Merge pull request #13388 from afedchin/win10-background\n\n[win10] make the uwp app working in background and handles media butt\u2026"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3648b3899cc994ab232375deffeb98b7be5a87d4", "message": "[win10] make the uwp app working in background and handles media buttons."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2ee04b62dae1dc139497255e7ac7bac6874173c3", "message": "Merge pull request #13386 from CrystalP/fix-multiplegpus\n\n[Windows] fix adapters enumeration for multiple GPU"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/be4ddb24bfb8638dbc2bb1bc7d5480bd905c2d00", "message": "Merge pull request #13375 from afedchin/win10-fixes-store\n\n[win10] fixes store failures."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/79b7bdfd249a1d81be3fab4b48f868c45bff8082", "message": "[xbmc] Save de-init order of services if manager is destructed not in designed manner (on closing application forcibly)."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f0dbb026005c45f08286b239c945b1d5f367cd08", "message": "[win10] this is a try to resolve forcibly closing app by inactivity reason.\n\nWindows OS may decide to close an app by inactivity reason if the main thread does not pumping messages for a long time."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/acedd16ab61c8918fc7801f470bae000513de68a", "message": "Merge pull request #13350 from afedchin/win10-fixes-store\n\n[win10] fixes for crashes reported at store"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e873834573e27d49df688b439674a5d8dfd2d8a3", "message": "[win10] Win32DllLoader: implemented overriding imports for uwp"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4c63413ad2422d48e5131b95fd82a13150673d6a", "message": "[win10] network: refresh list of interfaces only when changes occur."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/798942291608f12b78283b362f758e9405dabf5d", "message": "[globals] move g_sectionLoader to system globals (fixes an issue when loader is disposed before consumers)."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e03aad664a835f5dc0f6041b69d14ddfa2247ccd", "message": "Merge pull request #13317 from afedchin/win10-fix\n\n[win10] disable hw decoding for uhd hevc main10 on xbox one"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c657c81274cce28cfbd46d5c4bd29ab02a7c8d77", "message": "[win10] fix python case sensitive in debug on Xbox One console\n\ndeploying to Xbox One console via Visual Studio results in loss of case in resource file names."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/746e7e95009037b54108b4c6fcfbe7234c9d5a8f", "message": "[win10] don't use hw decoding on xbox for uhd hevc main10 (before MS don't fix it)"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/8d329eeba2f3118fbc27d3ee0afe893e03c05dda", "message": "Merge pull request #13313 from afedchin/win10-fix\n\n[win10] do not handle back request on non mobile systems."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c56246880630e8ca968ab01be294126227f6fbcd", "message": "[win10] do not handle back request on non mobile systems."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/106e34dd1653caf6d83f39d44fbd481100de36c8", "message": "Merge pull request #13308 from afedchin/win10-fix\n\n[win10] update dependencies packages and do not add pass-through formats for xaudio HDMI device"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e36a26f4a0a364b20c99a9ac75e2965b8a5dc9c0", "message": "[win10] xaudio: don't add unsupported stream types"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/ab7e2cec6b27bb39ef3174e6564ab399de7a00b6", "message": "[win10] dependencies: update libssh package"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/cefc459bb357d5c8554c3a5ecb107b4c9f0907fc", "message": "[win10] dependencies: update python package"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13412", "title": "[xbmc] start peripherals before login. this also fixes that periphera\u2026", "body": "\u2026ls doesn't start at all if login screen is enabled.\r\n\r\nthis allows start peripherals service before login\r\nthis also fixes that peripherals doesn't start at all if login screen is enabled.\r\n\r\n@garbear please review I'm not sure that this doesn't break game service.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13258", "title": "[xbmc] refactor instantiation of storage provider and power manager syscalls", "body": "this follows tendantion for removing ifdefs and implementing design patterns\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wsnipex": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/8bd867a3f11b51bedc512ec78fe6b77e70ef5c68", "message": "Merge pull request #13320 from peak3d/amlbuild\n\nBuild changes for ARM"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/85167dcc23f6897b1276f482a168e34b73a78122", "message": "Merge pull request #13376 from pkerling/wayland-xdg_shell-waylandpp\n\n[wayland] Use xdg-shell.xml from waylandpp"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/bff1759626cb44be4a3f6dc0d6ebb5fe43a55a96", "message": "Merge pull request #13321 from stefansaraev/webserver-ssl-opt\n\nfix: settings: check if webserver is compiled in before enabling ssl"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b01b8f0716c00e2948c34601a9e6968ba31af0c7", "message": "Merge pull request #13165 from wsnipex/webserver_https\n\nWebserver: HTTPS support"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/231fc64d9578cd34f685123df9314c4e8f164571", "message": "[webserver] only show SSL setting if supported"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/061d90b85c103ab52696c6005f3312c69be7d095", "message": "[webserver] add SSL setting"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/de33c19ef63011a46a870feb5524f088fe65b61a", "message": "[webserver] enable HTTPS support"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/88710f25037eb786058228f3b4541d99336d60a2", "message": "Merge pull request #13096 from pkerling/wayland-fixes\n\nWayland fixes"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13034", "title": "Cmake cpp14", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nrebased https://github.com/xbmc/xbmc/pull/10864 and added depends check\r\n\r\nnote: the test commit needs to be dropped before merge\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lrusak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c53bd94e2b3fbfd58016e854bd24d6498e194bd7", "message": "[cmake] android: add HAS_LINUX_NETWORK to system defines"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/0820b4f45ba55201a97e14f3740d4b487d6a22a7", "message": "Merge pull request #13192 from lrusak/drmprime\n\n RendererDRMPRIME: add atomic support"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/957f814df3f24d020eb592754646065a7414fe2c", "message": "RendererDRMPRIME: set time_base"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/536fa4005ff84f27f38a6289e998771303552aa0", "message": "windowing/gbm: use DRM_MODE_ATOMIC_TEST_ONLY"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/51e58167a0c4a8bc189bfbc73e4569033a247879", "message": "RendererDRMPRIME: add atomic support"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/6a6a31dab78ac3be94174da6b2f495cb675a894d", "message": "Merge pull request #13295 from lrusak/inputstream-cleanup\n\nVideoPlayer: make m_pInputStream a smart pointer"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/bf906a31427c8166cf07d5434325f6dfe1a28cec", "message": "fixup! VideoPlayer: make m_pInputStream a smart pointer"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13406", "title": "[GLES] updates and cleanup", "body": "Mostly taken from the GL changes. Tested on Intel NUC\r\n\r\n`glEnable(GL_TEXTURE_2D)` was never needed and was most likely around since the original GL -> GLES port. See, https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glEnable.xml\r\n\r\n@FernetMenta with this I think we can get rid of the NV12_RRG shader format", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13274", "title": "Mode whitelist", "body": "@FernetMenta wanted me to PR this to get some more visibility. I'll add what I had already posted to the internal boards.\r\n\r\n---\r\n\r\nJust wanted to start a discussion that won't get lost in slack.\r\n\r\nFor those that don't know the display and refresh rate switching logic in kodi is rather complex yet it doesn't quite fit everyone's needs. @FernetMenta proposed that we create a set of `whitelisted` resolutions that one can select and create a logic for kodi to switch to only these `whitelisted` modes.\r\n\r\nSome reasons to do this is as follows:\r\n 1. Some people want to switch to a lower resolution when watching 720P content however some people do not want this because when watching live TV the refresh rate switching would happen too often.\r\n 2. We can disable modes that have too high of refresh rate ie. 120HZ.\r\n 3. We can use the exact refresh rate (for low bandwidth systems playing 30hz content at 60hz on a 4k display is difficult)\r\n\r\nThe problem with this come down to adding yet another setting. More settings generally decrease the user experience. So how can we make things simpler not more complex?\r\n 1. Pre define `whitelisted` modes. (add all refresh rates from the desktop resolution automatically)\r\n 2. Revert to the old behaviour if no `whitelisted` modes are defined.\r\n 3. Hide option at the same settings level as the refresh rate switching option\r\n\r\nCurrently the logic is this:\r\n 1. for all the methods below remember that it will only select from the whitelist!\r\n 2. the order goes from fuzziest match towards exact match\r\n 3. allow resolutions that are larger than required but have double the refresh rate\r\n 4. allow resolutions that are larger than required but have the correct refresh rate\r\n 5. allow resolutions that are exact and have double the refresh rate\r\n 6. allow resolutions that are exact and have the correct refresh rate\r\n\r\nSample GUI\r\n![Imgur](https://i.imgur.com/1LOp0RO.png)\r\n\r\nSample outputs below.\r\n```\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 50.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 59.940201 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 59.94Hz (19)\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 24.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1920 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 23.976080 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656   DEBUG: display width: 1280 vs video width: 1920\r\n10:35:21.752 T:140499105462656   DEBUG: display fps: 60.000000 vs video fps: 29.970030\r\n10:35:21.752 T:140499105462656   DEBUG: float equals: false\r\n10:35:21.752 T:140499105462656  NOTICE: Display resolution ADJUST : DVI-1: 1920x1080 @ 59.94Hz (19) (weight: 0.000)\r\n```\r\n---\r\n```\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched fuzzy whitelisted Resolution DVI-1: 1920x1080 @ 60.00Hz (17)\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 50.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 59.940201 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 24.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1920 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 23.976080 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: false\r\n11:00:03.307 T:140082496567680   DEBUG: display width: 1280 vs video width: 1280\r\n11:00:03.307 T:140082496567680   DEBUG: display fps: 60.000000 vs video fps: 60.000000\r\n11:00:03.307 T:140082496567680   DEBUG: float equals: true\r\n11:00:03.307 T:140082496567680   DEBUG: Matched exact whitelisted Resolution DVI-1: 1280x720 @ 60.00Hz (26)\r\n11:00:03.307 T:140082496567680  NOTICE: Display resolution ADJUST : DVI-1: 1280x720 @ 60.00Hz (26) (weight: 0.000)\r\n```\r\n\r\nPlease comment to explain why you :heart: or :skull: this idea and any further logic or comments about usability below", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13257", "title": "Macro cleanup", "body": "most of this was done with sed commands but I took a look at the diff after and had to fixup some stuff but there might be some minor formatting issues.\r\n\r\nI did a build and run test on linux but it seems that this touches a lot of windows stuff.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13176", "title": "[RFC] [Linux] add libinput backend for non window system platforms", "body": "I'm expecting to get a bit of push back here but let me explain.\r\n\r\nPositives:\r\n\r\n1. Better (and simpler) input handling\r\n2. Lower maintenance due to offloading to a support library\r\n3. Future features including keymap selection and other options (natural scrolling, mouse acceleration, etc)\r\n3. Improved hotplugging (no more 10 second delay)\r\n4. Following mainstream standards (wayland input handling, new x11 input handling)\r\n\r\nNegatives:\r\n\r\n1. Adding dependencies on external libraries\r\n2. Possible higher CPU load (unmeasured)\r\n\r\n---\r\n\r\nSo far this PR adds feature parity to the current code. I did not want to extend the feature set in the initial PR as that may add complexity to the testing and code review. This input handling should be the same or better (I've noticed an improvement in touchscreen accuracy).\r\n\r\nThis input handling doesn't support remotes you must use something like eventlircd for that.\r\n\r\nIn the future (outside the scope of this PR) I'd like to add a settings selection for things like keymap selection, input options (input tapping, mouse acceleration, natural scrolling, left handed, etc).\r\n\r\nThis PR now builds for any projects that use CLinuxInputDevices so GBM, RPi, and AML are the candidates. This does not apply to any other platforms.\r\n\r\nI've separated the commits into semi-logical groups for easier review. I plan to squash into one commit if this is merged.\r\n\r\nThis PR has a dependency on libinput and libxkbcommon (for keyboard handling).\r\n\r\nRelevant changes to LE are here, https://github.com/LibreELEC/LibreELEC.tv/compare/master...lrusak:libinput-kodi\r\n\r\nIf this is approved then we probably need to add libinput and it's dependencies to the build depends.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12837", "title": "cleanup internal nfs vfs in favour of vfs.nfs", "body": "This is to go with https://github.com/notspiff/vfs.nfs/pull/1\r\n\r\nI've tested this and it works fine. The only thing that I think needs adding is a dialog when someone selects nfs from the drop down and vfs.nfs isn't install it notifies them or prompts to install it. If anyone has ideas about the best way to accomplish that (including the other vfs add-ons when they are ready) that would be great.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12806", "title": "LinuxRendererGLES: implement smooth motion", "body": "follow up to #12805 \r\n\r\nI'm believe this is implemented correctly but I'm not sure I like the effect as it seems that is \"blurs\" the picture a bit.\r\n\r\nlooking for comments.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12506", "title": "GLES: allow using limited color range", "body": "This seems to do what is intended. I'm not sure if anything else is needed.\r\n\r\nIt would be nice to extend this so that hardware drivers can switch the colorspace also. For example intel graphics on linux allows switching between auto, full, and limited modes.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11674", "title": "[linux] systemd service support for add-ons and timedated support for timezone", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\nThis change is pretty specific to LibreELEC however it may be something that upstream is interested so I am making a PR. This will probably replace our current patches in LibreELEC regardless of if they are accepted here or not. If this isn't something that we want in Kodi then it would still be nice to get some comments about the code quality (I'm no c++ dev). \r\n\r\nThis allows running systemd services that are inside the add-on. On LibreELEC because we use Kodi's add-on system as the package manager. We provide binary add-ons that can contain services (like tvheadend, docker, etc). These services are started via systemd service files. We previously maintained an ugly patch to start these services. see, https://github.com/xbmc/xbmc/commit/aadeef8bdff40ae19cb61f1206ff30ebbaebb8bb and [here](https://github.com/LibreELEC/LibreELEC.tv/blob/master/packages/mediacenter/kodi/scripts/systemd-addon-wrapper)\r\n\r\nI wanted to make something that is cleaner and using proper methods. Since Kodi has a DBus method already it was rather simple to use that. So when add-ons are enabled/disabled dbus calls the systemd manager to enable/disable and start/stop service units.\r\n\r\nThe second commit extends this to add timedated support to allow setting the host OS timezone from within kodi. LibreELEC again maintained a patch for this. see, https://github.com/xbmc/xbmc/commit/fb5c7a43280419bfa464b945da3b46f74782f0ad\r\n\r\nI decided to only depend on dbus because that's what is done in [LogindUPowerSyscall.cpp](https://github.com/xbmc/xbmc/blob/master/xbmc/powermanagement/linux/LogindUPowerSyscall.cpp) as it doesn't look for systemd or upower.\r\n\r\nI'll probably add some logging to SystemdUtils.cpp eventually.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\nsee description above\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\nI tested this in LibreELEC. It works just like before with the old patches.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [x] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kszaq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/53d9c08eabcc5c1fbded48d47bf2c26e109b04a7", "message": "WinSystemAmlogic: don't strictly depend on fbdev_window\n\nFixes building for systems that do not have fbdev_window, e.g. working with libhybris."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4fe7dd6f0d39d56455a4890f301f3084a8c363ff", "message": "AMLCodec: fix hardware-accelerated VP9 playback\n\nVIDEO_DEC_FORMAT_VP9 and VFORMAT_VP9 are enum literals, not defines\nso ifdndef always returns true. This makes VP9 not work since enum\nliterals are redefines as 0. Define VP9-related literals only if not\npresent in amcodec header."}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13078", "title": "DVDVideoCodecAmlogic: remove pts-based frame rate tracking", "body": "In most cases frame tracking based on pts provided by amcodec is wrong, causing unnecessary frame rate switch. We can simply rely on frame rate provided by ffmpeg.\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\nLibreELEC community builds with Kodi Krypton and Kodi master branch.\r\nThe incorrect behaviour without the patch applied can be reproduced with first samples from Kodi Wiki: http://kodi.wiki/view/Samples#Codecs.2C_Framerates_and_Subtitles\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "notspiff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/7249e1b7f06a6a7a335fd6777320b5fe3ad9eaed", "message": "Merge pull request #13364 from ksooo/pvr-guide-channelgroups\n\n[PVR][Estuary] Guide window: Channel groups selector"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/3193724b00935724de506a945f0643b1e1edf5b8", "message": "Merge pull request #13342 from notspiff/videoscanner_cosmetics\n\nchanged: improve iterate variable names and a switch to for each"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/33dea71d0945af68b1101306d27435a0520c0e9e", "message": "fixed: use visible, not hidden"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b967c6bfc1111535d4d71a6f58fe39cdd00217e3", "message": "changed: improve iterate variable names and a switch to for each"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f444a903e64ea42378571e92252a27148c6908ee", "message": "Merge pull request #12612 from rmrector/the_art_of_scrape\n\nAllow video scrapers/NFO files/library import to add any artwork type\u2026"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c44a0607ba69dc0f181fdf6772961a9484028d70", "message": "Merge pull request #13332 from notspiff/mp4_mvideos\n\nadd artist, album and track to mp4 tag loader"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/63ec5c63e57fbccc2f7d06515a05a723bd3d2ea6", "message": "add artist, album and track to mp4 tag loader\n\nfor music videos"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4d65757fe907c445f7821190ccd10ae6626d2151", "message": "Merge pull request #13303 from notspiff/rendersystem_to_addons\n\nadded: pass render system to use to add-ons"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/58661c91e1bf11cec4ef501a6a0dcf1885597975", "message": "Merge pull request #13304 from notspiff/mp4_thumbs\n\nfixed/added: embedded thumbs for .mp4 files"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/9c2f36fa9ded3f6ddfbb64587468dc96d0254691", "message": "added: pass render system to use to add-ons\n\nwayland can use either gl or gles and we need to know which in add-ons"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13371", "title": "fixed: show the actual set poster/fanart for sets", "body": "only show relevant art types in the Choose art dialog. @olympia", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13234", "title": "Refactor ServiceManager/ServiceBroker", "body": "This is the start of my service container refactor. see first commit for why I believe this approach is an improvement.\r\n\r\nIt's early, feel free to review but some things you can skip\r\n- yes, i'm initing services directly in Application right now. I wil change this in the end, but I want to see how things work out first. Ultimately, I hope to make this a map of types registered in one spot, and then have a separate call to bring services up. Bu to do this we need to change constructors to not do stuff before StartService is called so right now I do not try to factor it nicely into a function.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12983", "title": "Some CFileItem cleaning", "body": "I was asked to assist with CFileItem restructuring on slack. Everything from performance to desktop search to inheritance issues was mentioned, but nobody could really tell me what they wanted done.\r\nUntil a clear idea is formulated for what this restructuring entails, I chose to at least reduce the amount of code that has to be restructured. By making CFileItem::IsType() being able to check for either extensions or protocols, we can get rid of a lot of trivial member functions.\r\n\r\nI expect some breakage in platform code, I'm sure jenkins will yell.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12130", "title": "Font addons", "body": "Ref http://forum.kodi.tv/showthread.php?tid=314595\r\n\r\nLooks like you want this, and I had some spare time so I threw the basics together.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12005", "title": "changed: remove internal sftp support", "body": "This removes the internal sftp support, ref https://github.com/xbmc/repo-binary-addons/pull/82 and https://github.com/notspiff/vfs.sftp\r\n\r\nNote this raises the question what to do with the network source setup dialog. I have opted to show the sftp entry unconditionally right now.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garbear": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/18f76abae65a3707868548b6f988eef762f9c49c", "message": "Merge pull request #13340 from garbear/game-globals\n\nGames: Register setting handlers inside CGameSettings"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/86814f632a95ab2522d95b3ccfd7b433a2a26bc3", "message": "Merge pull request #13354 from garbear/input-improvements\n\nInput fixes and modernization"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/046df869d5e206d3795246bfde398824c1fcbdaa", "message": "Joysticks: Move controller IDs to new header in games/ dir"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/fa8a58defac4507a501ac70617d14d94c0a663f0", "message": "Controller dialog: Factor out some wizard code\n\nThis moves code from interfaces implementations into additional functions."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/c4b2f2332f32531bcf3ce4b5f2c0027ca9690eae", "message": "Fix improper check for bit flag"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b94825237dc7aa7eb0838577c8174ed930e776ca", "message": "Peripherals: Modernize button mapper registration"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/1305b6a73c222498ce75513884b71f04abeb8c62", "message": "Controller dialog: Index by GUI buttons instead of features\n\nThis change is in preparation for keyboard support. Currently, the\nassumption is one GUI button per feature. However, this breaks when\nkeyboard support is added with a virtual \"select key\" button."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/69e2c6caba4f44683f642db2909159971d666276", "message": "Controller dialog: Ignore unknown features"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/090939ab1cf61c86cd60db33f9e81d104e34ef07", "message": "Controllers: Fix missing \"paddles\" category"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/448601ad4c28d6e87c15f2a4b9248e114f1eb8ea", "message": "Controllers: Modernize CControllerFeature"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4aa9958394d5681df21d806f933328ba1420cb65", "message": "Mouse: Move interfaces to interfaces/ subfolder"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f953a4344971297bcfa62e2e6a367d890ba5fc2e", "message": "Keyboard: Expose more modifiers\n\nRequired for upcoming changes to the Game API."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d7adf87d1e535fbbf8dab9935ebe439e7aec6a62", "message": "Keyboard: Add keycode property to CKey\n\nRequired for upcoming changes to the Game API."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/f8cf1e6362546d0e390fde4af1aa8de44cdd409f", "message": "Keyboard: Move interfaces to interfaces/ subfolder"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/071493c79bb49eee69712626ea3c1081309d6d14", "message": "Joysticks: Move parameter to new base class\n\nEncapsulation gains are minor, but it allows for more documentation in the\nheader."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/b48e5763a18b034d3182c2e04e6b173bf3e2d65d", "message": "Joysticks: Fix broken wheel and throttle input"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/18b6e69def9071409b06a20c6ac68910e24d18a9", "message": "Joysticks: Modernize code\n\nThis moves initialization to the header and makes enum a class."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/e4c726da15030ff26c47ada53923e46a0b9ca206", "message": "Joysticks: Move interfaces to interfaces/ subfolder"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/a23bcf81368788b516a9f95b71e5b256dc21cf0e", "message": "Fix crash due to out-of-order resource destruction\n\nCurrently, destroying the input subsystem requires access to the main\nclass (this is legacy code and will change when the Player Manager drops).\n\nDestruction is deterministic, so we just need to ensure that subsystems\nare destroyed before the resources they access. Placing a call in the\ndestructor is sufficient."}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/2fba47d1bd6de1e13102a52f9d99f7f416584599", "message": "Merge pull request #13341 from garbear/retroplayer-doxy\n\nUpdate RetroPlayer's Render Manager documentation"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/d768b03a32699ca48a072edf2cf2284554cf9730", "message": "RetroPlayer: Improve rendering documentation"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/aaa18a6c22e8a15635724f507ff4b333a0d7d2b9", "message": "RetroPlayer: Remove unused header"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/4bf2362a2c3a45dccc6c740859d0702a6ca11855", "message": "Peripherals: Replace use of global game controller manager"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/007dba87c3f42106f7ccbaea809e9efca4430363", "message": "Peripherals: Replace use of global input manager"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/6fff840b4b39ec935e36fe9980836d4b70a1b3b6", "message": "Games: Register setting handlers inside GameServices"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/59068fb6cc30a680db4d9b6fec67bb058c485197", "message": "Remove controller models"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/eaf54509c3aaf6f05c5036502a0a61d61fb7c34a", "message": "[cosmetic] Whitespace fix in the Game API"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/75f6624bf490b07cac506100dda41f2f79777968", "message": "Game add-ons: Move input code to subdirectory"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13374", "title": "Games: Keyboard remapping support", "body": "This adds support for remapping keyboard keys in games. Similar to joysticks, keyboards are given a controller profile and mapped to libretro keys via the add-on's buttonmap.xml.\r\n\r\nFor reviewability, this PR has been split into 4 main commits that either add or remove something:\r\n\r\n* Keyboards added to Peripheral API (8e6a9ba6bd04b4f0cdfddbd364f925cdea0c5501)\r\n* Emulated joysticks removed (12e47eb9f6401d864d23ba65821145d5d45665cb)\r\n* Keyboards added to Controller Dialog (d2206e7a3f950a3e01f696ffbcf9ba61dba872d6)\r\n* Keyboards added to Game API (313bd8b3168f8e25aab1de04881189a90999caec)\r\n\r\nButtonmaps have been created for 13 emulator keyboards totaling 1,485 keys.\r\n\r\nNOTE:\r\n\r\nDue to a conflict, emulated joysticks have been dropped. This breaks devices that use keyboard drivers, like the X-Arcade Tankstick.\r\n\r\n## Motivation and Context\r\nFirst piece of the new Player Manager. Once keyboards have been abstracted on this level, they can easily emulate and by emulated by other controller types.\r\n\r\n## Screenshots (if appropriate):\r\n\r\nKeyboards have been added to the Controller Dialog. The first button in the features list is a \"Select key\" button:\r\n\r\n![screen shot 2018-01-15 at 4 58 36 pm 2](https://user-images.githubusercontent.com/531482/34967163-876b184c-fa15-11e7-96c2-035d3fe47756.png)\r\n\r\nPressing it will prompt the user to press a key:\r\n\r\n![screen shot 2018-01-15 at 4 58 52 pm 2](https://user-images.githubusercontent.com/531482/34967182-aba10276-fa15-11e7-976e-fd3fbdad518a.png)\r\n\r\nWhen the user presses the key, they'll be prompted to map it to a button or another key:\r\n\r\n![screen shot 2018-01-15 at 4 59 06 pm 2](https://user-images.githubusercontent.com/531482/34967196-bdd4d01c-fa15-11e7-8ddb-21d4c8c8303a.png)\r\n\r\n## How Has This Been Tested?\r\nTested with DOSBox on OSX. Most keys work.\r\n\r\nTesting needed for the following add-ons:\r\n\r\n- [ ] game.libretro.dosbox\r\n- [ ] game.libretro.fsuae\r\n- [ ] game.libretro.fuse\r\n- [ ] game.libretro.hatari\r\n- [ ] game.libretro.mame\r\n- [ ] game.libretro.o2em\r\n- [ ] game.libretro.pcem\r\n- [ ] game.libretro.prboom\r\n- [ ] game.libretro.scummvm\r\n- [ ] game.libretro.tyrquake\r\n- [ ] game.libretro.uae\r\n- [ ] game.libretro.uae4arm\r\n- [ ] game.libretro.vice\r\n\r\nTest builds have been launched for all platforms: http://jenkins.kodi.tv/view/Automation/job/BuildMulti-Choice/31/\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Associated PRs\r\n\r\nRequires API changes:\r\n\r\n- [ ] Peripheral API v1.3.6: https://github.com/xbmc/peripheral.joystick/pull/136\r\n- [ ] Game API v1.0.34: https://github.com/kodi-game/game.libretro/pull/29\r\n- [x] libretro API: https://github.com/libretro/RetroArch/pull/6119\r\n\r\nRequires controller profiles:\r\n\r\n- [x] https://github.com/kodi-game/kodi-game-controllers/pull/19\r\n\r\nRequire buttonmaps:\r\n\r\n- [ ] game.libretro.dosbox (https://github.com/kodi-game/game.libretro.dosbox/pull/6)\r\n- [ ] game.libretro.fsuae (https://github.com/kodi-game/game.libretro.fsuae/pull/1)\r\n- [ ] game.libretro.fuse (https://github.com/kodi-game/game.libretro.fuse/pull/5)\r\n- [ ] game.libretro.hatari (https://github.com/kodi-game/game.libretro.hatari/pull/4)\r\n- [ ] game.libretro.mame (https://github.com/kodi-game/game.libretro.mame/pull/3)\r\n- [ ] game.libretro.o2em (https://github.com/kodi-game/game.libretro.o2em/pull/2)\r\n- [ ] game.libretro.pcem (https://github.com/kodi-game/game.libretro.pcem/pull/2)\r\n- [ ] game.libretro.prboom (https://github.com/kodi-game/game.libretro.prboom/pull/4)\r\n- [ ] game.libretro.scummvm (https://github.com/kodi-game/game.libretro.scummvm/pull/14)\r\n- [ ] game.libretro.tyrquake (https://github.com/kodi-game/game.libretro.tyrquake/pull/2)\r\n- [ ] game.libretro.uae (https://github.com/kodi-game/game.libretro.uae/pull/1)\r\n- [ ] game.libretro.uae4arm (https://github.com/kodi-game/game.libretro.uae4arm/pull/1)\r\n- [ ] game.libretro.vice (https://github.com/kodi-game/game.libretro.vice/pull/1)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13151", "title": "Fix two skin-related crashes", "body": "This PR contains two fixes:\r\n\r\n* Fix segfault in guilib when `<itemlayout>` or `<focuslayout>` are missing or incomplete\r\n* Fix segfault on skin reload due to accessing items after their owner has been destroyed\r\n\r\n## How Has This Been Tested?\r\nFixes have been in my branch through most of the game OSD development.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12995", "title": "Make Player.HasVideo exclusive for video", "body": "Currently, `Player.HasVideo` will return true if a game is being played. This causes a bug in the FullscreenGame window where the `Fullscreen` action attempts to open FullscreenVideo instead of leaving FullscreenGame for the GUI.\r\n\r\n## Motivation and Context\r\nTechnically, games have video. I relied on this technicality in the original RetroPlayer PR to reduce the amount of code. Just imagine trying to rebase these hundreds of lines of changes spread throughout Kodi every month...\r\n\r\nThanks to @AchimTuran for reporting this bug during DevCon.\r\n\r\n## How Has This Been Tested?\r\nThe bug causing the following screenshot no longer occurs on OSX.\r\n\r\nThe logic refactors will need another set of eyes. When I split FullscreenGame and FullscreenVideo, a small bug snuck in, so it's possible I missed something again.\r\n\r\n## Screenshots (if appropriate):\r\n<img width=\"1073\" alt=\"screen shot 2017-11-02 at 11 30 51 pm\" src=\"https://user-images.githubusercontent.com/531482/32361802-073c835a-c021-11e7-986a-6ee3a2521423.png\">\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11654", "title": "Controller dialog: Rename to Controller setup", "body": "From a UX perspective, the shorter synonym is easier to read when there's small text on a large screen.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11648", "title": "Simplify new controller dialog text", "body": "## Description\r\n\r\nWhen an unknown controller is first detected, a dialog is shown. ATM this dialog is an ugly wall of text. This PR simplifies the dialog and adds useful information - the controller name.\r\n\r\n## Screenshots (if appropriate):\r\n\r\nBefore:\r\n\r\n![new controller - complicated](https://cloud.githubusercontent.com/assets/531482/22805976/bc46d742-eed4-11e6-8676-fdcd14cce6aa.png)\r\n\r\nThe \"No\" button is highlighted because I just want the ugly text to go away.\r\n\r\nAfter:\r\n\r\n![new controller - simple](https://cloud.githubusercontent.com/assets/531482/22805996/caac4470-eed4-11e6-8a41-775eb6a8b436.png)\r\n\r\nThe \"Yes\" button is highlighted because yes, I do want to setup my controller.\r\n\r\n## Motivation and Context\r\nObservation of a non technical user.\r\n\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/349558", "body": "by this do you mean, \"Could not _find_ FILE\"?\n\nedit, never mind, just saw commit d78ea37\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/349558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/362088", "body": "What's abi stand for? there's no mention of it on the wiki\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/362088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/362118", "body": "(!!!) so binary addons are in the very near future? (& sorry for the off-topic discussion)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/362118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375448", "body": "You're developing on Linux, right? I can confirm that this fixed on Windows too.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/391544", "body": "I feel this should be a #define\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/391544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/392052", "body": "features come first and foremost. syntactic sugar is nice on top. i'll bookmark this comment and stumble upon if some months down the road\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/392052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/421474", "body": "Might you want to specify that [FILE] builds and plays a playlist of the provided files?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/421474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "popcornmix": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/7acb05ff74d6dcb5157f4548433effc4218aa9b5", "message": "Merge pull request #13372 from popcornmix/playervolfix\n\nApplication: Set volume after opening file"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/8f9bf7b1dcf65f9e08b78e3b5b79092e6b99910c", "message": "Application: Set volume after opening file\n\nInitial volume was broken in omxplayer after #13301"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12522", "title": "AddonSettings: Protect against nullptr", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nI hit a crash with a null newSetting pointer.\r\nNo obvious issue after protecting the access.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11222", "title": "[cec] Add settings for configuring button repeats", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nAdd settings for configuring CEC button repeats\r\n\r\n## Motivation and Context\r\nCEC remotes repeat at the rate the TV vendor chooses. This may be just a couple of times a second.\r\nThis is slow compared to other kodi controllers (lirc, keyboard, game controller) and makes kodi seem laggy.\r\n\r\nI have added some changes that are now present in libCEC 4 that allow the CEC repeat messages to be ignored and replaced with messages more like a keyboard generates. The controls are:\r\n* Remote button press delay before repeating (ms)\r\n* Remote button press repeat rate (ms)\r\n* Remote button press release time (ms)\r\n\r\nCEC is a poorly implemented standard, and behaviour between different vendors is not consistent which makes these settings necessary. A CEC source may:\r\n\r\nSend pressed on press and released on release.\r\nSend pressed on press and periodically and released on release.\r\nSend pressed on press and periodically and nothing on release.\r\n\r\nThe \"release\" setting can allow a timeout to be set to assume button is released after, for sources in the third category. This is not ideal as it means the release lags by the amount set. If the periodic repeat rate is high, then the release time can be set lower to reduce the lag.\r\n\r\nIf the repeat delay is left at 0 (the default) then the behaviour is unchanged.\r\nTypically just changing the repeat delay to, say 150ms will enable this feature and scrolling becomes much quicker. The other options only need adjusting in a minority of cases where source doesn't behave as desired.\r\n\r\n## How Has This Been Tested?\r\nHas been present in Raspberry Pi builds for over a year.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8774", "title": "stereoscopicmanager: Avoid additional hdmi mode changes when switching to 3D", "body": "Currently when playing and then stopping a 3D video we switch from:\n1080p60 2D -> (play) -> 1080p60 3D -> 1080p24 3D -> (stop) -> 1080p60 3D -> 1080p60 2D\n\nwhen the desired sequence is:\n1080p60 2D -> (play) -> 1080p24 3D -> (stop) -> 1080p60 2D\n\nThis tries to avoid the two unnecessary hdmi mode switches.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7404", "title": "[mmalrenderer] Add sharpness control", "body": "This enables sharpness OSD control for mmalrenderer.\n\nI've renamed the \"VDPAU - Sharpness\" to \"Sharpness\" as there didn't seem to be a reason for it not to be generic. It is connected to the generically named RENDERFEATURE_SHARPNESS.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Owersun": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/9fd58493cd86a7922ca92fada96a9b7a68de657f", "message": "AML: remove check for no longer used amlvideo/omx_pts"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kwiboo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/83aeaf84a9ed5a775a6048fd6ecf988fda85c188", "message": "windowing/gbm: use user friendly mode name"}], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13003", "title": "windowing/wayland: add EGL_KHR_platform_wayland check", "body": "## Description\r\nThis adds a check for the `EGL_KHR_platform_wayland` client extension as an alternative to the `EGL_EXT_platform_wayland` client extension.\r\n\r\nFrom https://www.khronos.org/registry/EGL/extensions/KHR/EGL_KHR_platform_wayland.txt\r\n>    Version 1, 2014/01/22 (Jon Leech)\r\n>        - Promote EGL_EXT_platform_wayland to KHR to go with EGL 1.5.\r\n\r\n## Motivation and Context\r\nFixes use of wayland windowing system using Mali EGL drivers on Rockchip platform.\r\n\r\nWithout this change Kodi would stop with `EGL implementation does not support EGL_EXT_platform_wayland, cannot continue` error message.\r\n\r\n## How Has This Been Tested?\r\nRunning a LibreELEC wayland/weston image on a ROCK64 device.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/6947", "title": "jsonrpc: Use ipv4 for local bind", "body": "Dual stack bind of in6addr_loopback does not work on linux, only ::1 will be listening.\nChanged to only use ipv4 for local bind as this is the current fallback if dual stack is not available.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jenkins4kodi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/47897ba5f54dc30d0c60f3ce54575430d2382aae", "message": "Merge pull request #13316 from garbear/jk-no-models"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fritsch": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/3c3c07027cad3ffc8dde04d189650137831d3df5", "message": "FFmpeg: Bump to 3.4.1-Leia-Alpha-1 after rebase"}, {"url": "https://api.github.com/repos/xbmc/xbmc/commits/5fffdced7cdb6dfcd2165e0b8a3c0d3e94b5716a", "message": "ActiveAESink: We can only do PT if at least one PT format is supported"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stefansaraev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/f48caa76ebc282a8ae9bff56537075d53292a876", "message": "fix: settings: check if webserver is compiled in before enabling ssl"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chewitt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/07e4daae6b384ded26c6a4ca5664db0a54093282", "message": "smbclient changes for smb minprotocol and legacysecurity"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fuzzard": {"issues": [], "commits": [{"url": "https://api.github.com/repos/xbmc/xbmc/commits/c62e9df26cb83f0974a8e67c07a2729eaa9fb329", "message": "[PVR] fix episode special labeling for PVR Guide, Timer, Channels\n\nPVR Guide, Timer, Channel codepaths in LISTITEM_EPISODE of CGUIInfoManager::GetItemLabel\nto properly return a label as SXX if there is iSeasonNumber == 0, but an episode number is\ngiven in their relevant info tags.\nDiscussion https://github.com/kodi-pvr/pvr.demo/issues/59"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lobermann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13373", "title": "fix segfault on palyback failed", "body": "As discussed in slack with @FernetMenta and @notspiff .\r\n\r\n> A quick explanation on the issue:\r\n> \r\n> In CApplication, on the GUI_MSG_PLAYBACK_STARTED Message \r\n> https://github.com/xbmc/xbmc/blob/master/xbmc/Application.cpp#L3879\r\n> There is the call to  g_infoManager.SetCurrentItem(*m_itemCurrentFile) which then in turn runs the CSetCurrentItemJob.\r\n> \r\n> Now, this job is accessing the member CGUIInfoManager::m_currentFile directly in that thread.\r\n> When in CApplication a GUI_MSG_PLAYBACK_STOPPED is happening (in case the playback fails) this is in turn calling g_infoManager.ResetCurrentItem() which \r\n> is then resetting the m_currentFile that is used by the CSetCurrentItemJob. \r\n> \r\n> So if there are any delays in the CSetCurrentItemJob, due to database access or anything else, we end up in a segfault within CGUIInfoManager::SetCurrentMovie.\r\n> I assume this also applies to CGUIInfoManager::SetCurrentSong and CGUIInfoManager::SetCurrentGame as they do it in more or less the same way.\r\n\r\n\r\nThis was fixed now by inheriting CJobQueue in CGUIInfoManager so there is a dedicated job queue with one worker for this. ResetCurrentItem() was also moved into a job to prevent it from running at the same time with SetCurrentItemJob(). A type was added to the jobs so that we only have one of the jobs in the queue at any time. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unbroken75": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13327", "title": "Defaults to release build", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nAdded --disable-debug to .configure in README.raspberrypi\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nStandard user does not need to build for debug. \r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Razzeee": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13323", "title": "Add history table", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis is heavily work in progress and while it works at the moment it probably has some cases that re broken.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nThis replaces the old files `playCount` and `lastPlayed` columns with a `history` table. It has `dateWatched` and a reference to a file. For every time watched, we add a new row. \r\nSo this is much richer than the old fields, as we can have multiple lastPlayed/dateWatched entries for the same file. We're basically emulating the old fields while adding the new table to use in the future.\r\n\r\nThis first implementation however will focus on only having this internal and handling it correctly in core. We will need to expose it to the outer world in a later PR.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nVery little. It seems to work fine on migration and leanback. And it also seems to safe fine on `Set as watched`.\r\nIt also sets playCount to 0 instead of `null` at the moment, not sure if this causes regressions.\r\n\r\n- MySQL is completely untested as of now (might be broken due to me using subqueries, can't remember if those were bad for MySQL)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n\r\n  \r\n  ", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12382", "title": "Cleanup due to x64 build changes", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nMERGE THIS AFTER 17 IS EOL, IT WILL NEED JENKINS CHANGES\r\n\r\nRemove some unused scripts that were left.\r\n\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nCleanup\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nHas not been tested yet, I'm acting on the knowledge by @Rechi \r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [x] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10881", "title": "Move favorites to the new contextmenu handling", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis will enable having \"Add to favourites\" and \"Remove from favourites\" on the homescreen. It also changes the handling inside the library. But it should be the same as before.\r\n\r\nOne \"problem\" could be the place I've choosen. As this part is library agnostic (not really video) it might make sense to have a new contextmenu class. But I've choosen the video one for now.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nNeeds more testing, I have tested adding/deleting. Which works fine, we need to check all corners, if there are places, that have multiple items for \"Add to favourites\"\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "InuSasha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13318", "title": "sql-client: add support for mariadb-client", "body": "make it possible to link against mariadb-client instead of mysql\r\n\r\n## Description\r\nSearch explicit for libmariadb and mysql-header under include/mariadb/.\r\nAdditional added a test, to protect against using of mysql & mariadb at the same time \r\n\r\n## Motivation and Context\r\nmost distributions switch to mariadb, this follows up.\r\n\r\n## How Has This Been Tested?\r\ntested on top of LibreELEC master with MariaDB 10.2 and MySQL 5.7 as sql-server.\r\ntest-cases: \r\n - database migration from Video108 -> Video109\r\n - database migration from Music66 -> Music69\r\n - list movies\r\n - mark movie as seen\r\n - builds against mysql-client and mariadb-client and against both (as negative test)\r\n\r\nreallife test on top of KRYTON (LE 8.2.2), is started.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samnazarko": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13290", "title": "CWinSystemRpi: ensure that we register the ALSA sink as well as PiSink is needed for external DACs", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n\r\nIt seems that after c0064a99d4cb13fbb77f6f411cba48a12ef50669, the AESink is tied to the windowing system. The ALSA sink does not seem to be registered elsewhere on RBP, which means that external DACs (USB and I2S) are not enumerated. \r\n\r\nThe patch was necessary to re-register ALSA sinks on RBP.\r\n\r\n## How Has This Been Tested?\r\n\r\nTested in OSMC v18 nightlies for Raspberry Pi with positive reports: https://discourse.osmc.tv/t/testing-kodi-18-leia-builds-for-raspberry-pi/20631/632\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ace20022": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13144", "title": "[videoplayer] DVDInputStream: Add an interface for stream selection.", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13109", "title": "Do not scan archived volumes for external subs or audio.", "body": "This pr superseeds #9929", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tirithen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13139", "title": "Add mapping codes for the wiimote", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nAdd mappings for wiimote keys.\r\n\r\n## Motivation and Context\r\nIn multiple forums people are having problems with the wiimote in kodi, namely that only the d-poad works but it's not possible to use A/B/-/Home/+/1/2 buttons. The logs when pushing these buttons gives the following:\r\n\r\n```\r\n22:03:45.696 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:45.696 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(304)\r\n22:03:47.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:47.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(305)\r\n22:03:49.130 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:49.130 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(412)\r\n22:03:50.230 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:50.230 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(316)\r\n22:03:51.080 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:51.080 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(407)\r\n22:03:52.513 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:52.513 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(257)\r\n22:03:53.563 T:1958289408   DEBUG: Previous line repeats 1 times.\r\n22:03:53.564 T:1958289408   DEBUG: CLinuxInputDevice::KeyEvent: TranslateKey returned XBMCK_UNKNOWN from code(258)\r\n\r\n``` \r\nThe conclusion from several of the forum threads is that those codes was not mapped in LinuxInputDevices.cpp, hence this change.\r\n\r\nFirst time contributing here, so tell me if something more is needed.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkortstiege": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13088", "title": "[infoscanner] ensure we're only checking for .nomedia in folders (fixes #17651)", "body": "Ensure we're not doing pointless .nomedia checks on files. Regression was introduced with https://github.com/xbmc/xbmc/pull/12772\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nhttps://trac.kodi.tv/ticket/17651\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nBriefly tested on Linux.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835", "body": "Fixed in fadf1cd0da739e9cd14c5b70d9dc90d8d6dd8403\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/267942", "body": "Uh, there are a LOT infolabels missing ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/267942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/268211", "body": "See 79bff68ac149f6ac9ba3853203efd9c64a664fbe. Please tell me if in case i've missed something.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/268211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269142", "body": "I don't really care what the string is. Just thought \"Times played\" sounds less techy :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278855", "body": "Hmz.. I had a quick chat with spiff about removing the entire proxy stuff due to the fact that we're storing username and password as an environment variable which feels completely wrong. IMO we should ditch the entire proxy environment handling for all platforms and leave it to our libs like we're doing in libcurl for example. Add-on coders will have to make their scripts proxy aware (urllib2 and the likes are able afaik). I personally think it's the best solution. Comments?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295743", "body": "Is there a reason you've added the GetContent().IsEmpty() check? And no, i don't have a clue why we check for archives atm ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295747", "body": "Jonathan, there's a problem in the files node after adding items to the library. Label2 is empty and returns size 0 (B) when sorting by file or name.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/344040", "body": "Why not use the bool that's passed to HandleFileItemList and change the condition to \"if (allowFile || hasFileField)\" in FileItemHandler::HandleFileItem? There might be other functions that will not return \"file\".\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/344040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353456", "body": "This one broke the linux build. Should be \"SNativeIoControl\\* s = (SNativeIoControl*)param;\", right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353458", "body": "FileSmb is still using SEEK_POSSIBLE which results in a build error.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/371563", "body": "I think we should use m_stackingAvailable instead to make sure we're not doing silly things on 'unstackable' items.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/371563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/412739", "body": "gcc warns about this \"warning: unused variable \u2018j\u2019\". It's some leftover from testing?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/412739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/412741", "body": "Another warning: \"warning: comparison between signed and unsigned integer expressions\" ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/412741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "afl1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13064", "title": "[VideoPlayerAudio] fix audio codec info", "body": "I removed ResetAudioInfo() to avoid wash out already set audio codec info.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kuehnelth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/13061", "title": "Sanitize filenames for mkv font attachments", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nKodi extracts fonts embedded in mkv files to ~/kodi/temp/fonts/ and uses the attachment name as filename without checking if it's a valid filename.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nThis can cause two problems:\r\n1) Writing fails if the attachment name contains invalid characters. The rendered subtitles will look bad because the font is missing.\r\n2) Using an attachment name like \"../../../whatever.sh\" will write outside the fonts folder. So it's possible to overwrite arbitrary files by just playing a video file in kodi. The mime-type in the mkv file has to be \"application/x-truetype-font\" but the content can be something else.\r\n\r\nThe patch replaces all invalid characters with _ and also changes ClearTempFonts() to also remove hidden files in the temp folder.\r\n\r\nA different solution would be to use the [ass_add_font()](https://github.com/libass/libass/blob/73284b676b12b47e17af2ef1b430527299e10c17/libass/ass.h#L629) function of libass to provide fonts without writing them to a file first.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nPlay https://0x0.st/s-bQ.mkv in kodi.\r\nIn an unpatched version both subtitle lines will look the same. Also kodi will write a file \"test.txt\" to your home folder.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeroenpardon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12955", "title": "[Estuary] Change default button text & icon for tvshows in videoinfo \u2026", "body": "\u2026dialog\r\n\r\n## Description\r\nThis changes the button text and associated icon of the default focused button in the video info dialog when a tv show or season is selected.\r\n\r\n## Motivation and Context\r\nWhen opening the video info dialog for tv shows or seasons the button currently says \"Play\" while the action performed by pressing the button is browsing the tv show or season at hand, nothing is being played.\r\n\r\n## How Has This Been Tested?\r\nTested on custom estuary install\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "candrews": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12937", "title": "Update NEON support for cortex-a53", "body": "Update the NEON configuration for cortex-a53 to use that CPU's crypto capabilities and specifically optimize for that CPU\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nThis change optimizes the NEON support for the cortex-a53 (used by the Raspberry Pi 3).\r\n\r\nThe change was inspired by https://bugs.gentoo.org/633764#c1\r\n\r\nThe result of this change is more optimized code generated for the cortex-a53, particularly taking advantage of that CPU's crypto capabilities resulting in (slightly) improved performance. See https://github.com/RetroPie/RetroPie-Setup/issues/1385 (not that this PR does not use `-funsafe-math-optimizations` because it can cause problems - but the performance improvements of `-mcpu=cortex-a53 -mfpu=crypto-neon-fp-armv8` are still relevant).\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\nImprove performance/optimization for users of the cortex-a53.\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\nI did not test this change as I don't have this hardware.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [X] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12390", "title": "Update libfmt to 4.0.0", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nUpdate Kodi to use libfmt 4.0.0 https://github.com/fmtlib/fmt/releases/tag/4.0.0\r\nIMHO, this change is better than #12389 but it requires two additional changes, so perhaps #12389 should be merged first, then this when the prerequisites have been addressed.\r\nBefore this change can be merged, these two things must be done first:\r\n1. http://mirrors.kodi.tv/build-deps/sources must have libfmt-4.0.0 added to it so tools/depends/target/libfmt/Makefile can get it\r\n2. team-xbmc/xbmc-ppa-build-depends must have libfmt4-dev added and libfmt updated to version 4\r\n\r\nFYI, [Debian](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=866338) and [Fedora](https://bugzilla.redhat.com/show_bug.cgi?id=1465701) requests for updating to libfmt 4.0.0\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nIt's always nice to use the latest versions  of things :)\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nI tested it on my system, but note that CI does not currently pass (see above).\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [X] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [X] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fetzerch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12927", "title": "Show watched instead of collection icon for moviesets", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nI'd like to improve the movie views in Estuary. Currently when moviesets are enabled it's not possible to see if the movieset has been watched already or not:\r\n\r\n![screenshot001](https://user-images.githubusercontent.com/1133994/31584545-adbdb93a-b1b0-11e7-9fd8-090603ed1d9e.jpg)\r\n(all movies in the selected set have been watched)\r\n\r\nThis change drops the collection icon in favor of the watched state:\r\n![screenshot000](https://user-images.githubusercontent.com/1133994/31584558-db5d86cc-b1b0-11e7-9aeb-a10d86c2b40e.jpg)\r\n\r\nI'm not sure if that's the best solution from the user's perspective. Maybe it's possible to show the collection icon if the set is not watched and only show the watched check when it's watched.\r\n\r\n## Motivation and Context\r\nBe able to see if a movieset has been fully watched or contains unwatched movies.\r\n\r\n## How Has This Been Tested?\r\nSee screenshots above.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10918", "title": "[cmake] Platform specific overrides", "body": "This is a follow-up on the platform override discussions we had on slack and in the 2 predecessor PRs https://github.com/xbmc/xbmc/pull/10912 and https://github.com/xbmc/xbmc/pull/10909.\r\n\r\nI've worked on a couple of minimal examples for different options in a local branch: https://github.com/xbmc/xbmc/compare/master...fetzerch:platform_settings, then discussed with @FernetMenta and implemented to most promising one (option5) for the concrete AE usecase.\r\n\r\nNothing set in stone yet, comments on both, this - or any of the 4 other options in my branch are still highly appreciated.\r\n\r\nThe last commit is just for easier testing on linux, you can revert the changes to locally switch between override and no override.\r\n\r\nMy notes might be useful for easier understanding what happens:\r\n![unbenannt](https://cloud.githubusercontent.com/assets/1133994/20237745/1a0c3600-a8db-11e6-94ea-3fbf56bb815a.PNG)\r\n\r\nSome more notes and the requirements for this are accessible at: https://drive.google.com/open?id=1E1P2SWELCtUpJxHFeDf0TGi_H6xge-Co2rhCdJN-c4M", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mbarnes": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12886", "title": "[music] Support originaldate / originalyear tags", "body": "## Description\r\nThe [MusicBrainz Picard](https://picard.musicbrainz.org/) application places the release date of an album in its `date` tag. But a given album can have several releases over the years and most users expect to see the *original* release date of an album, which Picard places in its `originaldate` tag.\r\n\r\nSee: https://picard.musicbrainz.org/docs/mappings/\r\n\r\nFor example, a 1994 re-release of Led Zeppelin IV:\r\n```\r\n$ metaflac --export-tags-to - \"1 - Black Dog.flac\" | sort\r\n...\r\nDATE=1994-07-19\r\n...\r\nORIGINALDATE=1971-11-08\r\nORIGINALYEAR=1971\r\n```\r\nParse various tag formats for the *original* release date or year and prefer that over the release date, when updating the music database.\r\n\r\nTo see the changes take effect, users will need to touch all music files and then rebuild the music library.\r\n\r\n## How Has This Been Tested?\r\nBuilt Kodi locally on Linux/x86_64, tested changes against various **.flac** and **.ogg** files in my personal library, relied on [Picard documentation](https://picard.musicbrainz.org/docs/mappings/) for the rest.\r\n\r\n## Screenshots\r\n**Before** (re-release year shown)\r\n![before-screenshot](https://user-images.githubusercontent.com/56718/31278015-6431150a-aa71-11e7-8e0a-5cf7dea8421d.png)\r\n\r\n**After** (original year shown)\r\n![after-screenshot](https://user-images.githubusercontent.com/56718/31278026-6b9ba756-aa71-11e7-9af5-53fdd772ea82.png)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "noobSaibot1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12869", "title": "Special protocol migration", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nMigrating from using static map to special paths stored in https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/SpecialProtocol.cpp and calculated in\r\nhttps://github.com/xbmc/xbmc/blob/master/xbmc/Application.cpp to On-the-fly path calculations in \"SpecialProtocol.cpp\" instead.\r\n## Description\r\n<!--- Describe your change in detail -->\r\nInstead of using GetPath() in \"SpecialProtocol.h\" specific Static getters were implemented, means that the static path map in \"SpecialProtocol.cpp\" isn't needed for path calculations anymore.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\nThe aim is to solve the early destruction of the static path map (m_pathMap) while Kodi is exiting when the stored paths still needed by other code.\r\n\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\nRan the kodi-test project main and passed all tests, Ran Kodi to check for errors. Printed some logs to make sure the path translation (TranslatePath() in SpecialProtocol.h) is the same via GetPath() and new/replacement getters .\r\n\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\nVS 2017 debugger (Windows 10), kodi-test main (which runs all tests)\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- x[ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "th0ma5w": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12864", "title": "Fix HTTPS SHOUTcast Streams", "body": "This one line fix will remove a forced selection of HTTP for Shoutcast streams which causes a failure for streams that actually use HTTPS.\r\n\r\n## Description\r\nWhen a Shoutcast stream is discovered, this file renegotiates the connection. For some reason, which doesn't appear in any documentation, the connection is forced to be \"http\" perhaps to support buggy older Shoutcast servers from many years ago.\r\n\r\n## Motivation and Context\r\nI was trying to listen to WOSU in Columbus, Ohio using the URLs found at http://wosu.org/listen-live/ ... These point to HTTPS versions of the streams which would not load. Through debugging logs I found that upon renegotiation the https:// of the stream was being rewritten to http:// and then the stream would not play.\r\n\r\n## How Has This Been Tested?\r\nI have tested these and several other streams on Ubuntu Linux 16.04 LTS. \r\n\r\n## Screenshots (if appropriate):\r\nN/A\r\n\r\n## Types of change\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [X] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Wolftronics-SBC": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12860", "title": "Updated hungarian.xml frequently used buttons add to keyboard layout", "body": "Updated hungarian.xml frequently used buttons add to first keyboard layout\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12850", "title": "Keyboard layout skins fix 13.col visible need backport", "body": "<!--- Provide a general summary of your change in the Title above -->\r\nHungarian.xml first row 13 characters\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phate89": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12857", "title": "Use our api to set info on python scrapers", "body": "This is a splitup from https://github.com/xbmc/xbmc/pull/12661\r\nI replaced the use of properties with our functions we already use to set info in plugins.\r\nI also added nfo url support that @notspiff original implementation was missing.\r\nI'm not sure if it's worth it in music part since there are only few functions available.\r\n@ronie @DaveTBlake any opinion?\r\n\r\n## Motivation and Context\r\nWe can use functions we are more familiar with.\r\n\r\n## How Has This Been Tested?\r\nTested with my themoviedb python scraper\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12777", "title": "Use applicationmessenger to show CGUIDialogYesNo with an helper", "body": "Same as https://github.com/xbmc/xbmc/pull/10893 only with YeSNo Dialog. \r\n\r\n## Description\r\nReplace direct call to the dialog class with the existing helper class\r\n\r\n## Motivation and Context\r\nHelps to untangle guilib dependencies\r\n\r\n## How Has This Been Tested?\r\nTried a yesno dialog\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12661", "title": "Update themoviedb movie scraper to python", "body": "Finally I managed to finish the first working copy of themoviedb python scraper. \r\nThe themoviedb scraper is far from clean but I chose to create this pr to finally start the moving to python scrapers so every improvement is welcome. It's probably better to create a separate repo with it right?\r\nI also have a tvdb scraper but current v2 api I have to use have several problems for us so it's on hold.\r\nI used tmdb module to access tmdb api (a module based on requests).\r\n\r\n## Description\r\nThis pr include changes to use our python api to set info to videoinfotag (first commit) and musicinfotag (second commit).\r\n\r\n## Motivation and Context\r\n\r\nCurrently the addon gets the same results of the xml one (in theory) with some difference:\r\n* Python scrapers sometimes match different items than the xml ones. This is because we sort in core the results provided only from xml. edit: This is a wanted change from notspiff to leave freedom to scraper devs\r\n* It scrape more data that the old scraper left behind (for example the old scraper only got first studio and country, the python one adds all of them)\r\n* It finally adds ratings and uniqueids with proper name \r\n* I added imdb top250 parsing so now it gets that info too\r\n\r\nI'm not sure how it compares with old xml scrapers but I think old ones are still faster..\r\n\r\n\r\n## How Has This Been Tested?\r\nI tested them with several movies and compared the results directly in the db\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [X] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9262", "title": "Fix episode runtime of episodes with the same file", "body": "In episodes we can have a file connected to more than episode. \nSince we use the streamdetail to overvwrite runtime episodes if we have a multiepisode file all single episode right now have the full video length.\nFor example a file \n\"Lost 1x01-02\" file is 80 minutes long.\nEpisode 1 now have 80 minutes runtime and episode 2 80 minutes.\nI want to replace it with the average length so the episode 1 will have 40 min and episode 2 40 min. \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7014", "title": "Expand episode bookmarks to every media", "body": "I have a lot of blurays and I find episode bookmarks a very useful feature. It allows me to jump to the right episode if I want to. But bluray playback is not perfect, sometimes the longest video track is not the default one or there are too many to chose so I thought it might be useful to be able to set where a video should start in any media, not only multiple episodes.\nI renamed the feature \"media bookmarks\" and expanded to all three media types.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7006", "title": "Add support for file based stubs and improve support for disc stubs", "body": "This is a different version of https://github.com/xbmc/xbmc/pull/551.\n\nIt's the first time I go deep in Kodi code so please be patient with me.\nI tried to hide stub files under Kodi vfs in efile:// urls. I used something similar to a mix of Zip and special protocol file for efile stubs.\nI also improved disc stubs handling. Now theyworks similarly to iso files. Both they should work better now (thumbs creation, resume support, watched state, right info, episode bookmarks etc etc).\n\nI also removed several CFileItem creations only to get to IsDiscImage with a specific URIUtils method (called also from CFileItem).\n\nI have 3 doubts:\n1) I used FileDirectoryFactory to translate to efile links because is the only way I could find to store an efile:// in the database so I could both get access to the real efile file and the destination one. There are better solutions?\n2) I'm not sure if I have to disable thumbs creation for efile stubs or not. right now is disabled.\n3) (unrelated) In DVDInputStreamBluray before kodi was checking for \".iso|.img\" extensions. It's the only place where it doesn't use IsDiscImage that checks also for .nrg files. I replaced it with IsDiscImage. There's a different path for .nrg files I missed?\n\nNeeds xcode sync\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/5646", "title": "Use \"system.playlistspath\" setting instead of default library one in CUPnPServer", "body": "Same as https://github.com/xbmc/xbmc/pull/5583.\n\"special://profile/playlists\" string is used instead of the setting option \"system.playlistspath\" to check if it's the playlist path this time in CUPnPServer\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "HofiOne": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12821", "title": "Handle fileopen if running (second run)", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nAdded the following features:\r\n- accept media file open requests and replace the current playlist with a new one even if the app already started\r\n- two new Finder service items, \"Enqueue next in Kodi\", \"Enqueue last in Kodi\" to modify the current playlists without replacing it\r\n- ability to accept file drag and drop onto application icon\r\n- listing Kodi in \"Open with...\" Finder context menu for common media file types\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\nKodi Mac does not allow modifying or replacing the current playlist once the app has started.\r\n\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrdominuzq": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12804", "title": "[Depends] Replace distribute with setuptools", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nsetuptools belongs in native for it to be used\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nWe use native python to compile so setuptools belongs there\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nOnly build tested for android\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fonic": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12762", "title": "Fix international keyboard input for Linux input layer", "body": "Fix keyboard input for international keyboard layouts/keymaps when using plain Linux input layer.\r\n\r\n## Description\r\nOn platforms using the plain Linux input layer (e.g. OpenELEC/LibreELEC on Raspberry Pi), it is currently not possible to input characters other than ASCII on international keyboards.\r\n\r\nThis shortcoming has been present for a long time, probably from the very beginning, affecting lots of users. Unfortunately, the issue was never addressed correctly most likely due to a general misunderstanding of the concepts involved - from the bug reports below it is obvious that layouts, keymaps, input layers, virtual keyboard and physical keyboard are mixed up to the point where it is unclear which is what.\r\n\r\nFrom reviewing debug logs on both a LibreELEC/Raspberry and a desktop Linux installation of Kodi, I discovered that unicode input was already working as far as the kernel providing the correct translated unicode character for a given keypress, but somehow this information got lost along the way. After a whole day of digging through the code, I managed to pinpoint the origin of the issue and found the fix to be **very** simple.\r\n\r\nWhile at it, I also fixed two other issues (just for the sake of completeness):\r\n\r\n- map mode key ('Alt Gr') to right Alt key like most OS do\r\n- fix Euro currency sign\r\n\r\nRelated bug reports (probably many more):\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/108\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/739\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/1126\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/1661\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/1965\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/1986\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/2017\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/2094\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/3943\r\nhttps://github.com/OpenELEC/OpenELEC.tv/issues/4282\r\nhttp://openelec.tv/forum/124-raspberry-pi/75575-umlaute-not-working-logitec-k400-openelec-5-0-3\r\nhttp://openelec.tv/forum/105-keyboards/24435-german-keyboard-layout\r\nhttps://forum.libreelec.tv/thread/5757-raspberry-pi2-le-special-characters-not-work-from-keyboard/\r\nhttps://forum.libreelec.tv/thread/3384-problems-with-\u00fc-\u00f6-\u00e4-and-\u00df/\r\nhttps://forum.libreelec.tv/thread/2107-norwegian-keyboard-layout-norwegian-letters/\r\nhttps://forum.libreelec.tv/thread/1521-special-characters-in-spanish-keyboard-raspberry-pi-3/\r\n\r\n## Motivation and Context\r\nEnable users with keyboard layouts other than _en-US_ to input all possible characters (or, more precisely, all characters supported by Kodi) on platforms using the plain Linux input layer.\r\n\r\n## How Has This Been Tested?\r\nTested successfully with **LibreELEC** (compiled from Git snapshot of 'master' branch as of 09/02/17) on **Raspberry Pi 3**, German keyboard attached via USB and keymap set to 'de-latin1-nodeadkeys'. With the patch applied, I was able to input the characters **\u00fc\u00f6\u00e4\u00dc\u00d6\u00c4\u00df\u20ac**, without the patch pressing those keys does nothing.\r\n\r\nPlease note that the fix is universal, i.e. it should work with all keymaps/layouts.\r\n\r\nAs far as I can tell, the fix has no side-effects (needs to be verified by others!).\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Improvement (non-breaking change which improves existing functionality)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hudokkow": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12508", "title": "[modernize] Prefer 'nullptr' usage", "body": "## Description\r\nModernize code and prefer `nullptr`over `NULL` usage.\r\n\r\n## Motivation and Context\r\nModernize code.\r\n\r\n## How Has This Been Tested?\r\nBuild/brief runtime test on 14.04, 16.10 and 17.04\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Modernize code\r\n\r\nDone automagically with clang-tidy.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12351", "title": "[cleanup] Bye CryptThreading", "body": "This code is not used anywhere?\r\nBuild tested, brief runtime test.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11952", "title": "[droids] added, a little insecticide to deal with parasites", "body": "<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\nInsecticide\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nSee https://github.com/MrMC/mrmc/commit/f7a1f7e33c6bab0a5fa3247815e5ca50ce31cd31\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10741", "title": "[c-pluff] Update to 0.1.4", "body": "## Description\n\nThis updates the c-pluff lib from version 0.1.3 + patches to 0.1.4 + patches. I separated the patches and added them to patches/ dir. Should make it easier to update in the future. Most patches are small tweaks and some may not be needed anymore, with 2 notable exceptions: 0001-change-plugin-to-addon-tags.patch and 0003-missing-cpluff.dll-will-crash-Kod.patch\n## Motivation and Context\n\nI was curious to see how much our code differed from upstream c-pluff lib and it turns out it doesn't all that much. The exception is our favorite OS, Windows, with the biggest patch.\n## How Has This Been Tested?\n\nI've compile and shortly runtime tested this on linux. I've quickly tested installing add-ons and couldn't see anything weird on the debug log.\nThis will need a fair bit of runtime testing to see if everything still works.\n## Screenshots (if appropriate):\n## Types of change\n\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\n- [X] Dependency update that, hopefully, doesn't break anything.\n## Checklist:\n\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\n\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \n- [ ] My change requires a change to the documentation, either Doxygen or wiki\n- [ ] I have updated the documentation accordingly\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\n- [ ] I have added tests to cover my change\n- [ ] All new and existing tests passed\n\nFor reference, I extracted lib/cpluff/ from core and placed it in https://github.com/hudokkow/kodi-cpluff with history preserved, including history from xbmc-antiquated tree.\n\nc-pluff 0.1.4 already includes a slightly refactored version of https://github.com/hudokkow/kodi-cpluff/commit/1632bd2b3960250a2ebca0a940ccf2203e7a5878 written by JM.\n\nA [jenkins run](http://jenkins.kodi.tv/view/Helpers/job/BuildMulti-All/1673/) showed that this introduced a problem with doxygen. I didn't noticed it on my machine because I have it installed. Uninstalled it and sure enough, build fails.\n\nOdd thing is, if I build c-pluff standalone, it doesn't complain about missing doxygen. Autotools really isn't my thing and I couldn't find anything that might cause this in FindCpluff.cmake.\n@wsnipex and @fetzerch, any ideas? Can you guys have a look?\nThe major change to how docs are built is https://github.com/jlehtine/c-pluff/commit/1673a38fcbb9431f91767fce34015fa3828f8986\n\nError is common to all failing builds:\n\n> Making install in po\n> Making install in test\n> Making install in docsrc\n> Making install in doc\n> Making install in img\n>  /bin/mkdir -p '/home/jenkins/workspace/LINUX-64/build/build/cpluff/share/doc/cpluff/html/img'\n>  /usr/bin/install -c -m 644 architecture.png pageborder.png '/home/jenkins/workspace/LINUX-64/build/build/cpluff/share/doc/cpluff/html/img'\n> /bin/sh: doxygen: command not found\n> Makefile:880: recipe for target 'doc/reference/c-api/index.html' failed\n> make[8]: **\\* [doc/reference/c-api/index.html] Error 127\n> Makefile:911: recipe for target 'doc' failed\n> make[7]: **\\* [doc] Error 2\n> Makefile:710: recipe for target 'install-reference-doc' failed\n> make[6]: **\\* [install-reference-doc] Error 2\n> Makefile:597: recipe for target 'install-am' failed\n> make[5]: **\\* [install-am] Error 2\n> Makefile:436: recipe for target 'install-recursive' failed\n> make[4]: **\\* [install-recursive] Error 1\n> Makefile:489: recipe for target 'install-recursive' failed\n> make[3]: **\\* [install-recursive] Error 1\n> CMakeFiles/libcpluff.dir/build.make:74: recipe for target 'build/cpluff/src/libcpluff-stamp/libcpluff-install' failed\n> make[2]: **\\* [build/cpluff/src/libcpluff-stamp/libcpluff-install] Error 2\n> CMakeFiles/Makefile2:447: recipe for target 'CMakeFiles/libcpluff.dir/all' failed\n> make[1]: **\\* [CMakeFiles/libcpluff.dir/all] Error 2\n> Makefile:127: recipe for target 'all' failed\n> make: **\\* [all] Error 2\n> Build step 'Execute shell' marked build as failure\n\nFor once win32 build went fine, specially after a change like this, which is quite surprising because I didn't updated the VS solution.\n@Paxxi, can you check it?\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758", "body": "Thanks.\n\n;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986", "body": "Thanks for the tips, guys. I'm not used to git, so it's kinda 'learn as you go' for me.\n\nIt seems you're not so grumpy after all, spiff. :))\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "Montellese": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12252", "title": "[network] CWebServer: add support for Cross-Origin Resource Sharing (CORS)", "body": "This is a WIP PR for adding Cross-Origin Resource Sharing (CORS) to Kodi's webserver. I open the PR because of #12225 and because I need input on how to handle configuring the list of allowed domains. I also haven't done much testing yet because I don't have a client ready to hand.\r\n\r\n## Motivation and Context\r\nIn general browsers don't allow performing POST requests from one domain to another due to security reasons. This however can stop clients from interacting with Kodi. The solution for this is Cross-Origin Resource Sharing (CORS) which adds additional HTTP headers to the request and responses indicating whether CORS is supported or not.\r\nDue to this being a potential security issue (if not properly configured) CORS is disabled by default and needs to be manually enabled by the user in the settings.\r\n\r\nFurthermore the proper thing to do would be to ask the user to configure the list of domains which should be allowed to use CORS. This is however very technical and I'm not sure how best to integrate this into the user interface which is why I haven't done it yet. Right now when CORS is enabled the webserver accepts cross domain requests from any domain.\r\n\r\n## Types of change\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [x] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11833", "title": "Use spdlog for logging", "body": "This replaces our homemade logging implementation with [spdlog](https://github.com/gabime/spdlog) which is a header-only C++11 logging library which depends on the recently introduced [{fmt}](https://github.com/fmtlib/fmt) library (so we can use the exact same formatting style).\r\n\r\nI only tested this on Windows and Linux so far. It should compile on Android but I didn't runtime test it. OSX/iOS is completely untested. Please take a look at the following platform-specific interface implementations:\r\n* POXIS: https://github.com/xbmc/xbmc/commit/dccc02073c3ad9088b80348a6e44dc456155a9e3#diff-a862c7434b0614fad35e45406ab477d4\r\n* Darwin: https://github.com/xbmc/xbmc/commit/dccc02073c3ad9088b80348a6e44dc456155a9e3#diff-616ffcf8daa5bad68c294971c149117b\r\n* Android: https://github.com/xbmc/xbmc/commit/dccc02073c3ad9088b80348a6e44dc456155a9e3#diff-4de9b444ed50f7831abc986d45ef8fda\r\n* Windows: https://github.com/xbmc/xbmc/commit/dccc02073c3ad9088b80348a6e44dc456155a9e3#diff-26243219725e225f0e126ab73069f522\r\n\r\nFor Ubuntu there is a `libspdlog-dev` package available for Xenial at http://packages.ubuntu.com/xenial/libdevel/libspdlog-dev but I wasn't able to figure out which version it actually is because it says 1.6 but that's not a valid release of spdlog. ~~But I adjusted the code to work with it nonetheless (had to work around a missing feature in the Ubuntu package).~~ Unfortunately it is not at all compatible with version 0.11.0 I used for this PR because it is missing several include files and some essential methods in the logger implementation.\r\n\r\n## Motivation and Context\r\nThe advantage of a standard logging implementation is that we don't have to maintain our own implementation and they are well tested.\r\nspdlog comes with a set of sinks that cover all of our use cases (console/file/adb logging/VS/... logging) and more that we might want to use in the future (file rotation, ...). Furthermore it supports named loggers which should make logging in the code much easier and also make the log file easier to read because every class/instance follows the same guidelines (right now every class logs their class name differently or not at all). As an example I've implemented a named logger for the `CWebServer` class in 9ed2953de94f50cc578cfad1af18b873c33817e7.\r\n\r\nUsing templates I also managed to get rid of the difference between `Log` and `LogW` which makes the interface of `CLog` easier to use.\r\n\r\nI had to fix some log messages (all collected in 6f1e4a6fb0e29fb693270335f1084cb36d41a9b6) because they didn't match in type and therefore weren't type safe.\r\n\r\n## How Has This Been Tested?\r\nLocal testing on windows.\r\n\r\n## Types of change\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [x] All new and existing tests passed\r\n\r\n## TODOs\r\n- [ ] better solution for `gai_strerror()` as char/wchar_t\r\n- [ ] fix pkgconfig version\r\n- [ ] fixed width for thread id and log level\r\n- [ ] find a solution for `LOGINFO` vs. `LOGNOTICE`\r\n- [x] add `TARGET_WIN10` defines\r\n- [x] get rid of unnecessary trailing newlines in log messages\r\n- [x] fix crash in `CDVDDemuxClient`", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/739287", "body": "I thought there was already a script doing a similar thing (using smart playlists). It's called \"Pseudo TV\" or something like that (didn't check the repo). AFAIK it needs some extra configuration to work but it basically does the same thing and is already supported in some skins.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/739287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/330287", "body": "Good find diederich. Thanks a lot, will fix this later.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/330287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/344134", "body": "I could change the meaning of the \"bool allowFile\" parameter but its initial meaning was that it can restrict a method from returning a \"file\" property that's why I made it an && condition with the hasFileField. Will have to look at it and see if there would be any problems with other methods when I'd change it to || but it shouldn't as with the new json rpc handling a client can't pass a \"file\" field anyway if the method doesn't allow it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/344134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/345368", "body": "I can confirm the Win32 build failure. I pushed a fix to my own fork for inspection: https://github.com/Montellese/xbmc/commit/b219c42dd98a007eb30d6a82d858d4a733ad475d\n\nWasn't sure what version of boost we are using (there's no readme or anything in the boost lib folder) so I went for the 1.38 because they started changing their directory structure.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/345368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384626", "body": "This seems to have broken win32 build because there is no g_timezone available there. There needs to be some kind of #define around the whole thing which excludes win32 the same way \n# if defined(_LINUX) && !defined(__APPLE__)\n\ndid before these changes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22545", "body": "Bad indentation but you can ditch the { and } in this case anyway as there's only a single command inside the for-loop anyway\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22546", "body": "Bad indentation (not that important in the service description but still looks nicer.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22547", "body": "Bad indentation again\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22548", "body": "There already is a json object with the ID \"Library.Genres\" in AudioLibrary.GetGenres so you should rename this to something like \"Library.Genres.Videos\" (and adjust the one in AudioLibrary to \"Library.Genres.Audio\") or just ditch the whole ID definition as you don't use it anywhere else anyways. The one in AudioLibrary could be ditched as well.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22550", "body": "You might wanna check if this call succeeded and only execute the for-loop and the call to HandleFileItemList when it succeeds (check AudioLibrary.cpp for the GetGenres implementation there).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22551", "body": "Bad indentation.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/22551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26184", "body": "One space too much in front of CVideoLibrary::GetGenres\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26185", "body": "You need to add a \"field\" parameter with the \"thumbnail\" value in an enum. I changed this behaviour a while ago but I forgot to remove it from AudioLibrary.GetGenres.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26186", "body": "This should not be here and \"thumbnail\" should be an optional field.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26187", "body": "This extra line is unneeded.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/26187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/112470", "body": "I'm not sure I like this. Sure it does what it should BUT we will end up with a file playing but not being in any playlist. If possible I'd prefer if every (audio and video) item that is being played is in a playlist because that makes it easier to access the currently playing item(s) by just checking CPlaylistPlayer.\n\nNot sure if adding the file to a playlist should be done here or inside CApplication::PlayMedia() though. Doing it inside PlayMedia() would have the advantage of being able to handle all those special cases like internet streams etc first before actually creating the playlist (if necessary).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/112470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/120318", "body": "CFileItem::IsPlaylist() does not exists but CFileItem::IsPlayList() does so you need to fix that because otherwise it won't compile.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/120318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/194002", "body": "Why even use SQL's LIKE? No sense in using LIKE if there are not any wildcards (%) used. It will only slow down the DBMS as LIKE comparisons are a bit more work than equality (=) comparisons (unless the DBMS notices that it doesn't make sense to use LIKE itself).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/194002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/465641", "body": "I have to admit that I don't know. I took this from the current logic which chooses the audio stream with the most channels / best codec (see https://github.com/xbmc/xbmc/pull/700/files#L1L640).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/465641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/465642", "body": "It could be stored in g_langInfo instead of the value read from langinfo.xml (if we want to drop those) so that it can be retrieved using g_langInfo.GetDVDAudioLanguage() (or rename it to GetAudioLanguage).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/465642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/467986", "body": "I just checked the code and I'm not sure if this code does even affect DVDs because there is some code in DVDInputStreamNavigator.cpp which tries to set the audio stream using DllDvdNav::dvdnav_audio_language_select() (where we probably should replace the usage of CLangInfo::GetDVDAudioLanguage() by the new CLangInfo::GetAudioLanguage()).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/467986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717570", "body": "Bad indentation. Either remove the { and } or fix their indentation.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717572", "body": "This is not really needed as you don't do anything else after this if-statement.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717944", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717946", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717948", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717949", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/717949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/718272", "body": "Is this extra parsing (instead of using XMLUtils::GetStringArray() really necessary? Is it because of the optional < name > tag?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/718272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/773476", "body": "@jmarshallnz has already mentioned this earlier and this was my response:\n\nI don't really like doing the sorting myself either. The reasons why I did it that way is that I did not want to change the original order of the streams as read from the container. Furthermore I figured that in most cases there are one or two streams to sort so using std::sort doesn't really seem like it will provide a huge advantage. But if we don't really need/care about the original order of the streams I'm happy to remove the custom sorting code, implement the needed method to pass to std::sort und use that one. I'm guessing @elupus will be the man to tell me whether we want to keep the original order or not.\n\nSo if we don't need to keep the original order I can switch to using std::sort. Otherwise I'd either have to use the custom sorting implementation or copy the whole CSelectionStreams object into a new one in which I can change the order (because it's just a copy).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/773476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/780185", "body": "A c&p error. Thanks for spotting it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/780185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/780204", "body": "It has been removed in the new code in my alternative branch (see the PR's last comment).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/780204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/873120", "body": "Any reason for the params parameter being a reference and not a const reference?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/873120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919634", "body": "What's the difference between strArtist and artist? I didn't read through the thread so maybe it's stated there but it looks very confusing to me. Will strArtist always contain a single artist's name?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919635", "body": "Why do you need this if GetArtist() also returns m_strArtist after these changes?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919638", "body": "I don't like this at all. I did the whole conversion from CStdString to more suiting types like std::vectorstd::string for the very reason to get rid of such things. With these changes m_strArtist and m_artist basically contain the same information, just in a different form and m_artist is IMO the better representation because it's a list of artists. Sure the m_strArtist may be easier to use in a GUI context but not in the database context.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919641", "body": "See comment above. What you do now is make a vector into a string and then back into a vector.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919642", "body": "See comment above concerning m_strArtist and m_artist.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/919642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/949469", "body": "Would a m_data.array.reserve() make sense here as we know the size of strArray?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/949469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1118128", "body": "A simple return i->second == DB_READY; should be enough?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1118128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1163838", "body": "This is wrong. You can't change SORT_METHOD_PLAYLIST_ORDER because smartplaylists have their own sorting which the user can specify so we can't ignore that and sort by SortTitle. But the %T instead of the %L makes sense.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1163838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1163839", "body": "This doesn't look right. It will change the sort method of the tvshow view to whatever the user set it to in the movies view.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1163839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185919", "body": "No need for this check. CJSONServiceDescription will make sure that parameterObject[\"deletefile\"] exists.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185922", "body": "No need for the empty string initialization.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185927", "body": "These need to go on a new line (also the ones further down).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185929", "body": "No need to do all this here if you can't delete a tvshow anyway (you don't retrieve filePath).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185942", "body": "Either pass VIDEODB_CONTENT_FOO directly to GetFilePathById() and get rid of the iType variable or move the call to GetFilePathById() outside of all the if-else code and call it only once.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185948", "body": "Can be integrated into the above if-condition.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185950", "body": "No need for the { } if there's only one statement.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1185950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1288257", "body": "I don't like this. It means that whenever someone just wants to retrieve the streamdetails we will also query the database for the cast, sets and other information that require extra queries. Either make an extra if-condition-block for the streamdetails or add an \"if (additionalInfo)\" in front of the videodatabase.GetFooInfo() call (not only here but also for episodes and musicvideos).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1288257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1288274", "body": "I don't really see any benefit from this. In JSON-RPC every CVideoInfoTag object is only retrieved once from the database then serialized into JSON and thrown away. In the GUI listings the thumbloader already checks against m_streamDetails.HasItems() before it tries to retrieve streamdetails so IMO there is no benefit in this extra member variable.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1288274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1293690", "body": "Sorry didn't get any email notification on your response. No the CVideoInfoTag object already exists in the CFileItemPtr from the list and both GetMovieInfo and GetStreamDetails just alter its details if necessary.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1293690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1318507", "body": "This needs to be fixed for win32 because the method must return a value (void*) so make it return NULL;\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1318507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1513151", "body": "I'd prefer using GetField(m_field, strType) instead of a fixed \"tvshowview.idShow\" in the SQL. That makes it more in line with all the other field accesses (except all the *.idFile ones).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1513151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1513156", "body": "It's only about the \"tvshowview.idShow\" and not about the idShow in the sub-SELECT. If we wouldn't wanna have the \"select idShow\" in the sub-query we'd probably have to use EXISTS and NOT EXISTS and I never really liked those.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1513156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1522679", "body": "So caching HTML pages for a day and non-HTML pages for a year? Shouldn't be a problem.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1522679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714975", "body": "Make i unsigned int (or size_t) and you don't need the cast to int to avoid the compiler warning ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714977", "body": "Same\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714983", "body": "This could be merged with the #elif defined(TARGET_LINUX) ... on line 38 i.e.\n\n#elif (defined(TARGET_LINUX) || defined(TARGET_FREEBSD)) && defined(HAS_GLES) && defined(HAS_EGL)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714997", "body": "Yeah iterators would even be better. The cast is to avoid the compiler warning about comparing an int (i) with an unsigned int (std::vector::size()).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1714997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715004", "body": "Shouldn't this be \"system.h\"? Obviously \"xbmc/system.h\" will also work but it confused me for a sec as I had to check if there's a second \"system.h\" somewhere.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715016", "body": "One space too much indentation. But in the light of davilla's crusade against log messages this one could be removed as well I guess.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715049", "body": "#else (like in the android implementation) because otherwise you'll probably get a compiler warning about unreachable code if _FBDEV_WINDOW_H_ is defined.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715051", "body": "Can we be certain that nativeWindow is never NULL or do we need a check here?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715055", "body": "If this is intended you can remove the if-else condition completely.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715064", "body": "Not really necessary as you already initialized the whole buffer (valstr) to 0 i.e. '\\0'.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715074", "body": "Can this get some indentation? It looks like a new line of code but actually belongs to the previous CStdString::Format() code.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715076", "body": "Maybe\n\n```\nset_sysfs_int(blank_framebuffer.c_str(), show ? 0 : 1);\n```\n\nto save some duplication?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715081", "body": "We usually have the else (and the { ) on a new line.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715090", "body": "can be done in one line\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715100", "body": "Does the refresh rate matter (i.e. should we only match 60Hz and 50Hz)? If not you could just check \n\n```\nif (modestr.Left(4).Equals(\"1080\"))\n```\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715112", "body": "How about\n\n```\nfromMode.Left(4).Equals(\"720\")\n```\n\nthen set the proper width and height and then use another comparison to check if it ends with \"50Hz\" or not? Would save some code duplication especially on all the 1080p/1080i/...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715130", "body": "Could do with some indentation as well (see my previous comment). Actually mabe this could be factored out into a helper function as this is an exact c&p from code further up (line 149).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715144", "body": "You're right. I thought only delete was NULL-safe but looks like free() is as well. Nothing to see here ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715245", "body": "cosmetic: space between if and (. Same in some of the checks further down.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715249", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715250", "body": "bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715282", "body": "I know this is a real sucker as I tried to abstract it as well back when I worked on EGL for android. Maybe someone else has an idea on how to properly abstract this into something platform-agnostic.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715285", "body": "Could we make this an implementation-dependent configuration as well instead of using this #ifdef?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715287", "body": "cosmetic: space between if and ( (also the others further down)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715298", "body": "cosmetic: no need for the { and }\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1715298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726134", "body": "Yup, nice find.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726183", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726189", "body": "I'm not sure I remember correctly but I think I had that first but then changed it to this for some reason (which I obviously can't remember anymore).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726191", "body": "I don't think I understand. You mean rename the SetRangeSelector() method? Or what do you mean with SELECT?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726210", "body": "Probably yes. They mainly differ in the WHERE and GROUP clause (which is easily handled with the Filter class) and in the field read from the database and used for the label and path.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726251", "body": "Yup will align properly.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726255", "body": "Yup will add.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726261", "body": "Yeah I'd love to come up with a better implementation but I wasn't able to so far either :-/\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726267", "body": "Ah now I get it. Well I never considered it, not sure what would be more intuitive. But using SELECT instead of UP/DOWN would certainly make it easier to navigate through the list of filters because every UP/DOWN will bring you to a different filter instead of switching between the range selectors.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726277", "body": "Why? Filter() contains all the logic to update the button, show whatever dialog is required etc. I moved it there because I need it in ACTION_FILTER handling as well and didn't wanna duplicate the code.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1726277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727613", "body": "Actually I just realized that it already works that way. dirty is a reference parameter passed to ProcessSelector() from Process() so Process() will get dirty == true if it is marked as such in ProcessSelector() and will also handle it there. Should I change that to passing dirty back as a return value instead of a reference parameter?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727630", "body": "Ah the compiler just reminded me why the call to Open() has to be done in there and on the CVideoDatabase/CMusicDatabase object: CDatabase::Open() is protected and can therefore not be called from outside.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727686", "body": "Moved the variables down as they are not needed before this possible call to \"break;\" anyway\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727854", "body": "I added GetCommonNav which takes a table/view name and the name of the field in that table/view to be used as the label of the retrieved item. That safes quite some code duplication.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1727854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728163", "body": "Bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728164", "body": "Bad indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728165", "body": "Bad indentation (only 2 spaces per level), same in the else-block.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728169", "body": "Please put the actual code on a new line (no { } needed if it's only a single line). Same in the else-block.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728174", "body": "Bad indentation of this whole block\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728176", "body": "Bad indentation (only 2 spaces per level)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1728176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1736324", "body": "Hm I'll have to look into it. I'm getting confused in CGUIMediaWindow as I have multiple branches with changes in this area (advanced library filtering e.g.). It should filter the unfiltered list but maybe I messed this up.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1736324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1736779", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1736779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1737699", "body": "OK I implemented using ACTION_SELECT_ITEM instead of ACTION_MOVE_UP/DOWN so ppl can give it a try. For me it's hard to say which would be more intuitive as I've used the up/down implementation for a few months now and I'm very used to it. Using select certainly makes the general navigation through the list of filters more consistent as every up/down press brings you to another filter. But I don't know if I would have intuitively pressed Select/Enter to get to the other slider.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1737699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741375", "body": "Hm very odd. I wrote all of this code on win32 (actually I took it out from one of my branches which uses StringUtils::Format() all over the place and it always worked. I also wrote and ran the unit test for this method on win32 and it worked as well. wtf is going on?!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741696", "body": "Ah right that explains it. I'll have to change the fmt parameter from const std::string& to const char*.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741708", "body": "Yeah I just realized that as well. Will use a char\\* buffer instead of a std::string.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741768", "body": "Ugly workaround ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741890", "body": "http://pastebin.com/9L8Pi8x2 should fix it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1741890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1742585", "body": "Using _vscprintf is not necessary to fix the current problem. It can still be added later if really necessary (as it's only an optimization).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1742585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1783665", "body": "That's done in the database anyway (there are two commits for it, one for videodb and one for musicdb) because otherwise the filtering in the filter dialog wouldn't work properly either. But I can added, doesn't really make any difference.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1783665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792130", "body": "Could we get\n\n```\nif (strcmp(message, \"OnPlay\") == 0)\n```\n\nhere instead. That \"!\" confused me for a second as it kinda reads like \"if not string compare\".\n\nEDIT: Same on the ones further down.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792136", "body": "You might wanna cast the return value of asInteger() to (int) because it returns int64_t which doesn't match %d (same further down).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792454", "body": "This is a general problem in xbmc. In JSON-RPC I also have to manually retrieve the stream details but there I have the advantage that I only have to do it if requested by the client. Will this metadata be cached by upnp until something changes or is it retrieved everytime a user goes into his video listing?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792469", "body": "You can take a look at https://github.com/xbmc/xbmc/commit/0dddb48fa91f7c292433e055617af7400dd1a0d9#diff-2 for how I did it in JSON-RPC (FileItemHandler.cpp). It's not perfect but a lot better.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792486", "body": "Shouldn't this be up to our VFS handler (ImageFile.h/cpp) to deal with? I don't know the context here but ideally you'd use the image:// URL as you get it (which includes the url-encoded path to the original source of the image but not the locally cached one) and let the VFS handle the lookup in the db to map the url-encoded path to the path pointing to the locally cached image.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792736", "body": "intentional?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1792736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1795182", "body": "The problem is that the number of SQL queries during a directory fetch jumps from 1 to 1 + n where n is the number of items retrieved. If you retrieve 1000+ movies you'll end up with 1001 SQL queries instead of 1 which obviously results in quite a noticeable slowdown.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1795182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1797080", "body": "Based on my last comment and description of the problem it should be obvious that retrieving streamdetails during a directory fetch is out of the question. IMO right now the way you've done it is the only real way to go although it is anything but ideal but ideal doesn't exist in this area right now.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1797080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1799498", "body": "As @jmarshallnz mentioned this should be\n\n```\nvalue[\"uniqueid\"][\"unknown\"] = m_strUniqueId;\n```\n\nfor now.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1799498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1799507", "body": "@jmarshallnz Do you think we should do something special here as well similar to the CVariant serialization?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1799507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804155", "body": "maybe an\n\n```\nelse if (!m_art.empty())\n  m_art[\"thumb\"] = m_art.begin()->second;\n```\n\nas a final fallback?\nAlso should we check if the URLs of \"poster\" and \"banner\" might be empty before assigning them to \"thumb\"?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804167", "body": "Unrelated? I remember adding that CStdString because CVariant didn't understand wchar_t back then but it does now IIRC. But \"sortLabel\" isn't really used anywhere else anyway.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804171", "body": "Save two lines ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804183", "body": "Ah right yeah didn't consider that possibility.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1804183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806274", "body": "Wrong method name. Should be UpdateContainer.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806311", "body": "Why does this have to happen here? What if the call to CommitTransaction() fails and throws an exception? In that case the movie wouldn't have been removed but the announcement has been sent out.\n\nEDIT: Same problem further down.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806645", "body": "The problem is that everything we throw into the data object of an announcement is also sent out to JSON-RPC and a parentid is not part of the API specification right now. But it might be worth adding an extra object to every announcement where we can store internal data that should be ignored by JSON-RPC etc.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806780", "body": "Well the chance for a failed CommitTransaction() is very very small so IMO this change is acceptable but can you add a comment like\n\n```\n//TODO: move this below CommitTransaction() once UPnP doesn't really on this anymore\n```\n\nso we don't forget why it is there and that it would ideally be placed differently.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1806780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1836213", "body": "Something I was wondering last time I looked into this code. Why don't we use a list of items that need additional art here (obviously negated and with &&) instead of a list that doesn't need additional art? Because if we add a new type and it doesn't make sense to fetch any artwork for it (e.g. \"tag\" right now) we never look into CVideoThumbloader and add it to this list (as you can see \"tag\" is missing in this list because of that reason). Buf if I add a new media type (e.g. \"sport\") and I want artwork for it I automatically look into this implementation and see that I have to add it to this list.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1836213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1900414", "body": "I was considering the same thing but the changes required are certainly more work and they touch more files as Update can be overwritten by every class derived from CGUIMediaWindow. But I agree that I would also prefer to save this extra member variable if possible.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1900414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1907667", "body": "Ah I forgot to change that (had it in mind). Thanks for pointing it out.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1907667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1914401", "body": "The problem is that the Copy into m_vecItems also copies the path stored in items which might not be the original path but a filtered path (for xsp's the original path points to the xsp file but the path in items is \"videodb://foo/bar/\" so this is necessary.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1914401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1914443", "body": "This one is certainly not required. I can remove the commit adding some logging to CGUIDialogMediaFilter but if the filter dialog doesn't open/work for someone there's no other way to know why.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1914443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1914470", "body": "It's already done in OnFilterItems() which is called by OnFinalizeFileItems() which is called three lines further up. But I can re-add it here if requested.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1914470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1920217", "body": "If I remove that logic from CVideoDatabase and CMusicDatabase the filtering won't work anymore because it needs the actual videodb:// and musicdb:// path.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1920217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1921787", "body": "I get your point, all I wanted to point out is that removing this line and adjusting the database code to not alter the CFileItemList's path will break the advanced filtering completely so we'll have to come up with a different approach that covers both use cases.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1921787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1925382", "body": "An alternative would be to store the path used for filtering into a property (e.g. \"path.filter\") of the returned CFileItemList in CSmartPlaylistDirectory::GetDirectory() and check if that property exists and extract it in CGUIMediaWindow::Update().\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1925382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1947575", "body": "As there are no arguments in the ctors of CCurlFile and CHTTPFile the base constructor (i.e. CCurlFile) should be called implicitly.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1947575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1961125", "body": "Any reason why you store the sort order as a string instead of just the value of the SortBy enum? You have to convert it to the string when storing it and back from a string when reading it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/1961125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2001944", "body": "Maybe make it strtof while you're at it?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2001944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2014076", "body": "This will break VideoLibrary.SetFooDetails methods in JSON-RPC because they currently work with a string. Plus it needs adjustments in the JSON schema.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2014076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2014084", "body": "This will break JSON-RPC clients retrieving the \"runtime\" property of a video as they expect a string. And it will also need changes in the JSON schema.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2014084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2014445", "body": "This causes all the SortByFoo methods which don't have a corresponding SORT_METHOD_FOO (and therefore aren't listed in the map in SortUtils) to appear as \"None\" in the smartplaylist editor dialog. Either add the missing SortByFoo to the map in SortUtils or keep CSmartPlaylistRule::GetLocalizedOrder() for now (as the map it uses is still present anyway).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2014445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2040813", "body": "I'm sure there a way around these goto's e.g. using the value of ret further down to check if an error has happened before and then doingthe rollback instead of the commit. Will even save you doing the announcement call twice.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2040813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041132", "body": "Ah now I see why you used goto. Sorry I read the code wrong. Yeah we should bail out on the first error so I guess the goto is needed nonetheless. It doesn't make sense to run CleanupAlbums() or CleanupArtists() if CleanupSongs() already failed.\nSorry about that. Hope you can get your previous work back with \"git reflog\".\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041307", "body": "No need for this to be a pointer. A normal object will work just as well and you can't forget the call to delete in that case (which you did).\nSame applies to curP and the changes in CGUIWindowVideoNav.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041317", "body": "I'd put the \"\\* \" into the localized string as well (think of right-to-left languages etc).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041335", "body": "This is a bit tricky because we can't assume that the filesystem structure has an extra directory for the movie set. Not sure what the best way to go is though.\n\nEDIT: To make things easier we could change the logic in CVideoDatabase::GetSetsByWhere() to store the path of the first item im CVideoInfoTag::m_strPath for a set item. Then you could safe the additional call to GetDirectory() etc.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041356", "body": "Why index 1 and not 0 (same on the next line)? I'd just do\n\n``` cpp\nif (GetDirectory(item.GetPath(), items) && items.Size() > 0)\n```\n\nhere because GetDirectory() might also fail.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041372", "body": "This is most likely the full path to the media file and not the path to it's parent directory so you are missing a URIUtils::GetDirectory().\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041680", "body": "@cptspiff has the final word these days on PRs being merged ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041892", "body": "Ah that's the \"...\" (parent) item you see in the GUI. Unfortunately that depends on GUI settings so doing it like this here is not safe as the user might have the parent item disabled and the set might only contain a single movie and then items[1] wouldn't exist and it would blow up.\n\nProbably best to go with the way I mentioned in the comment further up i.e. setting the path of the first item in the set as the path of the set's CVideoInfoTag.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2041892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2042588", "body": "This check is not necessary as at the very start of the for-loop there's a check for it->second.movies.size() <= 0 which will result in skipping the set so this check will always be true.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2042588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2067993", "body": "GetType() could return \"artist\" (although it should never happen here) which we don't handle so I'd do something like\n\n``` cpp\nelse if (item->HasMusicInfoTag() && !item->GetMusicInfoTag()->GetType().empty())\n{\n  std::string type = item->GetMusicInfoTag()->GetType();\n  if (type == \"album\" || type == \"song\")\n    object[\"type\"] = type;\n}\n```\n\ninstead. That way we are 100% sure that object[\"type\"] won't contain anything that is not specified in the JSON schema.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2067993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2217086", "body": "I thought this would be more future proof in case we have to add more of these special cases. I went with the boolean approach in VideoLibrary.cpp and it's getting a bit confusing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2217086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2232123", "body": "Should be sMediaMounted instead of sExternalStorageState.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2232123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2261763", "body": "Always nice to c & p a typo :-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2261763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601783", "body": "Can't these go on one line? Furthermore the method is called StartActivityWithExtra so using \"StartActivity\" in the debug output could be confusing because there's also a StartActivity() method.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601797", "body": "Please move this all the way down right before where you use it. We only have a limited amount of JNI references available and therefore we need to create them as late as possible and destroy them as early as possible.\n\nPS : I assume you copied this from the StartActivity() method so maybe you can change it there as well if you got time.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601805", "body": "Same as above, please use \"StartActivityWithExtras\".\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601864", "body": "Any reason why you don't store the returned value here? But if you merge StartActivity() and StartActivityWithExtra() as I proposed in your other PR you won't need this differentiation anymore anyway.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2601864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2723381", "body": "Please call DeleteLocalRef() on cActivity after this line because you don't need it anymore. Actually deleting the cActivity reference is missing altogether.\n\nSame applies for SetSystemVolume().\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/2723381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3039290", "body": "Bad indentation.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3039290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3039291", "body": "Can you move this into a seperate commit please?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3039291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3113691", "body": "You need to detach again.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3113691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3131350", "body": "Don't have time right now for a closer look but IIRC there's kind of a chicken-egg problem in this area where g_guiSettings.m_LookAndFeelResolution depends on the rendering system already being initialised to be able to choose from a list of available and valid resolutions and the fact that the rendering system needs to know about the resolution to use. It popped up once after @theuni refactored some of the \"run headless\" stuff.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3131350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3201948", "body": "Do we really need an extra variable here?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3201948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3250313", "body": "Does this have any effect on other calls like VideoLibrary.GetMovieSets because a set is theoretically a folder containing movies (same with GetTVShows etc). We don't want the \"filetype\" property showing up in these cases. Maybe it should be added in CFileOperations::GetDirectory() where we loop through all the retrieved files/directories anyway? Then we are 100% that \"filetype\" will only show up for Files.GetDirectory.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3250313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3258654", "body": "Not sure if \"GetDateTime()\" (and m_dateTime) is a good choice as it's a very specific date time and there are other date time values as well.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3258654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3258672", "body": "Cosmetics: add a space between if and the paranthesis and you can drop the { } if there's only one line following the if-condition.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3258672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3258676", "body": "Indentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3258676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3277085", "body": "I just realized that you need to put this parameter behind the \"sort\" parameter because otherwise you break backwards compatibility of the \"parameter-by-position\" functionality demanded by the JSON-RPC 2.0 specification.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3277085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3277094", "body": "Can you bump the version to 6.1.0 instead as this is a new feature and not a fix? I will then first merge #2248 (which is also a new feature) and then this one so that we don't have to bump the version twice.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3277094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3277243", "body": "From a general XBMC point of view IMO something like GetDateTimeTaken() or something like that would be more obvious. I'm not sure what other date/time values there are for a picture (apart from the usual file times like created, modified, last accessed etc which are handled by CFileItem) but IMO choosing a good name is better than having to open the header file to read the comment to know what date/time it represents.\n\nEDIT: Obviously you can leave the comment about libexif etc even if we change the name of the variable/method.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3277243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3308247", "body": "That's just because of the squashing and rebasing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3308247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3317043", "body": "\"video\" is currently not a valid value for the \"type\" property in these notifications in the JSON-RPC API. So you also need to adjust types.json and ServiceDescription.h (see \"Notifications.Item.Type\").\nPlease remember that these announcements are actually a JSON-RPC thing so any changes will most likely also require changes in the JSON-RPC API.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3317043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393142", "body": "This list should be alphabetically ordered so please add your new entry where it belongs.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393210", "body": "No need to set a response here as it won't be used anyway.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393221", "body": "So \"/log7\" is a valid URL for accessing the xbmc log? ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393257", "body": "Any reason why they have to be CStdString objects? Personally I prefer std::string wherever possible (will also save you the StdString.h include) and you're using std::string almost everywhere in the implementation anyways.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393278", "body": "cosmetics: spaces after the commas makes it easier to read.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393296", "body": "I don't think you'll need this include right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393308", "body": "You shouldn't need this one either.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393396", "body": "As I already told you I'd prefer if you changed the order of the logic.\n1. Check if the file exists (you don't need the CFile instance for that yet). If not, set the error to MHD_HTTP_NOT_FOUND and return.\n2. Check if you have a .log or a .xml file. If no, go to #3, otherwise go to #4.\n3. As you don't need to run the password removal stuff, save the path of the file and set HTTPFileDownload as the response type and return.\n4. As you need to run the password removal stuff, you can now create the CFile instance and open the file for reading and whatever other magic you perform.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393433", "body": "Do you really need the string() around \"://\" etc? concatenating const char\\* with string should be possible. Especially \"string(user)\" and \"string(pass)\" don't make sense as \"user\" and \"pass\" already are of type string.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393443", "body": "cosmetics: spaces after the commas.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393466", "body": "Could be turned into a std::string by using StringUtils::ToLower() on line 49. Then you/we don't need CStdString in this implementation at all.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3393466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3398765", "body": "Easier and not 100% correct ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3398765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3398778", "body": "Well it's certainly not wrong but IMO unnecessary and confused me for a second.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3398778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402828", "body": "As long as it compiles, it's well enough defined for me.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402889", "body": "Why don't you just do a string comparison against \"/log\" and \"/log/\"?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402890", "body": "We already have a log output for every incoming HTTP request so this one shouldn't be needed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402892", "body": "small cosmetic between ! and XFILE.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3402892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3549520", "body": "Two copy & paste monsters ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3549520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3594214", "body": "You're right, the abs() is not needed. I first had another variable than deltaYabs/deltaXabs which was not guaranteed to be positive but then noticed my mistake and forgot to remove the abs(). Will do that and I'll calculate the value of the tangens and store it directly in the define to save some tangens calculation on every swipe movement.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3594214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3607601", "body": "Check the replaced code (line 816). It is already done like this in the current/old code and nobody reported any problems. And the (native) windows events should all be received in the main thread anyway IIRC.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3607601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3623420", "body": "I'm not very knowledgeable in that code area. That's just how I read the code. If \"CurrentResolution\" is no fitting name I'm more than happy to rename it to something more fitting. But \"LookAndFeelResolution\" doesn't mean anything to me either ;-) I figured the difference between what is stored in m_LookAndFeelResolution and what is stored in the \"video.screen\" GUI setting is that m_LookAndFeelResolution stores the resolution that is actually used right now.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3623420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3631164", "body": "That's why I've taken care to provide seperate commits for the \"separate\" changes. So just look at 74208af3f47537673dcbe258f6393f2bca411cdb instead of the whole PR to be able to better review the changes involving m_LookAndFeelResolution.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3631164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3633337", "body": "If it didn't overwrite LookAndFeel before this PR, it doesn't know either. I'm not sure what your point/concern is. If it's about the wording of \"GetCurrentResolution(Info)\"/\"SetCurrentResolution()\" I'm happy to consider any ideas/suggestions. Like I said I don't really know about this part of the code and it took me a while to figure out the difference between \"video.screen\" and m_LookAndFeelResolution. Once I (thought I) got the hang of it I just moved the old logic into a new class, did some renaming and then a lot of copy & pasting. There shouldn't be any behavioural change due to these commits.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3633337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3650940", "body": "Cosmetic space.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3650940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3650948", "body": "Can't you get the path directly from the CVideoInfoTag? That would save us from having to create a temporary CFileItem object.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3650948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3650962", "body": "Please move this whole block into a seperate method. You'll need to pass it the CVideoDatabase (videodatabase) object, the parameterObject value and the CVideoInfoTag object (infos). But having the exact same code block in three different places in the same source file and class is a lot of unnecessary duplication.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3650962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3652314", "body": "Didn't see this before. As this is a new feature, you need to bump the minor version part not the bugfix part i.e. 6.2.0.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3652314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3652322", "body": "Just to be safe, best make this a <= 0, you never know what ideas people get ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3652322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3692334", "body": "Maybe you want to use StringUtils::StartsWith() instead of .Left(34) == \"foo bar\"? Saves you the need to count the characters and should decrease the chance of an error in case the path should change in the future.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3692334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3742648", "body": "You'd need to add the include to utils/StdString.h although I'd prefer if we wouldn't introduce CStdString at all.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3742648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3743433", "body": "Yeah I'm sure it gets pulled in from multiple places but I don't like to rely on these indirect includes.\nThe CStdString thing is a personal preference so not a real show stopper.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3743433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3760092", "body": "We can't add a music item to a video playlist. Well we can but XBMC won't be able to play that item AFAIK.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3760092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3773978", "body": "You could factor this out into a separate method so you can just re-use it in CPlaylistOperations::Insert.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3773978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3773997", "body": "Just personal preference but I find the usage of ! with std::string::compare() very confusing and prefer the more obvious == 0. Obviously the result is the same just IMO better readability.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3773997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3774020", "body": "use strtol() instead of atoi()\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3774020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3774041", "body": "Get rid of the { and } around this single-line body.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3774041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3778735", "body": "But the extra check doesn't hurt and you can save a few lines of duplicate code.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3778735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3778816", "body": "In general atoi() et. al. is inferior to strtol() et. al. because it doesn't provide any error handling/detection. I'm not that strict on it but some other people on the team are which is why I pointed it out.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3778816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3785409", "body": "You forgot to put the \"else\" on a new line ;-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3785409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3951881", "body": "This assumes that we have agreed upon sending a speed of 0 in this case as discussed in #2573 so IMO the that one will need resolving first.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3951881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3992104", "body": "Everything is a bug fix because without it old favourites and other videodb/musicdb paths which are stored in an external file are broken. I can move these changes into a seperate commit though.\nWhat do you mean with \"use the TranslateLegacyPath to do a single compare?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3992104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994827", "body": "A space between the \"if\" and the \"(\" please :-) (on the other if-conditions you added as well).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994830", "body": "It's not visible in the diff but in the file view (see https://github.com/simonvetter/xbmc/blob/96d6ea65194f094f0c2e5cd48b2bbc6e0e6cdc47/xbmc/network/WebServer.cpp#L579 ) the indentation in this are looks completely off.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994838", "body": "|| ?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994847", "body": "Bad indentation as well.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994898", "body": "I don't remember how we use this in other places but maybe InternalError fits better? I can't check other usages of InternalError or FailedToExecute right now.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/3994898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4006326", "body": "I checked and FailedToExecute is ok.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4006326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069116", "body": "Intentional?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069118", "body": "Looks like some bad indentation or unneeded.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069168", "body": "jutils-details.hpp\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069213", "body": "Maybe it's worth mentioning here that in the Emulator there's a limit of ~2000 global references which can exists simultaneously. If that limit is exceeded it will error out with \"Excessive JNI global references\".\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069240", "body": "Cosmetic: Missing space.\n\nPS: I guess this file uses 4 spaces tabs instead of 2 because you mainly copied it from crystax?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4069240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4081649", "body": "I can't think of a specific reason except legacy.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4081649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4097944", "body": "Could be integrated with the previous if condition\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4097944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4097955", "body": "Couldn't this be taken care of by the default value of CSettingLevel?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4097955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098001", "body": "Looks to me like there's one level too much here. You should only need 3 classes to represent the boolean logic.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098012", "body": "Why not passing the CSettingsManager object in the constructor like everywhere else? Then CSettingLevel would have the same Deserialize definition like all the other classes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098049", "body": "Why do you limit the Check() functionality to \"IsDefined\" here? That way you won't be able to do more dynamic checks.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098092", "body": "Can you please move the second part of the condition on a new line and apply De Morgan's law to it? I always find it much harder to read !(some conditions) than (some inverted conditions). And you can replace the 0 with SettingLevelBasic.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098114", "body": "Please make { and } around the for-block. Makes it much more readable IMO.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4098114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4109422", "body": "Yeah I realized it this morning when I was driving to work but forgot to mention it here.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4109422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4109482", "body": "IsDefined only checks static conditions which do not change throughout XBMC's runtime so they are set once at startup and never touched afterwards. In CSettings there's a method that adds all kinds of \"static\" conditions like has_gl etc. If you run the IsDefined check and it doesn't find the value you pass it in the list of static conditions, the result will be false, otherwise it will be true.\n\nThe only case I currently know of that requires this is the peripherals setting when a CEC adapter is present. Can a CEC adapter be plugged in while XBMC is running (i.e. is there runtime detection?) or does it have to be present when XBMC is started? If there's runtime detection we need a dynamic condition which can be evaluated at any given time. But then we'll also need additional logic in CSettingsManager et. al. to update the conditional settings whenever a list of settings is retrieved.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4109482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4110921", "body": "Hehe, yeah looks good.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4110921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4110926", "body": "Sure I first wondered as well why the #define was in the header file.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4110926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4111065", "body": "I'm still gonna raise my initial argument: How many people (in relation to the whole xbmc user base) actually change the settings of the nyxboard in xbmc? I have a nyxboard and I've only once changed a setting but just out of curiosity of what is possible; in the end I reset the value to the default. So personally I don't see the need for it to \"MUST be displayed\". I can totally understand the reasoning for the CEC adapter but also there it's only a small number of users that have one and that will have to use it.\n\nIn the end IMO the fewer settings we throw at an average joe user the easier it becomes to use XBMC (as long as we have sane default values).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4111065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4128723", "body": "Some cosmetics in these two lines.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4128723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4128725", "body": "Cosmetic\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4128725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4128743", "body": "Value() might return NULL here (at least there's no check earlier to make sure it isn't. Maybe use ValueStr() instead if an empty string would be acceptable?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4128743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4149823", "body": "No need to duplicate this info here (the label wouldn't be necessary either) when it's already defined in settings.xml.\n\nPS: You use the same setting ID for \"input.appleremotemode\" so there's probably something wrong here.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4149823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4149824", "body": "No need to duplicate this info here (the label wouldn't be necessary either) when it's already defined in settings.xml.\n\nEDIT: Hm why is the help string ID here 36419 and in settings.xml it's 36282?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4149824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4149828", "body": "No need to duplicate this info here (the label wouldn't be necessary either) when it's already defined in settings.xml.\n\nEDIT: In settings.xml the help string ID for \"smb\" is 36346.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4149828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4188127", "body": "How do you switch monitors in windowed mode through xbmcsettings? At least on win32 that's not possible. It's only possible by dragging the whole window to another screen using the mouse but that doesn't change the value of videoscreen.screen (-1 i.e. DM_WINDOWED), videoscreen.resolution (15 i.e. RES_WINDOWED) or videoscreen.screenmode (WINDOW). @jmarshallnz said to only show the prompt if the resolution of the whole screen is changed which is certainly not the case if xbmc is windowed.\n\nI can only test this properly on win32 because (as you said yourself) multi monitor setups don't work on linux. And there the settings show \"Fullscreen #1\" or \"Fullscreen #2\" so we in fact expect the user to identify the monitor by an arbitrary integer (so does Windows btw).\n\nLast but not least I'm still not very familiar with the whole screen/resolution code but nobody else seems to look into the problem (and I caused it) so I'm just trying around until I find something that works.\nThe whole screen/resolution setup is IMO far too complex in the code with 3 settings where videoscreen.screenmode actually covers the value of all of them (and is abused in the GUI to represent the refresh rate setting) and is used everywhere whereas videoscreen.screen and videoscreen.resolution are only really used for GUI representation but still need to be in sync with videoscreen.screenmode. I don't know a better way to do it though.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4188127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4202828", "body": "While I agree that the whole display setting stuff needs rework and would be willing to help out in any way, the problem with the prompt showing up unexpectedly exists in the current code and needs to be fixed and we can't rely on anything that will be merged someday in the future. If there is a better solution that is more generic and would be easily adaptable for any future changes I'm all ears.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4202828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4314721", "body": "Not sure how OpenForWrite works. Does it delete the content of the file or does it just start writing at position 0? If the latter is the case you might run into problems if you first pass in a bigger file and then a smaller. The second one would not fully overwrite the first one.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4314721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4314734", "body": "Couldn't all these CGUIDialogKaiToast::QueueNotification() calls (except for the ones taking an enum) be combined into one by using a variable for the first parameter which would either be empty or contain the path to the file to load (the path passed in or the path to the temporary image)?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4314734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4324800", "body": "Hm I don't like this. I can have subfolders in my source directories and do a \"..\" from one of them and I'd still be in an accessible and valid source directory but the request would fail. For real paths this is taken care of by the call to CUtil::GetMatchingSource() further down.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4324800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4325691", "body": "I'm not sure if it's as easy as removing it. We e.g. don't wanna provide direct access to \"special://profile\" but for \"special://profile/playlists\" so one could do \"special://profile/playlists/../\" and would end up in \"special://profile\" which we don't want. Same for \"special://\", \"sources://\" or \"virtualpath://\".\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4325691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4325825", "body": "I just realized that the logic is not complete. The logic to sanitize the provided path to handle any \"..\" etc is located https://github.com/xbmc/xbmc/blob/master/xbmc/network/httprequesthandler/HTTPVfsHandler.cpp#L52. URIUtils::GetRealPath() will evaluate any \"..\" and return the real path which can then be checked against the sources list or whatever other paths we want to allow. So we should probably first call URIUtils::GetRealPath() (and the archive handling logic) on the given path and then check against the allowed paths. Then we also don't need to worry about any \"..\" anymore because they have been eliminated.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4325825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388107", "body": "Not unused but has the exact same value as the \"info\" variable so will replace it with that.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388178", "body": "Is that even possible i.e. different refresh rates for different resolutions? My monitors only have two refresh rates and they are the same for all resolutions so I don't know if it's possible and I can't test it either. The problem with the current/old implementation of g_Windowing.ScreenResolutions() is that it returns the first RESOLUTION_WHR object for a specific screen independent of the refresh rate. So if your current refreshrate is 60.00 Hz but the default (and always the first in the list) is 59.94 Hz you will get the resolution index for the resolution with 59.94 Hz instead of the one with 60.00. So maybe that logic needs to be extended to choose the best matching one for every resolution i.e. if there's one matching the refresh rate, we return that one otherwise we return the first one.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388279", "body": "Refresh rate was already 2 fractional digits before the settings refactor. It can still be changed later independent of this fix IMO.\nI'll see if I can come up with some logic that makes sure that every resolution is available and in case where there's one matching the current refresh rate that specific one and not just the first one that is found.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388504", "body": "OK I pushed another commit. Can you try that one?\n\nI mentioned the idea of merging videoscreen.resolution and videoscreen.screenmode into one setting showing e.g. \"1920x1080p @ 60.00 Hz\" in team IRC yesterday and of the two people present both were against it because the list would become too long if there are many refresh rates per resolution.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4388504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494441", "body": "No comment? ;-)\n\nShould probably go below the TiXmlNode forward declaration anyway.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494465", "body": "What's the difference between \"focus\" here and \"select\" in the doxy of SetDefaultItem()?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494471", "body": "Shouldn't the factory be in a seperate file (ListProviderFactory)? That way the IListProvider interface also stays header-only.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494491", "body": "The \"node\" parameter could be TiXmlNode (also better matches the parameter name ;-) ) since you don't use any of the TiXmlElement specific methods.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494521", "body": "Cosmetic. Above you used a single space before the colon.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494529", "body": "Could be an \"else if\" since it will never be true if we just updated m_updateTime to CTimeUtils::GetFrameTime().\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494547", "body": "Any chance to merge the two list iterations into one e.g. by using a bool that tells you whether to call UpdateProperties() or not? Looks like UpdateVisibility() needs to be called either way.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494595", "body": "Is it possible that two items have the same m_iprogramCount value but one is visible and the other not? If not you could keep the return if the item is visible or break out of the loop if it is not visible.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494737", "body": "More lines of code (actually just 1) and a single iteration over the full list vs less code and two iterations over the full list.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4494737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4672929", "body": "\"filetype\" is not a property that can be requested by the client, it's automatically returned. So no real need to look for it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4672929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4672978", "body": "If we rely on \"filetype\" being part of the \"properties\" array we should probably move the logic out of the if condition about the value of the \"id\" property.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4672978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4681945", "body": "This change is backwards incompatible because any client who passes the \"file\" property in will get an error (even though it wouldn't make any difference in the result) so we should keep it in.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4681945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4684047", "body": "Just being able to bump the version number doesn't mean that we should break backwards compatibility at every other turn. Plus I remembered that this would actually break Player.GetItem where the \"file\" property is not automatically returned but can be optionally requested by the client. So it definitely has to stay in.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4684047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4791469", "body": "Should be 2013\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4791469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4791480", "body": "Please put the includes in alphabetical order (starting with ProfilesOperations.h as it is the include of the corresponding header file).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/4791480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "DerickLebron": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/12100", "title": "Increase commbreakautowait and commbreakautowind max seconds to 60", "body": "Increase commbreakautowait and commbreakautowind max seconds from 10 to 60.\r\n\r\n## Description\r\nAllow max commbreakautowait time to be up to 60 seconds. \r\nModify Edl.cpp autowait and autowind logic to handle the situation where the wait and or wind time results in the start time being greater than the end time.\r\n\r\n## Motivation and Context\r\nThe mythtv backend usually flags the beginning of commercial breaks 20-30 seconds before the break starts. Kodi only allows a 10 second wait.\r\n\r\nI'm not sure if this is an open issue, but I did find a user complaining about it in the link below when searching the web for the issue.\r\nhttp://forum.kodi.tv/showthread.php?tid=257520\r\nThis user had the exact behavior wrong, but I believe was suffering from the same issue as me. I was not able to determine the exact behavior until looking at the code.\r\n\r\n## How Has This Been Tested?\r\nI am not able to test as I don't have a test environment.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [X] Breaking change (fix or feature that would cause existing functionality to change)\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n(The wiki does not specify a maximum value for these settings, but I would have found it useful if it did)\r\n\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "metaron-uk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11969", "title": "[Estuary] [PVR] Add Season/Episode to recordings", "body": "Adds season/episode display to Estuary skin for PVR recordings.\r\nScaled back version of a more ambitious change in https://github.com/xbmc/xbmc/pull/11783 which started to look like a step too far.\r\n\r\n## Description\r\nAdds season/episode display to Estuary skin in the \\<season\\>x\\<episode\\> format for recordings when provided by the PVR backend (or Videos database) and the previous behaviour when it doesn't.\r\n\r\nCoded as a single $VAR so the format is consistent across all applications and easier to maintain/change\r\n\r\n## Motivation and Context\r\nAllows you to see at a glance if you have recorded all the episodes in a series, or if you are missing some.\r\n(Sort your recordings by 'File' to see them in season/episode order)\r\n\r\n## How Has This Been Tested?\r\nTested using current master on RPi (LibreElec Millhouse test builds) and on x86 against my mythtv backend.\r\n\r\n## Screenshots (if appropriate):\r\nExample recorded Series folder\r\n![screenshot070](https://cloud.githubusercontent.com/assets/12870817/25048470/8c265fd2-2134-11e7-937d-daf74dc90d8b.png)\r\n\r\nExample recorded Series folder without episode names\r\n![screenshot071](https://cloud.githubusercontent.com/assets/12870817/25048486/9ff13078-2134-11e7-8413-2395c923ee90.png)\r\n\r\nExample movies (no episode name or season/episode information)\r\n![screenshot072](https://cloud.githubusercontent.com/assets/12870817/25048491/ad59115e-2134-11e7-8041-634d5dbcddca.png)\r\n\r\nExample showing a mixture\r\n![screenshot073](https://cloud.githubusercontent.com/assets/12870817/25048519/daf22a60-2134-11e7-9ab6-fa56af7a15da.png)\r\n\r\nExample showing 'recently added episodes' using the standard season/episode format\r\n![screenshot074](https://cloud.githubusercontent.com/assets/12870817/25048525/e41dc8f6-2134-11e7-95dc-b21684d9a8b7.png)\r\n\r\nSimilar format is used in the TV Series section, but this is hard coded (I haven't worked out where yet!)\r\n![screenshot075](https://cloud.githubusercontent.com/assets/12870817/25048538/f096f116-2134-11e7-9152-fc75a22e82b2.png)\r\n\r\n## Types of change\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n\r\npings: @ksooo, @ronie @phil65", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eusi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11937", "title": "[videodb] Fix clean video library: no longer removes an entire parent path accidentally", "body": "Fix clean video library: no longer removes an entire parent path accidentally. This issue only occurred on nested folder structures (e.g. Movies/Year/Genre/...).\r\n\r\n## Description\r\nThere are two small changes:\r\n1.) Fixed the issue (see \"Motivation and Context\").\r\n2.) Made existing code more readable, inspired by [PR8133](https://github.com/xbmc/xbmc/pull/8133)\r\n\r\n## Motivation and Context\r\nWhenever I delete a movie on my NAS, a video library clean on Kodi removes not only the movie from the database, but also the entire path (folder and its movies)! \r\n\r\nI am using a movie structure like this:\r\nSourceVideoFolder (\"Movies\")\r\n---QualityFolder (like \"HD\", \"SD\", \"4k\" etc.)\r\n------YearFolder (like \"1900-1999\", \"2000-2010\" etc)\r\n---------Movies\r\n\r\nThis happens, because in function CleanMediaType() the pathsDeleteDecisions wrongly got only the bool \"del\" (corresponds if the missing movie should be deleted), instead of also checking if the folder still exists. The path shouldn't get deleted if it exists.\r\n\r\nIn [PR8133](https://github.com/xbmc/xbmc/pull/8133) anaconda also ran into a similar issue, as mentioned in the comments (on Oct 25, 2015), but they didn't solve the issue. My fix should solve this.\r\n\r\n## How Has This Been Tested?\r\nTested it by my own via Win32. I just deleted movies on my NAS, executed a video clean and tested if it works as expected.\r\n\r\n## Types of change\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jgrieger1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11861", "title": "Add trailer to UPNP and fix so video information dialog is displayed for UPNP video items.", "body": "-Add movie trailers to UPNP.\r\n-Enable 'Show Information' for UPNP videos to show video information instead of playing the video.\r\n\r\n## Description\r\n-The attribute xbmc:trailer is added to UPNP.\r\n-When 'Show Information' is selected as the Videos 'Default Select Action' UPNP videos would start playing instead of the show information dialog displaying.  This patch will show the information dialog instead of playing the video and also enables the information dialog when 'i' is pressed on a selected UPNP video.\r\n\r\n## Motivation and Context\r\n-Movie trailers can now be played when Kodi is pulling meta data from another UPNP server that provides the xbmc:trailer attribute (such as a Kodi UPNP server).\r\n-When Videos 'Default Select Action' is set to 'Show Information' the information dialog is displayed instead of the video playing and when a user presses 'i' for information on a selected UPNP video, the information dialog is displayed.\r\n\r\n## How Has This Been Tested?\r\nCompiled and tested on Windows and Linux.\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [X] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thebrid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11842", "title": "Fix uninitialised memory read in RenderManager", "body": "## Description\r\nWe sometimes read members from SPresent before we've initialised them. Initialise them in a new constructor.\r\n\r\n## Motivation and Context\r\nThe behaviour here is undefined. From my testing on Linux, it doesn't seem to cause a big problem, but we're not guaranteed good behaviour.\r\n\r\n## How Has This Been Tested?\r\nRan existing unit tests. They passed. Also ran kodi manually on x86_64 Ubuntu Linux to trigger this codepath. Worked fine.\r\n\r\n## Types of change\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [X] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dgam1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11721", "title": "[Breaking Change]JSON: Do not respond with values for query \"Player.Seek\"", "body": "When sending a JSON query \"Player.Seek\", the return values are subject to a race condition.\r\nIn xbmc/interfaces/json-rpc/PlayerOperations.cpp, function Seek(), the command to seek will end up in a queue of the player and then the current percentage and time will be returned. Sometimes the seeking will not have concluded by that time so that the pre-seek values get returned. One way to see the unreliability of the response in action is to seek on slow internet streams. For me the ServusTV Video Addon is slow enough. But I have also witnessed this for videos on my HD (I'm currently working on something that has made me look at those numbers a lot).\r\n\r\nAt first I tried to find a fix for this problem other than removing the return values but I can't come up with a non-convoluted solution. I'm also wondering if there are many people who really want those return values anyway.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [X] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11691", "title": "Do not invoke UpdateFileList() when calling SaveFileState()", "body": "There's a bug that will create another playlist after you created and started a playlist with JSON. You can reproduce the bug with the following steps:\r\n\r\n1. With the GUI open the Youtube Add-On and go to \"Popular right now\". Right click an item and select \"Play from here\".\r\n2. Clear Playlist with JSON: `{\"params\": {\"playlistid\": 1}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Playlist.Clear\"}`\r\n3. Add items to playlist: `{\"params\": {\"item\": [{\"file\": \"/movies/movie1.mp4\"}, {\"file\": \"/movies/movie2.mp4\"}], \"playlistid\": 1}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Playlist.Add\"}`\r\n4. Open Playlist: `{\"params\": {\"item\": {\"position\": 0, \"playlistid\": 1}}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Player.Open\"}`\r\n5. Wait a second\r\n6. Check playlist: `{\"params\": {\"playlistid\": 1}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Playlist.GetItems\"}`\r\n7. In the JSON response you'll see that the playlist has been replaced with the youtube videos, although playback of your first item will have started normally.\r\n\r\nWhat is happening here is that in CApplication::PlayFile() within the first lines CApplication::SaveFileState() will be called, which ends up in CSaveFileStateJob::DoWork(), queuing the GUIMessage that I changed in this PR. Processing that message in CGUIMediaWindow::OnMessage(), after updating the item sent as payload, CGUIMediaWindow::UpdateFileList() will be called, resulting in setting the playlist based on the list of items in that window.\r\n\r\nparam2 of that GUIMessage is deliberately set to 1 so that CGUIMediaWindow::UpdateFileList() gets called. It appears to me, though, that this is not actually what one wants here. UpdateFileList() seems to be created for cases where the layout of the items changes, through resorting and such. During normal playback of a playlist each of the played items get all the updating they need, don't they?\r\n\r\nIt seems to boil down to this question: Does anything calling CApplication::SaveFileState() expect CGUIMediaWindow::UpdateFileList() to be run?\r\n\r\nDoesn't look like it to me, but I'm not familiar enough with the code to be certain. Here's the commit that introduced this: https://github.com/xbmc/xbmc/commit/0ec8479b64649f6008b90b36846955397319787b\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11657", "title": "JSON: Handle option \"resume\" when opening playlists", "body": "The issue I'm trying to fix here is that when you send a JSON query of type \"Player.Open\", using playlistid and position as parameters, the option \"resume\" gets silently ignored. To reproduce it, send these queries (with a loaded video playlist):\r\n\r\n`{\"params\": {\"item\": {\"position\": 0, \"playlistid\": 1}, \"options\": {\"resume\": false}}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Player.Open\"}`\r\n\r\n`{\"params\": {\"item\": {\"position\": 0, \"playlistid\": 1}, \"options\": {\"resume\": 50.0}}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Player.Open\"}`\r\n\r\n`{\"params\": {\"item\": {\"position\": 0, \"playlistid\": 1}, \"options\": {\"resume\": {\"hours\": 0, \"seconds\": 10, \"minutes\": 10, \"milliseconds\": 10}}}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Player.Open\"}`\r\n\r\n\r\nThe changes I implemented are:\r\nxbmc/interfaces/json-rpc/PlayerOperations.cpp:\r\nIn CPlayerOperations::Open when opening a playlist by id and position, it doesn't send message TMSG_MEDIA_PLAY anymore but TMSG_PLAYLISTPLAYER_PLAY, attaching as payload a pointer to a CVariant containing either a double (percentage) or an int (-1 for STARTOFFSET_RESUME or number of seconds offset).\r\n\r\nxbmc/PlayListPlayer.cpp:\r\nPLAYLIST::CPlayListPlayer::OnApplicationMessage, handling the message TMSG_PLAYLISTPLAYER_PLAY, now reads param2 as the playlistid and the payload pointer as the pointer to the CVariant instance containing the resume value. It will set the current playlist, if needed. Before this patch, this was done in TMSG_MEDIA_PLAY. I removed that part from the handler of the latter message since the only occurrence in the code base of using TMSG_MEDIA_PLAY to open a specific playlist at a specific position was in the JSON handler that I changed above.\r\nAlso, in CPlayListPlayer::Play the start offset and percentage both always get reset.\r\n\r\nxbmc/Application.cpp:\r\nReset the property \"StartPercent\" from m_itemCurrentFile as otherwise the property will be set again on the original item in the playlist, once the playback ends.\r\n\r\n\r\nWith these changes resume works as expected on videos. With music it works when you supply a specific time (but the display will act as if the file is being played from the beginning), percentage and STARTOFFSET_RESUME currently get ignored by the music player, which is outside of the scope of this PR.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11612", "title": "Don't assign wrong InfoTags to items in the JSON handler", "body": "In interfaces/json-rpc/FileItemHandler.cpp method FillFileItemList in some cases assigns wrong InfoTags to FileItems. One way this becomes apparent is when you add to the picture playlist and then try to open it using JSON queries like these:\r\n\r\n`{\"params\": {\"item\": [{\"file\": \"/pics/pic1.jpg\"}, {\"file\": \"/pics/pic2.jpg\"}, {\"file\": \"/pics/pic3.jpg\"}], \"playlistid\": 2}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Playlist.Add\"}`\r\n\r\n`{\"params\": {\"item\": {\"position\": 1, \"playlistid\": 2}}, \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"Player.Open\"}`\r\n\r\nWith the pictures having VideoInfoTags the slideshow will not work. This patch will have the method create InfoTags only as needed, which in some cases is not at all where the players can handle FileItems without them.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arnova": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11693", "title": "[estuary] added: Audio/video bitrate info for video process dialog", "body": "This adds the use of the new labels for video/audio bitrate info. I think we should backport this to Confluence as well.\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/6938", "title": "added: File + path URL-decoded info labels (followup for #3960)", "body": "This is the first part of the fix for cosmetic issues with unreadable filenames in e.g. the subtitle addon when used icw. URL-encoded filesystems. Obviously it will also require updating the addons to use the new info labels.\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762085", "body": "Nice :-) You may want to check my comments/ideas in this (rather old) ticket: http://trac.xbmc.org/ticket/5971 \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "dml33": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11655", "title": "An optical drive is not required for proper stub file handling", "body": "Supersedes: https://github.com/xbmc/xbmc/pull/11317\r\nForum discussion: http://forum.kodi.tv/showthread.php?tid=178014&page=2&highlight=stub\r\nMedia stub Wiki: http://kodi.wiki/view/media_stubs\r\n\r\n## Description\r\nThis changes allows stub information (title and message) given by a media stub file be also displayed in those systems which do not have optical drives, such as Raspberry PI's, Android Tablets, NUC, etc.\r\n\r\n## Motivation and Context\r\nSince Kodi v12 Frodo, if Kodi detects that the platform where it is running does not have an optical drive, the information of the stub file is not displayed. Instead, a dialog box with only a \"You need an optical disc drive to play this video\" message was shown.\r\n\r\nThis patch ensures that the specific instructions that the user has already written in the stub file in order to find the offline media are displayed in any case.\r\n\r\n## How Has This Been Tested?\r\nI built a win32 Kodi v18 version with this patch.\r\nI tested it ina laptop with an optical drive and a NUC, without it.\r\nThe content of the dialogs were agreed among the people in the Feature Request forum.\r\n\r\n## Screenshots (if appropriate):\r\n- Dialog when the platform has an optical drive (no change):\r\n[With optical drive](http://i.imgur.com/KsZqgeX.jpg)\r\n- Dialog when the platform does not have an optical drive (new):\r\n[Without optical drive](http://i.imgur.com/EJG3jJd.jpg)\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [x] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Woerd88": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11317", "title": "Don't require an optical drive for stub file handling", "body": "Partially Reverted: xbmc@731a7b1\r\nForum discussion: http://forum.kodi.tv/showthread.php?tid=178014&page=2&highlight=stub\r\n\r\nWith this change ppl can check their stub information on systems that don't have an optical drive.\r\n(Raspberry PI's, Android Tablets etc.)\r\n\r\nEdit: Sorry about the lame default title, i did not create it properly.\r\nI am still learning to work with git.\r\n\r\n<!--- Provide a general summary of your change in the Title above -->\r\n\r\n## Description\r\n<!--- Describe your change in detail -->\r\nRemoved HasOpticalDrive check so we can see the custom information from the stub file.\r\n\r\n## Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here -->\r\nIf fixes the issue where you can't \"play\" a stub file on a device where no optical drive is present.\r\nTherefor you can't view custom stubfile messages, e.g. \"Enter disc 46\".\r\n\r\n## How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your change -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc -->\r\nNot at all! I am a developer but have no expierence with building kodi (so far)\r\nAs @da-anda proposed, maybe someone can launch an automatic build?\r\nI am having difficulty reading/following the checklist because of the server/wiki issues. \r\n(Cloudfare switch)\r\n\r\n## Screenshots (if appropriate):\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [ ] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phil65": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11236", "title": "[gui] add option to only show full lines for textboxes", "body": "Next scaling-related one:\r\nAdd an option for skinners to only show full lines for textboxes. Esp. useful when havin several fontsets with different sizing.\r\n` <showfulllines>true</showfulllines>`\r\n\r\nI would even be tempted to make this behaviour default since in 95% of cases cut-off textboxes are not wanted I think.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11136", "title": "[gui] Move resolving of fonts/colors into the skin object", "body": "This basically re-applies changes from https://github.com/xbmc/xbmc/pull/4743 and makes it work / compile with today\u00b4s codebase. To see what was done perhaps best to look at the linked PR, since this here is squashed down to one single commit. Can try to make it bisectable in case this PR gets considered.\r\nHopefully brings colors/fonts support for add-ons a step closer.\r\n@jmarshallnz \t, sorry to bug you, could you sum up what still needs to be done here?\r\nFrom quick testing I couldnt spot any issues.\r\nNo idea who to ping... perhaps @Montellese , or @FernetMenta \tfor architecture.\t\t", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9288", "title": "[python-api] add xbmc.InfoTagPicture", "body": "This is the basework to allow reading imageinfo from a listitem object.\nUp to now I only added 2 methods to allow fetching GPS EXIF data. Will add more once I need them. :)\n@tamland @xhaggi \nI would also need an xcode sync.. Could someone step up for that? :)    \n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8769", "title": "[gui] FileBrowser: remove \"mirror image\" button", "body": "stupid junk, go away :)\n@ronie \n@Razzeee        \n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7217", "title": "[Builtins] - Add DialogOK builtin", "body": "similar to the TextViewer builtin, also with aim to save skinners some work.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/5536", "title": "Added JumpToLetter builtin", "body": "This PR adds a new builtin called jumpletterX which would allow skinners to implement a neat alternative to the classic scrollbar. (still needs a little bit of python though to expose a list of all used sortletters to skinners, would be great to get that functionality into core, too)\n\nSCREENSHOT:\n![screenshot004](https://cloud.githubusercontent.com/assets/110931/4694533/41904394-57cd-11e4-9873-3dda5b453aca.jpg)\n\ni implemented it in the same way as JumpSMS.\njumpletter[0-9] are not part of this PR, first want to know if it gets accepted at all.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ignoble61": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11017", "title": "Space out order value of library nodes", "body": "## Description\r\nAdjusts the 'order' value of all library nodes so that the first node has a value of '10', and each subsequent node is 10 higher.\r\n\r\n## Motivation and Context\r\nWhen editing custom nodes, if the user wants to add a node as the first item or between two existing items this requires renumbering a number of pre-existing nodes to make space. This change gives the space to place custom nodes as required without needing to adjust the order of existing nodes.\r\n\r\n## How Has This Been Tested?\r\nRuntime testing to ensure all nodes show in the correct order with the updated order values.\r\n\r\n## Types of change\r\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [ ] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nerddtvg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/11008", "title": "Adding a setting to enable or disable prompting for Auto-Skip", "body": "## Description\r\nIn response to PR #9399 causing issues with playback for myself and dislike among other users, this is a boolean setting to disable prompting for EDL/commercial skip.\r\n\r\n## Motivation and Context\r\nPersonal: On my RPi2, when the dialog is present, the screen blanks out and does not return until the commercial skip.\r\n\r\nFor others, this is an annoyance getting in the way of a non-intrusive video player experience. It is just the ability to remove the change.\r\n\r\n## How Has This Been Tested?\r\nI do not have a built environment that I can test this in. No compile or run tests were performed.\r\n\r\n## Types of change\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to change)\r\n\r\n## Checklist:\r\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \r\n- [X] My change requires a change to the documentation, either Doxygen or wiki\r\n- [ ] I have updated the documentation accordingly\r\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\r\n- [ ] I have added tests to cover my change\r\n- [ ] All new and existing tests passed", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "BigNoid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10787", "title": "[skin] Add \"skin.select\" builtin.", "body": "## Description\n\nThis adds a new builtin `Skin.Select(<header>, <skin.string>, label1|value1, label2|value2, etc|etc)`\n## Motivation and Context\n\nCurrently if you want to let a user choose between a list of values for a skin setting, a custom dialog or a lot of conditional onclicks are required. Furthermore you need a variable to display the chosen skin setting.\nThis makes it possible to present a list of predefined values to use for a setting. It writes the label from the list as `<skin.string>.Label` and the value as `<skin.string>.Value`\nThis way the chosen option can be presented without using variables.\nIf  `-` is set as value the `<skin.string>.Value` will be reset.\n## How Has This Been Tested?\n\nRuntime tested\n## Types of change\n\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [X] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\n## Checklist:\n\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\n\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\n- [X] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \n- [X] My change requires a change to the documentation, either Doxygen or wiki\n- [ ] I have updated the documentation accordingly\n- [X] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9877", "title": "[guilib] Add disabled controls to numitems for grouplists", "body": "See http://forum.kodi.tv/showthread.php?tid=224074\nAs disabled controls still show up in the grouplist, it makes sense to count them as part of the list.\n\n@ronie @HitcherUK \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/416021", "body": "Smart thinking, this will delete 1000 lines of code in my skin!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/416021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "AchimTuran": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10753", "title": "[WIP] Win32 build tools", "body": "This PR will include wrapper scripts to simplify add-on development with Visual Studio. Furthermore it adds [jom](https://wiki.qt.io/Jom) to for faster binary add-on builds. It also adds [ninja](https://ninja-build.org/), which we can use to speed up our Windows build with jenkins.\n\nDuring development I also noticed that multiple calls to `\"%VS140COMNTOOLS%..\\..\\VC\\bin\\vcvars32.bat\"` breaks an open command line window. To workaround I inserted an if statement.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10106", "title": "[wip][guilib] Vertical Settings Slider", "body": "This PR adds orientiation for settings sliders.\n\nI need this for AudioDSP add-ons. Furthermore it is a first step to generic dialogs that are supported by almost all skins, which support e.g. OSD menus like audio settings. Only the gui control settings API needs to be forwared to binary add-ons.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mojo-hakase": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10678", "title": "Add support for Matroska's Ordered Chapters and Segment Linking", "body": "<!--- Provide a general summary of your change in the Title above -->\n## Description\n\n<!--- Describe your change in detail -->\n\nAdds a timeline demuxer that holds a set of ffmpeg demuxer and transparently switch between them and seeks to right time in the real demuxer for playing matroska's ordered chapters correctly.\nWhen the CDVDFactoryDemuxer successfully creates the CDVDDemuxFFmpeg from a file, the factory will try to create a CDemuxTimeline by calling CDemuxTimeline::CreateTimeline() with the created ffmpeg demuxer as parameter. That function will then check the file for ordered chapters. If the file doesn't use ordered chapters a nullptr is returned, and the factory returns the ffmpeg demuxer as usual.\nIf the file uses ordered chapters a CDemuxTimeline gets created. It takes over the ffmpeg demuxer as \"primaryDemuxer\", and gets returned by the factory instead of the ffmpeg demuxer. The timeline creation may involve searching for missing mkv segments in the same directory as the source file if necessary.\n## Motivation and Context\n\n<!--- Why is this change required? What problem does it solve? -->\n\n<!--- If it fixes an open issue, please link to the issue here -->\n\nIt implements an feature that is requested since 2009 and discussed in this thread in the kodi forum:\nhttp://forum.kodi.tv/showthread.php?tid=55764\n## How Has This Been Tested?\n\n<!--- Please describe in detail how you tested your change -->\n\n<!--- Include details of your testing environment, and the tests you ran to -->\n\n<!--- see how your change affects other areas of the code, etc -->\n\nAs my patch affects the opening of the demuxer, i tested various files without ordered chapters for still being playable and various files with ordered chapters for now begin played correctly.\n## Screenshots (if appropriate):\n## Types of change\n\n<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [x] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\n## Checklist:\n\n<!--- Go over all the following points, and put an `x` in all the boxes that apply like this: [X] -->\n\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\n- [x] My code follows the [Code guidelines](https://codedocs.xyz/xbmc/xbmc/code_guidelines.html) of this project \n- [ ] My change requires a change to the documentation, either Doxygen or wiki\n- [ ] I have updated the documentation accordingly\n- [x] I have read the [CONTRIBUTING](https://github.com/xbmc/xbmc/blob/master/CONTRIBUTING.md) document\n- [ ] I have added tests to cover my change\n- [ ] All new and existing tests passed\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sraue": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10533", "title": "[cmake] FindSmbClient: find libraries needed by libsmbclient so we link against them", "body": "esp. with libsambaclient static build we must link against this libs. this libs are samba default dependencies so search this libs and link against this\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181", "body": "i have build xbmc yesterday with this and without an installed openssl. it works here (except ssl support in my external python for sure). an grep over the xbmc sources shows me thats needed only for python.\n\nfor sure it would be nice if anyone can test this patch with windows/macos etc too...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "antigenx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10462", "title": "switched <enter> from FullScreen back to Select as it breaks remotes \u2026", "body": "\u2026using lirc/devinput\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "soerendd": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/10269", "title": "Split artist and title (shoutcast) and added the playing station", "body": "The solved problem is that when listening to internet radio most stations embedd meta information in the mp3 stream. The current implementation takes that information as it is and sets it to tag->title. In my case all of the stations i listen to use the same \"format\" to give information about the artist and the song title. \nThe format is:\nArtist - Title\n\nMy patch takes the string and tries to use a regex to split this into artist and title. \n\nSecond part of the patch is to add a new field to the tag. Reason is that I would like to get the station name in an kodi addon (for LCDd). So i added also the needed interface definition. Furthermore I changed the guiinfomanager to recognize the field.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oskvadd": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9929", "title": "Speed up subtitle search", "body": "If the main video is in rar archives, then exclude the video rar archives from subtitle search.\nThis improves the video startup time by excluding all the rarfiles associated with the video, from the subtitle search.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lameventanas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9615", "title": "[json-rpc] add \"withsound\" arg to GUI.ShowNotification, change min ti\u2026", "body": "json-rpc:\n- add \"withsound\" argument to GUI.ShowNotification\n- change minimum display time to 1 second\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Korlawulki": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/9142", "title": "Add text labels to video bookmarks (\"Rename Bookmark\")", "body": "Adding names as labels to bookmarks (new \"Rename Bookmark\" menu item), making bookmark handling easier. Also, confirmation dialogs are shown when removing bookmarks (Remove? -> Yes/No).\n\nDetailed description:\nThis  patch adds a menu item \"Rename Bookmark\" to the context menu of bookmarks. Everything entered here is stored in the bookmark database table (schema changed!). Instead of the standard labels (e.g. \"Bookmark 1 (01:23:45)\"), the stored text label for each bookmark is show as e.g. \"Action Scene (00:56:01)\". If no text label has been entered, the old default label is shown.\n\nVery useful if someone has videos of rock concerts. Now, it's possible to give each bookmark the name of the title of the song.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pbureau": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8876", "title": "Musicinfo interactive scan", "body": "This patch combines a few different things:\n1. The progress bar display during the Album scan is broken, and this patch is a possible fix\n2. The scan type is added as a parameter to the GUI_MSG_SCAN_FINISHED message, allowing the application to trigger different operations after the various scan types.\n3. It introduces what I called an \"Interactive Scan\", when a progress dialog is passed to the StartMusicAlbumScan() function, the library scan will use the same process as the one used when activating the \"Refresh\" button from the DialogAlbumInfo page, prompting the user to fix the meta data when necessary.\n\n**The way I am using it:**\n\nIn my branch I am using this to do three successive scans when updating the library. First the normal, fetch info from files, then a fetch info from the web scan without interactions, and finally if necessary and after a confirmation dialog, I start an interactive scan. I know this is probably not what kodi is supposed to do by default, so I didn't include this in the request, but here is the code I use in CApplication::OnMessage():\n\n```\ncase GUI_MSG_SCAN_FINISHED:\n    // If the scan was a file scan, start an album info scan automatically when completed\n    if(message.GetParam1() == 0)\n      StartMusicAlbumScan(\"\", true);\n    else if(message.GetParam1() == 1)\n   {\n      CGUIDialogProgress* dlgProgress = (CGUIDialogProgress*)g_windowManager.GetWindow(WINDOW_DIALOG_PROGRESS);\n      // Check if all the albums have been scraped\n      if(!m_musicInfoScanner->CheckAlbumAllScraped())\n      {\n          // Ask if we should start an interactive scan\n          if(CGUIDialogYesNo::ShowAndGetInput(CVariant{185}, CVariant{39000}, CVariant{\"\"}, CVariant{\"\"}, CVariant{222}, CVariant{186}))\n             StartMusicAlbumScan(\"\", false, dlgProgress);\n      }\n    }\n    break;\n```\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7781", "title": "[VIDEONAV] new controls to display lists of subs & audio", "body": "This is a proposal for new controls in the DialogVideoInfo window to select subtitles and audio stream before the playback is started. 4 controls have been added, two spinners and two lists, for both subtitles selection and audio stream selection.\nInformation from the media file could eventually be loaded in a thread, as the PreloadFileInfo() operation is possibly time consuming. Feel free to comment this code, this is my first contribution to kodi development.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7156", "title": "Remove unsuported actions form the onunload tag, fix the infinite loo", "body": "When ActivateWindow() command is passed inside the <onunload> tag, it triggers an infinite loop as ActivateWindow() will fire a window_deinit message, that calls the <onunload> actions again.\n\nThis fix has been tested on Helix and master, it provides a way to reject unsupported actions when creating the actions list in the window init phase.\n\nGUIAction.cpp is also modified, even though it is not implied in the fix, I first tried a different approach by removing actions from the list after GetActions(). The final implementation seems much cleaner, but the GUIAction::RemoveActions() method is working and could be useful.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "agibson-fl": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8836", "title": "Add support for a checkerboard stereoscopic 3D mode for OpenGL", "body": "Original work done by @prof-membrane.\nOriginal pull request: https://github.com/xbmc/xbmc/pull/4903\n\nThis patch adds support for a checkerboard 3D mode on OpenGL systems.  \n\nI figured I'd rebase @prof-membrane's changes onto the current master branch since I had a bunch of time over the holidays.  A few of his changes were no longer necessary because of the DirectX11 work in https://github.com/xbmc/xbmc/pull/6987.\n\nI was able to build and test this on Ubuntu 15.04 and it worked reasonably well.  However, it did hurt my eyes quite a bit more than when I use Bino.  I had my wife verify this and she said it doesn't look nearly as good as Bino.  I'm not sure what's up with that.  Perhaps something is not quite right with the stipple pattern.  Hopefully someone else has some input or suggestions on that point.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joethefox": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8812", "title": "[JSON-RPC] add System.InhibitIdleShutdown to jsonrpc interface", "body": "This PR is yet another attempt to add support to the jsonrpc interface for the system command InhibitIdleShutdown. The required parameter is the \"inhibit\" toggle. \nSorry @Montellese for the mess :( I think that have done all the corrections you have suggested in the previos PR #8727 \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mk01": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8562", "title": "[PVR/EPG]: debug log now as configurable logging component", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7245", "title": "[CEC] XBMC activation problem fix", "body": "[CEC] having addresses set in order TV,AVR will never return AVR on expression\n(x) ? TV : address.primary\n\n(cherry picked from commit e832a5427e015aa31d67314fa284358dcc455557)\nSigned-off-by: Matus Kral matuskral@me.com\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7030", "title": "CNetwork - implement IPv6", "body": "rewrite of network class(es) for abstracted universal ipv6/v4 support\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "anaconda": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8196", "title": "jsonrpc: expose profile directory in Profiles.GetCurrentProfile/GetProfiles. #15509", "body": "Bumps version to 7.13.0.\n\n``` json\n> {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"Profiles.GetProfiles\",\"params\":{\"properties\":[\"thumbnail\",\"lockmode\",\"directory\"]}}\n\n< {\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"limits\":{\"end\":2,\"start\":0,\"total\":2},\"profiles\":[{\"directory\":\"special://masterprofile/\",\"label\":\"Master user\",\"lockmode\":0,\"thumbnail\":\"\"},{\"directory\":\"profiles/prova/\",\"label\":\"prova\",\"lockmode\":0,\"thumbnail\":\"\"}]}}\n```\n\n@Montellese \n\ncc @MilhouseVH @un1versal \n\nEdit: diff might be confusing - I've inverted the 2 `for` loops.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/8133", "title": "[videodb] Fix TV shows cleaning after  5755573981ca706a82a7ecbbdf5de112a570377a.", "body": "A regression in 5755573981ca706a82a7ecbbdf5de112a570377a meant removing a\ndeleted TV show needed multiple library cleanings (i.e. TV shows only got\nremoved when `filesToTestForDelete` was empty).  This is much more noticeable\nafter 5cae3b5bb79a0c7b1945297e54343349f78cf497.\n\nAfter 5755573981ca706a82a7ecbbdf5de112a570377a:\n- if we had files to be checked for deletion: `CleanMediaType` would return a\n  decision for the TV show path (delete) and a decision for the parent path\n  (keep), so the TV show wasn't removed from the database;\n- if no files needed to be checked for deletion: `CleanMediaType` would return\n  earlier and `pathsDeleteDecisions` was empty, so we'd have checked if the\n  path existed and there was a decision for the parent path (delete) or no\n  decision at all.\n\nThis commit checks if there's a decision to delete the parent path _or_ it\nexists (we only end up there if there's a decision to delete the path or it\ndoesn't exist), so that you can delete a TV show with episodes (or other random\nfiles).\n\nSee:\n- http://forum.kodi.tv/showthread.php?tid=238881\n## \n\nThe 2 booleans are just to improve readability.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yirkha": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7941", "title": "[cec] Don't reopen connection when going to standby to avoid a deadlock", "body": "Hi everyone,\n\nI'm using Kodi on a small Windows system connected to a TV, with PulseEight's HDMI-CEC adapter. The system is configured to go to sleep after a while of inactivity and resume when the HDMI is connected again.\n\nVery often after waking up, the whole PC resumes fine, but Kodi is frozen. The clock still shows the time from when it went to sleep, CEC control is not working, waiting does not help, and when I press some keys, after a while the standard Windows \"_application not responding_\" dialog appears.\n\n---\n\nFrom a dump file, I have tracked this down to a deadlock in Kodi's CEC client implementation. Apparently the following is happening:\n- [Main thread] `CAnnouncementManager` locks its `m_critSection`,\n              announces \"xbmc/OnSleep\" to `CPeripheralCecAdapter`,\n              which calls its `StopThread()`.\n- [CECAdapter thread] Starts the shutdown process,\n                    closes libcec handle.\n- [libcec thread] Dispatches `CEC_ALERT_CONNECTION_LOST`,\n                `CPeripheralCecAdapter` calls `ReopenConnection()`,\n                locks its `m_critSection`,\n                calls `CAnnouncementManager::RemoveAnnouncer()`.\n\nNow the main thread holds `CAnnouncementManager::m_critSection`\nand it is waiting for the \"CECAdapter\" thread to die,\nbut the \"CECAdapter\" thread is waiting for `CPeripheralCecAdapter::m_critSection`,\nbut that is locked by the libcec thread,\nwhich is waiting for the `CAnnouncementManager::m_critSection`.\n\n---\n\nMy proposed solution is to add an extra check to `ReopenConnection()` to not attempt to reopen the connection when going to standby and reset the related `m_bGoingToStandby` variable when waking up so that `ReopenConnection()` works again.\n\nThanks!\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "catro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/7320", "title": "Process physical interface only.", "body": "When VPN is established in Ubuntu, the first connected interface is ppp0 and MAC is 00:00:00:00:00:00. AirTunes/Airplay use MAC of first connected interface. Airplay device can not discover Kodi when the deviceid is all zeros.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jalle19": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/6680", "title": "add helper for dealing with video dimensions", "body": "This is a first attempt at hopefully consolidating the logic behind determining whether a video is SD or HD etc. It replaces `CStreamDetails::VideoDimsToResolutionDescription` with a new helper class `CVideoDimensions` which provides the same functionality and more.\n\nThis also changes the logic for converting width and height to e.g. \"720\" to use a list of boundaries that each \"descriptor\" can have, e.g. for a file to be \"720\" its width must be between 960 and 1280 while its height must be between 540, 720. The way this is implemented means it should be easy to create unit tests to make sure this crap doesn't keep breaking everyone someone so much as looks at the code.\n\nThe use of boundaries to specify what \"descriptor\" a video item has can also be used backwards, e.g. in order to find all videos having a resolution matching \"720\". Before that was not possible because the boundaries weren't defined anywhere. This is needed in order to implement some of the suggestions in https://github.com/xbmc/xbmc/pull/6611\n\nRFC:\n- should we try to bake this into e.g. `CStreamDetailsVideo` instead? Somewhere else? There are lots of classes that have just two members (widht and height) so there's probably more room for consolidation\n- The naming scheme could probably be more descriptive (no pun intended)\n\nTODO:\n- Not sure where `GetFidelity` could be used at the moment, I need to check the code for the lists (where the SD/HD icon is shown).\n\n@mkortstiege @Montellese @topfs2 @fritsch \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Memphiz": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/6474", "title": "[osx/win32] - add inapp update feature via sparkle framework / winsparkle", "body": "Well feature time. This PR adds the Sparkle.framework based inapp update feature to Kodi on osx. Most osx users know this updating system from various other apps. Its the quasi standard updater.\n\nThis PR does:\n1. add sparkle framework building to our target depends (we build it from source - no binaries right? ^^)\n2. adds all the needed stuff to the osx project\n\nThis is how it looks like when an update is available:\n\nhttps://dl.dropboxusercontent.com/u/30371861/sparkle/01-sparkle-menu.png\nhttps://dl.dropboxusercontent.com/u/30371861/sparkle/02-sparkle-update.png\nhttps://dl.dropboxusercontent.com/u/30371861/sparkle/03-sparkle-updateprogress.png\nhttps://dl.dropboxusercontent.com/u/30371861/sparkle/04-sparkle-readytoinstall.png\n\nThe user can either manually \"look\" for updates via the menu - or let sparkle do its magic. He also can decide to skip only one version of kodi or if he doesn't want to update now he can delay it. He even can activate an auto update feature without user interaction.\n\nIf you wonder why there is a public key in those commits. For security reasons we have to sign the DMG so that the updater can verify that the update is really done by us (i would hook the signing up to the release jenkins job - or the alpha job in case we want to provide alpha update via sparkle).\n\nBasically the signing is done because of the same reasons we have to sign the apk file for android.\n\nWhat do you think? (given the risk free integration we could even think about taking this into 14.2 - once its in we can publish versions via an serverside xml).\n\nAs you can see the updatexml which holds the metadata about available updates can be defined in version.txt (in case we want to have different files for alpha and final releases). For now i just would put them to the osx downloads on the mirror.\n\nOnce we release we just kick the jenkins job (which is not adapted yet) which signs the dmg - the sign process results in an dsa key hash which has to be added to the xml file (this is manual work - like when i update cydia repo). XML file structure is straight forward (title, version, size, dsa hash, changelog/description).\n\nYeah long text. :) - wanted?\n", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/347847", "body": "ymmd :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405131", "body": "Could it be that this new confluence skin doesn't work on iPad? I don't seem to be able to navigate by swiping left/right ...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405471", "body": "I think i've got a workaround ... in the old vertical version i could have swiped up and down for doing the \"key up\" and \"key down\" for getting through the main menus. In the new horicontal it doesn't work ... but one can go main menu per main menu to the right ...\n\nexample: Video is in the middle (and has focus) - right of it music and then right of that is system ... if i want to go to system i just can't reach it (tapping on it just opens the currently selected entry which is \"video\"). But i can go to Music ... then back to main menu - and now everything is scrolled to the left a bit - and then i can hit system.\n\nWhatever - its usable with the iPad and nicer then pm3.hd ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/407301", "body": "AMEN! :o)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/407301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/417019", "body": "I think this won't work on osx because @CFLAGS@ has the 10.4 sdk include dirs in it. So it pulls the rpc header from the 10.4 sdk and maybe you remember that this isn't an up to date header which lacks some definitions (e.x. rpc_uint).\n\nMy osx and ios versions of Makefile.in.patch differ there and on a second part where i change libdir from @libdir@ to @prefix@/lib - because otherwise the lib will install into /Users/Shared/blubblubb/lib64 on 64 bit mashines ...\n\nDon't know how to get this clean and unique for ios and osx :/\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/417019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "7pepo7": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/6179", "title": "[New feature] User custom UPnP mime types", "body": "You could add your own mime-types for streaming file if your TV (or another device) expect different one than DLNA/UPnP standard specified (like mine TV). For example mime type standard for AVI file is video/x-msvideo but my TV (LG) expect video/avi and won't play streaming avi movies from Kodi (XBMC). To add custom mime types (only for streaming) just add file named \"upnpmime.xml\" to \"userdata\" directory (%APPDATA%\\Kodi\\userdata on Windows).\n\nStructure of upnpmime.xml file:\n\n&lt;upnpmime&gt;\n&nbsp;&nbsp;&lt;profile id=\"name_of_device\" type=\"name\" &gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;mime ext=\"movie_file_extension\" mimetype=\"new_mimetype\" /&gt;\n&nbsp;&nbsp;&lt;/profile&gt;\n&lt;/upnpmime&gt;\n- name_of_device - friendly name of device in DLNA\\UPnP (KODI shows it in logs or in \"Play Using...\" function)\n- \"id\" could be UUID of device in Kodi, but you have to change type to \"uuid\"\n- you could add as many profiles as you want, and so mime entries in profile\n\nfor example:\n\n&lt;upnpmime&gt;\n&nbsp;&nbsp;&lt;profile id=\"[TV]47LM660S-ZA\" type=\"name\" &gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;mime ext=\"avi\" mimetype=\"video/avi\" /&gt;\n&nbsp;&nbsp;&lt;/profile&gt;\n&lt;/upnpmime&gt;\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "clashlab": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/5499", "title": "Allow named groups on m_videoCleanDateTimeRegExp", "body": "Some of my video files are name with the year before the movie title (ie: \"1999 - Matrix\"). I didn't find a way to only change cleandatetime in advancedsettings.xml to allow this naming (the first group is hardcoded to be the title, the second the year). So here's a patch to use named groups allowing to place year and title in any order.\n\nI defined 2 groups: \"year\" and \"title\". To name a group, simply put \"?P&lt;group_name&gt;\" juste after the opening parenthesis.\nAs advancedsettings.xml is an XML file, the '<' and '>' characters will have to be escaped \"&amp;lt;\" and \"&amp;gt;\" respectively, so a named group will start with \"?P&amp;lt;group_name&amp;gt;\"\n\nI also change the default value for m_videoCleanDateTimeRegExp to support the actual naming and the one I introduced.\n\nAlso, using the named groups \"title\" and \"year\" isn't mandatory, the actual regex will still work as expected.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "t4-ravenbird": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/4256", "title": "fix: woa -no progress dialog when start playing from main menu", "body": "ref http://trac.xbmc.org/ticket/14954\n\nplayback is started in background-thread therefore woa does not give visual feedback (progress-dialog).\n\nsuggested solution ; access file from gui-thread (using File::Exists()) to have woa activated before spawning playback-thread.\nI don have a deep overview of the playback system (very little, in fact;-), so ;\n- is there any danger or drawback in doing it where I suggest in this PR?\n- are there other similar places where some of the same scenario can pop up?\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732", "body": "congrats - the first xbmc repo pull processed :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/654732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000", "body": "friendly tip. you want to use git pull --rebase when you fetch upstream.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048", "body": "even if osx requires them for something else, this is correct. we need to have these under control. so test on osx, if it requires them for some other reason, put it under osx only...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/660048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790", "body": "please rebase your branch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/665790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636", "body": "Any particular reason? Can't see any drawbacks to doing this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953", "body": "DISPLAY is only ever unset if a) X server isn't running, or b) user has ssh'ed into a remote machine and attempted to start XBMC without setting DISPLAY first\n\nCurrently in these cases, XBMC segfaults with a fairly unintelligible (to the average user) python backtrace\n\n```\n$ xbmc\n/usr/lib/pymodules/python2.6/gtk-2.0/gtk/__init__.py:57: GtkWarning: could not open display\n  warnings.warn(str(e), _gtk.Warning)\nError: unable to open display \n/usr/share/xbmc/FEH.py:69: Warning: invalid (NULL) pointer instance\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:69: Warning: g_signal_connect_data: assertion `G_TYPE_CHECK_INSTANCE (instance)' failed\n  window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n/usr/share/xbmc/FEH.py:83: GtkWarning: IA__gtk_settings_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:83: Warning: g_object_get: assertion `G_IS_OBJECT (object)' failed\n  button = gtk.Button(\"Quit\")\n/usr/share/xbmc/FEH.py:88: GtkWarning: Screen for GtkWindow not set; you must always set\na screen for a GtkWindow before using the window\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_pango_context_get_for_screen: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_font_description: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_base_dir: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_context_set_language: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_new: assertion `context != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_text: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_alignment: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_ellipsize: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_single_paragraph_mode: assertion `PANGO_IS_LAYOUT (layout)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_set_width: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: PangoWarning: pango_layout_get_extents: assertion `layout != NULL' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_default_colormap: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_colormap_get_visual: assertion `GDK_IS_COLORMAP (colormap)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_screen_get_root_window: assertion `GDK_IS_SCREEN (screen)' failed\n  window.show_all ()\n/usr/share/xbmc/FEH.py:88: GtkWarning: IA__gdk_window_new: assertion `GDK_IS_WINDOW (parent)' failed\n  window.show_all ()\nSegmentation fault\n```\n\nIf you prefer, we could just immediately return the error message \"xbmc: no DISPLAY variable set\" from xbmc.sh (and not try to set it to :0), hence avoiding the backtrace. That would at least make it easier for the user to find their mistake.\n\nHowever, it likely fixes the issue in 50% of the cases if we do also set it to :0 and attempt to continue, and it doesn't do any harm?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/723504", "body": "Can this not already be done using smart playlists or a slight extension thereof?  I don't really see this being widely used enough for core integration.  Perhaps as a script (smart playlist generator) or plugin would be a better fit?  Another option might be to take a look at the PVR branch and use its plugin interface where a \"channel\" has more relevance.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/723504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736267", "body": "i'm not very enthusiastic about that PlatformImplementation file. that will eventually end up as an utter spaghetti of different features. i'd really like to see a platform/log.h/cpp \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736475", "body": "Right. As my fourth comment in the description stated, not a final solution, not a dumping ground, just a stop gap until we can figure out where things should go.  As such I'm tempted to keep the files around only until platform abstraction is complete.  I have ZERO intention of leaving them in the tree indefinitely.\n\nI think jmarshall's idea about implementing some (stdio|stat|dirent)_utf8.h/c per platform would probably be the better solution for this specific case.  We'd likely use them for (File|Directory)HD.h/cpp as well, since nearly all of the ifdefery in there is for UTF8.  Obviously we'll use the VFS where ever possible.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/741960", "body": "As we discussed on IRC, there is no log closing logic in our current implementation and adding one is non-trivial due to our insistence on doing important things in dtors of global objects.  As such, adding one is outside the scope of this patchset. OpenLogFile just returns a FILE\\* anyway, so fclose() is your guy.\n\nOpenLogFile will likely go away once the damn snow stops falling and I can use my free time for things other than shoveling. I'll implement the *_utf8 functions and use that to replace the current stuff.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/741960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743400", "body": "yes, works with everything i've tried including several plugins etc.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743613", "body": "didn't add it for the heck of it, sadly needed.\n\nthis still need osx and windows attention. we can surely remove lib/win32/libmms_win32 and possibly lib/win32/glib\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/751528", "body": "this really shouldn't break anything.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/751528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762077", "body": "my work, i get to defend it ;P\n\nmenus menus menus. and boundaries.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762112", "body": "i know i'm a PITA but this is two logical blocks. refactoring the GetMoreItem and showing it in the dialog ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762119", "body": "removing the functionality is not an option, it was an actively requested piece of functionality. but really, non-stackasfile can be handled by generating a playlist. that's good enough.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765993", "body": "nelson11@zoidberg:~$ unset DISPLAY\nnelson11@zoidberg:~$ /usr/local/lib/xbmc/xbmc.bin \nCan't open display \nERROR: Unable to create application. Exiting\nnelson11@zoidberg:~$\n\nThe binary is fine, it's FEH.py that needs fixing. Who wrote that thing again?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/767399", "body": "GUIDialogMusicScan and GUIDialogVideoScan (more unification to be done...)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/767399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771393", "body": "I agree with keeping as much history as possible.  The think I thing we should really try to get from this is, how to avoid re-occurrence in the future? \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773146", "body": "pydocs on read() has a typo and is wrong,\n\nalso this is not quite what i had in mind, in particular it does not implement the stdio interface.\nfread(dest,size,nmemb,file) and so on. once this get to be used in all sorts of add-ons through swig, it will often be used for fileio callbacks. then we need this form. i'm not suggesting replacing, but rather have functions with the stdio calling conventions as well.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/779692", "body": "okay to close this i assume?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/779692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/825436", "body": "Wasn't singleexit a hack in the first place?  If so, do we really want to propagate it's use?  It seems to me that anywhere we need such a thing is just a good example of why recursive mutexes are bad.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/825436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844131", "body": "do it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844153", "body": "ping elupus, is that an objection?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/851556", "body": "hw decoders / dvdplayer usage; this is not designed for it. unifying pap and dvdp codecs is a separate task. potentially quite a lot of work since pap has no demux layer.\n\ntopfs2; a lot of these codecs consume the whole file on input. as such, an interface like that is not very fit.\n\ni misused lStartOffset currentl since it solves the problem of all tracks being selected (since they point to the same file) when you play a specific track in a multitrack file. definitely have to be changed.\n\nthe void\\* was for handling float/integer data. i assume AE patches the BitsPerSample thingie in PAP to something more general. once we get AE in, this can easily be changed to provide whatever info we need. i don't think it's necessary to express the buffer in samples, the codec is told you have yeyh dataspace, use it as you see fit. the add-on should always be the one reporting its format to the player, not the other way around. e.g. configurable mix rates etc (using add-on settings), thus there won't ever be any ambiguity as to what format is expected. we should probably supply a hint on init though that the codec can use or ignore as it sees fit.\n\nas for VFS, the idea is that we'll export a VFS interface from the xbmc library that these add-ons import (lazy linking), then use. while handing in io callbacks directly is tempting, it won't be enough for all cases (not everything has io hooks).\n\nwe probably should add a cache list for the audio codecs to avoid that db hit,it's quite noticable (i never meant for this to be included as is, i wanted comments)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/851556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/855257", "body": "because you don't get the eof on the socket on a suspended computer. i'm 95% certain that's why we use inotify, but i can't dig back in the log as i don't have the old history fetched here.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/855257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/861915", "body": "I know this is closed, but I only just now got the mail...\n\nIt'd be even cleaner yet if you allowed the user to define the TARBALL_LOCATION in some config file (not in tree) which you \"-include\" (doesn't fail if the file is missing) at the top of each makefile, then use ?= (set only if unset) to set default values.  This would also allow the user to store the tarballs outside the tree so they don't have to redl them after git clean -xdf.\n\nWhy the switch from append to .gitignore to overwrite? The target should only be executed once, so it shouldn't be needlessly growing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/861915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865689", "body": "I guess we just have to ignore elupus' bad habit of adding doubt at the end of his comments ;) look at the pull req page while logged into github. Follow the instructions.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/879866", "body": "same comment as last time - we should mimic stdio. however, we can change that later so no objections on this going in for now.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/879866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880359", "body": "looks good to me, can't find anything wrong.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880404", "body": "if you git am the provided patch you'd keep the author. for future reference..\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880518", "body": "wait for osx approval. plus fneufneu raised a concern for freebsd which also needs to be adressed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "theuni": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348", "body": "What spiff said. Also, if you're going to submit a request for a few commits, may as well do them all at once.\n\nThanks for the contributions, and for our first pull requests!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/655348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823", "body": "I agree with Bob, patching FEH is the way to go.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/680823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765011", "body": "I merged this, but I've cleaned it up first. Please be sure to set autocrlf, that's what caused the file to be rewritten.\nSee here: http://help.github.com/dealing-with-lineendings/\n\nI also fixed the date before committing. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/770210", "body": "I'd rather see them committed individually with some reference to the original commit (though there's no use listing the original commit id), so that we at least quickly see the original intention of the code when browsing the log.\n\nThanks for this, btw.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/770210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/776850", "body": "\"there is still much to do ;)\"\nHow about a TODO to that effect?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/776850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782658", "body": "Thanks for that. First commit updated.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/790605", "body": "Queep: I'll have a look at updated translations. These are tough because strings may have been added/changed since Dharma so they're not simple backports. We would need verification from all translators.\n\nNote: build/sanity on OSX was verified by amet.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/790605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795681", "body": "builds/runs fine in linux x64. That is _not_ a technical review :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/796383", "body": "Added in two more because I have no spine. Window is really closed now.\n\nCan I get new acks from osx/win32 devs please?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/796383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838849", "body": "I think it'd be helpful to have BASE_URL as a global somewhere, for easier drop-in replacement. This would allow for a specific mirror to be used for all deps, local cache, proxied downloads, etc. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844571", "body": "ok. I'll push it in as soon as 10.1 is packaged, otherwise i'd have to backport due to our packaging scripts/buildbot.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865096", "body": "This is NOT a Linux sign-off, but it builds and seems to run ok here.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/875304", "body": "not a code signoff, but builds/runs ok in linux.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/875304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/899571", "body": "Made a few changes and pushed it in as 45b7cd6b054c4f73bd4c35261bb2b395db7980a6.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/899571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593", "body": "Please do not push needless merge commits into git. You should always be using 'git pull --rebase' for mainline.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115", "body": "For future reference, it would have been nice to have these commits as a real merge, where the merge commit references the ticket number.\n\nIf git merge detects that it can be merged as a fast-forward, it will. So need to use 'git merge --no-ff'.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201", "body": "Sure, though having a real merge commit allows for much easier bisection. It also makes it clear that the series of commits should be seen as a group.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264738", "body": "It would be great if you guys could come up with a way to get a live log in a fixed path (one that doesn't depend on %buildconfig%), preferably in Win32BuildSetup. Then the buildbot could watch the live compile status.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264752", "body": "right... copy != live. copy means that it appears at the end, so the buildbot has no idea what it's crunching on for an hour.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278513", "body": "elupus: I asked for this. The ubuntu ppa builder adds this flag. Ubuntu's build of ffmpeg does the same thing, see the changelog here: https://launchpad.net/ubuntu/+source/ffmpeg/4:0.6.1-5ubuntu1\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/373670", "body": "I don't understand this change, it seems to completely defeat the purpose of files-in-lib. We need to pick a direction and stick to it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/373670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385586", "body": "At the very least, can we agree to make this an option? Imo it was going to be one of the biggest selling points of Eden: a unified library. It addresses the annoying problem of unscraped movies, and allows my gf to find things that weren't automatically added to the library without me having to mutter as i switch to files view...\n\nJoakim: I understand your \"that's what the library is for\" pov, but my argument is that many users don't understand the distinction.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "davilla": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072", "body": "did you check that none of the dyloaded libs need libssl or libcrypto ? \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736103", "body": "looks good, keep av_parser_xxxx, I'll be using them with vtb/vda hw decoders.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736223", "body": "One more thing, know the exact git version for ffmpeg/swscaler that this merge is based from would be good to know.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/737228", "body": "Needs a CloseLogFile\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/737228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738125", "body": "looks good.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743667", "body": "liba52 is used by osx/ppc\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744594", "body": "http://trac.xbmc.org/ticket/10297\nhttp://forum.xbmc.org/showthread.php?t=76816\n\nNote this is only PPC.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744621", "body": "ping beenje on it when you have a fix so he can build/test on ppc.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764702", "body": "/Users/Shared/xbmc/xbmc-git/xbmc/cores/VideoRenderers/RenderCapture.h:46: warning: \u2018class CRenderCaptureBase\u2019 has virtual functions but non-virtual destructor\n/Users/Shared/xbmc/xbmc-git/xbmc/cores/VideoRenderers/RenderCapture.h:92: warning: \u2018class CRenderCaptureGL\u2019 has virtual functions but non-virtual destructor\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764756", "body": "fixed:\n1) forward declare CRenderCapture in RenderManager.h so you can remove #include \"RenderCapture.h\" from RenderManager.h and keep it from spreading\n2) include paths for gl.h are platform dependent\n3) sync xcode project\n\nhttp://dl.dropbox.com/u/14341410/fixed_include_polution_sync_xcode.patch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764935", "body": "2nd try\n\nhttp://dl.dropbox.com/u/14341410/fixed_include_polution-2.patch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/775345", "body": "if the xbmcvfs.File implementation is an issue, then that part can be dropped until such hooks to stdio are needed and written. xbmcvfs.(copy,delete,rename,subHash) are basic file operations and that part of the API will most likely not change over time. In fact, the only function needed with external python right now to is copy.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/775345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782953", "body": "don't think XBMC\\ Package.pmdoc is used anymore, the dmg is created from the pl scripts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/794108", "body": "ack\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/794108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818798", "body": "Nope, does not cause a problem with the subsequent calls to XBPython::Initialize()\n\nIt's not quite clear the direction that this code will go, so regardless of if libpython is linked at compile time or loaded as an indirect when we load our wrapper, this makes either way function without crashing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818898", "body": "Not a clue why, I'd have to dive deep into python to figure it out. Besides, our python handling is such a twisted mess that I hope this attempt will be a start at cleaning up. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/829331", "body": "\"Looks like some simplification can be done here ;)\" fixed\n\"Do we need a ;\" fixed\nxcode project added. @jimfcarroll, pull from osx-new-buildsys @ git@github.com:davilla/xbmc.git\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/829331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/830617", "body": "I see five, the first four should go in without a problem. The last (xcode project), if you can just take one from osx-new-buildsys and totally replace the previous. When the xcode project churns as much as this did, trying to patch and resolve conflicts is a waste of time.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/830617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/831158", "body": "nm, was looking in wrong place. 61686c0 looks fine.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/831158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/840314", "body": "BASE_URL as a global is noted, however this will need to be over-ridden in some cases. As mentioned in the initial message, the main purpose is the replacement of macports and enable external python. This build system will continue to evolve over time.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/840314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850705", "body": "addon codecs should report their capabilities, then player/AE can set it to AE internal native, pick the next best format or accept what the addon codec supplies.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/869164", "body": "Can we get comments attached to the ones remaining as to why they should be left in ? That way they don't get accidentally purged by mistake at some time in the future. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/869164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/871463", "body": "If there are no more issues, committing to trunk in 6 hours.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/871463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/876915", "body": "> See http://trac.xbmc.org/ticket/11311.\n> This is quite a simple change to CThread that adds a name to the \n> thread and includes the name in xbmc.log.\n> \n> However I need help from the unix/OSX chaps. I use \n> typeid(*this).name() to get the object name, but gcc returns it in \n> decorated form and you need **cxa_demangle to clean up the name, and \n> a #ifdef to make sure the code is only called when compiling with \n> gcc. Presumably this applies to MingW as well, so #ifdef _LINUX and \n> #ifdef __APPLE** aren't enough. If anyone using Linux/OSX can get \n> the code starting at line 457 in Thread.cpp that would be great.\n\n#if defined(**GNUC**)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/876915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/878031", "body": "rebased and superseded by https://github.com/xbmc/xbmc/pull/70\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/878031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/881064", "body": "osx approves for gcc-4.0 and gcc-4.2 for i386/x86_84/arm but clang will be an issue:\n\n{{{\nclang -x c /dev/null -dM -E\n}}}\n\nunder osx 10.6.6 shows\n{{{\n#define **GNUC** 4\n}}}\n\nbut don't think abi::__cxa_demangle  is avaliable under clang, see https://svn.boost.org/trac/boost/ticket/4763\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/881064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/881892", "body": "clang -x c /dev/null -dM -E shows  #define **clang** 1\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/881892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/883092", "body": "Agreed, the current code replicates the existing flow including all of the warts. I could merge in topfs2's quit() messaging, then have that setup an exit condition which is detected in main and replace the while(1) loop.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/883092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/332868", "body": "fixed in 5220493ca014b9ca1a58da34799a43bdec62a3b5\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/332868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/362109", "body": "http://en.wikipedia.org/wiki/Application_binary_interface\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/362109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388984", "body": "if (GetIOSVersion() < 4.3) might work there, it's in DarwinUtils.h. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405378", "body": "yes, it also effects osx/ios.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405502", "body": "see xbmc/threads/XBMC_mutex.cpp\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405532", "body": "haha, noted\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405568", "body": "http://lists.apple.com/archives/unix-porting/2002/Sep/msg00079.html\n\nneither PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP nor PTHREAD_RECURSIVE_MUTEX_INITIALIZER exists on osx and I also suspect any bsd base system.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/417053", "body": "@CFLAGS@ has the proper sdk includes. configure --with-darwin=ios will set that up.\n\nI'll have to recheck \"@libdir@ to @prefix@/lib\", I might have missed that one.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/417053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/429707", "body": "opps, fixed. thanks for catching.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/429707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "CrystalP": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266", "body": "Don't worry about Windows, it doesn't use configure and always has an internal Python.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/659266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538", "body": "Pulled & merged as 5e6d3fd, see details in ticket.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/668538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/714159", "body": "Added linux implementation, thanks AlTheKiller, and rebased -i to fix up minor issues.\nThe linux implementation should be tested, I can't.\n\nbobo1on1, maybe LinuxRenderer and LinuxRendererGL need the same treatment as WinRenderer to remove the hardcoded sws_rgb2rgb_init(SWS_CPU_CAPS_MMX2).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/714159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/716703", "body": "I had a look and it's useless because sws_getContext already calls it when appropriate.\nIt would be useful only if we called the rgb-yuv conversion functions of rgb2rgb directly.\n\nI think the function should be removed from DllSwScale.h and the renderers, but it's not this branche's purpose, so I'll just remove the commit related to sws_rgb2rgb_init.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/716703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/731610", "body": "Read the commits, builds & works fine in Windows, no concerns, well done!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/731610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/742936", "body": "Good catch, thanks. I also fixed the FIXME just above that :) Will push when I figure out the proper way to merge into master with git\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/742936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/776266", "body": "Looks good, I'm just concerned with performance on low power hardware (crappy Intel, Ion, old ATI/nVidia...). This approach renders twice, as opposed to render once and make a smaller version copy.\nThe render chain is currently simple, but adding deinterlacing and some post-processing will make the 'render twice' model clearly more expensive and will push more hardware over the edge. I may be looking too far in the future though :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/776266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865162", "body": "I changed my mind and agreed with those who wanted a single dir for all xbmc version. Commit & files on the mirrors updated to reflect that.\nThere is a separate sub directory for the mingw/msys stuff, scripts are also updated to reflect that. Works for me, I'd appreciate confirmation by someone else.\nThe new libluray was incorporated in the commit.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284", "body": "All that commit did was move files that were dumped at the root of the xbmc project, due to a weird merge. The rest is untouched, and vastly different than before the reshuffle.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040", "body": "oops, the second file wasn't supposed to be committed. Sure that can go in MathUtils but there will still be #ifdefery. The function is already defined for MSVC and that one conflicts.\n\nExcept for the inline keyword I fail to see the difference between the current code and what you wrote.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681", "body": "Why the effort? System libraries already have abs() for most interesting types. This one is the exception.\nSeems to me the function belongs to some linux-specific header. MSVC already has the function.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/260681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295661", "body": "This commit seems to have broken Windows build, but I don't know how and didn't have the time to look.\n\n> ------ Build started: Project: XBMC, Configuration: Debug (DirectX) Win32 ------\n> 1>  CharsetConverter.cpp\n> 1>CharsetConverter.obj : error LNK2019: unresolved external symbol _fribidi_unicode_to_charset referenced in function \"void __cdecl logicalToVisualBiDi(class CStdStr<char> const &,class CStdStr<char> &,enum FriBidiCharSet,unsigned int,bool *)\" (?logicalToVisualBiDi@@YAXABV?$CStdStr@D@@AAV1@W4FriBidiCharSet@@IPA_N@Z)\n> 1>CharsetConverter.obj : error LNK2019: unresolved external symbol _fribidi_remove_bidi_marks referenced in function \"void __cdecl logicalToVisualBiDi(class CStdStr<char> const &,class CStdStr<char> &,enum FriBidiCharSet,unsigned int,bool *)\" (?logicalToVisualBiDi@@YAXABV?$CStdStr@D@@AAV1@W4FriBidiCharSet@@IPA_N@Z)\n> 1>CharsetConverter.obj : error LNK2019: unresolved external symbol _fribidi_log2vis referenced in function \"void __cdecl logicalToVisualBiDi(class CStdStr<char> const &,class CStdStr<char> &,enum FriBidiCharSet,unsigned int,bool *)\" (?logicalToVisualBiDi@@YAXABV?$CStdStr@D@@AAV1@W4FriBidiCharSet@@IPA_N@Z)\n> 1>CharsetConverter.obj : error LNK2019: unresolved external symbol _fribidi_charset_to_unicode referenced in function \"void __cdecl logicalToVisualBiDi(class CStdStr<char> const &,class CStdStr<char> &,enum FriBidiCharSet,unsigned int,bool *)\" (?logicalToVisualBiDi@@YAXABV?$CStdStr@D@@AAV1@W4FriBidiCharSet@@IPA_N@Z)\n> 1>XBMC\\Debug (DirectX)\\XBMC.exe : fatal error LNK1120: 4 unresolved externals\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bobo1on1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085", "body": "Sorry, I'd rather not do this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823", "body": "If DISPLAY is not set, something is wrong, the user should fix that instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/667823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906", "body": "DISPLAY is something the system should set, I'm fine with a big fat warning if it's not, but we shouldn't set it ourselves, it's not our job.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/669906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/714972", "body": "I'd have to check what sws_rgb2rgb_init does, davilla mentioned it doesn't do anything useful.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/714972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/740918", "body": "Looks ok to me.\nIn 64099fcf77d7970996be107aa7fcbc3fefafbbb3 you left a bit in DVDPlayerVideo.cpp\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/740918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/753646", "body": "Ok by me.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/753646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764852", "body": "431557446236a48787f16035ab3f29642cb8837f for the virtual warnings\n839fb77bda3b559a45212c71119f61d4750828e7 apparently including system.h is our way of getting GL headers\n6ddbaac062e61076100cb7ca85ba7228b781faea for the xcode project\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/764852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765590", "body": "LinuxRendererGL.h still has #include \"RenderCapture.h\"\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765627", "body": "Comitted in 0286ff4cae40defc49faf879e99109ea259d281e\nThanks for figuring this out.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/776342", "body": "I agree, regarding single pass rendering it's ok, but for software rendering and multipass it will indeed do far more than needed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/776342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/783821", "body": "4ecf309946170a63d04b6b9161ca15bf2ca0cef5\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/783821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823956", "body": "Just wanted to add a bit of safety, considering the amount of python bugs we had (and possibly still have).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/824428", "body": "Ref counting sounds like a good idea to me, it would require a TLS variable, jcarrol is working on that.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/824428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/831955", "body": "Right, I guess it's ready to go in then.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/831955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/840930", "body": "98918daeb912c5f70d43938f0a1e8416d01355c5\n3280b220edd50ea9be8adaa28ba8dddc9dd4561f\nbfed3be21cb5a1ea26af1385b54f175ba696d858\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/840930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009", "body": "Why not make abs a template function instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/259009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/275220", "body": "Feel free to ping me if I broke the GLES build.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/275220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/363935", "body": "I can't map anything to F10, F11 or F12 since this, possible other keys are affected too.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/363935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/364002", "body": "Ok I see the problem, in CButtonTranslator::TranslateKeyboardString() KeyTableLookupName() should be called with a string that's been made all lower case.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/364002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "topfs2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068", "body": "I don't see the reason for this? You can just call stopClient() followed by startClient if you need to reconnect. It makes more sense also to enforce stop before start IMO\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076", "body": "I agree with Bob also, setting it randomly is a hack at best\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/684076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744438", "body": "I think you do the pull and then you commit to your local and push, it will be merged in then. atleast it did that for me when I didn't mean it to do that :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/766453", "body": "I did, your more than welcome to add to it :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/766453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/775145", "body": "Something which has an API closer to https://github.com/topfs2/libvfs this I guess. Could perhaps do a wrapper IO hook for our vfs for that lib and use it as a stepping stone of using that lib in core?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/775145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/849573", "body": "I tried it out and it does indeed work, well as much as I can try I only have a phone so very limited hardware.\n\nI don't like the window though, it feels a bit malplaced and it, as jmarshall points out, adds a lot for the skinners. I would have liked to see bluetooth stuff in settings -> System probably. I'd even like to see stuff spread out so that bluetooth audio (which I didn't got to work but might be that I'm missng something, I just tried pressing it?) for example is in audio and input stuff is in input, if we can I'd like to see bluetooth behaving much like anything else and more integrated.\n\nNote for next time is that its much nicer if you do a branch and do the pull request on that branch, that way you can continue to work and it feels more sandboxed than if you do it on master. This is nitpick obviously and don't care for it now :) Just wanted to say it :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/849573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850393", "body": "IMO it should state in the init struct what it will return and then the player / AE will just have to eat that, or fail and try to use another codec :) If an addon have the ability to support multiple types of data output we could give it hints but they must be allowed to be completely ignored. As jmarshall say I do think that the CAddonCodec is meant to make the coding of the actual addon as simple as possible while CAddonCodec is also meant to transform it to be as simple as possible for users of that abstraction, so a niceness layer for both parties. I agree with not hardcoding it to a single format obviously :) I think this is why its void \\* tbh.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/854610", "body": "@cptspiff - While this is rather offtopic but should we really have our vfs as a global instance, the libvfs I designed is that way now but I planned on making it with contexts so even if global space is shared there can exist multiple vfs in the app.\n\nReasons why I think it should be kept as context is that say our vfs is global and an addon decides to add some hooks, this would affect the entire program which is not what we want, while we can check for that stuff in open source addons we really should still be sandboxed if possible IMO for the abomination that is closed addons :) So I'd rather see us giving posix hooks to the addon, as such the hooks given are not our libvfs hooks but just the hooks needed for the addon. And if it is a codec we probably should assume it having a demux, no point in using paplayers weird thingy as a model :) I understand that it may be somewhat out of scope of what your doing atm though.\n\nI guess the problematic libraries are timidity etc which does not accept io hooks? btw thats why I suggested that codec pulls data from us since it probably knows more accuratly when it needs data than we do, i.e. a codec which needs the entire file just go ahead and pull the entire file, it starts to push back audio frames when its good and ready.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/854610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/858480", "body": "One way is to have much of the settings like turn on / off bluetooth radio, discovery etc could be in settings -> system. The actual device pairing could be a dialog, would obviously add on skinners still so this is merely a suggestion. So in settings -> system you have a button which triggers that dialog, named scan for devices or something.\n\nThis is how the network patch does it, I'm not sure if there is another way. I made it so that the list was directly in the settings but if you have a lot of devices its not overly nice to have it in settings IMO, it should be static almost.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/858480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882751", "body": "I did do a try at this last year, here are those patches:\n\nhttp://pastebin.com/qBP9fntt\nhttp://pastebin.com/eUpjLtSL\n\nThere are a few other in the patch set but they are irrelevant to the discussion\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/887750", "body": "So to show the proposal with decode thread and callback based, this is a sample patchset I did (not compiled it more than the first 2 patches so its just to show my point).\n\nEssentially it consists of creating a monitor for the data queue and then we create one thread for the decoding, in this thread the addon can call to xbmc for more buffer data (read from vfs) or push data to be consumed by the player. The player thread goes in via ReadPCM and gets the data from this monitor, i.e. the monitor acts as a middleware for the processed data.\n\nhttp://pastebin.com/s6gpd6Qu\n\nhttp://pastebin.com/3KvGqTXu\n\nhttp://pastebin.com/gWCSA13q\n\nhttp://pastebin.com/DBP77YEL\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/887750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/887811", "body": "Forgot that when it drops the buffer page it should delete the data (l46 oatch 4)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/887811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/336229", "body": "Looks like we could do this on the file operations also to inject our vfs.\nAnother interesting read which sandboxes more, i.e. removes the possibility to reload builtins etc http://tav.espians.com/a-challenge-to-break-python-security.html\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336444", "body": "I think the best way is to create a vfs module which is exactly the same as the os. or io one, then when you have that it should be fairly simple to just inject ours when they try to import io (the link I gave shows how to do that). that way its transperant for the scripts but they may use the explicit one if they so desire.\n\nI really don't want any addon to have access to os or io stuff without my strict consent, have already gotten my xbmc box borked by an addon before :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336450", "body": "Oh me and jimfcarrol discussed this quite a bit on IRC and I agree that we should probably not put this in until them all are wrapped, i.e. all or nothing. Since as jimfcarrol said this decouples the os.open and os.getcwd quite a bit. i.e. say foo.bar is in os.getcwd() doing os.open('foo.bar') fails, which it doesn't in normal python.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337015", "body": "I agree with you elupus, addons should be sanboxed and should behave as if they where executed out of process in a safe location with read and write, a location which is the same no matter from where you start xbmc.\n\nI see no reason why a python dev shouldn't be able to use the standard functions either (even if they are redirected to our modules) and I see no reason why a python script should have any access to the normal io, they should go through our vfs at all times. While we can enforce addons in our repo to use our modules we don't have that control of addons outside xbmc and doing stuff like this does both sandbox and make it easier to develop. I think the problem with this is that this only fixes getcwd but shouldn't be in mainline until all io is wrapped.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347556", "body": "Why do we need to announce profile change?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347990", "body": "I added a pull request which should remove the need for this announcement. https://github.com/xbmc/xbmc/pull/111\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/349218", "body": "that is one sour cookie :( I missed this when I reviewed it sadly :S\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/349218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385705", "body": "I might missunderstand the argument here but:\n\nPersonally I don't see why the distinction is needed either, instead of switch to file view -> source you do sources -> source, its the same amount of nav actions but is a lot easier for non-techy. Just because its a source != it needs to be scanned and I don't think that is ever to be a forced requirement.\n\nWhile in the source node I do agree with that no-stacking and no renaming should occur, in that node you most likely want to nav it completely unaltered (much like with the file browser).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385708", "body": "(ugh my terrible swedish/english) by argument I of course mean discussion\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400107", "body": "If noone did a bugreport for this and its been wrong for the last two years I'd vote on remove the clutter :P\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jmarshallnz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837", "body": "A couple of points:\n1.  Nice :)\n2.  I don't like using AppendFormat/Format when FormatSQL is safer for db actions.  eg your where and order clauses would have to be PrepareSQL'd before sending them to this method.  This either needs documenting or dropped in favour of PrepareSQL.\n3.  bReturn is not required in DeleteValues or ExecuteQuery, QueueInsertQuery, CommitInsertQueries - just return directly.\n4.  iReturn is not required in ResultQuery\n5.  I prefer m_multiWrite, but don't really care ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/699837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977", "body": "Any particular reason why you don't like return statements in the middle of methods (or specifically try/catch blocks?) or just a coding style thing?  I don't really mind either way - just interested :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/723686", "body": "Nice work - have made some comments on a few of 'em.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/723686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/724126", "body": "If you can think of a nice way to get your order clause so that an episode smartplaylist will give you your channel list then you'll be done.\n\nUnfortunately, this will be tricky I think - especially when specials are included.  The first step would be to create a counter in season/episode order from the last played item on a per-show level.  Then you'd order by that counter and a random counter (to get a random show).\n\nYou need to get (select min(c12*100+c13) from episodeview where playCount is null group by idShow) alongside the rest of the fields in episodeview.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/724126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/724191", "body": "Hmm, something like this might do the trick:\n\nselect c12,c13,strTitle,o.m from episodeview join (select min(cast(c12 as integer)_100+cast(c13 as integer)) as m,idShow from episodeview where playCount is null group by idShow) o on episodeview.idShow=o.idShow where playCount is null order by cast(c12 as integer)_100+cast(c13 as integer)-o.m,random();\n\nOnly problems are that it's not a linear scale, so it basically plays out current seasons of shows before going on to the next season on any show.  If you can improve that (perhaps sort an internal query and then use row number?) then I think we'd be good to go.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/724191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/760645", "body": "The randomizer aspect in that case is similar to the video partymode list (currently only enabled for music videos perhaps?) which just takes a smartplaylist.\n\nGiven that the ordering can be done using a query, it may be possible to allow a \"order by random (unwatched) shows\" or similar to smartplaylists in general.  This would give the nice ordering behaviour to any smartplaylist.\n\nI certainly agree that the ordering behaviour is nice to have, but I don't like to have to use an external editor to set things up, when smartplaylists are so close to the desired behaviour.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/760645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762101", "body": "Heh - sure, defend away ;)\n\nI wonder how many 2 disk editions of movies are there?  Bluray kinda makes that a (very restricted) thing of the past, right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762164", "body": "Sure, I can rebase it before commit.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/763932", "body": "The files node is identical to the current files window.  It's just a node of the library rather than having it's own dedicated view.\n\nrss feeds, livetv etc. should still work without issue from that node (I believe LiveTV sources may also be added to the root of the video library anyway?)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/763932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/763936", "body": "ok, the concensus appears to be keeping the ability to not \"seamless stack\" ISOs and do via playlists - this is essentially what we already do anyway.\n\nReason I think it's a waste of code is because the usage cases are extremely small - it only affects those that have ripped full ISO images of 2 disk editions of single movies.  The number of folk doing that sort of thing nowadays has got to be very, very small.\n\nFor now I'll look to see whether we can't move the queuing code into PlayStack instead of where it is, so that at least it's all isolated in one spot, and won't affect other functionality.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/763936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771336", "body": "There's about 20 (partial) commits in there - maybe 10 or so if some of the \"fixed\" commits are squashed.  I'll look into it, as I agree it'll be useful for history.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771426", "body": "IMO the only thing we can do is better review individual commits, even the large boring ones.  Given the number of commits in code-reshuffle (most of which are trivial but are still large) there's no surprise that the rebase commits weren't reviewed completely.  The reason these ones hit is due to a combination of renames + rebasing + resolving conflicts going wrong, yet the changes were isolated so that things still built.  The ones that caused build conflicts were almost all picked up and fixed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771933", "body": "Ok, rebased the commits as you can see - used the original commit message, appended with info on the commit that reverted it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/771933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773401", "body": "That bit of the commit should still be intact (assuming I caught all of the slipups)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/780401", "body": "Ok, 1, 2, and 3 taken care of above, and things are a bit cleaner.\n\nIt's ready for master, so I'll push it there if noone complains over the next couple days.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/780401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/780535", "body": "somehow managed to push the non-rebased version (original) of these - same content, different # of commits\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/780535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795846", "body": "Looks good to me - I suggest waiting on elupus' ack though ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795851", "body": "I think it'd simplify it as you don't have the diversion via the temporary, yeah\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/817115", "body": "fix looks good to me - it'd be good to get an ack from elupus or c0diq though\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/817115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823765", "body": "Looks ok to me, though I also don't really see the problem of just using the macros to be honest (after all, in some respects it's easier to forget to restrict the scope of the PySingleExit than it is to forget the closing macro (which likely gives a compile error))\n\nMaybe I'm missing something?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/824249", "body": "Exception handling sounds like a decent enough excuse for the guard.  It enables additions later (eg ref counting to resolve recursion issues?) if needed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/824249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838783", "body": "No impact on linux/win32 build that I can see, so other than trivials, seems good to go from my perspective.\n\nWould be good to get a linux devs once-over in case I missed something.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850329", "body": "@gnif: The point here is making it easy for the codec to return whatever it uses internally, so that the codec doesn't have to worry about conversion - it would be the player's responsibility to pass that on to AE in whatever form it wants (whether it supports anything or not).  Agreed regardingly channel layout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/871195", "body": "Looks OK to me - I don't mind either way how this one goes (most of them are in parts of the codebase that aren't touched on a regular basis).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/871195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/878430", "body": "Took care of b above with fa3d233.\n\na. is most important for binary addons, so this could be addressed then.  Ideally that would then indicate how we can do the same thing for other addons (eg a simple procedure that we go through whenever we \"start\" an addon).\n\nc. isn't a huge issue at present as most addon dependencies are library modules that aren't really shown in the UI, so leaving around new versions is unlikely to be all that much of an issue.  Plus, given the current way we handle updates (by copying over the previous version, if present) it really isn't feasible to easily role back.\n\nIMO it's ready to go as is.  I'd appreciate review - perhaps spiff, alcoheca or dushmaniac are appropriate candidates?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/878430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/879044", "body": "An incremental patch to fix build on gcc and add a few #define's around the win32 portion is available here:\n\nhttp://pastebin.com/3GVYb2W3\n\nI presume this will allow it to work on anything >gcc 3.2 or so, which should be all the gcc platforms we target.  Linux testing is needed ofc.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/879044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882358", "body": "clang also may have the **GNUC** define set, even though it may not have **cxa_demangle, so you'll need to && !defined(__clang**) onto the 2 gnuc defines.\n\nAnd yes, the mangled name will be fine to print.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882366", "body": "Cheers spiff - will pull\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/900636", "body": "Does:\n\nhttps://github.com/xbmc/xbmc/commit/89bdffb7a405db2a6fa96a7e35cdeea5f631cd56\n\nalready take care of this?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/900636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/900830", "body": "Right, so that was fixing one case (smartplaylist where clause for tvshows) but did not fix the root cause, correct?\n\nCorrect fix therefore is to revert 89bdffb7a4 and then pull your fix.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/900830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/905366", "body": "I've rebased your commits here to cleanup the fixups etc + revert to the different coding style as per elupus' comment.\n\nhttps://github.com/jmarshallnz/xbmc/commits/IronTetsubo\n\n@elupus - any idea where that profile list is in libPlatinum - a cursory grep didn't turn up anything.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/905366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/906475", "body": "If DialogPlayEjectCancel stays in then osx support will be needed as well - see my other comment - hopefully we can get rid of it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/906475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/909084", "body": "Not sure why you need to inherit?\n\nBasically if you call the appropriate static function in CGUIDialogYesNo you can get a tri-state return code (bCancelled if cancelled, else bConfirmed is true or false based on Yes or No).\n\nBased on that you can then do execute the appropriate action.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/909084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/911428", "body": "Ok, 2 options then:\n1.  Inherit and pass the ID in to the constructor of GUIDialogYesNo.\n2.  Don't inherit, but use the same XML file (via constructor).\n\nThis will reduce the burden on skinners primarily.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/911428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/913711", "body": "The XML id is irrelevant for builtin windows, yes.  So you can set your own in the constructor and that's what it'll use (you can confirm this by taking a look at the various CGUIWindow::Load() routines.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/913711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/915261", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/915261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437", "body": "<= might be safer?  It's correct as-is though (I'm not 100 what SplitString does on failure)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140", "body": "Right, well I can definitely see the point of having the ticket number in the commit msg, though I could have popped that into the last one and it still would be fine, right?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841", "body": "I suggest we remove any direct usage of OutputDebugString outside of CLog as much as is feasible - no reason to have it if CLog::Log() does the same thing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907", "body": "Agreed - almost all of them can be removed.  CGUITextureManager::Dump and CueDocument ones can be switched to CLog.  All others other than sqlite collision one can be dropped as far as I'm concerned (not sure what mp_msg is doing...)  Not sure what to do with the sqlite collision one - perhaps dump it to the log if _DEBUG is enabled?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/255907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/267532", "body": "Great work.  Any reason it's fopen64_utf8.  I know 64bit is the new cool, but...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/267532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/277008", "body": "Hmm, why?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/277008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278769", "body": "Worth checking + add the dll_putenv inside the ifdef if it needs it.\n\nOfcourse with external python it'll be a moot point.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278870", "body": "Sure - addon coders don't know what the proxy is, and nor should they.  As you say, urllib2 et. al. should take care of it out of the box.\n\nThe problem is getting the info into _something_ so that urllib2 knows what the proxy details are.  This is what we use the environment variables for - they are retrieved by urllib2 and libcurl as needed.\n\nNow, I'm quite happy to rely on the system to provide the proxy handling for us, but in that case we have to either set the system variables from the UI, or don't have them available and rely on the user configuring their system appropriately - obviously this is not an option for a Live/settopbox setup.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295670", "body": "Strange - built fine on win32 for me I thought (admittedly haven't built for a while).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/296250", "body": "Yes - we don't want to do it if we have content set (as this implies we have information available from the database).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/296250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/296252", "body": "It'd be useful to have full details (eg what are you listing, do the items (or folders) have content from the library, what is the sort mode, what do you think should be shown etc. etc.)\n\nMaybe a trac ticket might be a more useful place if there's a number of minor issues?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/296252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299117", "body": "Yup - I'm waiting on someone to test the obvious fix:\n\nCREATE index ixMovieBasePath on movie(c22(255))\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299756", "body": "Does item->IsReadOnly() do the same thing as SupportsFileOperations ?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299757", "body": "Maybe you want StdString.h rather than StringUtils ?  I'd be tempted to switch it to std::string as we're unlikely to be formatting it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300695", "body": "if m_ThreadName = typeof(*this).name() works, then you won't need to change anything outside of CThread.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300735", "body": "It'll return CThread in a constructor, sure.  Anywhere else it should be OK, given that CThread and it's derived classes are polymorphic, right?\n\nCLog::Log(LOGDEBUG, \"thread is %s\", typeid(*pThread).name())\n\nin CThread::staticThread does exactly what one would expect, with the addition of gcc's numbers (eg 10RssReader).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300739", "body": "to demangle under gcc, one can use __cxa_demangle (it should already be demangled under VS)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317559", "body": "Reading that bug link really is hilarious.  For a start, UTF8 can be 6 bytes/char, so the 3 bytes/char limit can be wrong in a number of cases (albeit extremely unlikely).\n\nI think we need to be realistic though - it's never going to be fixed in mysql, and 256 characters is NOT long enough for paths, though may be reasonable for metadata - we already have cases where win32 users are hitting bugs due to > 255 length local paths, so network paths are almost certainly longer than this.\n\nThus, IMO the only way forward is to switch to MD5 hashes of paths for the indicies.  This keeps them small while still allowing uniqueness (though it's not completely guaranteed, it's likely impossible with less than 1k characters) constraints.\n\n@Saviq: Up for implementing this?  I think there shouldn't be too many of the above that have actual indicies on them?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/331798", "body": "Nope - this is rotation of images for slideshows etc.\n\nOn Wed, Apr 6, 2011 at 10:31 PM, HitcherUK <\nreply@reply.github.com>wrote:\n\n> Jonathan is this anything to do with the Mirror Image change?\n> \n> https://github.com/xbmc/xbmc/commit/007b3d1f91f8ae634a0d92fb4b6f5a93a87d620e\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/xbmc/xbmc/commit/d0357aff6cdc8aa55a5b3beae45e09aaac4152c4#commitcomment-331171\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/331798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336389", "body": "IMO we should stick to stock python wherever possible, though I'm in 2 minds regarding access to the vfs.\n\nFor a start, the use of os.getcwd() is due to the fact that there's currently no easy way for the script writer to know their addon id other than hardcoding it.  This is silly as XBMC knows it in order to run the script, so one presumes we can either have a function to retrieve it or change things so that the script/plugin writer really doesn't need it at all.  I'm not sure what scripts are using os.chdir() for - I don't see a reason why we need to override this.\n\nAs for the vfs, I think we definitely want to provide read access - there are several arguments to be had for running a python script that has access to the user's shares/media - the subtitles script already handles writing (copying to) a writable share for instance.\n\nWhether this is done via os.\\* or whether it's done via an xbmc-specific module is really up to us - it would be easier for python authors if it was identical to the standard os.\\* module, but that might make it more difficult for other languages which is one of the motivating factors of this whole process.\n\nNote that there may be issues with trying to use os.path() etc. for our vfs stuff on win32 - I believe stock python assumes the directory separator based on platform, and our vfs is platform agnostic (i.e. this will break).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/348294", "body": "You should really use a constant for this (eg #define NUM_ITEMS 10) to make sure you use the same value everywhere.  Not a biggie, but it's better programming practice.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/348294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366102", "body": "The function is const, so the const comes after the function name.  The return value should either be returned by value (eg on any value type) or returned by const reference for more complicated types (assuming you can do so).  So I'd do:\n\nconst CStdString &getEssId() const { return m_essId; }\nint getSignalStrength() const { return m_dBm; }\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366104", "body": "This one would be:\n\nCStdString toJson() const;\n\nas you need to return by value (you can't return by reference as the CStdString loses scope at the end of the function) but the function itself does not modify the class.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/367388", "body": "See my branch for winxml fixes in my repo (there's a pull req as well)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/367388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/369210", "body": "Why have you removed the folder/file and path switching?  And why the fanart (which should be set in the background loader instead)?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/369210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370057", "body": "Stacking is still there - if it's not it's a bug in the skin.  I agree it should be enabled by default (it's disabled by default currently I think).\n\nI have no problem with keeping the original labels with the originals - at least until we get the \"match\" reliability stuff for known good matches.  I don't see the problem with it flattening the file structure even if it gets the match wrong - in that case all it will do is have the incorrect metadata - clicking the \"folder\" item will start playback as you'd expect either way.\n\nThe idea of getting metadata in file modes is it gives a simple way to organise movies and shows in ways that XBMC may not directly support (eg by decade or genre, separating out documentaries or kids movies etc.) while still having metadata available.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/374228", "body": "As we move to the future, the plan is as follows:\n1.  Everything will be in the library.\n2.  All items will have a score indicating how well XBMC thinks it got the metadata correct.\n3.  Items with a bad score will be flagged, and the user can optionally confirm (with data going to the metadata provider should they want it).\n4.  Users will be able to specify that a particular \"media source\" is organised by metadata or by folder - metadata is shown in either case.\n\nThus, using file mode to browse for things that didn't import won't be an issue - you'll be able to see the imported files with a low score no problem at all.\n\nNumber 4 indicates that users will still be able to browse by folder.  We thus need to define what we set the labels etc. to in this instance.  I agree that changing labels dramatically (swedish -> english) is probably counter-intuitive.  It's a tricky one!  Some ideas:\n1.  We could switch the label based on how good the match is.  The behaviour would be inconsistent, so IMO it's not a good option.\n2.  We could define that the label in folder mode is the folder name (cleaned as needed) and still set the metadata and still stack folders.  The idea would be that the title field is always also set (to the foldername if no metadata is available) so that the skinner can use that elsewhere on screen to indicate the match, so we'd have 2 separate labels on the screen, but the listing will have the folder label.\n\nPersonally I think option 2 is best here.\n\nIn addition, we need to consider the stacking.  In my opinion this should be a share-level or source-level option.  i.e. identical to the \"use foldernames for lookups\" option essentially.  This is how it currently operates - we only stack down folders if the user scanned with use foldernames for lookups.  Ofcourse, this means that other videos (samples/trailers etc.) in the folder are no longer available to be browsed.  Whether this is an issue or not is up for debate.  Ideally these other video files would be available as \"extras\" either way, which would make it a moot point.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/374228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375684", "body": "m_localAddon is not guaranteed to be non-NULL - eg any addon that is not installed.  Thus the reason for the isInstalled check above.\n\nI suggest that one of m_addon or m_localAddon will be available, so use a bool to do the check for an addon repository.\n\ni.e. bool isRepo = m_addon ? m_addon->Type() == ADDON_REPOSITORY : (m_localAddon ? m_localAddon->Type() == ADDON_REPOSITORY : false);\n\n(or some other more obvious series of conditions)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385808", "body": "Bug: You have not initialized m_showExitButton to true in the constructor/Initialize().\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/387541", "body": "Making sort by file, date, size display by filename and add the\nmedia-specific sort methods if content is set seems reasonable?  Then make\nthe flattening occur based on a media-specific sort method or stacking\nenabled.\n\nOn Wed, May 18, 2011 at 4:45 AM, ezechiel1917 <\nreply@reply.github.com>wrote:\n\n> some kind of second option should be preferable because that way you could\n> sort the list normally (by date/name...) if you would add new sort option,\n> you couldn't use any other way of sorting. (unless I got it wrong and you're\n> talking about new specific skin view)\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/xbmc/xbmc/commit/b59ea5bb998d576b129ac39a2b14ab520fc2c2a6#commitcomment-387218\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/387541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/406735", "body": "Unfortunately that doesn't tell us very much, other than \"something went wrong -> your db is screwed\".  Do you have the previous version (version 51 or lower) so you can reproduce it?  Delete the version 52 file and try again - would be great to figure out why.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/406735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/425952", "body": "This is unneeded - g_windowManager.OnAction() is called further up - you're just re-calling it, and we already know it's goinn to return false.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/425952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428472", "body": "Does this mean a single \"keyboard\" device can be active at any one time?  Are you using the settings variable as a global state variable (i.e. it's set on keypress from a \"keyboard\"?)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428477", "body": "Removing this codeblock has implications - before if we'd found a windowID we'd throw away everything we'd mapped for that windowID before and start from scratch.  Now we're no longer doing this.  We did this so that system/keymaps.xml would be the defaults, but anything you mapped in userdata would override, which necessarily meant you had to throw away what was in it before.\n\nThis needs to be discussed carefully on how the overriding should work.  You must be able to \"unmap\" a default mapping, and it appears as though you've removed this ability.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428479", "body": "Alternatively make pDevice a TiXmlElement\\* and use pWindow->FirstChildElement(type);\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428480", "body": "CStdString deviceName = pDeviceEleemnt->Attribute(\"name\");\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428482", "body": "> > has special meaning - it works only in tr1 (or c++0x) compilers.  Put a space in between them (> >)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428483", "body": "at this point you could do the clearing of the buttonmap for this window if already found\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428486", "body": "It's better if cosmetics go in a separate commit - nothing wrong with them, just don't have them merged in with actual code changes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428488", "body": "Notice here previously we only added the map if it was non-empty.   Removing this is a change of behaviour which may have implications.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428491", "body": "Don't place statics in headers.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428493", "body": "where is this static defined and set to false?  It appears uninitialized.\n\nNote that you're assuming CKeymapLoader is not called simultaneously from different threads.  This may be fine (as one presumes it's called only on app start), but you need to document it so that it doesn't occur.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428496", "body": "Don't pass by copy.  Pass by const reference.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428497", "body": "Again, const reference\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428502", "body": "first should be const &\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428505", "body": "You need to #include <map.h> and #include \"CStdString.h\" at the very least.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428509", "body": "Some documentation on this would be useful - it looks like magic.  i.e. document the expected layout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428510", "body": "The way you are using CKeymapLoader here suggests it should be a static class.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428514", "body": "the same magic?  We need a function for it :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428517", "body": "Why static?  Isn't it used only in this function?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428580", "body": "I think this is OK - what we were doing is grabbing the map and then erasing the window->map mapping, and readding it again down the bottom of the function.  We certainly need to think carefully how multiple maps are handled.  In particular the case where system is overrideable by user.  This could be done by the user map just noop'ing out the previous ones, so that add/overwrite always would do the trick.  (i.e. if \"A\" was mapped to something by system, then the user keymap could include <A>noop</A> to get rid of it.)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428587", "body": "Yuck, that will be a pain in the arse support-wise, particularly with all these remotes that assume that operating as a keyboard is a sane thing to do.\n\nIt would be worth doing some further research to see whether this is resolveable or not.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428589", "body": "You're right - previously we weren't actually clearing it (map was never touched that I can see) so it should be OK.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428590", "body": "The extra lines.  The variable name change is fine as that is forced by the code change (it better distinguishes the maps).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428593", "body": "I wouldn't trust the compiler to do it when you can just add a = false and put it in the .cpp :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428596", "body": "Get rid of it - doesn't seem to be useful anywhere, so don't pass it to the function and have a temporary inside that function instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428598", "body": "I suspect it's OK as per the above, but aren't 100% sure.  Try adding some empty <window> sections and see what happens in translation - shouldn't do anything adverse.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "opdenkamp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290", "body": "I don't like return statements in the middle of a methods. that's what the bReturn/iReturn vars are for. bit overkill in the QueueInsertQuery() to do it like that, so I'll change it to return directly, but for the other ones, I don't like the return to be within the try-catch block.\n\nI'll have a look at the rest. thanks for the review.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/700290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101", "body": "coding style, and not just for try-catch but for all methods. code is usually easier to read if you don't return in the middle of methods. 1 entry point, 1 exit point. doesn't really matter for these little methods, but in bigger ones it does.\n\nit's been hammered into my head by a teacher at the uni :-)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/701101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765573", "body": "documented that the parameters have to be FormatSQL'ed and returning a boolean now instead from the ResultQuery method.\n\npushed to master in 655aa1b36699d656181291ec962e51bc34f28d99\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/765573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/767238", "body": "hmm, sounds like that can be reused. which one would that be? CGUIDialogProgress only has one label (the title).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/767238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839397", "body": "I see I forgot to remove an obsolete method from the winsock implementation. I'll fix it and test it properly on Windows.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839403", "body": "To add to the last comment: I didn't just copy all those files over but left the defines and helper methods that were needed to get it working intact. from what I can see now I just forgot to remove htsp_tcp_connect_addr()\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/843466", "body": "I'll have a chat with andoma about the ipv6 then. I was mainly interested in the new interfaces and the queue changes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/843466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/845489", "body": "closing this pull request for now. I'll open a new one when it's fixed in upstream.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/845489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368", "body": "... yes, I won the first gitwtf award :(\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/248368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299174", "body": "works fine on mysql. not on sqlite though :)\n\ndush@crichton:~/github/xbmc$ echo \"CREATE index ixMovieBasePath on movie(c22 (255));\" | sqlite3 ~/.xbmc/userdata/Database/MyVideos46.db \nError: near line 1: near \"(\": syntax error\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299177", "body": "could by the version of sqlite that I got installed\n\n22:38:43 T:3024549696 M:2947600384  NOTICE: Attempting to update the database MyVideos46.db from version 44 to 46\n22:38:43 T:3024549696 M:2947600384   ERROR: SQL: SQL error or missing database\n                                            Query: CREATE INDEX ixMovieBasePath ON movie ( c22(255) )\n22:38:43 T:3024549696 M:2947600384   ERROR: Error attempting to update the database version!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299226", "body": "it's not unique though. if you make it unique, it'll fail when you add something with a large (>255 chars) length path.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299284", "body": "pushed the fix in 999e8d0a9eb828d84f35d71031a4b4889a39ff2d and 84380047d9940cd62378bf7cda7ffc4d297be02d\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375563", "body": "indeed, although I do boot windows from time to time ;-)\nthanks for reporting back\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375772", "body": "ah ok, I'll fix that.\n\nbool isRepo = (isInstalled && m_localAddon->Type() == ADDON_REPOSITORY) || (m_addon && m_addon->Type() == ADDON_REPOSITORY);\nlooks a bit more readable than the nested if.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375782", "body": "pushed the fix in 43b5b3d6220bbbbbcbaa7138d206bea2c9ea7e81\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/375782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "halorgium": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003", "body": "startClient() requires all the arguments to be passed in. \nI agree that it should guard against starting the client twice. \nThis makes me think that restarting overcomplicates the client. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "firnsy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189", "body": "Saviq, nice work.\n\nI've pulled into my tree for further and will push into mainline once completed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/902106", "body": "This fix was ommitted when I squashed prior to pushing #c4b0dd4dc9eedfe56988200aa5726f53bc9d58a8 it's committed in my local tree and will be rebased shortly. Thanks for poking ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/902106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/299211", "body": "the exec() command will strip out the constrained index for sqlite databases within XBMC, so testing it at the command line will fail.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299216", "body": "change the queries to \"CREATE UNIQUE INDEX\" and it the filter will pick it up. \"CREATE UNIQUE INDEX\" is supported by both sqlite and mysql.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299238", "body": "ah very true, who has paths that long anyways ;)\n\nthe solution then is to add \"CREATE INDEX\" as a valid trigger for the filter in xbmc/dbwrappers/sqlitedataset.cpp\n\nchange line 484:\nif ( qry.find(\"CREATE UNIQUE INDEX\") != string::npos )\n\nto something like (or similar to)\n\nif ( (qry.find(\"CREATE UNIQUE INDEX\") != string::npos) || (qry.find(\"CREATE INDEX\") != string::npos) )\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/299238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/311745", "body": "Nice amet, good find.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/311745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/364115", "body": "Could always change the strcmp to strcmpi for a combo defensive move.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/364115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Saviq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938", "body": "Here's a bug I reported about the issue - http://trac.xbmc.org/ticket/11120 - please comment / close when applicable.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/702938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450", "body": "This commit breaks ./configure on Linux (at least openSUSE Factory and Gentoo). It only happens in a clean environment, though:\n\n```\n$ git-clean -dxff # this removes all the files that don't belong to the git repo, ignored or not\n$ ./bootstrap\n$ ./configure\n[...]\nUsage: dvdnav-config [OPTIONS] [LIBRARIES]\nOptions:\n    [--prefix[=DIR]]\n    [--exec-prefix[=DIR]]\n    [--version]\n        [--libs]\n[--cflags]\n/home/michal/dev/xbmc/xbmc/lib/libdvd/libdvdnav/../libdvdread/obj/dvdread-config returned an error. Can't proceed\nconfigure: error: Submodule lib/libdvd/libdvdnav failed to configure\n```\n\nThe $MAKE isn't set and `dvdread-config` from $PATH is executed as a consequence. Exporting $MAKE makes the problem go away.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630", "body": "Just make it a\n    MAKE=${MAKE:-make}\notherwise this commit won't have any effect.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/298681", "body": "This fails with:\n\n```\n14:11:58 T:139768379459488 M:726536192  NOTICE: Attempting to update the database xbmc_video from version 44 to 46\n14:12:07 T:139768379459488 M:725307392   ERROR: SQL: Undefined MySQL error: Code (1170)\n    Query: CREATE index ixMovieBasePath on movie(c22)\n14:12:07 T:139768379459488 M:725307392   ERROR: Error attempting to update the database version!\n```\n\nSince MySQL can't index TEXT/BLOBs without index length provided.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/298681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317539", "body": "On MySQL indices for varchar(512) columns fail to get created (MySQL error 1071 http://bugs.mysql.com/bug.php?id=4541) in utf-8 tables, since utf-8 indices need 3 bytes per character  and the maximum index length is 1000 bytes. Either the index needs to be dropped, limited or the column needs to be ~1/3 shorter.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317572", "body": "Yeah that bug is definitely something. Re if I'm up for the job - I still have to get the explicit UTF thing to the state where it actually works. I wouldn't hold this one for me. When I find the time I'll try and work on that if no one else picks up the gauntlet.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "huceke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/734877", "body": "Wouldn't it make sense to use a smarter way to set FF_MM_MMX | FF_MM_MMXEXT | FF_MM_SSE.  Not all architectures have those flags available. See ARM cpu's.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/734877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/734955", "body": "Sorry. My fault. Had missread it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/734955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/378161", "body": "I solfed it this way : https://github.com/huceke/xbmc/commit/374b0aef4d95242ba7da38299f45ee4609dc2168\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378924", "body": "i'll check osx later today.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/379145", "body": "Confirm. It also works for osx.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/379145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "anssih": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/734901", "body": "I'm not setting those anywhere.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/734901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/737862", "body": "davilla, I guessed you were going to use them :)\nAnd the git rev is said in the commit message: \"updated: internal ffmpeg to c3beafa0f1\".\n\nwsoltys, ah, I didn't notice /lib/ffmpeg/include was our code and they were not in our ffmpeg patchset. Would it be ok to rename it to e.g. /lib/ffmpeg/include-xbmc-win32/ to make that more clear?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/737862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/737921", "body": "wsoltys (or someone else on windows), could you try whether https://github.com/anssih/xbmc/tree/ffmpeg-update-win32 works for you? It has one additional patch where I added dxva2api.h back.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/737921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738199", "body": "As for avconfig.h, that is generated in lib/ffmpeg/libavutil/avconfig.h by lib/ffmpeg/build_xbmc_win32.sh. Is that not enough?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738356", "body": "Thanks for the information. The change in the ffmpeg-update-win32 branch is not enough then, I'll make a better fix later today.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738720", "body": "wsoltys, I've now pushed a different fix into ffmpeg-update-win32. It restores both avconfig.h and dxva2api.h, but changes the directory from lib/ffmpeg/include to lib/ffmpeg/include-xbmc-win32,\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/742486", "body": "Thanks to wsoltys this now works on win32 as well. I'll merge this to master.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/742486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743263", "body": "Thanks. I'll wait several days before merging in case someone wants to object to the removal.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744561", "body": "davilla: is osx/ppc built using --enable-liba52? If so, why is that?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744598", "body": "Ah, I know the issue, I'll fix it later today/tomorrow. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744740", "body": "OK, I've done that.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/744740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782635", "body": "I can't test on win32, but there seem to still be references to DVDAudioCodecLibFaad.(cpp|h) in project/VS2010Express/XBMC.vcxproj and project/VS2010Express/XBMC.vcxproj.filters.\nOtherwise looks nice :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/788005", "body": "The fix for ppc-osx has been tested, so I'll push the fix and then pull this one.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/788005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818860", "body": "Why doesn't it cause a problem?\n\nIf I were you, I'd be very interested in why it doesn't cause crashes/hangs, as from what I can see the subsequent Initialize() calls never lock the python interpreter. Maybe it causes issues only on certain multithreaded python scripts, etc. (that is what I saw with external python 2.6 on Linux, i.e. it crashed on certain subtitles plugin downloaders only).\n\nOf course, this doesn't affect me in practice as I don't have Apple products, so feel free to do what you want :) ...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151", "body": "It is needed for LATM AAC. It can be removed once we update ffmpeg, but I'm waiting for some Windows developer to test it. (https://github.com/xbmc/xbmc/pull/18)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716", "body": "Hmm, \"lib\\ffmpeg\\include\\libavutil\\avconfig.h\" was a static file, while \"lib\\ffmpeg\\libavutil\\avconfig.h\" is generated by ffmpeg configure. I was told that ffmpeg configure might not have been run when the XBMC project is build in VS, which prevented the use of \"lib\\ffmpeg\\libavutil\\avconfig.h\".\n\nIf that is correct, you'll need to use \"lib\\ffmpeg\\include-xbmc-win32\\libavutil\\avconfig.h\" instead. If not, I'll just remove the static version, then.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/263030", "body": "I agree, looks wrong.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/263030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264443", "body": "Yes, I know what the changes were for. However I was told (by tiben20 and cptspiff, IIRC) that these caused crashers and should be removed. Is that not the case?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264456", "body": "I think the backtrace is http://pastebin.ca/2044414 (the host is down right now, so can't be sure). In any case, I can look into this to try to reintroduce the seeking fixes into ffmpeg upstream without the associated regressions. What is the reproducable test case for the original issue? (i.e. does the issue happen with every .asf file when used on non-seekable connection, and how does it manifest itself?)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264510", "body": "OK, thanks, I'll try to have some time to check that out tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264523", "body": "So the crasher issues are not related to this after all? ... I thought it had been confirmed.\nTiben20, cptspiff (if it was you some weeks ago IIRC), you remember any specific reasons for why you asked me to remove the asf patches, or was it all just a misunderstanding (in which case this should be reverted)?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/268277", "body": "I'll simply restore the patches for now, then, until I'll get some sample which they break.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/268277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269294", "body": "That would be nice, but more complex.\nWe can't detect mid-stream sample rate changes without calling the decoder (unless the container informs us of that, which e.g. mpegts doesn't do), which we currently don't do at all when passthrough in use.\nAnd if the sample rate changes to a passthrough-compatible one, we don't (with the current code) want to start passthrough as the chances of it switching back to an incompatible one are high and we wouldn't detect it anymore.\n\nHowever, AudioEngine can detect sample rate changes during passthrough, so this can be revisited then :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269343", "body": "Hmm, yes. However, it doesn't currently parse enough of DTS.\nI'll probably take a look at that later, though. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278038", "body": "The $LDFLAGS here _are_ those that the user set, we don't add stuff there in configure when building for linux.\n\nI won't oppose changing the solution for clarity, though, as long as it works.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278055", "body": "The user might want to build the rest of XBMC with -Bsymbolic-functions.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278097", "body": "You are right that it is probably not worth it to work around all the possible linker flags the user might set.\n\nHowever this one is relatively common as all Ubuntu packages are built with it (AFAIK), hence the handling to make build work with it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "wsoltys": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736380", "body": "win32 will need the /lib/ffmpeg/include directory. avconfig.h is needed to compile the vs project and dxva2api.h to enable hwacc in ffmpeg.\nthe ffmpeg dlls compile fine but vs somehow uses now the dxva2api file from its own sdk which has other types defined.\nMaybe CrystalP can shed some light on it?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/736380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738299", "body": "will try to test it this evening but still suffer from a cold so have to see.\nConcerning avconfig.h you assume that ffmpeg is build before xbmc which isn't the case on win32 (see http://trac.xbmc.org/ticket/11037 for elupus comment)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/738299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782841", "body": "works fine on win32\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/782841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837496", "body": "Do you mean inside the dharma/eden folder or outside? Either way I have no preference and will live with what you've decided ;) Just drop me a pm with the ftp login.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838023", "body": "Nope. This just should bring the third party libs to our mirror. Since you've provide not more information I assume bootstrap fails for libdvdcss. This was fixed in https://github.com/xbmc/xbmc/commit/27bfc6a90afce21ab90aeca5e9b03a7585c8c166 and you have to call DownloadMingwBuildEnv.bat again. I dunno why it won't work with automake 1.11 for msys but with automake 1.11 for mingw.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838296", "body": "Does it build for win32? IIRC it was a hassle to build it but elupus got it done.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/838296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839648", "body": "I assume the new files _xml\\* _json\\* needs to be added to the vs project file as well. Thanks for looking into it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865598", "body": "@jhsrennie: ffmpeg and libdvdnav dlls are no longer in the repo and build during compile time. If you don't use BuildSetup.bat you have to call DownloadMingwBuildEnv.bat and afterwards buildmingwlibs.bat.\nIt might make sense to put it somewhere in the vs project file but only when we changed it to not recompile on every build.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313", "body": "worked fine for me on a clean build but this one is nicer ofc. :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/235313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879", "body": "ah didn't check. They don't do it anymore?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986", "body": "Haha, ok. So time for another wtf git award :)\n<git rant on>\nCan't remember similar things with svn. But now we might have enough devs for doing things twice :P\n<git rant off>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821", "body": "Anssi is right. please use the file provided in include-xbmc-win32.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264401", "body": "sure, please go ahead. Still not that used to 2k10\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264747", "body": "that was already done. see the copy %log% ./buildlog.html > NUL? ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278744", "body": "I could be wrong but without the dll_putenv it might not work in python on win32. afaik we still rely on our wrapper.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278826", "body": "I hope you'll be right with externem Python. A simple test with an unwrapped Python dll wasn't successful (but could be me doing somerhing wrong).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/292380", "body": "argh, thanks for fixing it ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/292380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295716", "body": "I would assume the \n# ifdef _WIN32\n# pragma comment(lib, \"libfribidi.lib\")\n# endif\n\nfrom ArabicShaping.cpp is missing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295718", "body": "upps, wasn't supposed to be in bold.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/295718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324305", "body": "I did a full recompile and it worked fine (win64 -VC2010) I found only 5 occurrences of the resolution file and they all have the right prefixed directory beside one which is in the guilib folder.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324410", "body": "not sure which version u use but at current git IPlayer.h just contains 3 includes: system.h, IAudioCallback.h and utils/StdString.h\n\nhttps://github.com/xbmc/xbmc/blob/master/xbmc/cores/IPlayer.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/324410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jhsrennie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743156", "body": "It builds and runs fine with VS2010. I haven't looked in any more detail than this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/785022", "body": "It builds fine with VS2008. Is there anything specific you'd like me to test?\n\nJR\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/785022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/796693", "body": "Builds and runs fine with VS2008\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/796693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865319", "body": "Builds fine with Visual Studio 2010.\nThe XBMC.exe produced fails to play videos with an error:\nERROR: Win32DllLoader::Load: Unable to load special://xbmcbin/system/players/dvdplayer/avutil-50.dll (126)\nHowever I note the trunk build does this as well.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/877769", "body": "Thanks, I've put in a #if defined(**GNUC**) to bracket the calls to __cxa_demangle. Could someone try compiling in Linux and OSX to check the demangling works. You should find a debug log contains entries like:\n\nDEBUG: Thread CRssReader start, auto delete: 0\nDEBUG: Thread CRssReader 2388 terminating\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/877769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880498", "body": "Is everyone happy for me to push this? It builds and works fine on Windows and Ubuntu 10.10. I'm not in a position to test on OSX, but the only problem is likely to be the name demangling.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/881430", "body": "The demangling is cosmetic. If there's a suitable #ifndef that can be used with clang the only side effect would be that the thread names may look a bit odd.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/881430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882207", "body": "Now I think about it, the code should compile and work fine with clang because neither the MSC nor the GNU constants will be defined so the abi::__cxa_demangle code won't be compiled. Can someone try it with clang and make sure the thread names aren't hopelessly mangled e.g. contain non-printing characters.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/882207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/300680", "body": "The change has become bigger than I originally planned. I'll be going through all the classes inheriting from CThread and changing the constructor to (for example) CRssReader::CRssReader() : CThread(\"CRssReader\"). I'll add the VS thread name stuff to the CThread constructor, which should mean CThread::SetName is no longer needed. Given the size of the change, and because I can't test on OSX, I'll create a fork on github and send a pull request.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300728", "body": "I've already discovered that VC speak for typeof is typeid (thanks Microsoft), and as althekiller says, it always returns \"class CThread\". I don't know if this is different in MingW ...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/364132", "body": "Oops. I'm working on finishing the tidying at the moment so I'll address this. As you say, the map must be case insensitive.\nIncidentally, the current key handling (i.e. in Dharma) doesn't allow you to map an action to e.g. numpad \\* because it's treated as *, which is shift-8, and therefore as a press of the 8 key. I'll fix this as well.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/364132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/412820", "body": "Noted, and my apologies. I do test that my changes build and work on Ubuntu but I missed the warnings. Visual Studio doesn't report any warnings. The int j = stuff is indeed a leftover from testing. I'll remove it today, and I'll fix the signed/unsigned warning.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/412820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "elupus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743188", "body": "The binary aught to exit cleanly too thou..\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743395", "body": "sounds good. but have we tested it so it supports atleast most of what the old stuff did?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743595", "body": "diff looks good. only ugly part that mms -> mmst/mmsh protocol thingy. But if there is no such things in ffmpeg i guess we need it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743601", "body": "Even if i dislike removing working code. I suppose there is little point for this now that the ffmpeg ones are so much better. Go ahead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743607", "body": "Still me, just been on vacation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743619", "body": "Still me, just been on vacation.\nLooked again on your code.. ACTION_PREV/NEXT_ITEM was already disabled to do what you want once before. To allow dvd stacks. So that can't be in the change (page up/down is fine). Secondly i don't like the miss-use of seekchapter. inputstream::seekchapter should never allow stuff outside of chapter numbers.\n\ndvdplayer.cpp should instead if a chapter request lies outside of chapter border request OnNext()/OnPrev().\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743654", "body": "right.. So I've got two patches for your branch. I saw wiso ammending to a pull request. Do i just send them to you by mail or is there some other way?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/745664", "body": "That diff looks fine. Will commit when i have the time.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/745664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762577", "body": "What do we do with more esoterical file sources? like rss feeds, the current way we start livetv and play from those. Should we then be forced to use the filemanager to get to those?\n\nI'm not entirely opposed to using a general filemanager, but it needs to encompass what we do in video file view. Ie be able to hide unrelated files. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762587", "body": "ISO's with menus just can't be stacked. It's a simple as that. So that special casing would need to remain. ISO without menu's  (only main feature) can be stacked. The benefit of stacking iso's without menu's are rather pointless, they could just aswell be playlists.\n\nI see no reason to keep the advanced setting thou. If you don't want to stack, don't queue your files. If you want to stack do that. We should just default to queuing for items that won't stack properly.\n\n(not sure that made sence)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/770162", "body": "Ouch.. yea, these should go in. I'd say squash them unless you can get the actual commit cherry picked.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/770162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773351", "body": "This still suffers the destruction order issues (since you reference count based on compilation units). Old code atleast controlled construction/destruction order. So can't see what it really improves since our major issues have been destruction not construction asfar as i know.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773360", "body": "Hmm.. think there is atleast one missing. \"added: setting for specifying your internet bandwidth (restored commi...\" was used by the rss file system. Let's see if I can find it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773404", "body": "actually it was still applied. just used a non existing setting.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/774320", "body": "Yup.. i missed the point that there is seperate refcounted objects in each compilation unit that uses the global.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/774320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781852", "body": "It's a rather major change, but the diff doesn't look to horrid. I absolutely think it makes sence. I just wonder how much we'll break. Probably should be tested by somebody else than jonathan before pushed to master.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/796636", "body": "LGTM. The Interlocked -> Atomic change is silly (not your fault thou). It's somebody who just didn't like having microsoft names for identical functions :/.\n\nGo ahead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/796636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/807548", "body": "Looks good to me, but i want the two commits squashed on commit.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/807548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818477", "body": "this can be committed non the less. shared_ptr is already allowed. Are you using anything else in there from boost?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818493", "body": "looks fine\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818650", "body": "We have never planned on removing shared_ptr which we have used for quite some time. What we have been discussing is if we should allow the use of all of boost.\n\nshared_ptr have been supported on windows by extracting it from boost. So we didn't need boost in it's complete form.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823820", "body": "yea.. i sort of like the macros better too. Since the scope can be very important since you are not allowed to touch anything python while you are in one of those sections.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823836", "body": "I suppose this handle the case of a thrown exception too thou, but then again we'd probably fail somewhere else then anyway.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/823836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/826928", "body": "Actually.. Recursion fixes sound like a bad idea. We shoule never ever recurse on those since that most likely implies that we somewhere in between modified python variables without holding the lock.\n\nSo please don't add recursion checks to it. You should even assert that the lock is held by the time we try to unlock it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/826928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/830469", "body": "Yup, please do remove them instead.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/830469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/830494", "body": "Recursing into python is quite fine as long as the entry point into python retakes the lock as it should.\n\nie\n    [Python]\n    Py_BEGIN_ALLOW_THREAD\n    ....\n    PyEval_GlobalLock() /\\* don't rember actual name _/\n    [Python]\n    Py_BEGIN_ALLOW_THREAD\n    Some other xbmc code\n    Py_END_ALLOW_THREAD\n    [Python]\n    PyEval_ReleaseLock() /_ ...\n    Py_END_ALLOW_THREAD\n    [Python]\n\nIs quite fine. For that situation it needs no recursion count. Since any Py_BEGIN_ALLOW_THREAD will always fully release the lock.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/830494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837805", "body": "go ahead. We already depend on shared_ptr all over the place. If we where to remove that we'd need something very similar anyway. Secondly i've reversed my opinion on boost anyway (not sure if there was anybody more than me against it). \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842174", "body": "It already supported ipv6... Plus our implementation is GPL2, theirs is GPL3. So this is problematic. Does it add anything else?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842183", "body": "And you actually made the IPV6 support worse..\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842186", "body": "Our ipv6 support changes should be pushed upstream before anything like this goes in.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842208", "body": "I think there is a proper list inside libPlatinum for the different profiles for different files. Would very much like that you used that.\n\nRegarding coding style. UPnP.cpp and UPnPDirectory.cpp and the lot uses a bit different coding style compared to the rest of xbmc. They match libPlatinum since they where written by it's author.I very much like us to match the style used normally in those files.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842216", "body": "sounds good to me\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/842216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844213", "body": "was a semi objection. If recursive mutexes can be avoided it's better. (it's much easier when you can actually exit a mutex easily without restoring to hacks like CSingleExit() ). But i don't really mind if this goes in.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/844213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/851011", "body": "We really aught to support planar audio formats. libavcodec will move to that pretty soon. By planar i mean each channel is separated into different buffers. Just like YUV is for video. Ie we'd want to return an AudioFrame struct of some sort that we could extend at the end without breaking API. The struct should be allocated inside XBMC and passed to the plugin to get filled in.\n\nI think one can assume that the returned data is allocated and valid up until next call into the codec. Just for references this stuff won't be good enough for the video player. It also needs to know amount of data (and or time) buffered inside the codec. Otherwise it can't keep a proper timestamp for the returned data.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/851011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865835", "body": "Looks good, push away\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/869637", "body": "http://www.watersprings.org/pub/id/draft-wugofski-mms-uri-scheme-00.txt\n\nDefines the use of hname and hvalue url options for this purpose. So they should be parsed and filtered out in the ffmpeg implementation. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/869637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/908597", "body": "For reference. You can just update your branch and it will get updated here.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/908597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/908637", "body": "It was in PltMediaItem.cpp, however not really usable in this case so i'm okey with the hard coded.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/908637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/914978", "body": "I think you can push this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/914978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/914982", "body": "@jmarshallnz feel free to push your branch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/914982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/914987", "body": "since people apperently didn't dare.. maybe an explicit commit away will do :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/914987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119", "body": "Could you tell me why? We shouldn't need it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/263023", "body": "This can't be right can it. Is codec->extradata really newed? If it is that is wrong. It must be malloced by an av_malloc and have padding.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/263023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264383", "body": "You do realise this will break alot of file where we read asf from a source that can't seek right? The last i heard about those patches was that removing them didn't make anything better just changed the problems.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264384", "body": "If a url_fseek fails we should always bail out appropriatly. The point of those changes was to handle this cleanly instead of reading utter junk and breaking other things.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264455", "body": "As said, the last comment i read on trac on the issue, removing them only changed the issues to a different sort. It didn't really improve playback or seeking. So by removing the changes, we break other files with no apperent benefit.\n\nI would like to see a file where removing these changes fixes it, since that would show me what is wrong with the patches.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264494", "body": "Yea I think it was pretty much any asf on a nonseekable source (so you should be able to just always return -1 on a seek to reproduce). Was a damn long time ago now thou, so i'm not 100% sure anymore.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269251", "body": "Nice but how about checking every time samplerate changes? Samplerate could change any time mid stream. Would be nice if we detected that and retried passthrough / exited passthrough.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269300", "body": "Why wouldn't we detect it? Doesn't the ffmpeg passthrough codec parse the incomming stream. It aught to be able to detect the change. I could be wrong thou. Was just a thought.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270567", "body": "This disabled filesystem buffering. Making smb:// slow for blueray. Secondly there is nothing in libblueray which respects File::GetChunkSize(). Which is a must if you set that flag.\n\nWhy did you change that? Maybe I need to improve the docs on that flag.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270576", "body": "hehe, that explains it :)\n\nI wonder what i was thinking.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270595", "body": "Actually udf25.cpp is wrong aswell. It makes no guarantees on how it reads from the filesystem. So that would break on anything not able to read less than DVD_VIDEO_LB_LEN.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270597", "body": "UDFFile.cpp performance could however be improved by returning DVD_VIDEO_LB_LEN for CFile::GetChunkSize(). Since that re-reads sectors if you read less than that block size.\n\nWill try to look at it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/270597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278033", "body": "I really think we should do the same as with CFLAGS here. Ie only pass along what is set by user at configure time like we do for LDFLAGS. Passing along the LDFLAGS we need for xbmc itself seem totally wrong.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278043", "body": "I hope there somebody that gave the go ahead on this. I find it it uggly + it mixes fixes in the commit (the init fixes in in constructors for some variables). \n\nAlso it's quite incomplete as it only fixes g_Windowing and log. (there is a bunch of other globals that should be taken into account).\n\nAnd the comment on \"This is a hack\" in a bunch of header files seem weird too. I really would have likes some more discussion on this before it got pushed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278045", "body": "Okey.. but in that case it's a user error to set symbolic-functions in LDFLAG so why do we need to sed it out?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278075", "body": "From what I can read on that flag. It makes no sence for a user to set that on build time, but it would make sence for us todo, so to avoid function definition clashes between libs.\n\nTo me user set CFLAGS/LDFLAGS for xbmc get's silly since we are such a large collection of libs that setting CFLAGS/LDFLAGS it bound to break one or more of our included libs.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278269", "body": "When i meant unrelated changes i meant stuff like:\n     CWinSystemWin32GL::CWinSystemWin32GL()\n     {\n    +  m_hglrc = NULL;\n       m_wglSwapIntervalEXT = NULL;\n     }\n\nAnd yes it was discussed on the pull request between you and me. Not much by anybody else. I just wanted a comment on it by spiff, jonathan, davilla, bob, atk... pretty much anybody which have worked on the codebase for quite some time. \n\nThe \"hack\" comment is only offensive since we are going to need to repeat it in many files. Ie the identical comment about it being a hack repeated many times over. If it's such a hack we shouldn't have it in so many places in the first place. If we accept it as less than ideal but functional there is no point in the comment about it being a hack.\n\nAnd no i see little point in rolling it back. Git is annoying in that way that there is no clean rollbacks anyway. I do want you to drop the \"hack\" comment on it, and perhaps add a helper define to create the somewhat long and unredable:\n\n```\n+static xbmcutil::Referenced::ref<CWinSystemWin32DX> g_WindowingRef(xbmcutil::Singleton<CWinSystemWin32DX>::getInstance);\n```\n\nIe something like:\n    DEFINE_REF(CWinSystemWin32DX, g_WindowingRef)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300122", "body": "Seems reasonable. But could you atleast hook it up to the old system ie CThread::SetName() so that visual studio knowns about the the thread name directly. Also a good idea would be to set m_ThreadName to a value of typeof(this).name() which should hopefully return the inheriting class automatically for all threads.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300123", "body": "actually need to be typeof(*this)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/300123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317447", "body": "Why would you want output unless you are going to debug anything.To me it makes more sence to only show progress. 99% of the time you are not debugging the build system.\n\nThe var is the same var as used by ffmpeg and the normal autotools., thus doing make V=1 will unsilence ffmpeg aswell.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/317447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336993", "body": "They also use it for getting the path to the addon. Adding subfolder like resources/lib to the module search path. For me it would make sense for the addon directory to be current directory, but we can't do that.\n\n@cptspiff I suppose i can live with it's removal after all repo addons are fixed. But I really dislike that addons need to updated so much between releases. I really think we should be backward compatible as much as possible. Take for example AMT, which is not in our repo but is a damn major addon. It breaks without the getcwd() hack/fix.\n\nSecondly, our current working directory for the python scripts are in a totally silly place. Root folder for the xbmc.exe binary. Imho they should be sandboxed to some extent to avoid atleast some addon bug from wiping your whole system.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337276", "body": "AMT does the same thing as Next TV Show Aired\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337290", "body": "Since nobody seem to care that we break working addons from Dharma.....\n\nThen i think we atleast should make getcwd() fail the same fashion i made chdir() fail. That way we don't get weird subtile errors from addons using getcwd(). Imho they have no business doing getcwd() or chdir(). I spent at least half an hour just to figure out why the script failed after the getcwd() change since it failed on import errors.\n\nXbmc python addons will never be the same as running a python script from system.\n\nRegarding relative file access. Imho the only thing that could make sence would be to have that point to either addon dir or better yet plain fail (needs those system calls overloaded thou).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/348893", "body": "I like the commit message about this...... your never can't be the same as my never :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/348893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353947", "body": "Thx for the build fix. Sadly it needs some more adjustments. Will try to fix it tomorrow unless someone beets me too it. IoControl function needs to be added to CFileSMB where the IOCTRL check should be made. \n\nSorry i missed the linux side.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/358933", "body": "ouch.. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/358933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/359226", "body": "*blushes* it was like that from the beginning....\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/359226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370035", "body": "Cause we are browsing files and stacking is disabled by default (single files don't get combined). Why should we then \"stack\" directories? If we want to browse movies we go to the normal library mode. We are now browsing files, we shouldn't be doing a bunch of weird stuff.\n\nIt get utterly weird when something has been wrongly tagged in db when it renames stuff and flattens the folder structure. If we want that we should re-add the stacking option button and do complete stacking in file mode (probably a good idea at least for debugging stacking of files).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370040", "body": "Regarding the fanart.. Reason is that without replacing the path, the fanart didn't get loaded for the folder. Due to some things in GetCachedFanart(). The IsVideoDb() check. But even with that removed it will still grab fanart string for the folder and not the file, which is where the fanart has been stored against.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370313", "body": "Right, but it should only flatten when stacking is enabled in that case. Then it's expected to do odd things with the file items. If stacking is not enabled, you want to browse the structure as it is to for example find a sample file in a movie directory. You don't want it to start the movie by pressing the folder in that case.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/370313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/373785", "body": "The direction is we have files view and we have library view. If we want to import unkown movies into library that is a different notion. This is when we browse our file structure to find files which may or may not have failed to import. When we do that we want to see directory names and file names not have them get renamed to whatever the library says.\n\nAnother situation is that you have a movie on your disk with a swedish folder name (M\u00e4n som hatar kvinnor) with a imbo lookup on that, The movie name ends up \"The Girls With the Dragon Tatto\". If i didn't know that was the english name of that movie, i would never find my folder.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/373785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/374613", "body": "I fully agree that all items should be in library.. But that doesn't change the fact that I want an ability to browse outside of library for video files to like i mentioned before find samples in a folder scanned into library. I know my folder structure I know where the file is, i shouldn't have to switch over to our somewhat defunct filemanager to get to the file.\n\nWhen in library mode, things are different i don't care what is done to names of folders and files. I know i'm in a library of what i have. In that regard jmarshall's option 2 is what current file mode does. It set's metadata and set's title to imdb lookup values, but the browsed labels still show the actual folder/filename.\n\nSo please don't break the filemode browsing just because we want to get all files into library.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/374613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/377762", "body": "That's odd.. why would that be needed?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/377762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/377765", "body": "Ah.. got ya\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/377765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378614", "body": "It should already have been solved in trunk\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384932", "body": "What is wrong with the library view? Why isn't that good enough for browsing your movie library?\n\n\"After this change it's pretty much only files node moved to library node with little bit of metadata added when browsing in it\"\nYes, that is how at least I want it since the file mode has been removed. I would have been fine with this new mode been added if the normal file based one was not removed.\n\nHowever, there is an easy solution here now. We just need to add a sort mode which uses library data to set labels.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385107", "body": "The two issues you mention at the bottom there should probably be solved. Ie we should display mediaflags on the folders. Are you sure that is not the case when you have stacking turned on?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/385107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/387204", "body": "It's optional now pretty much. We just need a sort view that set's labels from metadata instead of filenames. An alternative option would be to have the stacking button modify label information. So that with stacking off we display file names with stacking on we display metadata.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/387204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/391950", "body": "While i sort of agree, there are many more such values in the code above. And i suspect it would just make the code less readable. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/391950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/427605", "body": "looks good\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/427605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/429147", "body": "it can't be defined in the header file thou.. that would make multiple copies of that variable in all files including the header.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/429147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ohara": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743308", "body": "I guess I didn't explain the idea correctly.\nThe idea is of a randomizer, that is triggered when playlist playback ends (either by finish or skip) adding one random item (episode) to the current playlist. therefore the playlist never really reaches its end.\nthe \"channel\" is just the current settings of that randomizer.\n\nas long as the randomizer flag is up (a global variable that marks the current channel), even if a new playlist is set manually, coming playbacks end, a new item is randomly added. (the stop button lowers that flag).\n\nthe randomizer options are mentioned in my first post.\nWith it, here are some examples of \"channels\":\n- random a show, and grab it's next unwatched item.\n- random a comedy show, grabbing an already watched item by show progress. (aka reruns).\n- random a specific animation shows, grabbing a watched or unwatched random item (no order).\n\n<b>althekiller:</b> some of the querying can be done by smartplaylists (like the third example). but it's not the same.\n\n<b>jmarshallnz:</b> thanks, I fixed the special-episodes issue.\n          order by\n          case when c12>0 then      cast(c12 as integer) \\* 100 + cast(c13 as integer) \n          else case when c16<>4096 then  cast(c15 as integer) \\* 100 + cast(c16 as integer)\n                   else              (cast(c15 as integer) + 1) \\* 100 - 1 + (cast (c13 as real) / 1000)\n                   end\n          end  \n          limit 1\n\n<b>Montellese:</b> Pseudo TV is different. it actually takes smartplaylists and calculates its items length to simulate playing all the playlists simultaneously.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/743308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762263", "body": "jmarshallnz, you are right not to like the idea of an external editor. it was created only for my personal use and demonstration. I started out saying \"this is not a complete work\".\n\nI started this project because my girlfriend is lazy. she needs her TV content to be decided for her like in real TV broadcast.\nShe will just not play around with XBMC's library.\nI believe XBMC users are interactive users.\nEven with the biggest auto updating Movie/TV library in the world, I would not replace the normal old-fashioned TV broadcast with it for my mom. Most TV viewers are lazy (or passive) like that, and I believe that with this kind of feature (no matter how implemented) you could reach more people (at least those who have one active user in the house for getting the content).\nthose who I know and showed them this feature like it a lot.\n\nI think creating \"channels\" should be with a much easier editor than of the smartplaylist.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/762263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jimfcarroll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773624", "body": "You lost me. This prevents the use of de-initalized variables during destruction and forces the order of destruction to be natural according to use. As evidence that this certainly solves SOMETHING, several of the CRITSEC errors, which occur when someone uses a CCriticalSection after it's been destructed, have been eliminated, precisely because of this. How many other places does the use of an uninitialized object happen that we don't know about because we don't have code that checks? Also those CCriticalSections are not leaked as a result.\n\nI think you missed the point of reference counting by compilation unit. It is true that a particular compilation unit could have been uninitialized, and therefore have decremented it's reference count, but still have code that ends up executing and referencing the 'global.' That works fine. The reference counting simply determines the point in time when NO ONE needs the object anymore - and therefore it can be deleted. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773642", "body": "As a quick additional note, I had a conversation with davilla about simply allowing the globals to leak - then we wouldn't have any issues during destruction. This is not an option on platforms where the xbmc app itself is run essentially as a \"plugin.\" Hence the need to get the reference counting right.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/773642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781589", "body": "Looking at the code, I don't understand how my changes are related to that missing reference (not that they aren't). My Makefile.in change simply moved all of the static libraries to --whole-archive, and this is more flexible, not less. Looking at your fork the Makefile.in is the same as prior to my changes.\n\n<pre><code>xbmc.bin: $(OBJSXBMC) $(DYNOBJSXBMC)\nifeq ($(findstring osx,@ARCH@), osx)\n    $(CXX) $(LDFLAGS) -o xbmc.bin -Wl,-all_load,-ObjC $(DYNOBJSXBMC) $(OBJSXBMC) $(LIBS) -rdynamic\nelse\n    $(CXX) $(CXXFLAGS) $(LDFLAGS) -o xbmc.bin -Wl,--whole-archive $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--no-whole-archive $(LIBS) -rdynamic\nendif</code></pre>\n\n\nLooking at the code, the pertinent section of the ldt_keeper.c file is the same in both (besides the fact that there's not a single reference to a global in the .c file).\n\nAlso, this builds under OS X which seems to have the same block of code included and used in ldt_keeper.c. \n\nDo you know where that symbol is supposed to be resolved to?\nIs that library on the link line?\nIf so, does it appear after dllloader.a (I believe it would need to unless it's in the --whole-archive section of the link - stupid single pass linker:) )?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/785344", "body": "Fneufneu, <strike>I added a branch with a FreeBSD fix for you to test.</strike> It should build now. If it does it _should_ address your crash-on-exit issue. Let me know. There's another possibility for the crash on exit problem in the CLinuxRenderer - which is one of the many globals I didn't get to yet. If it still crashes, let me know and I'll do that one next.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/785344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/785585", "body": "FneuFneu reports that this is fixed, and SO FAR, has alleviated the crash-on-exit issue he was experiencing.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/785585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795830", "body": "Yeah - can't think why that wouldn't work. Think I should change it?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/795830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/797102", "body": "I'm not sure why this didn't auto-close when I pushed the change to the main repo. I closed it by hand.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/797102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818561", "body": "Nope. Just got rid of the custom reference counting, which I only wrote because I thought we were moving away from boost. Now the consensus seems to be that we're moving more towards it. I had this sitting out there for a while and so I guess I wanted someone to make a final decision.  :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/818561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/825891", "body": "AlTheKiller, This isn't using SingleExit; bobo1on1 just borrowed the name because the Py_BEGIN_ALLOW_THREAD/Py_END_ALLOW_THREAD acts kinda-like that class was intended. The issue with recursion is specific to the way Py_SaveThread works and doesn't have anything to do with a recursive mutex. I'm in the process of fixing the Tls functionality which is 1/2 broken on Unix/Linux and totally broken on OSX. I'd prefer your future replacement (given you're working on a boost solution in a thin wrapper) if you're close to ready. Let me know.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/825891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/826061", "body": "Something went wrong ... this was supposed to be a single commit.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/826061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/827067", "body": "Correct. They are currently not used anywhere (except in my SWIG branch) but bobo1on1 is looking for Tls functionality and until there's a replacement, I figured I'd fix this.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/827067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/827095", "body": "They potentially recurse because of callbacks - which depend on the script developer. Certainly a recursion check is unnecessary in cases where what's being done while the threads are released is minimal. Depending on the script however, it's easy to find a stack trace that shows an instance of going in and out of python multiple times. I can guarantee problems if, for example, you use the Py_BEGIN_ALLOW_THREAD/Py_END_ALLOW_THREAD in every python api call.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/827095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/827135", "body": "If we don't need it then it should be removed from the codebase to prevent it from being used.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/827135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/829813", "body": "Davilla. Looks like it picked up about 6 commits of yours and then I needed to resolve conflicts. Please make sure it looks ok to you.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/829813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/831111", "body": "I see 6: 1) f859993 (fixed, force autoreconf for libmodplug, libmicrohttpd), 2) dd69ac6 (fixed, simplify DllPaths_generated), 3) 97fd4fd (fixed, add missing ;), 4) 059671b ([osx] changed, use our download loc), 5) d8d8067 ([osx] update xcode project, still using lib/darwin/libSDL-OSX static,...) and 6) 2c2b2aa ([osx] fix app packaging errors, something is still wacky)\n\nThen my merge - 61686c0 (Merge and confict fix with davilla's latest osx-new-buildsys).\n\nThe xcode project didn't have any conflicts so I'm assuming it's exactly what was in your repo.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/831111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/834004", "body": "I'm going to need this for my swig work. I'll merge it into that branch but I hope to replace it with something new by the time that's ready.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/834004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/835594", "body": "Davilla would like the efforts to change the osx build system and the normalization of external python separated. This request is being closed and will be resubmitted as two separate requests. First, Davilla's osx build system change. Once accepted that will be followed by the python normalization.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/835594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/835672", "body": "davilla and bobo1on1 both gave the ok for this. I'm going to merge it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/835672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/835838", "body": "closed by hand .... again\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/835838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837661", "body": "Is this going to address the current issue that myself and Montellese have had? That is, if you start from scratch on windows, the build dependency for dvdcss fails.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837668", "body": "Am I waiting for more people to Ok this? I can go ahead and merge it whenever I have the requisite approval - I'm just not sure how many more 'oks' I need.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837669", "body": "Not that it matters but ... it looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/837669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/860257", "body": "As a result of removing the wrappers, the following things need to be kept in mind while writing scripts. Doing any of the following will make scripts incompatible with this change:\n\n1) Assuming the cwd is the root directory of the script.\n2) Assuming any os python module functionality (file or directory create/delete/access/read/write/stat/etc) that takes a path can have a 'special://' in it.\n3) Assuming python extention libs will automatically be loaded from the 'special://' path\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/860257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/883029", "body": "I think ideally you should exit the bottom of main rather than call exit from anywhere (and exit all non-daemon threads). In this case you would at least need to send a message rather than call 'exit' causing Application::Run to exit and check for a \"shutdown\" condition in 'main' rather than loop 'while (1)'\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/883029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/883192", "body": "You could but you might be opening a can of worms. How many threads are non-daemon threads? How many non-daemon threads do we have control over (that is, how many were spawned in libraries)? How many daemon threads SHOULD BE non-daemon threads with special shutdown handling? If you did this then I wouldn't be too surprised if it hangs on exit until we get all of those type of issues worked out ... but maybe not. Give it a try :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/883192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/907127", "body": "This is pretty much ready to go. I'm looking for a few senior team member thumbs up and I'll squash a bunch of the commits and push it. Keep in mind this change has script compatibility ramifications.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/907127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/907163", "body": "Also, I propose removing internal python completely. External-python is already the default on OSX and will be on Windows once this change goes in; internal python can't even be built there without significant modification to the respective build systems. So the default for the Linux build is currently incompatible with the other platforms.\n\nAnd besides, we can delete a lot of code from the repository. :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/907163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/278205", "body": "There was a lot of discussion (you were part of it) on the pull request; and I made sure I had the go-ahead from TheUni.\n\nYes - like the description of the commit notes, and as I said frequently previously, there's a lot more to do. I wanted to do some of the places that were causing CRITSEC errors first and see how it sat with everyone before moving on to the rest - simply because I find it ugly also.\n\nBut I find it MUCH better than crossing your fingers with known instabilities in the code that randomly (platform dependently) execute against uninitialized data. Or would you prefer _that_? I could roll it back.\n\nAND it's better than the 1000 or so additional places in the code that would need to be changed in order for this to work without the #define (or the #define alternative I'm going to use in several cases - see below and GraphicsContext.h above).\n\nAlso, as described previously in the chain of conversation that took place against the pull request, the init changes were an integral part of this change, and not 'something else.'\n\nI have several fixes for this ready to go (not everything already done was right) - if you find the comment offensive (though you clearly think it's true) I'll change it as part of that. Plus, I was going to make it less ugly by removing the #define in many places and replace it with the form used in the graphicsContext (see above).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278212", "body": "For reference: https://github.com/xbmc/xbmc/pull/35\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278276", "body": "That change was not unrelated; it's only required because of moving the instantiation of CWinSystem32GL from the BSS segment to the heap. Hence the reason it's part of this commit; it's integral to it; use of the CWinSystem32GL as a global without the initialization fix will lead to erratic behavior, or if we're lucky, a crash.\n\nI'll modify the comment.\n\nI can add the macro but I tend to think it's less clear what's going on. But I don't feel strongly enough about it to argue.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/278276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336216", "body": "So, just to be clear, we're going to add back support for the poor coding practices of script writer by introducing an inconsistency into the way the core python works at precisely the time we're trying to move to stock python behavior and when a new repository for the scripts needs to be ported to anyway?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336425", "body": "jmarshall. Thanks. The os.getcwd is no longer needed for obtaining the addon id. I have a pull request ready that handles that automatically in the Addon constructor. If the pull request is accepted you will be able to instantiate an Addon without any parameters and the default behavior will be to use the Addon::ID() of where the script is running.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336599", "body": "elupus, here is an alternative that I think satisfies everyone: https://github.com/xbmc/xbmc/pull/99\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/336599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337044", "body": "AMT works with the code from the pull-request. \n\nAmet noted that there are only about 4-5 scripts that use os.getcwd for reasons other than setting the Addon id. That's pretty low hanging fruit. Like I said, I'll fix them myself.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337048", "body": "Actually, AMT Lite works. I don't have AMT.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/337048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366689", "body": "jmarshall, This seems to have broken something. I'm getting windowxml failures when the resource/skin/default is used and the only workaround seems to be to link it to a resource/skin/skin.confluence so that the WindowXML constructor works. Currently line 99 of interfaces/python/xbmcmodule/winxml.cpp calls the above method which returns at line 107.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366702", "body": "See inline comment on Skin.cpp change.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/366702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Fneufneu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/775914", "body": "build on linux (reported by TheUni)\nbuild and run on osx (reported by davilla)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/775914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/777385", "body": "in my TODO:\n- optical drive support\n- CLinuxTimezone::GetOSConfiguredTimezone support (it will work on osx to)\n- lirc support: inotify prob, lirc will be updated soon on freebsd\n- port libbluray on freebsd: someone is already working on it because recent mplayer need it\n- ppc and arm support\n- crosscompiling\n- clang support\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/777385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781343", "body": "it broke the build on FreeBSD: final linking failed:\n\n<pre>\ng++ -fPIC -DPIC -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -g -D_DEBUG -Wall -O2 -I/usr/local/include -fPIC -DPIC -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -g -D_DEBUG -Wall -O2 -I/usr/local/include -L/usr/local/lib -L/usr/local/lib -o xbmc.bin -Wl,--whole-archive lib/cmyth/libcmyth/libcmyth.a lib/cmyth/librefmem/librefmem.a xbmc/linux/linux.a xbmc/network/network.a xbmc/video/windows/videowindows.a xbmc/utils/utils.a xbmc/cores/DllLoader/exports/util/exports_utils.a xbmc/cores/DllLoader/exports/exports.a xbmc/settings/settings.a xbmc/video/video.a xbmc/guilib/guilib.a  xbmc/xbmc.a xbmc/addons/addons.a xbmc/cores/playercorefactory/playercorefactory.a xbmc/cores/dvdplayer/DVDPlayer.a xbmc/cores/paplayer/paplayer.a xbmc/cores/VideoRenderers/VideoRenderer.a xbmc/cores/VideoRenderers/VideoShaders/VideoShaders.a lib/tinyXML/tinyxml.a xbmc/cores/cores.a xbmc/interfaces/python/python.a xbmc/cores/DllLoader/dllloader.a xbmc/cores/dvdplayer/DVDCodecs/DVDCodecs.a xbmc/cores/dvdplayer/DVDCodecs/Audio/Audio.a xbmc/cores/dvdplayer/DVDCodecs/Overlay/Overlay.a xbmc/cores/dvdplayer/DVDCodecs/Video/Video.a xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxers.a xbmc/cores/dvdplayer/DVDInputStreams/DVDInputStreams.a xbmc/cores/dvdplayer/DVDSubtitles/DVDSubtitles.a xbmc/cores/AudioRenderers/audiorenderers.a xbmc/cores/ExternalPlayer/ExternalPlayer.a xbmc/filesystem/filesystem.a xbmc/filesystem/MusicDatabaseDirectory/musicdatabasedirectory.a xbmc/filesystem/VideoDatabaseDirectory/videodatabasedirectory.a xbmc/input/input.a xbmc/dialogs/dialogs.a xbmc/music/karaoke/karaoke.a xbmc/music/music.a xbmc/music/dialogs/musicdialogs.a xbmc/music/infoscanner/musicscanner.a xbmc/music/tags/musictags.a xbmc/music/windows/musicwindows.a xbmc/video/dialogs/videodialogs.a xbmc/pictures/pictures.a xbmc/playlists/playlists.a xbmc/programs/programs.a xbmc/powermanagement/powermanagement.a xbmc/storage/storage.a xbmc/threads/threads.a xbmc/windows/windows.a xbmc/interfaces/python/xbmcmodule/xbmcmodule.a xbmc/network/libscrobbler/scrobbler.a lib/libRTV/librtv-x86_64-freebsd.a lib/libUPnP/libupnp-x86_64-freebsd.a lib/libXDAAP/libxdaap-x86_64-freebsd.a xbmc/interfaces/interfaces.a xbmc/cdrip/cdrip.a xbmc/interfaces/json-rpc/json-rpc.a lib/jsoncpp/src/lib_json/libjsoncpp.a xbmc/interfaces/http-api/http-api.a xbmc/dbwrappers/dbwrappers.a lib/libsquish/libsquish-x86_64-freebsd.a lib/libapetag/.libs/libapetag.a lib/xbmc-dll-symbols/dll-symbols.a xbmc/rendering/rendering.a xbmc/windowing/windowing.a  xbmc/rendering/gl/rendering_gl.a lib/libXBMS/libxbms-x86_64-freebsd.a lib/UnrarXLib/UnrarXLib.a lib/libhts/libhts.a xbmc/threads/posix/threads_posix.a xbmc/network/linux/network_linux.a xbmc/powermanagement/linux/powermanagement_linux.a xbmc/storage/linux/storage_linux.a xbmc/windowing/X11/windowing_X11.a -Wl,--no-whole-archive -lavcodec -lXrandr -lavahi-client -lavahi-common -lSDL_image -lrt -ltiff -ljasper -lSDL_mixer -lsmbclient -lfaad -lmysqlclient -lmodplug -lmpeg2convert -lmpeg2 -lwavpack -lcrypto -lssl -lz -llzo2 -pthread -ljpeg -lbz2 -lGLU -lGLEW -lGL  -L/usr/local/lib -lmad -lm   -L/usr/local/lib -lfribidi   -L/usr/local/lib -lsqlite3   -L/usr/local/lib -lpng -lz -lm   -L/usr/local/lib -lpcre   -L/usr/local/lib -lpcre -lpcrecpp   -L/usr/local/lib -lcdio -lm -lcam   -L/usr/local/lib -lsamplerate   -L/usr/local/lib -lfreetype   -L/usr/local/lib -logg   -L/usr/local/lib -lvorbis -lm -logg   -L/usr/local/lib -lvorbisenc -lvorbis -lm -logg   -L/usr/local/lib/mysql -lmysqlclient -lz -lcrypt -lm -L/usr/local/lib -lasound   -L/usr/local/lib -lenca -lm   -L/usr/local/lib -lXt -lX11 -lSM -lICE   -L/usr/local/lib -lXtst   -L/usr/local/lib -lXext   -L/usr/local/lib -lXmu -lXt -lX11 -lSM -lICE   -pthread -L/usr/local/lib -ldbus-1   -Wl,-rpath,/usr/local/lib -pthread -L/usr/local/lib -lSDL   -pthread -L/usr/local/lib -lhal -ldbus-1   -pthread -L/usr/local/lib -lhal-storage -lhal -ldbus-1   -L/usr/local/lib -lavcodec -lavformat -lavutil -lpostproc -lswscale   -rdynamic\nxbmc/cores/DllLoader/dllloader.a(ldt_keeper.o)(.text+0x1a0): In function `Setup_LDT_Keeper':\n/usr/home/fneufneu/xbmc/xbmc/cores/DllLoader/ldt_keeper.c:244: undefined reference to `i386_set_ldt'\ngmake: *** [xbmc.bin] Error 1\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/781343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/860466", "body": "ok, so i need to confirm that bug exist on FreeBSD (and / or osx ?) to\nbtw it's hard to have suspend working fine on FreeBSD.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/860466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880283", "body": "quid of clang support ?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/880283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540", "body": "oops sorry,\ni think we can define MAKE=make in top of case $host part\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/256540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/284929", "body": "<pre>are you sure about that ?\nbufpt will point to a static const char \"Inf\" allocated at compile time,\nit's ok because you pass it to mysqlStrAccumAppend as const char *.\nbut i think the proper way is to declare bufpt as const char *.\nalso i don't like the allocation of char * to 0, why not use NULL ?\n</pre>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/284929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405363", "body": "i just want to warn you about PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP portability.\nit does not exist on FreeBSD.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405933", "body": "hum:\nERROR: Error attempting to update the database version!\nERROR: Can't update the database MyVideos52.db from version 51 to 52\nERROR: SQL: SQL error or missing database Query: ALTER table movie add c23 text\nERROR: SQL: The database disk image is malformed Query: PRAGMA cache_size=4096\n\nbut after that, all seams to run fine and realy fast\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/422698", "body": "sorry for that\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/422698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/429272", "body": "hum i think there is a mistake here\ni486 linux is not _POWERPC arch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/429272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "beenje": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/788272", "body": "I built on ppc-osx (with --enable-liba52) and it looks fine.\n/beenje\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/788272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/798610", "body": "Still OK for osx-ppc\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/798610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "llyzs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/788356", "body": "Yes it basically needs name,address,type and status. Address is indeed optional. I'm not quite sure how to add this UI without adding a new dialog, but it works for me though. Let me know if you have a better idea.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/788356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/855130", "body": "I took a look at Settings->System, but looks like all the things in it is static options: text boxes, check boxes, drop downs, etc. The Bluetooth GUI is basically a list of devices, which will be automatically added, removed or updated based on DBus messages.\n\nI think the current window that is closest to the bluetooth setting GUI is Settings->Addon Browser. I can work on that direction if you think that's ok, however although it's simpler it's still a new window.\n\nAny other thoughts?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/855130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "queeup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/789788", "body": "I am so sorry to involve this but what about translations? There is some corrections on strings I think.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/789788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/811136", "body": "theuni: Better idea. You have lots of job to do just give translaters 1 day for checking their strings after Dharma 10.1 tag and we will send you pull request if it's needed.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/811136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/833404", "body": "What about this one?\nhttps://github.com/xbmc/xbmc/commit/160836caa886329aaf4b5e3b7e815161c8ac30e2\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/833404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527", "body": "To bad for Turkish users. It supposed to scan for folder names but I made a mistake and translate scan for file names :( But now corrected.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530", "body": "Are you planning to release new Dharma for bugs fix or something? I correct my big mistake on string.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/234530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/267606", "body": "Please don't forget to update pydoc for new added listitems or etc. Later its gona be pain :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/267606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/268387", "body": "Thank you.. I will tell you if I found it.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/268387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269024", "body": "What do you think about using \"Play count\" on this string? I am not English native speaker tho :) but this is not feel right to me.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "magnimus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/805663", "body": "thanks elupus.\n\nI made few changes according to your comments.\nplease review.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/805663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/808951", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/808951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "amet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/817012", "body": "it builds/runs on OSX\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/817012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839173", "body": "\"09:55:32 T:2690794816 M:1329168384  NOTICE: Starting XBMC, Platform: Mac OS X (10.6.0 i386). Built on Mar  6 2011 (Git:20110305-b58d845)\" \n\nit works fine on osx :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/839173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/862018", "body": "/Users/Shared/xbmc-depends/tarballs does not need root access and is next to ios-4.2_arm7 and  osx-10.4_i386, also TARBALL_LOCATION is outside the tree and git clean -xdf has no effect on it\n\nswitch from append to ignore is cos the tarball doesn't need to be added to .gitignore any more as its outside the git tree\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/862018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/875408", "body": "@wsoltys\n\nk, fixed.. squished it together.\n\nThanks, missed #ifndef, somehow read it as #ifdef :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/875408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/312284", "body": "ah, all credit to jmarshall... I just commited it :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/312284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346957", "body": "just for you :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/348935", "body": "I just c/p spiffs comment from IRC :)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/348935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384874", "body": "All #if defined are the same, the only difference would be the isAppleTV2() which shouldn't return true on win32 anyway\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384890", "body": "K, I get it now :(\n\nWill fix tonight , sorry \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/384890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "gnif": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850324", "body": "For the sake of keeping things sane for AE, any PCM data in the interface should be float, even if for now there is a hard coded conversion to S16 for master.\n\nRe JM, number of frames would be best, along with a function to retrieve the channel layout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850340", "body": "@gmarshallnz: sure, thats fine then, as long as it doesnt get hard coded to S16 like the rest of the code.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/850340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/264498", "body": "This did not fix the issue I reported with WMA HD seek crash on the following file\nhttp://download.microsoft.com/download/0/9/d/09d051c4-decc-4d39-9c57-f520187213a1/Amazing_Caves_720.exe\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dteirney": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865510", "body": "What's next with this pull request. Do I need to push this in from my repository, or can this be accepted magically somehow?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/865510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/405492", "body": "Is there a recursive mutex on those platforms that can be used?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405494", "body": "Can someone with FreeBSD / OSX check if PTHREAD_RECURSIVE_MUTEX_INITIALIZER exists. If so either I can change tonight after work or could you change directly. Presumable the _NP means non-portable?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405511", "body": "Thanks Davilla. There seems to be a spelling mistake in the first if def section in XBMC_mutex.cpp. XBCM_PTHREAD_MUTEX_RECURSIVE != XBMC_PTHREAD_MUTEX_RECURSIVE\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mmrvka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/900733", "body": "no, unfortunately it doesn't.\n\nhttps://github.com/xbmc/xbmc/commit/89bdffb7a405db2a6fa96a7e35cdeea5f631cd56\n\nis for smart playlists which are media type independent. my really small fix is special for the video database.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/900733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "HarryMuscle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/905979", "body": "I've made some changes ... closing this request and will open a new one.\n\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/905979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/907618", "body": "I fixed the IsDiscStub function like you suggested.  I left the -1 since that's what the Find function actually returns.\n\nAs for getting rid of the DialogPlayEjectCancel dialog, I tried to see if that's possible by inheriting from the DialogYesNo dialog (I need to inherit since I need to override certain dialog behaviors in the OnMessage, OnAction, and OnInit functions).  Unfortunately if I inherit from DialogYesNo I also inherit the ID (since that's tied to the actual IDs used in the XML file that define the Yes No dialog) and when adding the new inherited dialog I end up with errors about duplicate dialogs with the same ID.\n\nSo it seems that in order to get rid of the DialogPlayEjectCancel dialog I would need to do an overhaul of how the dialog system works to allow multiple dialogs with the same ID.  I'm assuming you will agree that it's better to just leave the DialogPlayEjectCancel dialog.\n\nAs for the comment about osx support, are you referring to OSX build changes (ie: changes to the Xcode project files)?\n\nThanks,\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/907618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/910172", "body": "The reason for the inheritance is because of the Eject button.  I need to eject the tray without closing the dialog.  Otherwise if I just call the ShowAndGetInput function on the CGUIDialogYesNo class, when the user clicks the Eject/Load button, the dialog would close, then I would eject the tray and then I would have to open the dialog again, then the user would click the Eject/Load button again (to close the tray with the disc) and the dialog would close and I would close the tray and then I would have to open the dialog again, so the user can click the Play button.  That would cause lots of flickering and just doesn't seem like a good approach.  It makes so much more sense to deal with things when the user clicks the Eject/Load button without closing the actual dialog and to do that, I need to either inherit from CGUIDialogYesNo (and override the OnMessage function) or create a whole new dialog class.  And since inheriting from CGUIDialogYesNo creates the problem of duplicate IDs, the only choice left is to stick with the new CGUIDialogPlayEjectCancel class.  Also while I'm making a whole new class, I added things like only enabling the Play button when a disc is actually present, etc.\n\nHope that clarifies things as to what my reasoning is.\n\nThanks\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/910172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/912904", "body": "I thought the window ID is tied directly to the ID specified in the XML file.  I noticed all the window IDs are XML ID + 10000.  So I was under the assumption that the code simply minuses 10000 to get the correct ID as used in the XML file.  Then again, we specify the XML file used for the dialog, so maybe the XML ID is irrelevant?  If anyone could confirm that that would be great.  If the XML ID is indeed irrelevant (since we already specify the XML filename) then either one of your suggested options should be doable.  Otherwise I'd need to change the base dialog class to allow two separate IDs, one for the window and one for the XML ID.\n\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/912904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/913783", "body": "In that case I think your idea should work no problem.  I'll probably go with option 1, I'll just need to add a new constructor to the CGUIDialogYesNo class that allows me to specify the window ID.\n\nThanks,\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/913783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/915186", "body": "I've done the changes to implement option 1 that you suggested.  I think it's actually quite a good solution.  Let me know what you think.\n\nThanks,\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/915186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/915400", "body": "EDIT: I think the next comment has a better idea.\n\nI was thinking that that change does exactly that.  We're using the item.IsDiscStub() function as our third state.  Since if the PlayFile() function returns false and the file is a Disc Stub, then based on how the code is structured in the PlayFile() function, we know that the dialog was cancelled.  If the file is not a DiscStub, then it's business like normal (ie: failed playback).\n\nOne item to note, if the PlayEject dialog actually starts to play a DVD, there is a separate PlayFile() function call made outside of the one that we are currently dealing with.  In other words, if the file is indeed a Disc Stub, PlayFile() will return true only if the Play button was pressed (which results in a separate call to the PlayFile() function once the DVD auto play stuff kicks in) and it will only return false if the PlayEject dialog was cancelled (if the file is a Disc Stub).\n\nWe could however possibly move the check of IsDiscStub() a few lines higher to the same if statement that actually calls the PlayFile() function, so it would look like:  if (!g_application.PlayFile(_item, bAutoPlay) && !(_item).IsDiscStub()) .  That way a cancelled PlayEject dialog would result in that whole section that deals with failed playback being skipped.  Would that be be a better solution?\n\nThanks,\nHarry\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/issues/comments/915400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "taxigps": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640", "body": "Ah, forget to set user.name in my new installed git\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/233640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/382043", "body": "Agree with elupus. File mode is better to reflet the real file and folder structure. Change file mode like another library mode is not a good idea.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/382043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "chadoe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855", "body": "hm they had a home, they were matching the reshuffle filesystem layout...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/250855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001", "body": "just would like to find files in the project in the same place as on disk now that files have been moved around on disk thats all.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/251001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/427329", "body": "NOMINMAX was already in XBMC.vcxproj PreprocessorDefinitions, in UnrarXLib.vcxproj it wasn't yet so that one is fine.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/427329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sitzm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529", "body": "with your changes, linux does not compile anymore with the follwing error:\nIn file included from karaokelyrics.cpp:26:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:137: error: \u2018int64_t\u2019 does not name a type\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h: In function \u2018void MathUtils::hack()\u2019:\n/home/c18103/src/test/xbmc-11.00~git20110202.6bfc8b0/xbmc/utils/MathUtils.h:149: error: \u2018abs\u2019 is not a member of \u2018MathUtils\u2019\nmake[2]: **\\* [karaokelyrics.o] Error 1\n\nThis can be fixed with including stdint.h in MathUtils.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/258529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "blinkseb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720", "body": "I was not aware of that, sorry! o\nI' ve built ffmpeg right before building xbmc that's why i've found the file here!\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/262720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264398", "body": "Maybe it would be better to use the /Out switch of vs2k10 to get the _full_ build log instead of xbmc one (http://msdn.microsoft.com/en-us/library/ahky453h%28VS.80%29.aspx)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264795", "body": "Hm, with /Out, the log might be outputted in real time, so I guess it should be possible to read it in real time too\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/264795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346940", "body": "Ahah, thanks a lot for that ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ssoria": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/269168", "body": "I've also seen it as \"Plays\"\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/269168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/359797", "body": "spiff doesn't like camels?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/359797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "diederich": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/329985", "body": "This looks like it might not work. Isn't this comparing the pointers instead of the the values?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/329985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/330367", "body": "/me points to vdrfan. He found the compiler warning ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/330367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624", "body": "Thanks for jumping in @Memphiz - and yes, sounds sane what memphiz says.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12790624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "HitcherUK": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/331171", "body": "Jonathan is this anything to do with the Mirror Image change?\n\nhttps://github.com/xbmc/xbmc/commit/007b3d1f91f8ae634a0d92fb4b6f5a93a87d620e\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/331171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/332000", "body": "Ok thought I'd better check in case.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/332000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346798", "body": "The general consensus is we'd like the option to increase the number of items as mentioned in this thread -\n\nhttp://forum.xbmc.org/showthread.php?t=99502\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353053", "body": "Jezz, what exactly is an 'edit' control?\n\nThe wiki has no info (http://wiki.xbmc.org/index.php?title=Edit_Control) and it's listed as a rarely control.\n\nAlso, is this a change to XBMC or just something for Confluence?\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388451", "body": "I'm glad you just added this because I tried to do the same thing for XeeBo but couldn't get it to work and now I know why - I was using Close + Fullscreen instead of Dialog.Close() + Fullscreen.\n\nCheers Jezz.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/399255", "body": "Another one I borrowed from Confluence for Alaska that I can use.\n\nThanks. ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/399255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400180", "body": "Well I guess they didn't realise it was meant to take you straight to the music playlists instead of a list of shares.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405046", "body": "I take it these values need adding to the wiki?\n\nCurrently it only lists - 0, 1, 2, 4, 5, 6, 8.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "weakfl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/332838", "body": "seems like there are some wrong paths in the ATV2 and IOS projects:\n$ grep -r -l \"../xbmc-git/xbmc/interfaces/json-rpc\" ./*\n./XBMC-ATV2.xcodeproj/project.pbxproj\n./XBMC-IOS.xcodeproj/project.pbxproj\n\nshouldn't that be \"xbmc/interfaces/json-rpc\"?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/332838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "shado23": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/346296", "body": "Good idea, but wouldn't it make more sense to keep the dolby digital logo instead, since that's probably more widely known, especially among non-technical people.\nThe dts flagging also says dts and not coherent acoustics...\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347029", "body": "Whoops, sorry didn't think to check for that.\nCarry on then. ;)\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/347029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "JezzX": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/346413", "body": "It does I changed the logo a few days ago\nhttps://github.com/xbmc/xbmc/blob/master/addons/skin.confluence/media/flagging/audio/ac3.png\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/346413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353071", "body": "NAh its been around for a long time probably since Camelot build just never addded to the wiki I guess. Basically its a button control thats been changed so the right label is editable text (like the keyboard) so you can type straight into it when focused.  If you click on it, it will still open the normal keyboard.  \n\nYou can see various places jmarshall has forced it in skins like in DialogMediaSource.xml the \"Source Name\" button is turned into one id=\"12\" automatically\n\nAnd Yes this is just for confluence anything I put [Confluence] in the commit message is just for this skin\n\nif you look in confluences defaults.xml you can see its pretty much just a button control with a different name\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/353071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388475", "body": "Your welcome :) the force close on the dialog is needed too because so the fullscreen command happens in the main windows and not the dialogs for some reason\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400077", "body": "heh can't be a real popular feature if no-one noticed it for years\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400137", "body": "well 2 years may be an exaggeration but its obviously been since we went to special:// paths and that was a while ago \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/400137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405055", "body": "I guess :\\  to be honest I have no idea I just noticed one day I had a 5 channel (4.1) count one that had no image so I just added all the possible combinations I got from here http://en.wikipedia.org/wiki/Surround_sound#Standard_speaker_channels I have no idea if we support them or not but I figured the channel count would output it if the video had it. so best to just play it safe \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405447", "body": "It should work just as good as the old one did the issue here is there is no swiping in ios builds yet I thought ? if you want a skin for the ipad I reckomend pm3.hd over confluence anyday\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/405447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mcgeagh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/349474", "body": "Yes I know, and i will be change it accordingly.\nI pushed the current change mainly to test my git-skills and permissions. Granted shouldnt have used xbmc as my guineapig.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/349474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cpuga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/374301", "body": "I totally agree with theuni.\nCan we return to the previous behavior while this plan is not implemented (especially point 4)?\nLibrary views are useless for me as I have all my files organized in folders (\"Kids\", \"Concerts\", \"Movies\",...), so the ability to view metadata in file modes had been the best new feature in months.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/374301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "malard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/374595", "body": "What are we doing, for eden, is the revised merged library view aimed\nfor Eden release? if so, then the any work towards jonathans plan\nneeds to be accepted until its completed, then we can get this feature\nout the door.\n\nThe library/file view system is always going to cause contention, my\nthought however is to adopt a gmail esque approach to content with the\nability to create and add labels to media, such that people can sub\ncategorise content, i.e. Kids, Concerts, Movies, that way if you want\nto, you can either browse \"All\", or then one of the sub labels?\n\nCheers\n\nOn Mon, May 9, 2011 at 1:25 AM, cpuga\nreply@reply.github.com\nwrote:\n\n> I totally agree with theuni.\n> Can we return to the previous behavior while this plan is not implemented (especially point 4)?\n> Library views are useless for me as I have all my files organized in folders (\"Kids\", \"Concerts\", \"Movies\",...), so the ability to view metadata in file modes had been the best new feature in months.\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/xbmc/xbmc/commit/b59ea5bb998d576b129ac39a2b14ab520fc2c2a6#commitcomment-374301\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/374595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/421487", "body": "all i've done is copy the existing help code, feel free to adapt as you see fit in a future patch\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/421487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428552", "body": "i have no idea, I lifted this from the MSDN documentation\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428557", "body": "i asked elupus yesterday, he said a static bool is always initialised as false. so i took that as fact., it's defined in the header file\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428562", "body": "already discovered and will note for future, thanks\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428568", "body": "potentially yes, however what was happening is we were replacing every map, so we only ever loaded remote.xml by default (as far as i could tell) in system/ everything else was loaded almost pointlessly\n\nI will have a think, but it's possible we could just have an option saying is this keymap from the system, yes okay, merge, if not replace?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428573", "body": "basically, what happens is it will activate a 'special' keymap, i.e. if it finds the Nyxboard remote, and use that configuration over the default keyboard mapping, if you happen to have a generic device connected which we dont have any override in place for, that will still work, but some of the keys might be mapped funny.\n\nIts a limitation of how HID devices work (as far as I understand it) as we do not get told where the \"A\" key came from, just that it was sent to the application.\n\nThe assumption is that users will not have multiple conflicting devices installed at the same time, if they do, the last one in the device list found will be activated\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428575", "body": "can we? this sort of goes back to my original issue where in its current itteration we only load the last found xml file and disregard all the rest?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428577", "body": "do you mean the variable name change or the extra line? more than likely this was just an error on my part as i was reading through the code\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428591", "body": "ah, good spot, i miss-read this as doing something different, I will rectify\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428636", "body": "already fixed, its not amazing, but perhaps someone can improve\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428697", "body": "me and davilla have looked into this quite a bit, it's not possible to do, also from a support reason, HID remotes are only going to get more popular, things like the bluetooth Peanut shaped Tivo remote is another example, because they don't require any drivers to operate\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/428697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "bole5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/377622", "body": "Please also add the: #include <arpa/inet.h> to ZeroconfBrowserOSX.cpp to fix the IOS build.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/377622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378919", "body": "Thanks for that. arpa/inet.h include would be sufficient for the IOS build. I can't say anything about the OSX though.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/378919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kylhill": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/382886", "body": "It looks like PG-13 and NC-17 got swapped.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/382886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "MrZippy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/388897", "body": "This update breaks correct display of the time on ATV2 4.2.1 (iOS 4.3).\n\niOS 4.3 for ATV2 has a time zone setting in the ATV settings page, which I had set to London.\n\nPrior to this change XBMC showed the correct system time as set above.\n\nNow on launch of XBMC it was 1 hour out and I had to reset the timezone inside XBMC too.\n\nThink this update either needs to detect the ATV2 timezone (iOS 4.3 and above) and mirror inside XBMC or not be an option for iOS 4.3 and higher.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/388897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "stevellion": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/comments/422406", "body": "Seems to work fine on fresh compile against Myth 0.24.1  Can watch LiveTV\nBut - Can't seem to watch Recordings.. (and TV Guide still doesn't work). - Can e-mail log if it would help.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/comments/422406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "vkosh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644", "body": "I actually wonder why do recordings have string IDs? Maybe for some backend-specific historical reasons. But 1024 is the length of PVR_RECORDING.strRecordingId.\nI propose to use VARCHAR(255) with value length check during serialization to prevent overflow, or maybe just to use TEXT type.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682", "body": "++\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695", "body": "Yes it does work because boost:shared_ptr overloads operator*, and epgTag->foo() - doesn't because CFileItem hasn't constructors for *Ptr types.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697", "body": "++ for storing epg tag pointer.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8561697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492", "body": "It doesn't work this way actually because item is of CGUIListItemPtr type, which sould be casted to CFileItem to get epg info.\nThe only alternative to the cast is to create fileItem explicitly and get the tag from it, e.g.:\n<code>CFileItemPtr fileItem(new CFileItem(*item));</code>\nor\n<code>CFileItemPtr fileItem(new CFileItem(item.get()));</code>\nand then\n<code>fileItem->GetEPGInfoTag()->GenreType()</code>\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/8651492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333", "body": "It's just here for readability. The code is similar to one for playing channel by id above (see line 515).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/11997333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921", "body": "IMO the separate buttons is better in two reasons: usability of shift button and ability of symbols charset extention (e.g. separate charsets for symbols and for shift+symbols).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959", "body": "Added onlyCheckLanguage check (not used though).\nAs for moving main layout loading down the locale specific langinfo.xml check - the main layout must be loaded in any case otherwise keyboard dialog will not work.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975", "body": "Yes. The keyboard dialog don't work without layouts, so at least main one should present. The previous layouts should remain in case of error. \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983", "body": "I need std::wstring's to get utf8 character by its index. std::string works with bytes.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12144994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012", "body": "There are two fixed layouts because they are related to languages: main - for default language (English) and alternative - for user language. So user can't select more than two layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019", "body": "Removed pair and renamed map. Map type can be used outside by calling static LoadKeyboardLayouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035", "body": "I tried to implement the layouts in less invasive way for skins in the start of the PR. But in current concept I can't see a way to implement layouts without breaking skins.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046", "body": "Removed operator!= and added HasAltKeyboardLayout.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051", "body": "Yep\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060", "body": "This leads to errors of passing \"this\" as const (even with const modifier for related KeyboardLayout getters).\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12145060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748", "body": "Good point, but I still think that shift and symbols are quite a different kind of modifiers to merge them on one button. Shift just changes letters case while symbols turns on sublayout with totally different charset (so it's not a modifier actually).\nI've found two kinds of virtual keyboards: with (for example http://goo.gl/B946t6) and without (http://goo.gl/LbwHGC) symbols switch. The first kind used when there is no much space to place digits and symbols with letters (that's our case), and the second one uses shift as the symbols switch for digits row.\nWe could add more symbols sets in the future (e.g. smiles or whatever) and use cycling for \"symbols\" button. But \"true\" modifiers should be represented as standalone buttons I think.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779", "body": "I agree, but all loaded layouts should be accesible from the one place (e.g. for settings). On the other hand the second instance of CLangInfo is redundant for loading layouts only except of using separate method for this. The implementation will depend on chosen solution between two fixed/multiple user selected layouts.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911", "body": "Ok. I'm not a C++ programmer as you have probably noticed :) So if you suggest a solution I will appreciate.\nI have utf8 string in std::string and I need to have utf8 std::string on output containing i'th character of s. Something like code below but for utf8:\nstd::string strIn = \"...\";\nstd::string strOut;\nstrOut = strIn.substr(i, 1);\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12169911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001", "body": "I agree, cycling is better in UI. As for more than two layouts (more than one per language) - I just can't imagine the use case. Why user whould want to switch between ABC and QWERTY or even more within one language layouts set?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147", "body": "Thanks for the aiming. I'll think about this when we come to solution with modifiers and layouts switching.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12170147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897", "body": "Such an initialization is everywhere in pvr code. Should I change it for the PR related code or everywhere?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917", "body": "tag can't be null here otherwise a lot of stuff will break. But ok, I'all add the check.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959", "body": "Just removed the ITR types ) As @jmarshallnz mentioned in https://github.com/xbmc/xbmc/pull/4242#discussion-diff-12038835 map typedefs have CamelCase style. So what's the naming convention for iterator types? Is there any coding style document?\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976", "body": "See https://github.com/xbmc/xbmc/pull/3900#discussion-diff-8560519\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981", "body": "CPVRRecordingUid used as a key in std::map\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12939981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039", "body": "Yep there is PVR_VIRTUAL_CLIENT_ID (-1) in PVRClient.h\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/12940039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "midgetspy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/57279190", "body": "I did it this way because it is common functionality that I wanted in the base class. If I added it to Configure I would have had to pass the cropping rect to every BaseRenderer subclass and duplicate the same code into each Configure implementation.\n\n```\n_____________________________\n```\n\nFrom: Rainer Hochecker notifications@github.com\nSent: Thursday, March 24, 2016 12:28 AM\nSubject: Re: [xbmc] Enable cropping of video frames  (#9437)\nTo: xbmc/xbmc xbmc@noreply.github.com\nCc: Nic Wolfe nic@wolfeden.ca\n\nIn xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp:   > @@ -349,6 +353,9 @@ bool CRenderManager::Configure()>        return false;>    }>  > +  // configure the renderer to crop if necessary> +  m_pRenderer->ConfigureCropping(m_cropBottom, m_cropTop, m_cropLeft, m_cropRight);   \n\nwhy an extra method? cropping rect can be passed with configure   \n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub                              \n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/57279190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/57314742", "body": "Well some of those are required for other purposes in Configure but in general yes I believe there are more parts of that method that are common and could be refactored into the base class. This being my first time in the code I didn't want to refactor the world, I just didn't want to make it any worse. I also wasn't quite sure how to test my changes if I were to refactor every renderer since I can only build and run CWinRenderer.\nI also think more smaller functions is more maintainable.\u00a0\nThat said when I change it to a CRect it'll be less of an issue since it'll be one param and one line I'll have to duplicate in every renderer instead of four so if you prefer that I can do that.\n", "reactions": {"url": "https://api.github.com/repos/xbmc/xbmc/pulls/comments/57314742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}