{"_default": {"1": {"JonnyJD": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1a39085ae119c71ed6c113c3e5dda47c4aee06fa", "message": "Merge pull request #52"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a3ef7ba392d37ca0cf423c8e17926b3f885238bd", "message": "add LIB-66 to ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3429c8b2048c2ab36f09c7d4152a067d44585f3a", "message": "merge pull request #51\n\nsee\nhttps://tickets.metabrainz.org/browse/LIB-66"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/27db02ed6781ba8c0e9b47f745b9473b88084d89", "message": "set version to 0.6.2"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c7a8771e21ffec47fe39ce688c9bf61d666f21dc", "message": "update ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bd555f203e2f20e9578d18605fc56c8249ee2ea6", "message": "Merge pull request #48\n\nMCN and ISRC support for BSD"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/09e745ee541e1ecf5a08f502eb69243b6a3fc1d5", "message": "Merge pull request #50 from kjc1/master\n\nFixes build issue when using Visual Studio 2015 build tools"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/35e5d1f8e9a359859246efa0f6024f11be7166c8", "message": "Merge remote-tracking branch 'Zastai/unix-file-descriptor-leak'\n\nsee pull request #49"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6976afca571e52c8de69f5674a9c9db882c351bf", "message": "add Zastai to authors/changelog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8fdcf37fab7ec3d9e7523697c3696f58cc04835a", "message": "Merge remote-tracking branch 'Zastai/master'\n\nmake the newline fix for the first linux device work\n\nsee pull request #47"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/02b1e04f68f7222234fcee8d7206dcd84e9df294", "message": "fix warning for empty m4 directory\n\nThis removes the warning about a missing m4 directory,\nwhich is empty because we don't have any macros\nin the repository.\nThe warning broke the git build in Ubuntu.\n\nNow thert is a message that we should \"consider\"\nadding the m4 commands we just removed.\nHopefully this is not a breaking warning for Ubuntu."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e2f8c88e2039bbd453ecb83530b3f474466213c9", "message": "use build-aux and m4; add git-clean target\n\nThe idea is to have a \"cleaner\" root directory."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d4d41d9e34a36636cc393f6440148446b25af824", "message": "create changelog for unreleased version\n\nthis will probably be 0.6.2"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e991c5b147b0b9830d527abbe38aba27858a440f", "message": "Merge remote-tracking branch 'sebastinas/reproducible-doxygen'\n\nsee pull request #46"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f70f443c598faa6921eb06d1f5fcb147b59bc592", "message": "generic: fix default device test, fix LIB-60"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a741dc97d09d6086b6af8c027b420b844de713e5", "message": "code style fixes, mostly windows"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/65a880f020c681e89a92a48f6f2b01d3f39bea88", "message": "windows: make some functions static"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/257ee999c2fda61e28e8a2e0bcb779adaf1bae42", "message": "set version to 0.6.1 and update ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f7c884935f5352df5a509e97d123d1daede01050", "message": "Merge branch 'windows_no_close'\n\nsee pull request #44 and LIB-59"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c0a1839ef03709efd441b53c10c3459d12f65e05", "message": "windows: don't close handle after toc read"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d792d6b016272a59b4c1e23b6cc7494f6e620743", "message": "set version to 0.6.0"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a47768b923125e0e8734c2a976a23d4fad0b5921", "message": "update AUTHORS"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bdaf5c08baeb34dd9dea9d94b197b885e8d6ac6f", "message": "document default drive not being constant"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ad952b4f65f71394abf83a20508408c182227518", "message": "update ChangeLog with LIB-56"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/acd0aefae4aeef6277330abc328576267ab9b27f", "message": "Merge branch 'linux_drive_numbers'\n\nsee pull request #43 and LIB-56"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d92d9643ce89a0057cb1a2136c1a5ccc318ff196", "message": "update ChangeLog with LIB-55"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/35703a3cf0b67f55036fc1afc2524771ded614c2", "message": "Merge branch 'win_allow_drive_numbers'\n\nsee pull request #42 and LIB-55\n\nConflicts:\n\tsrc/disc_win32.c"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a0a11314c6c83a0826fddb7ab007a0f4792b9e9a", "message": "remove outdated comment"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5f71d851606840892799fa0773799531320fbd63", "message": "linux: handle device pointers more explicitely"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/071a19c7339f61e88808f8e5a8523adea47e8476", "message": "LIB-56: allow using device numbers one linux\n\nNumbers start with 1 and /dev/cdrom is still preferred."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0e08143c470f5ddd5dbd2e9f01faef5404985415", "message": "ChangeLog: LIB-28"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/72110b1c251f4a8d12813a748b5280c5d2adc7ad", "message": "Merge branch 'mac_drive_numbers'\n\nsee pull request #37 and LIB-28\n\nConflicts:\n\tsrc/unix.h"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/cf8a7106773d326f054a130d03abd6c089a3318e", "message": "better documentation of functions in unix.h"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/295b570642aa32e78f90dd908b2c3d1cc69eb3e2", "message": "Merge branch '64bit-fixes'\n\nsee pull request #41\n\nConflicts:\n\tsrc/disc_win32.c"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5c50bb0fff84b0aa9646eeeb156f2b01a6330ad3", "message": "Update ChangeLog for LIB-45\n\nalso fix a typo"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7bce5130a96512407a828bb6b22cf709ea287836", "message": "Merge branch 'default_drive_exists'\n\nsee pull request #24 and LIB-45"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1f9d9fb4fa9ed93512665f02bff0edd38730e88b", "message": "ChangeLog for LIB-48"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8fc1a7ed66e4124b8291abad76a020625025f0a5", "message": "Merge branch 'no_success'\n\nsee pull request #36 and LIB-48"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fb84673bc4946e74288315b6b668b6d1d4b76add", "message": "update ChangeLog for LIB-52"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/365495f265b35466035738c77aab7cd73a91be23", "message": "Merge branch 'verify_put'\n\nsee pull request #35 and LIB-52"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0c25b103be68c64b2e7a97f0004f84ef47b72208", "message": "update ChangeLog with changes in master"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/30678f93d72ed95d3362c9272c83f0220086006d", "message": "add tests for TOC string API"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3f09881b32c4e66a96df41ef608299977b9e06d6", "message": "Merge branch 'tocstring'\n\nsee pull-request #34 and LIB-41\n\nConflicts:\n\tsrc/disc.c"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/535c771f1033381cf9d7f13fda712096dcd7226e", "message": "Merge branch 'print_device_in_example'\n\nsee pull request #40"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0c512a9d140abf220f99de0c35ccca45009779ee", "message": "Merge branch 'win_use_first_audio_drive'\n\nsee pull request #20 (LIB-43)\n\nI also removed some trailing spaces."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/633ee53058869ecc8de6d22297fac2f0a8d4b210", "message": "build disc_metadata also with autotools\n\nThe key is that libmusicbrainz5 should *not* be added to LIBS,\nbecause that would link libdiscid to it!"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ed637ec3576c2a32bbf0a053d5985db1039dfdc0", "message": "don't fail if libmusicbrainz isn't found\n\nWe only need the library for an example\nand don't actually require it.\nSo be quiet about searching it."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9ce3b9e5119d5aa7d76158ea9b1ca2f887aeaf55", "message": "include libmusicbrainz usage example (web_query)"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9ac52960b384f6dec6cc2a2509fecf2c61610f43", "message": "LIB-28: enable mac drive numbering\n\nSince Mac doesn't have stable disc drive device names,\none can now additionally use drive numbers.\nThe default is \"1\" which stands for the first optical disc drive.\nThis should be the same numbering `drutil list` uses."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c3e6c9d52507cbb8748a59b99eed39aae6d09b6d", "message": "don't put mb_disc_read_unportable in unix.c\n\nWe explicitely call it in the platform files as mb_disc_unix_read().\nThis removes some \"black magic\" since all other unportable functions\nare also implemented in the platform files.\n\nThis is also a prerequisite to accept numbers as drive names for Mac OS X,\nsince we need to intercept the device name before opening it."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6ff0157c24a09f737cfeeebeadbeae829f916a1a", "message": "LIB-28: get mac device name over drive node\n\nThis is a prerequisite for allowing drive numbers."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c0413819b77883798e3f30b5c4f578c94b25ab73", "message": "LIB-48: NULL/-1 on not success\n\nThis basically reverts 4700fbe8f12452f7179e4c5544cbdb8b90c2fd5e,\nbut keeps some style changes it introduced and also reverts\ne2991487504b9e45968dfb8c98b1a9af5595aca5.\n\nWhen no read/put was successfull we return NULL for strings\nand -1 for numbers.\nAdditionally we issue an assert, like we did before the changes.\n\nHowever, we now assert disc->success on everything that would get data\nfrom the structure. Some functions missed that before."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/dca5c7d2260100d4ccac5a47ae491dfa5dddf1c4", "message": "correct 0.5.2 ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e2991487504b9e45968dfb8c98b1a9af5595aca5", "message": "no NULL for webservice_url, allow free(NULL)\n\nWhile technically no object functions are supposed to be called on a\nNULL object, calling discid_free(NULL) doesn't actually hurt and\nforgetting to call free() is worse.\n\nChanging the return on invalid usage (no previous read/put success)\nwas forgotten for webservice_url when implementing LIB-48."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7c2430c4260de16c2ff5410462c3c07b8a6af8e2", "message": "deactivate default_device test for now\n\nThis still doesn't work on Mac"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f1650a00df692d663c1243912e7e583c001fca1c", "message": "LIB-52: verify offset order and test verification\n\nSome common errors should definately be catched.\nWe can't catch one important thing: The length of the array.\nThis hopefully triggers one of the other problems, too."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/beddaf91c747657e91bdc8864c0fe1dc4da79f9f", "message": "LIB-52: verify sectors given to put()\n\nThe first element in the array is the overall disc length, which must\nbe bigger than everything else.\nAll offsets have to be smaller than a maximum."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2043bb32f1755d0e111ae63c92d89df78ccec73c", "message": "update 0.5.2 ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/16e92bf1c67af6774335a0cfa0ba3cfdce1d0363", "message": "fix ChangeLog to also include 0.5.2"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4700fbe8f12452f7179e4c5544cbdb8b90c2fd5e", "message": "LIB-48: don't return NULL on !success\n\nThis probably would lead to segfaults otherwise, which is quite\ndisruptive for something that can happen quite easily on usage errors.\nHaving empty values is probably a better indication on what is wrong."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2ec60c5493d6c5eacce99a101d90766f95111dea", "message": "update ChangeLog for 0.6.0"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a269c094f01a36891ef71ccedabec0df8996bd1a", "message": "fix typo in test comparision\n\n>= 0 is always true for unsigned int. We want > 0.\nFound with coverity."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ee1cca31b6b4d122501cf3ff266e5bb2bdd432ec", "message": "update ChangeLog\n\nMaybe we should release soon. These changes should be enough for a\nrelease."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fbb5f6a9f40181b9acd6b7f42138ff87a8e1d47e", "message": "Merge remote-tracking branch 'lalinsky/no-mm'\n\nsee pull-request #33"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/274583af3a2a799291792f7932ec654fa06b6573", "message": "memcheck: ignore non-skip exit code from discid\n\nThis way we can test discid/discisrc even when the tools themselve fail,\nwithout having a special code for SKIP."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fd042f05bd193025f3a7bf278f75e83dcbb696ed", "message": "detect SKIP in valgrind tests\n\nOtherwise a SKIP is a failure."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/82abc570d9f3f784e4ac9874cb1e03f13ff9d151", "message": "cmake: rename valgrind target to memcheck"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7ffce1cd7b347115ab37bc288de696a0a1f16f80", "message": "fix a leak in the tests\n\nThis is the memory problem I actually found first,\nbut valgrind pushed me to fix another one first ;-)"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9ab12a8b1b54b1df50bd43803169b92272b2626a", "message": "valgrind: also check for leaks\n\nThe default does display a summary, but we suppress this summary and it\nis normally not indicated with an error status.\nSo we force returning an error code for leaks."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c76929f4b4b934e0a95109bb2d65304bdb03b5d4", "message": "tests: allocate enough space for track_offsets\n\nNot only the track offsets, but also the overal disc sector count is\nsaved in this array."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/60fcd9483fafa397b89e5a26f01d2b4702b1136b", "message": "cmake: add valgrind target\n\nDon't include this in the check target, since valgrind is quite a build\nrequirement *and* only works really well on Linux."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/889f578aac5737aa0cbc15202b740dd4239f5022", "message": "add optional device parameter to read tests\n\nThis should make it possible to test manually, even if the default\ndevice detection fails."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3d926c729858f2ad8e1f617f27dac93b69755883", "message": "Merge branch 'more_tests'\n\nsee pull-request #26"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/cab7a18266a3432e1b511762a4b9e8de29dc2302", "message": "Merge branch 'darwin_close'\n\nsee pull-request #29"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3dfbab1069dcd6cba2a9e9f3513d1d4460b9590f", "message": "Merge branch 'unix_open_check'\n\nsee pull-request #28"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2baa047377e44a6b12d025e15e62e38f48b919bc", "message": "LIB-51: darwin: don't close the fd after toc read\n\nThis obviously broke all later disc reads,\nincluding MCN and ISRCs.\nThis was introduced in fe2d1fb955,\nbut not at all easy to see in the diff."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/475b907d5af1fa6bffdd3879a139cb5d027a08cf", "message": "LIB-50: check return value of mb_disc_unix_open\n\nThis is was caught by drivers on most platforms, but not Solaris."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0a6df8ba466b34ee94ba40016466c26606d36229", "message": "fix printf warning\n\nInterestingly enough, only Mac OS X complained about\nthe first argument of printf not being a constant string\nand not including formatting placeholders."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/357d12a41f003cd276bb1840fc34ec91749ef47c", "message": "add missing include\n\nWarning in Windows, already included in other platform code."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1eff5f8d1ff1c01391933c69de067873961c235a", "message": "clean-up INSTALL, extend information\n\nFewer empty lines and a bit more information.\nAlso note that no dependencies are required."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c25444a7a46930127b191496f3164c9502f168fc", "message": "check read/put idempotence\n\nWhen using the output of a read() as input to put(), we should get the\nsame result."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e5f31737a61c729127d26559b9bc021858601d8c", "message": "add tests for get_default_device\n\nWe also anticipate tests for empty objects,\nwhich wouldn't work right now so it is disabled."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4c40f064f58cba39e72c4c0877adf108ea3cfc9f", "message": "fix discid example for MSC/MSVS\n\nsnprintf needs fixes like in the internal code.\n\nSee also #25, where snprintf was added to the example."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/41c14473d36c3d05429184e265d69fbf8043c911", "message": "LIB-26: test error_msg, features and feature_list\n\nError message should be available when something failed and otherwise\nempty.\nFeatures are tested for consistency with the feature list and the actual\noutput on read."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8ffba878f29ed63d8ca86cfd164da2eccd462e80", "message": "use get_default_device in discisrc example"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0fdf57ddfdccede21b70196442c0efffacf363fd", "message": "LIB-26: test full read (with MCN + ISRCS)\n\nWe can only check that nothing invalid happens.\nDiscs might not include any MCN or ISRCS, even if libdiscid works\ncorrectly."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bd858768145d79e1173251e6fe99570600e013aa", "message": "change test_read to the new testing schema\n\nThis means we can get rid of the msg parameter and assert_true."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/069b2d97c1a62a2472c8e87b1ac67549b789d359", "message": "LIB-26: split tests to core, put and read\n\nOne program is one test for autotools so we should split that up\nto give reasonable output.\nFAILED: test_discid\nwouldn't give much information on what failed."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f74436471ccbb75f9302b42b2f730403b12813b9", "message": "LIB-26: run test_disc, but skip it without disc\n\nAutotools supports a return value of 77 to skip the test\nso we do that.\nCmake doesn't support testind directly anyways so we have\nto catch the return type 77 manually.\n\nreturn values other than 0 and 77 should lead to errors of course."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9f035288fd5112bc61fc30f2279a853e694db487", "message": "use noinst_HEADERS for all internal headers\n\nNot really sure why these have been in libdiscid_la_SOURCES before\nand I hope this doesn't break somehow."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5eba4c3e5c6f0f9581127438b9bdfe14be929725", "message": "LIB-26: use testing functions in both tests"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/77d37612bd10e67543ec0d3342e055a45aeef349", "message": "LIB-26: add a simple test with a disc\n\nThis basically replicates the testing already done in python-discid.\n\nI implemented several helper functions. That should pay off when adding\nmore tests and using these in the build test suite."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/123d06d5a89501e1b5b2c6b54997a41f9513f980", "message": "fix valgrind warnings on other platforms\n\nI only checked FreeBSD with valgrind and made the other changes as they\nseemed fitting.\nValgrind doesn't work as well on these platforms, FreeBSD might be the\nbest of these.\n\nAgain, all of these were no real problems, but fixing warnings\nin valgrind might help when real issues occur later on."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fb4629e15cf667d9acb49f3f4d444042306c7dba", "message": "Linux: fix minor valgrind warnings\n\nThe mcn struct might not be filled correctly by the ioctl.\nThe free in discid/isrc is mainly to remind the user to not forget it,\neven if the program exists right afterwards.\n\nBoth don't have an actual impact."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f44985298bc5090b9c30986b05691f45afe1e386", "message": "make room for hours in discid example\n\nAdditionally, 2 digit hours are impossible on audio CDs."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7d4372cadad2b2855aad5ea8f69e8a76393db5c2", "message": "some stylistic fixes for discid\n\ndiscid_new() is important so it shouldn't be hidden in the declarations.\nThe other things are just style/names."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b570de55cef86b2df7ef522ee47d595cf0b4b993", "message": "update AUTHORS"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a0583847e088753f14b266fc5f03164760433884", "message": "Merge branch 'discid_track_duration'\n\nsee pull-request #25"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9125ae3446f5098b5291ab10f19772bd1d494479", "message": "remove outdated TODO\n\nThis was implemented in fe2d1fb955035bb28126c4f7dc18036eb99e42d9."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/31e07a1e2ab71523dd63dbad291677a4c9bdbad9", "message": "set version to 0.5.1"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9286e0fae6678acfda836ee2c464ea2452f25571", "message": "minor whitespace fixes"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4df786ecf4986f138436155aad951c9775b4261f", "message": "LIB-45: prefer /dev/cdrom on Linux if available"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5ef455a2833768d43b292c134d6b9017005aaabe", "message": "LIB-45: parse /proc/sys/dev/cdrom on Linux\n\nThis extracts the default drive from /proc and falls back to\none of the hard coded defaults if this isn't available,\nfor the error message.\n\nWe might rather want to prefer /dev/cdrom, but that needs\nfiddling with find_drive/exists in unix.c again."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e24658b92934eb82541ebb81ce97d3d398ce6850", "message": "fix typo on Linux drive candidates"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/66ed111f4739b9158c41d82a275f0113e08897c6", "message": "LIB-45: try both device names on NetBSD/OpenBSD\n\nAdditionally re-add the information to the FreeBSD device names."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/196673b9ae0c0ebcbe5629235031c7b107b231f0", "message": "LIB-45: check both device names on FreeBSD"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ef5626959426d8bc1af8742d933fe2653ec72f5a", "message": "create and use mb_disc_unix_find_devices()\n\ninstead of duplicating code"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/741b90ad314bb8aa5596f01e35d80ddc2a49a1fa", "message": "LIB-45: add another default device possibility\n\nThis device name was found on a SunOS 5.10 = Solaris 10."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/765887b97a2c1d2eeeaba68a0c1b06da041e4321", "message": "LIB-45: also try /dev/cdrom1 on Linux\n\nCurrent Debian and Ubuntu releases don't seem to create /dev/cdrom\nanymore, but only /dev/cdrom1, /dev/cdrom2 etc.\n\nThis should fix most cases when the actual device doesn't change.\nWhen devices really change we could start analyzing\n/proc/sys/dev/cdrom/info."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1a6d98898302c9bc7226909f415c69013f72dd51", "message": "cmake: don't check for c++ compiler\n\nWe don't actually need one."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c29b73314c8656ed58a493471398cabeb7c3f698", "message": "mention openbsd -> netbsd file rename in ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/301af76359da6715ae7ee0cb76e35d08a335779d", "message": "update ChangeLog for 0.5.1"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/861d08b641ba627f111337fc0ca1bec0fa6572e8", "message": "update AUTHORS for release"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f98819d4eed9f4135ee9974f90c34c56c117e59c", "message": "Merge branch 'read_twice'\n\nsee pull-request #23"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a135bda54f4294c26b0ef7147d0b1ea20e6af63b", "message": "fix default device for FreeBSD 9\n\n/dev/acd0 is deprecated and needs additional non-default configuration.\nATAPI devices also use /dev/cd0 now by default."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4b30c5be3c9abb0db54e195fa3ccf6eda4f8349a", "message": "NetBSD fix default device for x86_64"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c1f3bebec4e05d9673a8862cf04f99d274f2efc5", "message": "fix duplicate define for i386 NetBSD"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/05cd486a415d876b9412fd8221fe79cd90a4f5bb", "message": "LIB-44: pre-read the TOC\n\nMulti-disc releases sometimes give different disc IDs only for the first\nread right after inserting the disc in the drive.\nReading the TOC (and only that part) twice should reduce\nthe chance that this happens."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8b71b01611df60269a0122f8d49e595b30e4810c", "message": "Merge branch 'data-tracks'\n\nSee pull-request #5.\nThis should solve LIB-7 and LIB-18.\nSome changes are made for LIB-16."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/68535ab70d534cb5780987d50392231507c2577a", "message": "Merge remote-tracking branch 'phw/data-tracks' into data-tracks"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1a8bf9908a2ae3ba84c609a90306ca880fec1640", "message": "Merge branch 'master' into data-tracks\n\nThis mainly merges Windows include fixes.\n\nConflicts:\n\tMakefile.am\n\tsrc/disc_win32.c"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/63ba99856a9c4e071cd5f34ad054963c9d5e5b08", "message": "Merge branch 'darwin_toc' into data-tracks\n\nThe changes were tested on a (physical) Mac OS X machine."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bf402b7127bdb568d9c0837d2c92323f61374f61", "message": "fix first/last on Darwin\n\nThe structure doesn't give these away directly.\nsessionLast is the number of the last session.\nSo we just calculate them.\n\nThis is now tested (with a drive) on Mac OS X."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fe2d1fb955035bb28126c4f7dc18036eb99e42d9", "message": "use general toc code on darwin\n\nThis compiles fine, but I can't actually test it in my VM,\nsince Mac doesn't accept my CD drive at all."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c79f813a1e0fd231b86812285ece2ef78a42e9cd", "message": "use mb_disc_unix_open on darwin\n\nThis should be a start in using the new toc generation code."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f0dd84b797c15f5cfb120e77d8f650a0619810b8", "message": "LIB-18: don't create IDs for DVD/CDROM\n\nWe don't create IDs when there are no actual audio tracks."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d395539deb1790da1c7656c9dd1c378edb185ed6", "message": "LIB-16: correct invalid negative offsets\n\nThese are given by \"copy-protected\"/invalid discs.\nIn the examples the first track had an offset of -1.\n\nPossibly some drives/drivers correct this automatically."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c35b952cd2a9e2efbb6159c832478c18a35e13fd", "message": "don't leave old offsets in the structure\n\nIf we change last_audio_track we should also set old offsets to 0.\nThese are not part of the url, but part of the ID calculation."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ab9bb60a30c3cc660efcc5ef6db7bdb7cc03ed8d", "message": "LIB-16: test for invalid track lengths\n\nOn copy protected there are sometimes (extra) tracks that are no valid\naudio tracks, but also not marked (in control) as data tracks.\nSome of these have an invalid track length so we do know they are wrong.\n\nThis doesn't fix all problems."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/74a5e7250ad6fcac51385c5db0d976c06dfec96c", "message": "remove snprintf declaration from toc.c\n\nI also added _CRT_SECURE_NO_WARNINGS, since it was also recently added to\nother files in master, so I don't forget to do that when merging into\nmaster."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bb6b64982af02ecda8f7ab506a3c926dfa4465c9", "message": "fix coding style a bit in toc.c"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/03499752b1a01bb3fa852c30832c0efdbedc645c", "message": "we can NOT just skip data tracks up front\n\nMusicBrainz always expects a track list starting with the first track.\nThe cd spec also says the first track number should be one,\nso we just take the track number in the toc.\n\nNo clue if there are releases out there with 1st track != 1 in the TOC."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8f5ddc563d077141d5b5806c7037fecf98a72369", "message": "support data tracks at the start of the disc\n\nThis is mostly a PC game in track 1 and the sound for the game in the\nother tracks.\nExamples: Quake, AoE."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a373ec31b510c9c401b3e8cd0abecc9cfbcd70e0", "message": "add dragonfly to configure.ac"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f819501b5603649fcc0878c6d6ba434f2af4316c", "message": "rename openbsd.c to netbsd.c\n\nThe main OpenBSD is only a fork of NetBSD,\nso the file used by both should have netbsd in the name."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7f8bf14e2f8b9e2f42d44141b729af253e5ae37e", "message": "note freebsd differences\n\nThe FreeBSD and NetBSD/OpenBSD differences are not that big actually.\nOn FreeBSD we can also use CDIOREADTOCENTRYS and then\nthe only difference is the ntohl call."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/059523ec970c7f191f97e2749231e781b8efc5de", "message": "fix openbsd file"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/913bb3cd16ab0941cf0bac056078231787a55726", "message": "no_warnings doesn't need a value"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fa81ceb5eae5c9ce959062c892381cbb6228982a", "message": "MSC: use _CRT_SECURE_NO_WARNINGS\n\nWhile warning for buffer overflows etc. is good in general,\nusing unportable string functions is not worth it.\nThe current usage is no actual problem.\n\nHowever, I put the define in every file, so we know which files are\npossibly affected.\n\n_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES (_COUNT) didn't help at all.\nThe NO_WARNINGS define was called _CRT_SECURE_NO_DEPRECATE\nin earlier versions of Visual Studio."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/844c21d2126a27f0686756cd525c1ed773fabf53", "message": "add ntddcdrm.h for MSVC\n\nMS Visual Studio doesn't seem to include that header by itself.\nThe header is included in a separate Windows Driver Development Kit,\nbut that one is difficult to install and possibly not redistributable.\n\nThe ntddcdrm.h is taken from the dosbox repository.\nMinGW and cygwin do include the header. MinGW only works with the MinGW\nheader."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b4f9a6cf3d73c64935a853467ee7cd3945fe703e", "message": "cygwin: fix ntddcdrm include"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0a894c17390702f08e98be03bd5f1ddf74027f91", "message": "win32: include ntddcdrm header\n\nSo we don't have to list a hundred lines of defines/types ourselves."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e0b73e60fc9624de37ec5326be71459620f6c110", "message": "create mb_disc_unix_open()\n\nneeded in disc_linux.c and unix.c (possibly others later on)"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d454bd440de8d7ba31430b42f9558e4cf85ee82f", "message": "fix win32 / create create_device_handle()"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/784d3c16767263db7c1bda89159329bf45dd6529", "message": "win32: remove dead SESSION_DATA struct"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0c73cdcfada2a89e6aa3c1f26a797d848fc19702", "message": "disc_unix/toc -> unix/toc\n\nThe disc_* are exclusively for the platform implementations.\ndisc.c is the main source and others are helper files."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3382d75467b922ef2de5fe293af8fcf6e245fff8", "message": "create unix.h\n\nOtherwise we have implicit declarations."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6dd267ff5d80829957b41b404912f6bd6cb5bc68", "message": "Merge branch 'master' into data-tracks\n\nThis is a huge merge, there were lots of changes in the master branch in\nbetween.\nThe build system had a major overhaul and the features ISRCs and MCN\nwere introduced in master.\n\nConflicts:\n\tCMakeLists.txt\n\tconfigure.ac\n\tsrc/Makefile.am\n\tsrc/disc_freebsd.c\n\tsrc/disc_linux.c\n\tsrc/disc_openbsd.c\n\tsrc/disc_solaris.c\n\tsrc/disc_win32.c"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/202a24ee1c0746ad96cdeede377a78d5ab2206d8", "message": "fix whitespace in generic and darwin"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5cee30d984c52e14316a68190799a632029527a9", "message": "fix build files for other unix platforms\n\nWe don't actually fix it for cmake, since that will be easier with the\nmerge then."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/88273ebdb7d713627e9c8a2dfbec7f9b9996ad84", "message": "unix: move disc_read_unportable() back to platform\n\nWe don't have some features available for all unix platforms,\nso we need to have a platform dependend read().\nThis is necessary for a merge of the master changes."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/91fe302ad84c59033e4db85f493a5a6eb93d9870", "message": "fix whitespace in win32 code"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a995533bef4201a97375a2ba2841cbc6e1ea84b1", "message": "move disc_win32_new.c -> disc_win32.c\n\nThis should complete the previous merge."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/153f5df58cc44177fe782e239e1de885d2360b3d", "message": "remove Win 9x platform code\n\nThis merges disc_win32.c (9x) into disc_win32_new.c (NT based)"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/266f1fe2fd4103e2a40d000ab5e71708a4885721", "message": "fix autotools build for data-tracks branch\n\nThis code is fairly outdated, but compilation should work before we\nmerge the master branch changes."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b9f34d3139b3348e53917ad25b54f65ddf17c856", "message": "explain what the MCN actually is"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b850b5622e6f3f6f913ced1926421b831e06d286", "message": "include some info about data tracks for put()"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b23cbd3574a1a991c0125b328489e73cfdd1dab8", "message": "remove webservice_url from example\n\nAs this is deprecated, we shouldn't use it in an example."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3cc40c73fa48235259a4ac213476ce885b060e35", "message": "DISCID_FEATURE_READ == 1, not 0\n\nThanks Sebastinas for catching that.\nDoesn't make a difference in how it works, but it is a bit less\ntransparent."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/df2f9a882b7f73c12e132597fdecfe27aa813186", "message": "state that has_feature doesn't take bit masks\n\nThe signature is fine (enum discid_feature),\nbut people still might think they can use a \"full-blown\" integer\nthat is evaluated as bit mask."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1437a0ced4dced63d763c89105fddf999d54d829", "message": "remove read_sparse contradiction in the docs\n\nSince DISCID_FEATURE_READ == 0, you automatically specify this feature.\nSo we should explicitely say, that read_sparse always reads the TOC.\n\nFor the same reason we can't and we don't have to test\nif the feature is requested in the code.\n`features & 0` is always `0`.\n\nNote that `has_feature(DISCID_FEATURE_READ)` doesn't work with bit masks,\nbut is implemented with switch."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/695856341372b3bc36b96e3b6e942fa900891601", "message": "mention available feature matrix"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e6ea74103140246e95d83c3ac67d529ac42cde8a", "message": "Merge remote-tracking branch 'sebastinas/gitignore-dirstamp'\n\nsee pull-request #18"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/296900e1fc3fe8d90f9753d5883c424ef866c52d", "message": "readme: library -> C library"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a33ab4e9fbfa32381f61c6c088803e2da4f12e3e", "message": "update AUTHORS and ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4a86a869ab8694dac4c418785dc450cf565bafee", "message": "Merge branch 'non_recursive'\n\nsee pull-request #16"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8aa43f8f520d68dd69ca48b87e8f221e745f233b", "message": "autotools: only state the version once\n\nThe key seems to be to use defines for that part,\nrather than shell variables."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/eb996b5209bc6b81f7898c11399048c1ae5fed4c", "message": "autotools: merge src/Makefile.am to Makefile.am\n\nThere is only one Makefile.am now and all binaries are generated in the\nroot (build) directory.\nWell, at least the libtool wrappers are. The binaries are in .libs/"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bc9b4055abe2fb1dc029faba295185e4d593fd82", "message": "autotools: enable subdir-objects"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a0ccf417b595d895542a581af6cdbf1c621d2488", "message": "merge include Makefiles to main Makefile"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b91f17b8df9dee4eb8e2d7bd38bbd70601c82f0d", "message": "remove misplaced quotation marks\n\nIn automake files no quotation is to be used,\notherwise the multiple arguments become one argument.\n\nTested on Mac OS X. Won't compile with quotation marks."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c5bb7f57949c88dfbf92820cbdfbc8cd0a5ff921", "message": "autotools: silent versioninfo build\n\nThis doesn't make it completely silent, some part of libtool involved\nstill gives some output."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c7322f87559dad25a5f3ce038a6e78cf0ca3f5c0", "message": "Merge branch 'autotools_improvements'\n\nsee pull-request #15"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d82bf63a280a7a048e500325f1225ccbc50e79d2", "message": "fix typos\n\nThis fixes configure again."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6cadbef59100f2e1b2a9e5b6e59788bde3c8090a", "message": "mention MCN/ISRCs in README"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2a96079f107dd8a0f1325d5fd7a71c71a0085b98", "message": "cmake: out-of-source build/install fixes"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/907e35115656ea7598ebd2fe333f1350db83fac4", "message": "require cmake check before autotools dist\n\nThis doesn't cost much, and I only have to check\n\"cmake; make dist\" on every platform to check everything."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ef4cbcc43effe0bcf9488cedd6ab4ff2cb400ad9", "message": "fix out-of-source cmake distribution"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0a5b04aac32793e5675cadd42b5c887fc8064726", "message": "update ChangeLog"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6b2c8d7d737b8b00e1a44ae36487184c048af08e", "message": "distmac: also provide single arch binaries"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0de1ece05f724420cfdeffbbd24021bf6f06360c", "message": "add distmac target\n\nThis builds a universal binary with 32 and 64 bit intel and ppc included.\n\nBuilding that in one run doesn't work because of the Endianess check."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/71f881ac3ef5b8ad6d2310a6f44ff8c7974e1256", "message": "optimize distwin32 target"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/418cff8faac2b21010d2b97c22eca0cf49672e57", "message": "use libdiscid_DISTDIR in dist"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3a9d2352b65fce964f1ea347d5986398764bb172", "message": "Merge branch 'distwin32'"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bab17a73e2bff089a9d862ce4d7f74e1349deb41", "message": "autotools: fix distcheck on Windows"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7b7c12f101c4549058da04e75026f3235320de50", "message": "fix check for mingw-cross-build\n\nIn general one could use wine to run test_discid.exe,\nhowever, this is not easy due to the libtool wrapper, which can't be run\nwith wine.\nThe tests are disabled, this fixes distcheck."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c31b71ede6d528240ac9ae3279d84ebe6a44f186", "message": "Merge remote-tracking branch 'cmake/master'"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ca21e4e12e70261f7c80bc5a9a4b9401a0cb6055", "message": "fix mingw-linux out-of-source cross-build\n\nMake works without errors now, make test doesn't yet.\nThese additional includes were not necessary for \"normal\" out-of-source\nbuilds on Windows and Linux somehow."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c444858f56a4c22fdc3e13c77bced19743db9760", "message": "cmake: add distwin32 target\n\nThis doesn't work yet, because distcheck complains about versioninfo.o not being removed by distclean."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/471ade65edd27b83edc3da7faf5a23dd283b33d8", "message": "set version to 0.5.0"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2aa247b511ddfd855c2ff4b56ead1075d77414d5", "message": "fix patch version comparision\n\nThanks atwupack for catching that."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/eb8fdc63ee9e809ab921738ebfe70337dce6e184", "message": "update ChangeLog with new defines"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/cfc9dd12efca20bcd4cc70023d17900b5abe6c12", "message": "move VERSION_NUM calculation to build files\n\nThis duplicates the code, but makes discid.h easier to read and\nunderstand."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0797025c35a22685552cb6fc6e148f2cae1a86ae", "message": "add DISCID_VERSION_NUM for easy calculation\n\nThis is basically one decimal number created using two digits for each\npart of the version.\nThis breaks when patch version > 99 (unlikely) and has to be adapted when\nthe major version changes (> 0).\n\nMAJOR is not used now, since we can't have leading zeroes.\nThis would make it an octal number."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/58476905d0bf82c85228e9d9ca284893da45706e", "message": "cmake: cleanup out-of-source build\n\nThe build worked, but two files were placed in the source tree.\nThe default for configure_file is to convert a file from the source tree\nto one in the binary tree anyways, so just use that."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/16a8fb90a95ba6b37a1eaf1aa44e2046e069ba6e", "message": "use distcheck for distribution\n\nThanks @kepstin for the tip."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6d0a5fdf61c6973d9fe4a27fcdbb2ad58f81282a", "message": "Merge branch 'discid_version'\n\nSee pull request #14"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0124a157db05a5209d8ddc8bacec4f8b9d4ff8d2", "message": "fix relative include in discid_private.h\n\nThat worked a long time, but with .in includes it breaks\nout-of-source builds."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/007a025f48b5c1b1c33427c91631650ac766fb6a", "message": "merge version defines to discid.h.in\n\nThis way it appears in the documentation and is easier to understand."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/af2ea2ceafbbabc6f1c818a467b54ff8548091dd", "message": "only ignore \"discid\" at the root\n\nGit add include/discid/discid.h failed before,\nsince include/discid was matched by .gitignore."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/12736a8cc30f307b619f7655f3779da839a50437", "message": "fix compilation on SunPro, re #13\n\ntested with:\nCC=/opt/SUNWspro/bin/cc cmake .; make\nwith\n$ cc -V\ncc: Sun C 5.10 SunOS_sparc 2009/06/03\n\n(hiding of internal symbols works now)"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f530b8b143d4e1a348240f170ab0a98f12419329", "message": "doc: last track = last audio track"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7dd1fb070344d00eff1e9cdbf08ea1c1bd6dea14", "message": "update ChangeLog and AUTHORS"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a9caaefc7929c4c93bd62cc383636bad61350dde", "message": "rename to DISCID_HAVE_SPARSE_READ"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a08756071924eb97feb35705d13169ef074e7be4", "message": "define HAVE_SPARSE_READ, LIB-35\n\nto make it easy to optionally use read_sparse()\nwhen available without requiring a current libdiscid."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/63cd9aece885f543c76cbdb3a8d4dceece931562", "message": "simplify windows dllexport again\n\ndeclspec seems to be the \"standard\" way on Windows.\n\nAdding the __attribute__ version didn't make a difference.\nI was just testing wrong (with nm, like on Linux).\n\nThe correct test was:\nojbdump.exe -p libdiscid.dll | grep -A 30 \"Ordinal/Name Pointer\""}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/353dbd11149718c27a5e9853be036af67415338a", "message": "Merge branch 'hide-private-symbols'\n\nConflicts:\n\tinclude/discid/discid.h"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/9ff93cedcde6cfaafbc9786c5109497ce9f32096", "message": "fix visibility warning on cygwin, re #13"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4bd9e6cd06588a7b79b8e054d1410a6e759768a5", "message": "Merge pull request #13 from sebastinas/hide-private-symbols\n\nHide internal symbols on Linux and possibly Solaris/BSD.\r\n\r\nThey are not part of the API."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/efab3d76b6e7c92cbb47d6e87e3a71ac172ef696", "message": "minor documentation fixes in discid.h\n\nLines shouldn't exceed 80 characters,\nalso linking the discid_feature enum."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6e023e239b5a328969b92b3e92a31e5b1bd712b9", "message": "fix indentation in discisrc.c + gitignore fixes"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/30b7681119841bb1ce171eaa705f5019eec5ccb5", "message": "Merge remote-tracking branch 'phw/win32_fixes'\n\nSee also pull request #12"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/154a2374d818daab5d8f72215d804edca52c8df6", "message": "update AUTHORS and ChangeLog for read_sparse"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/37130b16480fa92e7ac4e891d7ebff09f49e4c40", "message": "better coding style in darwin disc_read\n\nOnly fixing that one function, since it was recently changed a bit,\nso we have consistent style at least in the function.\nOther fixes should be made with other code changes.\n\nI am not necessarily fond of tab indentation, but that is\nwhat the main files are using."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c300d9a7fcc13a40d267efdbdc5b80ad2ea5fa20", "message": "Merge remote-tracking branch 'phw/read_sparse'\n\nSee LIB-29 and pull request #11"}], "pull_requests": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/45", "title": "Windows alignment (raw isrcs)", "body": "This branch hopefully fixes issues with some drives on Windows.\n\nThe first step is to get the alignment from the adapter and the next to use that alignment when issuing scsi commands like mentioned in http://msdn.microsoft.com/en-us/library/windows/hardware/ff560521%28v=vs.85%29.aspx.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/27", "title": "LIB-47: I18n of error messages", "body": "http://tickets.musicbrainz.org/browse/LIB-47\n\nThis is work in progress. A bit of testing code was included so a string is printed on discid_new() invocation. That string is translated using gettext. (needs more work).\n\nBuilding itself works fine on Linux with cmake and autotools.\nAutotools already includes near full gettext support. implementing --disable-nls and a fallback when libintl.h is not found is still missing. .pot/.po are updated with \"make update-po\" in po/ or with make dist.\n\nCMake builds don't have any support for .mo generation/installation, but the binary is able to use these (when installed through other means). Shouldn't be too difficult to create targets manually though.\n\nNot testing on other platforms was done yet.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/6", "title": "LIB-11: raw (low level) ISRC reads", "body": "Most of the implementation for raw reading of CDs to get the Q sub-channels and the ISRCs in them is platform independent.\nThe only thing that is platform specific is `scsi_cmd` to issue a direct scsi command.\n\nRaw reads are only optional in the spec (so I would keep other options as backup solution) and we might need to test for the support somehow.\nAdditionally: virtually all programs use the (more high level) \"sub-channel command\" approach. So that approach is tested and our \"raw approch\" would need more testing.\n\nWe also have to test and probably fix building again since we use new files and have new internal dependencies.\n\nFirst tests show, that raw reading really fixes [LIB-11](http://tickets.musicbrainz.org/browse/LIB-11)\n\nSub-Tasks:\n- [x] platform independent part\n- [x] Linux\n- [x] Windows\n- [ ] OS X / Darwin\n- [x] Check for Command availability\n- [x] Check CRCs\n\n**note to testers**: There is a `discisrc` command you can use to test libdiscid without external tools.\nFor Windows testers there is a binary available: [libdiscid-raw-win32.zip](http://mbsandbox.org/~jonnyjd/dev/libdiscid-raw-win32.zip)\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12171421", "body": "There is also an old ticket: http://tickets.musicbrainz.org/browse/LIB-10 (and one in trac) with a somewhat equivalent patch.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12171421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12172798", "body": "It would certainly look better to remove the braces in all `MATCHES` expressions though.\n\nThe underlying problem with the braces is this:\n\n```\nif(<variable|string> MATCHES regex)\n```\n\n(see: http://www.cmake.org/cmake/help/v2.8.8/cmake.html#command:if)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12172798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12176157", "body": "Done.\n\nI still left the comment in there. Not sure if it helps or confuses, now that all braces are removed anyways.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12176157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12194694", "body": "I uploaded the resulting documentation to http://jonnyjd.github.com/libdiscid\n\ncreated with:\n\n```\n./autogen.sh\nconfigure\ndoxygen Doxyfile\n```\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12194694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12195881", "body": "Okay.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12195881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13041639", "body": "I would like to release libdiscid 0.3.1 with this ISRC support on Linux and the build fixes.\n\nIt actually doesn't add additional interface features, since ISRC reading was enabled for all platforms already. It just gave no ISRCs for some platforms. So this is no 0.4.0, yet.\n\nWe still might want to think about [LIB-23](http://tickets.musicbrainz.org/browse/LIB-23) (telling if ISRC-reading is available on a platform. (that would be 0.4.x?)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13041639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13049618", "body": "This looks quite promising. I don't know when, but I might work on this a bit and merge it then.\nThis would be for 0.4.0 the earliest.\n\nThis would obviously need a merge from `master` (or rebase) first and then a lot of testing on different platforms.\n\nI can personally test this on Linux easily. Testing on Windows is somewhat possible, Darwin seldom possible, but possible. The trick is that I can't test disc reading on virtual machines ;-)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13049618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13049650", "body": "@lalinsky You probably don't have time, but I am assigning you just in case you still have some notes or a basic understanding of the pitfalls you discovered you might want to share.\n\nThere were probably reasons this branch was \"abandoned\".\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13049650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13050126", "body": "Yes, releasing a beta for big changes like this seems reasonable.\n\nThanks for your report.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13050126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13051726", "body": "Fixed these \"magic numbers\" with `sizeof` (rebase)\n\n`SG_IO`: all the \"cool kids\" are using it :-). In this case it's cdda2wav and cdrdao. That is how I found out about it, but it still is a re-implementation. Not only because of possible licensing issues (GPL vs LGPL), but because we have a different (smaller) use case for SG_IO.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13051726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13054566", "body": "This implementation has the same problem with reported duplicate ISRC as nearly all other implementations, as documented in [LIB-11](http://tickets.musicbrainz.org/browse/LIB-11).\n\nThat is something to fix later, because that is probably more difficult to fix then the whole implementation was now.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13054566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13099528", "body": "On Linux we used `SG_IO`, on Windows we probably should use `IOCTL_SCSI_PASS_THROUGH_DIRECT`.\nNo clue how it would work for Darwin, but it should work.\n\nLike I said, implementing `scsi_cmd` for every platform is enough. We could als get MCNs on platforms where we don't have an easier solution. (But there seems to be no data quality problem with MCNs).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13099528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13243175", "body": "I also tried read isrcs using the normal (`READ SUB-CHANNEL`) method, but trying multiple times.\n\nThat actually helped with some of the problems, but not all of the test cases.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13243175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13243672", "body": "Not really sure why github shows this pull-request still having 6 commits. 4 of these are already in master as can also be seen in https://github.com/metabrainz/libdiscid/compare/master...isrc_raw\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13243672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13861848", "body": "This implementation is of course very elegant.\nAn implementation using string arrays is at #8 \n\nThe **disadvantage** of this method is, that the binding needs to create the list of features explicitely.\nSo when new features are added to libdiscid, possibly features which need no API change, the binding also needs to be updated so the actual user can see the new feature in the list.\n(This is about completely new features that add a new define and bit mask)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13861848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13865503", "body": "With the trick of handing out static strings (from defines) this this nearly as elegant as the bit mask solution #7 .\n\nThis implementation has the **advantage**, that the feature list is reached directly to the user without logical differences in the binding.\nSo even completely new features, possibly not changing the libdiscid API, don't need an update of the binding.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13865503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13981826", "body": "I also added the C usage in a commit that should be \"rebased away\" before merge obviously.\n\nNot sure why people don't like bitmask, but this looks okay to me.\n\nYes, there is no reason to use them because of size restrictions, but they work nice as a \"stack of booleans\".\nOr it is only me that thinks bitmasks are C devs best friend. (Although they should not be magic numbers)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13981826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13982020", "body": "Okay, after talking with @kepstin, an actual C user of libdiscid: Using string arrays in C is horrible.\nAnd I kind of agree that it is a bit too much when implementing it in our small discisrc program.\n\nSo I went ahead and used a feature of my implementation that I didn't document yet:\nThe location of the features in the string array should be fixed. So we only have to check one index in the array.\n\nHowever, then we **really** should make sure that the index is correct **and** should have a way to access this withtoug \"magic numbers\". That means at least a couple more defines and possibly an internal api for setting features.\n\nThat way of access is just a bloated bit mask. An _array mask_ where one (8 byte) element in the array is used as a boolean.\n\n**So this still needs work** and that is actually two different APIs for C users and bindings.\nNot sure if users understand the API if it is coupled like that. It sure needs a bit of explaining.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13982020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13983264", "body": "Current state in my head:\n\n`_set_feature(DISCID_FEATURE_ISRC)` (private)\n`get_feature(DISCID_FEATURE_ISRC)` (\"boolean\"/int)\n`get_feature_list(char *features[16])` (what is now `get_features(), for use by bindings)\n\nInternal representation still the same.\nYes, we need to decide on a maximum size.\nHowever, since C users only use `get_feature()` and only the devs of the bindings (not the users of the bindings)\nuse `get_feature_list`, `having get_feature_list2()` would not be the end of the world.\nStill better than having 32 functions just to get feature details of 3 other API functions.\n\nThat needs 2 defines for each feature:\n\n```\n#define DISCID_FEATURE_READ 0\n#define DISCID_FEATURE_MCN 1\n#define DISCID_FEATURE_ISRC 2\n...\n\n#define DISCID_FEATURE_STR_READ \"read\"\n#define DISCID_FEATURE_STR_MCN  \"MCN\"\n#define DISCID_FEATURE_STR_ISRC \"ISRC\"\n...\n```\n\nWe technically don't need the string defines in the public header, but this way we can make sure the documentation (=doxygen api doc) matches the implementation.\n\nMaybe the \"READ\" feature should be named \"READ_CD\" or \"CDTOC\" or just \"CD\".\nJust in case we do implement generating IDs for DVDs and Blu-Ray Discs.\n\nPS:\nusing bit masks is still an option, but since they neither work great for bindings, nor C devs were ethusiastic about them they might not be the optimal solution.\n\nEDIT:\nfor the first set of defines an `enum` might be a better choice.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13983264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14006578", "body": "Yes, \"in the pipeline\".\n\nAbout details:\nWhy the typedef in this case? `enum discid_feature` as a type would tell everybody that this is an enum right there.\nWhy start with 1? I will probably start with 0. That makes it easier to work with arrays. I probably use an array for internal representation anyways (static or on request).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14006578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14057605", "body": "Hm, evaluating to TRUE is a good reason in general.\nNot sure if that make sense here. The only check is done internally in `has_feature()` and is a switch and in all other cases you should never check against values in the enum. They are used in the API is input-only and are internally indexes to an array (the one created by `get_feature_list`). An array with the first index always being empty is possible in that case though.\n\nI did update the API by the way (see commits above).\nWe now have:\n\n```\nenum discid_feature {...};\ndiscid_has_feature(enum discid_feature feature);\n\nDISCID_FEATURE_STR_READ \"read\"\nDISCID_FEATURE_STR_MCN \"MCN\"\nDISCID_FEATURE_STR_ISRC \"ISRC\"\nDISCID_FEATURE_LENGTH 16\ndiscid_get_feature_list(char *features[DISCID_FEATURE_LENGTH]);\n/* generated internally with discid_has_feature() on access */\n```\n\nWhen I would change DISCID_FEATURE_LENGTH that would be an ABI change\nand according to our discussion in #musicbrainz could be seen as an API change or not.\nI would see it as an API change.\nRecompiling would fix things for C users, but for bindings a code change is necessary.\nBoth are \"not okay\" so this is an API change, although one that C code could recover from easily.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14057605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14132587", "body": "I think #8 is the better solution, which now provides two possibilities: has_feature() and get_feature_list().\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14132587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14132658", "body": "@phw If you could have a quick look at the API if you see any problems, that would be great.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14132658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14296839", "body": "@phw: I guess I will go with all lowercase strings.\nThere is a general implementation with bitmask at https://github.com/metabrainz/libdiscid/pull/7\nNobody except me like it, though. It would be possible to set the numbers in the enum as bits, yes.\n\nI was also thinking about the speed impact that 0.3.0 had. So LIB-29 is quite valid.\n\nYour proposed `discid_read` can't be named like that, since we already have a function of that name with a different number of arguments.\nApart from that, I like the idea. This is something new, but it might be good to consider that for this API change.\n\nUsing bit masks makes my internal implementation a bit different (can't put features at the same position in the string list anymore), but that is an easy change.\n\n@kepstin: We would have to think about what exactly such a function would do a bit more.\nIt is up for debate whether `discid_read_feature`/`discid_read_sparse` should fail or return a bit mask and so on.\nI don't think I would include that in 0.4.0, even if that means we will even have another API upgrade (0.5.0) coming.\n\nSo please only talk about what needs to change in the `get_features` API for now:\n\n**Any problems using bitmasks in the enum?** (apart from not having fixed positions in the string array)\nI don't see any so we could just do it like that and see if it helps for other things later on.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14296839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14301602", "body": "@kepstin `discid_get_track_isrc()` won't fail, since it doesn't now and we shouldn't change that.\nHowever, there are no actual ISRCs returned.\n\nAnyways, the `discid_read_sparse(..., ..., features)` is discussed in http://tickets.musicbrainz.org/browse/LIB-29\n\nDo you see any problems with using bit masks in the enum?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14301602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14321183", "body": "I made room for 32 features in the array, used lowercase feature names and implemented the enum as a bit mask/field.\n\nSince this is fairly stable now, I already merged it so I can work on dependent features.\nWe can still change this until 0.4.0 is actually released.\n\nI set the schedule now for a release on thursday the 7th of march.\nI won't release when there are problems or things are not done, but we should push this forward.\n\n**I still accept fixes/feedback** until this is actually released. So please tell me if you see any problems with the now somewhat stable feature API.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14321183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14449935", "body": "@kepstin This is what I talked about a while ago on #musicbrainz.\n\nDo you see further probles with this approach/patch, other than the BSD-problem mentioned in the ticket?\n\nOn BSD libtool seems to use `soversion=current`, which might break when we release 1.0.0 and soversion is reset from like 5 to 1 for BSD. However, most packages actually fix the packaging to use `soversion=current-age=major`.\nSo I am not sure if we should make things complicated just to be compatible with a broken scheme that nobody wants to use anyways.\n\nI still have to find a reason why BSD should use `soversion=current` (see the ticket=.\nThe only reason I could think of is: \"there are no backwards compatible changes, ever\" as a BSD concept.\nBut then it wouldn't be a big deal to break that scheme anyways. It already breaks with ever backwards compatible change we release.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14449935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14473251", "body": "As mentioned in http://tickets.musicbrainz.org/browse/LIB-33\nLibtool versioning on BSD is condered broken anyways and actual packages use `ltverhack` to use Linux versioning.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14473251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14629472", "body": "A note on this:\n\nI actually use Cmake for the distribution, but that also has to run through Autotools `dist` because that is the safest way to get all these autotools files in the distribution.\nRemoving Autotools support would fix issues like this, since my Cmake dist is simply based on `git clone`. So there would be only one place where to add new files and that place would be obvious with `git status`.\nHowever, I think removing Autotools build shouldn't be done on any 0.x release, if ever.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14629472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14682918", "body": "@phw \nYou just put `@kepstin` in your comment, that will \"call\" him ;-)\nGithub won't auto-complete users that are not part of the repository or the pull-request, though.\n\n@kepstin\nIf you can give feedback on this issue/pull-request that would be great.\nDoesn't have to be now though.\n\nI won't merge this branch that soon (probably not this week). One reason is because I want to wait for feedback and ponder about it. Another one is to have master in the 0.4.x branch for a while. That makes it easier when we have changes we want to release in that branch. (Although it is possible to create a 0.4.x branch, of course)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14682918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15593868", "body": "I only had time for a quick check, but this looks fine now. I will merge this when I have more time and then also think about when the next release will occur (maybe we can add more changes before that, but shouldn't take months).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15593868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15978433", "body": "Tested on Arch Linux and SunOS (5.10, gcc is used) with cmake and autotools.\n\nOn Cygwin it doesn't work by default, since gcc 3 is the main gcc package. When using the gcc4 package it still doesn't work, but I get warnings:\n\n```\n/home/JonnyJD/git/libdiscid/src/disc_win32.c:42:1: warning: visibility attribute not supported in this configuration; ignored\n```\n\nOn MinGW it also didn't work before and doesn't work now.\nMinGW sets `__WIN32`. If I remove the WIN32 part I get the same Warning as on Cygwin.\n\nVS hopefully works, but like I said, I never tested that myself. @phw might have tested that.\nThe \"official\" Windows binary is built with MinGW.\n\nTesting on Darwin and the BSDs is still on my TODO. I don't think any of these use clang by default, but I don't know for sure. Clang was in consideration for OpenIndiana, but I couldn't get that to work earlier.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15978433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15986515", "body": "Tested on NetBSD and it works fine (gcc 4.5).\n\nOn OpenBSD 5.2 it works, but not for `rfc822_binary`. Possibly because gcc 4.2.1 from 2007 is used.\nSame thing (and old gcc 4.2) for FreeBSD (!= kfreebsd, didn't check that one as it is just linux in that regard).\n\nDarwin/Mac OS X joins the \"outdated gcc\" group with gcc 4.2.1. So it mostly works, but not for rfc822_binary.\n\nI didn't try to use clang just for the hack of it and it wasn't the default for any system (neither with cmake, and not with autotools).\n\nSo overall, everything is fine for Linux/Unix.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15986515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15988162", "body": "2c84200498f217f3d89edc4b9a6ef8bf4c385be6 works for Darwin (and probably also for (Open/Free)BSD).\ntesting with `nm libdiscid.0.4.1.dylib | grep T`\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15988162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15988428", "body": "I checked now 4bbde59d2b51f9e5c81a0d318229ceb4013df6e3 correctly and it seems to work.\n`objdump.exe -p libdiscid.dll | grep -A 30 \"Ordinal/Name Pointer\"` gives only the discid_\\* functions.\nNo difference though between using `__attribute__` and `__declspec`.\n\nTesting with nm does always seem to add all functions, no matter using any dllexports.\nI remember testing things, also using objdump, but I should have noted the objdump test I used.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15988428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16059264", "body": "I created a ticket to make this change visible to the bug tracker: http://tickets.musicbrainz.org/browse/LIB-36\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16059264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16122578", "body": "Okay, I forced using SunPro now on that SunOS machine to test that part, too.\nThe result (without the fix):\n\n```\n[ 14%] Building C object CMakeFiles/libdiscid.dir/src/disc_solaris.c.o\n\"/vol/fob-vol1/mi05/dewender/git/libdiscid/include/discid/discid.h\", line 39: warning: macro redefined: LIBDISCID_API\n\"/vol/fob-vol1/mi05/dewender/git/libdiscid/include/discid/discid_private.h\", line 91: warning: old-style declaration or incorrect type for: LIBDISCID_INTERNAL\n```\n\nWell, obviously, because `LIBDISCID_INTERNAL` is never defined..\n\nBut the main reason I tried `CC=/opt/SUNWspro/bin/cc cmake .; make`:\nIt works after the fix and `nm -D libdiscid.so.0.4.1 | grep -v UNDEF` now doesn't list the internal functions anymore. (`grep -v UNDEF` removes C functiosn like malloc, printf etc. from the output).\n\nPS:\nIt took me a while to find out that I need to use `.../bin/cc`, rather than `.../bin/CC`. CC seems to be the C++\n`cc -V`: \"cc: Sun C 5.10 SunOS_sparc 2009/06/03\".\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16122578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16127458", "body": "And I also forced using clang on FreeBSD 8.3 and it works fine. (clang 3.0)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16127458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16179451", "body": "Out-of-source builds fail:\n\n```\nmkdir build\ncd build\n../configure\nmake\n```\n\nyields\n\n```\n../../include/discid/discid.h:27:21: fatal error: version.h: No such file or directory\n```\n\nversion.h is in the (out-of-source) build dir (build/include/discid), but discid.h stays in include/discid).\n\nWith cmake this works fine. You have the choice if you want to put things in SRC or BIN dir.\nIs there a similar trick for the Autotools/Autoconf?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16179451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16180849", "body": "I fixed that. (I am in the process of testing an merging your changes)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16180849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16338788", "body": "Apart from the versioninfo.rc change mentioned above, this is ready for merge. I did check this on Linux, Mac and Windows. After this is merged I will also test this on the other platforms (at least before the next release), although I don't expect additional problems when it works on these.\n\nI think I would also go for \"non-recursive automake\", but that is something I might be able to do with the article you posted on IRC: http://www.flameeyes.eu/autotools-mythbuster/automake/nonrecursive.html.\n\nYou can also do the \"non-recursive automake\" if you want to, since you brought that up - either in this branch or a new pull-request.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16338788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16343977", "body": "Feel free to start another pull request for the \"non-recursive build\". If I make progress on that, I will open a pull-request.\n\nThis doesn't seem to be as trivial when doing something else than sources. I did a quick test with the headers and all I get is `error: required file 'include/discid/Makefile.in'. It works when having empty files in place..\n\nEDIT:\nDon't mind me.. I need to remove them from AC_OUTPUT..\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16343977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16351725", "body": "This should be ready for merge. Tested \"make distcheck\" (and simple make and check) on Linux (out-of-source), Windows and Mac OS X. I will probably merge that tomorrow.\n\nOverall this also removes a lot of clutter in the output, because there are considerably less \"entering/leaving directory\" messages.\nAdditionally we now only have two main files for the autotools to maintain: configure.ac and Makefile.am. The distribution tarball also has a lot less Makefile.am/.in files, of course.\nQuite happy about these improvements. Using autotools to build is less of a pain to use now. Still no option for Windows (MSYS/Cygwin) though. since the shell implementation can't cope with all of these fork()s that are used by configure. It's now faster on windows anyways.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16351725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16864998", "body": "@phw That would be nice. I also don't have VS.\n\nTested with a quick distcheck on Linux with cmake and autotools and it seems to work fine.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16864998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16874323", "body": "I kind of hoped this is already what `cdaudio` does on Windows. Now looking at the code, this just a placeholder for `D:` in the code..\n\nSimilar to Mac, some code to accept drive numbers (1,2,...) would be nice.\nIt is not as much of an issue on Windows, since drive letters are fixed, whether a disc is in the drive or not.\nThat is different for Mac. Mac disc device names are fairly unstable.\nOn Mac this does seem to be difficult (or I just didn't find anything), unless we use a `drutil` system call.\nSee: http://tickets.musicbrainz.org/browse/LIB-28\n\nAs an additional note:\nWe should never have accepted the empty string as a placeholder for the DEFAULT_DEVICE, but now we probably shouldn't change that.\nOn Linux we just take what we get as a device. If it was given as NULL, DEFAULT_DEVICE is used, otherwise it better be a working device.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16874323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16874970", "body": "Wait, isn't that what happens on Anything using Windows XP or higher, using `cdaudio`?\n\nPlease also have a look at #5. This is basically a change in the pipeline and it involves removing Windows 9x completely.\nSo it might be no issue at all that the \"cdaudio\" thing only works in Windows XP.\n\nNot sure about the drive number thing. Like I said, drive letters are fairly stable on Windows.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16874970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16880024", "body": "For others:\nI intend to merge this to master in some way, including removing the Windows 9x code.\n\nThe plan was to at least merge master into this branch in the time until the next release and maybe even finish this branch.\nThe problem with the branch and the reason I didn't work on it before is that it mixes Windows changes (which I don't know much about (though it should be possible to learn about) and can't test in the case for MSVC) with an actual bugfix (LIB-7) and it changes a lot since a toc.c file is split from the code.\n\nMaybe I can split off the TOC part and merge that separately. That might enable somebody else to check/review the Windows changes.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16880024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16887202", "body": "Yes, the data-tracks branch still includes `D:` as default_device. However, was that done the wrong way?\n\nIn the master branch `D:` is only used when `GetVersion() < 0x80000000`. Otherwise `cdaudio` is used as a default.\n\nSo what does  `GetVersion() < 0x80000000` do? I would think it marks some old version, but `return mb_disc_unportable_nt` suggests that is the Windows NT branch (which is also used in Windows XP/7 etc).\nIn that case `cdaudio` is something that only worked in Windows 9x.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16887202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16893376", "body": "I found what that GetVersion() line is supposed to do:\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms724439%28v=vs.85%29.aspx\n(make sure you enable some extra JS scripts on that page to enable the user comments)\nA user comment quoted an older MSDNA (the one I couldn't find):\n\n```\nFrom older MSDN:\nTo distinguish between operating system platforms,\nuse the high order bit and the low order byte,\nas shown in the following table:\n\nWindows NT\n    High order bit: 0\n    Low order byte (major version number): 3 or 4\n\nWindows 95 and Windows 98\n    High order bit: 1\n    Low order byte (major version number): 4\n\nWin32s with Windows 3.1\n    High order bit: 1\n    Low order byte (major version number): 3\n\nFor Windows NT and Win32s, the remaining bits in the high order word specify the build number.\nFor Windows 95 and Windows 98, the remaining bits of the high order word are reserved.\n```\n\nSo `GetVersion() < 0x80000000` just checks if the highest bit is 0, which means it is NT-based.\n\nAnd that in turn means `cdaudio` as default device is only directly supported on deprecated Windows (9x etc.).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16893376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16895598", "body": "The whole \"default device generation thing\" should probably go to [mb_disc_get_default_device_unportable()](https://github.com/metabrainz/libdiscid/blob/master/src/disc_win32.c#L38). Possibly combined with changing or removing `MB_DEFAULT_DEVICE`.\n\nIf you have time for that. I can also do that later. Your code is also useful if not.\nThat part of the code is already a bit of a mess before your patch, so you don't necessarily have to clean that up.\n\nThe problam with not having discid_get_default_device() as a real constant (not dependent on the actual machine) is that it might not work on integration tests.\nI am well aware of that and that is already the case with the Darwin/Mac implementation for quite some time.\nIn python-discid I only test if DEFAULT_DEVICE is not None.\nSo it can be the empty string (but should not be NULL in the end).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16895598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16910814", "body": "Yes, doing the merge of win32 and win32_new in #5 before actually changing things like this would be the best way to go.\nSplitting #5 up in two branches works, but that only makes merging the TOC changes for Unix easy. That one commit for Windows (27888a1eb27740c08b66ab8b430876fa0c9ea890) includes the TOC changes, so it shouldn't be rebased in a branch without the toc changes.\nI do would like to have the TOC changes in a separate branch for a while to make some tests.\nMaybe I can see if I can revert the toc changes for the \"windows_rename\" branch. Not sure if rebasing and reverting is the way to go here. Maybe just doing a new commit for the win32/win32_new merge is a bit more clean and we only keep the other commit for reference for the toc branch.\n\nNot sure when that can happen. Don't wait for this, this week. I do intend to make it for the next release though, since your change in itself is fine and doesn't need as much testing as raw ISRCs or the toc changes. (the toc change possibly won't be in the next release)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16910814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16911146", "body": "I thought I could still rely on DEFAULT_DEVICE being `True` (as in, not None/NULL, not 0, not \"\"), but like I said, that broke with Mac. Of course you can't check the actual value generically.\nMaybe returning \"D:\" as a default if no disc device is found at all (possibly on a CI machine) is an option.\n\nSame goes, for Mac and \"1\", but for that to work I need an implementation using numbers.\n\"/dev/rdisk2\" is another option for a default when no drive is found at all.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16911146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16924392", "body": "I also tested it on Mac. Works fine.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16924392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17087642", "body": "Found some info about the CRC:\nThe CRC-16 is on CONTROL, ADR and DATA-Q. MSB is \"first out\". On disc parity bits are inverted, syndrome compared with 0, polynomial: x^16+x^12+x^5+1\n\nThat should be enough information to code something, but I didn't start, since I first have to look up how CRC actually works.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17087642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17453350", "body": "As stated in http://tickets.musicbrainz.org/browse/LIB-42 I would like to move the windows platform cleanup to a separate branch.\nIt just doesn't make sense to bundle these two things here and we need the cleanup for other branches. So we will merge that to master quite soon and can merge that to the branches again.\n\nThe TOC changes by themselves are not ready for a merge yet and shouldn't block other branches.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17453350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17477306", "body": "@phw: It would be nice if you could run a quick test on VS and do a sanity check.\n\nI tested this on MinGW/MSYS in a Windows VM, with cmake and autotools. Should be fine.\nThere are no real logical changes, I only moved get_default_device over from the 9x code and set it to \"D:\".\n\nEither way, I would like to merge this to master soon, so other branches can use this, especially #20.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17477306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17769997", "body": "All master changes are now merged to this branch, so this is ready for further testing.\nI tested this on Linux and Windows (MinGW/MSYS).\n\nLike mentioned in https://github.com/metabrainz/libdiscid/commit/c1384842746550e8ca6aec3ae3ee4fb490d9f05d#src-disc_toc-c-P67\nthere is also at least one known problem with the branch. (data track as first track is not accepted).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17769997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17787920", "body": "I tested with MSVC (10.0 / express 2010 on XP) a couple of hours ago, so this should be fine.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17787920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17800813", "body": "Yes, I was also a bit shocked about the block of warnings I got when using MSVC.\nThis is similar on OpenBSD. They also have non-standard extensions and push to use them.\nHowever, there are more warnings on MS and more people use MS, I guess.\n\nI checked the warnings some time ago and none of the uses should lead to any problems.\n\nI will try to disable these warnings on MSVC.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17800813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17804955", "body": "Warnings fixed with fa81ceb5eae5c9ce959062c892381cbb6228982a.\n\nThe define is called _CRT_SECURE_NO_WARNINGS for quite some time now, so I use that. The old name should also work in newer versions, but in an intermediate version only NO_WARNINGS worked (that's what I read somewhere).\nI also read this already works on MS VS 2005.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17804955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17811912", "body": "Compilation is now tested on all platforms (with cmake). Next step is to test the actual TOC code with \"weird\" discs.\n\nEDIT:\nI should note, that the new TOC code is not used on Darwin/Mac OS X and that darwin wasn't tested for this reason.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17811912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17820659", "body": "I tested a couple of \"weird\" discs. LIB-7 seems to be fixed now and I also fixed the code such that game discs (starting with a data track) work again.\n\nThere are some discs that still don't work, but this is a different issue \"copy protection\" basically makes some tracks neither data tracks, nor \"valid\" audio tracks.\nTo be able to create IDs for at least some of these we might be able to make additional changes, but we can't fix all of these cases.\n\nThis branch should be ready to merge, unless we find additional (related) problems.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17820659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17873008", "body": "I added Mac support for the new TOC loading, so all platforms should handle discs (with data tracks) the same.\nI also fixed LIB-18 in this branch and made some changes for LIB-16.\n\nThis is now tested on physical machines for Linux, Mac OS X and Windows (XP).\n\nI couldn't test on any of the BSDs with a CD drive, compilation is tested on all BSDs though.\nThis isn't as important though, since there possibly aren't that many users and I don't expect actual breakage.\n\nI will probably let this sit for Pfingsten/WGT/Pentecost and merge it afterwards. I'll then have to decide if I release this as 0.5.1 now or wait for other things to complete.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17873008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19170025", "body": "Well, the first and last commits are completely fine.\n\nHowever, I am not sure if forcing to implement ISRC and MCN functions for every platform is the way to go.\nPossibly we don't need these functions when we can do that with scsi commands later on so I would like to postpone things like that.\n\nOn the other hand: it also doesn't hurt.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19170025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19170234", "body": "Well, this is overall a move to the better, so I would just merge it.\nMaybe changing the signature of `mb_disc_unix_read_toc()` to using fd would be nice.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19170234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19170278", "body": "I decided to release this, after merging #22, but without #20, as there are still open questions for that.\n\nHopefully we will get more feedback for LIB-28 and LIB-43 when I ask for it in the release announcement.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19170278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19235129", "body": "This does seem to take a bit longer. I meased 0.3 seconds for `./discid` without the change and 0.5 seconds with the change. For `./discisrc` this is 3.5 vs. 3.8.\nIf that means people with multi-session discs don't get wrong disc IDs that is well worth it and probably not at all a relevant performance difference.\n\nNote that we only read the TOC twice. Making sure the ISRCs are correct is another task (LIB-11 / raw reads).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19235129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19500411", "body": "Tested on FreeBSD 9.1 with an actual CD drive: works fine. (read feature works and gives correct DiscID, MCN/ISRCs not implemented)\nBy default there is only the /dev/cd0 device on FreeBSD 9 now, while on FreeBSD 8 there is still (and only) /dev/acd0.\n(fixed default device on FreeBSD 9 with a135bda54f4294c26b0ef7147d0b1ea20e6af63b)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19500411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19503859", "body": "Also tested on NetBSD 6.1 (i386) with an actual CD drive: works fine, but c1f3bebec4e05d9673a8862cf04f99d274f2efc5 fixes a compilation warning.\nThere is also this warning multiple times when building with autotools:\n\n```\nconfigure.ac:76: warning: AC_LANG_CONFTEST: no AC_LANG_SOURCE call detected in body\n../../lib/autoconf/lang.m4:193: AC_LANG_CONFTEST is expanded from...\n../../lib/autoconf/general.m4:2661: _AC_LINK_IFELSE is expanded from...\n../../lib/autoconf/general.m4:2678: AC_LINK_IFELSE is expanded from...\naclocal.m4:1038: _LT_SYS_MODULE_PATH_AIX is expanded from...\naclocal.m4:4174: _LT_LINKER_SHLIBS is expanded from...\naclocal.m4:5249: _LT_LANG_C_CONFIG is expanded from...\naclocal.m4:160: _LT_SETUP is expanded from...\naclocal.m4:89: LT_INIT is expanded from...\nconfigure.ac:76: the top level\n```\n\nI do think this is a problem with the version of libtool used, though.\nDefault disc drive works (/dev/rcd0d). /dev/rcd0a also works, but /dev/rcd0d is not present (used on OpenBSD and 64bit NetBSD)\n/dev/cd0d and /dev/cd0a also work. Possibly not with scsi commands later on?\n\nEDIT:\nI also tested OpenBSD (5.3) on the same machine with an actual CD drive. Everything works fine, including default_device.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19503859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19645775", "body": "This probably fixes many cases, but this doesn't fix the case when the original drive isn't attached anymore. In that case only /dev/cdrom2 would exist.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19645775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19690864", "body": "Well, yes. This can happen on other Linux distributions, too. I have also seen problems on Fedora. It's just that I couldn't reproduce problems on Arch Linux, but on a Debian unstable (VM) I installed from one CD drive and never changed anything with the drive and still only have /dev/cdrom1 and no /dev/cdrom. Having stable drive names seems to be more important in the Debian configuration than having /dev/cdrom point to anything.\n\nDoesn't matter much thouch what distribution it is, just that /dev/cdrom doesn't seem to work most of the time (anymore?).\n\nI could also reproduce a situation where only /dev/cdrom2 exists so I am working on parsing /proc for drive information.\nI would like to check `/dev/cdrom` first and then /proc afterwards. This probably yields /dev/sr0 on most current systems, but it is a more general approach than just adding /dev/sr0 to the tests.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19690864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19694374", "body": "/proc parsing done. This should complete the Linux/BSD/Solaris changes for now.\nNote that I don't check for \"Can play audio\", \"Can read MCN\" or similar. Devices not supporting these are very rare now and this can also be tested multi-platform with scsi commands. Parsing stuff in C isn't fun anyways.\nThis is rather something for a separate library if anybody wants to do that.\n\nPerformance wise this shouldn't really make a difference. After all, neither of these actually is an actual IO operation. /dev (when checking for existance) and /proc are virtual anyways. No access of the disk or disc at that point.\n\nScheduled for 0.5.2, not for the upcoming release tomorrow. I would like to publish default_drive changes for all platforms at the same time.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19694374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19775760", "body": "Hm, not sure if that helps explaining how to use libdiscid.This isn't actual usage of libdiscid, but \"general CD TOC usage\".\n\nOn the other hand, this is useful information when using `discid` for debugging.\nSee also https://github.com/JonnyJD/python-discid/blob/master/examples.py#L15\npython-discid does include a seconds API, but this is object oriented, making it easier to add features without cluttering the API.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19775760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19944923", "body": "In general this compiles on every platform now. I only had a real problem on Solaris. Autotools works, but cmake doesn't compile for me without disabling NLS manually `cmake -DDISABLE_NLS=1 .`. Probably because there are different versions of libc _and_ libintl installed on the machine.\n\nNLS can be disabled in autotools and Cmake. Libdiscid compiles just like before then.\nGNU/Linux has built-in libintl support so it works without additional libraries. An external Libintl and a matching iconv (possibly also external) are needed on other platforms (as dependencies). However, NLS is optional.\nThe problem on Windows and Mac OS X is, that libintl and iconv binaries should be included in the binary distributions. Possibly with sources and license (LGPL for both, so this should be fine). We also might want to provide a build with and without NLS?\n\nI am also not sure how it works with the locale directory. The directory is set at compile time, so this can't work with binary distributions (unless they are installed in the same location?). Possibly this can be fixed for/with Picard?\n\nStill only autotools includes a target to update the pot/po files.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19944923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19972974", "body": "Okay, this is now a bit more than just a \"simple test with a disc\".\nEverything from the python-discid tests that makes sense is also done here. Python-discid will still keep that code for a while to test old libdiscid versions. Later on the tests that actually test libdiscid should be removed from there.\n\nThis branch needs a bit of consideration and tests on other platforms and possibly with some weird discs.\nThese tests are run with `make check` so the build fails when tests fail (and are not skipped)!\nAfter that, it is ready for merge.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19972974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20166074", "body": "The problem was found running the test suite from #26 (not yet in master).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20166074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20178670", "body": "Yes.\nFirst impression: Why doesn't Solaris fail nicely already on `open`. Impression after I found the bug: Why did that even work before on every other platform Oo? And it does work on every platform except Solaris.\n\nShows me that making that test suite was already worth it. Maybe I merge the tests today. Tests without discs went fine everywhere.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20178670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20201994", "body": "Tested on all platforms (including disc reads) and with some weird discs.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20201994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20237735", "body": "So I enabled testing of pull requests and found out there is an old Cmake on our build server: cmake 2.8.2:\nhttp://ci.musicbrainz.org/job/libdiscid_PR/13/build_system=cmake/console\n\nI'll see if that can be worked out.\n\nEDIT:\nfor (my) reference: http://cmake.org/cmake/help/v2.8.5/cmake.html#module:GNUInstallDirs\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20237735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20237815", "body": "Currently \"gettext\" is not installed on the build server so \"autopoint\" is not found there.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20237815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20238105", "body": "The build failure in jenkins is probably only because \"make dist\" didn't work back at that time. Merging master or rebasing would probably fix this.\nThis branch needs to incorporate changes from master anyways.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20238105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20239672", "body": "Windows code is updated now, so scsi_cmd on Windows can be implemented.\n\nI also added the test suite from master, making breakage more evident.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20239672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245058", "body": "autopoint installed on jenkins\n\njenkins: retest this please.\n\nEDIT:\nLooks like the previous didn't work somehow. Trying again in the next comment.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245128", "body": "retest this please\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245950", "body": "> It is hard coded to use Visual Studio 2012.\n> That is probably the biggest problem. MSVC isn't really about portable builds..\n> I can't test this at all. My MSVS 2010 is expired (don't feel like registering..) and only nmake still works. MSVC doesn't work on XP.\n\ncross-compilation on linux works in general, but it doesn't do much good when we can't test the build during the build process. Using wine generally works, but autotools doesn't work with it.\nI do want to include a full source distribution (with generated build files) in the binaries, that is why I run the cmake \"dist\" target in the \"distwin32\" target.\n\nAccording to this:\nhttp://stackoverflow.com/questions/5334095/cmake-multiarchitecture-compilation\ncmake doesn't have direct support to set the architecture (except on Mac), but simply using CFLAGS could possibly work.\n\nNothing seems to install into PATH (on installation) on Windows. Even my Python installation needs the full \"C:/.../Python27.exe\" on \"cmd\". In MSYS/MinGW I just installed the zip package and everything is fine.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246119", "body": "Is there a quick way to check if a dll is 64 bit or 32 bit?\n\nYour MSVC build seems to be linked to MSVCR110.dll, which is not available -> even the 32 bit build doesn't work on my system.\nMinGW build also use a msvc runtime, but only MSVCRT.dll, which is the standard available on all windows system.\nSo I hate to tell you, but that build is useless for many systems unless we redistribute MSVCR110.dll, which I really don't like, of course.\nNot sure if there is a way in MSVS to build against the standard runtime only.\n\nThe problem isn't the version number itself, but using any version other than the standard version. I also have msvcr20 to msvcr100 installed, but MinGW doesn't link against these and I only have some of these probably because I have .NET and MSVS installed.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246198", "body": "I tested using CFLAGS -m64/-m32 on MinGW:\n\n`CFLAGS=-m32 cmake -G \"MSYS Makefiles\" ..` works as normal.\n`CFLAGS=-m64 cmake -G \"MSYS Makefiles\" ..` fails with `sorry, unimplemented: 64-bit mode not compiled in.\n\nSo this can possibly work, but I can't test this on my VM.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246573", "body": "There are incoming changes in JonnyJD/libdiscid#2 for thread safety.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246800", "body": "It's not urgent. I don't expect to merge this before I leave for Finnland the coming week and then I'm away for 2-3 weeks.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21451581", "body": "Not really sure if we should or shouldn't do that. Weird programs might depend on the url with regexes to extract the toc string or something similar.\nWhile I do agree that this is not how programs should work with libdiscid, there is no big gain in skipping the redirects either. The redirects are cheap compared to the whole submission/lookup progress.\n\nAll that depends on the plans for the server obviously. When the redirection should be turned off somewhen, then we do have to change it.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21451581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21454115", "body": "Starting to use threading just for that? Not really sure if this is worth the additional complexity. It is a performance issue as far as I understand and probably no bottleneck (compared to reading the TOC from a disc).\n\nHowever, if it works fine on all platforms without (much) additional work then this is possibly fine. I'll do some testing.\n\nThe CI test fails:\nhttp://ci.musicbrainz.org/job/libdiscid_PR/build_system=autotools/33/console\n(that one was started manually, the automatic one had to be aborted for some reason)\n\n```\n  autoconf\nconfigure.ac:43: error: possibly undefined macro: AC_DEFINE\n      If this token and others are legitimate, please use m4_pattern_allow.\n      See the Autoconf documentation.\n```\n\nThis totally misleading error message _is_ fixed by installing autoconf-archive on my machine, but this is yet another thing that isn't installed on the CI server and an additional dev build dependency.\n\nNot a complete showstopper, but I don't like it and it obviously won't be merged until this works on the CI server (over which I don't have full control myself).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21454115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21538685", "body": "@zas: there is a ticket for a TOC string API: [LIB-41](http://tickets.musicbrainz.org/browse/LIB-41).\n\ncreate_submission_url should be safe with a read(), but possibly not with a malicious put(). I'll check that. We could possibly do a limit check for offsets provided.\nI have an open TODO for put() checking anyways, but I opened [LIB-52](http://tickets.musicbrainz.org/browse/LIB-52) for that. I will work on this for the next release, but can't do that right now.\n\nOn actual topic:\nLast time I asked on musicbrainz-devel about changing the submission_url in libdiscid I got told there is no real performance impact and this isn't necessary. (don't know when that has been exactly, so I can't provide a link)\nI guess the new pressure comes from a new server bug that wouldn't have been an issue if libdiscid wouldn't use the redirect. I do want to note that we will have to cater for libdiscid 0.2.2 for quite some time. Pre-made picard packages for Windows and Mac still include this version ;-) That server bug would still exist even if libdiscid 0.3.0 already started using the new submission_url.\n\nWhen the consensus of the server guys is that skipping redirection is of actual help, then I will do it. If it is only for cosmetic reasons, I won't.\n\nEDIT:\nThe current server bug I am talking about is http://tickets.musicbrainz.org/browse/MBS-6565.\nThere are possibly others.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21538685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21539070", "body": "I created a ticket for this (to track comments outside of github):\nhttp://tickets.musicbrainz.org/browse/LIB-53\n\nI found the (short) discussion on IRC a while ago:\nhttp://chatlogs.musicbrainz.org/musicbrainz-devel/2013/2013-06/2013-06-13.html#T18-30-40-213566\n\nThis is also related to JonnyJD/python-discid#32, where I do change to the new url for python-discid  in the first stable API.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21539070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21617570", "body": "`toc=` probably shouldn't be part of the TOC string, see my comment in the code.\n\nI would add another test in test_put (right before discid_get_submission_url) and one each in test_read and test_read_full.\n\nI'll have to think about if I make 0.6.0 the next release then or wait for the release after the next release.\n(I currently scheduled 0.5.2, which is no API addition version).\nHaving that together with the change of the submission_url in one release would be nice, so I will probably just change the version of the next release to 0.6.0.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21617570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21618313", "body": "I didn't understand why your buffer length calculations are safe compared to the previous code. Yes, your buffer is like 120 byte longer and the comment (100*5) is misleading, but why would the prefix alone need 512 bytes? That obviously includes the `+` and stuff already.\n\nThe new and old variants are easily overflown when giving huge (invalid) offsets in put() so [LIB-52](http://tickets.musicbrainz.org/browse/LIB-52) still needs fixing, but this should be done separately.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21618313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21645727", "body": "Yes, that approach works. This still gives a managed string (part of disc object memory) in the API and is powerful for internal use.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21645727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21646612", "body": "Oh and the buffer sizes should be fine now, thanks.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21646612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21662689", "body": "Looks fine now. Scheduled for 0.6.0 and I will see if that will be the next release (skipping 0.5.2) or the one after it.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21662689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21669629", "body": "@zas:\nYou might be interested in this (and I would be happy about a review).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21669629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21705084", "body": "> Does linking against pthread introduce threading? We're not creating threads or anything, so no.\n\nWe are not using _multi-threading_ but we are using platform dependent threading mechanisms. Which would be meaningless if this would be a linux-only library, but raises maintenance effort getting this to work on every supported platform.\n\n> As usual with autoconf macros, one can just drop the macro in m4 (or any other directory specified in AC_CONFIG_MACRO_DIR) and there is no additional dependency. \n\nThat would be worse, because then we have to maintain a 300 line m4 script in our code. (Yes, there is a possibility we never have to change anything at all, but also one having weird bugs in that part for a platform)\nGetting autoconf-archive installed on dev machines would be the better option.\n\nCurrently I'd say this is the best solution, but I am not sure if this is a big enough problem for this solution.\nI'll see if I can get somebody to install autoconf-archive on the CI machine anyways. That won't hurt.\n\nThere is no rush though, I still need to figure out how i18n would work for libdiscid bundled for a Windows or Mac OS X program (MusicBrainz Picard does that). I have a rough idea, but nothing tested or implemented.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21705084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21714086", "body": "jenkins: retest please\n\nEDIT: starting by comment still doesn't work, but a manual start failed:\nhttp://ci.musicbrainz.org/job/libdiscid_PR/build_system=autotools/40/\n(not sure what went wrong, autoconf-archive is supposed to be installed now)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21714086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21718362", "body": "Meh. `autoconf-archive` is now installed on the build server, but the oldstable version (http://packages.debian.org/de/squeeze/autoconf-archive) doesn't include ax_pthread.m4 macro. And this time, there isn't even a backport available.\n\nStill no final decisions (I'll see how complicated i18n is when everything else works, maybe this is a minor issue compared to other i18n related issues), but right now this doesn't look like something I would implement without actual need. (no current impact/breakage performance problem)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21718362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21746524", "body": "Sebastian Ramacher wrote at Monday 29 July 2013 09:00:11:\n\n> On 2013-07-29 01:15:17, Johannes Dewender wrote:\n> \n> > > Does linking against pthread introduce threading? We're not\n> > > creating threads or anything, so no.> \n> > > We are not using _multi-threading_ but we are using platform\n> > > dependent threading mechanisms. Which would be meaningless if this\n> > > would be a linux-only library, but raises maintenance effort\n> > > getting this to work on every supported platform.\n> > > pthread is supported on every major platform. Supposedly there is a\n> > > pthread-win32 for Windows. There is even a equivalent function to\n> > > pthread_once provided by the kernel from Vista onwards.\n\nGood to know. I didn't even check Mac and Windows yet since that is meaningless unless we get i18n to work on these.\nSo the only problem left is the autoconf macro when building the source distribution from the repository.\n\n> > > As usual with autoconf macros, one can just drop the macro in m4\n> > > (or any other directory specified in AC_CONFIG_MACRO_DIR) and\n> > > there is no additional dependency.> \n> > > That would be worse, because then we have to maintain a 300 line m4\n> > > script in our code. (Yes, there is a possibility we never have to\n> > > change anything at all, but also one having weird bugs in that part\n> > > for a platform) Getting autoconf-archive installed on dev machines\n> > > would be the better option.\n> > > There is no need to maintain the file at all. Running aclocal\n> > > --install --force from time to time is more than enough to get the\n> > > latest version from autoconf-archive included.\n\nI think we are talking about different things.\nThere are 3 main ways to get a working libdiscid:\n1. using a libdiscid binary from somewhere\n2. compiling from a released source distribution (.tar.gz)\n3. compiling from the git repository (creating the source distribution)\n\n1 and 2 don't have to care about autoconf-archive and additional m4 macros at all. They are either included in the distribution or \"already dealt with\". This also includes debian packaging. That is possibly also the reason you don't see a problem at all.\n\n3 needs to get the pthread autoconf macro somehow with the proposed changes.\nThis isn't a problem on my dev machine since autoconf-archive is available. However, it is a problem for everybody (or every machine) building directly from the git repository when no current autoconf-archive is available.\n\nCurrently these are people willing to test pre-release versions of libdiscid and the continuous integration build server of musicbrainz.\nAdditionally I build the binary windows and Mac distributions also directly from the git repository. Including using autoconf/automake to build a full source distribution. (Yes, that currently works fine)\n\nThe build server, Mac OS X and Windows don't seem to have an easy way to get a current autoconf-archive.\nDepending on how big of an issue this is, there are ways to solve this, but it _does_ break current workflows and _does_ make things more complex. Fine for important things, but not for things that are just \"nice to have\".\n\n> Apparently the thousand of lines dropped in m4 by gettext and libtool\n> are less of a concern than the m4 file for pthread, so I give up.\n\n\"\u00c4pfel und Birnen..\"\n\nThe macros for gettext and libtool are quite big and make the source distribution (2.) a lot bigger. This is a general autotools problem/feature, but fine. These are macros provided by vanilla autoconf, without additional autoconf-archive needed. All (source distribution) build systems that need autotools (see 3.) have these installed.\nIn contrast, the pthread macros are _not_ part of plain autoconf so they are not available everywhere.\nSo I took\n\n> > > As usual with autoconf macros, one can just drop the macro in m4\n\nas \"I should include these in the git repository\". Which is a valid option in general, but different from adding m4 macros to the source distribution (automatically).\n\nAdditionally, both have an actual usage besides performance enhancements (not sure yet if there is an actual performance impact).\n\nAgain:\nI would like to get i18n working on the supported platforms first and only afterwards possibly do things like including m4 files in the actual repository for this.\nI don't like having code that isn't really specific to libdiscid in the repository, unless necessary or at least very convenient. Lots of bigger projects have these, but we are not \"bigger projects\". I am not saying it is an impossible thing to do, though. Especially when we start adding m4 files to the repository for other reasons it is a small step to add more of these..\n\nI still want to thank you for your contribution. It doesn't make everything work out of the box and isn't what's needed most atm, but it is non-trivial code and it is an improvement (when we fix 3. somehow).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21746524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21977137", "body": "This will be merged (after a review period) together with #24 and #20.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21977137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22053247", "body": "I implemented CRC checking and also changed to reading each sector separately.\n\nInterestingly both changes enhance the quality considerably.  I didn't observe CRC mismatches after switching to separate sector reads and we now read the whole track (worst case) to find an ISRC with a matching CRC.\nAn empty ISRC is \"valid\" in that context and turns up as an empty string (as it did before).\n\nReading sectors separately improves the performance considerably, since we stop reading sectors when an ISRC is found. Previously we read 150-279 sectors at once and checked for ISRCs in bulk.\n\nFull reading (raw ISRCs + TOC) now takes ca. 6 seconds, which is not more (sometimes even a second less) than reading ISRCs \"non-raw\" (tested on Linux, isrc_raw vs. master). So when the raw read is available, we should use it.\n\nTesting for raw read availability (or just falling back to non-raw if it fails) is still TODO.\nImplementing scs_cmd for Windows and possibly Mac is also TODO.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22053247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22137826", "body": "We also need to test this on Visual Studio and we probably have to ship `ntddscsi.h` because Windows doesn't have this included by default.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22137826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22139437", "body": "I almost forgot: I haven't tested this on a physical machine with a drive yet!\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22139437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22146647", "body": "I worked around the dllexport issue with creating `mb_disc_get_track_length()` for internal use.\n\nMSVC compilation is now also tested and works fine.\n\nTesting on Windows with an actual drive and a disc is still TODO.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22146647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22259462", "body": "I tested this on a Windows. with a disc drive. No errors are printed (nothing fails), but there are also no ISRCs found. at all.\nscsi_cmd is called.\n\nEDIT:\nNo ISRCs in discisrc output, but I also added a stderr print to `mb_scsi_read_track_isrc_raw()`.\nTried with admin and non-admin account.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22259462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22319572", "body": "We could easily support optical disc drive numbering on Windows. I just found out `\\\\.\\CdRom0` is defined to be the first optical disc drive. (see [msdn](http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx#win32_file_namespaces)).\n\nThis won't help getting the corresponding drive letter and is just an additional option on how to support taking a number as a drive. When we do support that on Windows, we should also support that on Linux, of course.\n\nPreferred return value for get_default_device is still a drive letter.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22319572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22321046", "body": "Okay, this actually works now. Tested on a machine with a disc drive.\n\nI had to add `GENERIC_WRITE` for the handle we are using. That makes somewhat sense since we send a command to the drive, but I don't quite understand how we got ISRCs before without (transparently) sending commands. Maybe the driver can do that without GENERIC_WRITE, but we can't.\n\nAdditionally I was a bit sloppy with the return value of DeviceIoControl. This returns 0 on failure, while scsi_cmd is expected to return 0 on success (scsi status for success). I know also return the scsi status on windows.\nThe description in scsi.h is wrong and I will change it in the main branch.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22321046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22321128", "body": "A quick review and another test would be nice (@phw: could you do that while working on windows default device?), but otherwise this should be ready to be merged (to isrc_raw).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22321128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22326122", "body": "I built a windows binary (DLL and discisrc.exe) for this branch:\nhttp://mbsandbox.org/~jonnyjd/dev/libdiscid-raw-win32.zip\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22326122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22338779", "body": "Reading for 5 minutes sounds like the drive might not support raw reading.\nIt is interesting though that the scsi_cmd doesn't fail, but also doesn't return anything.That means DeviceIoControl succeeds _and_ scsi status is 0 (success). It also means no ISRCs are found at all (not even with mismatched CRCs). Otherwise an error message would be printed.\nEither way, your drive is an important test case.\n\nI should note that I had a similar case while debugging:\nNot having `GENERIC_WRITE` in CreateFile also lead to a long time of waiting, returning all zeros as data and no disc access could be heard. Also without any error codes\nSo possibly this is what happens when something is not supported and we really have to implement more feature detection. (already on TODO in isrc_raw, but I hoped scsi_cmd would just give an error code when something is not supported by the drive)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22338779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22339640", "body": "We should also try to track down why my build doesn't work on Windows 8.\n\nEDIT:\nThat was just a problem with the \"testing procedure\".\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22339640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22339995", "body": "I added a bit more debug output for the windows scsi_cmd. This tests if the data is all zero, the returned data is not as expected or the return code of DeviceIoControl is not 0 (error) but also not 1 (that's what I had all the time).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22339995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22364017", "body": "I wouldn't use \"CdRom0\" in user output. I would rather use \"1\" and match that to CdRom0 internally (testing if it is a number, checking with `strtol()`, see #37).\n\nThat CdRom1 doesn't work is weird. Not sure if implementing device numbers with `GetLogicalDrives` is better then. Just increment an index every time a CDROM drive is found and break if index == chosen drive. Using that you can also just return \"1\" as default.\n\nI couldn't test your new changes with a drive yet, but it compiles fine.\n\nEDIT:\nI should note that I wouldn't use \"0\" as users don't really like to cope with that.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22364017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22393307", "body": "Did you try the drive again on Windows after I added the debug out? I should also add this debug out to the main isrc_raw branch. Anyways, that should show if no data is returned or all data is zero.\n\nAbout releases without ISRCs. I was under the impression the ISRC field is mandatory, but can be empty. Maybe that isn't the case. I'll have to check that.\nThe spec says there should be one ISRC every 100 sectors (I thought always, but that should be when there are non-zero ISRCs given) so we can just break when we read like 150 sectors without seeing an ISRC.\nI can reproduce something like that with one of my discs. Interestingly there are some CRC errors reported, but not enough that this would be for every 100th sector: The last track then does display an error message `Warning: Cannot get ISRC code for track 14` and one about a CRC mismatch for all zeros. The other CRC mismatches are all non-zero Oo.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22393307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22408423", "body": "Sorry, but I rather don't do that. This means we read only one ISRC per track. Something we did in the raw_isrc branch up until this week and that lead to problems with some drives and discs. This is the reason CRC checks were implemented. There were fewer problems when switching to reading these sectors separately, compared to reading them all at once, though.\n\nMy current idea is to keep a counter for how many sectors we haven't seen any ISRC at all (valid or not) and stopping when this reaches 150.\nIn most cases the result is the same, but we do try to read more ISRCs when we get CRC mismatches.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22408423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22408714", "body": "Well, at least for Mac, numbering disc drives is part of the current solution. It wouldn't be wrong to implement that in the same branch.\nEither way this is a feature that should go into the same release as these PRs go into.\n\nOr do you need commits from other branches? Should we open a new branch to combine these changes?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22408714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22409460", "body": "Unfortunately I didn't read much about scsi command availability detection yet. I remember reading something about that function being part of some MMC suite and that you could check if that suite is available somehow.\nThis possibly works together with the \"sense data\" returned for scsi commands, which isn't yet implemented on Windows (it works a bit weird there), but on Linux. (Have a look at scsi_cmd there).\nGoogling for \"mmc_r10a\" should yield a document about multimedia scsi commands. That is the spec the commands are defined in, but I am not sure if that was the spec were I read about feature detection.\n\nHowever,\nthe tests show that we should be fine just checking for the case when no bytes are returned, which possibly means the command is not supported, but definately means we are not getting ISRCs (out of no data).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22409460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22457812", "body": "Either we show setting the device to NULL without using get_default_device explicitely (like done in discid) or we show how to use get_default_device explicitely, being able to print the resulting device (like done in the discisrc example).\nDoing both in one example is a mess.\nWe can print the device when default_device is used explicitely.\n\nHowever, we should maybe mention the device used in error messages also on Windows. On all unix-like platform this is already done. So it either works or you know which device failed.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22457812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22457963", "body": "Technically this can also print a different device than actually used, since there are two invocations of `discid_get_default_device()` at (slightly) different times involved.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22457963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459378", "body": "The best way to do this is to print the device in the discisrc example, I'd say.\nThat is also what I did for testing today.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459556", "body": "This isn't what you said in your comment, but I read it as \"Drive Numbering on Windows shouldn't be implemented in this branch/PR\"?\n\nI tested this again on a Windows machine and merged this to master.\n\nDrive numbering is a different feature and now tracked in http://tickets.musicbrainz.org/browse/LIB-55 (for Windows).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22482787", "body": "Well, this is definitely something to think about, but having broken code fail isn't always a bad thing.\n\nWe already talked about that in 4700fbe8f12452f7179e4c5544cbdb8b90c2fd5e and from that discussion I got the impression we shouldn't return values to make it easy to display and handle an empty disc, but return explicit/hard error conditions. \"-1\" always seemed like a good error condition that is normally > or >= 0. (while 0 would technically also work here)\n\nSimilar to the other changes:\nIt is also fine when you guys think we shouldn't do that, since we haven't done that previously.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22482787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/24765516", "body": "Discs without ISRCs should take like 10 seconds now, rather than 5 minutes before.\nThe spec says there should be one every 100 sectors (valid CRC or not) so we stop when there isn't one the first 110 sectors).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/24765516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/24780622", "body": "I merged the Windows code for raw ISRCs into this branch now.\n\n@phw:\nYou had a drive that could find ISRCs on a disc with the normal method, but not the raw method.\nCan you retest this now?\nRelevant changes:\nWhen no ISRCs (even invalid ones) are found in the first 110 sectors, then we don't search for more. So there shouldn't be a 5 minute read.\nI also added some debug output in bc102db0794fd120c94d0600ccfc25e2c26e9097. Hopefull that will give some output indicating that something with the command itself isn't working (wrong return type, wrong amount of data returned, all data is zero).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/24780622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25014636", "body": "@phw:\nWe fall back to normal reads now when the scsi command doing raw ISRCs fails.\nPlease retest.\n\nCurrently warnings are printed (to stderr) for every track where raw ISRCs fail, since we don't actually know _why_ it fails. The command can possibly fail for tracks due to weird offsets given in the TOC or other weird things.\n\nThe fallback is implemented in `mb_scsi_read_track_isrc_raw()` and falls back to `mb_scsi_read_track_isrc()`. So non-scsi isrc functions could be dropped. However, I don't want to do that until we have more testing done.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25014636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25038554", "body": "I also implemented \"real\" scsi feature detection now.\n\n@phw:\nIf the command for raw read really isn't available, then only one warning is shown and non-raw isrc reads are used.\nHowever, from the specs I got the impression that any device supporting CDs should also support that command.\nSo possibly your problem is a different one. A bug in the driver?\n\nEither way, I would like to know what the output is with your drive.\nThe detection, fall-back and check for zero length data returned are implemented for Linux and Windows. Possibly the results are different (if these are driver issues).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25038554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25195140", "body": "Merged and added tests in 30678f93d72ed95d3362c9272c83f0220086006d.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25195140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25240879", "body": "FYI:\nI think this is good to merge, but I am going to implement device numbers for Linux before I merge this.\nJust so both are for sure in the same release.\n\nI also merged some related PRs to master recently.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25240879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25391207", "body": "Compiled on MinGW, tested on Windows XP.\n\nI was a bit confused, because I didn't expect to get the same error message when giving an invalid drive number and an invalid name, but it (still) works fine.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25391207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25502271", "body": "Stalker-X (IRC) has the same warnings on windows:\n\n```\ndata requested, but none returned\nWarning: could not fetch features\nWarning: raw ISRCs not available, using ISRCs given by subchannel read\nWARNING: can't read subchannel data!data requested, but none returned\nWarning: could not fetch features\nWARNING: can't read subchannel data!data requested, but none returned\nWarning: could not fetch features\nWARNING: can't read subchannel data!data requested, but none returned\nWarning: could not fetch features\n```\n\n(using libdiscid-w32-scsi.zip today)\n(Plextor px-708a and px-716a)\n\nThe drive having problems for phw was MATSHITA DVD-RAM UJ892.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25502271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25690401", "body": "Testing should be done before merging to master.\nEspecially on Windows, testing doesn't _magically happen_ on the master branch, since I don't have a windows machine with a drive myself and few people actually use the master branch (I know of some Linux users, not sure if you use master on your machine).\nAuthors of code care about it roughly until it is merged into master. I am not complaining or saying it is always like this, but this is the reason I expect testing to be done _before_ merging to master.\n\nMerging to master would have been shortly before the release either way. The release was made _because_ these features were finished ;-)\nThat branch wasn't ready to be merged until I had time to do a full review (obviously not \"full enough\"). So it actually was merged when it was ready to be merged (plus some days I always let things settle).\nWhen a featureset really is complete, it should be merged to master. Yes.\nI am talking about a \"featureset\" here, because these features belong together. They could have been in a single pull request. Having a new branch for all default drive related features would have been an option, but more because of dependencies and we should have done/planned that earlier.\n\nThe reason I found this bug:\nI planned to merge master to isrc_raw after the release (so I don't have 8 merges in a row) -> for that reason the merge was non-trivial (many changes, conflicts) -> for that reason I reviewed conflicting files again after the merge.\nThe conflicts while merging the changes to master were trivial, so I didn't review again after the merge.\nI expected the feature branches to be fully tested, so I didn't borrow a windows machine again to test on it (again).\n\nI don't see anything wrong with the workflow expect that the pull request wasn't fully tested.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25690401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25691475", "body": "I currently think the issues with some drives could be due to alignment problems.\nI will try to implement gathering and using of the alignment of the adapter.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25691475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25699653", "body": "@phw:\nThis could possibly fix the issue with your drive where no scsi command worked at all.\n\nUnfortunately I only know this compiles. I couldn't test this with any drive since I don't have a windows machine available again.\nI made binary at [libdiscid-w32-align.zip](http://mbsandbox.org/~jonnyjd/dev/libdiscid-w32-align.zip).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25699653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25701292", "body": "I made some fixes.\nStalker-X got `alignment: 1` on the failing drive now, but it doesn't help.\n\nSo gathering the alignment seems to work, but either aligning doesn't help or I am not doing it correctly.\n\nEDIT:\nalignment = 0 means no alignment and it can be 1, 3 or 7.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25701292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25703507", "body": "Well, having alignment on the failing drives and no alignment on the working drives (we only tested on of the working drives though) is an indicator that this might go into the right direction.\n\nPossibly we need to do something with the buffer length, too.\nI found this:\n\n> DataTransferLength\n> \n>    Indicates the size in bytes of the data buffer. Many devices transfer chunks of data of predefined length. The >value in DataTransferLength must be an integral multiple of this predefined, minimum length that is specified by >the device. If an underrun occurs, the miniport driver must update this member to the number of bytes actually >transferred.\n\nI didn't find out how to get the preferred chunk length. This is possibly the same as the alignment.\nHowever, since the alignment is 1, any multiple of 2 should be fine and `FEATURE_BYTES = 4000` is a multiple of 2 anyways.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25703507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25704993", "body": "Trying a multiple of 512 for data length. Just because this is an often used power of 2..\nNot sure if that makes sense, since we are not talking about hard disks here.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25704993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25706344", "body": "The same drive that doesn't work for phw on windows, also doesn't work with raw ISRCs on Linux.\nScsi commands to work, the read reaw feature is detected, but no ISRCs can be found.\nNo warning is displayed, so the \"no data returned\" detection either doesn't trigger or doesn't work on Linux.\n\nI should probably check if all returned data is 0 on linux or similar.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25706344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/109574593", "body": "Sounds good. Merged.\n\nThere is no planned release ATM though.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/109574593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220823370", "body": "Indeed, I got\n\n./discid 1\n\n```\nError: cannot open device `/dev/sr0\n'\n```\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220823370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220825827", "body": "Thanks, this looks really cool.\n\nI merged the get_device fixes. There was a time when that commit would disappear form this PR, but somehow it doesn't anymore. Anyways, shouldn't be a problem.\n\nYes, the way to go would be to add a file `src/disc_bsd.c`.\nAll functions which are identical should be moved to that file. I think also `mb_disc_unix_read_toc_header()` and `mb_disc_get_default_device_unportable` are identical. (and `mb_disc_has_feature_unportable()` would still be identical)\nIn `Makefile.am` and `CMakeLists.txt` the bsd sources would need to be changed to also use `disc_bsd.c` then (we support autotools and cmake). (cmake would need extra elseifs in the part starting at line 74)\n\nWould you try to create `disc_bsd.c` and change the build files or should I do that after the merge?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220825827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220834146", "body": "> Would you be opposed to basically merging them both into disc_bsd.c, with tests for **FreeBSD** for the minor deltas?\n\nIf that works, that would be fine.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220834146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220848780", "body": "Looks good.\n\nI won't merge today though, because I still have some other things to do and I want to check everything again when merging.\nPing me again like next weekend in case I seem to have forgotten the PR.\nThe idea is then to release 0.6.2 soon (probably June), including this change as it is a major improvement for BSD.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220848780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220896486", "body": "> Is there anyone using older BSDs? I've only tested on default installs of the most recent incarnations, so I may have broken older versions.\n\nNobody knows. I don't even know if there is somebody on any BSD using libdiscid.\n\nThe question is rather: Are you using features that are only available on recent BSD?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220896486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/221108692", "body": "Should be fine then.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/221108692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/244617727", "body": "Sorry, I haven't seen your pings because I had lots of mail and not much time.\n\nInteresting enough, on Linux I seem to get \"valid\" ioctl reads for the MCN that only give me 0000000000000.\n\nNot sure if that is what's on disc or if that is some kind of default if no MCN is found.\n\nIn case there is an extra flag on BSD to check if there is a valid MCN (or not), I'd prefer to not set the MCN at all. So the mcn is an empty string.\nIn the case the ioctl succeeds, but the MCN is not valid, don't print anything on stderr though (like is done for a failing ioctl).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/244617727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/275916922", "body": "FYI: This was finally (...) merged and is included in the new libdiscid 0.6.2:\r\nhttp://ftp.musicbrainz.org/pub/musicbrainz/libdiscid/libdiscid-0.6.2.tar.gz", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/275916922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/277527923", "body": "This seems to break Debian kFreeBSD, see: https://tickets.metabrainz.org/browse/LIB-66", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/277527923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/277616967", "body": "https://tickets.metabrainz.org/browse/LIB-66", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/277616967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/278736797", "body": "Thanks a lot. I do think that is of help. I previously built binaries manually with the help of VMs.", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/278736797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2550659", "body": "The relevant ticket for this is [LIB-7](http://tickets.musicbrainz.org/browse/LIB-7) (libdiscid doesn't ignore multiple data tracks).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2550659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2557249", "body": "Fixed in fbf133a46e9c6ab2e17489206d4cc00f324f388e\n\nI always test the autotools now in a separate checkout, since that generates loads of build files.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2557249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2557256", "body": "Well, it's only 5 years old :-P\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2557256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2611786", "body": "This tells me that my precious Quake CD is not supported. That is the game \"Quake\" is track 1 and the rest of the CD are audio tracks (by Trent Reznor, great stuff).\nCurrent master gives me this TOC for my disc:  http://musicbrainz.org/cdtoc/RobkGUEVl_VMGIcxnW0WehIUZE8-\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2611786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2611805", "body": "The sole purpose (of the `control` information) is to check if it is a data track (3rd bit set = 01xxb) -> probably needs comments ?\nThere is other information (like copyright bit, pre-emphasis), but only the data track information is relevant for us.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2611805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2611940", "body": "We should probably do what we currently do: treat leading data tracks as if they were audio tracks. In the tracklist they are normally labeled [data track].\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2611940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2990908", "body": "Ehm, yes. You are right. Either < 10 or <= 9.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2990908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2992133", "body": "Of course \"make check\" fails, since \"test_discid.exe\" can't be started on linux.\n\nIt works fine on wine though.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2992133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3037143", "body": "This should fix http://tickets.musicbrainz.org/browse/LIB-38.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3037143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3037312", "body": "`DISCID_FEATURE_READ == 1`, not 0. Changed in 3cc40c73fa48235259a4ac213476ce885b060e35.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3037312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3094821", "body": "I think I might be mistaken here. I found a SCSI-3 MMC draft which states there are 4 ZERO bits (which would be the rest of q_channel[8] and 8 bits AFRAME, which would be q_channel[9].\nSo q_channel 10-11 ar e the 16 CRC bits. and there is no q_channel[12].  (there are only 12 bytes).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3094821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3095265", "body": "Fixed with 20b7fcb16df349a1e301d250cb7b4877554840f2.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3095265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3731825", "body": "This wasn't a bug, that was intentional. See e96a3dce05a4cabed621cbda3383ea24480dd41a.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3731825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3735634", "body": "While, free(NULL) works, you are still not supposed to call any object related functions with NULL.\n\nForgetting to call discid_free() is worse though, so maybe I'll revert that part.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3735634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3735698", "body": "Previously applications were **not** supposed to check for non-NULL at all. They were supposed to check for the return value of read/put.\nDocumentation from `discid_read`:\n\n> On error, this function returns false and sets the error message which you\n> can access using discid_get_error_msg(). In this case, the other functions\n> won't return meaningful values and should not be used.\n\nUsing these functions on !success is a programming error on the user (program dev) side. This change only changes it from a segfault to empty results, which can possibly be reported by the user of a program, while a segfault usually isn't menaingfull unless started in a debugger.\n\nSo checking for NULL, but not checking for the return type of read/put is a usage error. Having !success|NULL even though read/put gives a positive return value is a programming error on my side, which is supposed to be catched by the tests.\n\nWrong usage is not part of the API so an ABI change in that respect is meaningless.\n\nI simply forgot webservice_url somehow, I'll fix that.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3735698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3736130", "body": "This was fixed to return the empty string in e2991487504b9e45968dfb8c98b1a9af5595aca5.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3736130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3736140", "body": "Changed back again in edit e2991487504b9e45968dfb8c98b1a9af5595aca5. Thanks for the tip.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3736140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3741950", "body": "Yes `const char *` would be better as a return type for these functions. You are not supposed to change these strings.\nI don't think we should change this anymore, though. While changing these strings was never allowed, some programs will fail compilation after this change since there will be assignments to `char *` variables. In fact there would be one warning for our discisrc example and 4 for the tests. (I should fix these, but you get the point).\n\nSimilar how I didn't see a problem changing return values for wrong usage I also don't see a problem returning a string literal while having `char *` advertised (in the same case). Changing these strings was never supported and wouldn't be wise anyways, since we also don't tell how big the buffers are.\nThe problem is not the string literal returned, but that we didn't advertise (enough) that these strings \"belong to us\" and shouldn't be changed.\n\nHowever, there was only negative feedback in IRC (for different reasons, nobody else thought this was an incredibly bad idea and that it would lead to API/ABI breakage). I didn't think much about it and didn't really expect that. Otherwise I would have opened a pull request like for every bigger or controversial change.\nSince there also isn't much gain on the other end I'll revert this completely.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3741950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3742677", "body": "@kepstin:\nMaybe you are thinking of C++ where string literals are actually `const char *` and assignments to `char *` variable give a warning. Or is that a special C variant you are talking about? I am sure this shouldn't be a compiler warning in C. In fact, on all platforms except Darwin the default_device is a string literal (returned by `char * discid_get_default_device` ) for years now.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3742677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3768684", "body": "I made a new try for LIB-48 in #36. This time returning NULL for all strings and -1 for all numbers and keeping the assert.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3768684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3782704", "body": "The limit of \"data returned per command\" is probably only because of the timeout set in scsi_cmd.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3782704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309782", "body": "typo: `Mutliple`.\nYou can prepend \"::\" to DISCID_FEATURE_MCN to make it link in the doxygen docs, if you want to.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309789", "body": "It doesn't actually return \"true\" or \"false\", but rather `1` and `0`.\n\nThat isn't new in your implementation, though. The previous documentation does the same..\nWe should probably change that to 0/1.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309918", "body": "I think the cleanest solution would be to read ALL features. That would be `UINT_MAX`.\n\nThe result will be the same, currently, but using `UINT_MAX` doesn't need additional thinking or changes for new features.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309962", "body": "I do understand that you would like to think about inclusion in `read()` for every feature.\nHowever, having a well-defined API would mean we define it now as \"all features\" and don't change anything about that later on.\nUsers won't be happy when changing what `read()` \"means\" every time.\n\nTechnically, defining read as always (only) reading MCN and ISRCs is an option, but I wouldn't call that \"clean\", because it involves \"magic features\". (why exactly these features?)\nIt does have the upside of \"keeping the speed impact as low as (now) possible on old libdiscid derivatives\".\nHowever, even if some tools are unmaintained, patching these at package level would be possible and advisable, since the ISRC change already has a big enough impact.\n\n(I will post this also on the ticket, because it is important)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3716774", "body": "Thanks a lot for catching that, @mineo.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3716774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4459070", "body": "Yes, I must have forgotten that part when merging master.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4459070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4604526", "body": "Sounds reasonable.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4604526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4624271", "body": "Yes, this code only ignores trailing data tracks. The track numbers would either not start with 1 or don't match with what actual CD players and other programs use.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4624271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4953911", "body": "We should probably use an intermediate variable for this and only save the result in the global variable,\nsince we hand out a pointer to the global variable to the user.\n\nMaking the default_device thread-local is an additional option, but that is a bit more difficult since this should work with gcc (mingw, `__thread`) and MSVC (declspec?).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4953911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4953922", "body": "You also can't use sprintf_s here, since it only works with MSVC.  Use `snprintf`, which has defines for MSVC.\nThe usage of `snprintf` is fine, even in MSVC, since we can make sure that the buffer is long enough.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4953922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4954012", "body": "Yes, there is an incoming branch for that PR: JonnyJD/libdiscid#2.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4954012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5543724", "body": "Any update on this?\nThe PRs for the other platforms should be ready: #24 Linux/BSD/Solaris, #37 Mac OS X.\n\nI would like to merge all platforms at the same time and the next release would be 0.6.0 in a couple of weeks (scheduled for end of august).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5543724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5687919", "body": "I would like a variable local to the function to be used for this and only strcpy to default_device when the final device is found.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5687919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5688217", "body": "Yes, for most systems this is thread local, meaning there is no other thread accessing `default_device` so for most cases this can't be problematic.\n\nHowever, it is still not good \"style\" to write temporary values to a global.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5688217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5705675", "body": "The assertions are stripped for some binary builds (debian does that currently with setting NDEBUG).\nWe can't rely on the asserts for input verification, but it helps debugging.\n\nWe have this assertion/return combination for many functions for quite some time. I only made sure we do that on every function the same.\n\nThe point of -1 is to make it explicit that this can't be a real track number or index. Not sure how that can be misleading.\nReturning 0 is also an option, though. That is what happened previously when the disc structure was first initialized to 0. I still would like to make it explicit to make sure there is nothing returned from a half-written disc structure.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5705675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5663882", "body": "Yes. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5663882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5665719", "body": "Well, we might still need it as a fall back, like when raw reads are not available.\nThe scsi command we use is not mandatory in the spec.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5665719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5700081", "body": "On Mac OS X we might need the device string again and search in the registry with that. In that case we do need a different mechanisms anyways.\n\nSo maybe a struct with an int (file descriptor) and HANDLE (handle) is the choice here. We only assign what we need on the platform and add a string pointer for Mac OS X later.\nThat would be the argument for isrc_raw and for scsi_cmd. isrc_raw is used in the platform implementation (setting what we need in the struct), and then scsi_cmd is implemented for the platform, using the value set for isrc_raw.\nSimilar for all scsi functions then (non-raw isrc).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5700081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6476043", "body": "Fixed. I created a struct which has a HANDLE and an int:  aed1d9f2189c0a8be060ca5b2b883a76102abc77\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6476043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6644775", "body": "I'd rather say \"cannot find\", since we aren't opening devices at all at this step.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6644775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6644842", "body": "This is a pointer to default_device. Maybe we should make that more explicit in the code and don't let `get_nth_device()` write to default_device itself.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6644842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6644852", "body": "When we use this function in read_uportable, writing to default_device is actually wrong. We might use device number 2, but default is still the drive letter of device number 1.\nSo we should handle pointers explicitely, like `get_nth_device(int number, char *device, int device_len)`.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6644852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6654383", "body": "Thanks, fixed.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6654383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3024083", "body": "We should make sure that these 150 sectors (= 2 seconds) are part of the track and check less sectors for VERY short tracks.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3024083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6570295", "body": "Putting it on one line would be too wide due to tabstops beeing used as indent (which is 8 spaces by default).\nWhen we got it working, I might move some of that code to another function.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6570295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6571097", "body": "I rather don't change the indendation or the tabstop width without replacing with spaces.\nA full 8 space tab is a lot, but this is how it is on most files.\n\nRefactoring is the key to issues like these ;-)\nDone with 55d274fbb9c1bbd0f5143c757b54f329a69828a0.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6571097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64151931", "body": "I don't quite get why you define these functions as no-op and put the code directly into mb_disc_read_unportable.\n\nmb_disc_read_unportable() is a mess duplicating especially error checking code from unix.c and code blocks that could happily life inside of the functions that are now empty in disc_bsd.c\n\nI don't get why you don't want to use mb_disc_unix_read  (like disc_linux.c does)  or mb_disc_unix_read_toc\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64151931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152165", "body": "Hm, we could rewrite unix.c/h to require and use mb_disc_unix_read_toc_entries() for all implementations and use the for loop only for non-bsd implementations.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152726", "body": "This probably breaks some user code as the bsd implementation is the only one returning NULL at the moment.\n\nThe convention is to return MB_DEFAULT_DEVICE when no device can be found,\nwhich is the \"general\" default device for the OS (independent of the machine).\nFor Linux this is /dev/cdrom, for Windows it is D: and for disc_generic it is /dev/null.\nNote that the returned device should also not be \"\", see http://tickets.musicbrainz.org/browse/LIB-60\nSee also https://github.com/metabrainz/libdiscid/blob/master/src/disc.c#L167\n\nThe problem should only occur (on BSD) when no device is attached at all (or if there are driver problems), but it is possible to occur.\nThis is also a safeguard in case the detection code fails for some reason.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152836", "body": "There should be a comment saying that we start reading the toc entries here.\nIf we do it like that.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152877", "body": "I would prefer defining MB_DEFAULT_DEVICE as /dev/cd0 or /dev/rcd0c depending on the os, like it was before ;-)\nand then returning MB_DEFAULT_DEVICE in case get_device \"fails\".\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lalinsky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a19bcf6a225f051dfdfb15687d7c29364529113c", "message": "Keep build artifacts around for longer"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/991e092f2efcd5c3bff09a722c1ca08336558ede", "message": "Build Windows and macOS binaries"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/54526f27446df55e4257832dc5b9be5fe54cfc26", "message": "Fix tests"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/465036e251161f12e056c0172ae0b4b84f11a698", "message": "Stop using mm.musicbrainz.org, use a non-redirect URL for submissions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12174906", "body": "Can you please remove them also for the other cases?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12174906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12195153", "body": "Feel free to push changes like this yourself. You should have access to the repository now.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/12195153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13049983", "body": "I don't remember exactly, but I think the only reason for not continuing was lack of time for testing and making sure I do not break anything.\n\nThe old code worked pretty much unchanged since MB started. It was rewritten, but still using the same approach. I think using the data/audio flag is a better way to do it, but it involves a lot of testing with various CDs.\n\nRegarding testing on the other platforms, we can always release a beta version and ask people to test it.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13049983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13050485", "body": "Interesting, I was actually looking at the SCSI MMC method back then, but I couldn't find any public interface to run the SCSI commands. I must have missed SG_IO.\n\nAnyway, the code looks good to me. I'd checked the spec for the SCSI commands and the SG_IO interface and it looks correct.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/13050485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21469811", "body": "I'm not sure why would somebody do that, given that the only purpose of the function is to return some URL, so that the application doesn't need to know anything about the MB URL structure. I doubt anybody does anything with the URL besides opening it in the browser, but even if they do, you can't protect application developers against something that was never intended to be done.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21469811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2557001", "body": "Wrong file name here.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2557001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/2871219", "body": "It would be better to use `sizeof` here as well.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/2871219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Zastai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7f7afb93088c35a7060d703a117432cd3a109d01", "message": "LIB-66: Fix compilation on Debian/kFreeBSD.\n\nIt only uses the FreeBSD kernel, so it does not define __FreeBSD__ (it defines __FreeBSD_kernel__ instead).\nNote that the CD ioctls do not seem to work properly on this system (they return successfully, but only see\na single non-audio track before the leadout), so while the library should compile now, it doesn't actually\n_work_."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4640c0e7ae1ea50253785329ea3019d1ad661505", "message": "Clear MCN/ISRC values reported as invalid."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a1f7d679ace0fbb7710abb74fe50d4608921603a", "message": "Removed trailing whitespace."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c4f61a75140eab62f77aee97115ce2d7e3904f69", "message": "Avoid returning NULL as default device.\n\nInstead, the default device is now always the appropriate device file for cd0, even when it does not exist.\nAdded a comment to mb_disc_unix_read_toc_header() to indicate that TOC entries are being read."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bdde636f019aa38105854e6bd6a57737407a1462", "message": "Corrected Unix TOC reading.\n\nFailure reported by mb_disc_unix_read_toc_entry() is no longer ignored.\nThe device's file descriptor is now closed only by mb_disc_unix_read(); this also plugs a descriptor leak when mb_disc_load_toc() returned an error."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/406c8cb6771ad5b04252fb769341a14caff03d8e", "message": "Corrected mb_disc_unix_read_toc_entry() Solaris return code.\n\nIt should return 0 for failure, but was returning the ioctl return code instead."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/24a4eb23b1c5360213e56ea8bf09cf6e577cbd84", "message": "Return to using mb_disc_unix_read() for BSD.\n\nThe entire TOC (including all entries) is now read by mb_disc_unix_read_toc_header(), with mb_disc_unix_read_toc_entry() a no-op.\nThis avoids duplicating some of the logic and error reporting of mb_disc_unix_read()."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d9cfec7f7bd1774b0defca04810f397d4ab00533", "message": "Corrected TOC reading for FreeBSD (network byte order for address)."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/3f213c9f218fdbd1aae4f916b31a7a5ba325783f", "message": "Corrected get_default_device() for BSD.\n\nSilly off-by-one error (get_device() was 0 based originally, but then changed to 1-based because of how read_disc treated its disc numbers)."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ea2219d9a2014bded14ed0b333cf82148ab85377", "message": "Also ignore the disc_metadata example program."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/117698e510f7cc6723942aab02b955a822b32a7e", "message": "Merged BSD implementations, adding device number support.\n\nThe TOC reading now reads all entries in one call (which is supported across BSDs).\nDevices are now determined dynamically (/dev/cdN for FreeBSD, /dev/rcdNx on OpenBSD/NetBSD, with x determined via getrawpartition())."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/f9c6619545a25ab9c53681a1afa14831ae5f5cad", "message": "More header tweaks, for NetBSD (sys/cdio.h does not include sys/types.h)."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/62ecce3d17540afbed82232919fae9f50de2aeb8", "message": "Readded some headers for FreeBSD; was slightly too zealous in cleaning them up."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/653958a9aaea3edaac92ffedf8f39bffc61e7796", "message": "Also ignore build-aux (created by automake's add-missing processing)."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/eea91d0667ecf9e2791710dd97bdbab76dd1476b", "message": "Moved common parts of free/open/netbsd code to disc_bsd.c."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/aec88878ba648bb729c51326e765f5fd9305a22d", "message": "Implemented MCN and ISRC retrieval for OpenBSD (identical to FreeBSD)."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/88560271106a17db0d4615000750a43c547d3f28", "message": "Implemented MCN and ISRC retrieval for FreeBSD."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4b4b493f28dbe1f6816c82d682fed4578ccafd00", "message": "Minor fixes to get_device()."}], "pull_requests": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/53", "title": "LIB-66: Corrected another FreeBSD check to include kFreeBSD.", "body": "Without it, the disc/track addresses have the wrong endianness.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220694527", "body": "Just adding this here: for the most recent MMC specs, google for mmc3r10g (MMC-3), mmc4r05a (MMC-4), mmc5r04 (MMC-5) and mmc6r02g (MMC-6). Later versions mainly add wording for bluray etc, not many actual changes. However, READ SUB-CHANNEL was actually dropped from the standard in MMC-5; it just refers you back to MMC-4. I'm not sure whether this is a case of \"it's stable\" or \"it's only for cd's so just about obsolete\", but it may mean that devices are no longer required to support them to comply with the MMC standard.\n\nIn my .NET implementation of libdiscid (https://github.com/zastai/MusicBrainz), I switched the Linux implementation to use SG_IO for all requests (i.e. also for the MCN and TOC) since this allowed reusing the MMC-based structures I used on Windows. I tried using SPTI on Windows (so I could share the CDB structures too), but couldn't get it to work; no great loss, and I'll probably try again when the rest of the platforms work.\nBSD is up next; hopefully that will allow MMC-based operation too (SCIOCCOMMAND seems promising, although it requires write access to the device I think).\n\nSide note 1: BSD (free/open/net) seem to have ioctls for subchannel data too (CDIOCREADSUBCHANNEL). I'll look into them and maybe submit a PR if I get it to work.\n\nSide note 2: libdiscid's device detection for Net/OpenBSD cd devices is suboptimal; it should use getrawpartition() from libutil to find out which letter identifies the \"whole disk\" partition (in my case, this returns 2 ('c') on openbsd and 3 ('d') on netbsd) and then enumerate /dev/rcdnx based on that (with n between 0 and some maximum; 9 is probably ok). Systems with more than 2 cd devices are probably relatively rare (and in fact require explicitly running MAKEDEV to create the nodes for cd2 and up), but it would be good to support them. When I get the C# suff working, I'll look at updating libdiscid and submitting a PR.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220694527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220828797", "body": "I'll look at that. I was planning to update the get-device code for bsd anyway, to really enumerate rather than checking for a hardcoded one.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220828797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220830152", "body": "It's looking like there won't be much remaining in the freebsd/netbsd sources. Would you be opposed to basically merging them both into disc_bsd.c, with tests for `__FreeBSD__` for the minor deltas?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220830152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220832531", "body": "Initial merge done and tested on OpenBSD. Testing the other two next to be sure.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220832531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220833296", "body": "OK, tested on FreeBSD and NetBSD now too. Had been overzealous in cleaning up includes.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220833296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220834217", "body": "OK, working on that now. I'm inclined to add support for \"read nth device\" like Linux and windows have, which would mean dropping unix.c for BSD systems. Will see how that goes.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220834217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220838453", "body": "OK, BSD support has been merged into a single disc_bsd source.\nDevice numbers are also supported:\n- on FreeBSD, device N is /dev/cd{n-1}\n- on NetBSD/OpenBSD, device N is /dev/rcd{n-1}{x}, where x is the partition letter for the \"raw\" (whole disc) partition, as determined by the getrawpartition() function from libutil.\n  As before, implemented and tested on OpenBSD, verifying on the other two next.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220838453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220838972", "body": "Working on OpenBSD and NetBSD now; FreeBSD is broken, looking into it.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220838972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220840327", "body": "FreeBSD has been fixed; I had left out the ntohl() for the track addresses.\n\nI'll look at reworking it to be more in line with the other unix implementations (i.e. not duplicating the entire read_disc implementation).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220840327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220842424", "body": "OK, it's now back to using mb_disc_unix_read(). I'm inclined to call this the final version.\nIs there anyone using older BSDs? I've only tested on default installs of the most recent incarnations, so I may have broken older versions.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220842424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220844303", "body": "Comment added; default device is now always cd0, even if it does not exist.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220844303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220906772", "body": "I don't think so. For the MCN/ISRC ioctls, the man pages don't really say when they were added; but the unix mcn/isrc retrieval routines can't even report failure, so if they're not supported, that should be fine.\nThe getrawpartition() is old (man page says \"since NetBSD 1.2\", so 1996), so should be fine.\n\nThe main things that might break are related to older/different compilers and system headers; I have no way of verifying that short of setting up a few dozen more VMs, which I'm not terribly inclined to do. But I suppose there'll be bug reports for such cases.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/220906772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/222775312", "body": "(ping)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/222775312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/223073214", "body": "Actually, just ran into a CD that for the MCN succeeds the ioctl, but with the \"valid\" flag set to false.\nThe BSD code currently sets the mcn to \"_invalid_\"; the windows API returns 13 zeroes for the same disc. It looks like ignoring the validity flag has the same effect on BSD (but not sure if that's guaranteed); what do you prefer: \"_invalid_\", a hardcoded \"0000000000000\", or whatever's in the structure's 13 bytes?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/223073214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/225579963", "body": "Just adding an update here: cygwin provides mingw64 packages these days, and those can compile both for win32 and win64. The compiler binaries probably even have the same name as the ones in the debian mingw64 cross-compiler packages, so you even have a choice of build platforms.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/225579963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/228396785", "body": "(ping)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/228396785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/249659389", "body": "OK, I have been very busy, but will adapt the branch to blank the MCN if the valid bit is off. No promises as to timing though.\nI'll look at what the other systems do, and perhaps make a separate PR to have the same invalid=blank behaviour there (would need to find that CD again to test it though - I should have noted which it was in these comments).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/249659389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/277528599", "body": "Saw the ticket come in. I only tested on \"normal\" Open/Free/NetBSD. Will try to set up a Debian kFreeBSD VM as well and see what's needed to fix it.", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/277528599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152015", "body": "Because the unix implementation insists on reading each toc entry separately. All BSDs have a read toc entries ioctl allowing them all to be read in one go; it seemed silly to issue N ioctls in that case.\nI suppose I could do that in the read_toc_header function, and leave the entry one as a no-op. That's still several unecessary function calls, but a minimum of ioctls.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152378", "body": "OK, I'll do that then. Would the looping version then be duplicated in each disc_xxx.c? It'll be small enough for that not to matter too much, I suppose.\n\nI suppose the ideal would be a struct with function pointers for read_toc, read_toc_entries, read_toc_entry, etc) - that would allow overriding one for a given platform without worrying about linking duplicate names.\nFor example, the Linux TOC reading could be changed to use SG_IO to read the entire TOC (header + entries) in one go, but that would currently be tricky because disc_linux can't override mb_disc_unix_read_toc).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152406", "body": "Nevermind about that question - the read_entries would of course replace the read_entry as far as unix.c is concerned, leaving the single-entry reading an implementation detail in disc_xxx.c.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152542", "body": "Actually, I see that disc_darwin already reads the entire TOC in read_toc_header(), making read_toc_entry() a no-op. I'll do the same instead, to have the smallest impact.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152750", "body": "OK, I'll adjust that.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152777", "body": "Would you prefer `/dev/null` or `/dev/cd0` (FreeBSD) `/dev/rcd0x` (others)?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152978", "body": "Well, get_device() will already create those names, so it's just a matter of ignoring its return code in the default_device case :)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/64152978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sebastinas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b03c54eaf6a9ce840526976707702711684b5eec", "message": "Make doxygen output reproducible\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a4df502a8cc4bfff4ba2cab32a450b2424414193", "message": "Name the define THREAD_LOCAL and define it in every case\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/559633ffbf238ce6c971b3c08987a357590ce1d7", "message": "Make default_device thread-local\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e52d851ea8c2d39d28c002678eb891d0742e081a", "message": "Use strtok_r for thread-safety\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c6378f720ab871b2116bebcc465f2802f36b30ad", "message": "Mark discid_get_webservice_url as deprecated\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5cb469465f332b94e6b89938198b8044e2b1e797", "message": "Ignore .dirstamp files\n\nThe autotools build system now produces .dirstamp files.\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c96a5e38df4a4181a3686f3cec5ff6b661a44b1b", "message": "Provide automatically generated version.h file\n\nversion.h includes defines to get version information about libdiscid:\nDISCID_VERSION_MAJOR, DISCID_VERSION_MINOR and DISCID_VERSION_PATCH.\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2c84200498f217f3d89edc4b9a6ef8bf4c385be6", "message": "Honor visibility in src/base64.c\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ceebdee007f01462af34524e24b56cf9334c18e5", "message": "Use winver.h instead of Winver.h"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/4bbde59d2b51f9e5c81a0d318229ceb4013df6e3", "message": "Handle LIBDISCID_API for mingw and cygwin\n\nAlso move config.h include to the top of disc.c so that the functions are built\nare marked as dllexport while building the library."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d0ee92381f6f8b3293b3712539e6c82bfe260c4b", "message": "Hide internal symbols\n\nWith gcc, clang and other compilers, symbols are exported per default. The\nsymbols in discid_private.h, sha1.h and base64.h are for internal use only, so\nthey are hidden from now on.\n\nSigned-off-by: Sebastian Ramacher <sramacher@debian.org>"}], "pull_requests": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/32", "title": "Use pthread_once to call bindtextdomain only once", "body": "Calling bindtextdomain everytime in discid_new incurs a little overhead. If\npthread is available, we can ensure with pthread_once that bindtextdomain is\ncalled exactly once.\n\nThe autoconf function AX_PTHREADS is available from autoconf-archive. In cmake\nFIND_LIBRARY(Threads) is used to find pthread.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/30", "title": "Use GNUInstallDirs to determine install location", "body": "GNUInstallDirs requires at least cmake 2.8.5, so bump the required version\naccordingly.\n\nAlso remove some variables that are not used.\n\nThe removal of the unused variables can be undone of course. I've seen PACKAGE used in the i18n branch so I've kept it for now.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14629050", "body": "Looks like I've been some minutes late. Thanks for the quick fix.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14629050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16133656", "body": "There are several use cases I can think of:\n- The user knows against which version of libdiscid the code is built during compile time. This might be useful for build systems where invoking and parsing pkg-config might be painful (Python extensions built with distutils come to my mind).\n- The user can deduce the available functions from the version in the code. Checking for the availability of functions is painful in some build systems. (Python extensions and distutils again or just a simple Makefile as build system without the full power of CMake or autotools)\n- This will also help if libdiscid should ever be broken in one particular version.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16133656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21694057", "body": "On 2013-07-23 16:35:24, Johannes Dewender wrote:\n\n> Starting to use threading just for that? Not really sure if this is worth the additional complexity. It is a performance issue as far as I understand and probably no bottleneck (compared to reading the TOC from a disc).\n\nDoes linking against pthread introduce threading? We're not creating threads or\nanything, so no.\n\n> However, if it works fine on all platforms without (much) additional work then this is possibly fine. I'll do some testing.\n> \n> The CI test fails:\n> http://ci.musicbrainz.org/job/libdiscid_PR/build_system=autotools/33/console\n> (that one was started manually, the automatic one had to be aborted for some reason)\n> \n> ```\n>   autoconf\n> configure.ac:43: error: possibly undefined macro: AC_DEFINE\n>       If this token and others are legitimate, please use m4_pattern_allow.\n>       See the Autoconf documentation.\n> ```\n> \n> This totally misleading error message _is_ fixed by installing autoconf-archive on my machine, but this is yet another thing that isn't installed on the CI server and an additional dev build dependency.\n\nAs usual with autoconf macros, one can just drop the macro in m4 (or any\nother directory specified in AC_CONFIG_MACRO_DIR) and there is no\nadditional dependency.\n\nIf you prefer that, please let me know. Otherwise it should be easy\nenough to write a test that tries to build and run a program using\npthread_once and -pthread.\n\nIf you don't like the pthread solution, we can also do one of the following:\n- Move the bindtextdomain call into a discid_init and let applications that\n  want translated error messages call it.\n- Using **attribute**((constructor)) (a gcc-ism) the same thing could be\n  achieved presumably. Haven't tested that.\n- Use the equivalent function from glib.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21694057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21729741", "body": "On 2013-07-29 01:15:17, Johannes Dewender wrote:\n\n> > Does linking against pthread introduce threading? We're not creating threads or anything, so no.\n> \n> We are not using _multi-threading_ but we are using platform dependent threading mechanisms. Which would be meaningless if this would be a linux-only library, but raises maintenance effort getting this to work on every supported platform.\n\npthread is supported on every major platform. Supposedly there is a\npthread-win32 for Windows. There is even a equivalent function to pthread_once\nprovided by the kernel from Vista onwards.\n\n> > As usual with autoconf macros, one can just drop the macro in m4 (or any other directory specified in AC_CONFIG_MACRO_DIR) and there is no additional dependency. \n> \n> That would be worse, because then we have to maintain a 300 line m4 script in our code. (Yes, there is a possibility we never have to change anything at all, but also one having weird bugs in that part for a platform)\n> Getting autoconf-archive installed on dev machines would be the better option.\n\nThere is no need to maintain the file at all. Running aclocal --install --force\nfrom time to time is more than enough to get the latest version from\nautoconf-archive included.\n\nApparently the thousand of lines dropped in m4 by gettext and libtool are less\n\n## of a concern than the m4 file for pthread, so I give up.\n\nSebastian Ramacher\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21729741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3734355", "body": "Why? free(NULL) is well defined and doesn't cause any harm.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3734355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3734382", "body": "I think this is a incredibly bad idea and leads to ABI and API breakage. Previously applications were supposed to check for non-NULL return values. Now the have to check if it's not empty. If they want to work with both earlier versions and newer ones this leads to code like if (ret_value == NULL || strlen(ret_value) == 0) { // handle error }\n\nIt also introduces inconsistencies with other functions returning strings. discid_get_webservice_url still returns NULL.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3734382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3770088", "body": "On 2013-08-01 10:13:47, Johannes Dewender wrote:\n\n> I made a new try for LIB-48 in #36. This time returning NULL for all strings and -1 for all numbers and keeping the assert.\n\nThank you. Very much appreciated.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3770088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3710012", "body": "On 2013-04-09 01:40:25, Wieland Hoffmann wrote:\n\n> >  #else\n> > -#  define LIBDISCID_API\n> > +#  if (defined(**GNUC**) && (**GNUC** >= 4)) || defined(**clang**)\n> > +#      define LIBDISCID_API\n> > +#      define LIBDISCID_INTERNAL **attribute**((visibility(\"hidden\")))\n> > +#  elif defined(__SUNPRO_C)\n> > +#      define LIBDISCID_API __global\n> > +#      define LIBDISCID_API __hidden\n> \n> My knowledge of programming in C-related languages is near nonexistant so excuse me if this is a stupid question but shouldn't the latter of those defines be `LIBDISCID_INTERNAL`?\n\nThanks for catching that. I've pushed a fix in my hide-internal-symbols\nbranch.\n\n## Regards\n\nSebastian Ramacher\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3710012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "phw": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6e8be7d05a9640cc455235249f71a0bef218403c", "message": "win32: Fixed get drive by drive number."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/29239fc0d0d1b191d94a02bbf14188cc79e05efe", "message": "win32: Do not change default_device when calling mb_disc_read_unportable"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2af290dc33dd91ab801fac29c8e803fd9eeba268", "message": "Changed error message when a drive number cannot be found on Windows."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2bd0e9683894ec9894ad2fe0cc990eae981c41e2", "message": "Print the device name in error messages on Windows.\n\nUse a similar error message as on Unix."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8798365dae2ea49a210f21e88af6176b3f03181b", "message": "Fail if device number can not be resolved to a device.\n\nSigned-off-by: Philipp Wolfer <ph.wolfer@gmail.com>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b884bbd67c035c00710f0f2eebbf20b7968fe657", "message": "Nicer alignment of output."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/655b71eb38f5b7b119c663bb745432c5ac43ff4c", "message": "Print device used in discisrc example instead of discid example."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/762bf6739b48faffb34a51aa262bf73a7070f50e", "message": "Fixed compiler warnings due to unsafe type conversions."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7801d837a78a750bc51efa6fd5889691ae2e2883", "message": "Allow using device numbers on Windows."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ac056b97a6f678b4a0c76020b970425888863b2c", "message": "Print the actual device used in the discid example."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/7ecabf32eb815551ba904f8e0ec47f16bd207f50", "message": "Use a local variable to store the temporary device names in mb_disc_get_default_device_unportable."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/656bd1d472326fc698cc8578ab17ec7fc1927c33", "message": "Make default_device thread-local\n\nSigned-off-by: Philipp Wolfer <ph.wolfer@gmail.com>"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/b10fc7a90c0496d46b7091b2a07946edbcfa098d", "message": "Fixed missing variable declaration and use snprintf instead of sprintf_s."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ca87a734285c08872cebb867c156654699480a1d", "message": "Windows code style fixes."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/c73e4082ae3b0a34f4b0a563911f3ab440c13adc", "message": "Use first available CD drive on Windows as default."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a93ee3590c05e4192b1be292be4db607c9977463", "message": "Pass file descriptor instead of device name to mb_disc_unix_read_toc.\n\nAvoids opening the device multiple times."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/eef09db2bcf5c611025fe62215c1435d7b9d9b88", "message": "Removed unused data_tracks variable in mb_disc_load_toc()."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/8897363833d8c1d8c6bfb3f03c3af0778ca7f765", "message": "Use a common Unix implementation for  mb_disc_read_unportable().\n\nThis simplifies the platform implementations and avoids code duplication."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/a6ef544db84fa193cc2cff5513ddc997b76e3125", "message": "Functions in unix.h should be private."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d6ecb2e17017f2c0f6fdc2ff7a3c4d7f78b8d0c6", "message": "Set LIBDISCID_DEPRECATED for Visual Studio compiler."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bcbc1ccd44995ffb48d3551c0a7747612b934448", "message": "Fixed encoding information in DLL metadata."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/6c11890fd7c78fb94f9739bd24b367785944cb25", "message": "Add build results to .gitignore."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/fe5184d73077fa66b136eef348136b05fadbbbca", "message": "Add Visual Studio files to .gitignore."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ba34294b5ba37c1ec2277a3decc942f3e98c7b8b", "message": "Fixed DLL version information."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/57ca197f5c6714004a22848bbc709012bbb0e34d", "message": "In C89 and Ansi C variable declaration has to be at the beginning of a scope block.\n\nRequired to build in Visual Studio out of the box."}], "pull_requests": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/31", "title": "distwin", "body": "This is the promised distribution target to generate a package including both 32- and 64-bit DLLs for Windows. It works and produces a nice zip, but I am not completely happy with it:\n- It is hard coded to use Visual Studio 2012.\n- You need a zip.exe in your path, which is not so common on Windows. I thought about removing this dependency. There are other obscure options like using PowerShell to generate the zip, but everything would require to include another script in libdiscid and I wanted to avoid that.\n- It includes the source in the zip, but only as a copy of the source repository. I am not sure if we should do some initial cmake run here.\n\n@JohnnyJD: You have so far used MinGW, right? I wonder if we shouldn't just stick with that for the 64bit builds, too, instead of using the proprietary MS tools. Have you ever looked into what would be required to create both DLLs in MinGW? Or to cross-compile from Linux?\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14160606", "body": "Looks good. Having the ability to get the feature list as strings surely makes it easier for implementing the bindings. I personally would prefer having all the feature strings in lower case. IMHO this makes it more consistent and less error prone. Also if you want or if it fits the target language expectations you can make it easily case-insensitive by lower casing the strings in the bindings.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14160606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14293468", "body": "While adding the bug report at http://tickets.musicbrainz.org/browse/LIB-29 I thought it would maybe be good to have the features enum usable as bit flags:\n\n``` c\nenum discid_feature {\n  DISCID_FEATURE_READ = 1,\n  DISCID_FEATURE_MCN = 2,\n  DISCID_FEATURE_ISRC = 4,\n};\n```\n\nThat way we could create a read method accepting an `int features` flag list:\n\n``` c\ndiscid_read(disc, device, DISCID_FEATURE_MCN | DISCID_FEATURE_ISRC);\n```\n\nDon't know how we would deal with DISCID_FEATURE_READ, it wouldn't make much sense to set this. Maybe it would just be assumed implicitly.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14293468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14298027", "body": "@kepstin: I am not sure if that was actually a question or not but anyway :) The purpose of the feature flags is not to allow applications to adapt to the features supported by the platform, that's still done by discid_has_feature. The flags themselves provide just a name for the feature and would be passed to the read method (however they would be named) to specify which features should actually get used. How exactly it would work is not that important in this discussion (e.g., it could just ignore unsupported features since their existence can be checked by discid_has_feature), relevant is just the structure of the enum to stay flexible for this kind of feature selection.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14298027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14682745", "body": "Thanks for your feedback. I'll update the branch tomorrow. I would also like to get some feedback by Kepstin. Does github allow us to actively add him to the discussion?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14682745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15536092", "body": "Thanks to both of you for the feedback. Took me a bit longer to get back to this, though. Life happened.\n\nI have updated the pull request. You still have not convinced me 100% about the \"discid_read() should always include all future features\" issue, but since the examples now show the usage if discid_read_sparse() I think it is acceptable ;)\n\nAs kepstin suggested I have also not touched the usage of true/false in the docs, IMHO the wording should be obvious to every C developer.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15536092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15594535", "body": "The charset should match of course,  I'll fix that. The source will compile without the VarFileInfo,  but without it the rest of the information won't be visible in the DLL metadata (I haven't tested if it is really not included in the DLL or probably just not displayed in the Windows Explorer properties dialogue, but that does not make much of a difference). That's true for the MingW build,  too. \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15594535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15596807", "body": "I've committed the change of the charset in the DLL metadata.\n\nJust a short note about my last comment: I'm actually not sure, if the language and encoding in VarFileInfo and StringFileInfo must match. The documentation is unclear about that. The language in VarFileInfo seems to indicate the localization of the file (in this case the DLL) itself, while to my understanding the language in StringFileInfo indicates the language / encoding of the metadata in that particular StringFileInfo block.\n\nNevertheless, in our case it makes sense to have them identical anyway and UTF-16 (I suppose Unicode refers to UTF-16 encoding in MS speak) was wrong. We could probably use 0 (plain old ASCII), but 1252 is not a lie ;)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/15596807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16864209", "body": "I can test it for Visual Studio. I'll try to find the time for it during the next days.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16864209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16870200", "body": "@sebastinas: It works in VS. Merge the other pull request or just add the two lines yourself whatever is easier\n\nThat's probably too much trouble with the separate pull request I've opened at https://github.com/sebastinas/libdiscid/pull/1 :)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16870200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16880641", "body": "> Wait, isn't that what happens on Anything using Windows XP or higher, using cdaudio?\n\nNot sure if I understand you, but yes, as I understand it the code I replaced is used on XP or higher (I tested on Win7). I have not looked in all details at issue #5, but it seems to unify the code nicely and get's rid of the hardcoded drive letter. So if that would be merged my patch here is obsolete. Are there any open issues with the code of #5?\n\n> Not sure about the drive number thing. Like I said, drive letters are fairly stable on Windows.\n\nI see no need to change anything here. Calling it \"D\" or \"4\" doesn't make much difference, but \"4\" would be pretty unusual on Windows.\n\n> That is quite a long line. In particular it is longer than 80 characters. Possibly using a define isn't the best option.\n\nI prefer a define over a function call here. Is it possible to split the line with \\ here? But it isn't that long anyway and it's only a single line, doesn't harm the readability much.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16880641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16881203", "body": "> > Wait, isn't that what happens on Anything using Windows XP or higher, using cdaudio?\n> \n> Not sure if I understand you, but yes, as I understand it the code I replaced is used on XP or higher (I tested on Win7). I have not looked in all details at issue #5, but it seems to unify the code nicely and get's rid of the hardcoded drive letter. So if that would be merged my patch here is obsolete. Are there any open issues with the code of #5?\n\nSorry, I was too fast here. I had missed your comment on #5, I'll comment there. And there is still the hardcoded \"D:\" which could be replaced by my code above.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16881203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16881497", "body": "I can help testing the Windows portion, although I am not much of a Win API developer myself. But splitting the TOC part into a separate merge is a good idea anyway. It really simplifies the code and makes it easier to move forward from there. If you merge the TOC part and the unix changes I could add and review/test the win32 code.\n\nThe Windows code in the patch still uses the hard coded \"D:\" drive. This could be replaced by the code in https://github.com/metabrainz/libdiscid/pull/20. I think that should be the implementation of `mb_disc_get_default_device_unportable`\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16881497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16910433", "body": "I would definitely add this code to mb_disc_get_default_device_unportable() in case we add it to the code in #5. You can't really rely on any value here anyway due to the different platforms. Making sure it returns an empty string at least makes sense, though, as that's how the generic implementation handles it.\n\nWhat is your plan to move forward? I'd suggest not to merge this here but to integrate it into #5 and continue the discussion there. \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16910433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16914957", "body": "I did not look at the individual commits yesterday, but luks already added the common TOC functions separately and 27888a1 does only add the win code. Despite some more testing and a proper review this looks quite good.\n\nI'll have a closer look at it on the weekend and integrate #20. Maybe I can find some discs to also test the data track issues.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16914957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17794438", "body": "Hey, sorry. I had tested this a week ago on Win7 with VS 2010 and 2012, but my answer here got lost somehow. Code looks absolutely fine to merge.\n\nOne thing I wanted to ask you for your opinion (although it is not new in this code): The MS compiler gives out a bunch of warnings about using strcpy (and similar string functions) instead of the MS compiler specific strcpy_s etc. (basically replacements for the standard string copy operations where you have to specify the length of the target buffer, see http://msdn.microsoft.com/de-de/library/ms175759(v=vs.80).aspx). I don't consider that very important in our case as the code itself is fine and the *_s functions are compiler specifc, but the warnings are annoying nevertheless. We could just disable the warnings or handle this with defines for non-ms compilers. The solution to use defines like _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES (see link above) did not work for me in a quick test, but I did not investigate that further. Any thoughts?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17794438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17801832", "body": "For disabling the warnings you can set _CRT_SECURE_NO_DEPRECATE either in cmake or in code, both works fine. Just make sure to set it before including windows.h.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/17801832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/18449623", "body": "Looks good to me in general. Please see my code comments and https://github.com/metabrainz/libdiscid/pull/22 for my suggestions.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/18449623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19208208", "body": "I have updated the branch, now actually following my own suggestion to pass the file descriptor to `mb_disc_unix_read_toc()` ;) Thanks for spotting this.\n\nI agree to merge this now. IMHO having a few empty implementations of `mb_disc_unix_read_mcn` and `mb_disc_unix_read_isrc` is not as worse as having duplicates of `mb_disc_read_unportable`. And a more general SCSI implementation will simplify the code even more later on that would be great, but should not stop us from having this little improvement now.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19208208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19665431", "body": "Looks good to me.\n\nJust a note on the Linux behavior to clarify things a bit: This can happen on every distro where udev is used to manage the /dev/cdrom symlinks. AFAIK it happens on installation when you install from e.g. a USB stick (at least I made that experience in Debian/Ubuntu). That's probably because that USB stick is treated as a CD drive during installation, but isn't available later and replaced with the actual CD drive of the computer.\n\nI just made a quick test with Virtual Box, an existing Ubuntu VM (with one virtual CD drive) and an external USB CD drive.\n1. The VM originally had only /dev/cdrom -> /dev/sr0.\n2. When I attach the USB drive and reboot there is still only /dev/cdrom -> /dev/sr0. /dev/sr1 is now the USB CD drive, but it does not get symlinked. \n3. When I remove the virtual CD drive and keep only the USB drive connected and reboot there is now /dev/cdrom1 -> /dev/sr1\n4. If I attach the virtual CD drive again and reboot there are now both /dev/cdrom and /dev/cdrom1\n\nSo by default udev will only create a single /dev/cdrom\\* symlink. But once a drive was assigned a symlink it will stay there and will be stable for that specific hardware device even if removed and re-attached later on. If one really cares the drive mapping can be reconfigured somehwere in udev (let's say I have replaced my broken CD drive but want the new one still to be /dev/cdrom).\n\nAs there can be in theory any number of /dev/cdromN we could probably extend the drive candidate list a bit to let's say /dev/cdrom .. /dev/cdrom3 or so. But I don't think many people change their CD drive often enough to get higher numbers.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19665431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19693739", "body": "Yep, parsing the info from /proc will of course be the most accurate solution, it's what Picard does. But since we don't actually need the complete CD drive list of the system I also liked your more simplistic approach of checking for /dev/cdrom\\* symlinks.\n\nCan you compare the two approaches performance wise? But probably shouldn't make much difference in real world use cases anyway.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/19693739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20173068", "body": "Looks good. To me it's a bit surprising that passing 0 around as the file descriptor did not lead to errors on other platforms :)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20173068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20244593", "body": "I have updated the branch based on the current master and our recent discussions. get_default_device now returns the first available drive and falls back to D: if no drive was found. This more closely follows the proposed pull request #24 for unix systems.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20244593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245539", "body": "Here is how the resulting package looks like: like http://users.musicbrainz.org/~outsidecontext/libdiscid/\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20245539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246184", "body": "> I do want to include a full source distribution (with generated build files) in the binaries, that is why I run the cmake \"dist\" target in the \"distwin32\" target.\n\nThe problem with generating the build files here is that cmake can't generate a single Visual Studio solution including both x86 and x64 compilation targets, so you have to generate two separate solutions. But maybe we could do that by providing to our-of-source directories as I do it during the build.\n\n> Nothing seems to install into PATH (on installation) on Windows. Even my Python installation needs the full \"C:/../Python27.exe\" on \"cmd\". In MSYS/MinGW I just installed the zip package and everything is fine.\n\nYou have to configure your PATH manually, or some installers can do that for you (e.g. if you use mysys-git). In overall using command line tools on Win is a pain. I always have a C:\\bin in my path for this purpose.\n\n> Your MSVC build seems to be linked to MSVCR110.dll, which is not available -> even the 32 bit build doesn't work on my system\n\nI will probably look into this, but I think we will have more fun getting a proper target for MinGW instead of relying on the MS stuff.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246748", "body": "Cool, I will see if I can get this to work on my system. Not today, though. Already spent my \"private programming on a Sunday\" time quota, gotta get back to the family ;-) \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20246748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20266284", "body": "I had a look at linking with the old standard MSVCRT.DLL. Actually that is not something Microsoft wants developers to do, so it's not made easy using Visual Studio. It is possible (http://stackoverflow.com/questions/10166412/how-to-link-against-msvcrt-dll-instead-of-msvcr100-dll-in-vc-10-0) but awkward. The way this is supposed to work is either including the C runtime DLL you linked against with your application or install the corresponding redistributable package on the target system (in this case http://www.microsoft.com/en-us/download/details.aspx?id=30679 should do). But it would be more convenient to just use the standard C runtime available on all Systems, another good point for using MinGW.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/20266284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22331010", "body": "I have updated the branch. I decided to go the same route as in the Linux code and make `default_device` thread local, there is a declspec for this.\n\nThe thing with drive numbering looks pretty nice. You can easily verify that it works by specifying `CdRom0` as a parameter to discid.exe. It does not completely work as expecte, though. I tested on two laptops. One running Win7 with a built-in drive `E:`, and one running Win8 without any CD drive.\n\nOn the first laptop `CdRom0` reads from drive `E:` as expected. But when I plugin an external USB drive `F:` and try to access it via `CdRom1` it fails. Acces via the drive letter works as expected. On the laptop without built-in CD drive I can plugin in the external drive and access it via `CdRom0`.\n\nI don't know if the behavior on the first laptop is a general thing that it won't enumerate multiple drives or if it is just because it is an external drive. In any case, I think this is too unreliable to support real drive numbering, but I wonder if we should set `MD_DEFAULT_DEVICE` to `\"CdRom0\"` as a fallback (instead of the current `\"D:\"`).\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22331010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22331284", "body": "This branch was tested in both VS 2012 and MinGW using GCC 4.7.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22331284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22335115", "body": "First some results from running this code with two different CD drives. I built the code as 32-bit using VS 2012.\n\n## Test system:\n\nLenovo Thinkpad:\nWindows 7 (64-bit), built in CD drive (MATSHITA DVD-RAM UJ892), external drive (Samsung)\n\nDisc used for testing:\nhttp://musicbrainz.org/cdtoc/UHgc6MUSiZbupjza5qJhwmHUdKY-\n(known to result in ISRC mismatches when read with libdiscid)\n\n## Results\n\n### Internal drive\n\n#### Old implementation\n\n`discisrc` finished in 3 seconds, returned correct ISRCs. Tried it several times with reloading the CD, no mismatches.\n\n#### Raw SCSI\n\n`discisrc` ran for 4.5 minutes. Drive was silent during the process. Returned empty ISRCs.\nThe time it takes seems to depend on the number of tracks. Another disc with 14 tracks took even 7 minutes to complete, with the same result. A 3 track disc slightly more than a minute. This is roughly a linear relationship between tracks and time.\n\n### External drive\n\n#### Old implementation\n\n`discisrc` finished in 3 seconds, returned correct ISRCs for tracks 11 and 12. In multiple runs I got some mismatches most of the time.\n\n#### Raw SCSI\n\n`discisrc` finished in 8 seconds, returned correct ISRCs.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22335115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22335605", "body": "I tried your build. It works on my Win 7 system from above, but not under Win 8. I tried two 32-bit builds of mine, one with VS 2012 and one with MSYS and gcc 4.7. Both builds work on Win 7 and Win 8.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22335605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22337209", "body": "The code looks good. I would like to test my faulty drive from above under Linux and see how it behaves there. I will report back on it.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22337209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22386845", "body": "Would be easy to support the numbering with the code in this PR. But I would prefer having this and the default device patches for other platforms merged before adding the numbered device implementation. I think this PR and https://github.com/metabrainz/libdiscid/pull/24 are good to merge. I can''t test https://github.com/metabrainz/libdiscid/pull/37 but it looks quite solid on a first glance, too.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22386845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22387117", "body": "This is a follow up to my comment at https://github.com/metabrainz/libdiscid/pull/38#issuecomment-22335115, but as my findings are not Windows specific I continue the discussion here.\n\nI have tested the CD drive, which was unable to read the ISRCs on Windows, on Linux (with the same disc). It shows the same behavior: Long reads, no ISRCs, no error messages. It looks like the calls SCSI all succeed, but it does not return any ISRCs (probably it doesn't return any subchannel data).\n\nThis shows a second problem, which I verified with a CD containing no ISRCs: Currently this implementation reads all sectors of each track (see https://github.com/metabrainz/libdiscid/pull/6/files#L4R292) until it finds a ISRC. If there is no ISRC this leads to reading basically all sectors on the disc which results in the long reading time. I think the number of sectors tried for a track should be limited. Is there some rule on how many sectors should hold the ISRC in the Q sub-channel?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22387117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22401085", "body": "This is the output I get with the drive on Windows for every sector read:\n\n```\nscsi cmd bytes returned: 0\nzero data returned by scsi_cmd\n```\n\nSo there is no data returned. Do you have any idea already on how to perform some kind of drive feature detection? Or what I could check for my drive?\n\nI've also tested reading the disc without ISRCs with my working drive, this time limiting the sectors read to 150 per track. discisrc finished in about 10 seconds, which is even faster than the old implementation (about 1 minute, I'm happy we implemented the feature selection). It's possible we will miss some ISRCs on some discs, but I suggest we start with a lower number of sectors and increase it when there are problems reported. The discs I tested all gave good results with 150 sectors.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22401085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22403468", "body": "See pull request #39 \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22403468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22455884", "body": "Your algorithm makes much more sense, yes. I close this pull request.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22455884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22455936", "body": "I've updated the branch according to your last comment. Yes, I think it's time to start merging those branches into one and then open new pull request for additional features we want to get in. I think this is all stable enough to be merged together, and it makes it easier to start working on new stuff if there is a single development branch and we don't get stacked pull requests.\n\nWhether you add this to a release branch for 0.6 or whatever version you plan to get this in or just a feature branch for all the default_device changes is up to you.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22455936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459489", "body": "I did not want to change the example of passing null to `discid_read_sparse`, but I think showing which device used is helpful when running the example. On the other side I consider the use of `get_default_device` instead of passing null the better code, so one option would be to change it. We could still mention the behavior when passing null in a comment.\n\nUse of the `?`operator was intentional for readability as printing the device is not really fundamental to the example. No need to hide the actual important code in overly verbose helper code.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459596", "body": "Ok, moved it to the discisrc example. That shouldn't be controversial at all.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459817", "body": "Thanks. Yes, I think you got me right. I just wanted to keep a separate issue separate, so we can have this and still decide we don't want drive numbering or we want it in some other way or whatever:)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22459817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22460062", "body": "Sorry, that last commit was supposed to be two. But I think it's clear what has changed.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22460062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22476291", "body": "The only thing I wondered when looking over the code was whether it is safe to introduce the asserts or whether this would break existing code.\n\nIt enforces proper usage of the library. But it might break code relying on the current behavior of returning NULL and not checking the status of discid_read*. So I would tend to not add the asserts. Change of the return value of numeric methods might be fine, though. Currently the behavior was basically undefined and the caller could not rely on specific error return values. Having this properly defined is good. Still there might be code which would break on negative values for sectors, track numbers etc.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/22476291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/24793606", "body": "The code changs look good and work as expected. Now reading discs without ISRCs finishes fast.\n\nBut no news for the bad drive, it still finds no ISRCs with the raw method. Did you add anything new to the debug output? I didn't see anything and I still get the same result for every read:\n\n```\nscsi cmd bytes returned: 0\nzero data returned by scsi_cmd\n```\n\nNot sure how to debug that further.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/24793606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25067069", "body": "That looks good, good work. Here is the debug output for my bad drive (in case you wonder, I have put the feature detection outside the for loop as I noted in the comments):\n\n```\ndata requested, but none returned\nWarning: could not fetch features\ndata requested, but none returned\nWarning: could not fetch features\nWarning: raw ISRCs not available, using ISRCs given by subchannel read\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\nWARNING: can't read subchannel data!\n```\n\nSo for that drive it falls through to the old ISRC reading code. As expected my second drive prints no warnings and just works well with the raw SCSI code.\n\nI have not yet tested the bad drive under Linux, I will do that later.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25067069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25306385", "body": "I just pushed a change following your comments. Please note that I could not fully test the code as I don't have a CD drive available this weekend.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25306385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25317416", "body": "I could not yet run the code, but it looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25317416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25679829", "body": "That's one of the reasons why I prefer early merges of seemingly completed branches back to the development branch, instead of merging all the individual branches shortly before the release. It's just more likely that a bug like this gets spotted.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25679829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25691843", "body": "I don't expect testing to magically happening, especially not in libdiscid where testing is mostly a manual process. I also don't say that this bug would have certainly be spotted by merging earlier into a common branch. But as this example clearly shows bugs can slip through even with two people looking at and running the code. \n\nI just noted that issue here as I found it difficult to work against a common code base with the individual features (default device win, default device Linux, numbered devices win etc.) as they all were in different branches and were not merged for quite some time. That's problematic, as you said yourself those features form a feature set and are interdependent. In retrospection it would have been better to have a common development branch for this \"feature set\" (if that branch is master or a separate branch is mostly an issue of release planning and not really relevant for the point I make here).\n\nMerging early has several benefits:\n- New (sub)features can be based on the merged code (instead of also basing it on the unmerged branch or master branch, increasing the probability of merge conflicts)\n- The already merged code is run more often during development\n- Less merge conflicts (when merging late the probability of merge conflicts increases _and_ when solving those conflicts you are making last minute changes)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25691843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25700433", "body": "Did just a quick test. Both my infamous problem device and the external drive, for which the raw SCSI code works, fail in `get_device_info` with \"couldn't get device properties\".\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25700433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25701967", "body": "That helped for getting the alignment. Result on the problem device:\n\n```\nlibdiscid 0.6.1\nDevice used: e:\nalignment mask: 1\ndata requested, but none returned\nWarning: could not fetch features\nWarning: raw ISRCs not available, using ISRCs given by subchannel read\nWARNING: can't read subchannel data!\nMCN        : 0602537286041\nTrack 1    : USVR91379301\nTrack 2    : USVR91379302\nTrack 3    : USVR91379303\nTrack 4    : USVR91379309\nTrack 5    : USVR91379304\nTrack 6    : USVR91379313\nTrack 7    : USVR91379305\nTrack 8    : USVR91379306\nTrack 9    : USVR91379312\nTrack 10   : USVR91379307\nTrack 11   : USVR91379310\nTrack 12   : USVR91379308\nAll features: read, mcn, isrc\n```\n\nSame result as Stalker-X got I suppose. The external drive also returns the alignment now (0 in that case), rest still works as expected.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/25701967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/217863323", "body": "Looks good to merge to me. This is basically a typo introduced when the code was moved and modified at https://github.com/metabrainz/libdiscid/commit/071a19c7339f61e88808f8e5a8523adea47e8476\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/217863323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2554134", "body": "Thanks for merging the patch finally :D\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2554134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309929", "body": "I am not sure about that.  My intention here was that we actually should do the additional thinking when adding a new feature ;-) However,  if we define libdiscid read to always use all available features,  whatever those will be in the future,using UINT_MAX would be indeed be the cleanest code.    \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3309929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392497", "body": "It would be better to set LIBDISCID_INTERNAL for all functions in unix.h.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392614", "body": "I would probably pass the file descriptor from mb_disc_unix_open() instead of the device string here. This will avoid multiple calls to mb_disc_unix_open() in the mb_disc_read_unportable() implementations. It will require those implementations to do the call but they will do that anyway when providing additional features (ISRC, MCN etc.)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392757", "body": "The if conditions could be put outside the loop.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392759", "body": "The if conditions could be put outside the loop.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392793", "body": "The data_tracks counter is currently unused and could be removed. This code will only ignore trailing data tracks, right?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4392793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4953993", "body": "Didn't think about non-MS, sorry. Will change that. The threading issue is a good point, that should be reviewed in https://github.com/metabrainz/libdiscid/pull/24/files#L1R128, too.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/4953993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5579555", "body": "Sorry, didn't work on it yet :( But I will make this PR ready for merging\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5579555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5652108", "body": "Don't know where the declaration of i got lost, but this definitely won't build. That's a bit embarrassing, time to fix this branch.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5652108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5703681", "body": "With the assertion added this error condition here will never be reached anyway. I would do one or another (have the assertion or return -1). Having the -1 return in the code can be misleading to whoever uses this method. \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5703681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5705755", "body": "Ok then, didn't know about the asserts being stripped on some builds. It would have been misleading if I check for -1 even though this condition can never be reached.\n\nThis branch looks fine for me, then. I definitely prefer returning -1 instead of 0. You probably can construct weird cases where negative return values makes existing code behave strangely, but in those cases the code isn't checking the return value of the read call and gets unexpected results anyway.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5705755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5662553", "body": "Should the SCSI reading become the default the whole read_disc_isrc function could be removed.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5662553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5662681", "body": "I would initialize byte_returned to 0 as it is passed as an out parameter to DeviceIoControl. It is not necessary as it is not used and not written to by DeviceIoControl, but if it is not set it contains garbage and one might wonder during debugging what the value means DeviceIoControl returns here.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5662681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5700002", "body": "Casting the `HANDLE` (which is a `void*`) to `int` is potentially dangerous on 64 bit systems, as there the `void*` is 8 bytes long. I think we should either use `intptr_t` for the file descriptor in the scsi functions or do it more abstract and only pass around a `void*` on all platforms.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5700002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5700003", "body": "That's true.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/5700003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6646727", "body": "This comment is misleading now, as device does not set here and the error handling is outside of this function.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6646727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6565657", "body": "This should be done outside the loop\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6565657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6565658", "body": "Formatting got messed up here, I'd put that in one line\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6565658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6570922", "body": "Use less spaces for tabstops, saves lots of characters ;) If you have to break it do something like\n\n```\nmb_scsi_read_track_isrc(\n        handle, disc, i);\n```\n\nI always feel bad when nitpicking on such minor formatting, but I found this lonely `i` unpleasantly hard to read.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/6570922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "zas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/10f4d927334a028d01e093c1c60c4adf5b791e43", "message": "Merge pull request #1 from JonnyJD/libmusicbrainz\n\nLIB-54: Add libmusicbriainz / query metadata example"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/e9c3fad067e8789ccc438bcef7355a614a393039", "message": "Fix comments"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/83c82de52a98fc43a212f6ab92564e85d845587f", "message": "Add discid_get_toc_string()"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/54197fa6f71a18e14122503c0050dfa2f4e3d1a1", "message": "create_toc_string(): do not allocate more than needed.\n\nSize calculation is commented."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/eeebbef33d864f3323b555e904878ca62860fe67", "message": "Allocate memory in create_toc_string() and allow to pass a string separator."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0488f44dba3aaa297b3b1d16fd698985d8397fd9", "message": "Adjust buffer sizes"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ab5b6079c1b9cb2432503f40e20f8b2f9f02acb5", "message": "Add discid_get_toc_string() to get 'toc=...' string alone.\n\nUse it in create_submission_url() and create_webservice_url(), reducing\ncode redundancy.\nCalculations of buffers length was slightly modified to be safe."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/cec29dc56024eb75aceccac1edc698f571829eec", "message": "Move sectors to time code to its own function.\n\nUse it for total length as well as tracks.\nUse \"sector\" instead of \"frame\" to be consistent."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0ee46bdf408b39c8999ad6a888b626f825f0ef22", "message": "discid: also display track durations in minutes and seconds\n\nExample:\nTrack 1       :      150    22310 (04:57.47)\nTrack 2       :    22460    27737 (06:09.83)\nTrack 3       :    50197    30417 (06:45.56)\nTrack 4       :    80614    20214 (04:29.52)\nTrack 5       :   100828    32490 (07:13.20)\nTrack 6       :   133318    11394 (02:31.92)\nTrack 7       :   144712    20188 (04:29.17)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21484997", "body": "I agree with @lalinsky : if someone is relying on url to be constant, then he is doing it wrong, this isn't an issue imho.\n\nThat said, you could add a method returning the toc string alone (and use it to build full url).\nI just noticed create_submission_url() isn't totally safe regarding buffer overflows, though 1024 bytes should be enough even in worst cases, that is 99 tracks, i didn't calculate exactly, but roughly if we have 200 bytes + 99 \\* 7 at worse, but i would prefer a safe code regarding this matter. \n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21484997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21642977", "body": "Need more work, but i modified `create_toc_string()` to allocate memory and accept a string as separator.\nTell me what you think about it.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21642977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21674124", "body": "I see nothing wrong with added tests. Reminds me i should write some for discid_get_toc_string() in #34 ...\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/21674124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cfergeau": {"issues": [], "commits": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ef947673261766db81c358d77f4d07be5a885676", "message": "Move test/ and examples/ Makefiles to root Makefile"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/89a6defd7fd1fb8a9818fe061d0be2218e6fe543", "message": "build: Use per-target CPPFLAGS\n\nWe can set CPPFLAGS in libdiscid_la_CPPFLAGS rather than AM_CPPFLAGS\nto be consistent with all the other libdiscid_la_XXXX variables."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/124d340ddda81d8530e571be21456727cf1b80fa", "message": "build: Move headers to libdiscid_la_SOURCES\n\nHeader files are sources as well, so we can list them in a _SOURCES\nprimary rather than in EXTRA_DIST."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/2317cb667f4a284389ae233c30d85eca88a8c776", "message": "build: Use conditionals for OS-specific source files\n\nOS-specific source files were defined in configure.ac through\nAC_SUBST, and then they were forced to be dist'ed using\nan EXTRA_ Makefile.am variable.\nThis is quite unusual, now that we have automake conditionals\nfor each supported OS, we can make use of them."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0019bff7e74ad61016f977b1acfe7b3452f8dfa6", "message": "build: Use conditionals for OS-specific libraries\n\nDepending on the OS, libdiscid may need to link with OS-specific\nlibraries. Now that we have per-OS automake conditionals available,\nwe can make use of those rather than forcing LIBS in configure.ac."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/81017b726fee978a816cb1952798a65db96df586", "message": "build: Define per-OS automake conditional\n\nThey will be used in the next commits to conditionally defines\nlibraries/source files to be used depending on the platform we\nare compiling for."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/1b7119deb27768192d1e76cbb25f36e4b6987f5b", "message": "build: Use noinst_HEADERS rather than EXTRA_DIST\n\nThis is more usual for a private header file."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/afecd92f2c441f815f268ca929f9c6e4b8f45c57", "message": "build: Move setting of automake options to AM_INIT_AUTOMAKE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/0f4edc518865d38767cb7dd988e9fab0dd9700e1", "message": "build: Remove redundant EXTRA_DIST\n\nconfig-cmake.h.in is already listed in Makefile.am's EXTRA_DIST,\nno need to have it as well in configure.ac (I'm not even sure this\nis doing anything)."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/12f238275430ce8aaf831db704ab31d1f5512d79", "message": "Update .gitignore"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/877ce7a6e4d0b8cbd9b9391f268a4a3ad1ba538c", "message": "build: Add call to AM_PROG_AR\n\nautomake complains about it otherwise when invoked with -Wall\n/usr/share/automake-1.12/am/ltlibrary.am:\n     warning: 'libdiscid.la': linking libtool libraries using a non-POSIX\n/usr/share/automake-1.12/am/ltlibrary.am:\n     archiver requires 'AM_PROG_AR' in 'configure.ac'"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/ffb644e90bcbfda440f007adc944743f9d8ae8ab", "message": "build: Remove unused AC_SUBST(LIBTOOL_DEPS)\n\nNo Makefile.am references LIBTOOL_DEPS"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/d2488c3f623e993307399413e4b8df5936625822", "message": "build: Use automake silent rules if available"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/27f642167e79dd0f8db88844e33cd981de12003e", "message": "build: Remove unused libdiscid_VERSION from configure.ac"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/5263dfb82a3aa2a9794a2f627a5965f9960e402c", "message": "build: Set AM_CFLAGS rather than CFLAGS\n\nconfigure.ac/Makefile.am should use AM_CFLAGS to pass additional\ncompiler flags, CFLAGS is reserved for use by the person compiling\nthe library."}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/bf947ef51b09931ff04d0ba3d0ae0f77cc3b39bd", "message": "build: Don't add -O2 to CFLAGS\n\nThis is what automake will use by default, so no need to add it\nexplicitly in configure.ac"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/commits/718ec4b45a3a3d5c6f41e5d707aaeb6859d1f4d9", "message": "build: Remove trailing whitespace"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16341476", "body": "2013/4/13 Johannes Dewender notifications@github.com\n\n> I think I would also go for \"non-recursive automake\", but that is something I might be able to do with the article you posted on IRC: http://www.flameeyes.eu/autotools-mythbuster/automake/nonrecursive.html.\n> \n> You can also do the \"non-recursive automake\" if you want to, since you brought that up - either in this branch or a new pull-request.\n\nI'm being a bit lazy here, feel free to beat me to it ;)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/16341476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kepstin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14002746", "body": "I'd recommend that you use an enum instead of a define for the list of feature types, like\n\n``` C\ntypedef enum {\n    DISCID_FEATURE_READ = 1,\n    DISCID_FEATURE_MCN,\n    ...\n} discid_feature_t;\n\nint discid_supports_feature(discid_feature_t feature);\n```\n\nThis gives you better type-checking in C.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14002746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14045733", "body": "The typedef is simply a matter of personal taste and overall coding style; take it or leave it as you will.\n\nI usually start that sort of thing numbering from 1, simply to leave '0' available as an invalid/error value in case you want it later - but even more importantly, to make sure that all the values in the enum evaluate to \"TRUE\".\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14045733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14294245", "body": "What happens in the case when you do a discid_read when DISCID_FEATURE_ISRC isn't supported on the drive or operating system? The purpose of these feature flags is to allow an application to adapt in this case, e.g. by using cdrdao to read isrcs when the ISRC feature isn't supported.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14294245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14301364", "body": "Hmm. Come to think of it, an interface to read that allows specifying which features to enable would be nice.\n\nIf you know that you do not need ISRC or MCN, you could disable the ISRC and MCN features, so the read function will be faster.\n\ni.e. if you call discid_read_with_features() without the ISRC feature, then calling discid_get_track_isrc() later will fail since the data wasn't read.\n\nThe discid_read() function will always enable all features.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14301364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14459293", "body": "As far as Linux goes, this is OK as long as you do not ever make a revision that breaks binary-compatibility (existing compiled apps stop working) but does not break source compatibility (existing applications can be recompiled without changes). I don't think this will be an issue if you're careful.\n\nYou'll have to find a BSD developer/packager to discuss the BSD issue.\n\nIf you ever increase the major version and break source-compatibility, you should take care to ensure that the new version is parallel-installable with the previous major version, and that applications are able to select which to use. (For example, by renaming the pkg-config file.) But that is something to worry about in a future release!\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/issues/comments/14459293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3740064", "body": "Returning `\"\"` is actually an issue here, since that's a `const char *` and the return value of the function is `char *`\n(Really, all of these functions should be returning `const char *`...)\n\nSince it's documented that the return value is \"meaningless\", I'd simply avoid making an arbitrary change like this. (And the common case is probably `(s)printf`ing it somewhere, and printf is usually ok with nulls.)\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/3740064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3419266", "body": "Well, unless you require C99, C doesn't really have a boolean type; any non-zero integer value is true, and 0 is false. IMO, this is fairly understandable.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3419266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3419342", "body": "I think having the generic _read function read all features is probably the best option; it's a nice helper for \"one-off hack\"-type applications, etc. The documentation should probably state that using _read_sparse with the features you want explicitly specified is preferred, to prevent your application from getting slower with time due to features it doesn't use.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3419342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "atwupack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2990855", "body": "Is this correct? I would expect \"libdiscid_PATCH -lt 10\" because then it is a single digit and a leading 0 needs to be added.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2990855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2990856", "body": "Is this correct? I would expect \"libdiscid_PATCH LESS 10\" because then it is a single digit and a leading 0 needs to be added.\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/comments/2990856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mineo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3709559", "body": "My knowledge of programming in C-related languages is near nonexistant so excuse me if this is a stupid question but shouldn't the latter of those defines be `LIBDISCID_INTERNAL`?\n", "reactions": {"url": "https://api.github.com/repos/metabrainz/libdiscid/pulls/comments/3709559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}