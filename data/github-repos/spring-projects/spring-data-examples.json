{"_default": {"1": {"binkley": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/338", "title": "Describe default media type for PATCH", "body": "(If this is the wrong repo to file this issue, please note this and I will correct.)\r\n\r\n_Spring Data REST - Reference Documentation_ is outstanding documentation.  However, it does not list the default media type for PATCH.  It does list the supported media types (https://docs.spring.io/spring-data/rest/docs/current/reference/html/#_patch), nor does it list how to configure this (if that is possible).\r\n\r\nIt would be helpful to add explicit language such as \"PATCH does not have a default media type\", etc.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bemace": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/332", "title": "Demonstrate use of @DataJpaTest when multiple datasources are configured", "body": "I've successfully configured two datasources per your example, but it appears additional configuration is needed to make @DataJpaTest's magic work. Currently my attempts fail with below stack trace, and it's not at all clear to a beginner what needs to change to make this work.\r\n\r\n```\r\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean]: Factory method 'mainEntityManager' threw exception; nested exception is java.lang.IllegalArgumentException: No visible constructors in class org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration$EmbeddedDataSourceFactoryBean\r\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)\r\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)\r\n\t... 66 more\r\nCaused by: java.lang.IllegalArgumentException: No visible constructors in class org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration$EmbeddedDataSourceFactoryBean\r\n\tat org.springframework.cglib.proxy.Enhancer.filterConstructors(Enhancer.java:666)\r\n\tat org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:567)\r\n\tat org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomasdarimont": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/330", "title": "Spring Data JPA - Demonstrate usage of JPA 2.1 @SqlResultSetMapping", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/127", "title": "Add example for custom JPA 2.1 Converters to JPA 21 examples.", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/125", "title": "Add example to demonstrate support for JPA 2.1 EntityGraphs.", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/125/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/107", "title": "Add example for Spring Security integration in Spring Data MongoDB.", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/78", "title": "Add example for adding custom behaviour to all repositories.", "body": "We should add an example that demonstrates [this](http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-behaviour-for-all-repositories).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/78/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/60", "title": "Add example for Java 8 Streams via default method.", "body": "We should show how to use Java 8 Streams in a default method by delegating to another finder and calling stream() on the result.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/60/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/50faabb2af03b54ac54692565f608a1144c4620c", "message": "#119 - Added example for use of SpEL expressions in JPQL update statements."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/fbcded19e641415baa7db30d733f5a75cacdb071", "message": "#120 - Added missing main method to Application in multi-store REST example.\n\nPreviously a mvn clean install in the Spring Data examples root failed because the Application class in the multi-store example was missing a main method that is required by the Spring Boot Maven plugin."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d95ed268b29d44d8c58dcffec117f19176caa1d0", "message": "#107 - Added example for Spring Security Integration in MongoDB.\n\nInitial project and with example for dynamic data filtering based on current security context information.\n\nRelies on DATAMONGO-1244 to be resolved.\n\nOriginal pull request: #108."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8037e4d1576914764082c1fadad416db9ed3b2d9", "message": "#106 - Add CompletableFuture example to readme."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/fd7d35a826bec6b42688c39e330b2f88b33ccb1f", "message": "#106 - Add example with CompletableFuture and Java 8 for JPA.\n\nSimple test case that demonstrates CompletableFuture.\n\nOriginal pull request: #106."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/98bfe349966c04f7ad9b5df3304ee32c670ddaf5", "message": "#105 - Added example for filtering data solely on Role in jpa-security sample.\n\nAdded example for dynamic filtering in query solely based on the current principals role."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6a57cef345945982f4ee6b1c5ff139afc1838518", "message": "#104 - Fix jpa eclipselink example build.\n\nAdded main method to eclipselink JPA example to prevent \u201cUnable to find main class\u201d error from spring-boot repacking during build."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/65cef4132db8e04e3e5d952430ae71edd3e9b6b4", "message": "#66 - Added JPA example for using Java 8 Streams with a derived query.\n\nThis example demonstrates the usage of Java 8 Stream as return type for derived queries."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f5e6b3b6be99023f26f9ee5124df3322ec707986", "message": "#62 - Add example for Java 8 Streams in JPA.\n\nThis example demonstrates streaming of results in JPA.\n\nOriginal pull request: #63."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/73be2fcddb7b5649ff276f352dac27db06b85b40", "message": "#54 - Added a project for MongoDB examples using Java 8 features.\n\nThis initial version of the example projects demonstrates the usage and mapping behavior of Java 8 Streams in repositories. The test cases oppose a plain List based query method with one that uses a Stream and shows how the former pulls all data into memory first and the iteration is done over the pre-populated list. The execution of the Stream based method in contrast shows that the individual elements are read and converted while iterating the stream."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4841bbdc11ac0d3d685327ef7f04f2fe026742fa", "message": "#19 - Add example for Spring Data Cassandra.\n\nShows java-config as well as Repository configuration."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f4266ac211dda6f45e2bf06862d44258fa9f8a88", "message": "#15 - Added example for top/first keywords in repository methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e17b24b6927a28518de34343c8884a93c1d2fdc0", "message": "Added custom class rule to cope with mongo versions that don't support text-search.\n\nTestSearch is only supported from MongoDB 2.6 but travis CI uses an older version at the moment."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cba9500e47bbc1db628ad818bbad28d851c19848", "message": "Fix failing MongoDB exposesGeoSpatialFunctionality test case for travis.\n\nMake distance check in exposesGeoSpatialFunctionality test case more robust against \nminor numeric differences. Travis CI seems to use an older Mongo DB version that produces a slightly different result than what we get."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/67ab7716dcf15c44ba4f9a0076bcbf17ffe5995e", "message": "Added example for SpringSecurity integration.\n\nFixed some Java 6 incompatibilities.\nAdded mention for the security module in readme.\n\nOriginal pull request: #1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c39ae4e6bffb5b5282faaf9cd90efa242dffcd97", "message": "Added intellij artefacts to gitignore."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/466e4d40ba3ae56313fb919062974753a5808e06", "message": "Added example for JPA 2.1 stored procedure support."}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/331", "title": "#330 - Demonstrate usage of JPA 2.1 @SqlResultSetMapping.", "body": "Sometimes, e.g. for analytics, it is handy to be able to\r\nreturn a different entity result type from a Repository query\r\nmethod than the base Repository entity type or an\r\ninterface based projection.\r\n\r\nThis demonstrates how to use a custom `@SqlResultSetMapping`\r\nin combination with `@ColumnResult` introduced in JPA 2.1.", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/126", "title": "#125 - Added example to demonstrate support for JPA 2.1 EntityGraphs.", "body": "This example demonstrates the use of JPA 2.1 fetch graphs in two ways:\n1) By referencing a NamedEntityGraph declared on the Product entity\n2) Declarativly defining an entity graph on a repository query method.\n", "author_association": "COLLABORATOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/48593611", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/48593611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61372860", "body": "I removed the logging configuration and used lombok in the domain class.\nHaving a Spring-Boot-Starter would help with the configuration. But thats something that we can add later.\nI'll define a custom JUnit rule that checks whether Cassandra is up - I'll add @Ignore to the cassandra tests for now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61372860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62887368", "body": "Do you have a link to your example project?\nThe samples use Spring Boot 1.1.9.RELEASE.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62887368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68412699", "body": "I built a [minimal web ui](https://github.com/spring-projects/spring-data-examples/pull/47) - that should met the above requirements.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68412699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/77834206", "body": "I just wanted to highlight two different ways to use Java 8 Streams - the variant with the default method simply shows how easy it is to extend the existing API without having to call stream() on the result yourself - this makes for shorter examples and demonstrates another use of default methods.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/77834206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78472094", "body": "I thought it would be a good idea to mention this since it is not too obvious why we currently don't have `Stream<T> findAll()`.\n\nBut I think we should just mention this in a blog post and use a derived query in the example.\nI just changed the PR accordingly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78472094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93699975", "body": "Alright :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93699975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/113790151", "body": "Okay just found: https://github.com/spring-projects/spring-data-examples/tree/master/map\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/113790151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/130454173", "body": "Hi Carlos, AFAIK we don't support that at the moment. \nCurrently we support exactly one output parameter mapped to the return value of the `@Procedure` annotated method call.\n\nI could imagine that we could support custom result structures where multiple output values are mapped to their fields. What would be your suggestion for such an API?\n\nCheers,\nThomas\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/130454173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356410049", "body": "Just needed something like this today and thought it would make a helpful example.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356410049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356532711", "body": "Hi Jens, \r\n\r\nI'm not sure what you mean - this example shows how to use a JPA named native query \r\nwith a custom result set mapping that works well with value objects.\r\nYes the Spring Data Repository maps the named query to the query method. \r\nIt just shows that everything works together.\r\n  ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356532711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/11721669", "body": "I'll apply this to master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/11721669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14663906", "body": "Cool stuff - looks very promising - I think this could also work very well together with a library like mapstruct: http://mapstruct.org \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14663906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760334", "body": "Well SecurityExpressionRoot is an abstract class... with only two impls:\n- org.springframework.security.web.access.expression.WebSecurityExpressionRoot (needs http session)\n- org.springframework.security.access.expression.method.MethodSecurityExpressionRoot (package protected)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760476", "body": "Not really but for some reason maven tries to compile this with source java 6...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761534", "body": "Done - or not...?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761598", "body": "The github ui dosen't show the actual file state... \nthe query in the comment looks now like:\n\n``` sql\nselect o from BusinessObject o where o.owner.emailAddress like ? \n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761887", "body": "I just wanted to demonstrate that the owner is the owner we expect etc...\nIn addition to that we could also use the data field to test additonal stuff like encryption, value masking etc... therefore I'd keep it in as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/54239912", "body": "how about @NoArgsConstructor?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/54239912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/54250044", "body": "JPA would even work with private ctors AFAIK ;-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/54250044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "Gegoiuty": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/320", "title": "@GeoPointField can't convert camel-case to underscores", "body": "This is the GeoPoint field:\r\n![2](https://user-images.githubusercontent.com/5738688/32906586-49a9f552-cb38-11e7-82c1-ea50fd86c301.png)\r\n\r\nAdd this in model:\r\n```\r\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\r\n```\r\n\r\nAnd this is the mappings:\r\n![1](https://user-images.githubusercontent.com/5738688/32906777-f3902ca8-cb38-11e7-860c-a595782f071f.png)\r\n\r\n\r\nObviously, PropertyNamingStrategy.SnakeCaseStrategy works for @Field, but not work for @GeoPointField.\r\n\r\nHow can I solve this problem?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "schauder": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/317", "title": "Spring Data JDBC - Demonstrate customisation with different Granularity", "body": "- per Type\r\n- per Operation", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/316", "title": "Spring Data JDBC - Demonstrate custom mapping of Maps / Lists", "body": "How can a mapping to an intermediate table get accomplished?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/316/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/315", "title": "Spring Data JDBC - Demonstrate Jooq integration", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/314", "title": "Spring Data JDBC - Demonstrate MyBatis integration", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/313", "title": "Spring Data JDBC - Basic Example", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/80b70e6bd2f4c5940c4748c452fe9939fc12b603", "message": "#297 - Fixed failing test due to repository methods now returning Optional.\n\nAlso migrated Tests to AssertJ. Fixed compilation failure due to changed API of CollectionOptions"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/20f69639274a3ce42a3471f1c53fd88fe8ba22ce", "message": "#297 - Fixed failing test due to repository methods now returning Optional.\n\nAlso migrated Tests to AssertJ."}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/324", "title": "#313 - Demonstrating basic usage of Spring Data JDBC.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288303341", "body": "The EntityManager itself is not thread safe. But there is one Entity Manager per thread, so it is never accessed from multiple threads. Hence the complete setup is thread safe.\r\n\r\nThis is basically the same mechanism as with `@PersistenceContext`. \r\n\r\nThe concept behind this are Bean Scopes, which you can read about here: https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-scopes", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288303341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/298503041", "body": "Trying this real quick, showed the following:\r\n\r\n    mvn clean install \r\n\r\nworks just fine.\r\n\r\nexecuting the test class in the IDE produced the failure mentioned above in `findByFirstNameAndLastNameBySpEL` and another one in `findByFirstNameAndLastName` with this caused by:\r\n\r\n    Name for parameter binding must not be null or empty! For named parameters you need to use @Param for query method parameters on Java versions < 8.\r\n\r\nMight be that the parameter name information is missing in the class file or something, although maven and my IDE _should_ use the same JDK.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/298503041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/298503855", "body": "@frankchang1990 can you provide details in what kind of environment you execute the test? (JDK, Maven vs IDE ..)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/298503855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/298509415", "body": ":-/ my test failures now disappeared, so I can't reproduce the error at all. Which reinforces my suspicion that this might be an artifact of the environment, possibly not using jdk8. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/298509415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299099427", "body": "Thanks for the effort, but this is exactly the behavior we would expect if you do not use Java 8. With  Java 8 we can obtain the parameter name via reflection and don't need the `@Param` annotation.\r\n\r\nExamples like all other `master` branches of Spring Data rely on Java 8. So as long as all things seem to indicate that the issue is with the environment used for compiling and running the code, we won't accept a PR I think.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299099427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299099879", "body": "Sorry, but I don't think this is a bug.\r\n\r\nMake sure \r\n\r\n* you compile all the code with JDK 8. \r\n* execute it with JDK 8\r\n* don't set any options that exclude parameter name information\r\n\r\nIf the problem persists let us know about the exact configuration, so we can reproduce this issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299099879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299114888", "body": "@chan71 this makes it just even more obvious, that the issue is with the IDE and/or its configuration and not an issue of Spring Data.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299114888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305434479", "body": "Do you see this during test execution or when actually running the code? Did you build it using Maven? Because the pom.xml of the root project specifies compilation with `-parameter` which should take care of this issue. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305434479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305441060", "body": "> Sorry, am not that good at spring and maven, question might sound silly!\r\n\r\nNo problem, I'm the new guy in the team and really good at asking silly questions.\r\n\r\nSpring Data tries to get the information you provide with `@Param` from the actual Bytecode. This works because from Java 8 on the java compiler does actually store the parameter names in the byte code, but only when `javac` is called with the `-parameter` flag.\r\n\r\nSo what you have to do is configure Maven to do so, i.e. you add a configuration for the maven-compiler-plugin. [This is already done in the examples project](https://github.com/spring-projects/spring-data-examples/blob/master/pom.xml#L110), and you probably can copy it almost verbatim from there into your `pom.xml`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305441060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/312806396", "body": "Merged. Thanks for contributing.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/312806396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319689692", "body": "That is correct, we currently don't have `Stream` support for Querydsl.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319689692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330133318", "body": "Thanks for this. \r\n\r\nWe added the logging recently, to hunt down when exactly a certain exception handler was triggered. So it looks like we found at least one case. I'll look into it.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330133318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330136350", "body": "In any case, you can probably ignore the exception, e.g. by excluding the logger 'org.springframework.data.jpa.repository.query.SpelExpressionStringQueryParameterBinder'\r\nthis is the only kind of logging it does.\r\n\r\nIf you ever see other exceptions related to parameter binding gone wrong (like the claim that a required parameter wasn't bound, the information from this logger might actually contain more helpful information.\r\n\r\nThe logging was introduced as part of https://jira.spring.io/browse/DATAJPA-1172", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330136350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330139559", "body": "This issue will be tracked under https://jira.spring.io/browse/DATAJPA-1179 since it is not related to the examples.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330139559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332153199", "body": "Thanks for the effort, but there is already a PR in the working, duplicating this and some more.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332153199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/341345093", "body": "Thanks for the pointer, but that is not for integration with Spring Data JDBC.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/341345093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356511880", "body": "Hi @thomasdarimont, not sure if I'm missing something, but from a Spring Data perspective this is a pure named query, right?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356511880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/362199416", "body": "Not when someone finds time to properly address this. In the meantime: I did some experimenting with SP a while back. The resulting repo might be of some use (it's Oracle base though): https://github.com/schauder/calling-oracle-stored-procedures-with-cursors \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/362199416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/363347205", "body": "Could you guys take another look?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/363347205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20452233", "body": "Aren't the @RequiredArgsConstructor annotations superfluous?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20452233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153741951", "body": "To be honest I'm not 100% what was going on, but it pulled in 2.0.0-RELEASE in the tests which is missing some methods on the `PropertyPath`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153741951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153772483", "body": "Yes.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153772483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/166215508", "body": "No, HSQLDB does not get pulled in through the parent.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/166215508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/166216303", "body": "The dependency to commons is necessary because the rest of the examples depend on 2.0.0-RELEASE and I guess because it is declared higher up (?) it overwrites the transient dependency of SD-JDBC.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/166216303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "totothekiller": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/309", "title": "QueryDSL Web Example fails when Predicate is null", "body": "Start the QueryDSL Web Example : then go the web page and try to go to page n\u00b02.\r\n\r\nIt will raise a java.lang.IllegalArgumentException: Predicate must not be null!\r\n\r\nPredicate is null when no search is done in UserController. I'll propose a PR ASAP.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/311", "title": "#309 - QueryDSL Web Example fails when Predicate is null", "body": "#309\r\n\r\nI'll use PagingAndSortingRepository in order to search without Predicate.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olivergierke": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/289", "title": "Simplify EntityManager setup for multiple DataSource's example", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/234", "title": "A round of polish in terms of up to date Spring Boot annotation usage", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/218", "title": "Add example for MongoDB GridFS usage", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/192", "title": "Add note about Lombok usage to README", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/192/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/182", "title": "Add readme to jpa/examples to explain the contents", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0e9e979c9a37dc1dd55ed553322c2d1270290492", "message": "#319 - Upgrade to Spring Boot 2.0 M6.\n\nTweaked setup of in-memory user accounts in Spring Security example to accommodate the changes in Password encoding.\n\nTweaked Elasticsearch examples to use Log4j 2 instead of Logback as embedded Elasticsearch requires it to run properly."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7bad34a7deaefb0b51d8842675af6f448e5925b0", "message": "#308 - Remove explicit Hibernate dependency handling."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/32ee5a11d55ec30384d78a4351035a7c6fb9699d", "message": "#304 - Upgraded BOM sample to use Spring Framework 5 and Spring Data Kay."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6fec7a5d0f3a266a43d9e0836a0319a0086a2e8d", "message": "#303 - Upgraded to Spring Boot 2.0 M5.\n\nRemoved Spring Framework 5 build profile as Boot 2.0 is based on that already. Removed obsolete custom property to use Spring Data Kay. Removed explicit declaration of the compiler plugin as Boot defaults to Java 8 and compiling with -parameters now."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ffc33fcf9293418212abfd13979e7139c9f5b6c4", "message": "#297 - Adapt to latest API changes in RxJava 2 in Cassandra module."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/562b95996b0553fdcf0e3448ec80710604969193", "message": "#276 - Changed Javaslang example to use Vavr instead.\n\nModule renamed and switched to Vavr packages. Explicitly refer to the Kay snapshots as the Vavr support is not available in a Spring Data release yet."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/567da544b7e4082a6df550044313661c44c91741", "message": "#297 - Fixed POM setup for 2.0."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6f3dd29431b69e1ac498ac21ba056b00e91d524f", "message": "#297 - Re-enable Redis reactive example.\n\nRemoved fixed versions of dependencies. Removed explicit declaration of Lettuce version as it is now managed by Boot. Switched to Lettuce as primary Redis driver in application setup. We keep using Jedis in the embedded server support."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d7fcdf56182d15e965cbe973d78141056664c75c", "message": "#297 - Updated README."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a0775f774bdffcb5330260377da4d0e919027e9e", "message": "#297 - Removed fixing the version of Spring Security to 4.0 from REST samples."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/50945ac434cd3b9b04e60ea608f5ead4209f9f07", "message": "#297 - Upgraded to Thymeleaf Spring Data dialect compatible with Thymeleaf 3."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/42a27837a0c6e670f4f1b0664eb4efb8c51385aa", "message": "#297 - Adapt to latest API changes in Reactor 3.1 RC1 and Spring Data MongoDB."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b87336ba8f509cfad10b956bc7618b5652776eea", "message": "#297 - Update to changes in ExampleMatcher API."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5d34f0a00db03826eaf3407ec11e9dad1d77fb19", "message": "#297 - Tweaked persistence context handling in security tests.\n\nThe modifying query now clears the EntityManager so that the changes are really flushed to the database. This is necessary as Boot 2.0 flips the default for Hibernate's new identifier mappings which causes entities less aggressively being flushed and the previously used detach apparently removing them from the persistence context without ever making it to the database."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4164bc4607aa1f88b2d3fcf1fd8a413b0cfb4dea", "message": "#297 - Upgraded to Boot 2.0 and Spring Data Kay.\n\nBumped version number to 2.0. Upgraded to Spring Boot 2.0.\n\nStuff disabled in the meantime:\n\n- Cassandra: needs API adaptions in configuration\n- JPA > Security: test fails with weird Hibernate error\n- Redis > Reactive: API updates needed\n- Solr: configration updates necessary\n\nadjust versions\n\nUpdated elastic search to the new version.\n\nFixed the reactor version to Bismuth-BUILD-SNAPSHOT. This probably should be undone when boot references the proper bom."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b527cbf1d65fb1bfb0c416551ef9dc655dc71c6f", "message": "#291 - Upgraded to Spring Boot 1.5.6.\n\nUpgraded to Boot 1.5.6. Updated dependencies of reactive projects to latest versions to make sure the APIs of Boot work with the changes in Spring Data Kay RC1. Upgraded all other dependencies to match and got both the Redis and the Cassandra examples to compile again.\n\nDisabled Cassandra reactive samples for now as they fail at runtime."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/013058d410f08cfde869bb68a372d40ea3d6b969", "message": "#290 - Polishing.\n\nImports and typos in JavaDoc."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/663c8bd73b1c5f91d69055f2063a12176086879b", "message": "#290 - Removed obsolete @Autowired annotations."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/74978efbe68b92783a2617b064f41a53e59aac0d", "message": "#279 - Upgraded to Spring Boot 1.5.4."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7870a7e060eb31b3ba62de03d2d15a108b367734", "message": "#278 - Fix entity characteristics in Customer in Eclipselink example.\n\nWe now calculate the equals(\u2026) and hashCode() methods by looking at the indentifier only. Removed default constructor in favor of Lombok's @NoArgConstructor."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/aa2c2e1fe0729974f578212adb46f095418af228", "message": "#274 - Maven build now runs with -U to make sure we always update snapshots."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/dbb13f831f218f3b34383151e9285554810cad99", "message": "#273 - Upgraded to Spring Boot 1.5.3.\n\nRemoved manually declared bean for Spring Security's EvaluationContextExtension."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6ee8c48815406a7b7bd7cf489bf2840081c7de5f", "message": "#262 - Upgraded to Spring Boot 1.5.2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5b80a0b3c10226eb4345aa4d332262474fa10b94", "message": "#263 - StoreRepository now correctly declares UUID as identifier type."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6d76cb0aba87ab99d9a081ec7db49c9286321e84", "message": "#258 - Upgrade to Spring Boot 1.5.0.RELEASE."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/381301ee26ad3219db78efc50981ed8d259f57c6", "message": "#251 - Ordered module declarations alphabetically."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/22693559a43d6058510601f0c23a0b51dc1b8c72", "message": "#251 - Added LDAP module to root build execution."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5a450afa09ad1c0c418f1e39504810565314e58f", "message": "#251 - Polishing.\n\nFixed package structure in sources (nested folders instead of dot-separated ones). Removed obsolete dependency in POM and point to relative POMs."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a41f69127caba6f7b96c868336b93968c000f728", "message": "#255 - Fixed setup to use Neo4j embedded.\n\nSwitch to the Spring Boot starter for Neo4j for consistency reason. Added explicit dependencies to Neo4j OGM Embedded driver and Neo4j itself."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/1d3af17572620e858cfff4934a9b814b96c41dff", "message": "#226 - Polishing."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bc3623b532d9d1ea5af9d3df764749c13959d0aa", "message": "#253 - Removed custom Neo4j infrastructure setup in favor of Boot 1.5's auto-configuration."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4cf37f35278bd7ea4402ad1f8aac0c5ad552d155", "message": "#252 - Upgraded to Spring Boot 1.5 snapshots (and thus Ingalls).\n\nLet JPA examples work with latest Hibernate (5.2.7)."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e3139f0822dc81482c5e1a865b266911c2ab0b56", "message": "#240 - Upgraded to Ingalls RC1.\n\nUpgrade to Spring Boot 1.5 snapshots due to minor API changes in Spring Data REST so that recompilation is requited and only 1.5 picks up Ingalls. Upgraded to Querydsl 4.1.4, Spring Framework 5 build profile to 5.0 M3.\n\nSwitched to @SpringBootTest in Spring Data Redis samples as the previously deprecated @SpringApplicationConfiguation has been removed in 1.5."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/be2c0b298cf77e4cbe2d648fb989d29fe3808588", "message": "#237 - Upgraded to latest JPA providers.\n\nEclipselink 2.6.0 -> 2.6.4\nHibernate 5.2.1 -> 5.2.5 (was 5.0 in some places before)"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6709a6137f7bd95ce5e010fd4a27b3e981f1aa7d", "message": "#236 - Removed obsolete Logback configuration files."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ec6814091ed7849c23bfa40228f127e063b3270c", "message": "#233 - Update to OGM 2.1.\n\nRequired to make sure the current snapshots see the latest API changes."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/1ddfd03d84a0ffeb58be8afdc1574799832a3666", "message": "#232 - Added example to show JPA stream executions are rejected without surrounding transaction."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cd36f6f0da0bad8385993c1b7587ec7985543699", "message": "#231 - Added example for Javaslang support on repositories.\n\nAdded an example that shows how Javaslang's collection types and Option can be used as repository query methods starting with Spring Data Ingalls RC1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ab2ac6d7c4395433afff6465ded0b6da03874def", "message": "#228 - Moved away from legacy Neo4j infrastructure setup."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f3f8f79478d041b159f8981d860d8a4d02e28d6b", "message": "#215 - Upgraded reactive examples to Kay M1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/00a45947642b4ca6b1ead48394175ef85c57e248", "message": "#215 - Polishing.\n\nMinor formatting, trailing whitespace etc."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cf5d9f35622d1e1a34ce8f98d281cbeb177c3d21", "message": "#217 - Upgraded to Spring Boot 1.4.2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/de72fd4a66e27de153219de0a8c98ee2a850d95c", "message": "#212 - Fixed dependency setup for Spring 5 build profile.\n\nUpgraded the profile to include Spring HATEOAS 0.21, as older versions refer to the removed AnnotationMethodHandlerAdapter."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9df803ef8c2952d8504ec36ca1a8d3325e94ca4e", "message": "#212 - Upgraded build profile for Spring 5.0 to M2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6a2ee8334c6e4baebe48cef439a83c5a51bbf306", "message": "#211 - Upgraded to Spring Boot 1.4.1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/17296a6b3004e1b98499f7d983e5995e7677f541", "message": "#210 - Switched to annotation based registration of entity listeners."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/34fe9d2720e9402db7708b9101011266d9e00d5a", "message": "#206 - Added more projection examples in JPA.\n\nAdded another one that shows projections can be wrapped into an Optional."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7519f8e3858663bec0a716673602dcb7e9b61f50", "message": "#205 - Added build profile for Spring 5.\n\nInverted dependencies in the web example as Spring Boot 1.4 ships Tomcat 8.5.4 which contains JPA 2.0 types and \u2014 if they end up on the classpath before the actual JPA API jar \u2014 breaks the Spring 5 JPA bootstrap as it's assuming JPA 2.1 to be the fundamental baseline."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0f7afacafceb835b77509721a9edbbd6fc416ec7", "message": "#204 - Upgraded to Spring Boot 1.4 GA."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d2e5c4b28fc8bc5dd003094323b23940a08cf9c3", "message": "#202 - Added example for JSONPath and XPath based payload binding to projection interfaces.\n\nSee the readme for details."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/15e8ba31cc47217fe475edd209ce81feffa0656c", "message": "#201 - Added example for constructor expression in JPA projections."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9ee13be9b54caea134f5f0b5512761506551d250", "message": "#197 - Upgraded to Spring Boot 1.4 RC1.\n\nTweaked the output folder for Querydsl type generation to avoid running into a bug in the Maven compiler plugin 3.5.1 [0].\n\nFixed an issue in a sample script used to demonstrate MongoDB script execution as the new JavaScript engine seems to be more strict.\n\nSwitched to the MongoDB starter and excluded the legacy MongoDB Java driver from projects using Querydsl to consistently make use of the current driver only.\n\n[0] https://issues.apache.org/jira/browse/MCOMPILER-271"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5bb1b8b77c0352861e9095de62f5c77fc2cda4c1", "message": "#195 - Make JPA examples work with Hibernate 5.2.\n\nUpgrade to Hibernate 5.2.1 and Spring Framework 4.3 to pull in the necessary tweaks to let the latter work with the former.\n\nExcluded hibernate-entitymanager and refer to hibernate-core instead as the 5.2 release has merged the artifacts and the former is not available anymore.\n\nThe project showing the stored procedure support still needs to stay on Hibernate 5.0.7 because the stored procedure support on HSQLDB has been broken since 5.0.8. The original issue [0] has been fixed but running the module on 5.2.1 now runs into a NullPointerException from AbstractProducedQuery [1].\n\n[0] https://hibernate.atlassian.net/browse/HHH-10515\n[1] https://hibernate.atlassian.net/browse/HHH-10915"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/812eb8991692b1cd69fa91910f96de28cc053bb5", "message": "#196 - Upgraded to Hopper SR2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6684c8c69ba731103ad744a69d0bcc79f94fe2d3", "message": "#190 - More simplifications for Spring Boot 1.4 M3.\n\nReplaced all occurrences of @SpringApplicationConfiguration with @SpringBootTest. Using SpringRunner instead of @SpringJUnit4ClassRunner now."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/24ca298de2a6a2657865d5147a4931bd55f8c460", "message": "#193 - Added examples for using projections with pagination in JPA and MongoDB.\n\nRequires an upgrade to snapshots as the JPA implementation is broken in Hopper SR1 but will be fixed in SR2 (Boot 1.4 RC1). Switched to use @SpringBootTest in test cases."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/12628b6a3f27815cd53f5789a38d598e0cc04b2a", "message": "#190 - Upgraded to Spring Boot 1.4 M3."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/2314c6e726a6941fde033d25161af6b3cb8efaf1", "message": "#186 - Prepare upgrade to Spring Boot 1.4 M2 and Hibernate 5.\n\nUpgraded to Spring Boot 1.4 M2 and thus Hibernate 5.1 transitively.\nSwitched to H2 as database for all examples using JPA by accident as the\ninvalid error logging for HSQLDB schema creation got worse in 5.1 (see\n[0]). The JPA examples themselves have to stay on HSQLDB as H2 doesn't\nsupport stored procedures. The stored procedures example in turn has to\nbe downgraded to 5.0.7 as all following versions currently break stored\nprocedure execution support [1]. Reworked the JPA auditing example as\n5.1 breaks on generic types used in support types like AbstractAuditable\n[2].\n\nTweaked content type assertions in some REST related test cases as\nSpring 4.3 returns an encoding alongside the media type.\n\n[0] https://hibernate.atlassian.net/browse/HHH-10605\n[1] https://hibernate.atlassian.net/browse/HHH-10515\n[2] https://hibernate.atlassian.net/browse/HHH-10514"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/763710ddc9c3aaf22bdd21cf9cf9bf98d1d5a242", "message": "#185 - Upgraded to Querydsl 4.1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5247a97203e8e631ede89e687ef2753acedbfb89", "message": "#184 - Re-enabled Spring Data Elasticsearch example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/2c4a6c4e43243adb4b78e76c0d1d990bdc8fce20", "message": "#183 - Upgrade to Hopper SR1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cb50af3595ea6ecf7f59ced3c17a6e08ed0150c5", "message": "#181 - Upgraded to Spring Data release train Hopper."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4cc558e42e23977d9a320af992e8e038b9badef5", "message": "#179 - Fixed build for multiple-datasources module after Spring Boot 1.4 upgrade.\n\nWe now explicitly disable DevToolsDataSourceAutoConfiguration as it currently expects exactly one DataSource being present.\n\nSwitched to Spring's @Transactional instead of the javax.transactional one."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b075ca6358b375d5227b9e9ecb4a53aea8e65a2c", "message": "#177 - Polished domain model.\n\nInlined Address type into Store. Moved to @Value and removed code that got obsolete with that.\n\nRemoved custom WebConfig that's not needed anymore with Spring Boot."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/26a453af56e491bab7b62ee15b52716a0ec6329d", "message": "#175 - Upgraded to Spring Data Thymeleaf dialect 2.1.1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ad854bc19dc524e309d6509e92da27e6dc6c8725", "message": "#174 - Applied default sorting to controller in Querydsl web sample."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/84bfe86ecc91cf694a5f4fb45dec3cb681cf0b85", "message": "#173 - Switched to embedded MongoDB for Querydsl web example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/75d25de1e6e279e4d5e2d16d1c3483a2e2fd97d0", "message": "#171 - Switched to Thymeleaf Spring Data dialect for pagination in views.\n\nAdded dependency and bean definition for the SpringDataDialect. Templates now use three different elements of the Thymeleaf Spring Data support:\n\n- Pagination information (pagination summary)\n- The pagination links including first / previous and next / last links\n- Pagination links to navigate through the pages"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/91c06febe47050c53f2586af664fefb091f4fc8a", "message": "#172 - Added Spring Boot dev tools to all projects."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f8bfe5c79e30eeb7986e0cbd886ac92abcdbd046", "message": "#163 - Upgraded to Hopper RC1.\n\nRemoved all previous references to snpahosts. Removed explicit version declaration of Lombok as Boot sets that for us in 1.4.\n\nUpgraded Elasticsearch dependency to 2.2 and uncommented the actual sample module as it needs to be updated due to API changes in Elasticsearch and Spring Data Elasticsearch in turn.\n\nAdapt to API changes in entity lookup configuration for Spring Data REST.\n\nTweaked Neo4j build setup by using the dedicated embedded driver JAR."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/786ce2d39a3c034fba9d66cbf3b106a9c90cd5a9", "message": "#149 - Polishing.\n\nRenamed repository folder to repositories. Tweaked package name to reflect module name. Polished formatting in readme. Switched to Spring Boot version property for 1.7 RC1 upgrade.\n\nOriginal pull request: #162."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/1f94bb12f128f7ea0598bde79055408a6344c79d", "message": "#153 - Polishing.\n\nSimplified domain model using Lombok. Moved configuration classes into test source folder.\n\nOriginal pull request: #154."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/99d1597756b3c688b4eca438a139b6a223c0b16b", "message": "#155 - Upgraded to Spring Boot 1.4 M1.\n\nSwitched to renamed Redis starter POM.\n\nRemoved invalid @Transactional annotation from projections example in MongoDB.\n\nAdded Mark Paluch as contributor in the root POM."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bb833a27b66b8faba66dde405cd235513a2106e6", "message": "#151 - Upgraded to Hopper M1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a0da2925cc859e100c6204713c4ad2e38e7e08dc", "message": "#146 - Polishing."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9cb44b316649c2b2693dea37523a78204f67ac77", "message": "#81 - Samples for new projection support for JPA and MongoDB."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a872e57ed17a1488b2f77f02a0f5f0ce7d6c13c6", "message": "#151 - Fixed Neo4j examples for Hopper."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/961bd1a28462c8cf9531f73804585865c91ff802", "message": "#151 - Tweaked Querydsl web examples to use Querydsl 4."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6ccc59004b148565e2bf385b951f75c9656af0ab", "message": "#151 - Updated Solr examples to use Solr 5."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/500359015ccf148f4f654c2faad4b1185f4e0ac8", "message": "#151 - Tweaked Neo4j example dependencies."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/62b2d644cc9c8603cb6cd85d0c1080074065a6c4", "message": "Updated dependencies and codebase for Querydsl 4."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/35ba3bb5e12bad618b59d683158724eda807cdbc", "message": "#147 - Upgraded to Spring Boot 1.3.2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/fe6e2172cdb398b06c1e771b4553e8211c5256d8", "message": "#144 - Make use of the dedicated configuration API for EntityLookups.\n\nRather than declaring a dedicated EntityLookup bean instance we now use the configuration API introduced on RepositoryRestConfiguration to define the identifier and lookup mapping.\n\nTweaked readme accordingly."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0de282b2f2f7e13054bebe73e4d2f5d8ef32431c", "message": "#144 - Added sample for URI customization in Spring Data REST."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c6b3ee8b5bfde82f70d5be4cb92d552de86ce4a9", "message": "#143 - Upgraded to Spring Boot 1.3.0.RELEASE."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/66c6b939042bd1d0df40a843c807704ef07443d2", "message": "#142 - Upgraded to Spring Data Gosling SR1.\n\nUpgraded to latest Querydsl 3.6.9 as well."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d776cbda3a17c4419241322c07eda42a3f53d15e", "message": "#140 - Upgraded to Spring Boot 1.3 RC1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9a5c270ec24e282684ea032553377b75970a87f4", "message": "#139 - Switched to embedded MongoDB for integration tests.\n\nRemoved MongoDB dependency by adding Flapdoodle embedded MongoDB. That allows us to get rid of the utility module we had in place for the MongoDB samples guarding the tests to only run when a MongoDB instance is running.\n\nTweaked Travis setup to not require the MongoDB service anymore."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d9dfb81e126b1c35737dc33194616e1c2bcbea63", "message": "#134 - Added example for using Optional as query method parameter.\n\nGot rid of Guava dependency in favor of JDK 8's Optional. Upgraded basic JPA example to Spring Data Hopper to get access to the newly introduced functionality."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/549ae7fe7138c991b82f026bcd4043cd200efcfc", "message": "#132 - Upgraded to Spring Boot 1.3 M5.\n\nRemoved obsolete explicit dependency upgrades. Upgraded to Querydsl 3.6.7 along the way."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0fa8c12806653667a551368fc158a31813f7454f", "message": "#131 - Polished Spring Data Neo4j example.\n\nSwitched to milestone version of Spring Data Neo4j. Used Lombok in domain types. Used assertThat(\u2026) matchers in test case for consistency. Inlined Spring configuration into test case. Upgraded to Lombok 1.16.6 along the way.\n\nFixed indentation in pom.xml files to use tabs instead of spaces.\n\nOriginal pull requests: #129, #130."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0c1bee04b34be3dae06f08ca7ccb120b9d2365ed", "message": "#128 - Upgraded to Spring Data Gosling GA.\n\nSpring Boot 1.3.0 M2 -> 1.3.0 M4\nSpring Framework 4.2.0 -> 4.2.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9a91c4073f416c9fa487a9b0e268fa5e883bacc2", "message": "#123 - Dependency polishing.\n\nConfigure the Spring HATEOAS version int the Spring Data REST sample root. Upgraded Spring Security to 4.0.2.RELEASE."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bd90bd04d66c21bb2cd6004a0c3a8c10bf37e657", "message": "#124 - Added missing dependency to Querydsl MongoDB.\n\nApparently got lost during the merge."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7eab65b53f3f50de108c98e88a8c4871681d3ca1", "message": "#124 - Added Querydsl integration to Starbucks example.\n\nEnabled Querydsl query metadata creation to the Starbucks example and added binding customizations to UserRepository."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bbaa53c873cd8e6adfd6ca4c87345866debe1e70", "message": "#124 - Polished Querydsl binding example for plain Spring MVC usage.\n\nCollapsed domain model into a single class. Merged application configuration classes into a canonical Application class.\n\nTweaked UserInitializer to expose dedicated methods to make sure the parameter is only exposed if remote users are used.\n\nRemoved JavaScript based frontend as it was basically testing the Spring Data REST exposed API but not the data obtained through the Spring MVC controller. We're going to create a dedicated example for the Spring Data REST integration."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a999bed74794bfb16695c48a13ea4e97a62a077c", "message": "#123 - Upgraded to Gosling RC1.\n\nUpgraded to Querydsl 3.6.6 along the way."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9bb284fc84fd2d421729e805d220b5d0de157161", "message": "#119 - Polishing.\n\nChanged the update clause to set the the entire principal the reflect a domain object design that's closer to what might be set up if Spring Data auditing is used, too.\n\nMade use of Lombok in the domain objects where possible. Reduced visibility of repository interfaces to package scope. Minor test case cleanups."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8019578e0da981d7bf0e0bdd51f76a7099046a78", "message": "#118 - Upgraded to Spring Framework 4.2 GA.\n\nUpgraded to Querydsl 3.6.5 along the way."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/70547a363bfd8d5fc51f28052a21f569ab652c63", "message": "#117 - Removed explicit configuration of main class for Boot plugin in Starbucks example.\n\nThe configuration is obsolete as the client has been moved into a test case for a while already."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a7f231c2ed876c8d0d04d2e70ca592518c502728", "message": "#116 - Switched to the release train version of the KeyValue module."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bca4e65e4f07432e2f54a7e61f9aba3788a77ed6", "message": "#115 - Harmonized package names.\n\nWe now consistently use example.springdata.$store as base package name."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8d77a9a37eb25e2d8b31c016a63f343c71b57080", "message": "#107 - Polishing.\n\nSwitched to Asciidoc for README. Renamed ApplicationConfiguration to Application. Switched to a more simple package name. Some polishing in the test cases (removed unnecessary injections).\n\nOriginal pull request: #108."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cc6e232ac3572a6f8084a5f2312077803b1f2925", "message": "#114 - Upgraded to Spring 4.2 RC3.\n\nUpgraded to Spring RESTDocs 1.0 M1 on the way."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9641cb7f53d692ccadf7757d4c44074a437726b9", "message": "#113 - Upgraded to Spring Boot 1.3 M2.\n\nRemoved temporary upgrades to Spring Framework build snapshots where possible."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3a138a161c3b0080d3379cb703086cd14fc20932", "message": "#101 - Fixed security setup for REST / security sample."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7f8a0cc9dc973cdf12a6d476719af51801502640", "message": "#111 - Stricter tests cases for conditional headers in REST sample.\n\nWe now explicitly check for the presence of ETag and Last-Modified headers for all requests."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8ed43d34fcf32a5674de2acea20ea9cdd43d03f8", "message": "#106 - Polishing.\n\nSome JavaDoc improvements, copyright headers. Using a logger instead of System.out in the test case now. Removed commented out dependency declaration from JPA pom.xml."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bb371b8de488cad35e1cccb813bfb52e788f86b7", "message": "#99 - Upgraded to Spring Boot 1.3 M1.\n\nUpgraded REST headers sample to Spring 4.2 snapshots to benefit from fix for SPR-13090."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d880972a12031bc41de274e38dccfe2f0f2cd5dc", "message": "#98 - Switch to Spring 4.2 RC1 for Starbucks example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/dcc54f9ba70379e97d2b3cee247f2a7469d84234", "message": "#97 - Upgrade to Spring Boot 1.2.4."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a5702d1e115ac49d324c2604fab440170ca5af06", "message": "#96 - Upgraded to Spring Data Gosling M1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c894fb34e240e40cc26ceadf0c97f9fa07e23822", "message": "#92 - Upgraded to Querydsl 3.6.4."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3f7616367c23da5d94c9de5f50317bcbfa49383a", "message": "#93 - Switched to RowMapper for Spring 4.2 compatibility.\n\nParameterizedRowMapper has been deprecated for a while and finally removed in Spring 4.2. We now use the simple parameterized RowMapper interface."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0e7707bb5ad5427bc86830027d28c854acde8c87", "message": "#90 - Upgraded Redis driver to 2.7.2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/22824e6b24d76ec28e94d2fa99d864841023bab1", "message": "#89 - Explicitly configured spherical index on Address.location in Starbucks sample."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/2c9f75c7e0d54e629337ab4b8cf3e75d01644230", "message": "#88 - Upgraded to Lombok 1.16.4."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/343d29eeec86e114bb398c748c318e10d1ca8be6", "message": "#87 - Cleanup view template."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5f132037e3f5a5beac9f1b7c9105c6301b8fb012", "message": "#87 - Switched to version-less WebJARs after recent additions in Spring Framework."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/09eea9e0b8c060fbbc361844fe4e70870d8cc250", "message": "#85 - Simplified usage of RestTemplate in StarbucksClient."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/43c0bcda98514ca6de82eef10ca5765aa92a8b24", "message": "#85 - Added a test case to show how to use a RestTempalte to interact with a HAL service."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/81b576b663f59b20d01f96a75de84c3f18f67e95", "message": "#84 - StarbucksClient now uses correct base URI."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8ce6ac38c0bc53bb52b69390a6881a6a7d2800f5", "message": "#83 - Enable web environment for integration test."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b8e29431de793b8a2234e193ac68d7956c300969", "message": "#73 - Added example how to customize all Spring Data repositories."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/2da20819da6ccbf85a8acef37812c962495ff64f", "message": "#50 - Simplified EclipseLink example.\n\nSwitched to a much more simplified domain model as the primary focus of the sample is on the infrastructure setup, not a sophisticated domain model.\n\nAdded dedicated build profiles for static (compile-time) weaving and load-time weaving. Simplified application configuration to use more of Spring Boot's auto-configuration features.\n\nPorted Markdown README to Asciidoc.\n\nOriginal pull request: #68."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/33a44330588293bfc237533789dd7fd25d866c66", "message": "#77 - Added example to show how to use the release train BOM."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/19bb907815d7736fda3a7600c67b152530e838d1", "message": "#41 - Added minimal web UI for Starbucks example app.\n\nAdded a minimalistic HTML5 web front-end based on Thymeleaf, Bootstrap, jQuery, URI.js and Google Maps JavaScript API. The required JavaScript dependencies are referenced via Webjars.\n\nFor details see the README.\n\nOriginal pull request: #47."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b7263b4ed68452702aa44de5deab7320d389eb89", "message": "#76 - Added HAL browser to Spring Data REST Starbucks example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/174710c5ba2282b35ffad813929fdc4629b83607", "message": "#74 - More documentation within the REST headers example.\n\nAdded README to give more details on what the sample actually showcases. Added Spring RESTDocs to document HTTP interaction."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8978423adebb380edf1604b86d3f810c526cdbf4", "message": "#75 - Polished pom.xml.\n\nFixed scope for test dependencies. Removed obsolete version property for the compiler plugin."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/081881b538ff53cddc0da1c4743ce4bc46bceff8", "message": "#74 - Added sample for conditional GET requests with Spring Data REST."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a9be672139d7f5a850808696b319fe41edf1afa9", "message": "#72 - Upgraded to Spring Boot 1.2.3.\n\nListed Greg as developer, too."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/49d91bb6979d0734ad75654124a1c0eae878daf4", "message": "#71 - Upgraded to Spring Security 4.0.\n\nUpgraded security related sample projects in the rest and JPA sub-folders to Spring Security 4.0."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3306ea56f39184cd813cc0e6e7f14a4789cbcdf7", "message": "Turned Starbucks client into test.\n\nAllows us to benefit from default logging setup. Removed obsolete Tomcat version declaration. Polished StoreInitializer to use Lambdas instead of an enum."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e11e73b58a3b6137273784caf6924469818fa4e6", "message": "#70 - Upgraded to Spring Data Fowler GA."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4d500a70282192c5a4150d9566a5814437a72f38", "message": "#69 - Added new sample to root README."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9ecb720f4a900df38d4052b051da77b14e89fe2e", "message": "#69 - Added example for how to set up Spring Data JPA with two DataSources."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/2569cf8de336adb8c9fea8cf7fc8f4434378e05d", "message": "#57 - Polishing.\n\nReplaced custom builder with Lombok generated one. Turned Lombok into a value object as a side effect. Removed obsolete toString() method. Extended copyright clauses wehere missing. Reduced visibility of repository extension."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6ba91231f248e182d9c85a24c3dc30112b701157", "message": "#64 - Polishing.\n\nRemoved the additional GeoJsonModule and only register the mixin for GeoJsonPoint to be able to read the data from the source JSON file. Removed custom logging.\n\nA bit of polish in the README, JavaDoc."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/df7fcb0edb86be317ca4a25e2cc3a06881a3a576", "message": "#65 - Added example project for Spring Data web support."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/2c97493f9f94df979b08e2d30c63f29b1dd4388a", "message": "#62 - Added a section on the Stream usage to the README.\n\nOriginal pull request: #63."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/49df9468b59da5a4d182bf70d16d4eb6e3461db7", "message": "#54 - Use Stream with try-with-resources.\n\nTweaked the integration test to use the Stream returned by the repository within a try-with-resources clause so that it gets closed correctly."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/966d3c9e44781ef134b73620d9746552fd4922c1", "message": "#59 - Upgraded to Spring Data Fowler RC1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a865425657ce316eb58edd52c823f38e010534f9", "message": "#45 - Polished POM for JPA Java 8 module."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6597d7ca9585653ef32bfccfabd3827a1cf47ac7", "message": "#56 - Upgraded to spring HATEOAS 0.17 snapshots.\n\nSimplified usage of ParameterizedTypeReference through newly introduced TypeReferences class. Moved to Java 8 streams for final output."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/797db3eece8ea9d7859ddb81b5b3549b5d1f8aa6", "message": "#53 - Enable -parameters for compilation.\n\nRemoved obsolete @Param annotations from repository interfaces. Upgraded to Fowler snapshots for JPA 2.1 examples as we need a fix in derived stored procedure execution to work correctly.\n\nRelated issues: DATAJPA-681."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a50a3450cdd1bf6825fb0ede7baaedae103d1d51", "message": "#52 - Upgraded to Spring Boot 1.2.2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/815e3b726698c1ad4e1d1f3a71465246eaef954f", "message": "#51 - Upgraded dependencies.\n\nMaven APT Plugin - 1.1.2 -> 1.1.3\nQuerydsl - 3.6.0 -> 3.6.1\nSpring Framework - 4.1.4 -> 4.1.5\nLombok - 1.14.8 -> 1.16.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f37e260a32501658dcfd8bcbd36dc93d2de51039", "message": "#48 - Upgraded to Spring Boot 1.2.1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0abc0dc3b1e20717feec7569fda049d9278e7072", "message": "#45 - Adapt to type moves of JSR-310 attribute converters."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7f3339a610ce96660f9a82e01cfa601a90a7bb76", "message": "#45 - Removed Jadira user types in favor of new JPA 2.1 AttributeConverters.\n\nWe now activate the JSR-310 AttributeConverters shipped with Spring Data JPA 1.8. Removed the dependency to Jadira user types and switch to non-time-zoned Java 8 LocalDateTime.\n\nOriginal pull request: #46."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e953f6d5e5725bce65430d160e430f042c16a8c3", "message": "#45 - Temporarily add required Spring Data JPA dependencies."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d248a5ffd878a40c17af40aad1e9876aef5d5304", "message": "#43 - Moved to new Travis infrastructure."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d7aba90879874eb2c4d6926e7b29ce236ea50777", "message": "#42 - Switched to snapshot repository."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e47c4135fcdc31973b9728a37de03a3e5fdf36e1", "message": "#27 - Upgraded to Spring Security 4.0.0.RC1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5d102f91578f8bd7c7821ba82e66666a5bb25c43", "message": "#32 - Upgraded to Spring Boot 1.2.0.RELEASE."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a579f6e879fca61bf39a01098bbbe648d65b2fa6", "message": "#35 - Added example for Map-based repositories."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c30d5827a9b24a2b61048dc96e15530574354b85", "message": "#38 - Removed @WebAppConfiguration to prevent web infrastructure to be bootstrapped."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b15b1390accf4cec66be5f05d4ad8a9beb470538", "message": "#37 - Upgrade to Spring Data release train Fowler M1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ca5fd354b64e8b9e1ea81115c07677eec5b41e26", "message": "#29 - Fixed setup of Spring Boot Maven plugin.\n\nRemoved the declaration of the Spring Boot Maven plugin in the root POM as it broke the build for package and install goals for projects that don't actually contain a main class but tests only.\n\nDeclared the plugin at the root POM for Spring Data REST related projects as these are the only ones providing a standalone runnable app.\n\nRelated pull request: #30."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7d034f84a767e0f90ea52dc9c05bb0e674f90f01", "message": "#31 - Updated dependencies.\n\n- Spring Boot 1.1.8 -> 1.1.9\n- Querydsl 3.4.3 -> 3.5.1\n- Spring 4.1.0 -> 4.1.2\n- Spring Data Releasetrain Evans GA -> Evans SR1\n- Lombok 1.14.6 -> 1.14.8\n- Tomcat 8.0.9 -> 8.0.15"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/eeb0485cf950a62911962bc214c37c4e67b0c203", "message": "#26 - Upgrade to Spring Boot 1.1.8."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/97963961ab2d0667764f9b6ed9caaf98e5c3904c", "message": "#21 - Updated REST/Security and root readme."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/1d7554b57ad524bd5d1944490ec5ceca81e6eb05", "message": "#21 - Polished Spring Data REST + Spring Security example.\n\nRemoved obsolete dependency declarations from pom.xml. Rewrote test cases to use Spring MVC test support instead of a running server and RestTemplate. Fixed Security configuration to allow bootstrap in Spring MVC test context. Formatting, JavaDoc.\n\nOriginal pull request: #22."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/11a6e4b69380521f41d4b807efb217c3683381b1", "message": "#7 - Added sample for Spring Data REST ALPS support and excerpt projections."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7cfd45920f4dc5642618b639a6225f7ae77a6668", "message": "Upgraded to Spring Boot 1.1.6 and Spring Data Evans GA."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8ebc3d85fbcb57708730528e6e6b1180b856675c", "message": "Added image link for build status on Travis."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3bb508292ac695ff33c82c6ce68919e3bd80fb1f", "message": "Upgrade to Spring 4.1.\n\nSwitched to Rome 1.5 for MongoDB text search example as that's needed after the Spring 4.1 upgrade."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c395f5ae3e27d20cf5862f13962449620e7e352e", "message": "Upgraded to Maven APT Plugin 1.1.2 and Querydsl 3.4.3.\n\nAdded Christoph as project maintainer, too. Fixed maintainer's email addresses. Removed obsolete encoding property. Upgraded to Lombok 1.14.6. Switched to simplified Java 8 setup (using the property instead of a plugin declaration)."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ecadc6548350c605aa181dbdce1a6675f64aa744", "message": "#8 - Some polishing of the example.\n\nIntroduced the usage of Lombok to be able to get rid off the getters and setters. Simplified the configuration to use Spring Boot's auto-configuration. The initializer is now an enum manually triggered with a MongoOperations instance. Switched from MongoTemplate to MongoOperations where possible. Polished some JavaDoc.\n\nOriginal pull request: #10."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4246700be0c758417effc2ea3588157a3932ed04", "message": "Added Travis build configuration."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7473831b415884c3120105122e75214ede725b25", "message": "Upgraded to Spring Data Evans RC1.\n\nMove to Java 8 entirely."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5ff523973f5bf36633b9663c63b174b0809200ca", "message": "Upgraded to Spring Boot 1.1.5.RELEASE.\n\nUpgraded to Querydsl 3.4.2. Fixed name of the MongoDB Geospatial project."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cca77e029214406fe5390410824e4554001db45b", "message": "Polished Readme of Spring Data REST Multi-store example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d3cd04edb6aee5e429431760c12f6dfa312daa72", "message": "Updated readme with latest additions."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/56ab6b47052cbcb89c9b4fff04824219b5308c6c", "message": "Split up MongoDB example into two.\n\nSplit up the previously existing MongoDB example project in one for basic stuff, geo-spatial and Querydsl support as well as one on the aggregation framework. This will allow us to add other modules on particular focus areas going forward."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bb8711598e6fda6379e0363b7e8919dfb843b16a", "message": "Added example for multi-store configuration."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d1623673d82695163882f0cdfd789e44c9055711", "message": "Polishing of CustomerRepository in JPA Java 8 sample project."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/58ac158e397f701de16a83953a9f48fb59698c07", "message": "Removed deprecation in showcase project."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/edfb9a25d97bd40bb3cddd8634c713dae6e7b940", "message": "Moved to Tomcat 8.0.9 for REST based samples."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/dce2994f1fe4bc9d0dcb25b584910dd764275eb9", "message": "Prepare security integration examples."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8805059aee534a99b7efa08008a939cddfda9805", "message": "Upgraded to Spring Boot 1.1.4.RELEASE.\n\nSlight restructuring of the build setup for the Spring Data REST. Upgraded to Tomcat 8.0.9."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/16f9aa6ab1057c696b91e375574fb1d99c3bb3d0", "message": "Dependency upgrades.\n\n- Spring Boot 1.1.0 -> 1.1.3\n- Querydsl 3.3.4 -> 3.4.1\n- Lombok 1.12.4 -> 1.14.4"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d748923519ecb0094afec240eadbefce23223671", "message": "Added sample for invocation of JDK 8 default method on a repository."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0a98efaf205b4ed8523b73a63314987eb16dd655", "message": "Added a Traverson based client for the server."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a3a1db24d0dfd8ce6b4ca388706d9702aa4f380b", "message": "Upgraded to Spring Boot 1.1.0."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c3afe35d2f01e9cb28f03a3862c28a1c40cdd342", "message": "Upgraded to Spring Data Dijkstra GA release."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b67ec8bd6e789f82d23286661616d2ea62a4ae70", "message": "Added Spring Boot plugin to make the REST sample project executable as standalone JAR."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/410f408f47db12398d94e9170380806ee900408a", "message": "Upgraded Java 8 DateTime example to use Jadira UserTypes.\n\nUpgraded to Jadira Usertypes 3.2 to be able tu use Hibernate-specific UserType to make sure JDK 8 date/time types get converted into appropriate SQL types by the persistence provider."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9f7d90ad5c71ae3059642862c4cb61f01300f7e9", "message": "Updated root readme."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7a7daaec6092977e92a2629faf534baf1082e1a2", "message": "Added Starbucks sample for Spring Data REST."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d5138bb3a47025fbec438b401240ba6830c2b40d", "message": "Upgraded to latest Spring Data Dijkstra RC1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/089ea83b01e044659843420af2e3679c586827c6", "message": "Adapted JPA 2.1 example to latest changes in Spring Data JPA.\n\nChanged method to derive the stored procedure metadata to be named after the stored procedure so that the name doesn't have to be customized on the annotation.\n\nSwitched to Spring Data JPA master branch artifact as the stored procedure support has been merged recently."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/db9ade78c7b9e7635e1c90e1cbdf8c5e993edd99", "message": "Upgrade to Spring Boot 1.0.2.RELEASE."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/0ddb2ba0d6529f0554d498bb72bab5d01b33b6ac", "message": "Added showcase for JDK 8's Optional support on repository methods.\n\nAbbreviated JPA sample module folder names. Renamed the Java 8 auditing sample module to Java 8 module as it not only contains samples for auditing anymore."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/dadaf374c3c9cbbaa285d8f2801918b004b12e81", "message": "Use manual index declaration in MongoDB sample."}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/82", "title": "#81 - Some sample repository code to outline the intended API.", "body": "DO NOT MERGE.\n\nThis PR serves as an acceptance test for upcoming functionality in Spring Data to dynamically map query results onto projection interfaces and DTOs either dynamically (via a query method parameter) or statically (using a custom return type).\n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/48592557", "body": "We might wanna tweak the readme in the repository root to point to the security example as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/48592557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/50755958", "body": "This is now live at https://github.com/spring-projects/spring-data-examples/tree/master/rest/multi-store.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/50755958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54121104", "body": "I think it makes sense to make this a separate example (in a separate package of the very same project). The main reason is that the example currently shows very basic functionality and the `@Meta` support is quit a bit more advanced as it needs much deeper understanding of MongoDB internals (profiling etc.).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54121104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54290343", "body": "LGTM, merging.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54290343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54291944", "body": "Is there a way we get this to work without an external Solr instance? I'd like to keep `mvn clean test` on the very root project working. If that's not an option we could set the `skipTests` property in the `pom.xml` to `true` to exclude the tests from running during a command line build. They could still be executed from within the IDE though.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54291944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54469133", "body": "Looks good to me, except the minor comments.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54469133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54842050", "body": "- Switch to `Jackson2RepositoryPopulatorFactoryBean` for setup from JSON file\n- Move sample data JSON into root of the classpath\n- Drop network lookup of the blog feed\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54842050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/59331985", "body": "This looks really decent! I'll add a few polishing notes to the individual files but generally speaking: very cool!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/59331985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/59482050", "body": "Fixed by applying #22 and polishing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/59482050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/59484491", "body": "Polished and merged. Switched to Spring MVC test support instead of running an integration test bootstrapping a server instance. Adapted security configuration to make this work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/59484491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61228934", "body": "Looking at the `pom.xml` for the sample I was wondering whether it'd make sense to add a Spring Boot starter for Spring Data Cassandra.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61228934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61241016", "body": "\\o/ Take your time :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61241016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62685999", "body": "Decided to not go with the customization but declare the Boot plugin more local only to the projects that need it. See ca5fd35 for details.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62685999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62686811", "body": "The issues with the Boot plugin have been resolved. Would you mind rebasing your changes on top of master? I currently can't apply the patch cleanly. Seems to be related to recent changes that we made to the root `pom.xml`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62686811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62902437", "body": "Awesome, thx.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62902437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65111944", "body": "For general help, you might wanna [ask a question](http://stackoverflow.com/questions/tagged/spring-data-jpa) on StackOverflow. If you discovered a problem, please file an [issue](https://jira.spring.io/browse/DATAJPA) against Spring Data JPA. The examples issue tracker is not the right place for general discussion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65111944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65836200", "body": "What exactly are you doing? Do you have a stack trace handy?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65836200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65838737", "body": "Thanks for that! Slightly reduced the complexity of the query method and made the test case more verbose to document what is achieved by the added query.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65838737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68370921", "body": "Can you elaborate on what you'd like to see? The examples cover all the stored procedure support we offer currently.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68370921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68389066", "body": "I don't thin this is an issue for the examples repo as it seems we're still lacking support for cursor parameters. Would you mind opening a ticket in our [issue tracker](https://jira.spring.io/browse/DATAJPA)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68389066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68429811", "body": "Vacation filter? :D\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68429811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68641238", "body": "I've merged the example back but quite a few issues came to attention that I think we should get solved:\n- the location field should really be a `Point` (from Spring Data Commons)\n- enum values in `FieldType` should be all upper case (to conform to general Java idioms)\n- we should really get rid off the need to declare default constructors (see `Conference`)\n- `Criteria.within(\u2026)` should take a `Point` and a `Distance` (from Spring Data Commons)\n- the date time types should be Java 8's (there is a `Jsr310Converter` in Spring Data Commons)\n\nI was unsure which of these points are actually issues that we should file tickets for as you probably have better insight into the project's capabilities. If you decide to create tickets for the missing items please be sure to put me on the watch list.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68641238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72278529", "body": "Yes, the `Optional` support has been in released versions for quite a while already. The thing you have to consider is that you cannot extend `CrudRepository` if you want to declare methods like `findOne(\u2026)` with a return type of `Optional`. This is due to the fact that `CrudRepository` already declares a `findOne(\u2026)` returning `T` and thus the compiler will complain about incompatible return types.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72278529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72614769", "body": "No, as this would be an incompatible and Java 8 enforcing change to the API. Work around this limitation by creating a dedicated base repository interface yourself just as it's shown in the example I linked to.\n\nGenerally speaking, this is the tracker for the examples. For general purpose questions, please [post on StackOverflow](http://stackoverflow.com/questions/tagged/spring-data). For bug reports and feature requests please use the [individual project](https://jira.spring.io/secure/BrowseProjects.jspa#10000)'s tracker in our JIRA instance.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72614769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/76837415", "body": "Will do, yes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/76837415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/76840628", "body": "https://github.com/spring-projects/spring-data-rest/commit/8cbd952d88ecc233f70fd5d502cba1722247f0d4\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/76840628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/77826787", "body": "Is that example really something we'd recommend people to do? Turning a `List` into a `Stream` i a default method replaces a single method call on the `List` with an additional method declaration on the repository. Also, it doesn't really create any of the benefits you'd usually get when declaring a `Stream` method on the repository (actually streaming the results).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/77826787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/77836814", "body": "To me it looks more like a \"because you can\" rather than something really useful. Would you really add three more lines and an additional repository method instead of just calling `\u2026.stream()` on the client? Especially if it doesn't really give you a `Stream` but only a streaming view of the list? Why not declare an additional, really streaming method? You write less code and actually get the benefits of the new return type. IYAM, what we have in #62 is short, concise and practical.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/77836814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78038707", "body": "As per our discussion, let's have a look at how we can simplify the setup of reading in the reference JSON.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78038707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78039408", "body": "Seems we messed this up quite a bit during some rebase operations. Any chance you rebase this onto current master, @christophstrobl?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78039408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78470766", "body": "Does it make sense to make this a \"real\" derived query (actually adding criterias via the method name)? I think mixing up derived queries with the aspect of overriding of a CRUD method decreases the focus of the example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78470766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78471082", "body": "I wonder if the example gets a bit simpler if we remove the repositories from the mix here. `putIfAbsent(\u2026)` is not a very repository-ish method actually and turning that bit of client code into a custom repository implementation could very well be just inside the test method. The aspect of working with a custom implementation inside a repository drags attention a bit away from the core concern of the example, doesn't it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78471082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78863043", "body": "Thanks a ton Jeremy! I've left a few inline comments. If I needed to boil it down it's basically asking you to simplify the example drastically. We need to make sure the core aspect of the example - setting up Spring Data JPA with EclipseLink - is at the core of it. Multiple repositories, domain types, advanced JPA mappings, a lot of test methods on the repository basically all just distract from that core aspect.\n\nSee for example how the `interceptors` example is reduced to the very bare bone to allow users to easily discover which parts are actually necessary to achieve the core goal of the example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78863043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/83112476", "body": "Would you mind on elaborating?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/83112476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93033341", "body": "That's merged. Thanks for the prototype. I slimmed it down as much as possible to let the client be driven by the server as much as possible.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93033341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93686003", "body": ":+1: I'm in the finishing steps for [DATACMNS-542](https://jira.spring.io/browse/DATACMNS-542), which should significantly ease this. There's already a [feature branch](https://github.com/spring-projects/spring-data-jpa/commits/issue/DATACMNS-542) with a pretty complete implementation of this. Feel free to use this to spike an example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93686003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93696920", "body": "Trying to find the missing test cases for the JPA feature branch I discovered that there's a branch here to solve #73, which is basically a duplicate of this one. I'll reopen it as it apparently hasn't been merged into master yet (pending completion of the improvements in Spring Data Commons / JPA).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93696920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93696971", "body": "Not yet merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/93696971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94900473", "body": "I'd argue that's an orthogonal problem. You basically swap out the `DataSource` the app should be using. In Boot this is achieved by just declaring an `@Bean`-method returning a `DataSource`. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94900473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/95026819", "body": "Please let's not side track this ticket here. This is about configuring Spring Data JPA to run on EclipseLink, not DataSource customizations within Boot. I guess the ticket in Boot is the more correct place to discuss this, so feel free to submit a sample project that shows the error in a test case or the like.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/95026819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/98701044", "body": "I took what you had and simplified it quite a bit. We now have build profiles for both static and load-time weaving. See the commits against the original request #50.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/98701044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/103842388", "body": "That's applied with the fixes for #87.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/103842388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/103842860", "body": "That's merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/103842860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/112346312", "body": "Thanks Chris, that's merged! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/112346312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/112347568", "body": "Good one, too. I also fixed the URI to the search resource on your behalf.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/112347568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/112348112", "body": "Applied, too!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/112348112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/116740198", "body": "That's in place, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/116740198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/116741894", "body": "That's fixed. Thanks for reporting!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/116741894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/121845590", "body": "That's merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/121845590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/121846562", "body": "That's merged :).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/121846562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/126243861", "body": "That's fixed. I removed the declaration entirely as it's obsolete anyway.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/126243861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/126944955", "body": "That's merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/126944955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/126946805", "body": "Merged with some minor cleanups. Thanks! :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/126946805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137485046", "body": "Polished and merged (see #131).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137485046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137790002", "body": "The Querydsl metamodel classes are generated using the APT Maven plugin. You can see a sample configuration [here](https://github.com/spring-projects/spring-data-examples/blob/master/jpa/showcase/pom.xml#L91).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137790002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137980761", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137980761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/148302295", "body": "Squashed and merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/148302295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/148421314", "body": "Seriously, please stop opening tickets to make someone comment. We'll comment when we get to. Generally speaking: the place to ask general questions, is StackOverflow, not the issue tracker.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/148421314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/156059512", "body": "This should be fixed with the latest Spring Data Commons snapshots. Also, using `@Value(\"#{target.id.toString()}\")` should allow you to work around this until the release is shipped.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/156059512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/183241088", "body": "This is a repo for examples for various Spring Data projects. If you'd like to see support added for a particular technology, please refer to the [Spring Data Redis bugtracker](https://jira.spring.io/browse/DATAREDIS).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/183241088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/183251394", "body": "This is not a general discussion forum. Please use StackOverflow for general questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/183251394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/183335685", "body": "That's merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/183335685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/184165099", "body": "Please stop opening generic question tickets that are unrelated to any examples in this repository. I haven't had to do this before but I fear we have to ban you from the project otherwise :(.\n\nAs indicated in [other](#148) [tickets](#145), please use StackOverflow for generic questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/184165099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/189892352", "body": "The class is generated by a [build plugin](https://github.com/spring-projects/spring-data-examples/blob/master/jpa/showcase/pom.xml#L93) either during build or via the Maven integration in your IDE.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/189892352/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199741729", "body": "Shall we rename the module then?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199741729/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/219929850", "body": "@gregturn / @rwinch \u2014 Would you mind having a look? Looks like the tests work fine but bootstrapping the application really fails.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/219929850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/221974616", "body": "You're using Spring Boot 1.3.5 which is not on Hopper and thus doesn't include the projection feature on the repository level yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/221974616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229915950", "body": "Done with the exception of the stored procedures support which \u2014 despite a fix in Hibernate 5.2.1 for a bug we discovered earlier \u2014 breaks for a [new one](https://hibernate.atlassian.net/browse/HHH-10915) introduced (or just unveiled) in 5.2.1.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229915950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/233927734", "body": "That's merged, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/233927734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/235594175", "body": "Looks good to me beyond the minor cosmetic issues, I commented on. Feel free to squash and merge to master when you fixed those.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/235594175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240760048", "body": "Can you elaborate? We refer to `Ingalls-M1` by purpose.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240760048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240944318", "body": "That shouldn't be necessary as the POM [contains the `libs-snapshot` repository](https://github.com/spring-projects/spring-data-examples/blob/master/pom.xml#L120-L125) that aggregates both release, milestone and snapshot artifacts.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240944318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/241345410", "body": "Would you mind rather using StackOverflow for general questions of usage? We use the tracker to keep track of bugs, new features, etc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/241345410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/261885685", "body": "A couple of minor items:\r\n\r\n- remove dependency setup information from README as it's discoverable from `pom.xml`.\r\n- refer to Spring Data releasetrain version `Kay-BUILD-SNAPSHOT` from POM (via property).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/261885685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262473752", "body": "That's merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262473752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262819999", "body": "Please use StackOverflow for general usage questions. Collections of primitive types have to be mapped using JPA's `@ElementCollection`. Please refer to the JPA spec, Hibernate documentation for details.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262819999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/264942039", "body": "I don't think this is going to happen. The examples are supposed to show the state of the art usage of Spring Data, especially in a Spring Boot context where XML configuration plays hardly any role at all.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/264942039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267946626", "body": "I am still not sure I can follow: we still have a `Long` identifier but the repository exposing a `String` id. That's highly unusual to the average Spring Data developer. `findOne(\u2026)` is supposed to lookup the entity by they identifier. It looks like that's not the case here. Can you elaborate? This seems to be a very fundamental change to what developers expect in a Spring Data setup.\r\n\r\nRegarding the commit message: if I read that and look at the change I'd get the impression that I now *need* add that indexed property to all of my domain types to make them work with SDN 4.2. Is that really the case?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267946626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267949452", "body": "I've never been a great fan of all these store details leaking into the domain types. Is there a chance that developers could just use Spring Data's `@Id` and basically get that `@Index(unique = true, primary = true)` stuff automatically?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267949452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267950277", "body": "What I am wondering, too: if your newly added property *is* the ID, how is the Spring Data `MappingContext` implementation actually finding out about this? There doesn't seem to be anything unique about the property as the `@Index` annotation could be used on other properties, too, right? I am wondering as e.g. Spring Data REST relies on that information to correctly map incoming requests to the actual identifier values.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267950277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/271162466", "body": "The registration is part of Spring Boot transparently enabling `@EnableHypermediaSupport` which adds the necessary message converters to all `RestTemplate` instances available in the `ApplicationContext`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/271162466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/274437140", "body": "Did you change anything in the test? It works in our CI builds. If you look at the [test case](https://github.com/spring-projects/spring-data-examples/blob/c523b8d468484075658a2b3c63a4a718c54bab16/jpa/example/src/test/java/example/springdata/jpa/simple/SimpleUserRepositoryTests.java#L202-L206), the `user` instance handed into the method is definitely not `null`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/274437140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/281468954", "body": "So, why does it do that? It's best practice to keep classes in the least public scope they can actually work in, to avoid them being referenced from places they're not even intended to be known.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/281468954/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/283404333", "body": "Thanks for the pointer again. Changes look good. We're just busy preparing a release currently. Will take care of that after that.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/283404333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/286025433", "body": "No, but not for a particular reason. Feel free to create a PR.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/286025433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/287987011", "body": "This is the tracker for the examples. For all problems with the individual modules themselves, please raise an issue in in this case [the tracker for Spring Data JPA](https://jira.spring.io/browse/DATAJPA).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/287987011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/287994058", "body": "As it's not a problem with the example per se, this is not the right location. Also, this is an issue tracker, not a general support forum. For general questions, please refer to the [Gitter channel](https://gitter.im/spring-projects/spring-data).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/287994058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288088464", "body": "We don't have any database specific stored procedures support but just generally ease the way you'd otherwise interact with stored procedures through JPA.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288088464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299101835", "body": "As @schauder the project is set up as expected. We configure the compiler to include parameter name information using [the `-parameters` option](https://github.com/spring-projects/spring-data-examples/blob/45f19a6c1d81ebd0fec5fe86763232f74b20720f/pom.xml#L104-L112).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299101835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299101859", "body": "See my comment on the original ticket.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299101859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299121615", "body": "Again, Jens is right. Make sure IntelliJ compiles with `-parameters`, too. \ud83d\ude43", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299121615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309364114", "body": "To add on what Greg said: yes you're right, the `equals(\u2026)` and `hashCode()` methods should be based on the identifier and we're happy to accept a pull request for that.\r\n\r\nThat said, the example is by no means about DDD  but on how to set up Spring Data JPA with Eclipselink, i.e. the focus is not on getting the domain right (as there is none) but the configuration code. That's why we think there's more important things to worry about. Example naturally set some focus point and don't try to get everything right, as additional code that's needed might distract from the actual aspect the example is supposed to show.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309364114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309365129", "body": "Nevermind the PR, I just pushed the fix.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309365129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309666457", "body": "This is a bug tracker, for general question please use stackoverflow.com.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309666457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/317774944", "body": "That's merged into boot next.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/317774944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/318264248", "body": "Please don't open tickets for general questions (use StackOverflow for that). If you think you found a bug, please use the project's bug tracker at https://jira.spring.io.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/318264248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319340635", "body": "That's merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319340635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319822917", "body": "You don't have to convince anyone. It's just that in the context of an example we want to write as little distracting code from what the example is about as possible. Because if you want to implement everything properly (transactions, security) you end up with the actual thing to show burried in a plethora of lines of code of related aspects. The Eclipselink example is purely about the setup, the configuration code. Everything else is just accessory.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319822917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/324589260", "body": "Needs to be postponed due to spring-projects/spring-boot#10068.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/324589260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/328817903", "body": "You're right, we currently not optimizing any further as the advanced optimization you suggest would require much deeper inspection and knowledge about the projection interface and severely complicate the implementation.\r\n\r\nFeel free to raise a bug in our [JIRA](https://jira.spring.io/browse/DATACMNS) but at the moment I don't think there'd be high priority on this as it's basically about further optimization. The feature does work and produces correct results.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/328817903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332746088", "body": "Hi Marcel, thanks for taking so much time for this. We do not use the examples project to back bug reports as they're considered to selectively show features of Spring Data. That means, every PR you submit here won't have a chance to be merged.\r\n\r\nPutting the sample code into a throwaway repository (which might even be a clone of this one) would be very much appreciated.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332746088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/334797231", "body": "Resolved with #297.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/334797231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/334916824", "body": "Please use StackOverflow for general questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/334916824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/335501587", "body": "Awesome, Mark. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/335501587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/336839704", "body": "No. The point of this example is to showcase how to use Spring Data modules, their APIs and programming concepts, not how to set up dependencies etc. In general you should be fine just depending on the store module you'd like to use and it should pull in all *required* dependencies. For more advanced configurations, looking at what `mvn dependency:tree` lists for the projects here can help finding the libraries you need to import.\r\n\r\nIf you run into issues with that, posting questions on [StackOverflow](https://stackoverflow.com/) is usually a good way to find advice.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/336839704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/338659607", "body": "That's weird as as of Spring Data 2.0 GA there should never be `null` `Predicate` handed into the method due to [this ticket](https://jira.spring.io/browse/DATACMNS-1168) fixed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/338659607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/345510313", "body": "Great catch, thanks, merged!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/345510313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356426030", "body": "Nice one, Thomas, thanks! I'll have a closer look tomorrow.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/356426030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/358696590", "body": "I guess you need to bring this up with the Boot team. I am not sure `@DataJpaTest` is designed to work with multiple DataSources.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/358696590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/359176051", "body": "For general questions, please use StackOverflow.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/359176051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/359402913", "body": "For general questions please use StackOverflow. In short:\r\n\r\n1. The CDI extension is documented in the [reference documentation](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpd.misc.cdi-integration) (CMD+F, \"CDI\"). \r\n3. There's no reactive implementation for JPA because it's a blocking API. `CompletableFuture` is not reactive API either. And yes, the asynchronous invocation is container specific. It can't be part of our CDI integration as `@Asynchronous` lives in EJB, not CDI.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/359402913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14685085", "body": "Sort of. The first method would create a Criteria API query that is equivalent to the JPQL query of the second method. In fact, manually declared queries are a bit more complex to handle, as we have to make sure they use aliases in the first place. Otherwise there's no way to tell which field is which without deeper analysis of the query, which I'd like to avoid.\n\nThe current implementation requires aliases in case of manually defined queries so that the persistence provider returns a named tuple which we can then transform into a `Map` backing the projection proxy.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14685085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18374991", "body": "If you're using a SpEL expression on the projecting interface we _have to_ load the entire object as the target entity will be available to the SpEL expression so that its properties can be accessed or it can be handed to other Spring beans or the like.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18374991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18375687", "body": "Generally speaking, this commit is the wrong place to discuss stuff like this. Feel free to open a ticket in our JIRA if you think there's something to be improved. However, be reminded, that if you really want to control query execution very precisely, it's usually best to just implement that part of your repository manually. \n\nThere's hardly any value in us trying to replicate all fine grained features of the underlying query mechanism. Projections are a convenience feature whose core task is to return instances of types that a tailored to a certain use case. Tweaks made to the query execution are an optimization possible in some cases. They're not the core goal of the feature.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18375687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20453274", "body": "@igor-dmitriev  \u2014 The focus of this example is on how to declare repository methods using projections, not how to model domain types. I thought that'd be obvious from the reduction to only two simple properties. So, no lazy loading involved at all here. I don't think this example is the place to spend lines of code and time on implementing everything in a way that it makes perfect sense in a general context as that would introduce a lot of code that needed to be explained and basically drag away attention from what this example actually is about.\r\n\r\n@schauder \u2014 Actually, it's not. `@Data` doesn't generate any constructor here as we've declared the default one (required by JPA).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20453274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760224", "body": "Line break.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760236", "body": "ManyToOne, right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760253", "body": "Return type of `SecurityExpressionOperations` to reduce reflection overhead?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760260", "body": "No anonymous type required, right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760268", "body": "2014 only.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760270", "body": "New line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760286", "body": "Left overs from the intermediate removal of the Java 7 settings?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760290", "body": "Left overs from the intermediate removal of the Java 7 settings?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760502", "body": "Good point. Probably something that Rob should take care of. Keep as is for now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760516", "body": "Maybe the switch to the properties doesn't work as expected?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14760516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761456", "body": "I like that change. We should make sure the documentation above matches the actual query.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761709", "body": "Cool thx.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761740", "body": "Do we need equals and hashCode here? If so, the should only inspect the id as it's an entity, not a value object.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14761740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14762202", "body": "So, that's proven by getting the entity with the right id, isn't it? Even if someone changed the object in the database in the meantime (so that they'd differ in property values), it'd still be the correct value as it's the entity with the same id.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/14762202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/16975257", "body": "Simple for-each?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/16975257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/16975289", "body": "Simple for-each?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/16975289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110501", "body": "Was that by accident?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110510", "body": "Missing line break.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110553", "body": "Can we use first, second, third?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110573", "body": "Do we need the comment in the `<pre />` blocks?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110629", "body": "No `<pre />` please.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/17110629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18943929", "body": "Do we need this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18943929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18943969", "body": "Do you have the ticket for the fix handy? Might be worthwhile asking Rob to port that one back to the 3.x line?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18943969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18943989", "body": "Remove empty line (for other files as well).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18943989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944045", "body": "This construct is uses quite a few times, esp. in the test cases? Maybe extract int a `SecurityUtils.runAs(String username, String password, String... roles)`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944056", "body": "Remove commented out code.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944071", "body": "We can use Lombok here to avoid the accessors.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944112", "body": "Remove empty line. Annotations on the same line as the variable declaration (formatter setup should've actually taken care of that).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944127", "body": "Lombok.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944158", "body": "Does this need an `@Autowired`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944183", "body": "License header missing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944204", "body": "Maybe rather use Boot's `@IntegrationTest`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944232", "body": "Let's use `assertThat(\u2026)` everywhere.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944253", "body": "Let's make plain repository accessing tests separate test cases at least. Could even be a separate test class to even separate them more.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944300", "body": "Let's move this one up in the class before the `@Before` method so that people know immediately what configuration the test is bootstrapped with.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944348", "body": "Either remove completely or simplify to `logging.level.org.springframework.web` in `application.properties`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18944348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655147", "body": "Do we actually need that?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655160", "body": "Use Lombok for accessors and `equals(\u2026)`/`hasCode()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655187", "body": "Newline. Alternatively use `logging.level.org.springframework=error` in `application.properties`. Couldn't we just live with the default logging settings?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655228", "body": "We probably need to guard the test execution to make sure a Cassandra instance is really running.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19655228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654822", "body": "Can you please move these into a `.gitignore` local to the elasticsearch sample project?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654824", "body": "Missing newline.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654835", "body": "This should be obsolete, Boot should be able to determine the main class automatically.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654852", "body": "Have `mvn spring-boot:run` directly to be able to get rid off the shell script.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654864", "body": "I'd drop that one as it only adds a layer of indirection without much benefit. See my comment on the readme above.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654893", "body": "If the app only produces log output maybe rather set everything up as test cases using assertions and optionally writing logs. I'd suggest to remove `Application` and the service implementation completely and entirely stick to test cases.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654896", "body": "See the comment on `Application` above.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654904", "body": "Use Lombok annotations to get rid of the getter/setter noise.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654913", "body": "Use Lombok's `@Builder` on `Conference` instead.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654926", "body": "Missing new line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654929", "body": "Formatting.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654930", "body": "Missing new line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654933", "body": "Formatting.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19654933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369743", "body": "Please remove the formatter file from the PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369766", "body": "Do we really need the custom plugin? Is it not available on Maven Central?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369802", "body": "Please change to `spring-data-jpa-eclipselink`to be consistent with the other modules.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369836", "body": "All properties except this one shouldn't be necessary as Boot or the parent `pom.xml` derive this or have it configured explicitly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369848", "body": "Is there a release version of the plugin available?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369910", "body": "How much explicit configuration to we actually need? Let's try to to as much customization as possible using `applicationProperties`. I don't think the LCEMFB and `DataSource` need to be declared. `jpaProperties()` should be configurable via `application.properties`, too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369916", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369924", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369944", "body": "Let's use Lombok annotations to avoid all the boilerplate getters and setters. Might be work having a look how other JPA samples do this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26369944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370010", "body": "Let's try to avoid as much customizations as possible as the focus of the example is clearly on the `EclipseLink` setup, not more advanced JPA mappings.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370012", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370015", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370065", "body": "It might be worth simplifying the domain model to a single domain class. The example should focus on getting the fundamentals to work with EclipseLink. Multiple repositories with multiple query methods shouldn't be needed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370100", "body": "Let's try to move back to a single repository with maybe a single finder. The override for `findAll()` should be removed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370109", "body": "See my comment on the other repository.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370173", "body": "Simplify, simplify, simply. Remember, this should become an exhaustive integration test for CRUD methods on EclipseLink. Rest assured we do this in Spring Data JPA itself. The example should focus on a single aspect, which in this particular case is the general setup of a Spring Data JPA project with EclipseLink. The execution of a query method alongside a CRUD method should be entirely sufficient. Everything else just distracts from the core aspect and needs to be maintained going forward.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370179", "body": "Add missing license header.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370184", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370196", "body": "Be sure you use tabs for indentation here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26370196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26645787", "body": "Okay, let's stick to plugin then. Is it possible to at least use a non-snapshot version of it or is the classpath scanning only available in 1.1? If in doubt, keep Boot customizations and Spring setup to a minimum and move custom setup into the build, so that we expose the infrastructure setup cost that way.\n\nDoes that make sense and provide enough guideline?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26645787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38635411", "body": "What's the reason we need these test JARs in the classpath? I would've expected to only see the Spring Data Neo4j dependency. Anything I am missing?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38635411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38636879", "body": "But which of the two is it then? Does it make sense to make them a dedicated artifact? It just looks weird having to refer to something test related from a non-test scope.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38636879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/72443596", "body": "Remove blank line.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/72443596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/72443712", "body": "Maybe add some brief JavaDoc to the individual methods to explain, what exactly they're showing (i.e. what's the special thing about _this_ method over the others).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/72443712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/92983392", "body": "Can you clarify on a couple of things here?\r\n\r\n- Does the repository actually need to extend a store-specific interface? We usually recommend not to do so as is exposes store details to its clients.\r\n- You change the ID type to `UUID` but the domain class still contains a `Long` identifier? That is at least confusing but actually even looks broken.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/92983392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141033", "body": "Please make sure you indent using tabs.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141038", "body": "Please remove obsolete tags.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141041", "body": "Please remove obsolete tags.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141052", "body": "That's already defined by the parent POM and can be removed.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141053", "body": "Also available via parent POM.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141066", "body": "Make sure Java source files contain Apache license header.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141072", "body": "Obsolete blank line.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141079", "body": "Package declaration is not needed as it defaults to the base package the class resides in.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141082", "body": "Please move to `example.springdata.couchbase` package.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141095", "body": "Please use Lombok annotation to avoid all the boilerplate for getters, setters, equals, hashCode.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141100", "body": "Please remove obsolete JavaDoc.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141115", "body": "Please remove access modifiers for test class properties.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141136", "body": "Please use AssertJ assertions and static import using a `*` so that static methods don't need to be qualified. See other projects for example.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141144", "body": "Please order metadata tags consistently. See other projects for example.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141149", "body": "Please fix formatting (tabs).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/115141149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153733836", "body": "Should we switch to `\u2026.computeIfAbsent(\u2026)` here to avoid the call to `super.\u2026` in case a value has been registered already and avoid duplicate lookups?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153733836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153733902", "body": "Can we rename this to `AggregateConfiguration` instead?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153733902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734026", "body": "Ternary if combined with the return statement below?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734206", "body": "`CategoryConfiguration` just as mentioned above.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734454", "body": "Can't we rather just use the logging settings in `application.properties`?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734601", "body": "Is that needed explicitly?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734718", "body": "Shouldn't that be pulled in transitively from the Spring Data JDBC dependency declaration? Generally speaking: let's have a look in how far we can simply use `spring-boot-starter-jdbc`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734810", "body": "I think that's been pulled in via the parent already.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734917", "body": "All the testing dependencies are pulled in transitively, too, right?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153734917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153752111", "body": "What I was trying to express is: let's try not declare unnecessarily explicit dependencies. Let's try to use existing starters, i.e. I wasn't referring to a Spring Data JDBC starter but the plain JDBC one that already exists.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153752111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "ahornbeck": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/268", "title": "String Data Neo4j (SDN) example test not storing properties", "body": "The example is not storing properties in the database.  It appears that the tests are passing because the object is being retrieved from Session not from the database.  If I am correct, the example is broken.\r\n\r\n`2017-03-21 14:39:51.203  INFO 50155 --- [           main] o.n.o.d.e.request.EmbeddedRequest        : Request: UNWIND {rows} as row CREATE (n:`Actor`) SET n=row.props RETURN row.nodeRef as ref, ID(n) as id, row.type as type with params {rows=[{nodeRef=-827836030, type=node, props={}}]}`\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288230615", "body": "Found the issue... properties cannot be `final`.\r\n\r\nhttp://docs.spring.io/spring-data/data-neo4j/docs/4.2.1.RELEASE/reference/html/#reference:annotating-entities:property\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288230615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "F191919": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/259", "title": " when using  redisTemplate.opsForHash() .get()  sometimes can get its value but sometimes can not", "body": "The following is my project's screenshot \r\n\r\n![f snu4f4zrzyw211 j_0cg](https://cloud.githubusercontent.com/assets/11403274/22852954/0627bda4-f083-11e6-97f0-4649b3324a7b.png)\r\n\r\n \r\n![1486802908 1](https://cloud.githubusercontent.com/assets/11403274/22852961/26ce347a-f083-11e6-8d35-f9b508f53627.jpg)\r\n![1486802989 1](https://cloud.githubusercontent.com/assets/11403274/22852963/29e0ba8e-f083-11e6-814c-1ede5aca2b83.jpg)\r\n![1486802950 1](https://cloud.githubusercontent.com/assets/11403274/22852964/2bd3e8ca-f083-11e6-9132-097d2eb0c7d5.jpg)\r\n can  you help me ?  thanks\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "YannCebron": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/246", "title": "example.springdata.cassandra.people.ApplicationConfiguration should be \"public\"", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/282238517", "body": "It seems we mixed up \"is runnable Spring application\" vs \"is annotated with SpringBootApplication\" concept in one place. This issue is obsolete then, sorry.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/282238517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mangrish": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/235", "title": "Update Spring Data Neo4j Example", "body": "Update to show use of `Neo4jRepository`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/239", "title": "Update domain object and repository to reflect how to use SDN for version 4.2", "body": "Closes #235.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267895248", "body": "@olivergierke: I haven't updated the VersionEye issues because it's probably not relevant for this change. Let me know if I need to update anything to complete this merge.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267895248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267931098", "body": "@olivergierke To make this easier to understand (without the use of the converter) I'm using a string instead.\r\n\r\nCommit message wise I was thinking: *\"Update domain object and repository to reflect how to use SDN for version 4.2\"*. I'm looking [here](https://github.com/spring-projects/spring-data-examples/commits/master) for inspiration here but can't see what else I can add. Any tips?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267931098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267934265", "body": "@olivergierke Updated. I've tried to make the example more clear with the intent and documentation.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267934265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267948435", "body": "@olivergierke I wish we could get rid of the `Long` id but we can't at the moment (for the same reason we can't remove the default constructor). The whole `Long`/`GraphId` is a misnomer; It represents an object in a neo4j database _but_ that id may point to a completely different object or to no object at all on a restart of the database. Consequently it's an encapsulation leak from the database into the OGM and also into SDN.\r\n\r\nSo we now have the ability to work with people who don't care about database restarts (like those who use the embedded database once off) whereby they can use a repository of ID `Long` (See `GraphRepository`) and those that want to use a natural or synthetic ID which will work across database restarts that want to use a repository of type `Whatever implements Serializable`.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267948435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267948931", "body": "What if we just have two examples: one with what was there previously and one with what we recommend people to use (the one I'm adding now)?\r\n\r\nBesides that, I'm a bit confused about what else needs to change exactly for the example. SD/SDN can't abstract the user completely from understanding fundamental Neo4j concepts no?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/267948931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/268175146", "body": "@olivergierke RE: The idea about `@Id`. Let me run it up the flagpole and see what comes back. I've always liked the idea of `@Id` and I had that concept in the OGM I wrote.\r\n\r\nRE: `MappingContext` it's delegated to the OGM via the `Neo4jPersistentProperty`. I have not yet refactored this part of the code to integrate more tightly with Spring Data yet through. The links I sent you above refer to Spring REST's problems with the `id` field.\r\n\r\nI'm spread pretty thin at the moment so I'll get to updating it when I can :\\\r\n\r\nRE: This example. While we have taken some big steps to get closer to Spring Data there are still more to go. At the moment I want to encourage users to use SDN in a way that will allow us to eventually remove the `Long` (or even define it themselves if they run in a one time embedded environment). In prep for 4.2.0 what do you think the example should show? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/268175146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/93002773", "body": "1. No it doesn't. In fact until you mentioned it I actually thought it was normal to extend the store specific interface. I'll change this.\r\n1. Argh.. This has been a problem for a while now. The OGM and SDN 3.x both expose a neo4j database implementation called `ID` which currently needs to be annotated with `@GraphId`. Unlike other DB's it's *NOT* guaranteed to be unique across database restarts ([read more here](http://blog.armbruster-it.de/2013/08/assigning-uuids-to-neo4j-nodes-and-relationships/) - it's still relevant). On top of this developers have asked to have a way of uniquely identifying their domain objects, either naturally or with the Neo4j recommended approach of using `UUID`s.  Furthermore the implications of this result in things like: https://jira.spring.io/browse/DATAGRAPH-918 and https://github.com/spring-projects/spring-data-neo4j/issues/366. Ideally this implementation detail will be hidden in future. Personally I'm hoping when we can remove default constructors we can also remove the need for exposing the internal ID. What I will do for now is add some javadoc here to make this clear for those who haven't used Neo4j before.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/93002773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "alterhu2020": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/220", "title": "Add example how to return the store procedure's result set using @Procedure", "body": "The question is  could your team add the example how to return the store procedure's result set not the output parameter we defined ?  i can see we can return the output parameter as we define in the store procedure ,but I had not saw anywhere we can return the entity result list ,\r\n- The sample MySQL store procedure i used here as following:\r\n\r\n```\r\nCREATE DEFINER = 'root'@'localhost'\r\nPROCEDURE employees.getUserByUserNameAndPassword(IN username VARCHAR(255), IN password VARCHAR(255))\r\nBEGIN\r\n  select u.USERNAME,u.ROLEID from users u WHERE u.USERNAME=username and u.PASSWORD=password;\r\nEND\r\n```\r\n- My  JPA annotation as below:\r\n```\r\n@Entity\r\n@Table(name = \"users\")\r\n@NamedStoredProcedureQuery(name = \"getListedUsers\", procedureName = \"employees.getUserByUserNameAndPassword\", resultClasses ={ User.class}, parameters = {\r\n\t\t@StoredProcedureParameter( name = \"username\",type = String.class),\r\n\t\t@StoredProcedureParameter(name = \"password\", type = String.class) })\r\npublic class User implements Serializable {\r\n}\r\n```\r\n\r\n- in my JPA repository i use below method to invoke the store procedure ,but it not worked:\r\n\r\n```\r\n\r\n@Repository\r\n@Transactional\r\npublic interface UserRepository extends CrudRepository<User, Integer> {\r\n\r\n\t@Procedure(name=\"getListedUsers\")\r\n\tpublic List<User> renameMethodName(@Param(\"username\")String username,@Param(\"password\")String password);\r\n\r\n```\r\nThen run the code the error it throws as following:\r\n```\r\n\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepository': Invocation of init method failed; nested exception is org.springframework.data.mapping.PropertyReferenceException: No property renameMethodName found for type User!\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1128) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:566) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:349) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1219) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:751) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111) ~[spring-boot-test-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\t... 25 more\r\nCaused by: org.springframework.data.mapping.PropertyReferenceException: No property renameMethodName found for type User!\r\n\tat org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:77) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:329) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:309) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:272) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:243) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.query.parser.Part.<init>(Part.java:76) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.query.parser.PartTree$OrPart.<init>(PartTree.java:235) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.query.parser.PartTree$Predicate.buildTree(PartTree.java:373) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.query.parser.PartTree$Predicate.<init>(PartTree.java:353) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.query.parser.PartTree.<init>(PartTree.java:84) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:63) ~[spring-data-jpa-1.10.5.RELEASE.jar:?]\r\n\tat org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:103) ~[spring-data-jpa-1.10.5.RELEASE.jar:?]\r\n\tat org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:214) ~[spring-data-jpa-1.10.5.RELEASE.jar:?]\r\n\tat org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:77) ~[spring-data-jpa-1.10.5.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:435) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:220) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:266) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:252) ~[spring-data-commons-1.12.3.RELEASE.jar:?]\r\n\tat org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:92) ~[spring-data-jpa-1.10.5.RELEASE.jar:?]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1128) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:566) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:349) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1219) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:751) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111) ~[spring-boot-test-1.4.1.RELEASE.jar:1.4.1.RELEASE]\r\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE]\r\n\t... 25 more\r\n\r\n```\r\n\r\n- and if I changed the` List<User> `to `void` ,the store procedure can invoked success ,but i want to  return  the result set from this store procedure,not just call the store procedure.\r\n\r\n\r\n- And I also try to get the store procedure's result set just use the entitymanager directly, then we can get the mapped result list successfully ,see below:\r\n\r\n```\r\nStoredProcedureQuery query = entityManager.createNamedStoredProcedureQuery(\"getListedUsers\");\r\nquery.setParameter(1, userId);\r\nquery.setParameter(2, password);\r\nquery.execute();\r\nList<User> resultList = query.getResultList();\r\n\t\r\n```\r\nIt seems that Spring Data JPA only capable of handling a single value returned from a stored procedure?\r\nThis issue really bothered me for too many days ...:( \r\nPlease anyone help me how to get the store procedure's result set list  from the annotation` @Procedure` in spring data jpa ? really thanks for your help very much .", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/220/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/329050419", "body": "no @alanhugo , Need team provide the solution .... :(", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/329050419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JanStureNielsen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/189", "title": "AlreadyBuiltException: This object has already been built", "body": "Building the `spring-projects/spring-data-examples` works fine but running the `spring-projects/spring-data-examples/rest/security` with:\n\n```\nmvn spring-boot:run\n```\n\nfails with `AlreadyBuiltException` -- see below for stacktrace, environment, and dependencies.\n\n**Environment**\n\n```\n$:~/src/spring-data-examples/rest/security> mvn -v\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T09:41:47-07:00)\nMaven home: /home/jan/apache-maven-3.3.9\nJava version: 1.8.0_74, vendor: Oracle Corporation\nJava home: /home/jan/jdk1.8.0_74/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.16.7-35-desktop\", arch: \"amd64\", family: \"unix\"\n```\n\n**Failure stacktrace**\n\n```\n2016-05-11 16:40:14.350 ERROR 28768 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Exception starting filter springSecurityFilterChain\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springSecurityFilterChain' defined in class path resource [org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'application': Unsatisfied dependency expressed through field 'itemRepository': Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1062) ~[spring-context-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.web.filter.DelegatingFilterProxy.initDelegate(DelegatingFilterProxy.java:326) ~[spring-web-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.web.filter.DelegatingFilterProxy.initFilterBean(DelegatingFilterProxy.java:235) ~[spring-web-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.web.filter.GenericFilterBean.init(GenericFilterBean.java:199) ~[spring-web-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:279) ~[tomcat-embed-core-8.0.33.jar:8.0.33]\n        at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:109) ~[tomcat-embed-core-8.0.33.jar:8.0.33]\n        at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4658) [tomcat-embed-core-8.0.33.jar:8.0.33]\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5277) [tomcat-embed-core-8.0.33.jar:8.0.33]\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) [tomcat-embed-core-8.0.33.jar:8.0.33]\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1408) [tomcat-embed-core-8.0.33.jar:8.0.33]\n        at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398) [tomcat-embed-core-8.0.33.jar:8.0.33]\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_74]\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_74]\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_74]\n        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_74]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'application': Unsatisfied dependency expressed through field 'itemRepository': Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        ... 23 common frames omitted\nCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'application': Unsatisfied dependency expressed through field 'itemRepository': Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:573) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:350) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansWithAnnotation(DefaultListableBeanFactory.java:580) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.context.support.AbstractApplicationContext.getBeansWithAnnotation(AbstractApplicationContext.java:1186) ~[spring-context-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.boot.autoconfigure.security.BootGlobalAuthenticationConfiguration$BootGlobalAuthenticationConfigurationAdapter.init(BootGlobalAuthenticationConfiguration.java:75) ~[spring-boot-autoconfigure-1.4.0.M2.jar:1.4.0.M2]\n        at org.springframework.boot.autoconfigure.security.BootGlobalAuthenticationConfiguration$BootGlobalAuthenticationConfigurationAdapter.init(BootGlobalAuthenticationConfiguration.java:60) ~[spring-boot-autoconfigure-1.4.0.M2.jar:1.4.0.M2]\n        at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.init(AbstractConfiguredSecurityBuilder.java:369) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:323) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:41) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.getAuthenticationManager(AuthenticationConfiguration.java:81) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.authenticationManager(WebSecurityConfigurerAdapter.java:236) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.getHttp(WebSecurityConfigurerAdapter.java:175) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:290) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:67) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.init(AbstractConfiguredSecurityBuilder.java:369) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:323) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:41) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.springSecurityFilterChain(WebSecurityConfiguration.java:105) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$a3a955e7.CGLIB$springSecurityFilterChain$4(<generated>) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$a3a955e7$$FastClassBySpringCGLIB$$5d99d1a7.invoke(<generated>) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355) ~[spring-context-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$a3a955e7.springSecurityFilterChain(<generated>) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_74]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_74]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_74]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_74]\n        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        ... 24 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'itemRepository': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1590) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:187) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1208) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1048) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1018) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:570) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        ... 59 common frames omitted\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodSecurityInterceptor' defined in class path resource [org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor.getAdvice(MethodSecurityMetadataSourceAdvisor.java:107) ~[spring-security-core-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.aop.aspectj.AspectJProxyUtils.isAspectJAdvice(AspectJProxyUtils.java:67) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.aop.aspectj.AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(AspectJProxyUtils.java:49) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.extendAdvisors(AspectJAwareAdvisorAutoProxyCreator.java:97) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:89) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:346) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:298) ~[spring-aop-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1723) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:113) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        ... 67 common frames omitted\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.aopalliance.intercept.MethodInterceptor]: Factory method 'methodSecurityInterceptor' threw exception; nested exception is org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        ... 86 common frames omitted\nCaused by: org.springframework.security.config.annotation.AlreadyBuiltException: This object has already been built\n        at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:44) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.getAuthenticationManager(AuthenticationConfiguration.java:81) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.authenticationManager(GlobalMethodSecurityConfiguration.java:256) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration.methodSecurityInterceptor(GlobalMethodSecurityConfiguration.java:123) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$6b1e48c0.CGLIB$methodSecurityInterceptor$13(<generated>) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$6b1e48c0$$FastClassBySpringCGLIB$$c44e3363.invoke(<generated>) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355) ~[spring-context-4.3.0.RC1.jar:4.3.0.RC1]\n        at org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$6b1e48c0.methodSecurityInterceptor(<generated>) ~[spring-security-config-4.0.2.RELEASE.jar:4.0.2.RELEASE]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_74]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_74]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_74]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_74]\n        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1]\n        ... 87 common frames omitted\n```\n\n**Dependency tree**\n\n```\n[INFO]                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                                                                                        \n[INFO] Building Spring Data REST - Security Example 1.0.0.BUILD-SNAPSHOT                                                                                                                                                                                                                                                                                                                                                                                               \n[INFO] ------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                                                                                        \n[INFO]                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n[INFO] --- maven-dependency-plugin:2.10:tree (default-cli) @ spring-data-rest-security ---                                                                                                                                                                                                                                                                                                                                                                             \n[INFO] org.springframework.data.examples:spring-data-rest-security:jar:1.0.0.BUILD-SNAPSHOT                                                                                                                                                                                                                                                                                                                                                                            \n[INFO] +- org.springframework.boot:spring-boot-starter-data-jpa:jar:1.4.0.M2:compile                                                                                                                                                                                                                                                                                                                                                                                   \n[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.4.0.M2:compile                                                                                                                                                                                                                                                                                                                                                                                         \n[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.4.0.M2:compile                                                                                                                                                                                                                                                                                                                                                                              \n[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile                                                                                                                                                                                                                                                                                                                                                                                                    \n[INFO] |  |  |  |  \\- ch.qos.logback:logback-core:jar:1.1.7:compile                                                                                                                                                                                                                                                                                                                                                                                                    \n[INFO] |  |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.21:compile                                                                                                                                                                                                                                                                                                                                                                                                           \n[INFO] |  |  |  \\- org.slf4j:log4j-over-slf4j:jar:1.7.21:compile                                                                                                                                                                                                                                                                                                                                                                                                       \n[INFO] |  |  \\- org.yaml:snakeyaml:jar:1.17:runtime                                                                                                                                                                                                                                                                                                                                                                                                                    \n[INFO] |  +- org.springframework.boot:spring-boot-starter-aop:jar:1.4.0.M2:compile                                                                                                                                                                                                                                                                                                                                                                                     \n[INFO] |  |  \\- org.aspectj:aspectjweaver:jar:1.8.9:compile                                                                                                                                                                                                                                                                                                                                                                                                            \n[INFO] |  +- org.springframework.boot:spring-boot-starter-jdbc:jar:1.4.0.M2:compile                                                                                                                                                                                                                                                                                                                                                                                    \n[INFO] |  |  +- org.apache.tomcat:tomcat-jdbc:jar:8.0.33:compile                                                                                                                                                                                                                                                                                                                                                                                                       \n[INFO] |  |  |  \\- org.apache.tomcat:tomcat-juli:jar:8.0.33:compile                                                                                                                                                                                                                                                                                                                                                                                                    \n[INFO] |  |  \\- org.springframework:spring-jdbc:jar:4.3.0.RC1:compile                                                                                                                                                                                                                                                                                                                                                                                                  \n[INFO] |  +- org.hibernate:hibernate-entitymanager:jar:5.1.0.Final:compile                                                                                                                                                                                                                                                                                                                                                                                             \n[INFO] |  |  +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile                                                                                                                                                                                                                                                                                                                                                                                                \n[INFO] |  |  +- org.hibernate:hibernate-core:jar:5.1.0.Final:compile                                                                                                                                                                                                                                                                                                                                                                                                   \n[INFO] |  |  |  +- antlr:antlr:jar:2.7.7:compile                                                                                                                                                                                                                                                                                                                                                                                                                       \n[INFO] |  |  |  +- org.jboss:jandex:jar:2.0.0.Final:compile\n[INFO] |  |  |  \\- com.fasterxml:classmate:jar:1.3.0:compile\n[INFO] |  |  +- dom4j:dom4j:jar:1.6.1:compile\n[INFO] |  |  |  \\- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO] |  |  +- org.hibernate.common:hibernate-commons-annotations:jar:5.0.1.Final:compile\n[INFO] |  |  +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile\n[INFO] |  |  +- org.javassist:javassist:jar:3.18.1-GA:compile\n[INFO] |  |  \\- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile\n[INFO] |  +- javax.transaction:javax.transaction-api:jar:1.2:compile\n[INFO] |  +- org.springframework.data:spring-data-jpa:jar:1.10.1.RELEASE:compile\n[INFO] |  |  +- org.springframework.data:spring-data-commons:jar:1.12.1.RELEASE:compile\n[INFO] |  |  +- org.springframework:spring-orm:jar:4.3.0.RC1:compile\n[INFO] |  |  +- org.springframework:spring-context:jar:4.3.0.RC1:compile\n[INFO] |  |  +- org.springframework:spring-tx:jar:4.3.0.RC1:compile\n[INFO] |  |  +- org.springframework:spring-beans:jar:4.3.0.RC1:compile\n[INFO] |  |  +- org.slf4j:slf4j-api:jar:1.7.21:compile\n[INFO] |  |  \\- org.slf4j:jcl-over-slf4j:jar:1.7.21:compile\n[INFO] |  \\- org.springframework:spring-aspects:jar:4.3.0.RC1:compile\n[INFO] +- org.springframework.boot:spring-boot-starter-security:jar:1.4.0.M2:compile\n[INFO] |  +- org.springframework:spring-aop:jar:4.3.0.RC1:compile\n[INFO] |  +- org.springframework.security:spring-security-config:jar:4.0.2.RELEASE:compile\n[INFO] |  |  +- aopalliance:aopalliance:jar:1.0:compile\n[INFO] |  |  \\- org.springframework.security:spring-security-core:jar:4.0.2.RELEASE:compile\n[INFO] |  \\- org.springframework.security:spring-security-web:jar:4.0.2.RELEASE:compile\n[INFO] |     +- org.springframework:spring-expression:jar:4.3.0.RC1:compile\n[INFO] |     \\- org.springframework:spring-web:jar:4.3.0.RC1:compile\n[INFO] +- com.h2database:h2:jar:1.4.191:compile\n[INFO] +- org.springframework.boot:spring-boot-starter-data-rest:jar:1.4.0.M2:compile\n[INFO] |  +- org.springframework.boot:spring-boot-starter-web:jar:1.4.0.M2:compile\n[INFO] |  |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.4.0.M2:compile\n[INFO] |  |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.0.33:compile\n[INFO] |  |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.0.33:compile\n[INFO] |  |  |  +- org.apache.tomcat.embed:tomcat-embed-logging-juli:jar:8.0.33:compile\n[INFO] |  |  |  \\- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.0.33:compile\n[INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.2.4.Final:compile\n[INFO] |  |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:compile\n[INFO] |  |  \\- org.springframework:spring-webmvc:jar:4.3.0.RC1:compile\n[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.3:compile\n[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.3:compile\n[INFO] |  |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.7.3:compile\n[INFO] |  \\- org.springframework.data:spring-data-rest-webmvc:jar:2.5.1.RELEASE:compile\n[INFO] |     \\- org.springframework.data:spring-data-rest-core:jar:2.5.1.RELEASE:compile\n[INFO] |        +- org.springframework.hateoas:spring-hateoas:jar:0.19.0.RELEASE:compile\n[INFO] |        +- org.springframework.plugin:spring-plugin-core:jar:1.2.0.RELEASE:compile\n[INFO] |        \\- org.atteo:evo-inflector:jar:1.2.1:compile\n[INFO] +- org.projectlombok:lombok:jar:1.16.8:provided\n[INFO] +- org.springframework.boot:spring-boot-devtools:jar:1.4.0.M2:provided\n[INFO] |  +- org.springframework.boot:spring-boot:jar:1.4.0.M2:compile\n[INFO] |  \\- org.springframework.boot:spring-boot-autoconfigure:jar:1.4.0.M2:compile\n[INFO] \\- org.springframework.boot:spring-boot-starter-test:jar:1.4.0.M2:test\n[INFO]    +- org.springframework.boot:spring-boot-test:jar:1.4.0.M2:test\n[INFO]    +- org.springframework.boot:spring-boot-test-autoconfigure:jar:1.4.0.M2:test\n[INFO]    +- com.jayway.jsonpath:json-path:jar:2.2.0:test\n[INFO]    |  \\- net.minidev:json-smart:jar:2.2.1:test\n[INFO]    |     \\- net.minidev:accessors-smart:jar:1.1:test\n[INFO]    |        \\- org.ow2.asm:asm:jar:5.0.3:test\n[INFO]    +- junit:junit:jar:4.12:test\n[INFO]    +- org.assertj:assertj-core:jar:2.4.1:test\n[INFO]    +- org.mockito:mockito-core:jar:1.10.19:test\n[INFO]    |  \\- org.objenesis:objenesis:jar:2.1:test\n[INFO]    +- org.hamcrest:hamcrest-core:jar:1.3:test\n[INFO]    +- org.hamcrest:hamcrest-library:jar:1.3:test\n[INFO]    +- org.skyscreamer:jsonassert:jar:1.3.0:test\n[INFO]    |  \\- org.json:json:jar:20140107:test\n[INFO]    +- org.springframework:spring-core:jar:4.3.0.RC1:compile\n[INFO]    \\- org.springframework:spring-test:jar:4.3.0.RC1:test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3.162 s\n[INFO] Finished at: 2016-05-11T16:45:56-06:00\n[INFO] Final Memory: 26M/374M\n[INFO] ------------------------------------------------------------------------\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/194", "title": "#189 - add @EnableGlobalMethodSecurity(securedEnabled = true)", "body": "#189 - add @EnableGlobalMethodSecurity(securedEnabled = true) to avoid AlreadyBuiltException.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/223632003", "body": "Direct invocation also fails with the same error: `java -jar target/*.jar`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/223632003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "futurechan": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/188", "title": "Search where null with querydsl ", "body": "I am looking for an example of how to search where a field is null. Here's my example:\n\nI have a controller method for searching like so\n\n``` java\n@RequestMapping(method = RequestMethod.GET)\npublic Page<MyEntity> find(@QuerydslPredicate(root = MyEntity.class)\n                                     Predicate predicate,\n                         Pageable pageable) {\n\n    return this.myEntityRepository.findAll(predicate, pageable);\n}\n```\n\nIt works great. I can issue a `GET` request with various query string parameters, and it filters accordingly, but now I want to search by null. I tried doing something like `/myentity?myParam1=&`, but the `predicate` argument is always `null`.\n\nHow can I search where specific fields are null?\n\nI also posted this on [SO](http://stackoverflow.com/questions/36727681/search-by-null-with-querydsl).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/188/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "walshe": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/150", "title": "Add example for validation with Spring Data REST", "body": "anychance of an example of validation for rest post/put as mentioned here:\n\nhttp://docs.spring.io/spring-data/rest/docs/current/reference/html/#validation\n\nhaving issues trying to get it working here\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/150/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mp911de": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/8eebca96d3b7998aae7e9eb2606408cf1bf60020", "message": "#335 - Adapt to Spring Boot 2.0 snapshots.\n\nExclude SecurityAutoConfiguration via application.properties as class was moved across packages. Add lombok.config to add @ConstructorProperties to Redis JSON objects."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/69c2c2aef4def05b7b8ba0ca2d8ffceedea5613f", "message": "#266 - Refactor reactive tests to use StepVerifier and test methods.\n\nWe now use StepVerifier and RxJava's .test() methods instead of .block() calls. Using blocking methods is an anti pattern which should be avoided within tests. Test API comes with timeouts and protects tests from never completing."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a2f963df14b0368bda53ccad6c53795552eef6ae", "message": "#328 - Fix reactive MongoDB tailable cursor examples.\n\nReplace flatMap(\u2026) operator after collection drop with then(\u2026) to create the collection regardless of whether the previous operation emitted an element or not.\n\nCollect emitted elements to add an assertion and fail if the tailing does not work."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/627a08b02baeb1fc9f7bc44d3e9f7cf4f9d534ef", "message": "#327 - Polishing.\n\nAdd comment to configured bean."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/19cf46330500f7fa2b1f22a1efc21845214cfa52", "message": "#327 - Add Jackson example for Reactive Redis use."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b3d87492735abfb6da6d5230ad8d6c7a19832be6", "message": "#326 - Extend CORS examples.\n\nAdd examples for preflight- and rejected requests."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/674c4e904cd9f5dca9f966b106cde35a90e64d72", "message": "#325 - Upgrade to Spring Boot 2.0 M7.\n\nTweak bom to reflect Spring Framework and Spring Data versions.\n\nRemove reactive Couchbase configuration code required prior to Spring Boot 2.0 M7.\n\nTweak CORS examples to adapt to Spring Framework's disabled allowCredentials by default."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3d19c67d0a601c7ce37733622864eee0f541d873", "message": "#323 - Polishing.\n\nRename KeyOperationsTests to KeyCommandsTests to align with naming on connection level."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c2858055a8050ab4689a47dbdf5d2c3e266d382e", "message": "#323 - Add examples for Reactive Redis Template."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bd7b5e553be34a26d49661f2aa7615149e39180e", "message": "#265 - Add reactive examples.\n\nOriginal pull request: #275."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b61875f97cc2dffd0f024c59d801751d4d8853d3", "message": "#265 - Polishing.\n\nAdd license headers. Replace CouchbaseConfiguration with Spring Boot properties. Post-process example data to make it accessible for repository use. Fix Id type. Add examples for N1ql and view access.\n\nEnable couchbase examples in parent pom.\n\nAdd test rule to skip tests if Couchbase is not available.\n\nOriginal pull request: #275."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4b648b1d501aa51bbfa1f962ce3b7d72d66f0ca9", "message": "#265 - Install and launch Couchbase on TravisCI.\n\nWe now install a Couchbase instance on TravisCI preinitialized with the Travel sample data set.\n\nOriginal pull request: #275."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/96d1e7f7caf3167007d06141e26a995d4f973156", "message": "#318 - Polishing.\n\nRewrite test to AssertJ. Replace CharSet lookup with constant assignment. Typos."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/fec9bb4729fd52d739fc21bd5be374b5d10ae9d4", "message": "#318 - Remove superfluous @EqualsAndHashCode annotation.\n\nAddress does not require to be annotated with @EqualsAndHashCode as these settings are inherited from @Data."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c32cedb97bad55cb10362ad5f77b0dbbc02bdc83", "message": "#312 - Adapt reactive MongoDB example readme to changed @Tailable annotation.\n\nAdapt also changed insertAll(\u2026) signature to accept a Collection instead of a Flux."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5760555c57aed22610409461261babab408c9a31", "message": "#299 - Migrate Redis examples to Lettuce.\n\nWe now use Lettuce API instead of Jedis to align with Boot's driver choice."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5c01c4413085c37cb1f66ff9dce6bcbb2d2245e9", "message": "#298 - Add JPA example for composable repositories."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d319758bef70ff185547a310cb164fe76c63d0ae", "message": "#297 - Upgraded samples for Spring Data for Cassandra to Kay.\n\nAdapt to changed API. Migrate tests to use AssertJ. Re-enable Cassandra examples. Adapt Cassandra examples to relocated packages. Adapt reactive Cassandra examples to removed insert(Publisher) method.\n\nExclude the reporter-config3 library from cassandra-all as it pulls in an outdated hibernate-validator version 4.3.0 that conflicts with Spring Boot's Hibernate Validator baseline and it's not required during tests because we don't publish any metrics."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/90546357c7a8c54dd18c200b4b0382b1b9d54326", "message": "#291 - Adapt to API changes in Spring Data Cassandra.\n\nExclude CassandraDataAutoConfiguration because the referenced Spring Data Cassandra version is not compatible with CassandraDataAutoConfiguration. Refactor bulk loading to flapMap(\u2026) as CassandraTemplate.insert(\u2026) no longer accepts an entity stream."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a0754b7ce69db2b9f81470238456cbf538466eb2", "message": "#280 - Increase Cassandra startup timeout to 60 seconds."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/45f19a6c1d81ebd0fec5fe86763232f74b20720f", "message": "#166 - Rename Redis cluster-sentinel to sentinel.\n\nRename the Redis cluster-sentinel project to sentinel and leave a hint in the cluster-sentinel directory that points to the Redis Cluster and Redis Sentinel examples mentioning clarifying the cluster-sentinel naming."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b1ffd9cedeabbb41b11ffb3b1b3f0ad56b85a4d3", "message": "#264 - Read MongoDB port from local.mongo.port.\n\nPort handling for embedded MongoDB use has changed. Spring Boot no longer writes the port to MongoProperties but updates property sources to provide local.mongo.port so the reactive configuration is required to read local.mongo.port to obtain the port."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3d5a30510cd81a284c127936236a8e60cf2c99e6", "message": "#257 - Guard Redis Geo tests with a minimum required version.\n\nRedis Geo tests are skipped if the minimum Redis version rule of version 3.2 is not met."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9a2e95a784cf449bdda372668ae78e8d5c06956d", "message": "#256 - Add examples for Redis Geo API."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/37d5fadf4d0d2c0a76c1ad33aef007019d741e14", "message": "#251 - Add example for Spring Data LDAP."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4bae4718373edb675faf9c77c0eff31258231c2e", "message": "#254 - Use MongoProperties.getPort() to configure reactive MongoClient.\n\nEmbedded MongoDB auto-configuration randomizes its port. Configuration happens during the creation of embeddedMongoServer so our MongoClient creation must be delayed until then."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/605b90dc5609d041f00492fc039bec1d76f6f174", "message": "#249 - Add example for Spring Data REST Cross-origin resource sharing."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/319d3e1a178a64fe0856ca19510512fd592d1ea4", "message": "#250 - Polishing.\n\nUse Cassandra streaming query with query derivation instead of a String-based query."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/54ab8178b783d161ba63cae3f7982460232ef28d", "message": "#250 - Add example for Cassandra User-defined type usage."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d9f77903ef27622ac18a83973d9ebb7c25ef4ac0", "message": "#224 - Use external or embedded (if external Apache Cassandra is not available) for Cassandra examples.\n\nWe now check whether an external Apache Cassandra instance is available at localhost:9042 and use it to run the examples. Otherwise, if no external Apache Cassandra instance is available, we start an embedded Cassandra instance."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a138925b0d62e403f0fca611f8fcda9f2510e5d7", "message": "#226 - Add samples for new MongoDB aggregation operations in Ingalls."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c523b8d468484075658a2b3c63a4a718c54bab16", "message": "#245 - Upgrade to MongoDB Reactive Streams Driver 1.3.0."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ba829655f2a3228a3e5add52f5e43b4feb8b786e", "message": "#244 - Adopt changed constructor for JpaBaseConfiguration."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4ed34e9b3a93bf8f0ce52d7760eb911d37c68ebc", "message": "#238 - Upgrade to a newer JDK version on TravisCI."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/16b504051a46d95231405e124badb7f14a5961e2", "message": "#223 - Skip Cassandra tests if Cassandra is not available locally."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b68a4459bf566658e087ed6300aa31782bf4f0c8", "message": "#215 - Reduce log output in TravisCI build.\n\nTravisCI build produces 4MB+ of log output which causes TravisCI to kill the build. Run Maven on TravisCI in batch-mode and redirect test output to file to avoid long download progress output."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/20879e7fa392516d5566f2bd96c97b4d9107774e", "message": "#215 - Add reactive examples for MongoDB, Apache Cassandra and Redis."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/95978416d14d81da47bbff4a3ee01ee33faf1a39", "message": "#203 - Revise Cassandra Examples.\n\nSimplify examples by adopting Spring Boot 1.4 improvements. Upgrade Cassandra Java driver to 3.0.3. Add examples for Ingalls (Query derivation, projection, Java 8 feature support).\n\nCassandra example setup is now self-contained by requiring just a running Cassandra instance.\nKeyspace and tables are created during the tests. Examples also check if Cassandra is running and some examples additionally check the required version. Test execution is skipped if conditions are not met.\n\nCassandra (2.x) is started with TravisCI."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ecafda00ca97bcc001cf5577b0f6148193a14142", "message": "#200 - Polishing.\n\nPull spring-boot-starter-data-redis into redis/pom.xml, use dependency management for embedded-redis."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/d1d5f7fe090cd161b0aa050a5c2d71bc57dbd6c5", "message": "#200 - Upgrade to Ingalls M1."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6d012f4aa26c3ae9dcd4066a842bb37b7f12b303", "message": "#164 - Polishing.\n\nReplaced deprecated @Builder annotation with @Builder from the main lombok package. Remove Groovy libraries as Examples do not contain scripting.\n\nOriginal pull request: #165."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/fc5da90453a293f84128cb57e23ec3130350ed68", "message": "#160 - Add MongoDB java8 and Spring Security examples to the frontpage documentation."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f4e874e60142173d7daba007cbdd6c989a5ffb7d", "message": "#160 - Update docs for Redis cluster.\n\nMention Redis cluster example in the docs. Remove cluster wording from the sentinel example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/dc50706c27ab12c5c3f4c70061e328fd36fc0fd9", "message": "#160 - Add excerpts for Query by Example."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/beabdf8a7992a96ae6a5d73b3fc702e3de3d2b21", "message": "#153 - Add examples for Query by Example functionality with JPA and MongoDB.\n\nOriginal pull request: #154."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/192141620", "body": "Thanks, that's merged with 1fe9aae.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/192141620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199218561", "body": "Merged with 6d012f4.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199218561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199741464", "body": "Hi @ybonda,\nthe name \"cluster-sentinel\" is a bit misleading. It's related to Redis Sentinel-only. While you can configure Redis Sentinel monitoring multiple masters, one `RedisConnectionFactory` uses only one master name per instance. If you want to open connections to multiple master nodes using Redis Sentinel, you require multiple `RedisConnectionFactory` instances.\n\nIf you mean Redis Cluster, see  the [`cluster`](https://github.com/spring-projects/spring-data-examples/tree/master/redis/cluster) example.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199741464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199741882", "body": "I'll take care of it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199741882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199763808", "body": "We have to untangle things here. The examples are feature showcases and require a certain setup to run. Fault-tolerancy for Spring Data Redis is a different topic though.\n\nThis repo is not to intended for general discussions but for simple examples. If you feel the urge to continue the discussion, then [StackOverflow](https://stackoverflow.com/questions/tagged/spring-data-redis) is a great place or, if you have ideas how to improve Spring Data Redis or you want to report a bug, then create a ticket in our [Jira](https://jira.spring.io/browse/DATAREDIS).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199763808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199764816", "body": "Closing this ticket in favor of #166.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199764816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200214461", "body": "Seriously, please stop opening tickets to make someone reply on StackOverflow. We'll respond when we get to. Generally speaking: the place to ask general questions, is StackOverflow, not the issue tracker.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200214461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200214767", "body": "This is not a general discussion forum. Please use StackOverflow for general questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200214767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200233954", "body": "The StackOverflow question is now 3hrs old, seriously, hardly one had even a chance to notice it. If you need support with guaranteed response time, our paid support might be an option for you: http://pivotal.io/labs\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200233954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202953941", "body": "web/example/pom.xml points to its parent project https://github.com/spring-projects/spring-data-examples/tree/master/web. The same pattern is used in the other example modules as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202953941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202972343", "body": "Closing this ticket as we have https://jira.spring.io/browse/DATAJPA-707 and https://jira.spring.io/browse/DATAJPA-748 to track calling stored procedures with multiple out parameters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202972343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202972882", "body": "Closing this ticket as the renaming issue is resolved for us.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202972882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/203822866", "body": "Hi @missedone,\n\nour examples use [Project Lombok](https://projectlombok.org/) to get rid of boilerplate code. That's the reason you don't see any getters/setters. Your IDE will need a Plugin for either [IntelliJ](https://plugins.jetbrains.com/plugin/6317) or [Eclipse](https://projectlombok.org/download.html) while Maven works out of the box.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/203822866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/212251221", "body": "Hi @hongyan99 \nour examples use [Project Lombok](https://projectlombok.org/) to get rid of boilerplate code such as constructors, getter/setter and some more. You will need to install the Eclipse plugin (see [here](https://projectlombok.org/download.html)), so Eclipse can handle also Lombok annotations and does not longer complain about missing code.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/212251221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/232937665", "body": "This is not a general discussion forum. Please use StackOverflow for general questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/232937665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/241221581", "body": "Please make sure to use the `Ingalls-M1` release, see the [Ingalls M1 announcement](https://spring.io/blog/2016/07/27/spring-data-release-train-ingalls-m1-released) for further details. \n\nIf you have questions, please use StackOverflow as this is not a general discussion forum.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/241221581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/253156506", "body": "This is not a general discussion forum. Please use StackOverflow for general questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/253156506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259640497", "body": "Closing this one. In case of problems and/or questions please use [Stackoverflow](http://stackoverflow.com/tags/spring-data-jpa) or the [issue tracker](https://jira.spring.io/browse/DATAJPA). Please refrain from creating such tickets in this Github repository.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259640497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/261044631", "body": "It's possible by providing all configuration bits regarding `Cluster`, `Session` and `CassandraTemplate` by your own configuration but that kind of set up does not work out of the box.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/261044631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262473544", "body": "Fixed in Spring Data Cassandra with https://github.com/spring-projects/spring-data-cassandra/commit/5465afdbcf8bf8b92b6abaf3a416a801f7f07fd1#diff-600376dffeb79835ede4a0b285078036", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262473544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/265707110", "body": "Spring Data Examples are based on Spring Boot `1.4.2.RELEASE`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/265707110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/270329630", "body": "Please use StackOverflow for general usage questions. There's no reactive support for JPA.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/270329630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/272394620", "body": "This is not a general discussion forum. Please use StackOverflow for general usage questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/272394620/reactions", "total_count": 1, "+1": 0, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/275659515", "body": "See also https://github.com/spring-projects/spring-boot/commit/b19d31e0671011d8a97c94cb4572ea14ed87eb79 and https://github.com/spring-projects/spring-boot/issues/8044", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/275659515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/285592886", "body": "Merged with 45f19a6.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/285592886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/342066731", "body": "Please learn how to properly [format code and logs](https://help.github.com/articles/creating-and-highlighting-code-blocks/).\r\n\r\nIndeed, types annotated with `@Data` do not require `@EqualsAndHashCode` unless they want to specify any further attributes in `@EqualsAndHashCode(\u2026)`. It makes sense to `@EqualsAndHashCode` from `Address`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/342066731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/342068406", "body": "That's fixed now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/342068406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/346770805", "body": "Thanks a lot. That's now squashed, polished and merged.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/346770805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/11107121", "body": "Love that comment :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/11107121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/54240287", "body": "Wasn't sure whether this works with JPA. Thanks for the hint.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/54240287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "chan71": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5ba65308a76c21d4737738d2503d1e1d592b919a", "message": "#265 - Add example for Spring Data Couchbase.\n\nOriginal pull request: #275."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299021613", "body": "@frankchang1990 i could reproduce your issue and the issue in `findByFirstNameAndLastName` that @schauder has mentioned. In addition I got another tests failing due to error 2 in findByFirstnameOrLastname() test. \r\n\r\nError 1:\r\n`org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'firstname' cannot be found on null`\r\n\r\nError 2:\r\n`org.springframework.dao.InvalidDataAccessApiUsageException: Name for parameter binding must not be null or empty! For named parameters you need to use @Param for query method parameters on Java versions < 8.`\r\n\r\nThe issue seems to be the missing annotation in `SimpleUserRepository ` interface. I'm yet to find a proper explanation though. \r\n```\r\n@Query(\"select u from User u where u.firstname = :#{#user.firstname} or u.lastname = :#{#user.lastname}\")\r\nIterable<User> findByFirstnameOrLastname(@Param(\"user\") User user);\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299021613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299027533", "body": "@olivergierke I'm willing to contribute to this project. Please advice.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299027533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299106705", "body": "@olivergierke I agree with your comment. However, 2 tests failed when run from my IDE. However, if I run the test from command line (path set to java 8) using maven (3.5), all tests get passed without errors.\r\n`>mvn -Dtest=SimpleUserRepositoryTests test`\r\n\r\nFailing environment uses:\r\nIntelliJ Idea\r\nJava compiler and Project JDK set to Java 1.8 (and I have only Java 8 in my machine)\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299106705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299337342", "body": "@schauder my error disappeared from IntelliJ when I ran it again. I ran the tests from `Maven Project (window) -> Spring Data JPA - Examples -> Lifecycle -> test` before running SimpleUserRepositoryTests from the IDE. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299337342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299636730", "body": "@olivergierke I will write a sample for couchbase. Please assign this ticket to me.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299636730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299746326", "body": "@olivergierke thanks for taking time to review my code. I have modified the code to reflect review comment. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299746326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299748169", "body": "Updated the issue id to #265", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299748169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/300404828", "body": "@olivergierke appreciate any update on next step.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/300404828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/302900672", "body": "@olivergierke anything you would like to see in order to merge this to master?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/302900672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "isopov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/ec94079b8f2b1e66414f410d89003bd333fb6e7d", "message": "#321 - Fix Hibernate exclusion in EclipseLink sample.\n\nPreviously, the deprecated hibernate-entitymanager dependency was excluded but that was not taking effect, since current spring-boot-starter-data-jpa depends on hibernate-core."}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/322", "title": "add maven wrapper to simplify diving into samples", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/345510346", "body": "Linked boot-issue was closed due to lack of feedback...", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/345510346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "christophstrobl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e7123f264721e82a22446e050acf9d600f4d81f0", "message": "#297 - Add sample for fluent MongoDB API."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/7a557bfd72bc624f38addb05bf19c39a822d27b5", "message": "#297 - Move MongoDB example from RxJava1 to RxJava2."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5fcec44ec698f6e0dcc8851e77cae4179b6b41ae", "message": "#297 - Upgraded samples for Spring Data for Apache Solr to Kay.\n\nAdapt to API changes in SolrOperations."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b82460f33c88d05ecd4b279df7fe816c3fb8b4fa", "message": "#158 - Remove workaround for Redis cluster configuration.\n\nSpringBoot 1.4M1 ships with auto configuration for spring.redis.cluster so we removed the work around using ConfigurationProperties."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/09697b84f23c1717206c0189d5855e622776e62f", "message": "#164 - Fix Elasticsearch example\n\nRemove Boot Autoconfiguration, in-memory index and facets.\nGeoPoint instead of String for location.\n\nOriginal pull request: #165."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5a25e80bbfb10d722b23d9dd807bad9ccea6a1d8", "message": "#149 - Add Redis repository support sample.\n\nBumped Spring Data Redis version to 1.7 RC1. Added JUnit Rule for Embedded Redis Server.\n\nOriginal pull request: #162."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/dfc1bf0390f7004ce4310e5a20d36ea3a48425da", "message": "#146 - Add example to demonstrate Redis Cluster support.\n\nExample demonstrating the basic usage of Spring Data Redis in a clustered environment using Jedis."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f593e31565755e67976987c96dbf67d0a2fd58c8", "message": "#151 - Override managed version to support Solr 5.x.\n\nPull in matching Solr 5 version."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/97eefb0afcd5b42e68087d94e67215a4cef3bc05", "message": "#124 - Added sample for Querydsl integration.\n\nMove web project to web/example and add web/querydsl as a dedicated one demonstrating the QueryDSL Predicate usage in Spring MVC."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/50cb4b9bba221ad87ad49a388d94f7ebb0a01402", "message": "#58 - Add sample for usage of server-side JavaScript.\n\nUse a server-side script to simulate putIfAbsent(\u2026) as contracted by the Map interface. The operation will be atomic since MongoDB will put a lock on database until the script is finished."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/9cffcef9c6556a8c3846044130e6b00a5a38e3f9", "message": "#57 - Added samples for Solr highlighting, boost, score, functions and realtime-get.\n\nRefactored initialization to allow custom ingestion of test data. Added samples demonstrating usage of: \n\n- @Highlight for highlighting fragments.\n- @Boost for boosting search terms.\n- @Score to indicate interest in document score.\n- SolrOperations#getById for realtime-get."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/35596a9045adb802bab88f927144537fef4f0ee3", "message": "#64 - Add example for GeoJSON usage in MongoDB.\n\nAdd sample to show usage of GeoJSON within domain types and repository query methods."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5af654a12a4cbdfa316b2fc6e8901d5a1e034322", "message": "#5 - Add sample for Slice usage.\n\nOriginal pull request: #17."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f625317445df0c2cc076ba4cc32f6078b9421351", "message": "#8 - Switch to local source data for text search.\n\nRemove online resources and just rely on local data. Though we had to keep the BlogPostInitializer for setting up the tests only using the template without repository support.\n\nOriginal pull request: #18."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/de7c2c55228a906ca8bfa56384c0faeaa5d1dc1b", "message": "#6 - Add samples for Spring Data Solr.\n\nAdded sample using deep pagination with cursor and one for managed schema support. Added JUnit rule checking that Solr is up and running.\n\nOriginal pull request: #12."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/91565e3e218a33443400961e6b39555c78383041", "message": "#3 - Added samples for Spring Data Redis.\n\nWe added basic samples showing KEYS and SCAN command as well as configuration options for Redis Sentinel.\n\nOriginal pull request: #9."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/caf5ba4edc7e3dd62934bddae7c42e3e86d23419", "message": "#5 - Add sample for derived deleteBy.\n\nOriginal pull request: #14."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/6fb5259e37e52f8b7f047f9163db370ae109148b", "message": "#8 - Add sample for @Meta usage.\n\nRenamed the geo-spatial example to example only as it not only covers geo-spatial samples. Added advanced example to show the usage of the @Meta annotation.\n\nOriginal pull request: #11."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/09317bc6de13b4cfb0071bf356ff7d178b8fc11e", "message": "#8 - Add MongoDB text search example.\n\nThe sample reads the Spring IO blog Atom feed and performs text search on it.\n\nWe use manual index creation and query via MongoTemplate as well as automatic index creation and derived queries via repositories.\n\nOriginal pull request: #10."}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/337", "title": "Add Sample for MongoDB 3.6 Change Streams.", "body": "Based on Lovelace M1, embedded MongoDB 3.6.0 and the MongoDB Java driver 3.6.\r\n\r\nAdd example demonstrating consumption of MongoDB 3.6 [Change Streams](https://docs.mongodb.com/manual/changeStreams) in both imperative and reactive style.\r\n\r\n**NOTE:** There seems to be a glitch in flapdoodle shutting down a mongod instance running as a single node replica set so all tests need to reside in a single class.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54127334", "body": "@olivergierke yes - makes sense, also allows to move some of the config stuff (enable/disable profiling) to the config. updated the PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54127334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54331406", "body": "The basic sample would work using an embedded server - the other one requires a running instance - I'll add guards skipping those tests if solr is not running.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/54331406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78046776", "body": "@olivergierke rebased on master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78046776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78560723", "body": "thanks @olivergierke - moved the script into the tests and deleted the custom repository.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78560723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/148384646", "body": "@JavaHelper please have a look at the [MongoDB Limits](http://docs.mongodb.org/manual/reference/limits/#Queries-cannot-use-both-text-and-Geospatial-Indexes) which do not allow to combine text and geo queries. \n\n> You cannot combine the $text query, which requires a special text index, with a query operator that requires a different type of special index. For example you cannot combine $text query with the $near operator.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/148384646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/149483307", "body": "Combining 2 special index structures is not possible using MongoDB. This means that a text index cannot be used together with eg. a geospatial index. \n[\"$near\"](https://docs.mongodb.org/manual/reference/operator/query/near/) requires to operate on a 2d or 2dsphere index and therefore cannot be combined with text search.\n\nHowever it is possible to use [$geoWithin]() which does not require a geospatial index. Use a `Polygon` or `Circle` for that to construct queries like\n\n``` javascript\ndb.text_and_geo.find({\n     \"loc\": { \"$geoWithin\" : { \"$geometry\": { \"type\" : \"Polygon\" , \"coordinates\": [ [ [ 0, 0 ], [ 3, 6 ], [ 6, 1 ], [ 0, 0 ] ] ] }}},\n     \"$text\" : { \"$search\" : \"data\"}\n})\n\ndb.text_and_geo.find({\n     \"loc\": { \"$geoWithin\": { \"$center\": [ [1, 1], 10 ] } } ,\n     \"$text\" : { \"$search\" : \"data\"}\n})\n```\n\nPretty much the same can be done using `MongoTemplate`\n\n``` java\nQuery queryWithPolygon = TextQuery.queryText(TextCriteria.forDefaultLanguage()\n  .matching(\"spring\"))\n  .addCriteria(\n    where(\"loc\")\n      .within(new GeoJsonPolygon(new Point(0, 0), new Point(3, 6), new Point(6, 1), new Point(0, 0)));\nList<TextAndGeo> result = template.find(queryWithPolygon, TextAndGeo.class);\n\nQuery queryWithCircle = TextQuery.queryText(TextCriteria.forDefaultLanguage()\n  .matching(\"spring\"))\n  .addCriteria(\n    where(\"loc\")\n      .within(new Circle(new Point(0, 0), 10));\nList<TextAndGeo> result = template.find(queryWithCircle, TextAndGeo.class);\n\n```\n\nIn case of `Repository` simply use the `Within` keyword for your derived query `Page<TextAndGeo> findByLocWithin(Circle c, TextCriteria tc, Pageable p)`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/149483307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259402198", "body": "Closing this one. In case of problems and/or questions please use [Stackoverflow](http://stackoverflow.com/tags/spring-data-jpa) or the [issue tracker](https://jira.spring.io/browse/DATAJPA). Thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259402198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/313463010", "body": "Closing this one. @chuchiliusandc please use [Stackoverflow](https://stackoverflow.com/questions/tagged/spring-data-redis) for questions. Thank you!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/313463010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "KotMeow": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f65d6782375c20cd4b8b90c103ecfe398625741e", "message": "#282 - Fixes typo in README.md.\n\nReplaced MongoDB with the intended Spring Data JPA.\n\nOriginal pull request: #281."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "derlucas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/bee8a81118e1cf3fec3ef5ac91c4e9d3677b6a74", "message": "#199 - Added missing messages and fixed a JavaDoc error in web example."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "franziskas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/1fe9aaeefa3f9458c25849f77428502e4da1dab5", "message": "#157 - Fix Typo in readme.\n\nTwo -> To"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kumlien": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5a9b785499fbf79464ca3a6bc5b2a6e80998efc7", "message": "#135 - Fixed some typos in readmes."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luanne": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f90bed38e2088dd7a6b448ffbcd7ff2aa90490bc", "message": "#131 - Added Spring Data Neo4j example.\n\nOriginal pull requests: #129, #130."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38637798", "body": "We need them all unfortunately. The spring-data-neo4j test-jar contains the InProcessServer and the others contain the test utilities and TestServer from neo4j-ogm\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38637798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "cbeams": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/10ef5bb89d5198b500cac8c109cdef6a99d08c7c", "message": "#100 - Fix typo in root README."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/a666eae1664295c995a0a4d46862fcff2aba4810", "message": "#103 - Fix typo in resource URIs."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/5e0d0da8f2a7319e21ab15e7e45c398a196d66f4", "message": "#102 - Add instruction to create mongodb data directory.\n\nRunning mongodb fails if the --dbpath directory does not yet exist. This change instructs the user to create the directory first."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wilkinsona": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/e1e22f4e5e201f9d7f7ea0b10461a72b160fdb1c", "message": "#79 - Add Gradle configuration to the BOM example."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bclozel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/cc2ac546e79ec096860322252ae9970c23bdbc57", "message": "#87 - Fix WebJARs resource handling in Starbucks example."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jrrickard": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/b092d6fb30995bb1f4e38a645724985fae58bdb0", "message": "#50 - Added example of using Spring Data JPA with EclipseLink.\n\noriginal pull request: #68."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78613894", "body": "Are you working on this? The JIRA was marked Resolved, but I didn't see anything in the repo so I made an example. I'll submit a PR for it, feel free to ignore it!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78613894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78955171", "body": "Thanks for the feedback @olivergierke, I'll simplify and address your other comments today. Simplifying it down to just the core aspect of the original issue makes total sense! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/78955171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94911736", "body": "@olivergierke did you get a chance to review my revisions? I appreciate all the feedback! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94911736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26449388", "body": "Hi @olivergierke , I have a follow up question! \n\nI debated using this plugin originally. The static weaving plugin listed in the EclipseLink documentation requires a persistence-unit defined in a persistence.xml. Without specifying the entity classes or a jar in the persistence-unit, it didn't actually do any weaving on the class files. The plugin in the current version of the PR does class scanning which seems more ideal, but in hindsight it's probably not ideal for an example like this because it's non standard and may stop working at some point if that non maven central plugin disappears.\n\nI have the example working with all the other review comments incorporated so it is much more correct in terms of Spring Boot usage. I have it working using both this plugin and the standard plugin. To get the standard plugin working, I had to create a persistence.xml file and define a persistence-unit and list the entity class. The JIRA issue did state \"Ideally this would include static weaving.\" So I can either resubmit with the standard plugin and the persistence.xml, or just remove the static weaving portion. Which would you be better?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26449388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26885745", "body": "@olivergierke  , thanks again for the feedback! \n\nThere isn't a non-snapshot version of the plugin available. As I was thinking more about this, I think the plugin from maven central and the use of a persistence.xml better illustrates the costs of using static weaving? Another approach would be to use the plugin from maven central, define a persistence.xml with only the entity information to support the static weaving during build time and then not use it for the Spring Boot application example. In this case, the persistence.xml exists just to provide the required information for the build time weaving of the entity, Spring Boot customizations are kept to a minimum and the infrastructure setup cost is all in the build. I just verified that works as well. \n\nThe more detailed example would be using the maven central plugin and a persistence.xml and doing more Spring Boot customization to [use a traditional persistence.xm](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html#howto-use-traditional-persistence-xml). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/26885745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gregturn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/3e793a51475aa8a287182539be637e101b4ee24b", "message": " #71 - Remove old SNAPSHOT reference."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4bcdb26b100819a7405760d558dcbb0af15d8a4f", "message": "#24 - Add Spring Boot Maven-plugin to root pom.xml.\n\nAlso upgrade to Spring Boot 1.1.8.RELEASE.\n\nOriginal pull request: #25."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/4b2ec72569a5b30c6cb9d72dcf25af8357819eee", "message": "#23 - Fixed typo and styling in security example.\n\nFix typo in link to Spring Security reference documentation and the bold type face of ROLE_ADMIN."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/c5920a64d9571a4403aa0ffaf3d2418412d25a14", "message": "#21 - Added example for Spring Data REST and Spring Security.\n\nAdded example of how to secure a Spring Data REST project with Spring Security both on the method level as well as the URI level.\n\nOriginal pull request: #22."}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/401e1410122d0d68168e83ac1646c1e1824c75ab", "message": "Added multi-store example to Spring Data REST examples.\n\nThis app demonstrates how to mix Spring Data JPA and Spring Data MongoDB together (with Spring Data REST on top) to demonstrate how to split them up properly."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62887396", "body": "You should try Spring Boot 1.1.9 which may pull in the latest patches. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62887396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/76837194", "body": "Shall we upgrade SDR as well to 0.17?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/76837194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308820215", "body": "`@Data` simply means create getters, setters, toString, hashCode, and equals methods, automatically based on the fields. It's by no means an _immutable_ value object.\r\n\r\nTo actually create something that's immutable, you would use Lombok's `@Value`. Since JPA doesn't like immutability, this doesn't work very well.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308820215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308841769", "body": "I guess it depends on which comparison you are making. When holding two Customer objects and comparing them side by side, are we assuming a match based on them being the same row in the table, or based on the value of their contents? If purely based on id, then we could be viewing the same row of data from two different times where their values have changed. I wouldn't call that **equal**.\r\n\r\nAs for mutating members of `Set`, that sounds risky on the surface. But to go further, any \"view\" of the data can be deemed risky because if the person's surname (or any attribute) was updated in the database, my copy is stale.\r\n\r\nThis whole topic begs the usage of https://github.com/spring-projects/spring-data-envers to deploy versioning of your data if the management of such changes becomes complex. (BTW, Lombok's `@Data` annotation DOES let you specify exactly which fields apply in hashCode/equals, if you wish).\r\n\r\nBut if we're talking about storing a handful of objects for a demo to illustrate concepts of Spring Data, with little input on the rate of change requirements, then I don't see the point of worrying about it right now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308841769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308938151", "body": "I'm quite familiar with DDD. In fact, project lead @olivergierke has given many talks on [DDD & REST](https://speakerdeck.com/olivergierke/ddd-and-rest-domain-driven-apis-for-the-web-5).\r\n\r\nAgain, for the scope of the code at hand, I'm not sure I see the necessity to split apart Customer the entity from Customer the value object. For more complex scenarios, I get it. But I don't see the need here. Thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308938151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18952107", "body": "Well, I was testing the asciidoc outputs. Didn't want the HTML to become a controlled artifact. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18952107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18980593", "body": "Yes it does. It's not an override method.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/18980593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19667812", "body": "@olivergierke Why wouldn't we have such global IntelliJ stuff NOT at the root level of this project? If we don't put it at the top, we'll need this on every project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/19667812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153751691", "body": "To clarify all we built is autconfig. We don't yet have a proper \"starter\". It might pull in the stuff we need anyway, but I wanted to be clear. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153751691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153751967", "body": "Hmm. They might be optional. Have to doublecheck. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/153751967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "akonczak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/f9aa1556d8f8404c30673856c7314a3e4e6ba89e", "message": "#28 - Added example for Spring Data Elasticsearch.\n\nAdded basic example to show repository and ElasticsearchOperations usage."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61238922", "body": "Thanks for fast feedback, I will apply all necessary changes today.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61238922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61470418", "body": "Hi Olivier \nI have applied all fixes for you comments except .gitignore (I have left IntelliJ section - it's quite common rule and many people use it)\n\nOther things:\n- a few examples won't build if you call mvn clean install - spring boot requires 'main' method \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/61470418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62901782", "body": "done + small fix for application.properties \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62901782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "eddumelendez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/commits/30386210c4fed20bf9d458b1bd549d4ef812de88", "message": "#39 - Added example of SpEL usage in manually defined JPA queries."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alb-i986": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/336", "title": "Bom example: fix gradle build plus a little more", "body": "- the gradle build was failing with \r\n    > Failed to apply plugin [id 'io.spring.dependency-management']\r\n    > Could not create task of type 'DependencyManagementReportTask'.\r\n\r\n- upgrade the versions of spring in build.gradle to keep them in sync with those declared in maven's pom\r\n\r\n- update the .gitignore file with gradle dirs", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hlang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/229", "title": "add GridFS example for spring data", "body": "provide GridFS example. See issue #218.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/283398874", "body": "Any ideas when this will be merged?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/283398874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/339394959", "body": "Updated the gridfs example to spring data 2.0.0.\r\nBut not sure if things got more complicated since 2.0.0. \r\nSee [How to get gridFsFile content in spring data mongodb](https://stackoverflow.com/questions/46856387/how-to-get-gridfsfile-content-in-spring-data-mongodb)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/339394959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "timomeinen": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/216", "title": "EclipseLink Load-Time Weaving does not work", "body": "This PR demonstrates, that the **Load-Time Weaving** in the subproject _spring-data-jpa-eclipselink_ **does not work**.\r\n\r\nI created a bidirectional lazy relationship from `Customer` to a new entity `Phone`. EclipseLink uses LTW (Dynamic Weaving) to [implement lazy loading](https://wiki.eclipse.org/EclipseLink/UserGuide/JPA/Advanced_JPA_Development/Performance/Weaving/Weaving_POJO_Classes). With this new relationship EclipseLink generates a warning message, that weaving did not occur:\r\n\r\n`mvn clean test -Pload-time-weaving`\r\n\r\n`[EL Warning]: metadata: 2016-11-06 08:41:47.492--ServerSession(1470420462)--Reverting the lazy setting on the OneToOne or ManyToOne attribute [customer] for the entity class [class example.springdata.jpa.eclipselink.Phone] since weaving was not enabled or did not occur.`\r\n\r\nStatic weaving however works.\r\n\r\nThe second commit shows a possible fix as promised by the EclipseLink Documentation \"[Configuring Dynamic Weaving](https://wiki.eclipse.org/EclipseLink/UserGuide/JPA/Advanced_JPA_Development/Performance/Weaving/Dynamic_Weaving)\". The maven-surefire-plugin is configured with a second javaagent for EclipseLink. However, this doesn't work, neither. And the same warning message is produced.\r\n\r\nHow can we enable load-time-weaving with Spring and EclipseLink as this is an important fact during developing and running integration tests from within the IDE?\r\n\r\nAdditional information: I updated EclipseLink and the _eclipselink-maven-plugin_ to the latest release version.", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259117706", "body": "Sorry, didn't realize that `eclipselink.weaving` had been set explicitly to `false` in [eclipselink/Application.java](https://github.com/spring-projects/spring-data-examples/blob/master/jpa/eclipselink/src/main/java/example/springdata/jpa/eclipselink/Application.java#L68).\n\nI will update the PR to have static-weaving or load-time-weaving configurable.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259117706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "carosys": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/138", "title": "Adding Aerospike to Spring-Data-Example", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michael-simons": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/112", "title": "Issue/datacmns 669", "body": "Hello,\n\nthis is a proposal to show case the dynamic specification generation of DATACMNS-669. \n\nIt adds a AngularJS table based on [trNgGrid](https://github.com/MoonStorm/trNgGrid). If you type in something into the filter boxes, you should see the corresponding request parameter appear in the web inspector.\n\nI'm not a lombok user and i actually don't understand why username and password are constructed via embeddables. I modified Username to generate a Getter and User to unwrap the username so that i had some \"sane\" JSON delivered by the new UserRestController, which is the place where i would put the upcoming Specification parameter.\n\nAll dependencies are still managed by maven (brought in via web jars), you don't need any JavaScript build tool.\n\nThanks,\nMichael.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/281938396", "body": "So that is way I didn't manage to get SB support in IntelliJ working as good as everybody says it is. Good to know. I second @olivergierke comment, though.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/281938396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mefernandez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62901661", "body": "@thomasdarimont The project I'm working on is private, but I'll cut a slice and set up a separate public repo to test the problem.\n@gregturn I'll try to update soon; it takes a while to check everything works after upgrading `Spring Boot` ( `v1.1.5` had a bug that forced us to rollback :wink: ).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/62901661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/63363996", "body": "I downloaded this project and downgraded to `spring-boot 1.1.4`, `spring-data-commons-1.8.1` and `spring-data-jpa-1.6.1` by manually adding these dependencies in the `spring-data-jpa-example` `pom.xml`.\nI run the tests and they pass ok, so I'll have to dissect the original code base to see why it fails.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/63363996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "arghya88": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65894159", "body": "I am  sorry..I got it fixed...I was doing some mistake in datasource.....Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/65894159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marcosjunqueira": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68383834", "body": "I was trying to execute a oracle procedure with spring-data-jpa and hibernate\n\n``` sql\nPROCEDURE MY_PROC (\n    P_ID IN NUMBER,\n    P_PERIOD IN VARCHAR2,\n    P_LIMIT IN NUMBER,\n    P_CURSOR OUT T_CURSOR);\n```\n\nMyEntity.java\n\n``` java\n@NamedStoredProcedureQuery(\n        name = \"myProc\",\n        procedureName = \"MY_PROC\",\n        resultClasses = ResultEntity.class,\n        parameters = {\n            @StoredProcedureParameter(mode = ParameterMode.IN, type = Long.class),\n            @StoredProcedureParameter(mode = ParameterMode.IN, type = String.class),\n            @StoredProcedureParameter(mode = ParameterMode.IN, type = Long.class),\n            @StoredProcedureParameter(mode = ParameterMode.REF_CURSOR, type = void.class)\n```\n\nMyRepository.java\n\n``` java\n@Procedure(name = \"myProc\", procedureName = \"MY_PROC\")\n    List<ResultEntity> execMyProc(Long userId,String period,Long idClientLimit);\n```\n\nUsing Hibernate with JPA I had no success.\nThen I discovered that the OracleDialect did not implement all the methods needed to perform the procedure, and implemented a custom dialect.\nI was able run the procedure programmatically\n\n``` java\nStoredProcedureQuery query = entityManager.createNamedStoredProcedureQuery(\"extractWebUser\");\nquery.setParameter(1, userId);\nquery.setParameter(2, period);\nquery.setParameter(3, idClientLimit);\nquery.execute();\nList resultList = query.getResultList();\n```\n\nBut on spring-data we need to use getOutputParameterValue Method instead of getResultList\n\n``` java\nObject outputParameterValue = query.getOutputParameterValue(4);\n```\n\nThen I discovered that the hibernate does not support REF_CURSOR\n\n[org.hibernate.procedure.internal.AbstractParameterRegistrationImpl.java](https://github.com/hibernate/hibernate-orm/blob/4.3.7.Final/hibernate-core/src/main/java/org/hibernate/procedure/internal/AbstractParameterRegistrationImpl.java)\n\n``` java\n...\n// we could use the Types#REF_CURSOR added in Java 8, but that would require requiring Java 8...\n...\npublic T extract(CallableStatement statement) {\n...\nelse if ( mode == ParameterMode.REF_CURSOR ) {\n            throw new ParameterMisuseException( \"REF_CURSOR parameters should be accessed via results\" );\n        }\n...\n```\n\nFinally, I moved to the EclipseLink and it worked perfectly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68383834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68391409", "body": "I was thinkin that i was doing something wrong, but not. I'll open a issue. Thanks for attention @olivergierke.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68391409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68393327", "body": "https://jira.spring.io/browse/DATAJPA-652\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/68393327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cristianprofile": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72613602", "body": "Is it planned to integrate the feature with optional return value at findone operation on\nJpaRepository<Object, Long>? A lot of thanks for your support.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72613602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72630383", "body": "Thank your for your support and for Spring Data Module, sorry for place this question to wrong place.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/72630383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ThomBrando": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94879864", "body": "Please keep in mind that it would be most helpful if the example used a database that wasn't in memory, or at least explained what changes would be needed to use it as a model for apps that don't use in-memory databases.  For those of us still on the steep part of the learning curve.  8^)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94879864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94910417", "body": "I started with an Application class that was identical to the one in the example.  There was no DataSource definition I could find, so I added the following to the Application class:\n\n```\n@Bean\npublic DataSource dataSource() {\n    JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();\n    jndiObjectFactoryBean.setJndiName(\"java:comp/env/jdbc/EEVDataSource\");\n    try {\n        jndiObjectFactoryBean.afterPropertiesSet();\n    } catch (NamingException e) {\n        System.err.println(\"Error retrieving datasource: \" + e);\n    }\n    return (DataSource) jndiObjectFactoryBean.getObject();\n}\n```\n\nI didn't get the nifty Spring Data ascii art when the app started up until I changed the Application class to extend SpringBootServletInitializer instead of JpaBaseConfiguration.  Then I'd get the nifty ascii art, but also the error message:\n\n\"NoSuchBeanDefinitionException: No bean named 'entityManagerFactory' is defined\"\n\nand that started me on the path to adding more and more bean definitions to my Application class until I gave up and submitted my comment to the thread https://github.com/spring-projects/spring-boot/issues/1268#ref-commit-59ce634\n\nThat's why I mentioned it here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/94910417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gtantachuco-pivotal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/113695209", "body": "To fix the issue add `@EnableWebSecurity` to the `SecurityConfiguration` class as described below:\n\n```\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/113695209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zachariahyoung": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137952005", "body": "That did the trick.  Thanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/137952005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JavaHelper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/149665448", "body": "Thanks for such a great answer. However I see Pageable not working properly for Next and Prev link. for various Pagination sequences. So research on that I found http://stackoverflow.com/questions/24004015/spring-data-mongodb-nearsphere-not-working-with-query-withpageable,  \n\nCould you please guide how we can tackle with these conditions ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/149665448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chidmaligi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/173392897", "body": "werwerwer\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/173392897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "crossz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/189994528", "body": "got it. thanks. when I started VPN, it works fine.....\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/189994528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ybonda": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199751499", "body": "But how is possible for a developer to use jedis spring data for cluster without care about failing nodes?\n\nIn [cluster](https://github.com/spring-projects/spring-data-examples/tree/master/redis/cluster) example I configured spring for 6 nodes (3 masters. 3 slaves). But if one of the masters is down then jedis template fails with exception. \n\norg.junit.AssumptionViolatedException: \nSeems as redis is not running at 172.31.150.113:7000.\n    at example.springdata.redis.test.util.RequiresRedisServer.before(RequiresRedisServer.java:49)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:193)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: java.net.SocketTimeoutException: connect timed out\n    at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)\n    at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)\n    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)\n    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n    at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\n    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n    at java.net.Socket.connect(Socket.java:589)\n    at example.springdata.redis.test.util.RequiresRedisServer.before(RequiresRedisServer.java:47)\n    ... 10 more\n\nCan you please explain what should I do in order to ensure that redis template will still work even if one master failed (of course it's slave became a master)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/199751499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Dreampie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200218592", "body": "http://stackoverflow.com/questions/36169988/how-can-ignore-null-value-in-spring-data , nobody help\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/200218592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/253156718", "body": "I ask you in gitter\uff0cplease help\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/253156718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "end-user": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202955200", "body": "Oh, I see.  Sorry my mistake.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/202955200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "missedone": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/203836156", "body": "thanks, good to know\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/203836156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hongyan99": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/212699119", "body": "I thought it's got to be something like that :+1: \n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/212699119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kevcgrant": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/221975774", "body": "Ah. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/221975774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Turbots": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/224271771", "body": "I have a failing example in the following repository: https://github.com/Turbots/data-jpa-preautorize-sample\nIf you go back 1 commit, there is a working example.\n\nBasically, when I autowire my CrudRepository in the main SpringBootApplication, there is some conflict in order of configurations it seems.. debugging this can be extremely confusing, but maybe that's just me :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/224271771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rwinch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/226839626", "body": "@JanStureNielsen Thanks for the detailed report!\n\nThis issue is a duplicate of:\n- https://github.com/spring-projects/spring-boot/issues/6178\n- https://github.com/spring-projects/spring-security/issues/3935\n\nThe problem only manifests when Tomcat is started because `springSecurityFilterChain` is eagerly created as described in https://github.com/spring-projects/spring-boot/issues/6178 When using a unit test, the `springSecurityFilterChain`  is properly initialized in singleton phase.\n\nInitializing the `springSecurityFilterChain` eagerly causes the following to happen:\n- The  springSecurityFilterChain to be created early\n- This requests `H2ConsoleAutoConfiguration.authenticationManager()`\n- That requests `AuthenticationConfiguration.getAuthenitcationManager()` which invokes `AuthenticationManagerBuilder.build()`\n- That invokes `BootGlobalAuthenticationConfiguration$BootGlobalAuthenticationConfigurationAdapter` which attempts to eagerly initialize any beans annotated (or meta-annotated) with `@EnableAutoConfiguration` to ensure that `globalAuthentication is initialized`\n- This initializes `Application`\n- This initializes `itemRepository`\n- 'itemRepository initializes `MethodSecurityMetadataSourceAdvisor.getAdvice()` because `itemRepository` is advised by Spring Security's Method Security\n- `MethodSecurityMetadataSourceAdvisor.getAdvice()` looks up the `methodSecurityInterceptor`\n- This initializes `GlobalMethodSecurityConfiguration.methodSecurityInterceptor()`\n- `methodSecurityInterceptor()` calls the `authenticationManager()` \n- Finally `authenticationManager()` invokes `AuthenticationConfiguration.getAuthenticationManager()' which calls`AuthenticationManagerBuilder.build()` again.\n\nSo we have a Bean Cycle that is stopped by Spring Security detecting that  `AuthenticationManagerBuilder.build()` has already been invoked. Instead of a Bean Cycle, it reports an `ObjectAlreadyBuiltException`\n\n@olivergierke - I'd recommend closing this issue as a duplicate of https://github.com/spring-projects/spring-security/issues/3935 (this alone will fix the issue)\n\nIf you want to ensure you have a test that behaves as it does when running you probably need an integration test (at least until https://github.com/spring-projects/spring-boot/issues/6178 is fixed)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/226839626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229551344", "body": "Thanks @philwebb \n\nI have considered changing the logic to eagerly initialize only configuration classes that have an with `@Autowired` methods that take a AuthenticationManagerBuilder but was hesitant because:\n- Didn't want to try and implement the logic to determine if autowire was going to happen on the method. Perhaps this is as easy as checking if `@Autowired` exists, but hadn't looked into that\n- Was concerned about iterating over all bean definitions. This probably isn't really an issue, but again no time to investigate\n- I'd have to load the bean class from a string so as not to initialize the wrong classes and was concerned a bit about classloading issues\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229551344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "philwebb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229550405", "body": "I've made an update to Spring Boot 1.4 that appears to fix the issue as long as the `configureGlobal(AuthenticationManagerBuilder auth)` is moved to a `@EnableWebSecurity` annotated configuration.\n\nMy fork of the sample is [here](https://github.com/philwebb/data-jpa-preautorize-sample/tree/spring-boot-6178). @rwinch Could you review and see if it makes sense?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229550405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229550694", "body": "On a related note, since the security docs state:\n\n>  it is important to only configure AuthenticationManagerBuilder in a class annotated with either `@EnableWebSecurity`, `@EnableGlobalMethodSecurity`, or `@EnableGlobalAuthentication`\n\nI'm wondering if Spring Boot could register a `BeanDefinitionRegistryPostProcessor` to check that `@Configuration` classes with `@Autowired` methods that take a `AuthenticationManagerBuilder` fail hard if `@EnableWebSecurity`, `@EnableGlobalMethodSecurity`, or `@EnableGlobalAuthentication` are missing?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229550694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229552207", "body": "Perhaps a simpler option is just to change the exception message in:\n\n```\nCaused by: java.lang.IllegalStateException: Cannot apply org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer@6e9a10cd to already built object\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.add(AbstractConfiguredSecurityBuilder.java:195) ~[spring-security-config-4.1.0.RELEASE.jar:4.1.0.RELEASE]\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.apply(AbstractConfiguredSecurityBuilder.java:132) ~[spring-security-config-4.1.0.RELEASE.jar:4.1.0.RELEASE]\n    at org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.apply(AuthenticationManagerBuilder.java:290) ~[spring-security-config-4.1.0.RELEASE.jar:4.1.0.RELEASE]\n    at org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.inMemoryAuthentication(AuthenticationManagerBuilder.java:134) ~[spring-security-config-4.1.0.RELEASE.jar:4.1.0.RELEASE]\n    at com.example.DataJpaPreAuthorizeApplication.configureGlobal(DataJpaPreAuthorizeApplication.java:26) [classes/:na]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_40]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_40]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_40]\n    at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_40]\n    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:681) ~[spring-beans-4.3.1.BUILD-SNAPSHOT.jar:4.3.1.BUILD-SNAPSHOT]\n    at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.1.BUILD-SNAPSHOT.jar:4.3.1.BUILD-SNAPSHOT]\n    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:349) ~[spring-beans-4.3.1.BUILD-SNAPSHOT.jar:4.3.1.BUILD-SNAPSHOT]\n    ... 17 common frames omitted\n```\n\nTo hint that missing `@EnableWebSecurity`, `@EnableGlobalMethodSecurity`, or `@EnableGlobalAuthentication` annotations are a common cause?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/229552207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "luowenqiang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240890052", "body": "Sorry, I was wrong,not add \"Spring Milestones\" repository.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240890052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240891535", "body": "added \"Spring Milestones\" repository to resolved this problem\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/240891535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marskobe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/241346481", "body": "ok, thank you\n\nThe question is almost the same as \nhttp://stackoverflow.com/questions/21166580/spring-data-mongodb-querydsl-dbref-exception\n\nCan you help me solve the problem? thank you very much.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/241346481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "damozhiying": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259606832", "body": "this init project is in https://github.com/monkeylittle/spring-jpa-inheritance\nthis only diff is i change the user.java (@Inheritance(strategy=InheritanceType.JOINED)) ,because sometime we need only to get the super entity info ,sometime we need the full info \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259606832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259607121", "body": "i think there should expose a inteface for user to mapper the resultset t entity,or we can intercept after query finished,but in jpa there only intercept the insert,update ,delete,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/259607121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "berrytchaks": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262821379", "body": "@olivergierke Thanks for the reply. Sorry but I have tried **@ElementCollection** but it giving some exception. Anyway I will post on StackOverflow. Sorry for the inconvenience.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/262821379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ecocarlisle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/268012985", "body": "Lombok is throwing and error and following the Maven plugin instructions is not working for me - unable to find the package lombok.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/268012985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lubosek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/270323994", "body": "Hi, thanks for the example but to be honest I still don't get how the magic happens that the client is able to parse HAL body. RestTemplate has some default message converters registered but AFAIK the one for HAL is not among them and I don't see any code that adds it. :-(", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/270323994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wangyulin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/274522448", "body": "no change.  before i only run this 'findByFirstnameOrLastnameUsingSpEL' test case, is exception,but there is no way to reappear this mistake.  close this issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/274522448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mhewedy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/280998294", "body": "What about Mapping result sets as well?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/280998294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rufusraja": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/284549465", "body": "query.setParameter(1, userId);\r\nquery.setParameter(2, password);\r\nsetParameter(1,*); needs to be altered to(1, userName); for clarification purpose", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/284549465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ZeroGraviti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/287991608", "body": "It was roughly based on the jpa21 example. Some pointers/hints would help.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/287991608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288072932", "body": "If it is not too much trouble can you let me know if oracle stored procedures returning VARRAY are supported or planned to be supported ?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288072932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hellocomrade": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288426201", "body": "@schauder \r\n\r\nThank you for the explanation! I read the section of Bean Scopes and still felt vague that applying @Qualifier with an entityManagerFactory name on an EntityManager will actually  \"scoped-proxy\" it to request scope plus auto-close feature... :) \r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/288426201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pivotal-issuemaster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/291548862", "body": "@alb-i986 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=270)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=270) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/291548862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299052591", "body": "@chan71 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=272)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=272) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299052591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299053187", "body": "@chan71 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=272)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/299053187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/310640696", "body": "@KotMeow Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=281)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=281) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/310640696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/338614659", "body": "@totothekiller Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=310)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=310) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/338614659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/338614942", "body": "@totothekiller Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=310)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/338614942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/360988427", "body": "@alb-i986 This Pull Request contains an obvious fix. Signing the Contributor License Agreement is not necessary.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/360988427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/360989032", "body": "@alb-i986 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=336)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=336) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/360989032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/360989066", "body": "@alb-i986 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=336)!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/360989066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "harshavmb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305436188", "body": "I saw the error when running the actual code. Just ran it with \r\n\r\n> mvn spring-boot:run command. \r\n\r\nActually, I didn't clone the project. Have created my own spring-project and copied the code. I didn't get \r\n\r\n> Because the pom.xml of the root project specifies compilation with -parameter which should take care of this issue.\r\n\r\nCould you please elaborate? Sorry, am not that good at spring and maven, question might sound silly!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305436188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305441921", "body": "Aww..!! Thanks. Saw the \r\n\r\n> compilerArgument\r\n\r\ntag. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/305441921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "monrealis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308834211", "body": "The problem is that equality and hash code is based on all fields, not on id alone. But it should be based on id if it is filled, as you can see from my example. There's no difference if it is so because of hand coded, inherited, or generated equals() and hascCode() methods.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308834211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308878659", "body": "There are good books regarding this topic: \"Domain-driven design\", \"Patterns of Enterprise Application Architecture\", .... I wonder if you could name a single book that would recommend that a class similar to Customer included all fields in its equality check. By the way, https://martinfowler.com/bliki/EvansClassification.html has a `Customer` example.\r\n\r\nAccording to DDD, entities are defined by a thread of continuity and identity. You would normally want to know if an order came from the same customer, even though some data in that customer has changed. If a customer revision 1 spent 100 and that same customer revision 2 spent 1000, you would want to know that that customer spent 1100 in total, despite someone has updated one of his 100 fields for any reason (possibly event without a business reason). Database ID is a good candidate to identify and entity, because it never changes. If there were other fields, that identify entity and do no change over time, they would be valid for equality check (even more valid than ID, since ID is usually generated only when persisting object to database). But using ID is much easier, you don't have to think much, and you can uniformly apply the pattern. If there's no database, it's hard, you have to invent unique fields in every class.\r\n\r\nBy the way, maybe a customer has some collection of objects, and each of their objects have their own collections. In such a case you would be comparing whole graphs of objects, possibly with cycles in references. And by the way, hash code has to match equals logic too, you would have to walk that graph to get the hash code. If there's a cycle, you are in trouble (check this https://gist.github.com/monrealis/3763f909eeeef34df27b82f6e27a25a1).\r\n\r\nEven if `@Data` allows the fields to be specified, they weren't specified. It would be OK, if ID were specified, but it isn't.\r\n\r\nThanks for the link to \"Spring Data Envers\", I will look at it, but it is not related to this issue.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/308878659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309580822", "body": "Thanks! We will avoid the risk that someone copies the example to their own project without considering too much what `equals()` and `hashCode()` gets generated with lombok `@Data` annotation.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309580822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319814104", "body": "A small update: there's a course on Pluralsight called \"Domain-Driven Design Fundamentals\" and there's a chapter called \"Eric Evans on the entity equality\". He does not like `equals()` methods in entities at all. But the demo goes on with `equals()` based on ID for entities (in the next chapter). By the way, class under consideration is surprise surprise `Customer` (the most popular concept in programming?).", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/319814104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "arashkhalesi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309607837", "body": "Hi Oliver,I am trying to SELECT specific column by \u00a0JPA specification , The column has @ManyToOne \u00a0to the owner (Master)\nMaster --> 1:N \u00a0 detail\u00a0Detail \u00a0 M:N \u00a0 Master\u00a0\n\nI cannot use Named Query since I have a lot of condition to check so the CriteriaBuilder is the only option I have\u00a0basically I query.multiselect with 1 element only but \u00a0this is not working at all\u00a0\nParameter value [org.springframework.data.jpa.domain.Specifications@4ac10478] did not match expected type [java.lang.String (n/a)]\n\n\ni am sure there is a issue with naming \"findMasterByEventByIdAndByName()\"\u00a0\nI would appreciate to let me know if there is any solution for this.\u00a0\nI am using Spring-boot,\u00a01.5.2.RELEASE\n@Entity@Table(name = \"master\")public class Master {\u00a0 \u00a0 @Id\u00a0 \u00a0 @Column(name = \"master_id\")\u00a0 \u00a0 private Integer id; \u00a0 \u00a0 @OneToMany(mappedBy = \"masters\", fetch = FetchType.EAGER)\n\u00a0 \u00a0 private List<Detail> details= new HashMap<>();}------------------------------------------------@Entity@Table(name = \"detail\")public class Detail {\u00a0 \u00a0 @Id\u00a0 \u00a0 @Column(name = \"detail_id\")\u00a0 \u00a0 private Integer id \u00a0 @ManyToOne(name=\"event_id\")\u00a0 \u00a0 @JoinColumn(name = \"name\")\u00a0 \u00a0 private Event event;\n\u00a0 \u00a0 @ManyToOne\u00a0 \u00a0 @JoinColumn(name = \"master_id\")\u00a0 \u00a0 private Master master;}--------------------------------------------------public interface DetailsRespository extends JpaRepository<Detail, Serializable>, JpaSpecificationExecutor<Details> { Page<Master> \u00a0findMasterByEventByIdAndByName(Specification<> specs,Pageable pageable);}\n\u00a0public Predicate toPredicate(Root<Detail> root, CriteriaQuery<?> query, CriteriaBuilder cb) {\n\u00a0 \u00a0 \u00a0 \u00a0 if (criteria.getOperation().equalsIgnoreCase(\"join\")) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Join<Detail, Master> master = root.join(\"master\", JoinType.INNER);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 List<Selection<? extends Master>> selectionList = new ArrayList<Selection<? extends Object>>(); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Selection<? extends Master> selection = root.get(\"master\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 selectionList.add(selection);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query.multiselect(selectionList);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query.distinct(true);\n\u00a0Thanks\u00a0\nAra \n\n    On Monday, June 19, 2017 3:55 AM, Oliver Gierke <notifications@github.com> wrote:\n \n\n \u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.  \n\n   ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/309607837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vishnudevk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/313721929", "body": "This issue is still there, anyone has any luck on this?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/313721929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "petermykytyn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/316045633", "body": "i ran into the same issue and i think its not possible with querydsl api\r\nhttps://jira.spring.io/browse/DATACMNS-704\r\nyou have to create your own method that converts iterable to stream if you insist on using stream", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/316045633/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ishaikovsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/328632841", "body": "Is this even possible at all *without* using EM directly? ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/328632841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alanhugo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/328979795", "body": "@alterhu2020 you managed to solve it with @procedure ??", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/328979795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "benson0217": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/329036912", "body": "Hi Oliver, \r\n    thanks a lot for your answer.\r\nby the way , if i use the method in example like\r\n`\r\n@Query(\"select new example.springdata.jpa.projections.CustomerDto(c.firstname) from Customer c where c.firstname = ?1\")\r\n\tCollection<CustomerDto> findDtoWithConstructorExpression(String firstname);\r\n` \r\n\r\nIs it possible to achieve this effect?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/329036912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "PawelJagus": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330037201", "body": "To reproduce please unpack the attached *.zip file, import the project into an STS workspace and run the JUnit test PlayerStatisticsRepositoryTest.\r\n[demo.zip](https://github.com/spring-projects/spring-data-examples/files/1309037/demo.zip)\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/330037201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/331061482", "body": "Thanks for all the hints. Switching off the logging for `SpelExpressionStringQueryParameterBinder` solves the problem.\r\n  ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/331061482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/355791463", "body": "@mostafaarefaat I added the following line to my `application.properties` file.\r\n\r\n    logging.level.org.springframework.data.jpa.repository.query.SpelExpressionStringQueryParameterBinder: OFF", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/355791463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "marceloverdijk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332164406", "body": "No problem.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332164406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332748433", "body": "No worries that they won't be merged, I'm just using them to showcase the bug.\r\nBut indeed just cloning the repository and pointing it to is enough, I will skip the PR part next time :-).\r\nI guess for this particular issue [this](https://github.com/marceloverdijk/spring-data-examples/tree/dynamic-projection-with-specification) branch on the cloned repo is enough for now to help?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/332748433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "awaisraad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/341336390", "body": "There is already an example in Spring Boot examples section.\r\n\r\nCheck it out:\r\nhttps://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-jooq", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/341336390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "lgirma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/343083330", "body": "Same issues here. Is it going to be solved anytime soon?\r\nOr any workarounds?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/343083330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hellozjf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/349555429", "body": "Ok, after I installed lombok, it's ok now.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/349555429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mostafaarefaat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/355785633", "body": "@PawelJagus I have the same issue with spring boot 1.5.9 could you help me how it work with you by example", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/355785633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dagi12": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/362188941", "body": "Any updates on this?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/362188941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sedooe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/364122215", "body": "I investigated this a bit and looks like currently Spring Data does not support returning a ResultSets from a stored procedure.\r\n\r\nIt all starts with the absence of **OUT** parameter which causes the following exception in **StoredProcedureAttributeSource**:\r\n \r\nhttps://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/query/StoredProcedureAttributeSource.java#L116\r\n \r\nwhich causes to fallback **createStrategy** in **JpaQueryLookupStrategy**:\r\n \r\nhttps://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategy.java#L208\r\n \r\nwhich ends up with the exception in this issue: _No property renameMethodName found for type User!_\r\n \r\nSo, if I understand the behavior correctly, we should not fallback to **createStrategy** in this case. Therefore, we need to change the condition in **StoredProcedureAttributeSource**, like:\r\n \r\n_if (outputParameters.size() > 1 && !void.class.equals(method.getReturnType())) {_\r\n \r\nThis will help us to bypass the current exception but there will be other problems after executing stored procedure and extracting the output.\r\n \r\nThe reason is that:\r\n \r\nhttps://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/query/StoredProcedureAttributeSource.java#L132\r\n \r\nIn here, we have correct **outputParameterType** after changing the condition as I described above but **outputParameterName** is still null which causes the wrong decision here:\r\n \r\nhttps://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/query/StoredProcedureJpaQuery.java#L121", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/issues/comments/364122215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cordin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14683403", "body": "Nice addition, allowing for optimized JPA queries and easily mapped ValueObjects. I like very much the dynamic projection methods, so you can have many different ValueObjects for different views of the same data without polluting your repository methods.\n\nOne question about the implementation. With the following two methods, the JPA generated query would be the same one?\n\n``` java\nCollection<CustomerProjection> findAllProjectedBy();\n\n@Query(\"select c.firstname as firstname, c.lastname as lastname from Customer c\")\nCollection<CustomerProjection> findsByProjectedColumns();\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14683403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14686186", "body": "Thanks for the information!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/14686186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "vaibhavkewl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18372735", "body": "@olivergierke Hi,\nThis is really very cool. I am wondering about the possibility of using projections in a repository method like this : \n`<T> Collection<T> findByFirstname(String firstname, Class<T> projection);`\n\nI tried to use the SpEL in the projection interface because I have nested properties, like Customer has Address. And in the projection I want to return one of the property of Address as well along with other properties of Customer. When I test this, I see that all the fields are loaded or basically the entire entity is loaded and mapped to the projection. This is not really what I wanted. Is it possible to load only the fields which are specified? How can I load the nested properties (from the related entity) without using SpEL?\n\nI see that whenever we use SpEL in projections the entire entity is loaded, even if I do something like:\n`CustomerProjection findByFirstname(String firstname);`\nwhen the CustomerProjection uses one of the property from Address entity.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18372735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18375503", "body": "Ok, so if I understand correctly the projection interface without SpEL can be used only for loading the properties of the same/owning Entity. I can not load the properties of a related entity without SpEL (like Customer -> Address). \nDo you think if it can be a possible improvement/fix in the coming releases to load the projection interfaces for a query like following without loading the entire Customer and Address entities.\n`Select c.firstName, c.lastName, a.postNumber from Customer c left join Address a on ....`\n\nAnd corresponding projection interface could be like this (without SpEL):\n`public interface MyInt {\n String getFirstName();\n String getLastName();\n String getAddressPostNumber();\n}`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18375503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18386979", "body": "Hi again,\nI still feel the use case is relevant (as an improvement in Projections) and would be broadly required by many users. However as you mentioned I shall register a JIRA ticket, along with the detailed description.\nThanks for the prompt response :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18386979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "edwardbeckett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18599838", "body": "@olivergierke Does the `@Query select new ...CustomerDto` on `findDtoWithConstructorExpression(...)` automatically create a `CustomerDto` on each invocation? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/18599838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "igor-dmitriev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20451744", "body": "Hi @olivergierke, sorry for bothering you, but you use @Data annotation for your Customer entity and this is an issue, cause in your case it's ok there are no entity-relationships (eg. @OneToMany, @OneToOne and so on). As you know @Data = @Getter + @Setter + **@RequiredArgsConstructor** + @ToString + **@EqualsAndHashCode**. It hides @EqualsAndHashCode, I think this is a tricky stuff. In this case equals and hashCode will be based on all fields, it's a disaster for LAZY fields and bidirectional associations, many sql queries will be triggered as soon as you invoke equals or hashCode, it's all for performance sake. In case of bidirectional association you will catch a StackOverflowError. As you are an well known and experienced engineer - you are an example for many developers. I don't recommend you to use it. I saw many times how developers used this annotation and what happened after. I am sure that many developers look at your example right now and they find your mapping as an example, especially junior ones. Thank you.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20451744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20456467", "body": "@olivergierke I see, but I would not do that. Unfortunately many developers don't understand that. No offence, just my experience.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/comments/20456467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jexp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38635815", "body": "They are needed for the in-memory server, and test-jar dependencies are not resolved transitively by maven :(\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38635815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38638122", "body": "Actually we can clean it up a bit, which I did here: https://github.com/spring-projects/spring-data-examples/pull/130\n\nWe can add an (JIRA) issue for a separate test module both in the `neo4j-ogm` and in `spring-data-neo4j-4`, should be pretty straightforward to add, not sure we can make it in time for 4.0.GA though?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38638122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38646529", "body": "@olivergierke does this pom make more sense? (until those test modules are available?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-data-examples/pulls/comments/38646529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}