{"_default": {"1": {"barvepan": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/177", "title": "Inbound poller breaks when file gets modified while reading", "body": "we have a use case,  where we are reading the file from windows remote location with the following steps:\r\n\r\n1. Read file from windows share location say input folder.\r\n2. Usually files are very large in size ( > 100mb ) and poller takes time to download it.\r\n3. When poller is downloading files, and at the same time if user updates/modifies ( copy & paste the same file ) the source file then poller breaks and moves to next step in flow with half downloaded file.\r\n\r\nPlease see this link for more details http://stackoverflow.com/questions/43389062/spring-integration-inbound-poller-breaks-when-file-gets-modified-while-reading?noredirect=1#comment74369732_43389062", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/158", "title": "SMPP: Autoreconnect doesn't work", "body": "I try to see if the reconnection to the server works, so I kill my smpp server and restart it.\nthe client never manage to restore the connection.\n\nsee the log :  \n17:52:57 INFO  o.j.s.AbstractSession - executeSendCommand\n17:52:57 INFO  o.j.s.AbstractSession - commandID:80000015 status:00000000 sequence:16\n17:53:02 INFO  o.j.s.AbstractSession - EnquireLinkSender.run() send\n17:53:02 INFO  o.j.s.AbstractSession - executeSendCommand\n17:53:02 INFO  o.j.s.AbstractSession - commandID:80000015 status:00000000 sequence:17\n17:53:07 INFO  o.j.s.AbstractSession - EnquireLinkSender.run() send\n17:53:07 INFO  o.j.s.AbstractSession - executeSendCommand\n17:53:07 INFO  o.j.s.AbstractSession - commandID:80000015 status:00000000 sequence:18\n17:53:09 WARN  o.j.s.SMPPSession - IOException while reading: null\n17:53:09 WARN  o.j.s.AbstractSession - closing enquireLinkSender Thread[EnquireLinkSender: org.jsmpp.session.SMPPSession@7b3dd80d,5,main]\n17:53:09 WARN  o.j.s.AbstractSession - closing enquireLinkSender alive:true daemon:true interrupted:false\n17:53:09 INFO  o.j.s.AbstractSession - JOINED!!!\n17:53:09 WARN  o.j.s.AbstractSession - closing enquireLinkSender Thread[EnquireLinkSender: org.jsmpp.session.SMPPSession@7b3dd80d,5,]\n17:53:09 WARN  o.j.s.AbstractSession - closing enquireLinkSender alive:false daemon:true interrupted:false\n17:53:09 INFO  o.j.s.SMPPSession - PDUReaderWorker stop\n17:53:16 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:53:23 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:53:46 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:53:53 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:54:16 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:54:23 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:54:46 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:54:53 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:55:16 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:55:23 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:55:46 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:55:53 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:56:16 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n17:56:23 ERROR o.s.i.s.s.SmppSessionFactoryBean$AutoReconnectLifecycle - Error happened when trying to connect to localhost:20775. Cause: Failed connecting\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "artembilan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/11b8990daf76c36481cb70b2bed3df87edd11547", "message": "Polishing catch block in the LeaderInitiator"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f9c7cccf7572e70b8bf47d909047919299651903", "message": "GH-183: Fix lifecycle issues in the LeaderInitiator\n\nFixes https://github.com/spring-projects/spring-integration-extensions/issues/183\n\n* Replace `Thread.sleep(Long.MAX_VALUE);` in the `LeaderSelector` main\nloop with the `heartBeatMillis` to `tryLock` against the Hazelcast\nperiodically\n* Add `busyWaitMillis` timeout in case of lost leadership or exception\nfrom the Hazelcast\n* Resubmit `LeaderSelector` in case of any exception exception\n* Upgrade to the Hazelcast-3.8.9 and SI-4.3.14"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e03e6e553e76522e9a0e685ebad9156579866fd0", "message": "Document `HazelcastLockRegistry`"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/01184c1304fc62655f4bb7aa0d4367afee1b6a8a", "message": "Add HazelcastLockRegistry implementation"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5511987be258e6f7dbc3818237b059a832a92e7b", "message": "GH-172: Do not require local HZ instances\n\nFixes spring-projects/spring-integration-extensions#172\n\nSince we can have an application based on the `HazelcastClient`, we don't need to require `Hazelcast.getAllHazelcastInstances()` be presented.\n\n* Rework `HazelcastLocalInstanceRegistrar` to be able to accept external `HazelcastInstance` for `MultiMap` and `MembershipListener` registration\n* If there is on local `Hazelcast.getAllHazelcastInstances()` just log a warn that we can't register `MembershipListener`\n* Allow for `AbstractHazelcastMessageProducer` to accept events in the `CacheListeningPolicyType.SINGLE` mode when there is no local `Hazelcast.getAllHazelcastInstances()`"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/6474ce9bb6d992739d69237043ddb23035a86a54", "message": "Upgrade to Gradle 4.0 and Checkstyle 8.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/deeeccc40b9a555ce1788adea6275e1781cd2f9c", "message": "GH-160: Optimize UnZipResultSplitter\n\nFixes spring-projects/spring-integration-extensions#160\n\n* Upgrade to `zt-zip-1.11`\n* Polish README a bit"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/6f1b2babf6eaf63de9788f69f7db540d0beaf9ed", "message": "Upgrade to Gradle 4.0 and SI-4.3.10"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/cfc8184993d2d6b2ee36e10f96297ff4031b65e3", "message": "GH-173: Leaders: Warn event errors, not re-throw\n\nFixes GH-173 (https://github.com/spring-projects/spring-integration-extensions/issues/173)\n\nCurrently when an error is thrown from the event publishing the role granting is broken and we just go to the role revoking.\n\n* Since it's just an event publishing it shouldn't effect the original leader election.\n* `try...catch` event publishing in the `LeaderInitiator` and `logger.warn` an `Exception`"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4472a87e9c1264e50a1e3aacd061e0db19a984a8", "message": "Fix `LeaderInitiatorTests` race condition\n\nhttps://build.spring.io/browse/INTEXT-SIH1-10\n\nWhen `LeaderInitiator` yields its leadership there is a good chance that it will obtain it back, so there is no guaranty that it isn't leader after revoking"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/6e7b4cfcc72c39b100d93213665112b05668b5ff", "message": "GH-169: Upgrade and prepare for release\n\nFixes GH-169 (https://github.com/spring-projects/spring-integration-extensions/issues/169)\n\n* Upgrade Gradle and dependencies\n* Apply Checkstyle"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/1f5dbaab558ee08520df70947e94f85e3a37719b", "message": "SMB: Polishing XSD according latest SI"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0c7063588ccb735e10d9887e30b5b6539284dbca", "message": "GH-168: Upgrade to SI-4.3.6 and others\n\nFixes GH-168 (https://github.com/spring-projects/spring-integration-extensions/issues/168)"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f4990eebd8ede4d2aa4e65766bd5e2fa067129d9", "message": "Downgrade to Gradle 2.14\n\nNeither Bamboo (Artifactory Gradle), nor Spring IO plugin supports Gradle 3.x"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/9a13e41d9607517f978afdca4fa55f11a925ab4e", "message": "GH-164: Fix `ZipTransformer` `deleteFile` Mode\n\nFixes GH-164 (https://github.com/spring-projects/spring-integration-extensions/issues/164)\n\n* Move `deleteFile` logic to the end of of `ZipTransformer#doZipTransform()`\n* Add `deleteFile = true` for the `ZipTransformerTests`\n* Add `<request-handler-advice-chain>` to the transformers XSD definitions\n* Upgrade to Gradle 3.0\n* Upgrade dependencies\n\nMove delete logic before reply message creation"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7e0443d34bf4da296ea0a28a232c8581875ebd72", "message": "Some upgrades and polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/cd37ecae9a46fb94dce9dcf1e5296929cb349d67", "message": "ZIP: More Polishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0a5fedcd7a67f9cc36f99a1dc9fa06c300f0b787", "message": "Zip: Some deep cleanup and polishing\n\n* Upgrade to Gradle-2.5, SI-4.2.4\n* Remove redundant dependencies\n* Add `slf4j-log4j12` to avoid log noise during testing\n* Add `settings.gradle` to allow Artifactory Release Management\n* Move XSD stuff to the proper place - `org\\springframework\\integration\\zip\\config`\n* Get rid of manual `enum` transformation in the `Parser`:\n  - we can't do that there because `property-placeholder` and SpEL are processed later\n  - no reason to do that at all - `enum`s are properly converted by the SF during bean population phase\n* Fix `UnZipTransformer` to `delete()` file in the `finally` block after closing the `InputStream` on file"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/2e9247711d72959dc1a3509451bd377e34ec1c29", "message": "INTEXT-195: Add XMPP Extension for Smack 4.1\n\nJIRA: https://jira.spring.io/browse/INTEXT-195\n\nUpgrade to Smack 4.1\n\nRework logic to the `XMPPConnection` interface\n\nRefactoring for the `XmppConnectionFactoryBean` to extract `serviceName` from the `user`.\n\nRemove redundant dependencies\n\nAdd `smack-java7` dependency and some other polishing after testing\n\nPolishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0867be2faf8ddabeef6549a854e7d9ed22c0aba7", "message": "Upgrade to SI-4.2.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5c136e45c967da58c165db3ebf553035a21dc4f4", "message": "Cassandra: Compatibility with IO-2.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/8f45e1caec529b83c91defcc3e396f7f2c64205d", "message": "Hazelcast: Compatibility with IO-2.0\n\n* Add IO plugin\n* Upgrade to Gradle 2.4\n* Upgrade dependencies\n* Upgrade to Hazelcast-3.5 and therefore make compatible with IO-2.0\n* All these changes and tests make this module compatible with SI-4.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/6747b0605f21df62c2a066f53d5d56dc89e8f841", "message": "Cassandra: polishing before release"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/2bcd54cfba6b19e9b762c09ac59225c1d9b6c95c", "message": "INTEXT-50: Cassandra Adapter Improvements\n\nJIRA: https://jira.spring.io/browse/INTEXT-50\n\nMore improvements\n\n`Void` returns handling"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/20d0192fc0b476be9b0a107721288e27009a237b", "message": "INTEXT-163: Add JT400 Module\n\nJIRA: https://jira.spring.io/browse/INTEXT-163"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4ed2153a45db968a0a739464137856f998e7dbfe", "message": "INTEXT-161 Add `<poller>` to the `<int-hz:o-c-a>`\n\nJIRA: https://jira.spring.io/browse/INTEXT-161"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/fddd7e47b4f179d31c2910548da1a63a737a48e2", "message": "INTEXT-122: Make XSD versionless from SI-core XSD\n\nJIRA: https://jira.spring.io/browse/INTEXT-122\n\nFix for SMPP. All other extensions will be fixed on demand, when they will be upgraded to SI 4.0 or higher"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/05b7f39f397174a84b5504993cd77be48e9a1a74", "message": "Move AWS to separate repo"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/3268e0a2f798ce3f6d5b5cbb3c609691391cdc06", "message": "Move `Kafka` to the separate repo"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/6b37a400d928344aa9fed3260ca539cc4e892a34", "message": "Move Splunk to the individual repo"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ecd539d1dcbface9800aa7312b0640a3e992babc", "message": "DSL: Move Java DSL to the separate repo"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b8d986167c1c242461f23968bda1d70173f620e2", "message": "DSL: O-Gs: `requiresReply=\"true\"` by default\n\nSince many `outbound-gateway`s are designed to always expect replies and XML configuration\nspecifies `requires-reply=\"true\"` for them by default, the DSL should follow with that."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/57caf41fb298271dfe4728b38849c0f5702243ba", "message": "DSL: Use generic `AppListener` from`IntFlowBPP`\n\nhttps://build.spring.io/browse/INTSAMPLES-NIGHTLY-JOB1-1189\n\nSince `spring-integration-even` is optional dependency, the usage of `ApplicationEventListeningMessageProducer` is wrong.\nChanging it to the generic `ApplicationListener` doesn't hurt for any inline components from Flow definition, when there is an interest to handle Events."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/a04cdbf77f406ed669d71befac5cb1fe652ce9db", "message": "DSL: Register `AELMP` as `AL` in the `AEM`\n\nRegister `ApplicationEventListeningMessageProducer` as `ApplicationListener` in the `ApplicationEventMulticaster`\n\nSince `ApplicationContext` invokes its `registerListeners()` before the `IntegrationFlowBeanPostProcessor` does its stuff,\nthe `ApplicationEventListeningMessageProducer` hasn't been visible as an `ApplicationListener` bean, when it is defined from `IntegrationFlow`,\nhence add a logic to register it to the `ApplicationEventMulticaster` from `IntegrationFlowBeanPostProcessor`."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/13ea2d9111c89c25bda2723e12935edce3348886", "message": "DSL: Fix `RouterSpec` for several subflows\n\nThe root of the issue is the order of bean registration in the beanFactory.\nIn this case the first subflows is registered correctly, but the next one has been registered after `RouterSubFlowMappingProvider`.\nIn this case the input `channel` of the next subflow hasn't been registered yet, hence `NPE` in the `this.router.setChannelMapping`\nfrom `@PostConstruct` of `RouterSubFlowMappingProvider`.\n\nMove the `RouterSubFlowMappingProvider` to end of `componentsToRegister` collection to give a chance to register all subflows before the `RouterSubFlowMappingProvider`."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c3477801e6eae389c3b3065ce8e8b8b7074c2574", "message": "DSL: `.gateway()` SubFlow support"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e6af7f7ebac3479fcd24202976c6828b0d0bf4dd", "message": "DSL: RecipientListRouter: Add SubFlow support"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/be9767b8a9c7ac4c26e0f9c1c1cdb63b7665a361", "message": "DSL: Introduce `SubFlow`s\n\nAdd `subFlow` support for `router`s\nMove some tests to separate domain classes\nFix some component registrations\n\nDSL: Fix `SubFlow` registration according PR discussion\n\n* Add IO plugin\n* Fix SI 4.0 <-> 4.1 compatibility by `springIoCheck` results\n* Further divide for tests to separate domain classes\n\nDSL: Add `discardFlow` to the `.filter()`\n\nMake `.router()` `subFlow`s as `always return to the main flow`\n\nAdd `.publishSubscribeChannel()` EIP-method with `.subscriber()`\n\nto specify subscribers as `subFlow`s\n\nPolishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/74102a022daf95fea2b06cff8de0ccdad41bf711", "message": "DSL: Fix package tangles"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4005ff874dd5b26c8f3b56a03b0f7dbaecd996a0", "message": "Java DSL: Introduce `FunctionExpression`\n\nAdd support for `FunctionExpression` and apply it alongside with `expression`, where it is possible\nFor example:\n```\n.enrich(e -> e.requestChannel(\"enrichChannel\")\n\t\t.requestPayload(Message::getPayload)\n\t\t.shouldClonePayload(false)\n\t\t.<Map<String, String>>headerFunction(\"foo\", m -> m.getPayload().get(\"name\")))\n```\nRemove redundant functional interfaces in favor of `Function`\n\nFunctionExpression: Add JDBC Splitter sample\n\nMinor Polishing to FunctionExpression\n\nFunctionExpression: JavaDocs"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/cab77b5e764988d79311cc64e8b1511a2ecee515", "message": "Java DSL: Lambdas for Namespace Factories\n\n* Add `Function` and `Consumer` copies from Java 8\n* Rework some functional interfaces to `Function` or `Consumer`\n* Introduce `Channels`, `MessageHandlers`, `MessageProducers`, `MessageSources`, `MessagingGateways`\n- some convenient wrappers for Namespace Factories to be used from Lambdas\n* Add Lambda-methods for those new wrappers\n* Provide some refactoring\n* Upgrade to Boot `1.1.7`\n\nJava DSL: Lambda_Factories\n\n* Change all `IntegrationFlows` methods to `.from()`\n* Introduce internal `Function<?, ?>` extensions for particular cases, e.g. `MessageSourcesFunction`.\nNow end-user has to cast Lambda parameter to concrete type to get desired factory, e.g.:\n```\nreturn IntegrationFlows.from((MessageProducers mp) -> mp.imap(\"imap://user:pw@host/INBOX\"))\n```\n* rename `.fromFixedMessageChannel` to `.from()` with additional boolean flag\n* Introduce `PollerFactory` Lambda for `.poller()` EIP-method on `EndpointSpec`\n* Move `Pollers` stuff to the `.core` package to fix package tangle\n* Refactoring for some code style\n* Fix some typos"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/db05476acf11d608098a14ff56caee1423a17397", "message": "Fix some ChannelName Late Resolution\n\nPolishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ff4a229bc5c2d320c1da1dc5fe6429bd27100547", "message": "INTEXT-114 Fix outputChannel population AOP issue\n\nJIRA: https://jira.spring.io/browse/INTEXT-114"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/eb5456f9d702ed519e843975ac5ce5932fbc6b87", "message": "Upgrade to SI 4.0.4 and Boot 1.1.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/2ff83c61d975614e6919d21bad804acd3b251090", "message": "INTEXT-113: Make `.route()` as non-last component\n\nJIRA: https://jira.spring.io/browse/INTEXT-113\n\nPreviously `router` could be configured only as last component in the `IntegrationFlow` definition.\n\n* Remove `defaultOutputChannel` options from `AbstractRouterSpec`\n* Populate `outputChannel` to the `AbstractMessageRouter.defaultOutputChannel`, when there is more EIP-methods after `.route()`\n* Rename EIP-method `.recipientListRoute()` to the `.routeToRecipients()`\n* Make compatibility with SI 4.1\n* Tested against SF 4.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4b5bbb6412420031b4cb11868d3fb4e18d504ef8", "message": "DSL: Add `enrichHeaders(Map)` EIP-method\n\n* Introduce `MapBuilder` and its custom inheritor - `MailHeadersBuilder`\n* Add `HeaderEnricherSpec.headers(MapBuilder)` and `.headers(Map)`\n* Change `MailTests` to use new `Mail.headers()` and new `IntegrationFlowDefinition.enrichHeaders(MapBuilder)`\n* Change `mailapi` dependency to the IO's `javax.mail`\n\nPolishing - Add headerExpressions()\n\nMore Polishing - Add Configurer\n\nPolishing - PR Comments\n\n- Move MapBuilderConfigurer to superclass.\n- Move PropertiesBuilderConfigurer into PropertiesBuilder."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/238c1f06b994c2f80810fa4ab5c51db199cf82a0", "message": "Polishing after `rebase`"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f0bfe4656d1ba4dcc52a5b05b318ef92492de9db", "message": "DSL: Add support for IntegrationFlow Lambda\n\nTo simplify a bit the `direct` integration flow definition, the `IntegrationFlow` Lambda is introduced.\n\n* Extract `IntegrationFlow` functional interface with `define(IntegrationFlowDefinition<?> flow)` method.\n* Rename existing `IntegrationFlow` class to the `StandardIntegrationFlow` and move it to the inner class within `IntegrationFlowBuilder`\n* Extract `IntegrationFlowDefinition` superclass for the `IntegrationFlowBuilder` to be used within `IntegrationFlow` Lambda\nto hide `get()` method from end-users.\n* Change `IntegrationFlowBeanPostProcessor` for a new logic around `IntegrationFlow` Lambda\n* Rename `MessagingProducerSpec` to the `MessageProducerSpec`\n\nConflicts:\n\tspring-integration-java-dsl/src/main/java/org/springframework/integration/dsl/IntegrationFlowBuilder.java"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5f4089db0a634d5a0389a898a25f417fcdc3dbc3", "message": "DSL-(S)FTP-Namespace-Builder-Factory\n\n**DO NOT MERGE YET**.\n\nThere is need to provide tests on the matter.\n\n(S)FTP Tests\n\n* Add test cases for (s)ftp components based on embedded (S)FtpServers\n* Upgrade some dependencies\n* Fix bug in the `IntegrationFlowBeanPostProcessor` for the registration internal (a result of `MessageSourceSpec`) as a bean in the AC"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4b5ba00536c8fb61bce442da1b01f52bbe1f2251", "message": "Kafka-GH-92: Allow PP for the `<topic-filter>`\n\nFixes https://github.com/spring-projects/spring-integration-extensions/issues/92"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/8cc38bc1b75294caa61d43983f8e612c1d944219", "message": "DSL: Add `File.` Namespace Builder Factory\n\n* Introduce `ComponentsRegistration` *marker* to extract internal components from the `IntegrationComponentSpec` to be registered as bean in the application context\n* Add `ConsumerEndpointSpec#order(int order)` for the `order` of target `AbstractMessageHandler`\n* Fix `AggregatorSpec` to use `DefaultAggregatingMessageGroupProcessor` by default\n* Fix `IntegrationFlowBeanPostProcessor#generateBeanName` to check if `instance instanceof NamedComponent` and its `beanName` has been configured\nusing `IntegrationComponentSpec#id`"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13488328", "body": "Hello, Lukasz.\nAs you may know MongoDB doesn't support TX as well, however we have its `MessageStore` implementation.\nFrom other side it is anti-pattern to access to the same `MessageGroup` from different applications...\nTo achieve exclusive access to the `MessageGroup` we use `LockRegistry`: take a look into `AbstractCorrelatingMessageHandler`.\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13488328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19309105", "body": "And one more general question for experts.\nWhy logback? \nLog4j2 tells that it fixes some bugs in the logback: http://logging.apache.org/log4j/2.x/.\nAnd Log4j2 uses LMAX Disruptor too for async events...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19309105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19413320", "body": "Hi, Jon!\nLooks better :smile: , but it is still IN Gateway. Why do you wait _replies_ ? This is a topic for you to think about for evening, and I think how we may implement RingBufferChannel ;-). But it will be a separate JIRA. BTW we already have similar (https://jira.springsource.org/browse/INT-1979), so it should go to the INTEXT.\nI'll review it deeply in the morning.\nHave a good time!\nAnd again: thank you, guys, for Reactor :smiley: .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19413320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31108780", "body": "Hi, there!\nHaven't reviewed it fully, but looks like it should be based on new `RemoteFileTemplate`.\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31108780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43307083", "body": "Looks like `SplunkParserUtils` doesn't provide so much value and can be removed.\nIt doesn't hurt to use `BeanDefinitionBuilder.genericBeanDefinition(SplunkExecutor.class)` directly from parsers.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43307083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43307512", "body": "Thank you, Olivier, for contribution!\n\nI'm not well with Splunk and there is need review from @dturanski anyway, however I tried to provide comments as much as possible.\n\nAnd one more comment: there is need tests on the matter in any event\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43307512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43403078", "body": "There is still need tests on the matter and I think your commit message with description should be moved to the `README.md`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43403078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43617731", "body": "Thank you, @man8 , for fixing it. However ever for so simple (VERY) fix we should be sure that you signed CLA: https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43617731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43865346", "body": "It does not make sense. The MQTT module is now in the Core Int project: http://search.maven.org/#search|ga|1|spring-integration-mqtt\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43865346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43872522", "body": "I'm a bit confusing what you are going to achieve.\nYoy've submitted PR for MQTT module, but you worry about Kafka module.\n\nWhere is the truth?\n\nWe have a PR #65 for Kafka, but looks like it has been left without contributor attention.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43872522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44244318", "body": "Sorry for delay.\nSo, now `SPR40` is up-to-date behind the master.\nYou can go ahead with PR for upgrading Kafka module to SF 4.0 and SI 4.0.\n\nThanks\n\nWe close this PR as one for wrong upstream\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44244318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44244655", "body": "MQTT module is under Core project now.\nSo I'm closing this issue as not relevant.\nIf there is need something to to fix the JIRA is for you: https://jira.spring.io/browse/INT\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44244655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44367499", "body": "Since you have a cascade of `@Autowired` it is recommended to mark the \"root\" with `@Lazy`:\n\n``` java\n   @Autowired\n   @Lazy\n   private FirstLevelService firstLevelService; \n\n    @Bean\n    public IntegrationFlow flow() {\n```\n\nWe will add a note to the Docs on the matter.\n\nThank you for pointing it out!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44367499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44399393", "body": "Good point! Right. It is an issue, because the target object is a proxy, but we don't take care here about `user target class`.\nWill be fixed soon.\nThank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44399393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44494549", "body": "Merged via https://github.com/spring-projects/spring-integration-extensions/commit/71dd35c0e71c8a00aa80a1efd97d4d9142efa721\n\nThank you\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44494549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44829470", "body": "@olamy, sorry for confusing you, wouldn't you mind to move your changes to the branch based on SPR40 upstream, not master.\nSince it is a new feature we should provide it for the new version of project, which is based on Spring Framework 4.0 and Spring Integration 4.0.\nHaving that you should create a new 1.1 XSD and apply your changes there.\n\nThanks\n\nLet us know how it is comfortable for you\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44829470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44844705", "body": "@olamy, For SPR40. We've just switched `master` to the SF 4.0 and SI 4.0. \nSo, what you should here - just rebase you branch to the op-to-date master and go ahead with testing entire Splunk module.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44844705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45235479", "body": "@edgedalmacio , thank you for pointing it out one more time! And, of course, thank you for any contributions.\n\nHowever woulldn't you mind to `rebase` you branch to the master, instead of `merge`?\nAfter that I'll review it quickly and if there won't be big concerns merge it!\n\nAlthough I'm sure that there is need to upgrade this project to the latest Spring Framework and Spring Integration. And maybe others dependencies. If you won't mind we can go ahead after rebasing\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45235479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45235903", "body": "@olamy , thank you!\n\nI'm going to merge it with some minor polishing, because there is an issue which we should address, too. https://jira.spring.io/browse/INTEXT-94. Do you have anything in mind on the matter? We will be appreciated for your contribution\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45235903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45324529", "body": "Merged via https://github.com/spring-projects/spring-integration-extensions/commit/198205058cfe6c9266ea4549bf76d4dd2e8f9785\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45324529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45327210", "body": "Related issue #59\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45327210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45327243", "body": "The JIRA on the matter: https://jira.spring.io/browse/INTEXT-94\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45327243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45343833", "body": "Merged #75 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45343833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45343882", "body": "Merged #75 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45343882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45353958", "body": "Any code sample on the matter? And StackTrace, please, to the studio!\nThank you\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45353958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354636", "body": ">  you need to change \n\nCan you get it as a workaround for now, before I'll fix it?\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45357672", "body": "It's a bug in core `RecipientListRouter`, who doesn't invoke `super.onInit();` from its `onInit()`: https://jira.spring.io/browse/INT-3431\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45357672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45704672", "body": "@olamy ,\nAs usual: thank you for contribution.\nBut wouldn't you mind to follow with Contribution rules?\nhttps://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md\n\nNow it's a bit difficult to understand what's going on without a test-case. It's not enough just to change code: it's not your own project and all community should be sure that your changes is legitimate.\n1. The JIRA ticket first with test-case to reproduce\n2. The PR only after the confirmation from project commiters\n3. The commit and changes should follow with mentioned rules for contribution and code style: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style\n\nAll those facilities let us review and merge your commits more quickly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45704672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45705988", "body": "Maybe. \nBut without test-case to reproduce the issue and conviction that your change fixes it I can't apply the PR. \nLooks like it would be better, if we do it on our own - just on your report, but not commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45705988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45835404", "body": "Good (or not). \nNow I see that the issue is around XSD and parser.\nTipically we write tests only for parsers and don't do any logic.\n\nAs long as you provide some component attrbiute, you should just check if the result object has been configured with that attribute.\nI'll prepare the test-case for current issue soon.\n\nFeel free to raise JIRA tickets for all issues, which you see.\n\nAnd our apologies that we don't have test covarage yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45835404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45878680", "body": "@olamy , here you are the fix with test: https://github.com/artembilan/spring-integration-extensions/commit/48b725c0c3c3fd96e2e03cce83a41e34c846cc76.\nMerging...\nThank you for pointing it out\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45878680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45984704", "body": "Thank you for contribution.\nBut before review and (probebly) merge of your work, we should be sure that you signed the CLA: https://github.com/spring-projects/spring-integration-extensions/wiki/Contributor-Guidelines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45984704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46011517", "body": "All you need to do just is around Git:\n1. Switch to the `master` branch: `git checkout master`\n2. Do `git fetch -all` then `git pull upstream master`\n3. Switch to your branch: `git checkout INTEXT-73`\n4. `git rebase master --interactive`\n5. `squash` all your commits from that branch to one\n6 and push to `origin`\nHere you can find more info: https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46011517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46017395", "body": "Please, raise a JIRA issue (https://jira.spring.io/browse/INTEXT), create the branch with name based on JIRA ticket number and submit a new PR.\nThis one is from `master`: it isn't good.\nSince you have changes already in master, it just enough to create new one from there with any code changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46017395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46019226", "body": "Good.\nClosed in favor of #79 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46019226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46019953", "body": "Thank for the contribution.\nNothing to complain about.\nMerging...\nHowever I'll do some polishing for the project on merge.\nAnd may be fix some bottlenecks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46019953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46030743", "body": "Merged via https://github.com/spring-projects/spring-integration-extensions/commit/989ce89feddd0f5fcaf24da60772de21b097a895.\n\nI was going to upgrade to Kafka-.0.8.1.1, but looks like they change the API, especially around generics. Hance, it might be a different JIRA issue.\n\nThank you again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46030743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46399941", "body": "The JIRA INT-3431 has been fixed. Will work as is since Spring Integration 4.0.3\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46399941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46819179", "body": "No. Our commits have to not be there.\nLooks like your forgot to `rebase` your branch to the master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46819179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46825530", "body": "Sure! The new brach based on `master`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46825530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46844908", "body": "That's true, because `.enrich()` is only for **default** implementation - `ContentEnricher`. And its purpose to avoid a creation `ContentEnricher` object manualy - avoiding `new ContentEnricher` and its setters.\nAny custom implementation might be achieved only via `.handle()` - a generic EIP-method for any `MessageHandler` custom implementation.\n\nThank you for your attention to this\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46844908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46845859", "body": "That's true. Because this one refers to that 'bad' branch and you can't redo any existing PR.\nJust close this and link from that new one.\nHowever let me take a look to your new branch: maybe there are still some mistakes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46845859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46850682", "body": "Thank you! Looks good.\nHowever before review it we need to be sure that you signed CLA - https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46850682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46854589", "body": "No. Do it like it is said in that Wiki\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46854589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46941137", "body": "True. Spring 4.0 as well as Spring Integration 4.0.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46941137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46941647", "body": "@olamy , since you are an enough active contributor, would be better, if you'd follow with with contribution process: \n*JIRA first\n- the approval for that\n- PR based on branch with JIRA ticket number\n- The correct commit message\n- Tests are required\n\nOtherwise I have to close the PR do the fix on my own.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46941647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46946460", "body": "Edge, you are welcome!\n\nSince you've signed the CLA there are no stops to grab JIRAs and go ahead with fixes for them, if we confirmed that the issue is valid.\n\nThank you!\n\nStarting to review the current PR, however I need some time to be aboard with the current solution.\nCome back to you soon.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46946460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46947083", "body": "One remark: please, follow with `commit message instructions`: \nhttps://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md#format-commit-messages.\nAnd include the link to JIRA issue to the commit message. \nSomething like this: https://github.com/spring-projects/spring-integration/pull/1181/commits\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46947083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46947666", "body": "For example here the commit message might be like this:\n\n> INTEXT-107: Upgrade to SF and SI 4.0\n> \n> JIRA: https://jira.spring.io/browse/INTEXT-107\n\nAnd really it's enough! The main concern that the headline should be <= 50 symbols length.\n\nThe code style concern: use `tabs` instead of `whitespaces` for indents\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46947666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46957922", "body": "Merged via https://github.com/spring-projects/spring-integration-extensions/commit/7590253871e892bf66441e1975778055b6a0f37e\n\nThank you very much!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46957922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46958068", "body": "After we merged your upgrade PR, please, rebase this one to latest master.\nAnd fix conficts, of course\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46958068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46963071", "body": "No, you should you Git `rebase` function, not `merge` or `pull`.\n- switch to `master`\n- `pull upstream/master`\n- switch to `INTEXT-73`\n- `rebase` will `pick all`\n\nYour commits should be on top and no one commit from master must be present here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46963071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46965531", "body": "Well done!\nPulling to review...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46965531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46968504", "body": "Otherwise - LGTM.\nWaiting for your polishing and merging.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46968504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46973845", "body": "Good.\nThe code format will be fixed on merge.\nHowever keep it in mind for the future\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46973845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46976372", "body": "Merged via https://github.com/spring-projects/spring-integration-extensions/commit/d1d6b068bce44c574323853d041e56269bb16bc4\n\nThank you for contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46976372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46988502", "body": "Just was going to ask you the same, if you need it.\nDo you mean the Maven Central or `http://repo.spring.io/libs-milestone` is enough for you ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46988502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46998331", "body": "True. You go right way!\n\nBTW, we have had some short internal discussion and decided that there is no stops to go ahead and release GA for SMPP to Maven Central.\nWill be done tomorrow.\n\nLooking forward for more contributions!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46998331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47106719", "body": "I guess you mean the Java DSL.\n\nPlease, specify the project name in the future, because INTEXT repo has several different project.\n\nNow about an issue.\nIsn't this enough for you:\n\n``` java\n.delay(\"delayer\", \"200\", d -> d.get().getT2().setMessageStore(this.messageStore))\n```\n\n?\nHowever I see it is a bug: I have written `DelayerEndpointSpec` but haven't got it in the service with `.delay()` EIP-method. :smile: \n\nThank you very much!\n\nWill be fixed in the next Milestone\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47106719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47108099", "body": "No, The bug is still there: leave `open`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47108099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47108283", "body": "BTW, wouldn't you mind for contributions?\nhttps://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47108283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47116282", "body": "Actually `DealyHandler` doesn't provide such an option and it only rely on that one from `ApplicationContext`. \nNo sure, if we should provide the publict setter as it was here for a long time.\nBut I think it won't hurt. Let's raise a JIRA ticket against SI Core project: https://jira.spring.io/browse/INT\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47116282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47140598", "body": "@edgedalmacio , the `spring-integration-smpp-1.0.0.RELEASE` is now available: http://search.maven.org/#search|ga|1|spring-integration-smpp\n\nThank you for contribution one more time!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47140598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47215179", "body": "No, because it is a separete project and it has its own release time-line.\nHowever I agree: all these EXT projects should be in the separete group to track them to track easily.\n`org.springframework.integration.extension`\nCC @garyrussell \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47215179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47317726", "body": "Note the Splunk Adapters project is located in the Spring Integration Extension Repo, so see https://jira.spring.io/browse/INTEXT-109.\n\nOK. Let it be with `mock`, but we have a `SplunkDataReaderTests`, which is based on local data file - `splunk-data.xml`.\n\nWell, I see that `SplunkDataReader#count = 0` is by default. So, if we don't populate that value to the `outputArgs`, what is the default value than for Splunk?\n\nFrom other side: is it correct to try to retrive **unlimited** result for Splunk events? \n`SplunkDataReader` just collects them to the `List<SplunkEvent>` and it looks for like memory overhead. Isn't it? I think it really was a reason do not allow to fetch all data for search.\nWDYT?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47317726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47424743", "body": "Merge via: https://github.com/spring-projects/spring-integration-extensions/commit/ab5073fb4d483ccf1875ba65e3e645c1c6cad263\n\nThank you very much!\n\nFor the future, please, follow with Contribution Guideline: https://github.com/spring-projects/spring-integration-extensions/wiki/Contributor-Guidelines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47424743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47463885", "body": "Thanks, @benbramley , for the clarification, but you just end up with `OutOfMemory` and JVM will crash. \nSo, my position do not do this critical change and I'm going to close the PR as one for the potential vulnerability in the future.\n\nAny other arguments to apply it? :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47463885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47500890", "body": "OK. I'm convinced:smile: \n\nTo be consistent with Splunk docs and your JDBC argument we really should provide this behaviour and leave it up to the end-user how to get deal with that `OOM`\n\nMerged via https://github.com/spring-projects/spring-integration-extensions/commit/c639066dafe7dd62070e676fa52da8161ee82a72\n\nThank you very much, guys.\nLooking forward for more contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47500890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47646636", "body": "Fixed via https://github.com/spring-projects/spring-integration-extensions/commit/906880acf0fc72ca96c55db26f0027d5db475093\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47646636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47647527", "body": "Fixed via https://github.com/artembilan/spring-integration-extensions/commit/85378e52538dea5e1dbdbb748283877d8aea223b\n\nThank you for pointing it out!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47647527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47647950", "body": "@olamy, @benbramley, wouldn't you mind to help here a bit?\nI'm not well with Splunk and didn't write this project., so it isn't clear to me what's going on.\n\nAny your comments are very appreciated.\nThanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47647950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/48711930", "body": "BTW we have an idea to use for this `real-search` task the `splitter` implementation. See the linked PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/48711930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49065404", "body": "Hi, J\u00e9r\u00f4me !\n\nAs usual: thank for attention to this stuff. \nOr you are only one person who is interested in it or it is so difficult, that other don't want to get deal with it :smile: \n\n> Not able to to that\n\nThat's true, because the `poller` is up to the `endpoint`, not channel. \nHence if you start the flow from the `PollableChannel` (independently if it just channel name, or `Spec` or real `QueueChannel` bean), you should configure the subscriber endpoint with poller:\n\n``` java\nIntegrationFlows.from(\"myChannel\")\n     .handle(myHandler(), e -> e.poller(Pollers....))\n```\n\nBecause `endpoint` is responsible to read message from the channel.\n\nActually the same we have with XML config:\n\n``` xml\n<service-activator>\n   <poller/>\n</service-activator>\n```\n\nRe. transactions. It's simple - just follow with `Pollers` API:\n\n``` java\n     .handle(myHandler(), e -> e..poller(Pollers.fixedDelay(100)\n                            .maxMessagesPerPoll(1)\n                            .transactional(this.transactionManager()))\n```\n\nIf you need more control over that transaction you should configure `TransactionInterceptor` bean and provide it to the `.advice()` method of `PollerSpec`. See `.transactional()` method source code.\n\nDon't forget: you always can configure the **default** `Poller`, as we do it from xml with `default=\"true\"` on `<poller>`, but from Java perspective we should populate appropriate bean:\n\n``` java\n@Bean(name = PollerMetadata.DEFAULT_POLLER)\npublic PollerMetadata poller() {\n    return Pollers.fixedRate(500).get();\n}\n```\n\nHTH\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49065404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49076811", "body": "Show your `defaultRetryAdvice` config, please.\n\nSeems for me you can't serialize `RetryContext` and persist it in some storage in case of persistence `RetryContextCache`.\nSince your retry interval is so big, how about to get rid of `RetryAdvice` and try to achieve the same with persistence `delayer` ?\nYou should conbfigure `ExpressionEvaluatingRequestHandlerAdvice` for your `mailSenderHandler` and on exception send the message to the `.delay()` flow, which will release the message to the same `mailSenderHandler` after that delay timeout.\nIn this case you don't lose massages and avoid some hard work to make `RetryContextCache` as persistence.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49076811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49422638", "body": "Guys, I'm looking at this closer now and want to discuss with, since you are users of this stuff and familiar with Splunk at all.\nYour feedback is appreciated.\nSo, how about to introduce `job-duration` option to to `cancel` it and return the result which is at this time? \nSince we do `search` from a `polling` `inbound-channel-adapter` we can't process `stream` from there. It's really a component to produce one message per request to the external system.\nSince we save the `lastSuccessfulReadTime` looks like the next `poll` for the data, should move the Splunk search `range`. \nOr do we lose here events from previuos canceled real-search job, because they are out of the `lastSuccessfulReadTime` scope already ?\n\nRegarding `streaming` I really think it should be a new `event-driven` component, which receives a message with search args, starts a Splunk Job and processes `InputStream` to produce reply messages one by one for each incoming `event`.\n\nFrom other side it might be an one-way `message-driven` component, which start the Job and listens to new events from search results. \nBut will it be normal for Splunk to keep the search job always running?\n\nThanks in advance\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49422638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49739202", "body": "Looks like minor issues. I'll fix them on merge and, if branch will be buildable I won't back to you.\n\nThank you very much!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49739202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49751470", "body": "Merged as: https://github.com/spring-projects/spring-integration-extensions/commit/07d45d69c188ba5466d1f9cddab9af336d737943\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49751470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49875502", "body": "@benbramley , thank you for your time and attention to this.\n\nSo, to conclude and go ahead:\n1. We disable RT search for the `<int-splunk:inbound-channel-adapter>`\n2. Introduce new `event-driven` component, say `<int-splunk:splitter>`. with similar inbound behaviuor, but as a result it will `InputStream` from Job and produce results one by one to the `output-channel`.\n3. I'm not sure that we should come to a stand only with RT search, since it looks like all Splunk searches are streams.\n\nWDYT?\nAnd I go ahead with fix. \nNote, it will be based on the latest SI 4.0 SNAPSHOT. At least for now. Because the splitter streaming support has been introduced recently.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49875502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49976970", "body": "Merged as: https://github.com/spring-projects/spring-integration-extensions/commit/46d7567a77d4dd39845471876ee050577c326215\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49976970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50025145", "body": "Real-time search is disabled: https://github.com/spring-projects/spring-integration-extensions/commit/d40d510e4c5be2b35876d053d2e79b9ab55098ee.\n\nAll other stuff will be revised on the new release\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50025145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51722930", "body": "@kcrimson , thank you for the contribution!\n\nLet us know, if you've already signed the CLA: https://github.com/spring-projects/spring-integration-extensions/wiki/Contributor-Guidelines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51722930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51969610", "body": "@sobychacko , take a look, please, quickly.\nActually there is nothing special, but it should be the right way to go ahead to be used from XD .\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51969610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51970056", "body": "@andrewmilkowski, thank you very much for this issue.\nAnd it is really tipical miss that we forget to support property-placeholder and SpEL from the XML attributes. :smile: .\nWe have similar issue (https://jira.spring.io/browse/INTEXT-111) on the matter and its PR: https://github.com/spring-projects/spring-integration-extensions/pull/91\nTo address other (but not trivial) cases\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51970056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52072537", "body": "Hi Rob!\nI'm glad to work with you! \nIt's really an honor for me to review your code.\n\nI haven't been familiar with AWS yet, but I think I'll study something on the matter working with you here. And somedays I will be able to help with some task.\n\nRight now, let me review it as we do for any PR to the Spring Integration.\n1. No one branch shouldn't `merge` `master`, just `rebase`\n2. The first line of the first commit must not be more than 50 symbols\n3. All affected classes should be updated to the actual year for `Copyright` and the `author list` should have your name as well\n\nSome comments I'm adding on the lines.\n\nThank you for contribution!\n\nBest regards,\nArtem\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52072537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52073699", "body": "All minors.\nIf you want I can do the polishing for you on merge, but `rabase` is an important part here to avoid conflicts on merge.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52073699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52180899", "body": "Hi Rob!\nI meant this: https://github.com/artembilan/spring-integration-extensions/commit/bcabe134f45d4a83914010c0e11fdfe7b3e28d0f\nIt is a polishing for all my concerns to the Gradle config and fixes for all compiler warns.\n\nLet me know and I merge it to master to go ahead\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52180899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52181742", "body": "Pay attention, please, to the `.setBeanFactory(Mockito.mock(BeanFactory.class))` in tests. It is one of SI feature, when we want to be sure that all infrastructure components are populated from the `beanFactory`. It is an `env` var from `IntegrationUtils`:\n\n```\n/**\n     * Should be set to TRUE on CI plans and framework developer systems.\n     */\n    public static final boolean fatalWhenNoBeanFactory = Boolean.valueOf(System.getenv(\"SI_FATAL_WHEN_NO_BEANFACTORY\"));\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52181742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52289252", "body": "Merged via https://github.com/spring-projects/spring-integration-extensions/commit/d06e8cbec345d3048ed244f9673265c79f4fb6d0\n\nThank you @robharrop !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52289252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52396762", "body": "Pushed tests.\nReady to merge\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52396762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52613756", "body": "Merged after rebase\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52613756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52613839", "body": "LGTM.\nMerging...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52613839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52614017", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52614017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52614439", "body": "Hi @ilayaperumalg !\nPlease, see https://github.com/spring-projects/spring-integration-extensions/pull/91 and its related JIRAs and discussions.\nActually I don't see the fix for PP issues.\nAt least I don't see test-case on the matter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52614439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52649786", "body": "Right, I see.\n\nMy thought was to get rid of explicit bean definition under those ugly names and represent a `KafkaConsumerContext` as a container for those groups of components with that provided `group_id`, when it really can be configured with `PP`. Yes, we lose here the ability to fetch concrete component as a bean, but we can do that through the `KafkaConsumerContext` with `group_id` and type. \nIf we register those internal components just as `BeanDefinition` we get the gain from `BeanFactory` infrastructure and have everything at the same place - container from the `KafkaConsumerContext`.\n\nWith my suggestion we might fix several issues at once (see open JIRAs for SI-Kafka).\n\nHope I am clear\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52649786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52761133", "body": "Thank you @TYsewyn !\nIt's really a bug and what was a funny it has been easy to reproduce, if I had had a test-case on the matter before :smile: .\n\nWould you mind to PR the fix to this?\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52761133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358563", "body": "Actually, not sure, but for simplification it would be better to provide another DSL method `channel(ChannelSpecSupport spec)`, rather than restrict with only one method and allow provide other option.\nBy I'll think what can do. There is one more idea - `channel(String id)`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358608", "body": "Re. strings and property-placeholder - no sure too. It isn't recommended within JavaConfig.\nIt is our background that we register `BeanDefinition`s, but for end-user it looks like a single `@Bean`.\nAnd don't forget that you can use `Channels` from dirrect `@Bean` and it provides the `id` based on method name, by default...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358758", "body": "Pay attention, please, how it looks. :smile: reminds me Perl: a lot of squiggles and it really isn't readable. But how it is awful without lambdas...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358868", "body": "> could become our common integration layer below the XML parsers and the DSL\n\nMakes sense. Something similar I show in some email. What is bad: i deleted that branch today :-(. \n\n> Perhaps remove the get() and simply provide the Spec in methods like IntegrationFlowBuilder.channel().\n\nNo, we should allow to provide external channels from `@Bean`, and I'll do soon from just `id`. As I said: alternative method. You want to allow provide property-placeholder, but don't allow to use just `.channel(new DirectChannel())`. So, not agree: one more DSL method is OK.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5359066", "body": "In Spring JavaConfig people used to live with real classes via `return new BlahBlah();`. So, it would be bad to restrict them to the string values (`BeanDefinition` or as alternative methods), if they alway can read the property from `PropertySource` (palceholder) and build real value for bean property. \nAs we already have one more `Spec` layer I don't want to complicate it. \n\nThis is my 'baby' and I'll always find arguments to disagree :smile: \n\nBye! Go to sleep. Thanks for review.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5359066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6699784", "body": "Yes, I understand that it delegates to the `GatewayDelegate`. And would be better to rework `JmsMessageDrivenEndpoint` to the `MessagingGatewaySupport`. See `AmqpInboundGateway` - similar listening/replying behaviuor.\nMy position - it is a fault of design from SI abstractions perspective.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6699784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6699879", "body": "I don't think so. It's just enough to ignore it. There is no reason to be so strict.\nE.g. we can configure a lot of attributes for `<jms:message-driven-channel-adapter>`, but not all of them are appliend for end component, because it isn't `gateway` - just one-way listener.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6699879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4650901", "body": "Hi, Jon!\nI'm not well yet with Reactor. My respect for this excellent foundation!\nBut I'm well with SI, so let me review it a bit. :smile: \n\nUsually in the SI we send to the `errorChannel` an `ErrorMessage`: e.g. `MessagePublishingErrorHandler.handleError`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4650901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4650932", "body": "Why do you return in all `send` implementations **null**? It will determined as a message producer issue in the SI:\n`MessagingTemplate.doSend`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4650932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4650961", "body": "Should be **true** and in the `unsubscribe` too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4650961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4651147", "body": "Where is this class located?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4651147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654575", "body": "> Does true mean \"successfully sent\"?\n\nRight.\nThat's why I show you `MessagingTemplate.doSend` where the Message comes on reply.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654909", "body": "There are many breaking concerns: this component is declared as `Inbpund Channel Adapter`,which should be one-way IN by definition from EIP.\nBut you made as IN-Gateway and furthermore it is a `MessageChannel`(!).\nCan you explain, please, a reason to do so much in one (at a glance) simple adapter?\nBTW, it mustn't be a `MessageChannel` at all.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4656195", "body": "Well, it's good point to have full `ReactorMessageDispatcher` for SI Channels, or furthermore `ReactorMessageChannel`...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4656195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4696426", "body": "Hi, all!\nGary is more familiar with `MessageChannel` architecture (I haven't wrote any one yet ;-)), so he can more effectively lead you, Jon, in this direction.\nBut want to pay your attention from perspective of Reactor.\nHere you _notify_ and _subscribe_ to the `defaultKey` from `Reactor`, so, if `reactor` is shared one from application context and we're referencing it from different channels we may end up with unexpected results. Isn't it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4696426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727608", "body": "`1.12` is current Gradle version\nand also add this line:\n\n```\ndistributionUrl = \"http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip\"\n```\n\nWrapper configure `distributionUrl` as `bin` by default\nAnd also would be better to run `wrapper` task locally to generate actual Gradle artifacts and push them to PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727636", "body": "I suggest to revise all versions and use the latest ones.\nI agree that for SI 4.0 we should provide separete branch\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727666", "body": "Revise, please, imports - `unused` some of them. They should be presented\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727691", "body": "tabs, not whitespaces\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727726", "body": "Why not comma ? I have never seen that Spring suggests semicolon separator...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727785", "body": "Shouldn't we have logic, when `splunk-server-ref` is empty ? However would be better to encapsulate it in the `SplunkServiceFactory`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12727785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728427", "body": "Again tabs.\nAnd I don't like this name - maybe `checkServiceOnBorrow` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728454", "body": "This is good ctor with vararg, though\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728474", "body": "Need to reinstate list, to avoid mutations in case of reference\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728715", "body": "What is the reson of `Callable` from separete Thread, if you anyway wait this `Future`?\nDoesn't Splunk support `connectTimeout` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728774", "body": "Remove `type`, please, to allow to use it with property-placeholder, too\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728883", "body": "Can be simplified:\n\n``` java\nif (service != null) {\n       if (!splunkServer.isTestOnBorrow() || pingService(service)) {\n        return service;\n    }\n    else {\n        // fail so try next server\n        continue;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12728883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12734108", "body": "Right. Our formitting is tabs, not whitespaces. You should configure your IDE appropriatelly: \nhttps://github.com/spring-projects/spring-framework/tree/master/src/eclipse\nhttps://github.com/spring-projects/spring-framework/tree/master/src/idea\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12734108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12734146", "body": "Right, but it should be a part of `SplunkServiceFactory`, when I might provide an empty list:\n`Assert.notEmpty(splunkServer)` from ctor\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12734146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12734175", "body": "Got it. Sorry: now I see it isn't your code. So. nevermind. We can come back to this another time.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12734175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767701", "body": "`,` is the default delimiter for `StringUtils.commaDelimitedListToStringArray`. \nMinor and can be polished on merge - just for info to know\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767743", "body": "As I said `Assert.notEmpty(splunkServers)`. It doesn't make sense to allow create `SplunkServiceFactory` without any server. However, from other side, we can think about dynamic `add/remove` failover `SplukServers` at runtime.\nWDYT?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767745", "body": "The same is here - `Assert.notNull(splunkServer)`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767748", "body": "I don't know which code style requires Apache, but in Spring we prefer this: https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767755", "body": "??? \nThis JavaDoc doesn't say for me anything useful\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767760", "body": "Should be `final`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12767760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14126887", "body": "Not critical (and can be fixed on merge): new line for any similar block\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14126887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127129", "body": "Since you provide a new logic for long messages to send them as `shortMessageParts` in the loop, there is just enough to remove this `Assert`, not comment\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127267", "body": "How about return here `List`, and even `UnmodifiableList`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127371", "body": "Having the `List<String> smsMessageId` it will be redundant to wrap array to String\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127721", "body": "Why isn't enough `new LinkedList<String>()` instead of `new String[]` ?\nI mean there there is no reason to get deal with arrays.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15226507", "body": "SF deps are redundant, because they are transitive from SI\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15226507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15226546", "body": "`Diamonds` don't work with Java 6. We still should support the latest one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15226546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15226591", "body": "It really should still be `version=1.0.0.BUILD-SNAPSHOT`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15226591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15272720", "body": "OK. That's good.\nHowever whould be better to use `<xsd:attributeGroup ref=\"integration:channelAdapterAttributes\"/>` for `auto-startup` and phase.\nThe `id` and `channel` attributes should be removed from here, respectively.\n\nPlease, make this XSD based on `schemaLocation=\"http://www.springframework.org/schema/integration/spring-integration-4.0.xsd\"`.\nNot all IDE can resolve XSD imports using `spring.schemas`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15272720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15272734", "body": "Bad code format in this class?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15272734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15332679", "body": "No problem @sobychacko! I'll do it on merge\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15332679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16049857", "body": "What is a premise to use `slf4j` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16049857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050307", "body": "Right, it's bad to use `*` for imports, but we follow with rule do not use method imports in production classes.\nJust minor note\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050406", "body": "Well, I see that you treat property-placeholder and SpEL with some unexpected result.\nI'd say that would be better, if we really will support those features in these cases too.\nI don't still how, but I think we'll find the solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050420", "body": "Would be better to use your real name instead of email\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050455", "body": "I'd say that `streams` attr has to support SpEL and property-placeholder as well\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050498", "body": "We can achieve that using `ManagedMap` for the `topicStreamsMap` in the `KafkaConsumerContextParser`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050670", "body": "Well, it's interest if they are really have to be registered as beans.\nWould't it be enough just use them as internal `BeanDefinitionHolder`s references ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050779", "body": "Of course, the same is here.\n@sobychacko , your input, please ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050813", "body": "We prefer to use `versionless` schemaLocation to avoid issues in the future upgrade\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16050813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16052423", "body": "Well, the code in the `KafkaConsumerContext.setBeanFactory` is really bad. We have to do that from `getConsumerConfigurations()` on demand.\nNew JIRA issue, please\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16052423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16186889", "body": "No, `milestone` is OK: it includes `release` as well. The `snapshot` is bad.\nBut we can rely on some Milestone or RC for some project someday.\nSo, the repo should be:\n\n```\nmaven { url 'http://repo.spring.io/libs-milestone' }\n```\n\nBTW, would be better to upgrade to Gradle `1.12` - `1.6` is enough old...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16186889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16187019", "body": "This dependency is enough: all other are transitive. \nHence we don't need support here several dependencies and their version: just relying on SI trnsitives!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16187019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16187063", "body": "Actually Jackson 1.x is deprecated. Can we upgrade to Jacskon 2 here ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16187063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16406461", "body": "Does `PP` work with simple `HashMap`, rather than `ManagedMap` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16406461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565586", "body": "Looks like would be better just to have a `generic` builder for the whole `Properties`, not for this tiny case.\nWDYT?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565725", "body": "Should be in the `mail` package\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565870", "body": "??? Why isn't factory method ?\nWhat is the purpose of `PoorMansMailServer` instance ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565891", "body": "Redundant line\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16565891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16566263", "body": "Since we are with `Builder` pattern (and only with JavaConfig here) they don't have to be called like `setters`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16566263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16566677", "body": "Actually I don't see reason of this Builder. It can be absorbed just with `MailSendingMessageHandlerSpec`.\nRight, I understand the case, when end-user can provide his own `JavaMailSender` impl, but can achieve that with separete `public static MailSendingMessageHandlerSpec outboundAdapter() {`.\nYou already provide one for the external `JavaMailSender` and there is need to have a new one to absorbe this builder in the `MailSendingMessageHandlerSpec`.\nWhen `outboundAdapter(JavaMailSender sender)` can return just `MailSendingMessageHandler` instance, because we don't have any other options to configure.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16566677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16566988", "body": "Or we don't need this method at all because:\n\n```\nItegrationFlows.from(\"sendMail\")\n      .handle(new MailSendingMessageHandler(mailSender()))\n      .get();\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16566988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567100", "body": "Or even better:\n\n```\npublic static MailSendingMessageHandlerSpec outboundAdapter(String host) {\n```\n\nbecause `host` is required.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567678", "body": "Is there really some set of all JavaMail Properties to produce really useful Builder with specific methods?\nLike:\n\n```\npublic class JavaMailPropertiesBuilder {\n\n     private final Properties properties = new Properties();  \n\n     public JavaMailPropertiesBuilder debug(boolean debug) {\n           this.properties.put(\"mail.debug\", \"\" + debug);\n           return this;\n     }\n     ....     \n     public Properties get() {\n           return this.properties;\n     }\n\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567869", "body": "maybe `testRuntime` for both ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16569402", "body": "I think we can get rid of this method and move the `host` to the ctor arg of this `Spec`.\nI always try to `publicate` only methods required for end-users\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16569402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16569725", "body": "Something askew is here. Maybe really `new PropertiesBuilder()` is enough for end-user code?\nAs far as it's really already isn't up to mail.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16569725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570193", "body": "How about two overloaded version of one method?\n\n```\nMailSendingMessageHandlerSpec credentials(String user) {...}\n\nMailSendingMessageHandlerSpec credentials(String user, String password) {...}\n```\n\n?\nOr we really can use `password` without `user`?\nBTW, should we add `Assert`s for them in the `MailSendingMessageHandlerSpec` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570432", "body": "Well if you'd prefer soaping the end-user eyes, how about this:\n\n```\n.javaMailProperties(p -> \n              p.put(\"mail.debug\", \"true\")\n               .put(\"mail.imap.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\")\n   )\n```\n\n?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16614630", "body": "I'd refer accept expression as `String` adn use `PARSER` from `IntegrationComponentSpec`.\nDo you have any objections ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16614630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16614852", "body": "`shouldMarkMessagesAsRead` has to be primitivedo not allow to pass `null`.\nBTW `ImapMailReceiver.setShouldMarkMessagesAsRead` has to be changed as well.\nRename, please these methods to not represent them as setters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16614852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16615161", "body": "Fault here: has to be `imapChannel()`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16615161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16615258", "body": "`Spec`s can't have `public` ctors: only access from factory methods.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16615258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16615624", "body": "Can you point me out where did you have this `embedded email sever` approach from ?\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16615624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16719057", "body": "Yes, it doesn't matter if it is Lambda or direct `IntegrationFlow` implementation. I have just not found the better name for the method :smile: . Your thoughts ? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16719057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504828", "body": "This is more strange...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504945", "body": "From one side we can specify `MessageSource<?>` as Lambda. See `from(MessageSource<?> messageSource)`.\nSo, compiler doesn't know which method to use and require explicit cast.\nFrom other side we have other `from(Function<?>)` methods, which also are obscure for compiler\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18505007", "body": "Otherwise with such explicit names end-user will understand what he gets with that `Function<?>` Lambda\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18505007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19458255", "body": "See `Expression.getValueType()` JavaDocs:\n\n```\n/**\n * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)}\n * method using the default context.\n * @param rootObject the root object against which to evaluate the expression\n * @return the most general type of value that can be set on this context\n * @throws EvaluationException if there is a problem determining the type\n */\n```\n\nFrom other side we can't extract the generic type of `Function`, if it is a Lambda. See here: https://github.com/spring-projects/spring-integration-extensions/wiki/Spring-Integration-Java-DSL-Reference#serviceActivators:\n\n> Since Java doesn't support generic type rosultion for Lambda classes...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19458255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19590922", "body": "As you see the next line (`this.subFlows.add(channel);`) provides this `channel` for the future bean registration: see `IntegrationFlowDefinition.route(R router, Consumer<RouterSpec<R>> routerConfigurer,         Consumer<GenericEndpointSpec<R>> endpointConfigurer)` and further `IntegrationFlowBeanPostProcessor.processStandardIntegrationFlow`, where the last one iterates over `flow.getIntegrationComponents()`. Hance channels like this accepts the bean name based on the `IntegrationFlow` beanName. \nHere is a note on the matter: https://github.com/spring-projects/spring-integration-extensions/wiki/Spring-Integration-Java-DSL-Reference#channels.\n\nI agree that the bean name for the `subFlow` is bad right now, because it is generated using `BF` algorithm. Therefore anonymous channels in the that `subFlow` get bean names like this:\n\n```\norg.springframework.integration.dsl.IntegrationFlowBuilder$StandardIntegrationFlow#0.channel#0\n```\n\nSo, I think I can make `subFlows` (in fact `StandardIntegrationFlow`) as `BeanNameAware, NamedComponent` and use the beanName from their parent `IntegrationFlow` bean definition.\nIn the end those subFlow's channel can make the bean name like this (for current `router` sample):\n\n```\nrouteFlow.subFlow#0.channel#0\nrouteFlow.subFlow#1.channel#0\nrouteFlow.subFlow#1.channel#1\n```\n\nWDYT?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19590922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20159541", "body": "Looks like there is need `else` with `IllegalStateException`, when we don't have `topic` header and there is more than 1 `producerConfigurations`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20159541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20160216", "body": "@ilayaperumalg , that's all. It is only single critical concern.\nLet me know and I'll fix it on merge.\n\nI'd say that you have an issue with code style though, but I do `artemized` on each merge :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20160216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20215823", "body": "Need `Copyright` in the beginning of each class.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20215823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20215830", "body": "`@since 1.0.1`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20215830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20215846", "body": "`else`, `catch`, `finally` etc. from the new line\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20215846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20220639", "body": "The mistake is here. `Div` operator has precedence over `minus`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20220639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20222892", "body": "What is this? \n`Boolean.getBoolean(\"show_test_output\")` is always `false`.\n\nFrom other side I agree that there is no correct logging configuration for the project.\nI've just found some working case. \nAnyway we try to not overhead tests with logs: `assert...` should ber enough\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20222892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223256", "body": "Yes, you are fixing it in your branch, commit just only the fix and push it to the `origin`.\nGitHub picks up your changes to the PR very well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223570", "body": "Tipically it's almost bad name for const: each word in the name should be separated with `_`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223604", "body": "Please, just get rid of this noisy log\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18332109", "body": "I think we can do that right now, because we don't have yet any GA, so end-users should admit that our next Milestone may change something radically\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18332109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26298860", "body": "Hi, @erenavsarogullari !\n\nLet's start to work with your solution!\n\nSee my comments, and if you won't mind in changes there is no reason to comment like `Fixed`, do not spam me :smile: .\nPlease, add comment like `Pushed` when you have pushed some commit.\n\nSo, the first comment: this file is redundant. All these ignore options are covered in the root dir with the same `.gitignore`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26298860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299008", "body": "Typo: Haze**l**cast \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299181", "body": "Why `4.2` ?\nThis project definitely will be as separate one, like SI-Kafka, SI-Splunk, SI-AWS etc..\nSo, `1.0`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299555", "body": "`version = '1.0.0-BUILD-SNAPSHOT'` and in the separate `gradle.properties` file.\nIt allows `Build-Master` to change the value on release automatically.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299741", "body": "This `build.gradle` looks bad for me.\nPlease, take a look to the https://github.com/spring-projects/spring-integration-java-dsl how to organize `build` stuff: `publish-maven.gradle`, `settings.gradle`, appropriate plugins for the `build.gradle` etc..\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299789", "body": "When you come up with the `build.gradle` based on that from DSL project, please re-run `wrapper` task to update this file as well for the `all` distribution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299847", "body": "OK. Nevermind for the `settings.gradle` :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26299847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26300877", "body": "Can be simplified:\n\n```\n        return distributedObject instanceof IMap\n                || distributedObject instanceof IList\n                || distributedObject instanceof ISet\n                || distributedObject instanceof IQueue;\n\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26300877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26300899", "body": "Are all other cases for all other types valid ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26300899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26310894", "body": "Why `shutdown` all, but not only those which are part of the current application context?\nFrom other side I don't see the reason of this class at all.\nSince we really have this `shutdown()` method we can use it from the `destroy-method` attribute on the `class=\"com.hazelcast.core.Hazelcast\"` bean definition.\nSo, I'd leave it to end-users to destroy their `hazelcastInstance` on their own.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26310894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26311449", "body": "Need more graceful JavaDoc\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26311449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26311531", "body": "Don't see reason of these constants, but it's up to you to leave them or remove.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26311531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26311788", "body": "Be sure that your IDE ensures new line in the end of each file.\nPlus take care about any trailing whitespaces: or manually using refactoring tool or via IDE configuration.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26311788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313009", "body": "Need better name for the class.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313142", "body": "Need to add `inititalization` barrier, because there maybe not one `ContextRefreshedEvent`.\nFrom other side looks like `SmartInitializingSingleton` would be better solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313383", "body": "Any classes in JavaDocs should be wrapped to the `{@link }`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313664", "body": "I guess on the `stop` we must do `removeEntryListener`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313701", "body": "Should that `includeValue` flag be configurable ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26313701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314099", "body": "Looks for me that we should move this check to the `onInit`.\nThe `start` may be done from the separate Thread, hence our application won't crash for the illegal configuration reason.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314245", "body": "If this is a `base class` it must be `abstract`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314485", "body": "The `super.onInit()` as a first line in the method outside of that if.\nFrom other side if our `CacheEventByDistributedObject` isn't valid why just don't throw `IllegalArgumentException`?\nI think there might be a reason to revise that `HazelcastIntegrationDefinitionValidator` do not return `true/false`, but throw appropriate exception to prevent our application to start.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314602", "body": "Minor, but why `public`? Maybe `protected` as a cause of inheritors ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314965", "body": "Why `public`, too? \nI see that you need it for the `AbstractHazelcastEventListener`, but looks like it is wrong design. The dependency should be vise versa: `AbstractHazelcastEventListener` in the `HazelcastMessageProducer`. To hide the logic and make our solution more robust from any end-user violations\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26314965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26315895", "body": "No! It's bad at all. No, one active component can be `BeanFactoryPostProcessor`.\nWe are working now with `Early BeanFactory access` issues in the SI core and really don't want to repeat it anywhere.\nSee the `BeanFactoryPostProcessor` JavaDocs to understand when it is needed.\nI understand why it is necessary for your case and we already have a solution.\n1. Implement `IntegrationConfigurationInitializer`\n2. Register a `BeanDefinition` for the `ApplicationContextStartEventHandler` (renamed, of course)\n3. Add your implementation class name to the `META-INF/spring.factories`\n\nSee the sample in that DSL project: https://github.com/spring-projects/spring-integration-java-dsl/blob/master/src/main/resources/META-INF/spring.factories\nOr from the core project, e.g. `JmxIntegrationConfigurationInitializer` or `SecurityIntegrationConfigurationInitializer`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26315895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26316065", "body": "When you rework the components dependency order, all these `public` getters should be `protected`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26316065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26316449", "body": "Looks like `extends MembershipAdapter` :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/26316449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jagedn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/8c347877d97714e7888616f2639bb76bba3fddc9", "message": "ZipTransformer: Use FILENAME header if specified\n\nIf FILENAME is present at headers we must use this value as the name \r\nof zip file without conversion"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "spring-buildmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/45395e80e5d005f5f0bb3306343df552200e9d9b", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ca5867f64bdfa8e0707941dd40fcae97be072607", "message": "[artifactory-release] Release version Hazelcast 1.0.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0bd7d4e198f335b6c437713d06be4f7cf9881cdd", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/410e58b9488d97f17e3de4050e2b01b5365624aa", "message": "[artifactory-release] Release version ZIP-1.0.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/848ae2d6a0d92dedd4a65050a3f5a4d79ff69c78", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/541bea384d06cdcc05b2cc7bc1f40a98ac60967e", "message": "[artifactory-release] Release version 1.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ab73b6cd2c1e21b7f4cd0bee3d106a05097d4af3", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/253512a44265133ae1bb0dc002116fb4f2df6fcb", "message": "[artifactory-release] Release version 0.5.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/1759030fdaf1aca66c9ce329b11e8f50b94fbf4b", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c6c154220d558e83bf680d29d18f5142f9426a51", "message": "[artifactory-release] Release version 1.0.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ba52da8d0c808561cad4ddbd96c3990080d0d6bf", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/fdbbd74c4e6448de07bc5ff6e612899a12cb94be", "message": "[artifactory-release] Release version 0.5.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/37d70e0e8428ce90f55dcf5d118a4a311e0506c6", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/af4583fe27ca06b6bb18c70171e43295d2b04178", "message": "[artifactory-release] Release version Hzelcast 1.0.0-M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4caccc2ae00152ad2fa98c31ab93b8d8258c7c76", "message": "[artifactory-release] Kafka Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4f4717d9f5d5c4ed87038400d04a629e27614d9a", "message": "[artifactory-release] Release version Kafka 1.0.0.M2 (#2)"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/bfdcd7ad1d86abb532274f6076f7285c541e11df", "message": "[artifactory-release] Kafka Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b28faa34d9447a78a962dc533d65e41ace2214cc", "message": "[artifactory-release] Release version Kafka 1.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e144feb1b35e8175e659a4792a6912a2e74566bf", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/879024d97e429bcd095a0005be605dd6816f45e0", "message": "[artifactory-release] SI Java DSL release version 1.0.0.RC1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/782999f5764f26dd02e30b973eabf06e3e7a3757", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/16b363a0455431e86756ed63aeafd74b7fd95d58", "message": "[artifactory-release] SI Java DSL Release version 1.0.0.M3"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/a0e93b4c94ea28d7d45b82ba4b7d61c4dfb66dce", "message": "[artifactory-release] Splunk Release version 1.1.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7e0068b9df862d072228c7256b325b442b3305dc", "message": "[artifactory-release] Next development version (kafka)"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/46b5cc438a302fc2269183db4d306a66e78ff59b", "message": "[artifactory-release] Release version 1.0.0.M1 (kafka)"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c515a566fffa29452a9733fda587cb26e5b16021", "message": "[artifactory-release] SMPP Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/455a1ef76650a2c6f7e75a5b4eca5411c05a5acd", "message": "[artifactory-release] SMPP Release version 1.0.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/2ed3ad747477ba4cfcea0aba824dbda78201119d", "message": "[artifactory-release] SMPP Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4519168dfc69f66c648f2b0d46ea68d296b24a38", "message": "[artifactory-release] SMPP Release version 1.0.0.GA"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/2b049dd47835c11198b153767493da72d774d64d", "message": "[artifactory-release] Next development version Java DSL"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5bb2e40ecc8fb83e622207ba272f20cbde5df0b6", "message": "[artifactory-release] Release version Java DSL 1.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c8ed4a5036dffb1a7e2b19ae022d8f3d5d57fa7b", "message": "[artifactory-release] Splunk Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4adcd74534be15f832ca0636e12ee960d637e025", "message": "[artifactory-release] Splunk Release version 1.1.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/cce7bb94b38564c553321a109cc4718700975200", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/57469b39770bc8fd169ac7e5555208c99debe515", "message": "[artifactory-release] Release version 1.1.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ae579c66863081134b3c3472800ebee3c91ff427", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/9dad1a01c5aea318fae8d949069732841ad8554c", "message": "[artifactory-release] Release version 4.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b1b4517f9bddbdf1860fe3659294a7d49e00d2e1", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b3f995967dd2497210054363444fa3fd3767b54f", "message": "[artifactory-release] Release version mqtt 4.0.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/54f8cd306d5b7de47ec14281dc5a336d103253eb", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/a779d7f8ffc766ea1ef35b89ca5ec92bb2af2050", "message": "[artifactory-release] Release version 1.0.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/6f322f0a579aa5d83b030cbb69a862cdb4a60328", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/012ad70fc5de62ebdb80f6eedbb5f1ec0c7a44fe", "message": "[artifactory-release] MQTT Release 1.0.0.RC1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/793f1bf43cfb5c680a7498f8fd93323bbd60d564", "message": "[artifactory-release] Release version 1.0.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b139943b46a82d7e3c5493b02ea6587255c63424", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/665c27022b3d4464070433fc9a282bdd45871dff", "message": "[artifactory-release] Release version 1.0.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7c3031346c46de1b6e009c834ebc8035982b681e", "message": "[artifactory-release] Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b914625920a26fb3a014242b522e3e4921224a58", "message": "[artifactory-release] Release version 1.0.0.M1"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viniciusccarvalho": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/89e6274cc577e4a8974e171a88d44906063111b0", "message": "Initial implementation of HazelcastMetadataStore\n\nHazelcastMetadataStore improvements\n - Adding ListenableMetadataStore capabilities\n - Extra tests for listeners\n\nRequested changes from review\n\n* Make `HazelcastMetadataStore.MapListener` as static class"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/894a60b8bb4da626023f30c2815419d3afc02097", "message": "Add Hazelcast MessageStore implementation\n\n- Hazelcast implementation of the `MessageStore`\n- Test case uses the same tests as gemfire plus a couple of more scenarios\n* Some polishing and Docs"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "garyrussell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0ba841416b9f7f54e29a958172ba7bb2b0e13392", "message": "Fix Contributing Link"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/3318a4ddeb7c69259370e91194edd64b1cc9206a", "message": "INTEXT-39 Remove Experimental WebSocket Code\n\nJIRA: https://jira.spring.io/browse/INTEXT-39"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/87745d43a13073d6cb8d982586fad67454edf1b5", "message": "DSL: MailTests - SearchTermStrategy\n\nChange lamda expression to a Method reference."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/070252961d833fd100fe59e3118720983487194b", "message": "DSL: Fix Tail Tests\n\nTiming problem - set end(false), don't start adapter until file\nis written."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/a5bb4e125f4525db6ab22093a68ec7954d24d1d4", "message": "DSL: Mail - Add IMAP Idle Adapter\n\nPolish IMAP test server and update it to support IDLE.\n\nPolishing\n\nPolishing - Fix IMAP Server\n\nChanges required because receiver is now initialized."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c67320e7bc59f5d882c6adc2f370d10ca9d57ff1", "message": "DSL: Mail Polish - Add SearchTerm (lambda) To Test"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/89cb4e137d8bc227c46a033cc8eb11f6c643acb2", "message": "DSL: Mail Inbound Adapters\n\nAdd POP3 Server for Tests\n\nPolishing; PR Comments; IMAP4 Server"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ba4f52d59cede8881e4e3757b097858163d5230e", "message": "DSL: Mail namespace & `MailSendingMessageHandler`\n\nDSL:Add SMTP Mail Server\n\nPolishing - PR Comments\n\nDSL: Mail: add `PropertiesConfigurer` lambda\n\n* Move `IntegrationFlowTests` to the `flows` package to avoid cross scanning for components\n* Make `MailTests` as integration test and move `Mail.outboundAdapter` to the `IntegrationFlow` `@Bean` definition"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/8dc41021b838363518e64127f68a9eb8df19cc8c", "message": "Update kafka to Spring Integration 4.0.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5bf98b033b69ce9acc5d807fca49c668989ef634", "message": "Remove spring-integration-mqtt from master"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/cca2fbcc7485590e6c0d39ca956ca5a511d61549", "message": "MQTT Update to SI 4.0.0.M2, SPR 4.0.0.RELEASE\n\nConflicts:\n\tspring-integration-mqtt/build.gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b22a130a87e02741f339c1e55868b01a7ad177d7", "message": "MQTT - Update to Spring Integration 4.0.0.M1\n\nConflicts:\n\tspring-integration-mqtt/build.gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/46cf219b448c8c56ff4209d23f766664962a4a17", "message": "MQTT - Use INT/SPR 4.0.0\n\nConflicts:\n\tspring-integration-mqtt/build.gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/34efe4b2621a11c9fe122e53ac7d161f1bcafedf", "message": "MQTT: Add README note: Moved to Spring Integration"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ec27ef2344f2c5c02ebc159b06dac8a4cd767919", "message": "MQTT Reset Barrier At Start of Tests\n\n- Also remove ...java~ file."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/59a2a378136b68075065f83d4308c1487a99c15e", "message": "Update README.md\n\nAdd a note about the move to the main Spring Integration project."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/369dca42f3a5ff39354018ed9c06e419e89ec3b7", "message": "MQTT Update Spring, SI Versions"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/592bf6808626b9cc6d80c4cfd4710df4f5609b99", "message": "INT-3336 Add error-channel to MQTT m-d-c-a\n\nJIRA: https://jira.spring.io/browse/INT-3336\n\nPreviously exceptions thrown in a flow downstream of a\nmessage-driven-channel-adapter were not logged and thrown\nback to the client, causing the connection to drop and\nreconnect.\n\nAdd `error-channel` to the adapter to allow normal\nerror handling. If no error channel, catch and log\nthe unhandled exception.\n\nAdd `adapter.stop();` in the end of 'real' tests to close the mqtt-connection.\n\nDisconnect the client after verifying the broker is available.\nChange the rule to a class level rule in DownstreamExceptionTests."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e91b6de83c16b86d166e638c15425c10b255b663", "message": "Make gradlew Executable"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b588aa466784ea0c9adcbc20179c424df3fc60f9", "message": "INTEXT-90 Update Paho Client to 0.4.0\n\nAdd eclipse paho repo."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/76c65ec6db96dedbf46268a513d5091e030efaeb", "message": "INTEXT-89 Fix Inbound Stop When No Server\n\nThe reconnection task was not canceled in doStop()."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/506708671338a104ef56e48035c0e653914cff9d", "message": "Revert version to 1.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e8d45f216376a9af384fb81c61a9bf83185da6b0", "message": "INTEXT-71 Fix Typo in README"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/8987dc3b5107bc024aed1fd7e25b5bcb57f45ccf", "message": "INTEXT-71 Add Maven To README.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/d3eb5dbd15869ddfb14c24793c2d1ba99e38696e", "message": "INTEXT-71 Update MQTT Extension to SI 3.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/745dd018ca58f8b4ffb06f6306a23a82afd7d1a0", "message": "INTEXT-64 MQTT Adapters\n\nSee README.md for more information.\n\nhttp://jira.springsource.org/browse/INTEXT-64"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/1d6caa21add112a77c2aa83ccbe8b64df234274b", "message": "INTEXT-45 Fix INT-2936 Work Around\n\nWhen not using NIO, could get a message\n\"Max supported length exceeded\" if the\nsocket is closed abruptly."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e068031aba2f73cdc7ffed58531cc829e250c864", "message": "INTEXT-47 WebSocket PING Polishing\n\nUse last receive time (instead of last send) because mostly\nwrite sockets (from the server perspective) may still time out."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/d1046c96923046b07e78387af28ba582ee0b7f66", "message": "INTEXT-47 WebSocket Scheduled PINGs\n\nSend a ping every 25 seconds to all open WebSockets.\n\nConfigure interval using 'pingInterval' property on\nWebSocketTcpConnectionInterceptorFactory.\n\nSet to 0 to disable pings."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7d81ee80aba4da0b271836e032be06428662d01b", "message": "INTEXT-45 Polishing Add CF Bean Name to Event"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b1448bdc60a518d4c7dedf61addd89900fe19476", "message": "INTEXT-45 Add Work Around for INT-2936\n\nNeed to check for closed stream with NIO."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/eb8f24f7b2941d4d2b901317f1b0934c0ff90533", "message": "Merge branch 'INTEXT-45'"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/870f76b58fe74db529de0cffa5dec6dd5b1c60f1", "message": "INTEXT-45 SI 3.0.0.M1 - now  1.0.0.BUILD-SNAPSHOT\n\n- Use core TCP eventing for WebSocketEvents; change Type literals to enumerations\n- Use a WebSocketMessageMapper instead of rebuilding the message in the interceptor\n- Use core TCP Abstract Serializer\n- Use 3.0 API instead of reflection to get key for Deserializer state"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5ecf931be69fc02487394d6bdad8d03428bf4c56", "message": "Revert \"INTEXT-45 Update to SI 3.0.0.M1\"\n\nThis reverts commit 5278aebd957653290f718c6e8ad5b38c7931f8ad."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/5278aebd957653290f718c6e8ad5b38c7931f8ad", "message": "INTEXT-45 Update to SI 3.0.0.M1\n\n- Use core TCP eventing for WebSocketEvents; change Type literals to enumerations\n- Use a WebSocketMessageMapper instead of rebuilding the message in the interceptor\n- Use core TCP Abstract Serializer\n- Use 3.0 API instead of reflection to get key for Deserializer state"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b284307878b197c6322ea7b159c6d52d11081504", "message": "Fix WebSocketEvent getter Visibility\n\nprotected instead of public"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/a0c87a49e7db51cd60ae35f9e8a5015271174979", "message": "Fix WebSocketEvent getter Visibility\n\nprotected instead of public"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/d66b3c47947bf48b07584d9908773fde0b997dac", "message": "Add WebSocket Events\n\nBuilding on TCP Event publishing in S.I. 3.0, add events\nfor 'HANDSHAKE_COMPLETE' and 'WEBSOCKET_CLOSED'.\n\nUpdate DemoService to consume these events.\n\nChange ws.html demo so that the service is started immediately\nand the 'command' box is now prefilled with 'stop'.\n\nWhen closing the websocket, the DemoService immediately\nremoves the connection from its map, rather than waiting for\nan exception on the write."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/1b47b546c3d8a85a80d1a35cb7581042cc9129e5", "message": "INTEXT-33 Add Path and QueryString Headers\n\nCapture the URI path and query string and provide in message\nheaders for each message received on a web socket.\n\nFix tests package name."}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/2034dbb6c88967b3d459475e1dc9c0c80bc01642", "message": "INTEXT-24 Lightweight WebSocket Server\n\n* Add Lightweight WebSocket Server Support\n* Run WebSocketServerTests and open ws.html in a browser.\n  - Sending 'start' begins sending an incrementing # once per second.\n  - 'stop' stops the stream (leaving the socket open), 'start' resumes again.\n  - Test terminates after 60 seconds.\n* Fixes and Improvements for WebSocket Server\n  - fix masking\n  - fix bytes sent\n  - add error handling to remove dead sockets\n  - create new web page instead of using vert.x example\n  - add status box\n  - automatically update message to send to start/stop appropriately\n  - update SI to 2.2.0.RELEASE\n  - change test to a main()\n* Use Interceptor for Handshake\n* Move handshake to an interceptor instead of doing it in the SI flow.\n* Add close button to web page.\n* Add code to remove state from deserializer on close.\n* Implement Orderly Close Per RFC6455\n* Rename Packages - org.springframework.integration.x.*\n* Change Version to 0.1.0.\n* Autbahn Test Suite - All Tests Pass\n  - 1.1.x tests from the Autobahn Test Suite.\n  - Autobahn 1.2.x Tests (Binary)\n  - Autobahn Test 2.* (Ping/Pong)\n  - Autobahn Tests 3.* (Reserved Bits)\n  - Autobahn Tests 4.* (Invalid Opcodes)\n  - Autobahn 5.* (Fragmentation)\n  - Autobahn 6.* (UTF-8 Handling)\n  - Autobahn Tests 7.* (Close Handling)\n* \"non-strict\" results - fast fail on bad UTF-8. We currently don't detect the bad UTF-8 until all fragments are received.\n* Run AutobahnTests.java and add the following to fuzzingclient.json...\n\n    {\"agent\": \"SIServer\", \"url\": \"ws://localhost:18080\", \"options\": {\"version\": 18}}\n\n* Remove sysout\n* Replace with logger.debug().\n* Remove SockJS Dependencies\n  - Project started as a SockJS client; WebSocket classes were incorrectly dependent on some SockJS code.\n* Extracted the WebSocket code to its own class hierarchy.\n* Test Autobahn with SSL (wss://...)\n  - Add trust store and key store.\n  - Add config to listen for wss: as well as ws: connections\n* To test Autobahn for both ws and wss - In the wstest config file use:\n\n    \"servers\": [\n        {\"agent\": \"SIServer\", \"url\": \"ws://localhost:18080\", \"options\": {\"version\": 18}},\n        {\"agent\": \"SIServerSSL\", \"url\": \"wss://localhost:28080\", \"options\": {\"version\": 18}}\n              ],\n\n* Polishing + Resequence when Using NIO\n  - Improve debug logging\n  - Clear fragments\n  - Add ResequencingMessageHandler to resequence messages when using NIO (frames can arrive on different threads, out of order; this causes issues with the Autobahn tests.\n* Reject Non WS Connections\n  - only apply Resequencer if NIO Connection factory is configured with apply-sequence.\n  - check protocol version - only 13 is supported."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18009984", "body": "Sorry - I see Gunnar already took care of this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18009984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19294777", "body": "Hi Jon, \n\nNot an exhaustive review at all; it's late here in Europe; just thought I'd point out a couple of things that jumped out at me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19294777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19424342", "body": "Again, after a very quick review...\n\nUnfortunately, we have a naming collision; subscribable chanels in SI (Direct and Pub/Sub) already have a `<dispatcher/>` child element. So a `dispatcher` attribute doesn't sound right - maybe a `<dispatcher/>` child element with a `type` would be more consistent?\n\nAside from that suggestion, I don't have a good answer for the name collision (SI dispatching is not the same as reactor dispatching) but, for consistency, the reactor channel needs to subclass `AbstractSubscribableChannel` so it can use other SI \"dispatcher\" features (such as a pluggable load balancing policy - round robin etc). \n\nWe also need a `<reactor:publish-subscribe-channel/>` in addition to the `<reactor:channel/>` (the pub/sub channel gets an SI Broadcasting dispatcher).\n\nI am not saying these functions couldn't be done with reactor features, but we need to dovetail them properly with existing SI concepts. Users will expect it to work consistently with existing endpoints (such as honoring the `order` attribute on subscribed endpoints). They should be able to drop in a reactor channel to replace an existing channel without having to change or reconfigure any other components in the flow.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19424342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19441863", "body": "After sleeping on it for a few hours, I don't like the idea of conflating the two dispatchers into the child element; I also don't like the idea of having a 'dispatcher' (reactor) attribute and a `<dispatcher/>` child element. But we have to have the latter for the reasons I stated above; how about we just pick the default reactor dispatcher implementation and if they want something else, they have to provide an externally configured Reactor using the `ref` attribute??\n\n```\n<int-r:channel id=\"foo\" ref=\"myRingBufferReactor\">\n    <int-r:dispatcher load-balancer=\"round-robin\" failover=\"false\" />\n</int-r:channel>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19441863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19494701", "body": "I realize you've closed this, but I figured this is the best place to reply to your comments.\n\nI realize your drive is for performance, but it has to fit in the context of Spring Integration and its fundamental concepts. It's not clear to me what reactor will do when multiple endpoints subscribe to this channel - does the last one win, are they round robin'd? can the reactor's dispatching algo understand and use the Handler's `Ordered` interface? how do you limit the #of subscribers? can we switch to a different algo? What about failover (when a call to one handler fails should we fail over to the next, or not)?\n\nMaybe you can retain compatibility (and performance), by adding (sync?) reactor-based implementations of the SI `MessageDispatcher`s that might be used with this channel. That way, your main reactor dispatches to the channel, which then invokes the proper downstream handler according to SI semantics. Maybe the two reactors can be one?\n\nAnother observation - if there are no subscribers, or the message fails to be delivered to any subscriber, an error message needs to go to an error channel.\n\nAgain, this is \"free\" if you use an existing  SI dispatcher (once the message is dispatched by reactor to the channel), but would have to be added to your implementation if not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19494701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/30550328", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/30550328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31047483", "body": "LGTM; merging\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31047483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35743137", "body": "Hi Esteban; to-date, we have been putting SI 4 dependent versions on the SPR40 branch.\n\nI am ok with this being on master, but we should bump the version (0.6?) so at least we could create a branch if a patch is needed for 0.5 for SI 2.x/3.x users.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35743137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35752534", "body": "Good point, maybe we could make a new KafkaSI4 branch from master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35752534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/38709647", "body": "Hi Glenn, \n\nThis needs to be done on the SPR40 branch not master - we need to keep master compatible with SI 3.0.x for now.\n\nAlso, you already have a merged PR on that branch that brought splunk up to SI 4.0.0.M2 a few months ago...\n\nhttps://github.com/spring-projects/spring-integration-extensions/pull/62\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/38709647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/39393386", "body": "I am not familiar with the kafka extension but after a quick look I believe your assessment is correct; polled adapters should return `null` if there's no content.\n\nIf you are interested in making a contribution, please see the guidelines in the wiki: https://github.com/spring-projects/spring-integration-extensions/wiki\n\n@sobychacko\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/39393386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41243284", "body": "Hi; thanks for the contribution; apologies if you already did so, but did you \"sign\" the CLA?\n\nhttps://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41243284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41312000", "body": "merged \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41312000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41458810", "body": "Great! Please be sure to \"sign\" to CLA as discussed under `Contributing` in the [README](https://github.com/spring-projects/spring-integration-extensions/blob/master/README.md)\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41458810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43269342", "body": "Sorry; we've been tied up with releases; @dturanski @ghillert  - any chance one of you can take a look at this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43269342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44270026", "body": "Artem; my fault; I should have closed this; I worked with @andypiper last year to make this happen.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44270026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44326264", "body": "You need to add `@ComponentScan` to `MyIntegrationFlow` - Spring only looks for `@Component`s when that annotation exist. Or, if you are loading these beans from XML, use `<contexy:component-scan/>`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44326264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44344034", "body": "How are you creating your application context? The sample that uses Spring Boot works just fine...\n\nhttps://github.com/spring-projects/spring-integration-samples/tree/master/dsl\n\nI suggest you turn on DEBUG logging for `org.springframework` all the wiring will be logged, and it should become clear.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44344034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52184080", "body": "@artembilan  please make an aws.0.5.x branch before merging, and bump the version for this PR to 1.0.0.BUILD-SNAPSHOT - we need to cut an 0.5.0.RELEASE for the user that requested it; thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52184080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358439", "body": "This looks good - I like the way you keep track of real objects (channels etc) created in the flow, and then turn them back into Bean Definitions.\n\nHowever, I think we need to make the properties on the `Spec`s all Strings, so we can populate the BeanDefinition properties with placeholders etc; for example...\n\n```\nreturn IntegrationFlows.from(MessageChannels.direct().id(\"input\").setFailover(\"#{foo}\").get())...\n```\n\nWe could even throw away the original object and let Spring create a new one from the (resolved) properties.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358480", "body": "We could add some more convenience methods, such as...\n\n```\npublic static DirectChannel direct(String name) {\n    return MessageChannels.direct().id(name).get();\n}\n```\n\nwhich would allow this...\n\n```\n    @Bean\n    public IntegrationFlow uppercaseProcessor2() {\n        return IntegrationFlows.from(MessageChannels.direct(\"input\"))\n                .transform(\"payload.toUpperCase()\")\n                .channel(MessageChannels.direct(\"output\"))\n                .get();\n    }\n```\n\ninstead of ...\n\n```\n    @Bean\n    public IntegrationFlow uppercaseProcessor() {\n        return IntegrationFlows.from(MessageChannels.direct().id(\"input\").get())\n                .transform(\"payload.toUpperCase()\")\n                .channel(MessageChannels.direct().id(\"output\").get())\n                .get();\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358536", "body": "Perhaps the String setters could be alternatives \n\n``` java\n    public S failover(Boolean failover) {\n        return this.failover(String.valueOf(failOver));\n    }\n\n    public S failover(String failover) {\n        this.failover = failover;\n        return _this();\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358565", "body": "Or\n\n``` java\n    public S failover(Boolean failover) {\n        this.attributes.put(\"failover\", failover);\n        return _this();\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358717", "body": "Then, I think this object (spec) could become our common integration layer below the XML parsers and the DSL - the current parser logic (mutually exclusive attributes etc) move to this class and then the parsers can simply load up the attributes and the validation can be done at bean creation time.\n\nPerhaps remove the `get()` and simply provide the `Spec` in methods like `IntegrationFlowBuilder.channel()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358841", "body": "Sorry didn't see your replies; thought you were sleeping :smile: \n\nThis was just my ramblings; food for thought.\n\nThe reason I mentioned placeholders (I agree they might not make sense), is that I saw that you had come up with a solution where a single `@Bean` results in a number of `BeanDefinitions` being registered. To simulate what the parsers do.\n\nClever.\n\nIt got me thinking that, if they are bean definitions, then why not allow them to be real definitions. In effect, your \"spec\" objects become a definition for a bean definition (or MetaBeanDefinition).\n\nWe could (later) change the parsers to also generate MetaBeanDefinitions and (in all cases) wait for the `DslIntegrationConfigurationInitializer` to create the actual definitions (of course, it would not be just Dsl... then.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358927", "body": "ok; makes sense; let's sleep on it.\n\nGood work!!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/5358927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6695694", "body": "Exception?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6695694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6697018", "body": "This looks a bit smelly - it's not really a gateway in the real sense because we always delegate to the listener's `GatewayDelegate`.\n\nBut I understand why you needed it... \n\n`public static IntegrationFlowBuilder from(MessagingGatewaySupport inboundGateway)`\n\nPerhaps, in core, we should introduce a higher level abstract class `AbstractMessagingGateway` with abstract setters and have `MGS` extend `AMG`; then the `IntegrationFlowBuilder` can use `AMG`.\n\nEDIT: Nope; that won't work - darned Java single inheritance :frowning: . It would have to be an interface; ugh!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/comments/6697018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4645787", "body": "Inbound adapters dont't 'implement SubscribableChannel' - it tightly couples the consumer to the producer - you can't change the implementation with configuration.\n\nInstead, these \"message-driven\" adapters extend `MessageProducerSupport` (a subclass of `AbstractEndpoint`) that gets an outputChannel injected which is invoked by `super.sendMessage()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4645787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4645816", "body": "This doesn't belong here; just add a `<bean/>` of type `IdGenerator` to the context and SI will automatically wire it in.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4645816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4645860", "body": "We typically pull in core spring versions transitively, through Spring Integration; are you using Spring 3.2 features? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4645860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4261441", "body": "Hi Amol,\n\nWe recently changed the abstract remote outbound gateway in the `file` module to use an enum for commands, and a switch statement; it looks a lot cleaner (https://github.com/garyrussell/spring-integration/blob/master/spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java)\n\nI also wonder if this class should really be a subclass of that or, perhaps if you think it wouldn't reuse much of the code, we should consider doing some more refactoring there, to make reuse easier.\n\n??\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4261441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4284787", "body": "No I agree. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4284787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4340194", "body": "Sounds good!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4340194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567915", "body": "I'd rather not go that far this time around - we can always improve later - I think our time is better spent on more adapters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16567915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16569698", "body": "Makes sense; will do when I add the integration test.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16569698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570168", "body": "I like the way this looks...\n\n```\n.javaMailProperties(Mail.properties()\n        .put(\"mail.debug\", \"true\")\n        .get())\n```\n\n...the user doesn't need to know it's a `PropertiesBuilder` - but I will defer to your preference if you insist.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570520", "body": "I don't think password without user (or user without password) is valid so one method (`credentials(...)`) should be ok\n\nWhat type of assert? It's not required if the server doesn't require it (although most do these days because of spam and bots).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570856", "body": "How can that work? `Properties` is not a functional interface.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16570856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16618079", "body": "I just happen to already know the protocols. IMAP 4 is a little more tricky but still possible.\n\nI haven't found a suitable embedded server - Apache James is too heavyweight for what we need for testing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16618079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16715026", "body": "It might not always be a lambda - someone could implement their own concrete `flow.define()`.\n\nWe should check `bean.getClass().isAnonymousClass` if needed, but I suspect we don't need to know whether it's a lambda or not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16715026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/17503628", "body": "An `AtomicBoolean` won't work here - you can get an NPE on the next statement. You need a synchronized block with a double null check.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/17503628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504162", "body": "Why do we need `fromMessageSource` rather than just `from` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504194", "body": "strange indentation\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18504194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18505606", "body": "Seems like a step backwards to me; maybe I am missing something (entirely possible).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18505606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19410992", "body": "Needs JavaDocs\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19410992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19412327", "body": "Minor polish here: https://github.com/garyrussell/spring-integration-extensions/commit/1120e2ecabbbcbee18b30f60bf7aad194232ad34\n\n`readOnlyException` doesn't seem right here - we're only \"reading\" the type.\n\nThat said, can't we determine the return type by introspecting the `Function` ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19412327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19467004", "body": "doh; sorry\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19467004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19575787", "body": "Need to give channels like this a `beanName` for logging etc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19575787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19602117", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/19602117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20248037", "body": "Do we really need a new decoder for each `fromBytes()`?\n\nCould we at least use a single `VerifiableProperties`.\n\nSeems strange to have to create 3 objects for each conversion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20248037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20248629", "body": "Just looked at the Scala bytecode and the only state (field) is the encoding - it looks thread-safe and we can use a `final`instance as long as we pass the encoding in via a constructor instead of a setter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20248629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18331479", "body": "`Assert.notNull()` in `onInit()`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18331479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18331944", "body": "A bit late now, but these should really be `KafkaHeaders` constants with prefixes (`kafka_*`).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18331944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18852775", "body": "We will need to make sure XD changes it too - the kafka bus PR uses a hard-coded `messageKey`.\n\ncc/ @ericbottard\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/18852775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dsyer": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/92a01dbe2969dda83c662ba48d90e92a7ab8bc76", "message": "Migrate leader election support from Spring Cloud\n\nFix `LeaderInitiator`\n\n* Implement `SmartLifecycle` instead of just `Lifecycle`\n* Add `Assert`s\n* Rework logic from `IMap` for locks just into single `ILock`, since we require it only for the `role` as a key\n* Fix `Future.cancel(true)` logic via rescheduling\nSee https://jira.spring.io/browse/INT-4058 and its commit comments\n* Add more complex test-case to meet distributed requirements and verify several `yield()` cycles"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/163", "title": "Migrate etcd features from Spring Cloud", "body": null, "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "englishman": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/8dcca5b676f19dc0e070fd4f986311c70aa11a77", "message": "INTEXT-219 Remain request headers after splitting\n\nJIRA: https://jira.spring.io/browse/INTEXT-219\n\nINTEXT-219: add unit test\n\nINTEXT-219: fix missed headers\n\nINTEXT-219: update file headers\n\nINTEXT-219: simplify context\n\nINTEXT-219: add test for preserving service header values\n\nINTEXT-219: rename auxiliary methods\n\nCode style polishing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erenavsarogullari": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0efd494337d0b3a45b79a6cd65da79e585042e27", "message": "INTEXT-158: JavaConfig tests and upgrades\n\nJIRA: https://jira.spring.io/browse/INTEXT-158\n\n* Provide the test cases to demonstrate the Spring Integration Hazelcast adapters usage from the JavaConfig\n* Upgrade to Hazelcast-3.6, SI-4.2.4, Gradle-2.5\n* Fix Hazelcast-3.6 compatibility\n* Fix failing tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/573e1f301f5f3ca3a6cc8a8c89977c2e594692e1", "message": "INTEXT-167: Add Cluster Monitor Channel Adapter\n\nJIRA: https://jira.spring.io/browse/INTEXT-167\n\nSome refactorings are done.\n\nHazelcast Cluster Monitor Unit Test Refactorings are done.\n\nSome minor bug fixes are done.\n\nRedundant assert is removed.\n\nHazelcastInstance lifecycle check is added\n\nMigration Event UT Case is updated.\n\nCode style polishing and upgrade to the `spring.io.plugin-0.4.0`"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c6975af37b26dc06ea6f80e008065410c664342c", "message": "INTEXT-149: Refactor HCCacheWritingMessageHandler\n\nJIRA: https://jira.spring.io/browse/INTEXT-149\n\nSome refactorings are done.\n\nPolishing\n\n* Add `IllegalStateException` for wrong `distributedObject`\n* Add an invalid test to attempt to write to `ILock`"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/95f7b239f7e43854241ce52f6ebaefce55986fa7", "message": "INTEXT-150 Extract Hazelcast Headers and Payloads\n\nJIRA: https://jira.spring.io/browse/INTEXT-150\n\nRefactorings are committed.\n\nPolishing:\n* Add generic type to the `AbstractHazelcastEventListener` for cleaner implementors\n* Remove redundant `Assert`s\n* Polishing some code style"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/bfec7640ca8b6567255a5ffbb5bcb60e55c4a287", "message": "INTEXT-142: Add Spring Integration Hazelcast\n\nJIRA: https://jira.spring.io/browse/INTEXT-142"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fbalicchia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f7b31228c2839e2a2f77caf27bcc33c04efa4649", "message": "INTEXT-215: Cassandra Namespace Support\n\nJIRA: https://jira.spring.io/browse/INTEXT-215"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghillert": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/416cc39da4188469bdd508d992250bba4263ffd2", "message": "INTEXT-40 Add ZIP Transformer\n\n* Add zip-transformer\n* Add unzip-transformer\n* Add UnZipResultSplitter\n* Add sample\n\nFor reference see: https://jira.springsource.org/browse/INTEXT-40"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c9348c66f0ad0ab5ba913bcdd2dc2eac789c714d", "message": "Splunk next development version 1.2.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/ab3b62e0aaec086629a6fa4d65868a1d28fbb95c", "message": "Merge pull request #58 from relango/merge-master-kafka-topic-filter\n\n* relango-merge-master-kafka-topic-filter:\n  INTEXT-77 Add Kafka topic filter support for producer + consumer"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/9fe0d02ef8152f7254cb8e39df692e12a8b67285", "message": "Merge pull request #56 from sobychacko/INTEXT-84\n\n* sobychacko-INTEXT-84:\n  INTEXT-84 Kafka: Enhance Avro serialization support"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/d99de8c740911362e8f0966a7f0429bf67faef75", "message": "Merge pull request #55 from ghillert/INTEXT-83\n\nINTEXT-83 Update to Kafka 0.8.0-beta1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/bd173c8197fb85a9678271c52f7a7f838e491700", "message": "INTEXT-83 Update to Kafka 0.8.0-beta1"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/9bfee927430ab5b932f09c03c3f4e9aa83bf8929", "message": "Merge pull request #43 from kcrimson/master\n\n* kcrimson-master:\n  INTEXT-65 Add JGroups Extension"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/4ffdabdee60081f8565ede5f0fd309520c3ec1a2", "message": "Merge pull request #52 from bellwethr/master\n\n* bellwethr-master:\n  INTEXT-81 Add unit tests\n  INTEXT-81 Fixing bug in decoding message streams * adding a null check on the key decoder"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7d0806c7739fc0d96363eb12d55a351bc35c1e6f", "message": "INTEXT-81 Add unit tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e1f400e2cf329473501950fe451d0c9b6ed00159", "message": "Update README.md"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/9b7fba196d17a2039163111984ab3cfd0c92ffac", "message": "Updated list of available modules"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7538eb4ecde61db5fb5af7592933e584b08db7e2", "message": "Merge pull request #49 from ghillert/INTEXT-70\n\nINTEXT-70 - Set code coverage plugin for Sonar"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f30e5bb196cac89cf87296169d6ea0cfc532b5b7", "message": "Merge pull request #47 from ghillert/INTEXT-68\n\nINTEXT-68 - Update MQTT dependency"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/9a0b591f1ddb6fccb6d69730b81fd2df3016420e", "message": "Merge pull request #46 from ghillert/INTEXT-69\n\nINTEXT-69 - Splunk: XSD not bundled correctly"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/edeac2d709fb20c7a4c00fb6b4907df995543d78", "message": "Merge pull request #45 from ghillert/INTEXT-67\n\nINTEXT-67 - Upgrade to Sonar-Runner"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/0f23fe79cce10b43c686e602ba74c72f9e3cc25b", "message": "Merge pull request #38 from damiendallimore/master\n\nCreated \"index\" field and getter/setter"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/3063278b0e96e89f30bd7c96f56fd75eb8176ff3", "message": "Merge pull request #36 from ghillert/INTEXT-59\n\nINTEXT-59 - Add XQuery Sample"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c374ac324f20d28501fc9e90d0b43ca4898be869", "message": "Merge pull request #34 from ghillert/INTEXT-54\n\nINTEXT-54 - AWS Fix Failing Tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e208afe5bbe310beb87093b7519bdd354cb42f3d", "message": "Merge pull request #33 from ghillert/INTEXT-34\n\nINTEXT-34 - Convert AWS Module to Gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/66bb802d4e55c1b5dc506959337fcb853fbba663", "message": "Merge pull request #30 from ghillert/INTEXT-37\n\nINTEXT-37 - Fix SMB - Infinite Loop"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/433a26e956acb1b53609c519336cc26433d45efc", "message": "Merge pull request #15 from ghillert/INTEXT-27\n\nINTEXT-27 - SMB Adapter - Upgrade build to Gradle 1.2"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7709300", "body": "Would probably move some classes into slightly better packages:\n- o.s.i.xquery.XQueryExecutor --> o.s.i.xquery.core.XQueryExecutor\n- o.s.i.xquery.XQueryUtils --> o.s.i.xquery.support.XQueryUtils\n- o.s.i.xquery.AbstractXQueryResultMapper --> o.s.i.xquery.support.AbstractXQueryResultMapper\n- o.s.i.xquery.XQueryParameter --> o.s.i.xquery.support.XQueryParameter\n- o.s.i.xquery.XQueryResultMapper --> o.s.i.xquery.support.XQueryResultMapper\n\nThe contents of:\n- o.s.i.xquery.config --> o.s.i.xquery.config.xml (In case we add annotation support)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7709300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7716809", "body": "@amolnayak311  Just did a quick test using [mxquery](http://mxquery.org/).\n\n```\nCaused by: org.springframework.integration.MessagingException: Caught Exception while opening a connection to the datasource\n    at org.springframework.integration.xquery.XQueryExecutor.execute(XQueryExecutor.java:281)\n    at org.springframework.integration.xquery.XQueryExecutor.execute(XQueryExecutor.java:240)\n    at org.springframework.integration.xquery.transformer.XQueryTransformer.doTransform(XQueryTransformer.java:61)\n    at org.springframework.integration.transformer.AbstractTransformer.transform(AbstractTransformer.java:33)\n    ... 20 more\nCaused by: javax.xml.xquery.XQQueryException: ch.ethz.mxquery.exceptions.DynamicException: Empty string not legal prefix in a QName\n    at ch.ethz.mxquery.xqj.MXQueryXQDynamicContext.bindNode(MXQueryXQDynamicContext.java:219)\n    at org.springframework.integration.xquery.XQueryExecutor.execute(XQueryExecutor.java:263)\n    ... 23 more\n```\n\nXML:\n\n```\n<customers>\n    <customer id=\"1\">\n        <name>Foo Industries</name>\n        <industry>Chemical</industry>\n        <city>Glowing City</city>\n    </customer>\n    <customer id=\"2\">\n        <name>Bar Refreshments</name>\n        <industry>Beverage</industry>\n        <city>Desert Town</city>\n    </customer>\n    <customer id=\"3\">\n        <name>Hello World Services</name>\n        <industry>Travel</industry>\n        <city>Coral Sands</city>\n    </customer>\n</customers>\n```\n\nXQuery:\n\n```\n<customers>\n    { //customers/customer/name }\n</customers>\n```\n\nNot yet sure why this happened. Need to investigate further later this morning. The example worked fine using Saxon.\n\n**Update** - looks like the library is somewhat buggy - exceptions happened when doing:\n\n```\nexpression.bindNode(XQConstants.CONTEXT_ITEM, node, null);\n```\n\nWe should probably for now not consider testing against _mxquery_. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7716809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7874844", "body": "Otherwise looks good to me. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7874844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7910972", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7910972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8942935", "body": "Hi Jarred @leejianwei \n\nCan you issue a separate PR for the Samples? \n\nI think the best spot for samples right now would be:\n- https://github.com/SpringSource/spring-integration-extensions/samples/splunk\n\n**Some background information:**\n\nThe _Spring Integration Extensions_ repository itself is very new. Eventually, we may decide to move the samples into their own GitHub project e.g.  **spring-integration-extensions-samples**, and thus, having a separate samples directory might be a good idea.\n\nThanks!\n\nCheers,\n\nGunnar\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8942935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9007163", "body": "Merged. Did a whole bunch of cleanup (trailing white-spaces, converted spaces to tabs etc.). For further fixes we should create a new Jira/PR. @leejianwei Thanks for the PR! One advice - For the future, please create a new branch in your personal repo per Jira. We try not to submit pull requests from master branches. For further details please see:\n- https://github.com/SpringSource/spring-integration/wiki/Contributor-Guidelines\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9007163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9213904", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9213904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11823812", "body": "Please rebase against master to get the latest changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11823812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11824133", "body": "We should probably move to a gradle-based build. But I can make that change once the PR is merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11824133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11824243", "body": "Once the code is checked out, several tests are failing. For integration tests (Using SES directly) that require configuration, we should probably use Spring's Profile support for tests (disabled by default). All basic tests should pass without the need to make configuration changes. Mock as much as possible.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11824243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11826383", "body": "Add a file _/src/main/resources/META-INF/spring.tooling_\n\nThis will provide good defaults in Eclipse/STS when adding Spring Integration AWS namespace support, e.g.:\n\n```\nhttp\\://www.springframework.org/schema/integration/aws@name=integration aws Namespace\nhttp\\://www.springframework.org/schema/integration/aws@prefix=int-aws\nhttp\\://www.springframework.org/schema/integration/twitter@icon=org/springframework/integration/twitter/config/spring-integration-aws.gif\n```\n\nNot sure about the best prefix, yet - However, since this is the AWS module, I would probably like to go with **int-aws**.\n\nThis would also have implications for the naming of the SES adapters. Thus instead, of:\n\n```\n<aws-ses:outbound-channel-adapter\n```\n\nI would prefer:\n\n```\n<int-aws:ses-outbound-channel-adapter\n```\n\nThat way, we only have to deal with one namespace when adding support for additional AWS services.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11826383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11848479", "body": "I wonder if we should name/prefix things (classes, methods) **AWS** instead of **AmazonWS**. That seems to be more consistent with the Amazon SDK naming strategy. Also, JetS3t uses the same naming strategy. Technically, I would rather use **Aws** but I think this would be too confusing in this context.\n\nTherefore, use **AWSCredentials** instead of **AmazonWSCredentials**.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11848479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11850336", "body": "Hi, \n\nDid you already sign the contributor license agreement (CLA)?\n\nhttps://support.springsource.com/spring_committer_signup\n\nIf not please submit the form (The Project Lead is Mark Fisher) and I will merge the PR. \n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11850336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12068306", "body": "Unit Tests are still failing - created a separate Jira for that: https://jira.springsource.org/browse/INTEXT-32\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12068306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12622325", "body": "Shouldn't we use Android API to do server push, rather than implementing our own infrastructure? (using **gcm-server.jar**)\n\n```\ncom.google.android.gcm.server.Sender sender = new Sender(senderId);\nList<String>registrationIds = new ArrayList<String>();\nids.add(\"12345\");\n\nMessage msg = new Message.Builder()\n.collapseKey(\"1\")\n.timeToLive(3)\n.delayWhileIdle(true)\n.addData(\"message\",\"This is a notification 423424234\")\n.build();\n\nsender.send(msg, ids, 1);\n```\n\nShouldn't we have an inbound adapters to handle client \"subscriptions\"?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12622325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12838617", "body": "Hi Lukasz,\n\nI have just added Voldemort to the SpringSource repository - `voldemort:voldemort:0.96`. \n\nCheers,\n\nGunnar\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12838617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13244544", "body": "Just 2 minor issues: \n\nCan you remove the trailing space in SplunkEventTests?\nCan you also do another rebase with MASTER? Locally I saw Git complaining about whitespace issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13244544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13299627", "body": "Addressed with PR #26 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13299627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14078112", "body": "As a general comment, why didn't you use the **FileTransferringMessageHandler** (Package _org.springframework.integration.file.remote.handler_)?\n\nAlso, you might have hooked into the **RemoteFileOutboundChannelAdapterParser**.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14078112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14082120", "body": "Please also see the Pull Request #31 which add a sample demonstrating the usage for Amazon S3.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14082120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14262260", "body": "Created follow-up Jira: https://jira.springsource.org/browse/INTEXT-51\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14262260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14531191", "body": "This is an initial (crude) version of the **Zip** and **Unzip** transformers and includes basic namespace support and a sample under **/samples/zip**.\n\nThe Zip transformer is in better shape than the unzip transformer but at least the sample works. Will do more work over the following days. I envision that the transformers will be able to handle the following input payload types:\n\n### Zip transformer:\n- File\n- Byte\n- String\n- Iterable (Not fully sure yet, how to handle this best)\n- Outputstream (experimental)\n\n### Unzip transformer:\n- File\n- Byte\n- Inputstream\n\nFor both transformers, you will be able to define a ZipResultType (need to find a better name):\n- File\n- Byte Array\n- Outputstream\n- and possibly a nested Map (handling multiple zip file entries and nested directories --> Splitter downstream) \n\nAs the underlying library, I am using zt-zip [1] but I was required to also create my own utility methods but Plan on contributing those back to zt-zip.\n\n[1] https://github.com/zeroturnaround/zt-zip\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14531191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15803583", "body": "Did some code cleanup:\n- Convert spaces to tabs\n- Upgrade to Gradle 1.5\n- Change Group Id to 'org.springframework.integration'\n- Add Sonar Runner plugin\n- Reduce Sonar warnings\n- Ensure ASL license header is present in all source files\n- Fix XSD documentation not showing up in STS\n\nAlso, I added a (very simple) Voldemort sample to the repo:\n- https://jira.springsource.org/browse/INTEXT-61\n\nFurthermore, I have setup the CI infrastructure:\n- https://jira.springsource.org/browse/INTEXT-62\n- https://build.springsource.org/browse/INTEXT-VOLDEMORT\n- https://build.springsource.org/browse/INTEXT-VOLDEMORTSONAR\n\nThe Sonar Analytics dashboard is here:\n- https://sonar.springsource.org/dashboard/index/org.springframework.integration:spring-integration-voldemort\n\nThe snapshot artifacts are automatically deployed to:\n- https://repo.springsource.org/simple/libs-snapshot-local/org/springframework/integration/spring-integration-voldemort/1.0.0.BUILD-SNAPSHOT\n\n**THANK YOU** for the contribution! Looking forward to new PRs!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15803583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17965298", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17965298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17965840", "body": "Thanks for your contribution! Did you sign the CLA? See: https://github.com/SpringSource/spring-integration/blob/master/CONTRIBUTING.md\n\nOnce signed, I can review/merge the PR. THANKS!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17965840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17966414", "body": "Wonderful! I will give it a quick review and merge it by tomorrow and will setup the Bamboo build plan accordingly. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17966414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17972857", "body": "We are trying to figure out the current versioning of the Java client also as it is not clear. See also the following Paho issue: https://bugs.eclipse.org/bugs/show_bug.cgi?id=382471#c20\n\nCurrently, you need to build the jar from source code - http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.java.git/\n\nAs soon as we get more details, we will add the jar to repo.springsource.org until the Paho client is in Maven Central.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17972857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18005565", "body": "Added the MQTT Client to the Spring Source repo (0.2.1) and updated `build.gradle` accordingly. See also:\n- Pull Request: https://github.com/SpringSource/spring-integration-extensions/pull/47\n- https://jira.springsource.org/browse/INTEXT-68\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18005565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18512312", "body": "For consistency, use the standard Spring Integration License Header:\n\n```\n/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\nHowever, add `@author` and `@since` tags to all source files.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18512312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18512628", "body": "Please also add more documentation, especially `JavaDoc`, `XSD` and maybe some introductory sentences to the `README.md`. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18512628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18594672", "body": "Merged PR\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18594672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18594775", "body": "Created a respective Jira ticket: https://jira.springsource.org/browse/INTEXT-72\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18594775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18821417", "body": "Did _VERY_ basic code review - see the polish commit. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18821417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19399520", "body": "Hi @amolnayak311 \n\nLooks like the module does not compile right now from the command line. `AmazonS3ParserUtils` is in under `src/test/java` but used by a class in `src/main/java`. Also, `AmazonS3OutboundGatewayTests` was located under `src/main/java`. Can you please fix? THX!  \n\nWhile you at it:\n\nupdate the following dependencies:\n- Spring Integration to `2.2.4.RELEASE`\n- Mockito to `1.9.5`\n- use `junit` rather than `junit-dep` (4.11)\n- You can probably remove the hamcrest dependency as it is not used as far as I can tell\n- Maybe to be super correct declare:\n  \n  testCompile (\"org.springframework.integration:spring-integration-test:$springIntegrationVersion\") {\n      exclude group \"junit:junit-dep\"\n  }\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19399520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20897596", "body": "Thank you so much for the PR! If you haven't done, yet, could you please sign the _contributor license agreement_ (CLA)? You can find the details and a link at:\n\nhttps://github.com/SpringSource/spring-integration/blob/master/CONTRIBUTING.md\n\nTHX!\n\nOnce signed I can merge the PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20897596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20982946", "body": "Added 2 unit tests and merged PR. **THANK YOU!**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20982946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20987021", "body": "Could you possibly add a some unit tests? THANKS!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20987021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20996952", "body": "Hi @amolnayak311 \n\nLooking through the namespace of `<int-aws:s3-outbound-gateway/>`, I see a few issues. Generally, I think we should align the S3 Gateway as much with the FTP support as possible in order to provide a good (common) user-experience (UX):\n- As this is a gateway, rename `input-channel` to `request-channel`\n- Add attribute `reply-timeout`\n- Add attribute `reply-channel`\n- Add `request-handler-advice-chain` sub-element\n- Add `poller` sub-element (e.g. for polling from a Queue Channel)\n- Add attribute `filename-pattern`\n- Add attribute `filename-regex`\n- The AWS adapter uses the `temporary-directory` attribute, the _ftp:outbound-gateway_ uses the `local-directory` attribute; should we keep the attributes standardized?\n- The FTP Outbound Gateway uses the `temporary-file-suffix` attribute but the AWS Outbound Gateway uses `temporary-suffix`. Should we change that for better standardization?\n- Add attribute `auto-create-local-directory`\n- The FTP Outbound Gateway also has a `filter` attribute (_org.springframework.integration.file.filters.FileListFilter_), not sure how relevant this might be but wanted to mention it.\n\nWe should be careful with the MUTUALLY EXCLUSIVE attributes:\n- remote-command=\"\" and\n- remote-command-expression=\"\"\n\nThe FTP Outbound gateway defines: \n- command=\"\"\n- expression=\"\"\n\nBoth are REQUIRED. This feels confusing.\n\nI am not perfectly sure, yet, how to best standardize this. I am not too keen on the naming for the FTP Outbound gateway but maybe we should just go with that.\n\nIf possible, the `remote-command` or `command` attribute should provide some enum definition in the XSD such as:\n\n``` xml\n        <xsd:attribute name=\"command\" default=\"PUT\">\n            <xsd:annotation>\n                <xsd:documentation><![CDATA[\n                        ...\n                ]]></xsd:documentation>\n            </xsd:annotation>\n            <xsd:simpleType>\n                <xsd:union memberTypes=\"supportedCommands xsd:string\"/>\n            </xsd:simpleType>\n        </xsd:attribute>\n\n    <xsd:simpleType name=\"supportedCommands\">\n        <xsd:restriction base=\"xsd:token\">\n            <xsd:enumeration value=\"LIST\"/>\n            <xsd:enumeration value=\"REMOVE\"/>\n            <xsd:enumeration value=\"PUT\"/>\n            <xsd:enumeration value=\"GET\"/>\n        </xsd:restriction>\n    </xsd:simpleType>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20996952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21002894", "body": "@amolnayak311 Also several package tangles exist in the project (running `./gradlew sonarRunner`). E.g. you should move the `AmazonWSParserUtils` to a separate package as there is a circular dependency between `org.springframework.integration.aws.s3.config.xml` and `org.springframework.integration.aws.config.xml`. Maybe move `AmazonWSParserUtils` to `org.springframework.integration.aws.config.xml.support`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21002894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21006031", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21006031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21007803", "body": "Hi, \n\nThank you so much for the PR! Before I forget did you sign the CLA?\n- https://github.com/SpringSource/spring-integration/blob/master/CONTRIBUTING.md\n\nAlso, I did several commits earlier. If you get a chance please rebase your PR. Lastly, please add your author tag to files that you modified. \n\nCheers,\n\nGunnar\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21007803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21966951", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21966951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25812967", "body": "@relango Can you do me a huge favor and rebase your PR with the latest master? I ran into a few issues and as you know the code better...Thanks!!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25812967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25813280", "body": "Please also double-check that there are no trailing white-spaces and that we use tabs instead of spaces.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25813280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/27257375", "body": "Merged. @relango did quite a bit of whitespace cleanup. The rebase also took quite a while and was quite tricky. Please check if everything is working as expected. It looks good know but I may have missed something. Some of the tests are still causing some warnings during compilation - may want to create a Jira for that. **Thanks for your work!!**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/27257375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/28841582", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/28841582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32549379", "body": "@lorochka  Sorry for missing the notification on this one - I went ahead a and created a Jira for this - https://jira.springsource.org/browse/INTEXT-94\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32549379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49634077", "body": "@benbramley Hi Ben, on our end we are a bit under pressure to create a release of the Spring Integration Splunk extension. Do you think you may have a PR ready by end of day tomorrow? We need to create a GA release for our upcoming Spring XD release. If not, we will temporarily remove the realtime search feature for GA, but if you have a solution you could create a PR for that would be awesome! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49634077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50025310", "body": "@artembilan Awesome thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50025310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1369532", "body": "- Need to mention [JSR 225](http://jcp.org/aboutJava/communityprocess/final/jsr225/index.html)\n- Need to mention other implementations that _should_ work with this adapter: mxquery, Zorba XQuery Engine\n- provide a section showing the declaration of respective Maven / Gradle dependencies (Task for @ghillert Setup Bamboo project/build for the Spring Integration Extensions project)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1369532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1377619", "body": "Make Saxon an **Optional Dependency**. Particular when testing/running against other XQuery implementations (BaseX in that example), I experienced very strange error behavior. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1377619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1383855", "body": "Please also provide an _INFO_ level log message, informing the user whether the SAXON library is being used or not.\n\nNot sure whether we really need to test for the Sedna libraries being present. SAXON is probably sufficient. Also, since Sedna is an external XML database, users will have to provide more detailed XQDataSource configuration parameters anyway (username, database name etc.). Thus, you can probably only try to discover SAXON.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1383855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1383861", "body": "We can go for Java 1.6 support and thus add a _@Override_ annotation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1383861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1383865", "body": "We can go for Java 1.6 support \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1383865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385097", "body": "Declare the following repos:\n\n```\n<repositories>\n    <repository>\n        <id>repo.springsource.org.milestone</id>\n        <name>Spring Framework Maven Milestone Repository</name>\n        <url>https://repo.springsource.org/libs-milestone</url>\n    </repository>\n    <repository>\n        <id>xqj</id>\n        <name>XQJ Maven Repository</name>\n        <url>http://xqj.net/maven</url>\n    </repository>\n</repositories>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385182", "body": "add\n\n```\n<prerequisites>\n<maven>2.2.1</maven>\n</prerequisites>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385207", "body": "Update version to `4.10`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385261", "body": "Add Assert.hasText(...)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385265", "body": "Add Assert.hasText(...)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385329", "body": "As the class is already 600 lines long, move to the **support package** as that one already contains _AbstractXQueryResultMapper_.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385332", "body": "As the class is already 600 lines long, move to the **support package** as that one already contains _AbstractXQueryResultMapper_.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385333", "body": "As the class is already 600 lines long, move to the **support package** as that one already contains _AbstractXQueryResultMapper_.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385339", "body": "As the class is already 600 lines long, move to the **support package** as that one already contains _AbstractXQueryResultMapper_.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385364", "body": "Change to Assert.hasText()\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385373", "body": "Add assertion for _parameterValue_.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385381", "body": "Assert.hasText()\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385398", "body": "IMO disallow null. Add assertion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385407", "body": "Assert.hasText()\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385433", "body": "May want to do a null check assertion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385453", "body": "Maybe provide some details regarding default values, e.g. if no resultMapper or resultType is set, then the _XQueryTransformer_ will default to a _String_ resultType.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1385453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415353", "body": "I would leave it _xqDataSource_. I know that PMD complains that names are too long sometimes...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415388", "body": "Not sure whether this should be final. as it is just an ordinary setter\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415558", "body": "If you want to go perfect (see http://stackoverflow.com/questions/1844355/java-static-class) throw an AssertionError\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707291", "body": "Update that to Gradle version **1.2** and also re-run:\n\n```\n$ gradle wrapper\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707392", "body": "the the (One too many)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707473", "body": "You can change this to:\n\n```\nIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"host\");\n```\n\nIf you need to do more specific validation of the value you can probably do that best in the setter of the _SplunkServer_ class\nSee for the other attributes below as well. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707621", "body": "I wonder if all those String constants could be refactored into enum classes - e.g. one enum class per category: AccountManagement, Authentication etc. Right now there are 1000+ lines of constant definitions and String constants are just not very type-safe. \n\nNot necessary to fix prior to merging this PR but maybe something to consider.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707676", "body": "in the Splunk (?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707741", "body": "Minor: Or code conventions typically favor this style:\n\n```\ntry {\n    ...\n}\ncatch (Throwable t) {\n    ...\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707784", "body": "Since this is a public enum class - Could IngestType be refactored into its own file? (With some JavaDoc)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707809", "body": "Since this whole adapter is versioned **1.0** - we should probably change any **2.2** references to **1.0** - e.g.:\n\n```\nspring-integration-splunk-1.0.xsd\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707831", "body": "Since you probably favor Markdown (README.md) to provide documentation - Should we remove all docbook references/files?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1707831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709003", "body": "Remove all unnecessary version properties.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709010", "body": "Add the **splunkVersion** property\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709039", "body": "- Remove unnecessary compile dependencies.\n- Add the Splunk dependency:\n  \n  compile(\"com.splunk:splunk:$splunkVersion\")\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709045", "body": "Remove unnecessary testCompile dependencies\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709060", "body": "Add the **splunkVersion** property: \n\n```\nsplunkVersion = '0.8.0'\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1709060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714531", "body": "Just some formatting standard we follow - The _catch_ is on a new line. Another example are if-then-else statements:\n\n```\nif {\n    ...\n}\nelse {\n    ...\n```\n\n   }\n\nFor some other conventions see:\n\nhttps://github.com/SpringSource/spring-framework/blob/master/CONTRIBUTING.md#mind-the-whitespace\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711727", "body": "You can probably rely on 2.2.RC1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711731", "body": "Update version\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711735", "body": "Update Spring version\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711765", "body": "I think, we need to refactor authentication. E.g. other adapters: Twitter has the twitterTemplate, XMPP has the xmpp-connection namespace element...\n\nMaybe we should just directly expose the **AwsCredentials** interface  \n- http://docs.amazonwebservices.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/AWSCredentials.html - Therefore users pass-in AwsCredentials via a \"credentials-ref\" attribute\n\nOtherwise users may have to pass the same information multiple times across adapter\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1711765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1712786", "body": "I am not a fan if storing constants in Interfaces. We should use an Enum instead. Also, it looks like the constants are using only by the XML Parser classes - should it be better to move the constants to the respective package - eg: \n- org.springframework.integration.aws.config.xml or\n- org.springframework.integration.aws.config\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1712786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2532626", "body": "Not sure if we need to re-invent the wheel here: \n\nWe could use a DigestInputStream or Google's Guava libraries. See for further details: http://stackoverflow.com/questions/304268/getting-a-files-md5-checksum-in-java\n\nLooks like the method is not currently used anyway (?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2532626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2532893", "body": "Shouldn't we reuse Spring's support here? E.g. SimpleMailMessage or MimeMailMessage? Or at least be based on it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2532893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2532982", "body": "Not sure whether it may make sense to provide some basic reuse of Spring's MailSender interface\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2532982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533027", "body": "- change to 2.2.0.RELEASE\n- move to property\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533056", "body": "- Change to 3.1.3.RELEASE\n- Consider using property\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533058", "body": "- change to 2.2.0.RELEASE\n- move to property\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533072", "body": "We should probably not use hard-coded email addresses.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533877", "body": "If possible comment all **Elements** and _Attributes__. Currently no descriptions are provided in the STS for the *_SES outbound-channel-adapter**. Particular for new users, having some documentation for the STS code completion would be nice. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2533877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2534117", "body": "Call it rather **DefaultAmazonSESMailSender**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2534117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539712", "body": "I wonder if the implementation should just wrap Amazon's **BasicAWSCredentials**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539822", "body": "I don't think we should care about the accessKey in the MessageHandler. The accessKey is an implementation detail of the specified mailSender implementation. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539845", "body": "Don't think we need to be aware of the accessKey here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539919", "body": "Check whitespace vs tabs here. May want to use whitespace only to separate `FROM_EMAIL_ID       =   \"fromEmailId\"`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2539919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138494", "body": "indicate the default charset\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138742", "body": "In order to provide more clarity - Maybe change it to:\n\nUsing 'Amazon Multipart Upload' you can upload data as a set of parts using parallel threads. This non-negative integer value (representing bytes) is used to provide the threshold after which the upload to the S3 bucket will be done using 'Amazon Multipart Upload'. Amazon recommends the size to be 100 MB. The minimum threshold for 'Amazon Multipart Upload' is 5120 bytes.\n\nFurther questions:\n- What is the default value? \n- What is the max value?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138769", "body": "space: bean with\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138814", "body": "Will be better to change to **DefaultAmazonS3Operations**.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138839", "body": "which uses the AWS SDK.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3138839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3140724", "body": "I would be very careful doing any sophisticated email validation. See Hibernate's EmailValidator for why:\n- http://www.docjar.com/html/api/org/hibernate/validator/EmailValidator.java.html\n- http://docs.jboss.org/hibernate/validator/4.2/api/org/hibernate/validator/constraints/impl/EmailValidator.html\n\nMaybe better to not validate at all?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3140724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3142984", "body": "This attribute should probably be named: **local-directory**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3142984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143019", "body": "Do we need this? May not be needed for the inbound adapter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143044", "body": "Similar to the _FTP Inbound Channel Adapter_ - where is the attribute **auto-create-local-directory**? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143092", "body": "Also, not sure if needed for the first iteration - but should we have an attribute **local-filename-generator-expression**?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143960", "body": "Too generic - if you have an invalid directory specified, we should tell the user **why** the directory is invalid. E.g. the directory does not exist, the specified directory points to a file etc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3143960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3144017", "body": "Change to **The temporary file suffix must not be null or empty**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3144017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3144165", "body": "**temporarySuffix** may actually be null - and cause an Assertion Exception in the setter **setTemporaryFileSuffix**. We should have a default.\n\nAs mentioned earlier, we should probably look into relying on the **FileTransferringMessageHandler**, ensuring some common default behavior across the various file transferring _Spring Integration_ adapters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3144165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3176067", "body": "Keep in mind to rename **directory** to **local-directory**.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3176067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404219", "body": "This should probably use Spring's TaskExecutor [1] support.\n\n[1] - http://static.springsource.org/spring/docs/current/spring-framework-reference/html/scheduling.html  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404263", "body": "Style - \n\n``` java\ntry {\n...\n}\ncatch (UnsupportedEncodingException e) {\n...\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404276", "body": "Prefer explicit curly braces\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404282", "body": "Should probably be your name here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4403997", "body": "Upgrade to Gradle 1.6\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4403997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404008", "body": "Remove Sonar Plugin, Sonar Runner is the only one needed - see e.g. the Spring Integration Voldemort Extension for reference.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404047", "body": "Some of the dependencies may not be need, e.g. `javaMailVersion` (?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404078", "body": "JGroups Extension (?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4404078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5199700", "body": "I had mentioned this earlier as Amol stated. It would be super-nice to find some common ground using the `AbstractRemoteFileOutboundGateway`. Interestingly, the `AbstractRemoteFileOutboundGateway` does not currently support PUTS - I went ahead and created:\n- https://jira.springsource.org/browse/INT-3088\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5199700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798336", "body": "space after else\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798345", "body": "else on new line. Space after else\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798353", "body": "else on new line\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798361", "body": "else on new line. Space after else\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/6798361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5195473", "body": "should use String.valueOf\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5195473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sobychacko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b9089fb419b126ec3b1d5d76c1db5be77e777b13", "message": "INTEXT-50: Add Cassandra Adapters\n\nJIRA: https://jira.spring.io/browse/INTEXT-50"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b28bf4b06c476e6fd14f8a98c87037aacebeb3cc", "message": "INTEXT-84 Kafka: Enhance Avro serialization support"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/e46cbfdcb4f0fe1bcb8efa2f29454adefaa360f6", "message": "INTEXT-44 - Add Kafka Support\n\n* Add Inbound adapter\n* Add Outbound adapter\n* Add serialization\n* Initial Documentation\n* Add unit tests\n* Add async producer\n* Support Kafka 0.8\n* Add Kafka Sample\n\nSee: https://jira.springsource.org/browse/INTEXT-44"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15314463", "body": "Artem - Good points. Can we address these concerns as a separate JIRA issue? (both attributeGroup and XSD changes)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/15314463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "joensson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/85334c7e90028db28511e4cf7ce5ba1bee398b32", "message": "INTEXT-118: Fox for long messages with newlines\n\nJIRA: https://jira.spring.io/browse/INTEXT-118\n\nIt also tests long messages without newlines to verify that the fix works for both types of long messages.\n\nINTEXT-118: Replace regular expression split with standard substring to split message into subparts with max length.\nThe regular expression used earlier failed splitting messages that contained newlines correctly. (See SmesMessageSpecificationTest)\n\nCorrected spelling in constants\n\nPolishing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223435", "body": "These lines should just be deleted. \n\nI used it for system.out \"logging\" since there was no log4j dependency I could use in the test scope. The println is disabled by default, and can be enabled by setting -Dshow_test_output=true when run from the command line.  But the lines doing the print should really just be deleted. I missed those lines when committing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20223435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ilayaperumalg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b899ff0ffd8b52053cb9a8ea6a24b0dca1e112da", "message": "Add StringDecoder for kafka messages\n\n - Add StringDecoder for decoding kafka key/value messages\n\nRefactor StringDecoder"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/cad2be04968a2c960b67e3e7550f26ec849ea698", "message": "INTEXT-111: Allow PP for Kafka producer context\n\nJIRA: https://jira.spring.io/browse/INTEXT-111\n\n - Remove hard coded names for bean names at the producer context parser\n - Fix and update tests\n - Remove the use of `BeanFactory` to get the producerConfigurations in\nKakfaProducerContext and use setter to set the producerConfigurations\n - Add logic to send the message from producer configuration when there\nis no header specified for the topic and single producer configuration\nis used.\n\nAdd tests to verify placeholder values\n\nFix code review comment and formatting\n\nPolishing code style.\n\nAdd `KafkaProducerContext#theProducerConfiguration` for single `producerConfigurations` entry to avoid iterators"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/325ee9a4f3c7bd57ac60a8ef6fea75aeb5fe2a87", "message": "Kafka: PP for consumer context bean\n\nJIRA: https://jira.spring.io/browse/INTEXT-112\nhttps://jira.spring.io/browse/INTEXT-111\n\n - Avoid using hardcoded bean names for consumer context\n - Remove Integer value topic streams count, instead use string value\n   - This will allow placeholder values to be used for `streams` attribute\n - Set `group-id` as a bean name for consumer configuration bean only if\n   the group id is specified explicitly. This will allow placeholder values\n   not being used as a bean name.\n - Add test cases to verify multiple consumer configurations within the\n   same consumer context.\n\nSet consumerConfigurations as propertyValue\n\nBetter handling of consumerConfigurations\n\n - Add getConsumerConfiguration(String groupId) in KafkaConsumerContext\n   - Fix tests\n - Add additional test case to check multi consumer contexts\n\nFix getConsumerConfiguration(groupId)\n\nPolishing"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/501209384b7ba0cac4ad95b69a51d67e13f6875e", "message": "Make ConsumerContext disposable\n\n- This will allow shutting down the consumer connector for the consumer\nconfiguration when the associated context no longer exists."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52648300", "body": "Hi @artembilan, right, this PR doesn't address property placeholder issue. Instead, it only makes it easy to work with bean names when only one consumer configuration is provided by not using property placeholder. \nThe fix does this:\n- Create unique bean names using the `group_id` only if there are multiple consumer configurations\n- If there is only a single consumer configuration, then we won't use the property placeholder that uses `group_id` but uses hardcoded bean names. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52648300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52676444", "body": "sure, thanks for the suggestion @artembilan. \nClosing this PR and re-submitting with the suggested changes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52676444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16435906", "body": "@artembilan Using `HashMap` here works as I think it doesn't use any bean references. Do you think using ManagedMap here still makes sense?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16435906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20163635", "body": "@artembilan sorry about the code style issue. It would be helpful if you could fix that change on merge :-) thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20163635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20248948", "body": "I see your point, will fix it shortly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20248948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "xkapasakal": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b44bf47d622f6158672c1ebc3a20e360e0f79ad1", "message": "INTEXT-80 - FIX S3 ConnectionPoolTimeoutException\n\nJIRA: https://jira.spring.io/browse/INTEXT-80\n\nWhen synchronizing to local directory, getObject was called without\never closing the InputStream that the SDK opens causing an\n\"org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting\nfor connection\" exception. To fix that, after synchronization, the\ninputStream of the s3Object is closed, causing the s3 client to release\nthe connection."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TYsewyn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/1b1f95c0045fde7bf028c118e962c5c0788f2a27", "message": "Java DSL: Fix EnricherSpec to prevent assertions\n\nFixes: https://github.com/spring-projects/spring-integration-extensions/issues/101"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52754796", "body": "Closing this pull request to do it right ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52754796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "robharrop": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/d06e8cbec345d3048ed244f9673265c79f4fb6d0", "message": "AWS: Updated to spring-integration to 4.0.3\n\nMade the corresponding API changes.\n\nHad to update jacoco to latest (0.7.1.blah) to get the tests to work correctly on OSX Java 8\n\nFixed JavaDoc errors show up by the Java 8 linter. Build passes\n\nBringing dependencies inline with Spring 4.0.6\n\nUpdated mockito to 1.9.5\n\nUpdated Hamcrest to 1.3\n\nUpdated aws-sdk to 1.8.7\n\nMerge branch 'master' into integration-4.0\n\nReformatted gradle file inline with the existing standard\n\nSwitch back to using the milestone repo\n\nUpgrade Gradle version to 1.12\n\nUpdated the schema references to use un-versioned refs\n\nUpdated author tags and copyright dates\n\nAWS: SI-4.0 Polishing"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52195129", "body": "@artembilan Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/52195129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16190829", "body": "I'm not sure what you mean by this. We can't remove that dependency since the code doesn't compile. The dependency as declared does not exist in the defined repos, it is `javax.mail-api` rather than `mail`, at least as far as I can tell from my tests.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16190829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16190883", "body": "Would you be amenable to me opening another PR for this? I think that would be more in keeping with the spirit of this one?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16190883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "wilkinsona": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/24e8c59878106df141a3d4b1a2643939c263cc0b", "message": "Add the Spring IO plugin to Splunk extension\n\nConfigure the Spring IO plugin such that it's only applied when the\nbuild is run with -PplatformVersion=<version>. This platformVersion\nproperty is used to determine the version of the Platform that will\nbe used when running the springIoCheck task. The plugin can be used\nby running a build as follows:\n\n./gradlew clean springIoCheck -PplatformVersion=1.1.0.BUILD-SNAPSHOT -PJDK7_HOME=\u2026 -PJDK8_HOME=\u2026\n\nThis will test the project on JDK7 and JDK 8 using the dependencies\ndefined in the latest snapshot of Spring IO Platform 1.1.0."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "edgedalmacio": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/d1d6b068bce44c574323853d041e56269bb16bc4", "message": "INTEXT-73: Sending multipart SMS messages through\n\nJIRA: https://jira.spring.io/browse/INTEXT-73\n\nminor optimization\n\nadded test for multipart messages\n\nSigned-off-by: Edge Dalmacio <edgar.dalmacio@gmail.com>\n\nINTEXT-73 Replaced String[] with List\n\nINTEXT-73 fixed test\n\nPolishing code format"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/7590253871e892bf66441e1975778055b6a0f37e", "message": "INTEXT-107 Upgrade to Spring Integration 4.0\n\nJIRA: https://jira.spring.io/browse/INTEXT-107\n\n* Upgrade to Gradle 1.12\n* Fix compile warnings\n* Fix XSD declaration\n* Get rid of `EasyMock`"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18483461", "body": "Hi, when would this pull request be merged to master?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18483461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18606083", "body": "Cool! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18606083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18663451", "body": "Are there any plans to support \"Sending multipart SMS messages through a SMPP provider\" using sar_msg_ref_num, sar_segment_seqnum and sar_total_segments?\n\nhttp://www.activexperts.com/xmstoolkit/sms/multipart/\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18663451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18757768", "body": "I've already tried using USE_MSG_PAYLOAD_PARAM but no luck.\n\nHere's the JIRA issue https://jira.springsource.org/browse/INTEXT-73\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18757768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18763854", "body": "Here's the PR https://github.com/SpringSource/spring-integration-extensions/pull/50\n\nI've already tested this with a real SMSC and it works.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18763854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45229375", "body": "added test for multipart messages\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45229375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45997640", "body": "Can you help me out here? \n\nI just need to push commits 69e11c3, ee1d784, d3ded03\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45997640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46818653", "body": "Did I do it right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46818653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46825300", "body": "Can I start over? This branch is a mess.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46825300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46845359", "body": "Should I create a new pull request?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46845359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46849171", "body": "Created PR https://github.com/spring-projects/spring-integration-extensions/pull/81\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46849171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46854329", "body": "Should I put you under project lead?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46854329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46854570", "body": "I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46854570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46859493", "body": "Yup. Apparently, I've signed the CLA before. Anything else you need from me?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46859493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46922768", "body": "Do I create a new Jira issue to have this project use Spring 4.x?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46922768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46942928", "body": "I created https://jira.spring.io/browse/INTEXT-107. Can I also work on this one?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46942928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46950217", "body": "Alright, I got the commit message length. Sorry, I forgot to include the INTEXT-xxx length in the count.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46950217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46962238", "body": "rebase done. Did I do it right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46962238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46965344", "body": "Ok, tried it again. Did I get it this time?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46965344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46971102", "body": "Alright, there you go!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46971102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46982954", "body": "Thanks! Can you tell me when this will be available in central repo?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46982954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46995323", "body": "It would be great to have it at Maven Central, but if that takes more time, milestone works as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46995323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46996111", "body": "I'm also going to need spring-integration-cimd. Do I file a new issue and follow instructions from https://github.com/spring-projects/spring-integration-extensions/wiki/How-to-Create-New-Components\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46996111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47214757", "body": "Great! Thanks! :)\n\nShouldn't the version be 4.0.x to align with the other SI artifacts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47214757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/13439431", "body": "Since shortMessagePart is a byte[], shouldn't I keep using new String(byte[], charsetName) ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/13439431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127499", "body": "Sure. Can I return `Collections.unmodifiableList(Arrays.asList(msgId));`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/14127499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "olamy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/49538abbe6b068340f3542c13789d96df6cda097", "message": "INTEXT-105: Fix \"index\" property according to the schema\n\nJIRA: https://jira.spring.io/browse/INTEXT-105\n\nPreviously the `SplunkIndexWriter` has property `indexName`,\nhowever the XSD for `<int-splunk:index-writer/>` provides the `index` attribute\n\nRename the property and add parser test"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/198205058cfe6c9266ea4549bf76d4dd2e8f9785", "message": "Splunk: Servers failover\n\nupgrade versions\n\nConflicts:\n\tspring-integration-splunk/gradle.properties\n\nupgrade gradle version\n\nrevert spring integration upgrade version\n\nAdd a feature to be able to declare more than one splunk server.\nIt's a simple failover mechanism with any pooling.\nBefore give back the Service instance, the framework just try a getInfo call.\nTo preserve backward compat this check it's not activated per default but only\nif the splunk server instance is marked with testOnBorrow.\n\nSample:\n````xml\n  <int-splunk:server id=\"splunkServer\" host=\"${splunk.server.host}\" port=\"${splunk.server.port}\"\n                     username=\"${splunk.server.username}\" password=\"${splunk.server.password}\"\n                     owner=\"${splunk.server.owner}\" scheme=\"${splunk.server.scheme}\" testOnBorrow=\"true\" />\n\n  <int-splunk:server id=\"splunkServerBackup\" host=\"localhost\" port=\"9999\"\n                     username=\"${splunk.server.username}\" password=\"${splunk.server.password}\"\n                     owner=\"${splunk.server.owner}\" scheme=\"${splunk.server.scheme}\" testOnBorrow=\"true\" />\n\n  <util:list id=\"splunkServersList\">\n    <ref bean=\"splunkServer\" />\n    <ref bean=\"splunkServerBackup\" />\n  </util:list>\n\n  <bean id=\"splunkServiceFactory\" class=\"org.springframework.integration.splunk.support.SplunkServiceFactory\">\n    <constructor-arg ref=\"splunkServersList\"/>\n  </bean>\n\n  <int-splunk:inbound-channel-adapter id=\"splunk-notify-order-status-change-channel\"\n                                      auto-startup=\"true\"\n                                      search=\"\"\n                                      splunk-server-ref=\"splunkServer;splunkServerBackup\"\n                                      channel=\"notify-order-status-change-input\"\n                                      mode=\"BLOCKING\"\n                                      init-earliest-time=\"${splunk.order-status-change.init-earliest-time}\"\n                                      >\n    <int:poller fixed-rate=\"${splunk.order-status-change.pooling.rate.time}\" time-unit=\"SECONDS\"/>\n  </int-splunk:inbound-channel-adapter>\n````\n\nsome changes due to pr comments\n\nConflicts:\n\tspring-integration-splunk/gradle.properties\n\nformatting: tabs instead of spaces.....\n\nfix documentation with failover mechanism\n\nformatting\n\nformatting\n\nupgrade versions\n\nsome changes due to pr comments\n\nfix javadoc issues\n\n1.1 xsd file\n\nPolishing and upgrading"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41244383", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41244383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43169900", "body": "Is there someone around to have a look?\nCheers\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43169900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44800449", "body": "README.md file fixed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44800449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44905641", "body": "@dturanski I understand and would prefer the virtual ip/load balancer solution. But my current customer doesn't want to have a load balance as a SPOF (which is understandable too :-) )\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44905641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44910434", "body": "@artembilan rebase done.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44910434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45167082", "body": "new pr https://github.com/spring-projects/spring-integration-extensions/pull/74\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45167082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45167097", "body": "rework of https://github.com/spring-projects/spring-integration-extensions/pull/69\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45167097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45705677", "body": "The schema says\n\n```\n<xsd:complexType name=\"indexWriterType\">\n    <xsd:attribute name=\"index\" type=\"xsd:string\" use=\"optional\">\n            <xsd:annotation>\n                <xsd:documentation>\n                    Index to write to.\n                </xsd:documentation>\n        </xsd:annotation>\n    </xsd:attribute>\n</xsd:complexType>\n```\n\nBut there is not index property in the bean.\n\nI don't understand how this worked previously :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45705677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45831537", "body": "Yup I can have a look the main issue I have is to mock splunk http exchange which I reckon is a pain due to the xml format...\nAnyway I will have a look.\nBTW more I use more I find bug as there is definitely NO test for some parts especially inbound channel\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45831537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47301053", "body": "see https://jira.spring.io/browse/INT-3456\nAgain creating tests is just really hard as it's just a real pain to mock splunk!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47301053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47426124", "body": "Hi\nApologize but I'm holidays for the next 10 days with limited network.\nSo I will have a look and answer when back.\n\n## Cheers\n\nOlivier\nOn Jun 27, 2014 6:03 PM, \"Artem Bilan\" notifications@github.com wrote:\n\n> Note the Splunk Adapters project is located in the Spring Integration\n> Extension Repo, so see https://jira.spring.io/browse/INTEXT-109.\n> \n> OK. Let it be with mock, but we have a SplunkDataReaderTests, which is\n> based on local data file - splunk-data.xml.\n> \n> Well, I see that SplunkDataReader#count = 0 is by default. So, if we\n> don't populate that value to the outputArgs, what is the default value\n> than for Splunk?\n> \n> From other side: is it correct to try to retrive _unlimited_ result for\n> Splunk events?\n> SplunkDataReader just collects them to the List<SplunkEvent> and it looks\n> for like memory overhead. Isn't it? I think it really was a reason do not\n> allow to fetch all data for search.\n> WDYT?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-integration-extensions/pull/82#issuecomment-47317726\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47426124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733307", "body": "no I don't think so.\nThe code I added use whitespaces. All the previous code use tabs.\nAnd I don't want to generate a non readable pr due to too much formatting.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733357", "body": "if empty then exception?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733376", "body": "Again I believe you're wrong :-)\nAll the code is plenty of tabs and my changes are spaces only\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733416", "body": "I will remove comments\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733440", "body": "good catch\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733472", "body": "Honestly due to lack of unit tests, I didn't want to touch too much the code so leave it as before.\nAgree that's a bit lazy but I only need a small feature and don't want to go in too much change.\nAnd I don't see timeout for Splunk core sdk.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12733472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12764142", "body": "Doh weird first time of my opensource life I see folks using tabs!\nBut as I don't want to start any holy war I will try to fix that later\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12764142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12779313", "body": "Again I don't want to go in an holy war tabs vs spaces (even if spaces is really better :-) )\nDo you guys provide a style configuration for idea? I find it convenient to just have a file rather than configuring stuff manually.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12779313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12779724", "body": "Oh sorry I find the file\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/12779724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kcrimson": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/3931ae58269876f99893080a15d981c03ccf5a0b", "message": "INTEXT-65 Add JGroups Extension"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17965959", "body": "Yes I have signed it already,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17965959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17966535", "body": "Thanks,\nI am new to gradle, so any suggestions are welcomed :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/17966535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19871248", "body": "Gunnar, \nI have made all changes, including docs, and gradle.build cleanup. Let me know if it looks good for you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19871248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51726515", "body": "Yes, I have signed\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51726515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51774071", "body": "when you run tests it complains about missing slf4j factory implementation, that's why it was just added in test scope,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51774071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051748", "body": "Yes and yes, we shouldn't register these things as beans, I just found that this causes another issue, when you have more than one consumer context defined + more then one input channel adapter, mainly because these beans being registered, and following code in KafkaConsumerContext:\n\n``` java\n    public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n        consumerConfigurations = (Map<String, ConsumerConfiguration<K,V>>)\n                (Object) ((ListableBeanFactory) beanFactory).getBeansOfType(ConsumerConfiguration.class);\n    }\n```\n\nOnce you have more than consumer context and input channel adapter, you end up with following exception:\n\n> java.lang.IllegalStateException: Iterator is in failed state\n\nShould I open separate issue to handle this case? I have some ideas how to fix it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051783", "body": "Sure, will clean it in all test contexts.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051839", "body": "From initial investigation looks like concurrency issue + thing that beans are registered, making them 'private', should help\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051867", "body": "Thanks for suggestions, will take a closer look at ManagedMap\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051873", "body": "Ok, will fix it\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051932", "body": "Ok, will make changes at replace static imports,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16057495", "body": "New issue opened https://jira.spring.io/browse/INTEXT-112,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16057495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bellwethr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/86be5e1b78454ff445567badaa3e6bf20bb481e6", "message": "INTEXT-81 Fixing bug in decoding message streams\n* adding a null check on the key decoder\n\nhttps://jira.springsource.org/browse/INTEXT-81"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20897861", "body": "No problem--done!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20897861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "otnateos": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f9207dae2b5a3ae34179ca3156087d5248994098", "message": "INTEXT-58 Support SMPP Sending Using Other Charset and udh\n* Remove SmppSessionFactoryBean.setMessageReceiverListeners(MessageReceiverListener... listeners) to remove Spring's warning message for ambiguous method access\n* Allow using DeliveryReceipt id as is if hex parsing fail (tested with HSLSMS)\n* Add support for session reconnection which will attempt to reconnect every 5 sec by default until the session is destroyed\n* If additional session state listener is configured by user, it will register it\n* Update build dependency with Spring Integration 2.2.2\n* Update javadoc\n* Add support for smpp transaction time using transactionTimeout\n* Support 'request-handler-advice-chain' for outbound channel adapter and gateway\n* Support sending using data_coding\n* Support sending using message_payload\n* Support for sending long sms using UDH\n* Update mock smpp server to simulate real SMPP error\n* Change message id reading logging to DEBUG instead of WARN\n* Wrap SMPPSession with proxy for auto reconnection\n* Use ExecutorService for reconnection\n* Fix some code and author"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/eaa36c6d03071d81b4a9ec1374507ea071204b58", "message": "INTEXT-32 - SMPP - Fix Failing Unit Tests\n- add mock smpp server for tests\n- enforce source address flip for inbound gateway\n- tidy up"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f2a0cb7cbad1af3eb763f5be412914c9b6a98100", "message": "Change group id"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/c0c5c0afcac5040bdea00bbeeacc4234e191276c", "message": "INTEXT-30 - Add SMPP Support\n- update to version 2.2.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/b1f82c7554e21277ae2c05a2b6b64f6c56bb3acc", "message": "INTEXT-30 - Add SMPP Support\n- migrate old sandbox project\n- add schema for channel adapters and gateways\n- change some package structure based on spring integration module package structure"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11873303", "body": "Yes I had. My confirmation number is 39920121212012232\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11873303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15757042", "body": "Auto reconnect gateway does not work really well\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15757042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18534981", "body": "Sorry, I haven't been able to look at Sonar and fix some of the problem with the codes. But I have implemented what you discussed. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18534981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18665486", "body": "I don't think there is an immediate plan to implement it. Have you tried to construct your UDH or message payload using header USE_MSG_PAYLOAD_PARAM ? If you are stuck with using SAR for concatenation, feel free to request the functionality in JIRA or maybe do PR for the enhancement :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18665486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lukasz-antoniak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/1d2a5b5f06f98e00bddee4f8ecb4a4eba4dc11b2", "message": "INTEXT-36 - Add Voldemort Module"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12269974", "body": "@amolnayak311: No, you cannot exclude those jar libraries. Voldemort is not build with Maven, and is not being uploaded to Maven Central Repository. Those libraries are required for integration tests to run against local Voldemort database. Otherwise, you would have to download them manually, and simple `gradle test` would not work after clean checkout.\n\nWill change the year to 2013 shortly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12269974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12312112", "body": "Got your point and it makes sense. What do you think about referencing Voldemort 0.96 with something like `compile \"voldemort:voldemort:$voldemortVersion\"`, plus installing the following POM descriptor: https://gist.github.com/4546021 (all dependencies included)? I have tested it locally and everything works fine.\n\nIf you agree, could you please install Voldemort 0.96 with the given POM in Spring's Maven repository? I will test it afterwards and update build.gradle, remove libraries and .gitignore file.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12312112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12833377", "body": "Hello Spring Team, any recent updates?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12833377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12846539", "body": "Thanks Gunnar, looks good from my working directory :).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12846539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13487610", "body": "Hello Spring Team,\n\nIn my opinion message store cannot be easily implemented, because Voldemort does not support transactions and row locking - AP system in terms of CAP theorem. During functional testing, I faced issues with concurrent modifications of single message group by two separate message store clients. BTW, any updates regarding code review and documentation?\n\nRegards,\nLukasz\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13487610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14290030", "body": "I have refactored Voldemort adapter to calculate entry key analogically to Redis module. IMO design looks better now, as there is no extra interface and all you need to code is something like `store-key-expression=\"payload.id\"`. Thank you @amolnayak311 for this suggestion. Any progress with reviewing the rest of the code?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14290030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15591757", "body": "Hello Spring Team, any recent updates?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15591757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3009238", "body": "The main reason standing behind this decision was type safety and clarity. I didn't want user to realize in runtime (or while reading documentation) that the object he receives in `MessageConverter#toMessage(Object)` method is actually `KeyValue<K, Versioned<V>>` wrapper, and that I expect him to return `KeyValue<K, V>` in `MessageConverter#fromMessage(Message<P>)`. If you can think of any better solution or using `MessageConverter` is preferred, I'll be happy to alter this part of code. I can see that spring-integration-mongodb module also uses MongoDB specific converter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3009238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3116208", "body": "`VoldemortConverter` allows user to store chosen part of message payload. After quick skip through the implementation of `RedisStoreWritingMessageHandler`, I guess that it can persist only complete payload objects. Currently I think that payload transformation could be processed by `@Transformer` outside of Voldemort adapter, so let's omit this issue. More important design decision is the way of determining object's key. This is achieved programmatically in `VoldemortConverter`, while Redis adapter looks up concrete message header (`RedisHeaders.KEY`) or evaluates `key-expression`.\n\nWhat would be the preferred way of passing/calculating object's key in your opinion? In case it's Redis' approach, I will change Voldemort adapter to work similarly. IMO +1 for Redis.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3116208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "amolnayak311": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/f35e755ff09b3c59b04c6a55b48b99e2da642cad", "message": "INTEXT-5: Initial push for AWS core and S3 adapter\nFor reference see: https://jira.springsource.org/browse/INTEXT-5"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/639d4b27e0ef1a1bb309daf1b0a84c28f29bca70", "message": "INTEXT-6: Add AWS core and SES adapter\nFor reference see: https://jira.springsource.org/browse/INTEXT-6"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/11", "title": "INTEXT-19: Push Notification adapters for Android devices", "body": "The PR is for adding the initial support for sending push notifications to mobile and hand held devices.\nThis is the first of the many services to be supported from Spring Integration for pushing to mobile devices from java applications.\n\nThe umbrella JIRA for this is\nhttps://jira.springsource.org/browse/INTEXT-18\n\nand the specific JIRA to support push to Android devices is https://jira.springsource.org/browse/INTEXT-19\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7752879", "body": "Review changes made and pushed. In XQueryExecutor I have removed direct dependency on Saxon's class and added a method for  discovery an implementation in the order Saxon then Sedna if a datasource is not provided explicitly. We can add more in this list later as we go on. Once the two jars I mentioned in the above comment are in the repo, i'll make the dependency of saxon in the pom as optional too,\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/7752879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8880043", "body": "Hey Jarred, Thanks for the effort you have put in for this extension. We will review this and will be discussing those changes here which can take up quite some time. I had a quick look and feel you have got the samples and examples in this project too. We just want to keep the core classes for the adapter and the corresponding test cases in this project. The samples are equally important and a great way to understand the extension, all of them are present in this project https://github.com/SpringSource/spring-integration-samples. Please move the samples out of this project and keep the core only.\n\nYou need to raise a separate JIRA for this and include your samples there once this PR is merged.\n\nAlso I hope you have signed the CLA here https://support.springsource.com/spring_committer_signup. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8880043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8892629", "body": "Hello Jarred, Can you replace the test classes that use main method with junits? Apologies for bringing things up one at a time. I am tied up with some work and am not able to look at your contributions thoroughly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8892629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9001059", "body": "I am assuming its just one commit 2d86d4a74dc11d8fd979a53f34fb16244885b5a7 you intend to add in the samples but your PR has all the commits, even the ones that are still reviewed and to be merged. The easiest thing I would have done is wait till the core gets merged, then create a branch from the master and add the samples. \n\nAlso i see your samples are all *Tests.java classes which looks more like test cases to me. \nTake a look [here](https://github.com/SpringSource/spring-integration-samples). Try modelling your sample to something like these.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9001059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9001534", "body": "Pushed review changes\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/9001534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11833768", "body": "Let me work on the changes, should be done by this weekend.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11833768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11927211", "body": "Made the following changes\n- Use SimpleMailMessage instead of AmazonSESSimpleMailMessage\n- DefaultAmazonSESMailSender now extends JavaMailSenderImpl overriding the doSend\n- All maven artifact versions updated and moved to properties.\n- Namespace changes made to allow just one namespace for all the AWS adapters\n- The AmazonSESMessageHandler now extends MailSendingMessageHandler from spring-integration-mail. \n  This was done in order to prevent duplication of code. This is now possible as the AmazonSESMailSender is a \n  JavaMailSender.\n- Added the spring.tooling file\n- Added comments to attributes and elements in the spring-integration-aws's namespace xsd.\n- Removed the extra classes/interfaces not used anymore after the recommended changes.\n\nChanges not made\n- I'm not too sure how we are planning to use spring profiles to test the AWS tests, we can \n  talk over skype about this.The AWS tests are excluded from maven's surefire plugin so that they \n  do not execute by default. In order to execute them from maven, We can have maven build \n  profiles which doesn't skip those tests.Since we are anyways doing away with maven in favor of \n  gradle, I didnt bother to make the change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/11927211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12267899", "body": "- Remove all jars from the project, these need to be a part of the dependencies and should not be placed in the repository.\n- Change the year in all the class to 2013 for the Licence in the header.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12267899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12271295", "body": "The commons, jackson, thift, jetty and I guess all others can come from maven repo.  For voldemort jars, dont worry they can be put in Spring source's mvn repository. So eventually we will have to get the jars from the repository and none with  the project's source code.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12271295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12638203", "body": "The Idea is to have a common abstract service implementing the functionality like exponential retry for all implementations and delegate to the underlying service to do the actual push. Ideally we shall be having the common abstract class for all our implementations. The push part for android we have implemented is as per the specification given for GCM and there isn't much code in it. Implementing them using GCM Server should be fine as well I guess ( I had seen this when I had developed the service but intentionally decided not to use it for some reason, I am afraid I quite don't remember why I decided that :D )\n\nFor the client subscription, it is the responsibility of the handheld device to provide the application server with the registration id it received from GCM services. Now this can be send using plain TCP/IP , HTTP, use a web service etc, depending on what is the protocol between the application and its server side. To achieve either of these we can use the TCP , HTTP or WS inbound adapters and then use the JDBC or JPA adapters to store the registration id in database. That's why I think any inbound adapters for them won't make much sense and doesn't add much value. You have any other view or idea in mind?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12638203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12753927", "body": "Got rid of the interface and moved the constants to the implementation class. Rebased and pushed the changes\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12753927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13899687", "body": "@lukasz-antoniak  Apologies for not getting this merged quickly. I want to go through this and review it but I am tied up with some other stuff and unable to do this. Please do not feel that your contribution is not valued :)\nIt might take some time but it should be merged. Somebody else might review too as per their convenience. \nThanks again for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13899687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14192692", "body": "Following three points \n- add **auto-create-local-directory** to inbound Adapters\n- **local-filename-generator-expression** needs to be added\n- Look at using `FileTransferringMessageHandler`\n\nAlso I'll be collating some points for enhancements based on some of the mail communications I have with people who have evaluated or used these adapters as well as the thread on the forum which has quite a lot of diccussion around S3 adapters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/14192692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18445133", "body": "Hello cdelgadob, its being reviewed and should merged soon. Meanwhile if possible, we would live to have your view on it too. :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18445133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19411312", "body": "Oh, thats a bad miss. I will fix that tonight or maximum by tomorrow. Thanks..\n-----Original Message-----\nFrom: Gunnar Hillert\nSent:  13/06/2013, 21:01 \nTo: SpringSource/spring-integration-extensions\nCc: Amol Nayak\nSubject: Re: [spring-integration-extensions] INTEXT-60 Add support for AWS S3 Gateway in the AWS adapters (#41)\n\nHi @amolnayak311 \n\nLooks like the module does not compile right now from the command line. `AmazonS3ParserUtils` is in under `src/test/java` but used by a class in `src/main/java`. Also, `AmazonS3OutboundGatewayTests` was located under `src/main/java`. Can you please fix? THX!  \n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/SpringSource/spring-integration-extensions/pull/41#issuecomment-19399520\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19411312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20983706", "body": "Nice catch, its embarrassing I missed this in the first place:(.\nCan you add your name to the authors?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/20983706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21307671", "body": "Package tangles is something i am fixing as part of INTEXT-55. There are several more changes to fix sonar violation. This is a part of that PR. Would that be ok?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21307671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21431991", "body": "I have pushed the changes requested for the review\n\nAttribute `local-directory` is not needed as the GET operation returns the input stream to the\nobject on bucket.\n\nThere are cases where we actually desire to reuse common functionality of the SI file project. But for some challenges it is not very straight forward and hence I have no dependency on SI file and hence defined filters here. Once we refactor to use a common base from I guess we can re use the filters. If you still want me to see how easy it is to use the filter from the SI file, i can analyze, open a new JIRA and a separate PR for that change.\n\n`remote-command` and `remote-command-expression` are mutually exclusive to each other. This is something I had discussed with @garyrussell  on skype and we decided that rather than have the gateway for one command, we should also allow to specify the command expression to let the user execute a different command per incoming message.\nThis is the reason why it is named it as `remote-command` and `remote-command-expression` to avoid the confusion.\nAlso other attributes of gateway are kept consistent with the outbound adapter. Such as the `remote-directory`,\n`remote-directory-expression` etc. This actually acts as the expression attribute for the ftp and are mutually\nexclusive to each other too. To avoid the confusion I have taken the liberty to name them. Let me know if you have any other views.\n\n[INTEXT-85](https://jira.springsource.org/browse/INTEXT-85) is created for adding support for `filename-regex` and `filename-pattern` to S3 outbound gateway\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21431991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31313243", "body": "Hey Artem, My apologies for not being able to reply earlier. Very much tied up with the book's schedule and it will go on till May. I am very much keen to take this PR up again, include SQS support and have Dynamo DB too in my mind post May. Hope that would be fine :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31313243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1380688", "body": "We will have to add the XQJ classes/interfaces jar as a separate dependency to make this dependency optional. Currently this jar contains these classes too and hence compilation will fail when we make this optional.\n\nI'v added sedna's dependency  as optional and included a test for XQueryExecutor using the sedna's provided datasource. However there is  one jar xqj2-0.0.1.jar which is missing in our repo. Need to add that too and add it as a dependency in the sedna xqj's pom. The archive downloaded from sedna's site contains three jars. We basically need all three of them to be present in the repo (one is already there). After these two are added, i'll make saxon's dependency optional.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1380688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1395231", "body": "I want it to fail when the expression has text\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1395231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1395592", "body": "Done, was lazy in writing enough class comments :D\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1395592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415424", "body": "Well it was hiding the class level variable.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415443", "body": "Its invoked from constructor  and it complains with a Major violation saying, constructor calls an overirdable method\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415707", "body": "Addressed\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415781", "body": "Got rid of xq and renamed variable _dataSource_. Addresses both issues ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1415781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714860", "body": "Agreed, will expose the setter for the credentials but will use the o.s.i.aws.core.AmazonWSCredentials instead of c.a.a.AWSCredentials. I am not exposing any AWS SDK class as we also plan to have alternate implementations for say S3 operations in which case we would need some more generic datastructure.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2559593", "body": "Didn't want to do that as that would mandate a dependency on AWS Client libraries. In case of S3 which is coming up, if we provide alternate implementations like JetS3, we would not like to have AWS Client jars in classpath too just for one class. Let me know if you have any other view.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/2559593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3175274", "body": "Not checking the email id for now, let us add it in one of the enhancement JIRA if needed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3175274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3175470", "body": "For **auto-create-local-directory**, I will include this in the JIRA for enhancements. Currently it creates the required structure by default\nThe **local-filename-generator-expression** will be added to the JIRA of enhancements\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3175470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3175575", "body": "This is an alternative to the local-directory attribute where the local directory's value will be evaluated at runtime, but only on startup.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3175575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3176214", "body": "Done. Some changes pushed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3176214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3002326", "body": "Any reason for introducing this new interface and not using **_o.s.i.s.c.MessageConverter**_ instead?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3002326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3010710", "body": "What you say makes sense and yes, Mongo adapters do use a custom converter, but that comes from spring data mongo and is used to instantiate the MongoTemplate if one is not provided.\nI am comparing this more to the Redis's **_o.s.i.r.oRedisStoreWritingMessageHandler**_ as that would be a better comparison.\nMerging in a way you have implemented shouldn't be a issue in my opinion as we can anytime change things in future to accommodate the changes.But do take a look at the way Redis's adapters are implemented and let us know your views.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/3010710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5194755", "body": "How about a null check on s3Object before getting the input stream. Though chances are slim, getObject returns null on invalid key which will cause NPE in this case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5194755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5195021", "body": "Just noticed that the original implementation of synchronizeObjectWithFile doesn't handle null objects too. I will raise a JIRA and fix that too. You can take care of the above comment?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/5195021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4282473", "body": "Hello Gary,\n  You are right. Gunnar too in fact had suggested this earlier for the adapters PR. The problem I saw was with the Session, the abstraction we should use doesn't fit too well for the buckets. Following are the problems. \n\nThe list/listNames operations for instance here(AWS) needs something like a next marker to support listing buckets with a large number of objects and paginating the list operations. The return value of the list operation too cannot simply be a List of S3 Objects because we also need to return the marker that would be used for the next list operation. To sum up, the problem is fitting paginated list operations in Session which isn't possible currently. Other operations doesn't look difficult to implement. I just didn't want to compromise to let go of the paginated list operation on a cloud service.\nI can however re work on this class to implement it in a style similar to the one in ARFOG. I am not sure if modifying the Session class to start supporting paginating list operations makes sense. Or does it? :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4282473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4297318", "body": "So I will update the gateway to use Enums and switch. Once the AWS goes GA we can then look at refactoring ARFOG (Session in particular) in a separate JIRA to let s3 gateway extend from it. WDYT?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4297318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "markfisher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/50d34a60d4441f93a45c4f9eda99f996347a9a0d", "message": "Merge pull request #19 from garyrussell/INTEXT-33\n\n* INTEXT-33:\n  Add WebSocket Events"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/commits/873ff937a172568732d1df906366c036ef01e362", "message": "Merge pull request #18 from garyrussell/INTEXT-33\n\n* INTEXT-33: Add Path and QueryString Headers"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12121962", "body": "LGTM; merging.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12121962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12228185", "body": "LGTM; merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12228185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12229659", "body": "LGTM; merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/12229659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/48544892", "body": "@benbramley would you be willing to tackle that and submit a PR? (if so, and if you have not already, please sign our CLA[1]). Thanks!\n\n[1] https://github.com/spring-projects/spring-integration-extensions/wiki/Contributor-Guidelines#sign-the-contributor-license-agreement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/48544892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4649195", "body": "Let's open an issue against Spring Integration 3.0 to switch the default IdGenerator away from randomUUID() so that this customization would not be needed in the first place.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4649195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051577", "body": "+1\nWe actually need to expose the \"streams\" property for configuration via SpEL/placeholders for the Spring XD modules we are building with the Kafka channel adapters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/16051577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "nodabadri": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/148", "title": "Intext 178", "body": "Changes in SmesMessageSpecification.java and SmppInboundGateway.java for handling USSD operations\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leejianwei": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8882258", "body": "Hi Amal, Thanks for your comments. I have removed sample application.\nBy the way, I have signed CLA.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8882258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8970387", "body": "PR https://github.com/SpringSource/spring-integration-extensions/pull/9 is for Splunk adapter samples.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/8970387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714061", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714062", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714064", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714069", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714107", "body": "Hi Gunnar, could you please explain this comment a little? I am not very clear about it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714164", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714199", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714505", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714506", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714507", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714508", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714509", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714626", "body": "Sure. I can work with Splunk team on this code refactor later.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1714626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1715443", "body": "Thanks for reminder. I also update the reference document.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/1715443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dturanski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13093082", "body": "See https://jira.springsource.org/browse/INTEXT-31\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13093082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13253717", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/13253717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15894955", "body": "The problem is actually the name of the setter method, setIndexName() needs to be setIndex().  But LGTM. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/15894955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41322178", "body": "The SplunkEvent class fundamentally wraps a Map<String,String> so requires a key value pair. This code was contributed by Splunk originally and IIRC serializes naturally to a format that Splunk can natively parse. There are currently no plans to provide an alternate implementation. However community contributions are always welcome. In the mean time, you should be able to hard code the key or create a unique key for each json document, whatever is appropriate for your application. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41322178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44826746", "body": "Looks okay other than one formatting issue. One observation from experience with similar issues with other products in production environments is configuring multiple hosts and ports for failover is more brittle this way than using a hardware load balancer with a virtual IP. That way, the concern is removed from the app configuration and doesn't need to change when servers are added or moved. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44826746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/13279710", "body": "Remove unnecessary { } and correct indentation\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/13279710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "andypiper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18002176", "body": "Currently I would recommend using the v0.2.1 tag from Paho's Git repository and building from that. Unfortunately Paho is not yet in Maven Central but it is a very high priority to get it there!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18002176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cdelgadob": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18410107", "body": "What's the status of this development? It seems to me a very useful functionality, but it's been a while since the last update in JIRA\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18410107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18488318", "body": "Hi Amol, thanks for your answer, that's good news. I'm happy to help and review it, just tell me where to get it from and I'll come back to you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/18488318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jbrisbin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19320480", "body": "@artembilan Logback is just what we've been using in Reactor (and I've used it in other projects quite a bit). It seems to be a bit of a personal preference thing. If using SLF4J, it doesn't really matter, right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19320480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19320713", "body": "@artembilan @garyrussell @markfisher made some changes to address the concerns here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19320713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19408951", "body": "I've tried to make this more appropriate for the role it's intended to play. How does it look now? At some point I'd also like to add a RingBufferDispatcher-backed MessageChannel implementation, so we might also discuss how that would work as it _would_ be a proper message channel.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19408951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19414781", "body": "@artembilan what if we just changed the name to TcpServerMessagingGateway or somesuch? We probably want reply capability, don't we @smaldini ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19414781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19419745", "body": "I also added a channel implementation that is pretty simple and based on `DirectChannel`. It should be a drop-in replacement for any `MessageChannel` and `SubscribableChannel`. The `Dispatcher` to use is configurable either by ref'ing a `Reactor` instance or by telling the channel what kind of `Dispatcher` you want (`ringBuffer`, `eventLoop`, `threadPoolExecutor`, `sync`, or custom-defined from the Reactor environment properties).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19419745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19456985", "body": "For the best performance, we'll want to make sure and use the load balancer's built into Reactor. I'm not sure how to achieve that other than just have a configured Reactor passed in via `ref` and leave the standard SI load-balancing configuration alone. It would work but probably be slightly less efficient that what's implemented in Reactor. Would it cause confusion to have to different load-balancing scenarios? There may be times when we can't completely meld Reactor with SI and there's just going to be some overlap. Not sure if this is one of those times...\n\nStephane's got some additions and we've moved the fork to the Reactor github org. I'm going to close this PR and open one from there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/19456985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4649039", "body": "I was aware of the bean declaration convention but besides requiring an extra bean definition for this to work OOTB, if that's already been set, my own bean declaration will have no effect. Because the randomUUID() call is so expensive and because performance is critical here, I want to make sure beyond all doubt that a fast UUID generator is in use, no matter what might already have been set.\n\nI've tried to find an alternative but MessageHeaders is very limiting and it's declared final, so the only way around the randomUUID() is by that static IdGenerator field.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4649039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4649054", "body": "I'll give it a try without them.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4649054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654420", "body": "This might be just a documentation issue, but I looked all over for some javadoc that explained what the boolean returned from doSend is supposed to signify. Does `true` mean \"successfully sent\"?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654425", "body": "Good point. That's easy enough to fix.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654439", "body": "I deleted it last night from reactor snapshots and needed to add it here. Unfortunately I was tired and didn't get to it before going to bed.  :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654450", "body": "Where is the return value documented? I couldn't find any references to what this is supposed to return and what the significance of it is.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4654450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4700926", "body": "Stephane's got some changes/additions/and a fix for this in the fork on the reactor github org. So I'm going to close this one and open one from there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4700926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "relango": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21143686", "body": "I submitted CLA and got confirmation number 59720130715032301\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/21143686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25634061", "body": "Closing this in favor of https://github.com/spring-projects/spring-integration-extensions/pull/58\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25634061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25901737", "body": "Fixed formatting based on your comments and merged my changes with latest master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/25901737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ericbottard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/26046246", "body": "As a side note, one could argue that this is actually a bug in HttpURLConnection but...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/26046246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/26047743", "body": "WOW. Correction. The sources found in http://dev.splunk.com/goto/sdk-java are correct, as is the jar you get by compiling from source.\nThe sources found in http://dev.splunk.com/goto/sdk-java-jar (the .java files inside the jar) seem to be correct as well, but THEY DO NOT CORRESPOND TO THE .CLASS FILES INSIDE THAT JAR.\n\nHow sick is that?\n\nAnyway...\n\nhttp://dev.splunk.com/view/splunk-sdk-java/SP-CAAAECN\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/26047743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "lorochka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31994722", "body": "Changed nothing, but got:\n\n`\norg.springframework.integration.MessagingException: search Splunk data failed\n    at org.springframework.integration.splunk.support.SplunkExecutor.poll(SplunkExecutor.java:74)\n    at org.springframework.integration.splunk.inbound.SplunkPollingChannelAdapter.receive(SplunkPollingChannelAdapter.java:66)\n    at com.rbi.bdd.steps.SplunkVZTIntTestingStep.thenTheVZTServiceTransactionLogsShouldPresentOnSplunk(SplunkVZTIntTestingStep.java:45)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:550)\n    at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:499)\n    at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:479)\n    at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:443)\n    at org.jbehave.core.embedder.StoryRunner.runCancellable(StoryRunner.java:305)\n    at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:219)\n    at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:180)\n    at org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:229)\n    at org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:744)\nCaused by: java.lang.RuntimeException: could not connect to Splunk Server @ RBHQLKONDRATE-D:8089 - null\n    at org.springframework.integration.splunk.support.SplunkServiceFactory.getService(SplunkServiceFactory.java:81)\n    at org.springframework.integration.splunk.support.SplunkDataReader.runQuery(SplunkDataReader.java:288)\n    at org.springframework.integration.splunk.support.SplunkDataReader.nonBlockingSearch(SplunkDataReader.java:317)\n    at org.springframework.integration.splunk.support.SplunkDataReader.read(SplunkDataReader.java:188)\n    at org.springframework.integration.splunk.support.SplunkExecutor.poll(SplunkExecutor.java:70)\n    ... 19 more\nReports view generated with 1 stories (of which 0 pending) containing 1 scenarios (of which 0 pending)\n`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31994722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31994938", "body": "New exception - nothing was changed:\n\n`\norg.springframework.integration.MessagingException: search Splunk data failed\n    at org.springframework.integration.splunk.support.SplunkExecutor.poll(SplunkExecutor.java:74)\n    at org.springframework.integration.splunk.inbound.SplunkPollingChannelAdapter.receive(SplunkPollingChannelAdapter.java:66)\n    at com.rbi.bdd.steps.SplunkVZTIntTestingStep.thenTheVZTServiceTransactionLogsShouldPresentOnSplunk(SplunkVZTIntTestingStep.java:45)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:550)\n    at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:499)\n    at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:479)\n    at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:443)\n    at org.jbehave.core.embedder.StoryRunner.runCancellable(StoryRunner.java:305)\n    at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:219)\n    at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:180)\n    at org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:229)\n    at org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:744)\nCaused by: java.lang.RuntimeException: could not connect to Splunk Server @ RBHQLKONDRATE-D:8089 - java.lang.RuntimeException: Software caused connection abort: recv failed\n    at org.springframework.integration.splunk.support.SplunkServiceFactory.getService(SplunkServiceFactory.java:81)\n    at org.springframework.integration.splunk.support.SplunkDataReader.runQuery(SplunkDataReader.java:288)\n    at org.springframework.integration.splunk.support.SplunkDataReader.nonBlockingSearch(SplunkDataReader.java:317)\n    at org.springframework.integration.splunk.support.SplunkDataReader.read(SplunkDataReader.java:188)\n    at org.springframework.integration.splunk.support.SplunkExecutor.poll(SplunkExecutor.java:70)\n    ... 19 more\n`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/31994938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32547944", "body": "It looks like nobody cares. So this issue was with Splunk 6. When I switched to Spluck 5 everything worked out.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32547944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32551723", "body": "Thank you, ghillert!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32551723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "deeptikohli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32677407", "body": "I am also looking for early version to try.  Meantime, I am trying to use this (https://github.com/3pillarlabs/spring-integration-aws) but not working\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/32677407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "st96d045": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35746039", "body": "Hi Gary\nI am ok either way. SPR40 seems to be behind master, so perhaps we need to merge all the latest set of changes from master into SPR40 first and then I can make my changes on top of that. The other thing is that not all projects in the SPR40 branch have been updated to SI 4, so to make it a \"true\" SI 4-based branch, we should also go and update all projects to SI 4. I can make those changes on a separate JIRA if you think it is worth doing it. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35746039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35900480", "body": "Works for me. I will just re-submit my PR to that branch once its ready.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/35900480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brandon-atkinson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/38870390", "body": "The 3pillarlabs implementation is built on an older version of spring integration. Needs to be updated to a modern version(s?), and schema versions that track with spring integration schema versioning (so we know which version its compatible with).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/38870390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kalyanvgopal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41458675", "body": "Thanks for response. we realized that splunk is also parsing json natively. \nThe current format <b>\"key event\" </b> suppors for a plain text events and \nthe format <b> {\"key\": json-object}.</b> works for json formatted events.\nI can contribute with an additional event type as it helps me to reuse the same adapter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41458675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41525081", "body": "Thanks Gary. I created the following jira to track the task.\nhttps://jira.spring.io/browse/INT-3390\nSo, i am closing this question for now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/41525081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bitsal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43871649", "body": "I'm wondering about spring-integration-core. We wanna use 4.0.0.RELEASE version but we couldn't because spring-integration-kafka (we also use it) has dependency to 2.2.4 version where there are usages of org.springframework.integration.Message, for 4.0.0 this Message was moved to spring-messaging module into other package org.springframework.messaging.Message.\n\nIt one thing that I noticed. May be there are other dependencies were broken in 4.0.0 version.\n\nWhat do you think about moving to 4.0.0 now? I think it make sense for guys who wanna use 4.0.0 spring integration.\n\nThanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43871649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43874041", "body": "Thank you for such quick answers.\nI thought that I had created a pull request to the kafka module. I'm new on GitHub and it's my first pull request here)). Sorry for that.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/43874041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmirc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44327043", "body": "I am using JavaConfig. I put the @ComponentScan on MyIntegrationFlow and the service bean is still null.\n\nI also tried to change @Component to @MessagePoint but it doesn't work\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44327043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44347012", "body": "I use also spring boot. The sample doesn't implement my issue that is an autowired bean that uses another autowired bean\n\nI will try your suggestion (debug mode) \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44347012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44355869", "body": "I downloaded the dsl sample and I did some changes to reproduce the problem. I created two new classes and I updated the method flow as below.\n\nStart the application and you can verify the secondLevelService bean in the FirstLevelService class is null.\n\ndsl.Application.java (updated)\n\n```\n       @Autowired\n        private FirstLevelService firstLevelService; \n\n    @Bean\n    public IntegrationFlow flow() {\n        return IntegrationFlows.from(\"requestChannel\")\n                .transform(new ObjectToStringTransformer())\n                .filter((String p) -> p.startsWith(\"#spring\"),\n                        f -> f.discardChannel(\"rejected\"))\n//              .handle(twitterGate())\n//              .transform(\"payload[0]\")\n                                .transform(firstLevelService::hello)\n                .transform(new ObjectToJsonTransformer())\n                .get();\n    }\n```\n\nNew FirstLevelService (new)\n\n```\npackage dsl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.integration.annotation.Transformer;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class FirstLevelService {\n\n    @Autowired\n    private SecondLevelService secondLevelService;\n\n    @Transformer\n    public String hello(Object name) {\n        return \"hello\" + name + \" - \" + secondLevelService.world();\n    }\n}\n```\n\nNew SecondLevelService (new)\n\n```\npackage dsl;\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class SecondLevelService {\n\n    public String world() {\n        return \"world\";\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44355869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44398275", "body": "It works.\n\nHowever, at this point,  I can't use @Lazy with a bean that extends AbstractReplyProducingMessageHandler. I got lazing initialization errors. I switched to a service activator and not it works\n\nThanks for your help\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44398275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354214", "body": "Here is the code and after the exception\n\n``` java\n@Bean\npublic IntegrationFlow dataCollectorRouterByGroupFlow() {\n        return IntegrationFlows.from(DataCollectorChannelConstant.DATA_COLLECTOR_CHANNEL)\n                .recipientListRoute(r ->\n                        r.defaultOutputChannel(DataCollectorChannelConstant.DATA_COLLECTOR_OTHERS_GROUP_CHANNEL)\n                                .recipient(DataCollectorChannelConstant.DATA_COLLECTOR_CBP_GROUP_CHANNEL,\n                                        m -> m.getHeaders().get(GlobalHeaders.GROUP_ID) != null &&\n                                                m.getHeaders().get(GlobalHeaders.GROUP_ID).equals(Constants.CBP_GROUP_ID))\n                                .recipient(DataCollectorChannelConstant.DATA_COLLECTOR_MEC_GROUP_CHANNEL,\n                                        m -> m.getHeaders().get(GlobalHeaders.GROUP_ID) != null &&\n                                                m.getHeaders().get(GlobalHeaders.GROUP_ID).equals(Constants.MEC_GROUP_ID)))\n                .get();\n    }\n```\n\n```\n - [ERROR] org.springframework.integration.handler.LoggingHandler - org.springframework.messaging.MessageDeliveryException: no channel resolved by router and no default output channel defined\n    at org.springframework.integration.router.AbstractMessageRouter.handleMessageInternal(AbstractMessageRouter.java:194)\n    at org.springframework.integration.handler.AbstractMessageHandler.handleMessage(AbstractMessageHandler.java:78)\n    at org.springframework.integration.endpoint.PollingConsumer.handleMessage(PollingConsumer.java:74)\n    at org.springframework.integration.endpoint.AbstractPollingEndpoint.doPoll(AbstractPollingEndpoint.java:205)\n    at org.springframework.integration.endpoint.AbstractPollingEndpoint.access$000(AbstractPollingEndpoint.java:55)\n    at org.springframework.integration.endpoint.AbstractPollingEndpoint$1.call(AbstractPollingEndpoint.java:149)\n    at org.springframework.integration.endpoint.AbstractPollingEndpoint$1.call(AbstractPollingEndpoint.java:146)\n    at org.springframework.integration.endpoint.AbstractPollingEndpoint$Poller$1.run(AbstractPollingEndpoint.java:284)\n    at org.springframework.integration.util.ErrorHandlingTaskExecutor$1.run(ErrorHandlingTaskExecutor.java:52)\n    at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)\n    at org.springframework.integration.util.ErrorHandlingTaskExecutor.execute(ErrorHandlingTaskExecutor.java:49)\n    at org.springframework.integration.endpoint.AbstractPollingEndpoint$Poller.run(AbstractPollingEndpoint.java:278)\n    at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)\n    at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:744)\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354462", "body": "You can get it in modifying your current unit test\nin the `recipientListFlow` method you need to change `r.defaultOutputChannel(defaultOutputChannel())` to `r.defaultOutputChannel(\"defaultOutputChannel\")`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354689", "body": "Yes no problem\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/45354689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46845133", "body": "Thank for your answer\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46845133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47107363", "body": "Hi Artem,\n\nThanks for your quick answer.  It works perfectly.\n\nI will put the name of the project in the any futures questions or issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47107363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47113415", "body": "Currently your solution works to set the messageStore but not the scheduler.\n\nI would like to contribute but I will see if I have time to do it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47113415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49070396", "body": "Hi, \n\nThanks it works.\n\nI don't understand why I'am the only person who is asking questions because your work is awesome.\nCurrently, I am rewriting an application from Spring to Spring Integration and I decided to use the Java-DSL api. \n\nAnother question about a transaction. I have the following flow\n\n```\n    @Bean\n    public IntegrationFlow mailSenderFlow() {\n        return IntegrationFlows.from(SenderChannelConstant.MAIL_SENDER)\n                .handle(mailSenderHandler,\n                        c -> c.id(GlobalChannelConstant.MAIL_SENDER_CONTROL_BUS)\n                                .poller(Pollers.fixedDelay(100).maxMessagesPerPoll(1).transactional(transactionManager()))\n                                .advice(defaultRetryAdvice)\n                )\n                .get();\n    }\n```\n\nChannelQueue using messageStore\nHandler with transactional and retry (wait 1 hour between each retry)\n\nI would like to persist the RetryContextCache because once the handler retrieves the message, the message is gone from the ChannelQueue and if the server goes down, the message is lost.\n\nLet me know if the flow is supported or not.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49070396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49077630", "body": "I though I was able to revert back to the queue the message if any exceptions occurs. Like JMS.\n\nIf I am implementing your solution, I just need to manage the number of retry. Thanks for your input.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49077630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "man8": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44420828", "body": "Thank you @artembilan for the advice: I've now done so.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/44420828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jdpgrailsdev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46016217", "body": "I have signed the CLA (confirmation number 84320140613071640).  Please let me know if any of the formatting is not in line with what is specified in the guidelines and I can re-submit if needed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46016217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46018442", "body": "Thanks.  JIRA created (https://jira.spring.io/browse/INT-3441) and PR re-submitted from branch (https://github.com/spring-projects/spring-integration-extensions/pull/79).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46018442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46021472", "body": "No worries.  Let me know how I can help if anything comes up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/46021472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "benbramley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47450191", "body": "Hi @artembilan - the result limit defaults to 100 if not specifically set in outputArgs (this is set on the Splunk server side). I think it's a good idea to set a limit for sure, however it's also nice to be able to set an unlimited option if needed. In this case we were trying to test the engineering limits during performance testing so we were ramping up more and more Splunk results to see how the JVM behaved and found this bug.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47450191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47481237", "body": "Hey,\n\nYes will eventually get outofmemory if I can generate enough data from Splunk. Same is true if I run a query on a database that returns too many results.\n\nRegardless though this behaviour is different from what is documented in the Splunk SDK (and where the confusion started):\n\n\"The maximum number of results to return. If value is set to 0, then all available results are returned.\"\n\nLink is here:\n\nhttp://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults\n\nShould probably document this as being different to avoid confusion in the future.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47481237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47511885", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47511885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47732698", "body": "Hi,\n\nYes the problem is that a real-time search never really ends. It is a continuous stream of data. So the line inside the runQuery method - while (!job.isDone()) won't ever end until the job is finalised by the user (which is what @zenmoto is seeing).\n\nWe will need to change the way we treat real-time searches to use while(!job.isReady()) and use an InputStream to return the results as they come through.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/47732698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/48711668", "body": "@markfisher yes I'll take a crack at it\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/48711668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49829428", "body": "@ghillert Hi, I updated the RT search based on the poller model but it does not work well. The RT search in Splunk is really meant to be a stream (and yes it is designed to run for long periods) so I think it's best if we move this to an event-driven model as suggested by @artembilan.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/49829428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "markpollack": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50021540", "body": "We can't be based on SI 4.0 snapshot as this we need a GA release for XD's GA release.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50021540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50022318", "body": "So I suggest we do option 1 ASAP.    Regarding option 2, doesn't seem natural to have a 'splitter' be a source of messages, but we can discuss naming afterward as well as the general approach.  Thanks for looking into it!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/50022318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "andrewmilkowski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51922069", "body": "anyway to safely disable regex validation (for now) till official patch is issued ?\n\nthanks so much!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/issues/comments/51922069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "smaldini": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4661779", "body": "This is indeed a plan, we do need this for several use cases.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/4661779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "frjtrifork": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20222561", "body": "Ah, yes - I missed it because the code stille works when calling add on the list. :-/\nThis is my first pull request to one of the spring projects. How would you like me to proceed, do I fix the error in my branch, and create a new pull request - or what should I do?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-integration-extensions/pulls/comments/20222561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}