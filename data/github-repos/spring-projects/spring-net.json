{"_default": {"1": {"jeffreyschultz": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/144", "title": "I wish to join this project to help get it going again", "body": "Like the title says, I would like to join the project and help get development started again. There is still a need for Spring.NET in the .NET ecosystem, and it's a shame to see this wonderful code base collect dust.\r\n\r\nI have already forked the repo in GitHub, and am wondering what is the state of things that need to be worked? I have used both Spring.NET and Spring, so I have a bit of familiarity with them, which is good, but I have only recently started to poke around the source code.\r\n\r\nAlso, who is available to provide guidance on implementation decisions and deal with pull requests? Anyone?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/144/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jorgemtnz": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/143", "title": "Error creating context 'spring.root' inner exception: WebSupportModule not initialized", "body": " I have an ASP.NET web application which compiles and uses some references, like\u00a0Spring.Web,\u00a0Spring.Core,\u00a0Spring.Aop,\u00a0Spring.Core\u00a0and\u00a0Spring.Services. The corresponding\u00a0dlls\u00a0are in the\u00a0bin\u00a0folder.\r\nWhen I start the web application with Internet Explorer, I get this exception:Error creating context 'spring.root': An exception occurred in the type initializer of  \r\n'Spring.Objects.Factory.Support.WebObjectFactory'. \r\nthe inner exception TypeInitializationException: An exception occurred in the type initializer of 'Spring.Objects.Factory.Support.WebObjectFactory'. ConfigurationErrorsException: WebSupportModule not initialized. Did you forget to add <add name = \"Spring\" type = \"Spring.Context.Support.WebSupportModule, Spring.Web\" /> to your web.config's <httpModules> -section?\r\n\r\nThis is part of my\u00a0webConfig\r\nhttpModules>\r\n     add name=\"ScriptModule\" type=\"System.Web.Handlers.ScriptModule, System.Web.Extensions, \r\n                   Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"/> \r\n      add name=\"Spring\" type=\"Spring.Context.Support.WebSupportModule, Spring.Web\"/> \r\n      add name=\"BRF\" type=\"BRF.Core.Web.BRFHttpModule, BRF.Core.Web\"/>\r\nhttpModules> \r\n\r\nBut i do it right, so i do not understaing why happends the exception. What can i do?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kelvin17": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/142", "title": "why rollbackOnCommitFailure of AbstractPlatformTransactionManager is false default?", "body": "Dear all\uff1a  \r\nRecently,I have got a problem. The spring commit transaction  is failed,but the data in MySQL Database is updated.\r\n\r\nGenerally, We think the data will be rollbacked when transaction commit is failed. \r\n\r\nThen I look at the spring code.\r\nMy transactionManager is org.springframework.jdbc.datasource.DataSourceTransactionManager. And we don't set the property named \"rollbackOnCommitFailure\".So when the commit operation is failed,the spring will not to roolback.\r\n\r\nMy question is why rollbackOnCommitFailure is false as default in org.springframework.transaction.support.AbstractPlatformTransactionManager whick is superclass of DataSourceTransactionManager\uff1f\r\nAnd when is it not necessary to rollback when commit failed\uff1f\r\n\r\nError Stack:\r\n`Caused by: org.springframework.transaction.TransactionSystemException: Could not commit JDBC transaction; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Communications link failure during commit(). Transaction resolution unknown.\r\n        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:270)\r\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)\r\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)\r\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:147)\r\n        at com.alipay.pcapplycore.core.service.command.impl.AsynCmdServiceImpl.lockCommand(AsynCmdServiceImpl.java:120)\r\n        at com.alipay.pcapplycore.core.service.template.impl.CmdExecuteTemplateImpl.execute(CmdExecuteTemplateImpl.java:58)\r\n        ... 17 more\r\nCaused by: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Communications link failure during commit(). Transaction resolution unknown.\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\r\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\r\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\r\n        at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)\r\n        at com.mysql.jdbc.Util.getInstance(Util.java:386)\r\n        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1013)\r\n        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:987)\r\n        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:982)\r\n        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:927)\r\n        at com.mysql.jdbc.ConnectionImpl.commit(ConnectionImpl.java:1664)\r\n        at com.alipay.zdal.datasource.resource.adapter.jdbc.BaseWrapperManagedConnection.jdbcCommit(BaseWrapperManagedConnection.java:492)\r\n        at com.alipay.zdal.datasource.resource.adapter.jdbc.WrappedConnection.commit(WrappedConnection.java:392)\r\n        at com.alipay.zdal.datasource.context.GenericConnectionContext.commit(GenericConnectionContext.java:215)\r\n        at com.alipay.zdal.client.dispatch.connection.DispatchableConnection.commit(DispatchableConnection.java:284)\r\n        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:267)\r\n        ... 22 more`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neo-eureka": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/141", "title": "Is the project still alive?", "body": "Hello!\r\nIs the project still alive and do you plan to develop it in the future?\r\nThe [website](http://www.springframework.net/) is dead since 2012, the latest announcement there is about 2.0.0 milestone, and it looks like it is still almost where it was more than 4 years ago. The [Code frequency](https://github.com/spring-projects/spring-net/graphs/code-frequency) is also a sorry sight.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ah1508": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/140", "title": "Assembly name cannot be named 'Common' (CodeConfigApplicationContext,  ScanAllAssemblies)", "body": "Hi,\r\n\r\nComponent scanning does not work if the application (class library, console application, etc...) assembly name is 'Common'. Easy to test : \r\n\r\n```\r\nnamespace ConsoleApplication1 {\r\n    [Component]\r\n    class A {\r\n\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var ctx = new CodeConfigApplicationContext();\r\n            ctx.ScanAllAssemblies();\r\n            ctx.Refresh();\r\n            Console.WriteLine(ctx.GetObject<A>());\r\n            Console.Read();\r\n        }\r\n    }\r\n}\r\n```\r\nAcording to the log the assembly is correctly scan but the object is not registered so GetObject fails.\r\n\r\nIf Common is a forbidden word it should be documented.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jdnichollsc": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/139", "title": "Tenant per request", "body": "Hi guys,\r\n\r\nIs possible to instance a Data context of **Entity Framework** per request with a different **connection string**?\r\n\r\nI'm using the following object to configure **Sprint**:\r\n```xml\r\n<objects xmlns=\"http://www.springframework.net\">\r\n  <description>My business services</description>\r\n  <object id=\"DataContext\" type=\"MyProject.Persistence.DataContext, MyProject\" scope=\"request\">\r\n</objects>\r\n```\r\n\r\nThanks in advance, Nicholls", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jacargentina": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/138", "title": "Make SyntaxErrorException public", "body": "Would be nice to have the pure exception available to catch it and point the user the UI editor position where the problem is. There is a `column` property that would help a lot for doing that.\r\n\r\nMy only option now it to parse the message from the exception as i cant directly catch it, being it `internal`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/130", "title": "Some characters are not valid on expressions?", "body": "For example, trying to access a property named `A\u00f1osAntiguedad` on my c# class, i get an exception for unrecognized char 0x0F1.\n\nIf the response is a confirmation, it is possible to tweak the expression parser to allow me use those chars?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/76", "title": "Make ExpressionParser public to allow, for example, expression formatting", "body": "I'm using Spring.Core on my c# project, and the final user writes its scripts using the Expression language. A nice addition i want to provide is being able to \"nice format\" this scripts (indentation, new lines etc...) to make all expressions look nice and well formatted (a really big script can be confusing if not well formatted)\n\nI think the best way to make this is use the ExpressionParser / (or lexer, i dont know exactly yet...) to get \"the expression tree\" from the text string, and then insert indentation, spaces, new lines, etc according to each tree node type (conditionals, sequences, etc)\n\nAs ExpressionParser is private, i cant acces it directly to achieve that. So that is why i'm propossing to make that class public.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/76/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10234946", "body": "I've created #35 pull request with the test as sbohlen requested. Closing this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10234946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10236857", "body": "Nop, getting same exception here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10236857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10236889", "body": "As posted on #34, the syntax \n\n T(MyClass).MyConstant \n\ndon't work either\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10236889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10286239", "body": "This is very urgent, anybody coul look at?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10286239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10321719", "body": "Strings works, bytes doesn't. Please somebody can fix that?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10321719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10329093", "body": "This pull request is exactly what you just did. :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10329093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "irperez": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/137", "title": "JSON Support for IMessageConverter (Spring.Messaging.Nms.Support.Converter)", "body": "I'm new to spring so forgive me for my ignorance.\r\n\r\nI would like to suggest adding a JSON MessageConverter to the Spring.Messaging.Nms.Support.Converter namespace.\r\n\r\nI can easily do this and base it on the JSON.Net or some other JSON serializer that this group prefers.  Or possibly make the JSON serializer configurable some how.\r\n\r\nThe payload size is so much smaller than XML hence better performance over the wire.  I'm going to implement this for my company regardless.  But looking to contribute for the greater good.\r\n\r\nWhat is everyone's thoughts?  Maybe this was already suggested?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lahma": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/133", "title": ".NET Core support", "body": "This is an umbrella issue listing some things that need to be taken care of in order to get .NET Core support working.\r\n- [x] make Common.Logging support .NET Core \r\n- [x] upgrade NUnit (in progress)\r\n- [ ] replace Rhino.Mocks with FakeItEasy (in progress)\r\n- [x] replace packages.config with project.json\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/133/reactions", "total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8aeb95320a96bb2759a5d756632f23ebb775abc8", "message": "Merge pull request #135 from spring-projects/features/project-json\n\nconvert packages.config files to project.json"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2b4eade2cbd8910da36c5f462d6800b1905fa6b8", "message": "convert packages.config files to project.json\n\n* reduce console output in builds"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4364f74e37d4745b06c7a978417520118966f389", "message": "Merge pull request #134 from spring-projects/features/nunit35\n\nUpgrade to NUnit 3.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7b0a1d29a47d2c8f83779883be71d6fef48760c0", "message": "Merge pull request #95 from sean-gilliam/fix-typos\n\nFixed several typos"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1b84a7296e3c1e611b14d14aa48a1ac20c6dd663", "message": "always overwrite existing Quartz properties in SchedulerFactoryObject"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c6b176aa27ad8547ed489903c0793a7a44b23e75", "message": "upgrade to Common.Logging 3.0.0.0, Quartz 2.3.1 and NHibernate 4.0.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e2263f1e77a2465196660e9ed363b1b4932bce2a", "message": "Merge pull request #87 from sean-gilliam/update-delegates-to-lambda-syntax\n\nReplaced delegate syntax with easier to read lambda syntax"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/61ee75fda866c96f4d0e6998883227f568602844", "message": "update to Common.Logging 2.3.1 and Quartz.NET 2.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d0c97dab87a0731e3cbed446aa9270c45975bd50", "message": "NHibernate 4 support\n\n* replace NHibernate33 and NHibernate32 packages with NHibernate3 package"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/88d2dc494eedd9e383c674e56cb24c61bd2eb4c5", "message": "Merge pull request #84 from chadsowald/master\n\nAdd equality members to RuntimeObjectReference to fix key-ref merging."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1b01e4b24523e7de24c599ee54cc33a4a83ba7af", "message": "Merge pull request #80 from aaronmell/master\n\n \tRefactored DelegatingLocationSessionFactoryObject to support named connection strings"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/bc855ddf7753b01141bd929936aac917931a0cf9", "message": "fix documentation issue"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/64f84fe2bd1b06df8e97ad1c0d5ea5bec6ec42ad", "message": "Merge pull request #74 from thomast74/AdoTemplateInjection\n\nExclude AdoTemplate from dependency check by default"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2f75149e8c15ee86da719e848103f4b8a3888b8e", "message": "Merge pull request #77 from twisterino/NUnitTearDownFix\n\nPrevent TearDown to swallow exceptions"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a32fee13be53e1f792c0c0cacebe2ab06f276dbb", "message": "Merge pull request #73 from thomast74/UnusedErrorLogging\n\nAn empty typeToLoad cause the Type Resolver to throw an error"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1e7e4571b855fb90f17f3d10fa73b52990db6a84", "message": "upgrade to Quartz.NET 2.2.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e9ade58ee743ae9e10eb8e7fb63cd1734e8cf159", "message": "SPRNET-1571 SPRNET-1572 set OracleCommand's BindByName to true\n\n* add native ODP.NET 12 provider\n* add managed ODP.NET 12 provider"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b7e5fa9137d033e75ba9721186802479eb6102a6", "message": "SPRNET-1558 HashtableCachingAdvisorChainFactory is not thread safe"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d0ad596396fcb67daf722081b038a3d40dc1fcb7", "message": "fix project file nowarn flags in release mode, fix build cmd platform detection"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/68e760b52f2c26e05da62cd7879fb52d80dd9281", "message": "upgrade Quartz.NET dependency to version 2.2.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9a2907a8a10b5f5fdf6cfd0ec104d57f1ce7cbbb", "message": "fix AbstractObjectFactory's singleton dispose order\n\n* using stable collection and reversing it before traversal\n* also remove .gitattributes"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/bcaf73332f948fbbb5f0006690c7263a4d8e410c", "message": "Merge pull request #61 from CNemo7539/FixNAntConfig\n\nAdded NAnt configuration to run on .Net 4.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3c1bbe0e2f193df2c61a176f9e44a4e3b636a13c", "message": "add AssemblyInfo.cs to Spring.Calculator.Web.2010.csproj to avoid MsBuild bug with no CS files in project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9222cef09b8e829c320f8f5ee8ff0bc2be5bc454", "message": "add .gitattributes with GitHub recommended configuration"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b749afe03846ae57811b5ffd8eca9bd09afddb06", "message": "SPRNET-1444 update documentation to reflect new default transaction isolation level Unspecified"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ed29a994b4ee2fd9d34a26745db13608c9d76b5f", "message": "SPRNET-1509 upgrade to NUnit 2.6, use NuGet packages"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/373ce41e76556979fef03c6bd4a9d00105a539c5", "message": "SPRNET-1564 Remove code marked as obsolete"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4f8bb0ce7fad198e3169e701de2eff2f2b91f2ea", "message": "SPRNET-1541 fix documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c869de5cac67fbf9f2b5c61886fcb4361472cedc", "message": "SPRNET-1541 fix documentation to show correct prototype configuration via XML"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/25029d3398e39dc1ac03577a36cc10908e309e58", "message": "fix Spring.Calculator example project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0dfc0bc57bdbc09a9e06f094faf1f6f143608092", "message": "SPRNET-1539 upgrade Quartz dependency to 2.2.1, use Spring.Scheduling.Quartz2 as package name\n\n* replace lib dir NHibernate and Quartz dlls with NuGet references\n* update examples to prefer NuGet packages"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/62e61ae9e00de8835984640d86dc167acbae26ec", "message": "clean up example solutions, use package restore, use single location for common logging and log4net assemblies"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1105bb351b786c49baece88168ed7acb4d8aedfe", "message": "clean up usage of obsolete library members, set warnings as error to all projects, fix accordingly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1b733688269db3f9a0476440e5b64f9e2e0d9c05", "message": "SPRNET-1563 Make code as ClsCompliant as possible"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/72fd5be2805e4042201f7b9f85f110b90c6dda26", "message": "Merge pull request #57 from AndreasKl/master\n\nSPRNET-1387: ASP.NET PageHandlerFactory cannot inject dependencies in the presence of the WebForms 4.0 routing infrastructure"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fc5fa113bb4c3f9238641171d6bcbe923f4a27d6", "message": "SPRNET-1561 ASP.NET MVC 5 and WEB API 2 support\n\n* also add .NET 4.5 targets\n* fix issues with libs and build targets"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1466cc9b43e90d55fe62aece37a975973758dd7e", "message": "Merge pull request #42 from thomast74/SPRNET-1543\n\nSPRNET-1543 Reviewed GetObjectDefinionNames inconsistencies"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e7487c074aa102636ae4a50346068f3a21162438", "message": "Merge pull request #52 from norvegec/master\n\nAdded ManagedDictionary.Merge(object) support for generic dictionary"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/6b14901ab04fe40499d0075d50d8190ec3443dbd", "message": "Merge pull request #33 from thomast74/DocUpdate\n\nCode configuration documentation update"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8917f95a089166e65c0dff20fbe1cec16c16385a", "message": "Merge pull request #54 from AndreasKl/master\n\nUpdate to use Apache NMS 1.6"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/54bcda7f7781e2ad7c259111add59edf8fef75be", "message": "SPRNET-1560 remove VS2008 solutions and projects\n\n* update build files to use explicit library references to ensure proper 4.0 build on 4.5 enabled machines\n* remove Spring.Web.MVC projects from main solution file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e82f0547d67d203f59df96a8cac46184a4588a63", "message": "Merge pull request #47 from thomast74/SPRNET-1545\n\nSPRNET-1545 Request or Session scoped objects with IDisposable are failing during the 2nd time of the creation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/705b085a16bcf1c3a10735057e7d4b4669ac5120", "message": "Merge pull request #48 from ohadho/master\n\nAllow CompositionProxyTypeBuilder to proxy objects with protected constructors"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d9ee1843ded15e2b41d74eb69964a448ce374e91", "message": "Merge pull request #49 from ericklombardo/master\n\nResolved issue SPRNET-1547"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3afac5fc08ac475b6611321876b30f00771e9f4a", "message": "Merge pull request #43 from thomast74/SPRNET-1544\n\nSPRNET-1544 Problem with scanned objects and ObjectScope is Request or S..."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a0bef41b6c81a5569066dcf8001b92f4c55394b9", "message": "Merge pull request #44 from thomast74/ComponentScan-Logging\n\nEnhance ComponentScan logging messages"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/129fd2042cf4ceb6cd989a34f7c10c42352af02d", "message": "update NuGet to v. 2.7.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1747ed066c5447ebcaf4e9f9dcef47d125af9af2", "message": "update to NAnt 0.92 final"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c639a9590488b0a40f7c2ed963e21a4b2314337e", "message": "remove Spring.MvcQuickStart that is for ASP.NET MVC 2"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ed4efe3180e327b075ab2936df9f25ddd3b21c99", "message": "add missing ICSharpCode.NRefactory.CSharp.dll that was ignored by git for some reason"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a957f027fb8eead05ed3691bb2e370e772461710", "message": "use OpenCover by default, update OpenCover and ReportGenerator, remove ASP.NET MVC 2 from packaging"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c99b7d313eda0be4de11642f7f03a40ba096f745", "message": "fix AssemblyObjectDefinitionScanner, was using base.Scan method instead of possible override"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ddd6e3a76bc995403258ce692bbeb7b6bef648cb", "message": "fix another concurrency issue in InitDestroyAttributeObjectPostProcessor, minor code cleanup, add resharper code style guidance for solution"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/21cbbd0ac9663d3a86ed293585b460cc4541e2f6", "message": "fix concurrency issue in AutowiredAttributeObjectPostProcessor where metada was left null if value was updated before lock was made"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/10b6d3a7473a185e4ea3eba94f9cd7769e91e414", "message": "Upgrade OpenCover and ReportGenerator, parameterize OpenCover to build\n\nNow one can run coverage with open cover using -D:test.coverage.tool=opencover"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/adb3498653bab51a33e05dbd1c7475187469d990", "message": "SPRNET-1539 Quartz.NET 2.1 support, try different ilmerge strategy and use Quartz.NET 2.1.2 DLLs"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c275de17bc976fe8efe7c8aabc5a3d44a3e3a604", "message": "Upgrade to Common.Logging 2.1.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/f3d99a9ec2c1edb5f2f3439dbe36a1cec72f6ceb", "message": "Delete and add to .gitignore Spring.Web.Conversation.NHibernate*.xml"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ebfe101ad078c5459f196aa03212f7c67ee01d81", "message": "SPRNET-1539 Quartz.NET 2.1 support"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5526536", "body": "I believe this does not compile under .NET 3.5 that Spring.NET also supports? There should be #defines to account for .NET version.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5526536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5528464", "body": "Here's a trivial example: https://fisheye.springsource.org/browse/spring-net/src/Spring/Spring.Core/AssemblyInfo.cs?r=de5b9214079abd21247ef95e796a347d08bbb788\n\nSo it's either #if NET_4_0 or #if !NET_4_0 depending how you want to check. Build files and projects have this define name set correctly.\n\nYou just need to check that code compiles with both VS2008 and 2010 or alternatively with buid.cmd\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5528464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/27941939", "body": "Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/27941939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28148040", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28148040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28152800", "body": "thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28152800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28153118", "body": "could you please rebase this against latest master, seems to be a bit out of date\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28153118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28153637", "body": "thanks for the contribution! I had to rebase and tweak the commit a bit, but it's now in master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28153637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28153684", "body": "thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28153684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28154660", "body": "@norvegec if you'd add the suggested extra check I believe this could be merged to master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/28154660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29056867", "body": "Thanks for offering help, I'm trying to sort out open pull requests and JIRA issues as time allows. M3 version would be a nice thing to get out.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29056867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132246", "body": "Really good work, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132307", "body": "Good work, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132330", "body": "Good work, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132366", "body": "Good work, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132380", "body": "This was fixed with pull #42 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132412", "body": "PR #54 should haved fixed this now in master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132432", "body": "I'm closing this old issue now, report generations seems to work nicely with latest binaries.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132443", "body": "Hope that you got enough answers, closing this issue now as it's not directly related to Spring.NET\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29132443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29785903", "body": "Very good work, thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29785903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/32715843", "body": "thanks, good work!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/32715843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33293074", "body": "All I can say at the moment that it's in the works and hopefully RC 1 will be out soon (tm). \n\n@CNemo7539  Could you elaborate on the breaking changes? I'd like to enhance the documentation where possible. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33293074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33401368", "body": "I've been running 2.0 M2 in production for a year now without issues using .NET 4.5. Well there have been some issues that were related to CodeConfig and fixed now in upcoming version. \n\nI have not yet checked the problems that generics introduction has brought that were discussed here. They might cause some tweaks to API.\n\nOverall the code base is well tested and should not give any big surprises.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33401368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37658622", "body": "I've updated the db provider to automatically set the BindByName to true for Oracle commands. Could you build Spring.NET from source (VS build should suffice) and check if problem is resolved?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37658622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38534944", "body": "@vivf86 have you had the time to test this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38534944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38534983", "body": "@vivf86 have you had the time to test this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38534983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38542661", "body": "Thanks for the update, we'll wait for you input!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38542661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39287135", "body": "Could you elaborate a bit more? What is the more specific dependency in the stack trace that is not injected? I don't see how AdoTemplate would ever be auto-injected if it is not defined in application context.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39287135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39634061", "body": "Thanks, good catch!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39634061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/49503155", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/49503155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51708322", "body": "Thanks, took a while but seems like the correct solution for now :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51708322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51708382", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51708382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/56167288", "body": "Thanks for the contribution and detailed report!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/56167288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/59653603", "body": "I've now pushed NHibernate 4 support to master and it should also include build issue fixes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/59653603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/59653618", "body": "Closing now as no activity.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/59653618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/64692475", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/64692475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71977325", "body": "Thanks for reporting this issue. I've extracted the relevant property setting fix as a separate change and pushed it to master. Hope this resolves the issues you have been facing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71977325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72401267", "body": "One thing that I just remembered is that we probably should also cache the type resolution result. It's quite costly to find types that implement/extend the type. After all we use the first result. So caching the result object name in container would give good performance boost. Unlikely that implementation would be swapped during runtime, but caching could be behind option that defaults to true.\n\nI profiled this once and GetObjectsOfType was eating the cycles. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72401267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72402068", "body": "I was thinking the specific resolver. Would be well contained and MVC is less dynamic in nature (usually no child containers etc). And MVC rules are quite clear, single or nothing expected as resolution result.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72402068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72402685", "body": "Sounds very reasonable, +1.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72402685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72857249", "body": "Thanks for taking the time an fixing these!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72857249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73400484", "body": "AFAIK the NHibernate team is more geared towards using their default proxy factory nowadays instead of using custom one. We should weight whether it's beneficial to have custom proxy factory provided with Spring with NH 3.3+...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73400484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75003924", "body": "@sbohlen What we would lose is the injection and advice capabilities (container generated entities). As with MVC the code uses find names by type functionality that is slow. So I'd say it's not a good idea at the moment use container created instances any way.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75003924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/87939756", "body": "Well that went fine then... This will be fixed in patch release in the future, but in the interim you can make sure you have latest NHibernate 4 NuGet package installed (4.0.3) and create assembly redirect for NHibernate 4. It should work fine with something like...\n\n``` xml\n<configuration>\n\n...\n\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"NHibernate\" publicKeyToken=\"aa95f207798dfdb4\" culture=\"neutral\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.4000\" newVersion=\"4.0.3.4000\" />\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>      \n\n...  \n\n</configuration>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/87939756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/103369816", "body": "@ynauls you should use package Spring.Web.Mvc3, Spring.Web.Mvc4 and Spring.Web.Mvc5. They have been updated for GA release. Spring.Web.Mvc is obsolete and Spring.NET 1.x series specific.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/103369816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256137490", "body": ".NET 4.5 is implicitly supported by supporting .NET 4.0, it's backwards compatible. Please raise an issue if you find some functionality not working under .NET 4.5.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256137490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256139721", "body": "I've created a separate issue https://github.com/spring-projects/spring-net/issues/133 about general .NET Core support that tries to make progress and required steps more transparent.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256139721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256685701", "body": "Multiple branches, I'm currently working on getting NUnit 3.5 working, which is a prequisite on branch https://github.com/spring-projects/spring-net/tree/features/nunit35 , then I'll proceed with changing from Rhino.Mocks to FakeItEasy . These two then can go to master when working properly.\n\nI guess initial project.json can go to master too if determined as functioning.\n\nAfter that I can rebase branch https://github.com/spring-projects/spring-net/tree/features/netcore on top of master again. So easier changes first and building .NET in parallel. It's a big undertaking.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256685701/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7548925", "body": "when would scope actually be null? scope will always have it's default value (Singleton) if the parse fails, but the code seems misleading.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7548925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549019", "body": "actually, it could never return null as it's against the contract :) but I will accept this as is then.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549038", "body": "we have objects, not beans\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549041", "body": "we have objects, not beans\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549044", "body": "we have attribute based configuration, not annotation\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549046", "body": "beans again in this section\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549056", "body": "folowing = following\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549084", "body": "[Predestroy] = [PreDestroy]\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549271", "body": "3.5 compiler won't accept optional parameters\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549273", "body": "indenting seems to be all funky here\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549276", "body": "-p ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549287", "body": "this changes the default behavior as parent is no longer checked if false (default)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "bagonhead": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/131", "title": "System.ArgumentOutOfRangeException while registering singleton", "body": "```\n at System.Collections.ArrayList.set_Item(Int32 index, Object value)\n   at System.Collections.Specialized.OrderedDictionary.set_Item(Object key, Object value)\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.AddSingleton(String name, Object singleton) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 517\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.CreateAndCacheSingletonInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2153\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2086\n   at Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveReference(IObjectDefinition definition, String name, String argumentName, RuntimeObjectReference reference) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ObjectDefinitionValueResolver.cs:line 366\n   at Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolvePropertyValue(String name, IObjectDefinition definition, String argumentName, Object argumentValue) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ObjectDefinitionValueResolver.cs:line 163\n   at Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(String name, IObjectDefinition definition, String argumentName, Object argumentValue) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ObjectDefinitionValueResolver.cs:line 113\n   at Spring.Objects.Factory.Support.ConstructorResolver.ResolveConstructorArguments(String objectName, RootObjectDefinition definition, ObjectWrapper wrapper, ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 592\n   at Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 156\n   at Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 95\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 1000\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 904\n   --- End of inner exception stack trace ---\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Imrahulk": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/128", "title": "{\"Error creating context 'spring.root': At least one object must implement IComparable.\"}", "body": "I am getting below error if i include two spring configuration xml file with PropertyPlaceholderConfigurer. This is happening after migrating from spring 2.0.1.40000 to 2.0.1.45000. I am trying to use it for WebApi 2\n\n`<object type=\"Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer, Spring.Core\"> <property name=\"ConfigSections\" value=\"databaseSettings\"/> </object>\n`\nStack Trace: \n\n[ArgumentException: At least one object must implement IComparable.]\n   System.Collections.Comparer.Compare(Object a, Object b) +12063859\n   System.Array.BinarySearch(Array array, Int32 index, Int32 length, Object value, IComparer comparer) +224\n\n[InvalidOperationException: Failed to compare two elements in the array.]\n   System.Array.BinarySearch(Array array, Int32 index, Int32 length, Object value, IComparer comparer) +308\n   System.Collections.SortedList.IndexOfKey(Object key) +31\n   System.Collections.SortedList.get_Item(Object key) +16\n   Spring.Collections.DictionarySet.Add(Object element) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Collections\\DictionarySet.cs:117\n   Spring.Objects.Factory.Support.AbstractObjectFactory.AddEmbeddedValueResolver(IStringValueResolver valueResolver) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:2549\n   Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ProcessProperties(IConfigurableListableObjectFactory factory, NameValueCollection props) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Objects\\Factory\\Config\\PropertyPlaceholderConfigurer.cs:267\n   Spring.Objects.Factory.Config.PropertyResourceConfigurer.PostProcessObjectFactory(IConfigurableListableObjectFactory factory) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Objects\\Factory\\Config\\PropertyResourceConfigurer.cs:245\n\n[ObjectsException: Errored while postprocessing an object factory.]\n   Spring.Objects.Factory.Config.PropertyResourceConfigurer.PostProcessObjectFactory(IConfigurableListableObjectFactory factory) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Objects\\Factory\\Config\\PropertyResourceConfigurer.cs:255\n   Spring.Context.Support.AbstractApplicationContext.InvokeObjectFactoryPostProcessors(IList objectFactoryPostProcessors, IConfigurableListableObjectFactory objectFactory) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:664\n   Spring.Context.Support.AbstractApplicationContext.InvokeObjectFactoryPostProcessors(IConfigurableListableObjectFactory objectFactory) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:611\n   Spring.Context.Support.AbstractApplicationContext.Refresh() in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:1014\n   Spring.Context.Support.XmlApplicationContext..ctor(XmlApplicationContextArgs args) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\XmlApplicationContext.cs:111\n   Spring.Context.Support.XmlApplicationContext..ctor(String name, Boolean caseSensitive, String[] configurationLocations) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\XmlApplicationContext.cs:156\n   _dynamic_Spring.Context.Support.XmlApplicationContext..ctor(Object[] ) +167\n   Spring.Reflection.Dynamic.SafeConstructor.Invoke(Object[] arguments) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Reflection\\Dynamic\\DynamicConstructor.cs:113\n   Spring.Context.Support.RootContextInstantiator.InvokeContextConstructor(ConstructorInfo ctor) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\ContextHandler.cs:562\n   Spring.Context.Support.ContextInstantiator.InstantiateContext() in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\ContextHandler.cs:507\n   Spring.Context.Support.ContextHandler.InstantiateContext(IApplicationContext parentContext, Object configContext, String contextName, Type contextType, Boolean caseSensitive, IList`1 resources) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\ContextHandler.cs:343\n   Spring.Context.Support.ContextHandler.Create(Object parent, Object configContext, XmlNode section) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\ContextHandler.cs:288\n\n[ConfigurationErrorsException: Error creating context 'spring.root': At least one object must implement IComparable.]\n   System.Configuration.BaseConfigurationRecord.EvaluateOne(String[] keys, SectionInput input, Boolean isTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult) +176\n   System.Configuration.BaseConfigurationRecord.Evaluate(FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult, Boolean getLkg, Boolean getRuntimeObject, Object& result, Object& resultRuntimeObject) +1139\n   System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object& result, Object& resultRuntimeObject) +1612\n   System.Configuration.BaseConfigurationRecord.GetSection(String configKey) +41\n   System.Web.HttpContext.GetSection(String sectionName) +52\n   System.Web.Configuration.HttpConfigurationSystem.GetSection(String sectionName) +56\n   System.Web.Configuration.HttpConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection(String configKey) +11\n   System.Configuration.ConfigurationManager.GetSection(String sectionName) +79\n   Spring.Util.ConfigurationUtils.GetSection(String sectionName) in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Util\\ConfigurationUtils.cs:68\n   Spring.Context.Support.ContextRegistry.InitializeContextIfNeeded() in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\ContextRegistry.cs:388\n   Spring.Context.Support.ContextRegistry.GetContext() in c:_prj\\spring-net\\src\\Spring\\Spring.Core\\Context\\Support\\ContextRegistry.cs:252\n   Spring.Web.Mvc.SpringMvcApplication.BuildDependencyResolver() in c:_prj\\spring-net\\src\\Spring\\Spring.Web.Mvc4\\SpringMvcApplication.cs:69\n   Spring.Web.Mvc.SpringMvcApplication.Application_BeginRequest(Object sender, EventArgs e) in c:_prj\\spring-net\\src\\Spring\\Spring.Web.Mvc4\\SpringMvcApplication.cs:53\n   System.Web.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() +141\n   System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) +69\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/128/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ygorlazaro": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/127", "title": "LINQ support", "body": "Is there any idea/plan to make LINQ support native at spring?\n\nBetter: is spring.net still under development?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/166688328", "body": "Well, I guess never. This project seems frozen. :(\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/166688328/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/180443290", "body": "I'm in, for sure!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/180443290/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pastaav": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/126", "title": "Like operator and int64 not working together with HibernateTemplate", "body": "With an Oracle database table with a column named Data with type NUMBER(16,0) I could with old versions of Spring.Net and nHibernate write an HQL and use the like operator like done in regular SQL:\n\n> string query =\n>                     \"from TD.Common.DataObject.TDDetectorFileInfo as info where info.Data like ?\";\n> object[] values1= new object[1];\n> object[] values2 =new object[1];\n> values1[0] = \"19911111000000\"\n> values2[0] = \"1991111100000%\"\n> var res = HibernateTemplate.Find<T>(query, values1);\n> var res2 = HibernateTemplate.Find<T>(query, values2);\n\nI expect to get the same result in res and res2 since the like operator in Oracle can be applied to numbers. \n\nUsing Spring.Net 2.0.1 and NHibernate4 I instead get an expection for the res2 call.\nInner exception text: \"Failed to convert parameter value from a String to a Decimal.\"\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211919256", "body": "Thank you for the input. Unfortunately the LIKE operator without being able to use the wildcard character '%' is pretty much pointless. \n\nOn the other hand further study of problem has made me suspect that the problem is not really located in Spring.Net. The NHibernate project has marked the API that uses the HQL syntax as deprecated. It seems likely NHibernates project has made the move to require typed parameters and the LIKE operator used in HQL suffer from this decision.\n\nCurrently I am considering to change API used for these calls. There is no strict requirement to stay with using the HQL syntax and I expect better performance if I avoid HQL.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211919256/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kvr000": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/117", "title": "SPRNET-1581", "body": "Implementation of SPRNET-1581\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7b027df89e1cf107dee9305d5b753460dc5d9889", "message": "SPRNET-1582: SimplePool releases dead objects but does not create new ones"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5b6324eb0f78e407ec540021e3361dd648b2fb18", "message": "SPRNET-1581: LinkedHashDictionary implementation"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vitorelli": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/113", "title": "Spring.Net MVC 5 + Razor Generator + Object Scope Request", "body": "Hello!\n\nI'm trying to use Spring.Net MVC 5 + Razor Generator + Object Scope Request (single by request), but when I try to send a request to my Controller I receive a error asking me to add < add name=\"Spring\" type=\"Spring.Context.Support.WebSupportModule, Spring.Web\" /> in < modules >. After that I receive another error described bellow at application start up. Could anyone help me to figure out this problem?\n\nError:\n\nThe layout page \"{...}.cshtml\" could not be found at the following path: \"~/Views/Shared/{...}.cshtml\".\n\nStack Trace:\n\n[HttpException (0x80004005): The layout page \"~/Views/Shared/{...}.cshtml\" could not be found at the following path: \"~/Views/Shared/{...}.cshtml\".]\n   System.Web.WebPages.WebPageExecutingBase.NormalizeLayoutPagePath(String layoutPagePath) +227\n   System.Web.WebPages.WebPageBase.PopContext() +85\n   System.Web.Mvc.ViewResultBase.ExecuteResult(ControllerContext context) +380\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult) +109\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult) +890\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(ControllerContext controllerContext, IList`1 filters, ActionResult actionResult) +97\n   System.Web.Mvc.Async.<>c__DisplayClass21.<BeginInvokeAction>b__1e(IAsyncResult asyncResult) +241\n   System.Web.Mvc.Controller.<BeginExecuteCore>b__1d(IAsyncResult asyncResult, ExecuteCoreState innerState) +29\n   System.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +111\n   System.Web.Mvc.Controller.EndExecuteCore(IAsyncResult asyncResult) +53\n   System.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +19\n   System.Web.Mvc.MvcHandler.<BeginProcessRequest>b__5(IAsyncResult asyncResult, ProcessRequestState innerState) +51\n   System.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +111\n   System.Web.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() +606\n   System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) +288\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "luizcarlosfaria": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/110", "title": "External reference url broken on topic '5.3.8.1. Lookup Method Injection'", "body": "Text \"You can read more about the motivation for Method Injection in >>>>>>this blog entry.<<<<<\"\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/72", "title": "Initialization throught  AOP Composite Proxy ", "body": "Wherever i use IInitializingObject and AfterPropertySet or define init method on container configuration file, the initialization occurs before a proxy creation. \nI`s cool, but all of my infrastructure need to initialization of my class depends of an context, created via AOP obviously dependente of the proxy.\n\nHow to define an method (like initialization) to spring.net call a specific method throught proxy infrastructure?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/72/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mowan808": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/109", "title": "spring-net for mono Error", "body": "[System.Configuration.ConfigurationErrorsException]: Error creating context &#39;spring.root&#39;: An exception was thrown by the type initializer for Spring.Context.Support.WebApplicationContext\n  at Spring.Context.Support.ContextHandler.Create (System.Object parent, System.Object configContext, System.Xml.XmlNode section) [0x00000] in <filename unknown>:0 \n  at System.Configuration.ConfigurationSection.GetRuntimeObject () [0x00000] in <filename unknown>:0 \n  at System.Web.Configuration.WebConfigurationManager.GetSection (System.String sectionName, System.String path, System.Web.HttpContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Configuration.WebConfigurationManager.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0 \n  at System.Web.Configuration.HttpConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection (System.String configKey) [0x00000] in <filename unknown>:0 \n  at System.Configuration.ConfigurationManager.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0 \n  at Spring.Util.ConfigurationUtils.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0 \n\n[System.TypeInitializationException]: An exception was thrown by the type initializer for Spring.Context.Support.WebApplicationContext\n  at (wrapper dynamic-method) object:_dynamic_Spring.Context.Support.WebApplicationContext..ctor (object[])\n  at Spring.Reflection.Dynamic.SafeConstructor.Invoke (System.Object[] arguments) [0x00000] in <filename unknown>:0 \n  at Spring.Context.Support.ContextHandler+RootContextInstantiator.InvokeContextConstructor (System.Reflection.ConstructorInfo ctor) [0x00000] in <filename unknown>:0 \n  at Spring.Context.Support.ContextHandler+ContextInstantiator.InstantiateContext () [0x00000] in <filename unknown>:0 \n  at Spring.Context.Support.ContextHandler.InstantiateContext (IApplicationContext parentContext, System.Object configContext, System.String contextName, System.Type contextType, Boolean caseSensitive, IList`1 resources) [0x00000] in <filename unknown>:0 \n  at Spring.Context.Support.WebContextHandler.InstantiateContext (IApplicationContext parent, System.Object configContext, System.String contextName, System.Type contextType, Boolean caseSensitive, IList`1 resources) [0x00000] in <filename unknown>:0 \n  at Spring.Context.Support.ContextHandler.Create (System.Object parent, System.Object configContext, System.Xml.XmlNode section) [0x00000] in <filename unknown>:0 \n\n[System.NullReferenceException]: Object reference not set to an instance of an object\n  at Spring.Context.Support.WebApplicationContext..cctor () [0x00000] in <filename unknown>:0 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/31384692", "body": " [System.Configuration.ConfigurationErrorsException]: Error reading section spring/context\n  at Spring.Util.ConfigurationUtils.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0\n  at Spring.Context.Support.ContextRegistry.InitializeContextIfNeeded () [0x00000] in <filename unknown>:0\n  at Spring.Context.Support.ContextRegistry.GetContext () [0x00000] in <filename unknown>:0\n  at Spring.Web.Mvc.SpringMvcApplication.BuildDependencyResolver () [0x00000] in <filename unknown>:0\n  at Spring.Web.Mvc.SpringMvcApplication.Application_BeginRequest (System.Object sender, System.EventArgs e) [0x00000] in <filename unknown>:0\n  at System.Web.HttpApplication+<RunHooks>c__Iterator2.MoveNext () [0x00000] in <filename unknown>:0\n  at System.Web.HttpApplication+<Pipeline>c__Iterator3.MoveNext () [0x00000] in <filename unknown>:0\n  at System.Web.HttpApplication.Tick () [0x00000] in <filename unknown>:0\n[System.Reflection.TargetInvocationException]: Exception has been thrown by the target of an invocation.\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0\n  at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) [0x00000] in <filename unknown>:0\n  at System.Web.Configuration.WebConfigurationManager.GetSection (System.String sectionName, System.String path, System.Web.HttpContext context) [0x00000] in <filename unknown>:0\n  at System.Web.Configuration.WebConfigurationManager.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0\n  at System.Web.Configuration.HttpConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection (System.String configKey) [0x00000] in <filename unknown>:0\n  at System.Configuration.ConfigurationManager.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0\n  at Spring.Util.ConfigurationUtils.GetSection (System.String sectionName) [0x00000] in <filename unknown>:0\n[System.Configuration.ConfigurationErrorsException]: Error creating context &#39;spring.root&#39;: An exception was thrown by the type initializer for Spring.Context.Support.WebApplicationContext\n  at Spring.Context.Support.ContextHandler.Create (System.Object parent, System.Object configContext, System.Xml.XmlNode section) [0x00000] in <filename unknown>:0\n  at System.Configuration.ConfigurationSection.GetRuntimeObject () [0x00000] in <filename unknown>:0\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0\n[System.TypeInitializationException]: An exception was thrown by the type initializer for Spring.Context.Support.WebApplicationContext\nat (wrapper dynamic-method) object._dynamic_Spring.Context.Support.WebApplicationContext..ctor (object[]) <0x000f1>\nat Spring.Reflection.Dynamic.SafeConstructor.Invoke (object[]) <0x00023>\nat Spring.Context.Support.ContextHandler/RootContextInstantiator.InvokeContextConstructor (System.Reflection.ConstructorInfo) <0x000f2>\nat Spring.Context.Support.ContextHandler/ContextInstantiator.InstantiateContext () <0x0003e>\nat Spring.Context.Support.ContextHandler.InstantiateContext (Spring.Context.IApplicationContext,object,string,System.Type,bool,string[]) <0x000bf>\nat Spring.Context.Support.WebContextHandler.InstantiateContext (Spring.Context.IApplicationContext,object,string,System.Type,bool,string[]) <0x0018a>\nat Spring.Context.Support.ContextHandler.Create (object,object,System.Xml.XmlNode) <0x00385>\n\n[System.NullReferenceException]: Object reference not set to an instance of an object\n  at Spring.Context.Support.WebApplicationContext..cctor () [0x00000] in <filename unknown>:0 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/31384692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/31384721", "body": "web run Environment :mono 3.2.5  ubutun linux system\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/31384721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/102980225", "body": "run asp.net mvc4  error by mono 4.0\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/102980225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "peto268": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/108", "title": "Misleading summary doc in AbstractPlatformTransactionManager.TransactionSynchronization", "body": "In AbstractPlatformTransactionManager.TransactionSynchronization the summary should be:\n\nSets and gets when this transaction manager should activate the thread-bound transaction synchronization support. Default is **\"never\"**.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "djechelon": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/106", "title": "Spring.Web.Optimization integration in Spring.Web", "body": "Hello, I have a feature request to propose.\n\nYou all know about Web Optimization Framework. One of its features is bundle mapping for styles and scripts. It is currently done via code using the BundleTable class. For example:\n\n```\n        bundles.Add(new ScriptBundle(\"~/bundles/jquery\").Include(\n                    \"~/Scripts/jquery-{version}.js\"));\n\n        bundles.Add(new ScriptBundle(\"~/bundles/jqueryval\").Include(\n                    \"~/Scripts/jquery.validate*\"));\n```\n\nMore advanced users map bundles to their official (or project-supplied) CDN.\n\nOn my own, a few years ago, I have made an XML-based configuration of the bundles, so these could be changed without recompiling the application. I don't know about its real utility in common projects, because normal product lifecycles require that a change in the Javascript/CSS fileset (e.g. adding/changing version of Bootstrap) is treated as a **change** and it's easy for a project manager to require a code change to map the new JS/CSS bundle to a library.\n\nAnyway I have created a parser that automatically maps bundles to the BundleTable according to the following syntax\n\n```\n<bundle xsi:type=\"StyleBundle\" virtualPath=\"~/bundles/metro-style-dark-blue\" cdnPath=\"http://some.cdn\">\n    <include>~/Content/themes/dark-blue.css</include>\n</bundle>\n\n<bundle xsi:type=\"StyleBundle\" virtualPath=\"~/bundles/metroStyle\">\n    <include>~/Content/base.css</include>\n    <include>~/Content/skeleton.css</include>\n    <include>~/Content/layout.css</include>\n</bundle>\n\n<bundle xsi:type=\"ScriptBundle\" virtualPath=\"~/bundles/jQuery\">\n    <include>~/Scripts/jquery-{version}.js</include>\n    <include>~/Scripts/jquery-ui-{version}.js</include>\n    <include>~/Scripts/jquery.easing.{version}.js</include>\n    <include>~/Scripts/plugins.all.js</include>\n    <!--<include>~/Scripts/jquery.address-{version}.js</include>-->\n    <include>~/Scripts/selectivizr.js</include>\n</bundle>\n```\n\nI do currently have defined an XML schema, a `ConfigurationSection` element and a utility class. Currently my implementation doesn't support transformations yet (very useful to add). I won't show for brevity.\n\nIn order to start the discussion, and later provide code, I would ask the Spring team if you are interested in adding support for `System.Web.Optimization` in the Spring context file, so that the developer can add bundles to the BundleTable according to a similar syntax in the web context file. That would be `automagically` activated by the Spring Web context once the proper tag is found in the XML.\n(Similarly for code-based configuration).\n\nThank you for your time.\n\npost scriptum: I read about the `bundles.config` file (that is supposed to do everything my implementation does) but I have found no information about it. My code was built about 3 years ago\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/103", "title": "[TransactionAttribute] not working with async programming", "body": "Hi,\n\nI have incidentally found that using AOP attributes with `async` programming **might** not as straightforward as it looks. Consider an example code (EF6 based, which works with `Tx`es)\n\n```\n[Transaction(ReadOnly = true)]\npublic async Task<boolean> UserExists(string username){\n    using (SomethingDbContext ctx = new SomethingDbContext(...)) {\n        return ctx.Users.AnyAsync(x=> x.username == username);\n    }\n}\n```\n\nInvoking this method like `await UserRepository.UserExists(someUserName);` throws a `DataException` saying the transaction is closed, most likely because the effects of AOP `Transaction` happen before the actual `Any` method is executed.\n\nPersonally, I gave up aynchronous programming for classing synchronous (maybe old school multi-threaded in some cases) programming but I'd like to share my finding with the community, so maybe if this cannot be avoided at least it could be documented (Spring docs look pretty old, there is no trace of asynchronous programming).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/102", "title": "Spring.Template.Velocity depending on the outdated Apache NVelocity", "body": "Since Castle Project forked their own version of NVelocity which is more maintained than the old dead NVelocity, and supposing their APIs are equal if not even exactly the same, I suggest one of the two options:\n- Switching from NVelocity to Castle Velocity\n- Forking a new Spring.Template.Velocity.Castle with support for Castle Velocity\n\nI have not yet used Spring.net and Velocity but I'll be doing it soon.\nWhat do you think about it? I think in the next weeks I could try one of the two options by myself on Spring code. Meanwhile I tried, out of curiosity, to fork Spring and switch from NVelocity to Castle: all tests passed\n\nhttps://github.com/djechelon/spring-net/commit/f8068653dfbfa1a969d6bb239e1af22792ce275b\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a07c73edf3439c3f4350c85f3dcab634a1c888a7", "message": "Merge branch 'spring-projects-master'"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/064112ab4206182c757602cb168e081964b494e6", "message": "Merge branch 'master' of https://github.com/spring-projects/spring-net into spring-projects-master\n\nConflicts:\n\tSpring.Net.2010.sln"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e46320ecbb073a8af08f590ef2834a9f32956e77", "message": "NOW tests pass"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/f54eeae380b422191343f12fcd41abbd15c04e28", "message": "All files are created equal. Some property files are more equal than others"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a3293c5d144721e374d2e3e32760e15f6c44a81d", "message": "Merge branch 'master' of https://github.com/djechelon/spring-net.git"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/036e1e872c5d3e49938786936c6cd675332a2187", "message": "Cloned from the original"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/970411d55d085161f960dd6fffc37ef52245e58a", "message": "Merge pull request #1 from sbohlen/master\n\nregister NamespaceParser from new Spring.Template.Velocity.Castle assembly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4623d52a56d5d6290f4617d20c4049066d5bef52", "message": "Spring Castle NVelocity with tests"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73360123", "body": "Where can I find documentation about Spring and earlier versions of EF? I'm intersted too and I'm available to contribute if I have to override some classes from the Spring framework to my project. I simply need to understand how to **correctly** set up transactions and EF/Spring best practices. I'm struggling from weeks with two Spring-EF projects to work on\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73360123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73361292", "body": "Oh I see. Actually I don't need full 1:1 mapping with NH features, because EF != NH and EF is a complete ORM per se.\n\nI'm working hard in understanding how internally both Spring and EF work in order to come up with a working code-pattern for setting up transactions and DB interoperability (EF doesn't support AOP transactions out of the box, but works great with transactions).\n\nI won't go in the deep today with my post but I believe that, at least according to my specific needs (transactions + DB interoperability) there should be no need to create a brand new Spring.Data.EF package. EF supports DB interop per se, as soon as you inject the connection string and [watch out](https://stackoverflow.com/questions/28172859/switching-between-mysql-sql-server-in-ef6) for pitfalls between MSSQL and MySQL.\n\nToday I found that setting up [Transaction] with a TxScopeTransactionManager does nothing at all when used with EF when the DbContext is instantiated with new(), unless _I implement_ a proper factory that injects the current connection/transaction into the DbContext (see https://msdn.microsoft.com/en-us/data/dn456843.aspx).\n\nMore in general, an integration between Spring and EF could offer these features I don't personally need in my project, but can be desirable by others:\n- Exception translating (EF has its own exceptions)\n- Exposing DbSet<T> as injectable/autowireable object, because DbSet<T> implements the DAO pattern per se\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73361292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73374752", "body": "Just one note for sake of discussion, I hope I'll be implementing it in the next few weeks.\nIn order to autowire a [Transaction]al DbContext I wanted to do the following:\n1. Classes that need DbContext during a transaction must call a GetDbContext() method that simply calls IApplicationContext's GetObject method\n2. Define DbContext as an object with a factory and a create method\n3. Build the factory class!\n\nBasically the factory class has a reference to the IPlatformTransactionManager and when the factory method is called it checks for an existing transaction. If the transaction exists, grab the connection and return a DbContext initialized with that connection but **not owning it** (as of [constructor](https://msdn.microsoft.com/it-it/library/gg696604%28v=vs.113%29.aspx)). If no transaction is active, it will be my choice to either throw (like Propagation.MANDATORY) or return a fresh new DbContext owning the connection (like Propagation.REQUIRED).\n\nWhat do you think about this design? It looks trivial to me but shall do the trick of transactions\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73374752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75049911", "body": "Hi, another comment on Transactions and Entity Framework.\n\nI initially set up `TxScopeTransactionManager` on my app. I **thought** I had to set up a proper DbContext factory to wire an existing `DbConnection` into it in order to run transactions fine.\n\nI was wrong. Even issuing `using(MyDbContext ctx = new MyDbContext())` in a method marked `[Transaction]` works, because I happened to find the following stack trace in my logs\n\n```\n2015-02-19 13:09:05,525 | 20 | ERROR | DiagnosticoSite.Controllers.BaseController | Failure on Transaction Scope rollback.\nSpring.Transaction.TransactionSystemException: Failure on Transaction Scope rollback. ---> System.NullReferenceException: Riferimento a un oggetto non impostato su un'istanza di oggetto.\nin MySql.Data.MySqlClient.NativeDriver.GetResult(Int32& affectedRow, Int64& insertedId)\nin MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)\nin MySql.Data.MySqlClient.MySqlDataReader.NextResult()\nin MySql.Data.MySqlClient.MySqlDataReader.Close()\nin MySql.Data.MySqlClient.MySqlCommand.ResetReader()\nin MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)\nin MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()\nin MySql.Data.MySqlClient.MySqlTransaction.Rollback()\nin MySql.Data.MySqlClient.MySqlTransactionScope.Rollback(SinglePhaseEnlistment singlePhaseEnlistment)\nin MySql.Data.MySqlClient.MySqlPromotableTransaction.System.Transactions.IPromotableSinglePhaseNotification.Rollback(SinglePhaseEnlistment singlePhaseEnlistment)\nin System.Transactions.DurableEnlistmentAborting.EnterState(InternalEnlistment enlistment)\nin System.Transactions.TransactionStateAborted.EnterState(InternalTransaction tx)\nin System.Transactions.Transaction.Rollback()\nin System.Transactions.TransactionScope.InternalDispose()\nin System.Transactions.TransactionScope.Dispose()\nin Spring.Data.Core.TxScopeTransactionManager.DoRollback(DefaultTransactionStatus status)\n--- Fine della traccia dello stack dell'eccezione interna ---\nin Spring.Data.Core.TxScopeTransactionManager.DoRollback(DefaultTransactionStatus status)\nin  Spring.Transaction.Support.AbstractPlatformTransactionManager.ProcessRollback(DefaultTransactionStatus status)\nin Spring.Transaction.Interceptor.TransactionAspectSupport.CompleteTransactionAfterThrowing(TransactionInfo transactionInfo, Exception exception)\nin Spring.Transaction.Interceptor.TransactionInterceptor.Invoke(IMethodInvocation invocation)\n```\n\nThe exception is not important by itself, but simply means, and I hope it could be expanded in the future within Spring.Data documentation, that using `TxScopeTransactionManager` is sufficient to have Entity Framework 6 \"autowire\" itself to the existing transaction, if any. When an exception propagates, Spring.Data rollbacks the **Spring** transaction causing the underlying **EF** transaction to rollback. Could be reproduced in a sample test.\n\nI have not experimented yet with composite/propagated/nested transactions (even because MySQL doesn't support nested transactions), but in response to @kindywu I could say that, at least for the transactions aspect, Spring 1.3, and supposedly 2.0, are perfectly compatible with EF 6.\n\nPersonally, I'm not yet interested in any other aspect of Spring/EF. Apart from exception translating, I'd ask @sbohlen if there could be other aspects to take into consideration for a possible `Spring.Data.EF6` implementation\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75049911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78034447", "body": "Hi,\n\nI don't think I will contribute to this one (too many things to do, too little experience in AOP) but here is my idea for anyone who wishes to cooperate.\n\nSince `[Transaction]` is basically mapped to an `Around` advice, so that it opens the Tx `Before` and commits `After`, just to keep it simple, it could be an idea to detect wheter the invoked method is synchronous or asynchronous (at least you can check if return type is `Task`). If so, instead of executing actions, the AOP engine should wrap the entire `Task` returned by the adviced method with an \"outer\" `Task` that basically does something like...\n\n```\npublic Task AroundAdvisorTask(Task innerTask) {\n    DoSomethingBefore();\n    await innerTask;\n    DoSomethingAfter();\n}\n```\n\nThis method, returned as value to a caller doing `await TransactionalMethod()` might produce the expected result.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78034447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78046279", "body": "Hi again,\n\nfor the sake of discussion I don't _fully_ agree with your statement about `IPlatformTransactionManager`.\n\nAsync programming is not multithreading so that every statement is bound only to a single thread, then I see no reason for Tx not working **because of thread affinity**.\n\nInstead, a reason for which Tx **won't work** in async scenario is the following:\n\n```\nTask[] batchJobs = new Task[] {DoJob1(), DoJob2(), DoJob3());\nawait Task.WhenAll(batchJobs);\n```\n\nThis because if jobs are transacted in `REQUIRED` propagation, the Tx manager won't be able to open 3 distinct transactions.\n\nBut the good news is that I believe that this problem cannot be overcome even in pure EF coding, so that's not a limitation for Spring only. This is to say that the only way to batch multiple SQL operations on DB to save execution time is plain-old-school multithreading.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78046279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78065702", "body": "Could you please illustrate how to create a new project with links to existing source files? I don't get it, sorry\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78065702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78086331", "body": "Hi, how about namespaces? I'm starting the new project on my fork, but I wonder whether to keep `Spring.Template.Velocity` namespace (good for me) or adding a `.Castle` suffix (bad for me).\n\nI support for the first, as it allows replacing old instances of Velocity with Castle. Also, using modified namespace will prevent sharing source files.\n\nWhat do you think about it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78086331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78099194", "body": "Ok I have made a first commit\n\nhttps://github.com/djechelon/spring-net/commit/4623d52a56d5d6290f4617d20c4049066d5bef52\n\nCode compiles but test don't yet run because there could be some reference still left to old Spring.Template.Velocity (resulting in `TypeLoadException`).\n\nMore than the standard NUnit tests, I'll try to import the DLL into my project to get a feedback before requesting a pull. If you can provide me feedback on how to make the tests run I'll appreciate that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78099194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80716345", "body": "Your n.2 solution suggests the validity of my initial n.1 approach (_Switching from NVelocity to Castle Velocity_, completely).\n\nThere is one standing point (unfortunately I'll press the Comment button before research, violating the **Think before you post** principle). The error message talks about **security accessibility**, which is different from **method accessibility** (public, private...)\n\nTake a look at https://stackoverflow.com/questions/3055792/inheritance-security-rules-violated-while-overriding-member-securityruleset-le, probably the AssemblyInfo isn't the same. I'll violate the above principle, check the code and come back soon\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80716345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80718817", "body": "HAHAHAHAHA please accept my humour and imagine me singing loud the **FINAL FANTASY FANFARE**. Potential culprit found thanks to VS syntax higlight.\n\nLet's go by order. The `AssemblyInfo.cs` contains the following:\n\n```\n#if !NET_4_0\n[assembly: AllowPartiallyTrustedCallers]\n\n[assembly: SecurityCritical]\n\n#endif\n```\n\n![Screenshot](https://cloud.githubusercontent.com/assets/3042285/6653474/8f16a75e-ca94-11e4-8f29-065e32e311da.JPG)\n\nNow what happens if I create a project without the very same configuration, including compile-time constants? Simply what compiled for one project isn't for the other. I'll check the .csproj files to make sure they define the same symbols. I should have cloned the .Casle .csproj from the old, change GUID to something new and search&replace every .Template-related if not files\n\nComing back soon\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80718817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80724706", "body": "Ok I have made it. In exchange I have created https://github.com/sbohlen/spring-net/pull/1 for you to check. All template-related tests look like having passed. There were issues with the copy property of some project files, so I have checked each entry one by one in Test project to obtain the exact situation between the projects. Although I haven't done the same for the Tests project, I did a large rewrite of main project's .csproj file to match everything from the base Castle project.\n\nI could test the DLL in my project but as my project is currently in an embrional phase I expect flawless operation for the single templated email I currently send.\n\nThat's all for tonight\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80724706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81177904", "body": "https://github.com/sbohlen/spring-net/pull/2 created. Trivial fix but involved a change in the main project (+1 file forked from the `Link Source`)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81177904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84318777", "body": "Hi, I think there is still something left.\nI tried to integrate the DLL of `Spring.Template.Velocity.Castle` but got an exception loading the `Spring.Template.Velocity` assembly. Obviously it's because the `xmlns:nv` namespace triggers something in the `Spring.Template.Velocity` assembly. A quick search showed this:\n\n https://github.com/spring-projects/spring-net/blob/master/src/Spring/Spring.Core/Objects/Factory/Xml/NamespaceParserRegistry.cs#L104\n\n`wellknownNamespaceParserTypeNames[\"http://www.springframework.net/nvelocity\"] = \"Spring.Template.Velocity.Config.TemplateNamespaceParser, Spring.Template.Velocity\";`\n\nThis suggests me to either fork the namespaces (bad idea), e.g. defining a new `xmlns:cv=\"http://www.springframework.net/castlevelocity\"` in both the `NamespaceParserRegistry.cs` files and the context XML file, **or** to migrate `Spring.Core` to the new `Velocity.Castle` assembly, but that **will** force everyone using the old `Spring.Template.Velocity` to migrate to Velocity.Castle, thus creating a breaking change.\n\nAny advice?\n\nThe following is a list of a solution-wide full-search for `Spring.Template.Velocity` string, revealing that the only reference out of the Template projects (and their tests) is within the Core assembly\n\n```\n.\\spring-net\\src\\Spring\\Spring.Core\\Objects\\Factory\\Xml\\NamespaceParserRegistry.cs(104):            wellknownNamespaceParserTypeNames[\"http://www.springframework.net/nvelocity\"] = \"Spring.Template.Velocity.Config.TemplateNamespaceParser, Spring.Template.Velocity\";\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\AssemblyInfo.cs(26):[assembly: AssemblyTitle(\"Spring.Template.Velocity\")]\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\CommonsLoggingLogSystem.cs(29):namespace Spring.Template.Velocity\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\Config\\TemplateNamespaceParser.cs(39):namespace Spring.Template.Velocity.Config {\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\Config\\TemplateNamespaceParser.cs(51):            SchemaLocation = \"/Spring.Template.Velocity.Config/spring-nvelocity-1.3.xsd\")\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\Config\\TemplateNamespaceParser.cs(470):        public const string SpringResourceLoaderClass = \"Spring.Template.Velocity.SpringResourceLoader; Spring.Template.Velocity\";\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\SpringResourceLoader.cs(29):namespace Spring.Template.Velocity {\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\VelocityConstants.cs(1):namespace Spring.Template.Velocity{\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\VelocityEngineFactory.cs(35):namespace Spring.Template.Velocity {\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\VelocityEngineFactoryObject.cs(26):namespace Spring.Template.Velocity\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity\\Template\\Velocity\\VelocityEngineUtils.cs(29):namespace Spring.Template.Velocity{\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\Config\\TemplateNamespaceParserTests.cs(33):using Spring.Template.Velocity.Config;\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\Config\\TemplateNamespaceParserTests.cs(37):namespace Spring.Template.Velocity.Config {\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\Config\\TemplateNamespaceParserTests.cs(88):            Assert.AreEqual(\"Spring.Template.Velocity.Castle.Tests\", getSingleProperty(velocityEngine,\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\Config\\TemplateNamespaceParserTests.cs(93):            AssertMergedValue(velocityEngine, \"Spring.Template.Velocity.SimpleTemplate.vm\");\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\Config\\TemplateNamespaceParserTests.cs(158):            Assert.AreEqual(\"Spring.Template.Velocity.Config.TestCustomResourceLoader; Spring.Template.Velocity.Castle.Tests\",\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\config.properties(3):assembly.resource.loader.assembly=Spring.Template.Velocity.Tests\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.cs(32):namespace Spring.Template.Velocity {\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.cs(48):            AssertMergedValue(velocityEngine, \"Spring.Template.Velocity.SimpleTemplate.vm\");\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.cs(111):            AssertMergedValue(velocityEngine, \"Spring.Template.Velocity.SimpleTemplate.vm\");\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(13):            <nv:assembly name=\"Spring.Template.Velocity.Tests\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(20):            <nv:spring uri=\"assembly://Spring.Template.Velocity.Tests/Spring.Template.Velocity/\"/>\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(37):                       type=\"Spring.Template.Velocity.Config.TestCustomResourceLoader, Spring.Template.Velocity.Tests\"\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(43):    <object id=\"assemblyBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity\">\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(48):                <entry key=\"assembly.resource.loader.assembly\" value=\"Spring.Template.Velocity.Tests\"/>\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(54):    <object id=\"fileBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(57):    <object id=\"pathBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(70):    <object id=\"springFallbackVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(71):        <property name=\"ResourceLoaderPath \" value=\"assembly://Spring.Template.Velocity.Tests/Spring.Template.Velocity/\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(76):    <object id=\"propertiesFileBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(81):    <object id=\"springResourceLoaderBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\Template\\Velocity\\VelocityEngineTestBase.cs(32):namespace Spring.Template.Velocity {\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Tests\\VelocityCompilerOptionsTests.cs(25):using Spring.Template.Velocity;\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity.Castle\\AssemblyInfo.cs(26):[assembly: AssemblyTitle(\"Spring.Template.Velocity.Castle\")]\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity.Castle\\Template\\Velocity\\Config\\TemplateNamespaceParser.cs(39):namespace Spring.Template.Velocity.Config {\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity.Castle\\Template\\Velocity\\Config\\TemplateNamespaceParser.cs(51):            SchemaLocation = \"/Spring.Template.Velocity.Config/spring-nvelocity-1.3.xsd\")\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity.Castle\\Template\\Velocity\\Config\\TemplateNamespaceParser.cs(470):        public const string SpringResourceLoaderClass = \"Spring.Template.Velocity.SpringResourceLoader; Spring.Template.Velocity.Castle\";\n.\\spring-net\\src\\Spring\\Spring.Template.Velocity.Castle\\Template\\Velocity\\SpringResourceLoader.cs(29):namespace Spring.Template.Velocity\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\App.config(12):      <parser type=\"Spring.Template.Velocity.Config.TemplateNamespaceParser, Spring.Template.Velocity.Castle\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\config.properties(3):assembly.resource.loader.assembly=Spring.Template.Velocity.Castle.Tests\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(13):            <nv:assembly name=\"Spring.Template.Velocity.Castle.Tests\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(20):            <nv:spring uri=\"assembly://Spring.Template.Velocity.Castle.Tests/Spring.Template.Velocity/\"/>\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(37):                       type=\"Spring.Template.Velocity.Config.TestCustomResourceLoader, Spring.Template.Velocity.Castle.Tests\"\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(43):    <object id=\"assemblyBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity.Castle\">\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(48):                <entry key=\"assembly.resource.loader.assembly\" value=\"Spring.Template.Velocity.Castle.Tests\"/>\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(54):    <object id=\"fileBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity.Castle\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(57):    <object id=\"pathBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity.Castle\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(70):    <object id=\"springFallbackVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity.Castle\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(71):        <property name=\"ResourceLoaderPath \" value=\"assembly://Spring.Template.Velocity.Castle.Tests/Spring.Template.Velocity/\" />\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(76):    <object id=\"propertiesFileBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity.Castle\" >\n.\\spring-net\\test\\Spring\\Spring.Template.Velocity.Castle.Tests\\Template\\Velocity\\VelocityEngineFactoryObjectTests.xml(81):    <object id=\"springResourceLoaderBasedVelocityEngine\" type=\"Spring.Template.Velocity.VelocityEngineFactoryObject, Spring.Template.Velocity.Castle\" >\n```\n\nI don't think it's a good idea to sumbit my PR today because if this issue that currently prevents me from integrating the assembly into my Spring-based webapp. Of course if there is a trick to override the parser definition (e.g. calling `public static void RegisterParser(Type parserType, string namespaceUri, string schemaLocation)` at the right point) I'll be willing to try that.\n\nThank you for your help.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84318777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84364450", "body": "Ok, I didn't fully understand the role of the spring-parsers tag. Anyway I still tried to run `RegisterParser` by code and it... ahem... might work just fine too as expected! I mean, since I have the official Spring Core from NuGet in my project plus the self-compiled Velocity Castle integration project, the second is bound to a version of Spring Core compiled without the `PublicKey` and instantiating the `TemplateNamespaceParser` triggers a reflection exception because .NET can't rightfully find the Spring.Core assembly without strong name.\n\nI mean that the entire thing works as soon as it is compiled with the official SNK from Spring team, even if not yet released via NuGet. Or if all the Spring distribution into the project is self-compiled with any, or none, SNK.\n\nIn order to do a \"test drive\" of Velocity Castle I'd have to bring into my project all Spring dlls compiled by me. I can do this, but as the code looks promising I think the time for a PR has come, so other people can start integrating too if they wish.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84364450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84373586", "body": "Makes lots of sense, I was really waiting for a GA version of Spring (anyways) and I agree this work **must** be first released as unstable, hopefully via NuGet\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84373586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ynauls": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/104", "title": "WCF Open Session In View support for NHibernate for lazy loading", "body": "Did this issue get any traction for Spring.NET 2.0 [SPRNET-317](https://jira.spring.io/browse/SPRNET-317)? The Jira issue sites a couple of useful links, (since the issue is old) I wanted to check if this is still the recommended solution in Spring's current state? [How to Implement Hibernate OpenSessionInView with WCF Services](http://forum.springframework.net/showthread.php?4636-How-to-Implement-Hibernate-OpenSessionInView-with-WCF-Services)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/98", "title": "System.InvalidCastException : Unable to cast object of type from CompositeAopProxy", "body": "Thank you, I am troubleshooting a proxy issue this time. I swapped my proxy factory class from _NHibernate.ByteCode.Castle_ to _Spring.Data.NHibernate4_.  NHibernate.ByteCode.Castle doesn't support having identical interface name in different namespaces.  I can got passed this failure by swapping the factory to _Spring.Data.NHibernate4_, but now another unit test is failing when is trying to cast a CompositeAopProxy to the proxy type of the class (an interface).   I tried using NHibernate.Initialize to initialize the proxy but no luck.  any tips would be very helpful.\n\n```\n// changed from \n<entry key=\"proxyfactory.factory_class\" value=\"NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle\"/>\n\n// to this\n<entry key=\"proxyfactory.factory_class\" value=\"Spring.Data.NHibernate.Bytecode.ProxyFactoryFactory, Spring.Data.NHibernate4\"/>\n\n```\n\n```\n// both interfaces ISquare and ICircle inherit from IShape, so it creates a composite AOP proxy of ISquare and ICircle,  \nBoth interfaces share a property called SomeProperty in my example. I ensured that the proxy belongs to an instance of type Square\nSystem.InvalidCastException : Unable to cast object of type 'SomeNameSpace.Square' to type 'SomeNameSpace.ICircle'.\n   at _dynamic_SomeNameSpace.ICircle.get_SomeProperty(Object,\u00a0Object[])\n   at Spring.Reflection.Dynamic.SafeMethod.Invoke(Object\u00a0target,\u00a0Object[]\u00a0arguments)\n   at Spring.Data.NHibernate.Bytecode.LazyInitializer.Invoke(IMethodInvocation\u00a0invocation)\n   at Spring.Aop.Framework.AbstractMethodInvocation.Proceed()\n   at Spring.Aop.Framework.DynamicProxy.AdvisedProxy.Invoke(Object\u00a0proxy,\u00a0Object\u00a0target,\u00a0Type\u00a0targetType,\u00a0MethodInfo\u00a0targetMethod,\u00a0MethodInfo\u00a0proxyMethod,\u00a0Object[]\u00a0args,\u00a0IList\u00a0interceptors)\n   at CompositionAopProxy_4127a6f79e61431eb15f3b096c68144f.get_SomeProperty()\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/082ee5d0d07890093532bbfba46a4db50dd3c38c", "message": "Modified IsExistingTransaction, included uncommented code to check for transactions hibernateTransactionObject.HasTransaction() to check that Transaction.Current is not null and that the HibernateTransactionObject has a transaction too. Un-commenting this will by pass HandleExistingTransaction() on the second service call, Unit Test ->ServiceMethodWithNotSupported1 -> ServiceMethodWithNotSupported2, Forcing to create an \"empty transaction\" for the ServiceMethodWithNotSupported2 call.  This seems to make sense since The the call to ServiceMethodWithNotSupported1 suspended the existing transaction, by the call to ServiceMethodWithNotSupported2, there is no transaction to suspend.  Please advice on this potential solution."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0907b9a796ab60c01bd54875831b3afad82fa045", "message": "Added custom TX Scope Manager and test fixture that shows original error."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/50c4683db1a90d903c3299709c8c9aa8bdfd50c5", "message": "pushing project \"Spring.SessionFactoryImplError.Tests\" to help troubleshoot https://github.com/spring-projects/spring-net/issues/96#issuecomment-73162888"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72514965", "body": "Will this release support NHibernate 4?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72514965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73151214", "body": "Getting all the bug fixes in NH 4.x would awesome before GA.  Binding redirect worked for the following assemblies in case anyone else runs into this issue.\n\nSince NHibernate.ByteCode.Castle 3.1.0.4000 still references NHibernate 3.1.0.4000. I tried to use NH built-in proxy support, but my unit tests were failing. Binding redirect worked to support NHibernate.ByteCode.Castle with NH 4\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73151214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73155220", "body": "Great, thank you.  My error sounds similar to this bug https://jira.spring.io/browse/SPRNET-1434\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73155220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73158721", "body": "I apologize for the confusion:\n\nMy failing unit test was related to NHibernate using its internal proxy factory:\n\nNHibernate.Bytecode.DefaultProxyFactoryFactory in NHibernate.dll (doesn't work, or causes my unit test to fail)\nNHibernate.ByteCode.Castle.ProxyFactoryFactory in NHibernate.ByteCode.Castle.dll (works, but requires rebinding because NHibernate.ByteCode.Castle references NH 3.1.0\n\nOnce i am done looking into my other failures I can definitely play with rebinding to NH 4.0.3.\n\nBelow are my redirects:\n\n   NHibernate.ByteCode.Castle 3.1.0.4000 still references NHibernate 3.1.0.4000 \n    &lt;assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"&gt;\n      &lt;dependentAssembly&gt;\n        &lt;assemblyIdentity name=\"NHibernate\" publicKeyToken=\"aa95f207798dfdb4\" culture=\"neutral\" /&gt;\n        &lt;bindingRedirect oldVersion=\"3.1.0.4000\" newVersion=\"4.0.0.4000\" /&gt;\n      &lt;/dependentAssembly&gt;\n    &lt;/assemblyBinding&gt;\n    NHibernate.ByteCode.Castle 3.1.0.4000 still references Castle.Core 2.5.1.0\n    &lt;assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"&gt;\n      &lt;dependentAssembly&gt;\n        &lt;assemblyIdentity name=\"Castle.Core\" publicKeyToken=\"407dd0808d44fbdc\" culture=\"neutral\" /&gt;\n        &lt;bindingRedirect oldVersion=\"2.5.1.0\" newVersion=\"3.3.0.0\" /&gt;\n      &lt;/dependentAssembly&gt;\n    &lt;/assemblyBinding&gt;    \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73158721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73162888", "body": "(new to github and its markup, getting better at it ;))\n\nUpdate, after further troubleshooting, I noticed that the previous developers implemented a custom version of _\"HibernateTxScopeTransactionManager\"_ with a few differences to fix a bug in _v1.3.2_ (comments don't specify the bug), after re-configuring to use the following:\n\n_Spring.Data.NHibernate.HibernateTxScopeTransactionManager, Spring.Data.NHibernate4_\n\none of my failing unit tests is now passing, however, one still fails with a new error: stack trace (similar to https://jira.spring.io/browse/SPRNET-1434):\n\n```\nSystem.InvalidOperationException : No value for key [NHibernate.Impl.SessionFactoryImpl] bound to thread [Runner thread]\n   at Spring.Transaction.Support.TransactionSynchronizationManager.UnbindResource(Object\u00a0key)\n   at Spring.Data.NHibernate.HibernateTxScopeTransactionManager.DoSuspend(Object\u00a0transaction)\n   at Spring.Transaction.Support.AbstractPlatformTransactionManager.Suspend(Object\u00a0transaction)\n   at Spring.Transaction.Support.AbstractPlatformTransactionManager.HandleExistingTransaction(ITransactionDefinition\u00a0definition,\u00a0Object\u00a0transaction,\u00a0Boolean\u00a0debugEnabled)\n   at Spring.Transaction.Support.AbstractPlatformTransactionManager.GetTransaction(ITransactionDefinition\u00a0definition)\n   at Spring.Transaction.Interceptor.TransactionAspectSupport.CreateTransactionIfNecessary(ITransactionAttribute\u00a0sourceAttr,\u00a0String\u00a0joinpointIdentification)\n   at Spring.Transaction.Interceptor.TransactionInterceptor.Invoke(IMethodInvocation\u00a0invocation)\n```\n\nMy unit test is setup in the following:\n\n```\n[TestFixture]\npublic class MyTestSuite : AbstractTransactionalSpringContextTests\n{\n        [Test]\n        public void MyTest()\n        {\n                 Service1.MethodWithNotSuppored1();\n        }\n}\n\n[Transaction(TransactionPropagation.Supports, ReadOnly = true)]\npublic class Service\n{\n        [Transaction(TransactionPropagation.NotSupported)]\n        public virtual void MethodWithNotSuppored1()\n        {\n                MethodWithNotSuppored2(); // error is thrown here\n        }\n\n        [Transaction(TransactionPropagation.NotSupported)]\n        public virtual void MethodWithNotSuppored2()\n        {\n\n        }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73162888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73240374", "body": "correct, this issue can be closed. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73240374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73331737", "body": "Tested as with the following parameters:\nIPlatformTransactionManager: HibernateTxScopeTransactionManager\nspring-net: 1.3.2.40943\nnhiberante: 3.2.0.4000\n\nI got the same error as above https://github.com/spring-projects/spring-net/issues/96#issuecomment-73162888\n\nI can try to setup spring-net 2.0 RC 2 and nhibernate 3.x this weekend if you like.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73331737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73376301", "body": "Update, I swapped the factory to use NH4 Default factory\n\n```\n<entry key=\"proxyfactory.factory_class\" value=\"NHibernate.Bytecode.DefaultProxyFactoryFactory, NHibernate\"/>\n```\n\nIt also fails, stack trace below\n\n```\nSystem.Reflection.TargetException : Object does not match target type.\n   at System.Reflection.RuntimeMethodInfo.CheckConsistency(Object\u00a0target)\n   at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck(Object\u00a0obj,\u00a0BindingFlags\u00a0invokeAttr,\u00a0Binder\u00a0binder,\u00a0Object[]\u00a0parameters,\u00a0CultureInfo\u00a0culture)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object\u00a0obj,\u00a0BindingFlags\u00a0invokeAttr,\u00a0Binder\u00a0binder,\u00a0Object[]\u00a0parameters,\u00a0CultureInfo\u00a0culture)\n   at System.Reflection.MethodBase.Invoke(Object\u00a0obj,\u00a0Object[]\u00a0parameters)\n   at NHibernate.Proxy.DefaultLazyInitializer.Intercept(InvocationInfo\u00a0info)\n   at INHibernateProxyProxy.get_SomeProperty()\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73376301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73376515", "body": "Update, I swapped the factory to use NHibernate.ByteCode.Castle (3.1.0.4000) and no errors.\n\n```\n<entry key=\"proxyfactory.factory_class\" value=\"NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle\"/>\n```\n\nGoing to try to dig through the code.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73376515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74422230", "body": "@sbohlen, I did, below is the reference pull request I created to reproduce the error in their latest revision:\n\nhttps://github.com/nhibernate/nhibernate-core/pull/397\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74422230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74798191", "body": "Is it possible to recreate the issue in a forked repo? or is a standalone project preferred?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74798191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75161178", "body": "@sbohlen, I apologize, I can definitely try to have something for you by tomorrow evening, the project is pretty big, I need to track all the spring configuration files which some are as embedded resources from other repositories.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75161178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75272138", "body": "@sbohlen , created the following full request \"https://github.com/spring-projects/spring-net/pull/101\".  let me know if you have any questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75272138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76490414", "body": "@sbohlen, thank you! I was about to respond to your first update without reading the second :).  For 1, do you mean _pass_ instead of _fail_? For 2, to clarify, the project was using a custom TxScopeTransactionManager extending from _HibernateTxScopeTransactionManager_.  Would you like me to run the unit tests using _HibernateTransactionManager_ instead of the project's _custom_ TxScopeTransactionManager? Using the custom TxScopeTransactionManager with the upgraded Spring.NET 2.0 RC2 assemblies is where this bug initially stemmed from \n\n```\nSystem.ArgumentException : The transaction specified for TransactionScope has a different IsolationLevel than the value requested for the scope\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76490414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76622033", "body": "@sbohlen, below are the results to your request (fyi, I changed username)\n1. Swap back in the original/framework instance of HibernateTxScopeTransactionManager (this is just a sanity-check and is entirely likely to also FAIL but it will isolate whether your custom impl, has any bearing on your pass/fail results)\n   - As expected using  `HibernateTxScopeTransactionManager` causes the error described in https://github.com/spring-projects/spring-net/issues/96#issuecomment-73162888\n2. Swap in the original/framework HibernateTransactionManager (based on my results here with your sample test, my guess is that this is more likely to pass for you\n   - Using `HibernateTransactionManager` yields a new set of errors:\n     1. I am not able to verify if the original error is fixed by using `HibernateTransactionManager`, because it's now failing prior to reaching the original error.  It seems that now service methods attributed with `TransactionPropagation.NotSupported` are no longer aware of uncommitted data that was created in the test fixture.  Therefore, this yields to 'object reference not set to an instance of an object' or 'not-null property references a null or transient value'  (setting isolation level to read uncommitted doesn't seem to change the outcome).\n     2. couple unit tests that are testing the use of `HiberanateTxScopeTransactionManager`, it's getting `Transaction.Current` which is null using `HibernateTransactionManager`, _expected failure_\n     3.  couple unit test are testing if a method is proxied by the Transaction Interceptor which i am assuming is testing if the service method is being adviced? is that one difference between `HibernateTransactionManager` vs `HibernateTxScopeTransactionManager`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76622033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77165027", "body": "@sbohlen, thank you for the update, in regards to number 2, `I'd like to request that you assemble another PR if possible that uses HibernateTxScopeTransactionManager...`, I got the initial error using our custom/subclass of `HibernateTxScopeTransactionManager`.  Using `HibernateTxScopeTransactionManager` \"fixed\" the initial error `System.ArgumentException : The transaction specified for TransactionScope has a different`, but yielded the new error `System.InvalidOperationException : No value for key [NHibernate.Impl.SessionFactoryImpl] bound to thread [Runner thread]`.  Do you want me to create a pull request which includes our custom/subclass of `HibernateTxScopeTransactionManager`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77165027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77637077", "body": "@sbohlen, I apologize for not replying earlier.  I will have something for you either tomorrow or Sunday.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77637077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77770515", "body": "@sbohlen, I have good and bad news. good news: the existing unit tests in `Spring.SessionFactoryImplError.Tests` passes with the Custom TX Scope Manager, however, bad news: I was able to reproduce the original error with the Custom TX scope Manager: \n\n```\nSystem.ArgumentException : The transaction specified for TransactionScope has a different IsolationLevel than the value requested for the scope\n```\n\nI have included the additional test case called `TestSuspendTransactionOnNotSupportedWithNestedRequired` that depicts the original error with the custom TX Scope manager. Included the custom TX Scope manager implementation to the PR called `CustomSpring132HibernateTxScopeTransactionManager`, after digging through repos, i found and noticed that is not a subclass of NH TX Scope Manager, but copy with a few mods.  I left comments that explain the implementation.\n\nThere are now two test fixtures, both contain the same unit test, but inject a different TX Scope Manager\n1. TestUsingCustomHibernateTxScopeTransactionManager: injects Custom TX Scope Manager\n2. TestUsingHibernateTxScopeTransactionManager: Inject NH TX Scope Manager\n\nPlease let me know if you have any other question or need assistance.\n\nsee https://github.com/ynauls/spring-net/commit/0907b9a796ab60c01bd54875831b3afad82fa045\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77770515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81705746", "body": "@sbohlen, thank you for looking into this!  doing some research I found this bug [SPRNET-802 ](https://jira.spring.io/browse/SPRNET-802).  It seems that it used to be `Unspecified` at one point, then it was was changed to `ReadCommitted`.  [SPRNET-1444](https://jira.spring.io/browse/SPRNET-1444) does not site the implications of having the default as `ReadCommitted`.  Was this spawned mainly because it deviates from its java sibling?  I advocate for correctness and consistency, however consistency doesn't necessarily translate to correctness :).  I agree with @markpollack, on his comment in [SPRNET-1444](https://jira.spring.io/browse/SPRNET-1444), since `ReadCommitted` is the default is most dbs, I would side with path 1\n\n> 1 revert d06db48 to restore the prior behavior and release 2.0.0-GA without this breaking change.\n\nDoes Java's default Isolation level `ISOLATION_DEFAULT` translate one to one to  .Net's `Unspecified`?  If it does, then there is merit in setting the Default to `Unspecified`, but with a configuration option to override that for the application as you noted with path 3\n\n> 3 leave the breaking change intact and expose a config setting (probably in the TX config infrastructure) that would permit setting any arbitrary isolation level as the default for your app\n\nas for SPRING NET 2.0 GA, would it make sense to go with path 1\n\n> 1 revert d06db48 to restore the prior behavior and release 2.0.0-GA without this breaking change.\n\nand path 3 for a point release perhaps?\n\n> 3 leave the breaking change intact and expose a config setting (probably in the TX config infrastructure) that would permit setting any arbitrary isolation level as the default for your app\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81705746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81982871", "body": "@sbohlen, I agree, I think it will be worth porting SPR Tx isolation constants to ensure that we are  comparing apples to apples.\n\nRolling back will resolve the original exception using my Custom Tx Scope Manager. \n\n```\nSystem.ArgumentException : The transaction specified for TransactionScope has a different IsolationLevel than the value requested for the scope.\nParameter name: transactionOptions.IsolationLevel.\n```\n\n I can continue using my Custom Tx Scope Manager with SPRNET 2.0 GA.  \n\nHow about the error I ran into using NH Tx Scope Manager https://github.com/spring-projects/spring-net/issues/96#issuecomment-73162888?  \n\n```\nSystem.InvalidOperationException : No value for key [NHibernate.Impl.SessionFactoryImpl] bound to thread [Runner thread]\n```\n\nSince this is an existing bug, perhaps this can be looked into in a point release? BTW. a potential fix to that issue is in my Custom Tx Scope Manager.  It's definitely worth a good look by you :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81982871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/82057765", "body": "@sbohlen, definitely, I custom i believe addresses an existing bug in NH Tx Scope Manager. I pushed https://github.com/spring-projects/spring-net/commit/082ee5d0d07890093532bbfba46a4db50dd3c38c,  You can use the `Spring.SessionFactoryImplError.Tests` to validate the effects of the change against `TestUsingHibernateTxScopeTransactionManager.cs` Fixture.  I attempted to explain the logic behind this change in the commit comment :). Please let me know if you have any questions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/82057765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/85592362", "body": "@sbohlen, since our project is using a Custom TX Scope Manager, this fix I can wait until the next point release (hopefully soon after 2.0)  I know the community has been waiting the 2.0 release for some time now, I share your thoughts on not wanting to delay it any longer :)\n\nWould this be noted as a **known issue** for the 2.0 release?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/85592362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/85594519", "body": "@sbohlen, sounds good, I will take a peek.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/85594519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/86095287", "body": "@sbohlen, awesome news! thank you for all the support.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/86095287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/88703102", "body": "all unit tests pass!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/88703102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/93043832", "body": "Thank you @sbohlen\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/93043832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/180442553", "body": "@sbohlen, is there a roap map for supporting ASP.NET 5? is this upgrade doable? There is 14K nuget downloads for the latest version of spring.core.  That still shows a strong community (maybe?) using spring.net.  What we are lacking is contributors, if we can breakdown the work involved in this upgrade I can def assist, and possibly @ynnuyonw  and @ygorlazaro can also :) \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/180442553/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448491", "body": "should Spring.Data.NHibernate4 nuspec reflect NH 4.0.3?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448536", "body": "Stand by, i will try it out :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448552", "body": "we are good to go! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sbohlen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/100", "title": "Consider migrating optimization for GetObjectNamesForType from Spring.Web.Mvc into Spring.Core", "body": "The optimization strategy implemented in https://github.com/spring-projects/spring-net/commit/01d4db4e51903e65dd7926a6a5e6d48747f52366 could conceivably be moved into the core DI container so that all implementations could benefit from it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ad64f00abe5ececdd47620cfdee97243f0784bfc", "message": "fix manual-compilation of dependent RESX files (see comment in .build file for details as to why this is necessary)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/dd78ba8f522e0fa3c94a08dd451e8cd018f7db50", "message": "add check for CLR version to conditional Assert branching"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/f159d7765cbb43eb3fa737bed43d92085afd762e", "message": "removing conditional; unnecessary now that missing RESX file has been properly added"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/48260daf89a1bc42abd4864082b3ff1e8dc6792b", "message": "Visual Studio munging around with .csproj content"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/598e8848a8067e2def941f36d5340f1db5c458e5", "message": "adding GHOSTDOC control file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c492c3f6871e87c17fc77ec336e9fc835c513d58", "message": "remove erroneous included XML comment file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5b95595c74d7be8eae84f013243042c0eab70f37", "message": "fix exclude settings file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8a46ba9d29b28f45d29c20146d31066e3de639f1", "message": "fix ResouceSetMessageSourceTests for Windows 10 Build 10586"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/afb5ca67ac014356427e579df99a0774a6378a1f", "message": "fix ResouceSetMessageSourceTests for Windows 10 Build 10586"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ee37c447a195dac738cf5fabf6e95d6fb7d06809", "message": "fix DateTimeFormatterTests for Windows 10 Build 10586"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/6d95db75aaff255da26cb644c9e16ce29e3e7266", "message": "fix CurrencyFormatterTests for Windows 10 Build 10586"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b283a6f34df2600be72046a56af6710033489708", "message": "updating tests to reflect change of behavior introduced by fix to SPRNET-1582"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/712d3f37a91ef749f5db1921e0268e676281fe05", "message": "fix bug in Remove() method so that it properly removes the individual item after reworking linkedHead and linkedTail"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e7dc54a85edf2a3f91ad403b4bce1ebb0a5f4154", "message": "refactor tests to reflect various behaviors being tested separately"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d4d8f156a9f3056ae2183ff1afca70aba0f67af8", "message": "fixing errantly-excluded source files"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/646787b9351b9d138e262df8b24b26cefb12c226", "message": "remove references to no-longer-available ORACLE ODP.NET nuget package"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ba2aaaf5b8b73003ec81fe7315319c22ee7add98", "message": "re-introduce prior ctor signature as pass-thru to new ctor to maintain backward-compat"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/40db4808e9770c327e46a1e8e0afe296d646b8f5", "message": "Merge pull request #115 from gitchomik/master\n\nfix issue #114"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/86827ccc0de70b01d9e44a174d723a36f4ed7095", "message": "Merge pull request #119 from kvr000/features/SPRNET-1582\n\nSPRNET-1582: SimplePool releases dead objects but does not create new ones"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9fc7c921f4bfa5e3699058e883bc17586dd76ab6", "message": "Merge pull request #118 from kvr000/features/SPRNET-1581\n\nSPRNET-1581: LinkedHashDictionary implementation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2e384d7e2a282b1a4348dc3b2427f9004b5e2e84", "message": "Merge pull request #116 from radupcforever/master\n\nHibernateTransactionManager.GetIDbTransaction() does not work with subclasses of AdoTransaction"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2794e1c66888aea36534556eff3cb0f78fc9fa53", "message": "Merge pull request #120 from thorstenbaek/master\n\nMultiple PropertyPlaceholderConfigurers fail in AbstractObjectFactory"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/669ea2851b0730e4eda6abbc347377be11bb743a", "message": "Merge pull request #122 from hailtondecastro/master\n\nThe connection was not being effectively closed due to needing to disconnect first"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3f63f85cfded3370818361a310704e328e9e9bbc", "message": "change to reference to explicit type in CREF XML comments"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0a5d4c58e30b04fc9e9921134242c2b10470f8b1", "message": "tweak IGNORE to reflect renamed assy for Spring.Web.Conversation.NHibernate33"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0c52b4e17c3c97bfd7a28993b64533b0c0248dd0", "message": "introduce TIBCO_EMS #define to allow opt-out of CLS-complaince for TIBCO-dependent assy's (since TIBCO assy types aren't CLS-compliant, TIBCO-related SPRNET assy's can't be either)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/cdfcc1d9a612bde7de9b2f21b836a4d844fb8772", "message": "fix typo (missing close-quote) in build file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/cc30cbecb6be87600cadf55b880f5252160a6e04", "message": "bifurcate tests to reflect both apache nvelocity and castle nvelocity libs; re-enable apache nvelocity tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b2e9b58b050d2085d7be22ecc5f48c02ec3d4aba", "message": "provide for overwrite on copying support files prior to test-run"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c900e6353e7147b9ac6c6e4c3e659670bcfb743d", "message": "-rework build scripts to pull all dependencies from current.bin.dir after being copied from lib source folders\n\n-add build scripts for Spring.Template.Velocity.Castle projects"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/f966b457635c3c0c84aba0d39d31d756d4d66e00", "message": "Merge pull request #105 from djechelon/master\n\nSpring.Net.Velocity.Castle"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/00e9a7fcb320da2ad63fa66b57e33b4a451a2ab3", "message": "explicit full path for MVC5 deps"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c7efc96d49a3123d51203a12255fb192de05489c", "message": "revert  to bulk copy of MVC5 deps from nuget folder"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/09e30e52d39453ceed95111f8ae8fe6bc35e2824", "message": "revise dependency search pathing"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/42dbcea973ab8ec122b2dc6d782a18476ec41b4b", "message": "match dependencies with Spring.Web.Mvc5 build script"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/890731b43954196c87e5f298c75250d3d318f509", "message": "explict path for MVC5 dependencies vs. lib search paths"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/637fe96de975ab382cfda31ab663bdd6c5237a67", "message": "add missing ref to System.Web.Http and System.Web.Http.WebHost"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c089a82dfee0f0df7df70dcebfbf2675bef78029", "message": "add missing ref to System.Runtime.dll"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3bf72403dd0d356a1c180d60908539eeb8b8e9e1", "message": "add missing ref to Http.Formatting assembly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8b5971047c85938c6dbad82f8976d6bfdcac00a3", "message": "update search path for WebApiClient assebly to fetch from PCL folder vs net45 folder in nuget packages"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ef463a97ee2f28df0fc8cdceaa2425b74a62b96d", "message": "re-enable bulk-copy of all MVC5 packages in to bin dir as sanity-check to return to known-good build state"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d0fab91098896b3b22c65bf77d78e530c855ea4a", "message": "troubleshooting broken deps on Mvc5 test build"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7aaa5708fce3ee29cca2135d0aa7922ddba1a910", "message": "add missing ref + paths to Microsoft.Web.Infrastructure assembly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e102d73382bacf1844c2df6a30e8bf2914ad3e65", "message": "switch build scripts to avoid include=*.dll approach and switch to explicit identification of references (necessary to avoid invalid image format errors when building for CLR 2.0 and encountering CLR 4.0 assemblies in the directory when using include=*.dll approach)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ec7fcf5d03b21af5b947c18756bc28a5ffb519d2", "message": "update metadata and build scripts to reflect 2.0.1-GA"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a24cb2de8e5f0a240242c9c18e7839ebd48bd29a", "message": "GH-107 - fixing errant build script oversight resulting in linking to improper version of NHibernate.dll in misc cases"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c70a70037c7b98a81fafac3cfca4506d9bba8207", "message": "update metadata to reflect 2.0.0.GA"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/45e67d88dd2bb315725b1f3ae405ee2d4ecd1ffc", "message": "renaming project to identify specifically as NHibernate4"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0da57da4883fb4452b40d6252b4b7843348be0a6", "message": "integrate new test project into build script"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2280762d1e8b2aa7a33736c47853e01947aa656e", "message": "update desc of AssemblyInfo inadvertently left as Hib 3 when copied initially"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/794103dc1f931495a1e310ec48a0f7febcee0c4d", "message": "Merge branch 'ynauls-master'"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8ee1d51245bc1cbca7fb3837d9efbff9ae21c9fd", "message": "minor renaming to improve clarity"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/92cfa7129c129116cb55b51285749a3f2d76fff0", "message": "rename test project to improve clarity of intent"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fac1a98dc8a70b8260caa0c8117955ae0965630f", "message": "remove extraneous HibernateTemplate from test fixture injection"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/6697e8a12401971b3ca09ca56e97ab2c6c85eb31", "message": "rename test project to reflect tx promotion integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9c5a7ec3ba41a84d8ba70c3f15526c35d8f69999", "message": "removing tests, etc. related to CustomSpring132HibernateTxScopeTransactionManager as no longer necessary now that changes are in HibernateTxScopeTransactionManager directly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/682a5b0b567a3177d858abfaf59c3d96dec744df", "message": "moving test DB + table from sep. DB into Spring DB"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7b4cfc772e68ebfce6303561966de6adf2bc7bd7", "message": "update test conn string to coordinate with creds used elsewhere in test suite"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8d437306af5ca0d1fadaad69eb0afa5cab130eca", "message": "Merge branch 'master' of https://github.com/ynauls/spring-net into ynauls-master"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/cfd4e90bf4c52a778b5b16c5aaf53dbfe27313e1", "message": "Merge pull request #99 from sean-gilliam/fix-xmldoc-signature\n\nFixed method signature"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/829d04f786dfe2c82208d895143a2d233d1a56f3", "message": "SPRNET-1444 - revert commits on this issue to return DefaultIsolationLevel for tx advice from Unspecified back to ReadCommitted"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/72c2f580c192a69d69c9b67f0fc8e1b1b0157338", "message": "add app.config to register NamespaceParser from new Spring.Template.Velocity.Castle assembly in place of \"well-known\" parser in other assembly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1c562f8fe698d5c05300ae6f1d5d80e179d61808", "message": "update to NHibernate 4.0.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/f700958281e5255b1f56ac936d547e716a6b693e", "message": "update Common.Logging dependencies to reflect 3.0.0 in nuspec files"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/01d4db4e51903e65dd7926a6a5e6d48747f52366", "message": "avoid repeated calls to GetObjectNamesForType in DependencyResolver"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4d8d84ba4377fe4907b546d165b5cc98e0cdf20c", "message": "enable nuget package restore for EMS quickstart and add Common.Logging package"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c75734dfadeeb856d6121de0ad4f8a05ee3f5ed6", "message": "ensure that refactored DependencyResolver code properly respects named contexts when performing object resolution"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c7f943e0c4bfbe40f537668fa0c147cec3fce790", "message": "update .build files for MVC 4 and 5 /src/ and /test/ to reflect udates to LINKed source files strategy"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ba8fdbf15ee0362497c82bd31f844b1c80df2cf7", "message": "add missing references to /lib/ folder"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/6d45f9da746dd0f349360109236920343974da6e", "message": "rework MVC dependency-resolver to more effectively short-circuit expensive type resolution when no need to continue to interrogate the context further"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c936fd88a7fb57df248c432196e078423797eaa9", "message": "removing errantly-committed XML comment file; must have been committed BEFORE corresponding entry was added to .gitignore"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/342ae7de04c80fd5a77a230bd6c8179266580165", "message": "remove unnecessary source duplication in MVC Source and replace with source file LINKs"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/bef1d522a89abd1df867bef76fbd4f98aa0fb75a", "message": "remove unnecessary source duplication in MVC Tests and replace with source file LINKs"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4ed10dae99afb72cded95e2ee95be24371d06740", "message": "update version suffix to reflect RC2"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8eda2d42c4f7390d4ace322d464118eea03b37a5", "message": "re-order logic flow to fix failing test case where serviceType arg is null"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8246883aec428486d4765aa853974ed4e69d7227", "message": "re-order logic flow to fix failing test case where serviceType arg is null"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1f132cda613eaecd456e03f2375786b773fcb68f", "message": "Merge branch 'adotemplate-mods'"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/778a405f8ece0068f09113b1a087abf32e2af0ee", "message": "Merge pull request #91 from kamiff/master\n\nImprove MVC 3, 4  application View DI performance"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/409ff746c18c1616ebe3cf2d2b12278f9a0af610", "message": "SPRNET-1415 - pull additional members up into IAdoOperations interfaces"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ac28a7a970e0ca27a4e3c851f6fafccc38bb7bb6", "message": "SPRNET-1494 - switch to DEBUG level logging for cache misses"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7c120e35cfcd6f760e714655bed2b70571e42ef9", "message": "Revert \"SPRNET-1557 - retrieve object type from object definition rather than expensive additional instantiation\" as part of troubleshooting broken build.\n\nThis reverts commit 579e5ae02d928f1eff63e4b8729a6e575815a1dc."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/22c31ba80b8bb2f94bb8903488936926b6581dce", "message": "SPRNET-1513 - alter protection level to assist in subclassing HIbernateTransactionManager"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9b54b7af2ec9d4a151f71c70c0738ed7ef158d71", "message": "SPRNET-1526 - fix error in ctor args"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4667eeb37b6bec5905153293d1cb75006ff25fd3", "message": "SPRNET-1548 -  add missing PermissionDeniedCodes for DB2 error translation list"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/579e5ae02d928f1eff63e4b8729a6e575815a1dc", "message": "SPRNET-1557 - retrieve object type from object definition rather than expensive additional instantiation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0646d02ec5d5e2bed2ef09c88d0620bd5a0968a1", "message": "Merge branch 'master' of https://github.com/spring-projects/spring-net"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/713875080df9e0273764668ffc8bbccc502317a5", "message": "introduce method to block interaction with internal ObjectFactory instance when ApplicationContext isn't in a valid state to respond (e.g., while starting up, shutting down, or being disposed)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5f70fd57e77465dbbf519c335d76486bb6a2ffc0", "message": "Merge pull request #89 from sean-gilliam/remove-redundant-delegation-creation\n\nRemoved redundant delegate creation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9caebbddca5d177f5e5c366cc917a8666a74b5be", "message": "adding appveyor.yml to control CI server settings"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/417326800694e369d8e4bcad4ec92abcff77a323", "message": "troubleshooting db connectivity for integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c2bbeba865f78450d7f0cd107bfaf55f1c211426", "message": "troubleshooting db connectivity for integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5a5965ac7374868bb95910ba659c79d9efeb859d", "message": "troubleshooting db connectivity for integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/791124366d990ad5efe7068b0e7168a5451e2493", "message": "return to TCP transport for DB conn alias"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/21d2ac8fab45275abb5c391e4633960315058631", "message": "comment back in missing named-piped config value"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/21a363235935ed2965efa39527ad60cda0522480", "message": "switching to named-pipes transport for SpringQA sql server alias"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ffdbfe140666874e7c6fbe2ebe1f07787b68d8fd", "message": "add ps1 script to safely restart services and WAIT until complete before proceeding"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0d2a4f380a03cb6ee2bf011e9e6b2f33fbc614c7", "message": "remove inadvertent duplicate attempt to create 'Spring' database"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2bfe447075bb0082519aad608726ecb93ba421ba", "message": "add missing closing quotation in sqlcmd arguments"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fbd4c1f6120477e2b9de45d7bb769d39df78aaad", "message": "add scripts to create required databases and users for integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d1fb76974921ab61aae9e5503415ee6a45becf45", "message": "update ci-invoked build entry point to run database-dependent integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5894ff39d1589cd9fba7a08289d3bf5a8cde01a5", "message": "adjust build file to properly invoke NuGet package restore on the several projects that now have a new dependency upon it"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/685c337d724a79ef1f4a83dd63418c6d6fedfb77", "message": "tweaking command file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7e017a90551ec770d8f3d055ee9ed060219d47d8", "message": "introduce cmd file for CI server (primarily to NOT pipe output to log file so that it appears on CI dashboard properly)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e4cf720a74ee2ac0c6ea59803f8df9f0ee6c78d5", "message": "Merge branch 'master' of https://github.com/spring-projects/spring-net"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/00417d94dd9bd1a47ad32624d92ca62981b7208e", "message": "update docbook build to depend upon JAVA_HOME env var for locating JAVA to execute (vs. expecting JAVA to be on the system PATH)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/83615e299ab504c12938a5489ae335db33bfa559", "message": "add missing xml comment file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a9fc698cefe97d76b223810a60f59f3f4a056bbf", "message": "Merge branch 'master' into common-logging-220-upgrade"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/991a8b1bd108c141cfda19649161a2c6d4e3a9ec", "message": "add discriminator to respect CLR version (in addition to OS version) as a factor in choosing which FORMATTER-related expectations to test against"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fab6c6d7eeb8a94c9f032f09aa4ed55ea966de73", "message": "fix overlooked failure to commit NUGET package metadata for WebQuickStart example"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ca3e45c9447f2d4398f312a07fd21f2b7ee9dfc9", "message": "Merge branch 'master' into common-logging-220-upgrade"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0311d3694d7b23c70a789c1dcbb1273e714f7bc5", "message": "SPRNET-1570 make localization test assertions respond appropriately to differences in runtime OS"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/bd417d744be499208c01ac4ca6046a2fa28aff13", "message": "add mistakenly overlooked nuget config / repo settings for WebQuickStart /example/ solution"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/167a104fe2347cbf89c4871a0704a4f5c6586510", "message": "introduce build param (skipmstestrun) to support building but not -running- the MSTEST sequence (necessary for bypass of the currently-crashing QTAgent32.exe process until this issue is properly sorted out)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/df35992839d3e97e362884024c5237cca90cee64", "message": "remove .testsettings file from sln (deprecated under VS2013)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5441880c5175569cc37a9fc14895f663b0e6dcfb", "message": "Remove .vsmdi files (test groups defined in vsmdi files no longer supported under VS2013)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e1e275ec1407167c8049ca7683d76ef19c435dc8", "message": "update main solution to globally rely upon NuGet for all Common.Logging references"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/6d79e7f2af0319dbcf1de53ce4602b4b74843dfc", "message": "set build-packaging files for 2.0.0-RC1 release"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/933b4f1395ff6a59e14a8d5a17363af5049153df", "message": "Merge pull request #67 from yhrn/SPRNET-1567\n\nSPRNET-1567 Assigning correct timeout"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/bf6eeab496a593fe909e25713d717a23784b7741", "message": "Merge pull request #66 from yhrn/SPRNET-1566\n\nSPRNET-1566 Return exception instead of throw"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a74653215fbe39224619775597af29ebfc1d9c72", "message": "add missing SQLite .dlls excluded due to over-zealous gitignore rules"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5e594b90eb2a3b077ee6b5889dd7bc1c07e12e1e", "message": "update Spring.Web.Conversation.NHibernate tests to use SQLite 1.0.91.0 dynamic interop assembly resolution to handle running properly on both x86 and x64 processor architectures"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/15d7dc07f4f4ac5397a38e7524c76cb9d011ff0a", "message": "adding missing nuget.exe erroneously excluded due to gitignore rules but necessary for NuGet Package Restore support in /examples/ projects"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/555a72553ec52dff8d8ca10a8537dec78e659b1f", "message": "switch to nunit-console-x86.exe to force tests run in a 32-bit process"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/81cd77e3dcc157fd6861b5b96fd748fd89bae6aa", "message": "Merge branch 'master' of http://github.com/spring-projects/spring-net"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4681962bba64762a4e339d4a3d9cb540db83b354", "message": "updates to reflect correct path to Visual Studio,  NuGet package restore for /examples/ projects, and building of Spring.Web.Extensions for .NET 4.5 target"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1c616b3c8c57cda2e6f7bc24babff51129642aad", "message": "add Mvc5 and tests into sln"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d8b8acd7ae5692170980a7b50eb356dffe8fce0a", "message": "update locale formatter test expectations to reflect subtle changes in the tested locales introduced by .NET 4.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3769af7fb5a589311e7848678b5331e30017dc5e", "message": "wire up Mvc5 Tests to participate in NuGet package restore process"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/6316eda41ab6e2103fd533a95bbcda19e018ff00", "message": "update SQLite-dependent tests to use version of SQLite that is both x86- and x64-aware"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/eedb6e9553fd3f329debbf207961561878093312", "message": "remove unnecessary duplicate references to core .NET framework libs"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/79747686d8383bbd90d9c588b5a8b2940d19d9f6", "message": "update examples to reflect NuGet package-restore necessary since /lib/ refereences are otherwise missing"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e7ed6e5d8709e9b6dc1863ff003f051821bbbc9d", "message": "update NUNIT command line args to reflect same args used both with and without coverage"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e41d0dee48bc4971edfdf6b368b6df8982f61cc7", "message": "update NANT config settings to support builds on both x86 and x64 processor architectures"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/095c5efe34218102b0dee8b025dc3fd6d2a48dcc", "message": "fixing missing ref to System.Core in Spring.Core.2008 references"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e0bcdf17062f1c935de496e416586b284035e67a", "message": "Merge branch 'master' of https://github.com/SpringSource/spring-net"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/59b37f6f74eb55268375d5746c1bbb235538b519", "message": "SPRNETCODECONFIG-4 introduce support for explicit restriction on assembly load scanning scope"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5a0e1c483f5db4a2539df69c6df5d185fb9fd964", "message": "SPRNETCODECONFIG-3 change Spring-Assembly exclusion approach to prefix vs absolute match to ease in long-term maintenance issues"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/de4f7d6e1f54cab69562050bfd2b008c901dc918", "message": "SPRNET-1536 replace Predicate<T> with Func<T, bool> and replace custsom LINQ extensions with actual LINQ now that we're on .NET 3.5 or later"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e4a59c6dd46220936f40f7d04410a0c87cf26ac1", "message": "chaning nuget-package-clean task no longer completely delete entire output folder"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fc733e628a577d77e63555712844af29c7d4249e", "message": "add missing EMS build instruction to release command file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5292d5ac3d04dad4432c1c06dd9f0797238b3418", "message": "Merge branch 'master' of https://github.com/SpringSource/spring-net"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4b2b5611762c8dbc7a1f363ae2ba2d714de67c98", "message": "SPRNET-1525 updating refs to latest Oracle ODP.NET release(s)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8faaf64c7c1c14cc91f609570baf94506926e84c", "message": "SPRNET-1536 add SPRNET-CODECONFIG migration sample to reinforce the docs"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/805d384d0d7e1eac02cbca506227f55416dbae8f", "message": "SPRNET-1536 merge SPRNET-CODECONFIG refdocs"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9b50c40a6b0053f5bc0990dbe9fbf7c3a226a7db", "message": "SPRNET-1536 merge code and tests from SPRNET-CODECONFIG project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/06ea2587b15ee50b69a92546e031b3c819addca1", "message": "SPRNET-1535 Ems and Nms XmlMessageConverters respect BOM setting"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b96d53cc5a1749c5d16025e474006cff5e8ae452", "message": "Merge branch 'sprnet-1431'"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/eb22eb1214a0d4d99b3024c9a250a62a743245b0", "message": "renaming conversation-based example project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/74a84170ca937fb60fcc30d70488b4285ecb1478", "message": "fixing up conversation example app"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/548ff078154a6d0b925d0d14c949a5a24c4a54ce", "message": "minor overlooked editsa"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/261bd9cae099f4f43ad4b615544df7bbfe98d5f4", "message": "renaming ConversationWA folders to Conversation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b4b8c9072b71a4babdbe7e145cc516fea8bf37f5", "message": "fixing nuspec files and build files"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/acad54e42c9be4faa6bff85782e863b83b082031", "message": "add nuspec files"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1adda46dce5a45c9cb6972ff490a14c99ce4dbcd", "message": "add missing xml commnent file"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c9598f9c53df24a4282bb3cdafdca890d91ae0d0", "message": "renaming references in config and xml files"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4d606f8baad4d7ab715db3fd957b6115653642ec", "message": "project and pathing reference renaming"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fde548385d49909579c8dfa180b62afd81e15bdd", "message": "folder renaming"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/046370c01ad24dbecdd548a31b6beb23fdf41f7d", "message": "SPRNET-1516 revising behavior inside lock"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/617ee3fe0f3943e4f30063f28f57985f15ad89da", "message": "Merge branch 'master' into sprnet-1431"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/eb7352ab28b3f542c2408b38ac7835c33aba2a27", "message": "SPRNET-1516 lock sync read-write of stateCache collection in ctor"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9b14cc9326bd4bae130616960309e3a5c0c188ce", "message": "add .aspx files missing from test project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/51b34811b3f52817e0477fdc8c6765ebaebee768", "message": "misc initial cosmetic cleanup"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fdb0a57a967d5b3bfd18c7d0696207c280dc4f30", "message": "introduce guard-statement to protect against dupl entries in the dictionary"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/46f702116e3d7602949c3fa6feecc54289416ad4", "message": "remove errant ref to vs2003 registry, install location"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e32f25646e09fa71be8e24492f889a0534c12727", "message": "re-order Assert.AreEqual params from expected vs actual"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3627e0effa59c9994791825663bab590e828256d", "message": "add missing .cs file into project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4caf0c6c1f3372f26ad48f50c23dae20aab70d6e", "message": "Merge branch 'master' of https://github.com/hailtondecastro/spring-net into sprnet-1431"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2f1a95cb1f3f446bb30b5ea48053a4657c99144f", "message": "SPRNET-1318 adding missing file to Spring.Core Vs2008 project"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a782eb16d905aa655389a498cb180317333634d6", "message": "SPRNET-1318 fixing up XML comment inconsistencies"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d1520682df4ccfa18733477525b77855366569b9", "message": "SPRNET-1318 introduce local cache of merged ObjectDefinitions to reduce impact of AppContext.Dispose() calls"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c1e9dd63e35e7e7b846efc90ec7c831c2f307e92", "message": "SPRNET-1534 add logic to prevent registration of alias values that match object defintion name values"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/844cd20782f5f9cef25d31487aed99c831f40b3d", "message": "add convenience cmd script to create nuget packages from existing build output"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/93c674f027bf28251235d2db26b5c07f55582bdd", "message": "Merge branch 'master' of https://github.com/SpringSource/spring-net"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2440683", "body": "Shaun:\n\nI've spent considerable time trying this approach (release version of OpenCover) and while perf has seemed to improve somewhat, its still many orders of magnitude slower than when we run our tests under the old NCover 1.5.8 (the last free release of that product from many, many years ago).\n\nI'm still seeing a build+test run that takes perhaps 30 mins under NCover take well over 2+ hours using OpenCover.  The most egregious offender seems to be something in our Spring.Core.Tests.dll...these tests alone have escalated from 2-5 mins for perhaps 30-45 mins.\n\nI'd _really_ like to find a way to make OpenCover work for us b/c being able to profile coverage under .NET 4.0 MSIL is important to us (and the much older ver. of NCover only supports .NET 2.0 MSIL) but I of course need to find a way to get the test runs to at least approximate the perf we see under NCover.\n\nDo you have any other suggestions re: what we might be able to do in this case? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2440683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2476780", "body": "This is interesting...when I run your command-line I am seeing about the same perf you report, which is not at all like what we are seeing under our build scripts.  Some things I notice that you're doing in your command that is different than our build scripts (no idea if any of this is likely to be the cause of our slowdown)...\n1. You are invoking OpenCover (and NUnit) once and passing it the long list of test assemblies to execute all at once.  Our build script is considerably more 'atomic' in that we are executing OpenCover (and this NUnit) once per each assembly containing tests (e.g., we iterate over ea. *Tests.dll and invoke tests + coverage for each ass'y).  This was done b/c its more extensible for the build script, but if there is significant 'startup overhead' for OpenCover each time invoked this might be part of the issue we're seeing.\n2. What's the -mergebyhash command-line opt do?  I'm not familiar with that switch.  Could my lack of using it in our build scripts contribute to the perf. we're seeing?\n3. Our build scripts also make use of ReportGenerator to post-process the xml results into html and that's factored into the overall observed increased run-length of our build script (though I've tested our scripts without any xml-file-to-report post-processing at all and we still experience significant increases in run-duration).  I wonder: since your approach to running all the tests + coverage in a single invocation also (presumably) results in a single xml file (that would only be a single call to ReportGenerator to post-process), is a single ReportGenerator call on a single (large) .xml file significantly faster than mutiple ReportGenerator invocations targeting many (small) .xml files?  This is somewhat orthogonal to the issue we are experiencing with OpenCover (esp. since ReportGenerator is a whole sep, project) but it all plays into our collective experienced longer build-runs with OpenCover (since for now at least ReportGenerator seems the only viable choice for xml report post-processing to produce navigable HTML from OpenCover output files).\n\nI'll take some more time to experiment further with these variables over the weekend and see what I can isolate as the factors contributing to the significant differences we're seeing between your command-line invocation test (and my repo of it on my end) and our build script's invocation of more or less the same tests.\n\nThanks again for your willingness to stick with us on this -- I think we're getting close to isolating the cause (and thus also probably a viable solution!).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2476780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2584029", "body": "Shaun:\n\nAlthough I'm not yet 100% complete with my testing, I did want to get circle back with you on this to let you know that I'm still focused on it.  From my prelim. testing, it DOES seem that the perf we've been seeing with OpenCover is definitely related to our very fine-grained multiple-invocations of it (e.g., invoking it ONCE per each test assembly rather than once across a collection of our test assemblies).  I too am able to run the full test-suite in the manner you're suggesting in about 7 mins +/- and the subsequent report generation takes a quite short 75 secs or so now.\n\nIt looks like the issues we've been experiencing re: perf can probably be resolved by changing the manner in which we're invoking OpenCover + ReportGenerator.  I will wire this into our build scripts in the next day or so and get back with you about our final results, but I just wanted to get back with you on this to let you know that we're still plugging away on it (and also to say THANKS for your suggestions -- looks like we should be able to get this working for us hopefully!)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2584029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2746924", "body": "Merged w slight mods to ensure build compatibility with .NET 2.0 compiler in commit 43516e6dbefc7049b26f35ec04b2c9a0bd65c051\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2746924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2759049", "body": "FWIW, this trips me up frequently as well (esp. .b/c compilation from within VS targeting .NET 2.0 actually uses the 4.0 csc.exe and so tends to be more liberal in permitting you to use the more recent syntactic sugar constructs in the C# language).\n\nSince its unreasonable to expect everyone to have every version fo VS since 2005 installed in parallel, the easiest way to ensure that you haven't introduced anything that won't pass the 2.0 compiler is to run the \"build.cmd\" convenience script in the root of the solution folder -- this will invoke each of the specific framework-targeting builds with each of their corresponding compilers and permit you to catch these kinds of things.  The obvious culprits tend to be use of 'var' to do implicit typing, but there are other less-obvious ones that keep tripping me up all the time :)\n\nThanks again for the pull -- other than this (minor) housekeeping issue, it was just about perfect!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2759049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2780389", "body": "Over the coming Thanksgiving holiday its my intent to build up a fresh\nWin7(x64) VM into which I can get Spring.NET building from a fresh\ncheck-out.  This will permit me to ensure that I've got a\ncorrect/comprehensive list of the prerequisites.  I _know_ it can be made\nto build on this platform b/c its what I work on every day :)  Its just a\nmatter of isolating (and documenting) what must be an\noverlooked/non-explicit dependency somewhere in the stack...!\n\n-Steve B.\n\nOn Thu, Nov 17, 2011 at 11:08 AM, Marijn van der Zee <\nreply@reply.github.com\n\n> wrote:\n> \n> I think http://forum.springframework.net/ is the place to start your\n> discussion.\n> \n> With regard to the 2.0 build issue: I ran into the same problem and\n> haven't been able to fix it so far on my win7 64 bit system either. I\n> started a thread on this issue\n> http://forum.springframework.net/showthread.php?9515-What-are-the-prerequisites-to-do-a-succesful-build-from-a-clean-check-out.\n> If you manage to do a 2.0 compile on your main machine, please drop a note\n> there on how you did it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-net/pull/6#issuecomment-2777799\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2780389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3583989", "body": "Thanks for the tweaks -- really appreciated!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3583989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/4454445", "body": "Thanks for this -- IIRC there was a point when the namespace was in fact 'db' but its long-since been 'database' now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/4454445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5183184", "body": "Merged -- thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5183184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5197022", "body": "Our workflow for processing pull requests (unofficially!) is as follows, based on the 'acceptability' of the pull request (note that in this context, 'acceptable' and 'unacceptable' aren't quality judgements but are intended to reflect only re: whether the pull request is merge-able as-is or requires some changes before being merged):\n- if the pull request is 100% 'acceptable' as-is we will usually just use the 'automatically merge this pull request' functionality of github and be done with it (since that's far-and-away the simplest way to deal with it!)\n- if the pull request is significantly unacceptable, we will comment on it and request the author 'fix' it before we proceed (usually by auto-merging as in the above option)\n- if the pull request is only 'trivially' unacceptable, we will typically pull the commits into a temp branch off master, make additional minor tweaks, then merge the entirety of those changes into master as a single commit (usually using --squash during the merge from the temp branch in order to collapse multiple commits from the branch into a single commit into master for simplicity's sake)\n\nIts in this last case that the situation arises wherein the original  'authorship' of the changes gets lost -- that's a good point that I'd not considered in this workflow.  In this case, I decided that we _did_ want to also make the minor change of having the sqlite alias to point to the new sqlite 1.0.80 provider metadata.  I decided that it made sense for that change to be part of the same unit-of-commit that was assoc. with SPRNET-1501, which is why it was done this time in the manner you saw.\n\nAs mentioned, I'd not considered your entirely valid point that this approach has the side-effect of 'obscuring' the original authorship of the changes.  We'll have to re-think the validity of this approach given the point you raise here -- thanks again~!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5197022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5198569", "body": "FWIW, none of this is set-in-stone; we're very open to considering other 'workflow' pattens as well (obv. there are millions of choices about how to approach all this <g>).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5198569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5302843", "body": "Actually, its .NET 3.5 _and_ .NET 4.0 but 'var' is still permitted even then :)  Thanks for the pull request -- I'll review it later today!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5302843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7691305", "body": "Thanks for the pull request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7691305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7709469", "body": "Thanks for the pull request.  In situations such as this, our goal is typically to match/mimic the same behavior as found in the Spring Java container re: the sequence for invoking the post-processor.  When I get a moment tomorrow, I'll check the https://github.com/SpringSource/spring-framework repo to see what invocation sequence is used there (unless of course you want to take a look for yourself and update this pull req. accordingly based on what you find there).\n\nThanks again both for identifying this issue and for taking the time to assemble a patch/pull for it~!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7709469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7710188", "body": "Excellent -- thanks for that!  Will review + merge 1st thing tomorrow morning (my time!)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7710188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7724219", "body": "We've been (internally) discussing the merits/value of this change and were wondering: can you elaborate on the use-case for this?  The reasoning behind having this in Spring Java is b/c of the existence of Spring MVC in Java.  Since controllers in ASP.NET MVC aren't identified by an attribute/annotation (but instead by being an impl. of the IController interface), might a better approach be to consider that as a way to identify Controller instances vs. adding the [Controller] annotation (?)  Curious as to your use-case for wanting this attrib in Spring.NET....\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7724219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7724782", "body": "Reasonable.  I'm inclined to leave this as-is (merged) b/c [Controller] is (or at least could be) more specific than just [Component] and there's no _requirement_ for people to use either attribute unless they have a specific use-case that warrants it (as you seem to).  BTW, would be interested to see your component-scan impl. atop Code-Config once its done!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7724782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/8532754", "body": "SPRNET-1521 merged and 2008 csproj files cleaned up\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/8532754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/8534227", "body": "SPRNET-1522 Added cache prefix for SimpleDelegatingSessionFactory to avoid second-level cache key conflicts when using multiple databases\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/8534227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9148947", "body": "Merged; failing test (now passing, of course) also added.  Thanks for the pull request~!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9148947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9148960", "body": "FYI, issue added to JIRA as SPRNET-1524\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9148960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9154701", "body": "Thanks for the contribution, I'm reviewing it now.\n\nIn the mean time, you're probably at the point where your contributions have become non-trivial enough that we are going to need you to complete the SpringSource Individual Contributor License Agreement (\"ICLA\") found here: https://support.springsource.com/spring_committer_signup\n\nWhen you have a moment, can you do this for us?  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9154701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9159515", "body": "No, that's fine -- sorry, I just assumed you'd not completed one yet :)  The reg. number is all I need on my end -- thanks.  BTW, we really appreciate the comprehensive nature of these pulls you have been submitting (xml code comments, complimentary tests, etc.) -- nice work and thanks for all the effort!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9159515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9173060", "body": "Ideally you would modify the doc source itself (https://github.com/SpringSource/spring-net/tree/master/doc/reference/src) and then issue a pull request for that as well (which we then process as any other pull request with a review-merge cycle as needed).\n\nFWIW, my docbook editor of choice is XmlMind (http://www.xmlmind.com/xmleditor/) but there are a wide variety of other tools that you can use to edit the reference/doc source (including any old ASCII text editor of your choosing).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9173060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10227425", "body": "Can you elaborate on how this is related to spring.net?  And if so, can you provide a failing test that demonstrates the issue for us?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10227425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10327060", "body": "Confirmed the issues is the byte type vs. CONST yesterday..being investigated now; tracked as https://jira.springframework.org/browse/SPRNET-1529\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10327060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10333732", "body": "Issue resolved.  Was an error in the opcode being emitted when processing 'const byte' resulting in an invalid implicit conversion from byte to int32.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10333732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36145456", "body": "Chris:\n\nGreat question!\n\nBefore the end of the month (in the next day or so) we expect to release (to NuGet) Spring.NET 2.0.0-RC1 (release-candidate 1).  The intent is to collect feedback on that RC for approximately 2-3 weeks, after which (assuming no major bugs/blockers are surfaced from users' review of the RC) we will release the 2.0 GA packages to NuGet!\n\nCheers,\n\n-Steve B.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36145456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36437266", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36437266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36438877", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36438877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442278", "body": "Just to circle back on this, the 2.0.0 RC1 packages have now been posted to NuGet.  Note that in order to interact with pre-release packages in Visual Studio you must check the 'Pre-Release Packages' checkbox in the NuGet Package Manager.\n\n-Steve B.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442310", "body": "FYI, the 2.0.0 RC1 release has now been posted to NuGet as mentioned in #64 .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442406", "body": "Housekeeping: closing this issue here as SPRNET-1545 in JIRA is identified as resolved.  Please re-open this issue here (or comment on SPRNET-1545) if this issue had been incorrectly closed here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442472", "body": "Unfortunately, MONO support was deprecated some time ago as a lower-tier focus for the project and the MONO-IFDEFs in the code base are no longer ensured to produce code with expected/supported behavior.  If you (or any others) are interested in offering pull requests to re-energize SPRNET support for MONO and to bring its behavior under MONO into line with the MSFT CLR compilation, the project team would be happy to accept them.\n\nCheers,\n\n-Steve B.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36442472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37129844", "body": "Thanks for reporting this.  I think that you've (possibly) surfaced that the changes in my commit here https://github.com/spring-projects/spring-net/commit/d8b8acd7ae5692170980a7b50eb356dffe8fce0a may not in fact correctly resolve the (similar/same?) issue I'd been seeing on my own system.\n\nPrior to that commit, when I ran the entire test-suite on _,my_ system those same tests also failed under .NET 4.0 (and passed under .NET 3.5).  From this, I concluded that (perhaps) some changes to .NET 4.0 libs may have introduced the failure I'd been seeing.  As you can see from the commit, my response had been to provide a different set of expectations for these same tests under .NET 4.0 than .NET 3.5.  This change has fixed the issue on _my_ system, but apparently broken these same tests on your system :(  This suggests that it may NOT in fact be .NET 4.0 changes that are in play here but instead potentially something else entirely.\n\nIf possible, to help us isolate the _actual_ cause of the pass/fail results being one way on my system and another way on yours, could you please provide us some info (as follows) as well as perform an experiment for us?\n\nRequested Information:\n1. Your operating system (e.g., Windows7, Windows8, Windows8.1)\n2. The bit-ness of your OS (e.g., 32-bit vs. 64-bit)\n3. The version(s) of installed instances of Visual Studio (e.g., 2010, 2012, 2013) on the machine that experiences these failures\n\nThe experiment:\nCould you please take the latest (RC1) source and _revert_ the commit mentioned above in your own local copy and then re-run the entire test-suite?  I have a suspicion that the tests will pass on your system once you revert this commit, and your experiment will confirm that (hopefully).  If the tests still FAIL after reverting this commit, then the problem lies elsewhere.\n\nThanks again for identifying (and reporting!) this issue; hopefully your additional data-points will permit us to isolate the underlying cause of the issue that results in the different test-pass/fails you and I are seeing on our respective systems.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37129844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37129890", "body": "Oh, and one more piece of information if possible: can you tell me the locale for which your OS is configured when you run the tests (e.g., EN-US or other)?\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37129890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37181515", "body": "Yes, it very much does help, thanks for taking the time to do this.\n\nI'm on Windows 8.1, x64, and VS 2013.  Your results help to confirm my suspicion that this is in fact NOT a change introduced in .NET 4.0 but is instead a change made in Windows itself.  I suspect strongly that what's happened here is that the localization support on Windows 8.x is different than that on Windows 7 (for the locale used in those tests) and that this is the source of the behavior you and I are each seeing here.\n\nIts not at all uncommon for such minor tweaks in localization to be rolled out in OS releases, either to correct improper localization elements (e.g., bug-fix) or to permit localizations to continue to evolve as various locales change their 'rules' for the \"official\" representations of various elements in their respective languages.  There are 'standards' that govern most of these things, and the two things we know about standards are a) everybody has their own :) but more importantly, b) they do change and evolve over time.\n\nI'll dig into whether I can confirm that this is indeed the case here, and if so I'll try to work some recognition of the ambient OS into the tests or the #ifdef that's in these tests before we go to GA.\n\nThe good news (if there is any to be found here) is that this points to the ASSERTS being (possibly) incorrect based on the platform on which the tests are run, but also points to the actual behavior of the system-under-test actually still behaving 100% correctly, so its likely NOT a bug in the code per se.\n\nThanks again for your identifying this issue and and for working with us to gather more info to assist in isolating it.  I'd like to leave this issue open until I'm able to confirm my hypothesis and to work a fix into the test code.\n\nCheers,\n\n-Steve B.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37181515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37281497", "body": "Tracked under https://jira.spring.io/browse/SPRNET-1570 and fixed in https://github.com/spring-projects/spring-net/commit/0311d3694d7b23c70a789c1dcbb1273e714f7bc5.  Please do a fresh pull from ORIGIN/MASTER and verify that these changes result in passing tests for you on Windows7.  If so, comment here and I'll close this issue and the corresponding JIRA ticket.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37281497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39512856", "body": "I'm a bit confused (net necessarily a inique state for me <g>).  Isn't that only going to succeed in the initial error simply being ignored (vs. having the AdoTemplate injected properly)?\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"akhilkakar\" notifications@github.com\nSent: \u200e4/\u200e3/\u200e2014 2:53 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nSubject: Re: [spring-net] Spring is not injecting adoTemplate intoAbstractTransactionalDbProviderSpringContextTests  (#71)\n\nThanks for your help Thomas. By setting DependencyCheck = false; worked for me as well.\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39512856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39579006", "body": "Hmmm...I created an issue not long ago, though in the process I uncovered that there were some odd permissions that had been improperly set.  I'd thought we'd properly reset them, but its possible that some oddities remain there.\n\nI'm traveling this week but can take a look at this over the weekend once I get back on dry land to ...\n\n\u2022 verify your current permissions\n\u2022 determine whether I've the proper permissions to change yours as needed (I should have this as project owner/admin)\n\nIts possible /likely that this issue extends to the settings of others on jira as well (i.e., it may affect all \"project contributors\") so we'd clearly want to resolve this asap for everyone should it prove to be a broader issue.\n\nWill advise soon as I have a chance to investigate this further...!\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"Thomas Trageser\" notifications@github.com\nSent: \u200e4/\u200e4/\u200e2014 3:09 AM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] Spring is not injecting adoTemplate intoAbstractTransactionalDbProviderSpringContextTests  (#71)\n\nIs there a reason why Jira does not allow to select Spring.Net project when I create a new issue?\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39579006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71714523", "body": "This is a known issue with NuGet (see http://nuget.codeplex.com/discussions/578411 and the several issues in other projects linked to from that post for more details) in packages that depend upon Common.Logging (e.g., beyond merely Spring.NET).\n\nThe Common.Logging dependency in the MASTER branch here has already been updated to CL 3.0.0 and so when Spring.NET 2.0.0 GA is released (likely in the next week or so) this issue will resolve itself.  In the mean time, the only course of action for consumers of packages that haven't released updates properly recompiled against Common.Logging 3.0.0 is to _not_ update other dependencies to the 3.0.0 version of Common.Logging.\n\nBecause this is already addressed in MASTER, I'm going to close this issue (even though technically the fix won't be accessible until we push 2.0.0 GA in the next week or two).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71714523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71941837", "body": "This will likely be officially 2.0 GA this coming weekend.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71941837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71942044", "body": "Closing issue as machine-specific or other since .NET 4.0 tests pass on several other computers as well as the latest CI builds as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71942044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72143898", "body": "Can you elaborate a bit on this PR (and its sibling, https://github.com/spring-projects/spring-net/pull/91)?\n\nFirst, the commonality between the two: the exclusion of types that begin \"ASP.\"; can you elaborate on the thinking behind this concept a bit?  Can you help me understand the intent of returning NULL when the type-name begins with this string?\n\nSecondly, the bug: can you elaborate on this as well?  It looks as if we (somehow) used the _wrong_ type in the _wrong_ namespace for the dependency resolver implementation ... is that correct --??\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72143898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72144001", "body": "See https://github.com/spring-projects/spring-net/pull/90#issuecomment-72143898; suggesting we centralize discussion of this PR there since so similar in scope/intent.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72144001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72387593", "body": "OK, that makes sense -- thanks for the explanation (and the PR).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72387593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72401425", "body": "That makes some sense, but are you suggesting caching this in the container itself (generally) or just in the specific MVC use-case of the DependencyResolver?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72401425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72402216", "body": "Reasonable; I''l try to make that change during my flight tomorrow and then we should be (more or less) ready to go with the release.\n\nFWIW, I'm thinking that so much time has elapsed since the RC1 release (and we've since added diff. Common.Logging, new NHibernate, etc. versions) that RC1 isn't really any longer functional as a release candidate.  I'd like to get an RC2 release out there for about 2 weeks before formerly going forward with the GA sometime approx. mid-FEB.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72402216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72515304", "body": "Yes, that support is already in the MASTER branch and so would be included in any subsequent release.\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"piolo108\" notifications@github.com\nSent: \u200e2/\u200e2/\u200e2015 1:56 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] Spring.NET 2.0 release (#82)\n\nWill this release support NHibernate 4?\n\u2014\nReply to this email directly or view it on GitHub.=\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72515304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72600600", "body": "Just as an update to this issue, we've just posted an updated RC2 build to NuGet.\n\nOur thinking is that its been so long since the RC1 release that there have actually been many updates/changes since the RC1 release.  This makes RC1 unable to function as an actual Release Candidate.\n\nAssuming that no deal-breakers are uncovered by anyone from the RC2 build, our plan is now release 2.0.0GA approximately 2 weeks from now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72600600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72725964", "body": "Ouch -- nice catch, yes, I'll update that immediately.  Thank, this sort of\noversight is _exactly_ the sort of thing that RC is designed to catch!\n\nCheers,\n\n-Steve B.\n\nSteve Bohlen\nsbohlen@gmail.com\nhttp://blog.unhandled-exceptions.com\nhttp://twitter.com/sbohlen\n\nOn Tue, Feb 3, 2015 at 3:12 PM, chrisdrobison notifications@github.com\nwrote:\n\n> I've noticed that the RC 2 Nuget packages have a common.logging dependency\n> of >= 1.2.0. Shouldn't that get changed to 3.0?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-net/issues/82#issuecomment-72724949\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72725964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72727466", "body": "Just fork the code and submit a pull-request; we'd love to have the contributions!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72727466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73117486", "body": "Excellent -- thanks for the issue report (and the repro).  We'll take a look at this ASAP.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73117486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73119175", "body": "Fixed in https://github.com/spring-projects/spring-net/commit/f700958281e5255b1f56ac936d547e716a6b693e\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73119175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73125118", "body": "We can certainly refresh our NH dependency before GA, but I likely can't get to this until the weekend.  In the interim, could you perhaps use a simple binding redirect to reference in the updated NH 4.0.3 binary and evaluate/confirm the source of the issue that way --?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73125118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73155371", "body": "Can you clarify that comment for me a bit further?  I think you are indicating that you redirected the `Spring.Data.NHibernate4` dependency to point to NHibernate 3.1.0.4000 (?)\n\nI was actually suggesting that you redirect the `Spring.Data.NHibernate4` assembly to use NHibernate 4.0.3 as a test ... is that possible?\n\nEither way, I'll update that dependency in MASTER this weekend, but at the same time I'm concerned that this issue may (somehow) have escaped our unit tests since no tests are presently failing with the present NH4 version dependency in RC2.  Because of this, if we update our dependency chain and our tests _still_ pass, I'm not 100% certain that this will actually be indicative that we've solved the issue/problem per se.\n\nCould you (perhaps) either provide us a failing test case or else fork and pull MASTER once we've updated the dependency and build it locally so that you could test your code against the updated NH dependency after I've committed it...?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73155371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73160291", "body": "Ok, got it, thanks.\n\nSo just to be 100% clear, you've confirmed that this isn't an issue with Spring.Net per se so we can close this issue now, correct --? (tho we will still update to the latest NH4 release before we cut a final 2.0.0 GA)\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"piolo108\" notifications@github.com\nSent: \u200e2/\u200e5/\u200e2015 5:22 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] NHibernate: System.Reflection.TargetException :Object does not match target type. (#97)\n\nI apologize for the confusion:\nMy failing unit test was related to NHibernate using its internal proxy factory:\nNHibernate.Bytecode.DefaultProxyFactoryFactory in NHibernate.dll (doesn't work, or causes my unit test to fail)\nNHibernate.ByteCode.Castle.ProxyFactoryFactory in NHibernate.ByteCode.Castle.dll (works, but requires rebinding because NHibernate.ByteCode.Castle references NH 3.1.0\nBelow are my redirects:\n\n<!-- NHibernate.ByteCode.Castle 3.1.0.4000 still references NHibernate 3.1.0.4000 -->\n\n<!-- NHibernate.ByteCode.Castle 3.1.0.4000 still references Castle.Core 2.5.1.0 -->\n\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73160291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73166423", "body": "Yes, TX management in NH itself has been a bit of a mess for some time now (especially on rollback/dispose and when used in combination with the .net TxScope attribute).  This led us to introduce the HibernateTxScopeTransactionManager,  designed to handle NH transactions in the context of the .net TxScope attribute (instead of only the Spring.Net Transaction attribute).\n\nI'll definitely review your failing test to validate the source of the (remaining) problem, but its def. the case that if you are using the TxScope attrib. you should be using the HibernateTxScopeTransactionManager as you've found.\n\nJust so I can be clear in re: the scope of the problem, can you please see if you can also repro the issue with Spring.Net 2.0 RC2 and the latest NH3.x we support?  I'm trying to understand whether the issue is really related to Spring.Net 1.3.2 vs  2.0 or NH3.x vs NH4.x.\n\nThanks!\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"piolo108\" notifications@github.com\nSent: \u200e2/\u200e5/\u200e2015 6:03 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] System.ArgumentException : The transaction specifiedfor TransactionScope has a different IsolationLevel than the value requestedfor the scope. (#96)\n\nUpdate, after further troubleshooting, I noticed that the previous developers implemented a custom version of \"HibernateTxScopeTransactionManager\" with a few differences to fix a bug in v1.3.2 (comments don't specify the bug), after re-configuring to use the following:\nSpring.Data.NHibernate.HibernateTxScopeTransactionManager, Spring.Data.NHibernate4\none of my failing unit tests is now passing, however, one still fails with a new error: stack trace (similar to https://jira.spring.io/browse/SPRNET-1434):\nSystem.InvalidOperationException : No value for key [NHibernate.Impl.SessionFactoryImpl] bound to thread [Runner thread]\nat Spring.Transaction.Support.TransactionSynchronizationManager.UnbindResource(Object key)\nat Spring.Data.NHibernate.HibernateTxScopeTransactionManager.DoSuspend(Object transaction)\nat Spring.Transaction.Support.AbstractPlatformTransactionManager.Suspend(Object transaction)\nat Spring.Transaction.Support.AbstractPlatformTransactionManager.HandleExistingTransaction(ITransactionDefinition definition, Object transaction, Boolean debugEnabled)\nat Spring.Transaction.Support.AbstractPlatformTransactionManager.GetTransaction(ITransactionDefinition definition)\nat Spring.Transaction.Interceptor.TransactionAspectSupport.CreateTransactionIfNecessary(ITransactionAttribute sourceAttr, String joinpointIdentification)\nat Spring.Transaction.Interceptor.TransactionInterceptor.Invoke(IMethodInvocation invocation)\nMy unit test is setup in the following:\n[TestFixture]\npublic class MyTestSuite : AbstractTransactionalSpringContextTests\n{\n[Test]\npublic void MyTest()\n{\nService1.MethodWithNotSuppored1();\n}\n}\n[Transaction(TransactionPropagation.Supports, ReadOnly = true)]\npublic class Service\n{\n[Transaction(TransactionPropagation.NotSupported)]\npublic virtual void MethodWithNotSuppored1()\n{\nMethodWithNotSuppored2(); // error is thrown here\n}\n    [Transaction(TransactionPropagation.NotSupported)]\n    public virtual void MethodWithNotSuppored2()\n    {\n\n```\n}\n```\n\n}\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73166423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73249333", "body": "FWIW, there is already support for WebAPI as part of our support for ASP.NET MVC 4 and 5; are you thinking about support of some kind beyond what is already provided for there --?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73249333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73333346", "body": "Thanks, I think if the issue is present in SPRNET 1.3.2 + NH 3.2, we'll conclude that it hasn't been introduced as part of any SPRNET 2.0 work.  I think that gives me a good starting point for beginning to puzzle out the source of the issue.  I'll let you know if any further testing would be helpful once I've looked into this a bit further this weekend.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73333346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73360461", "body": "I may have inadvertently given the wrong impression.  I was offering that Spring.Net has support for WebAPI as part of its MVC4 and MVC5 support (the two versions of MVC that offer WebAPI).\n\nSpring.Net has no support (at this time) for EF and so there's no documentation to which I can point you per se.  If you (or anyone else) is interested in working on such an effort, we'd be happy to assist with guidance, etc. where we can.\n\nI'd suggest starting by conceptually \"mapping\" each concept from NH to its corollary in EF (e.g., NH session is like an EF DbContext, and so on).  Then attempt to mimic the classes, etc. in Spring.NHibernate that are necessary to work with those same concepts in EF.\n\nMake sense --?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/73360461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74421477", "body": "@lahma:\n\nWhat's the downside to our choosing to rely upon NHibernate's own ProxyFactory implementation instead of our own --?  Is it just \"we end up with two different proxy engines running SxS\" (which is simply inefficient)?\n\nI suppose in theory this would make it impossible for the SPRNET container to apply advice to NH-persisted objects, but TBH that seems to me to be a somewhat contrived use-case in the first place...(?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74421477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74421600", "body": "@piolo108 :\n\nIt looks as if you're indicating that proxies from both the NH internal proxy factory and the SPRNET proxy factory fail your test(s) but that proxies from the Castle proxy factory _do_ support your use-case.\n\nHave you raised this with the NHibernate project yet?  And if so, have they offered any input/feedback?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74421600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74423269", "body": "Could you perhaps provide a PR with a complete test that I can use to repro this issue?  Or failing that could you post the config that relates to the test-code-snippet that you provide here https://github.com/spring-projects/spring-net/issues/96#issuecomment-73162888?\n\nI want to be certain that I'm working with the right repro case...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74423269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74798778", "body": "Forked repo with a PR is likely simplest; recommend you create a new test fixture with the test(s) just for this one issue if possible.\n\n-----Original Message-----\nFrom: \"piolo108\" notifications@github.com\nSent: \u200e2/\u200e17/\u200e2015 9:10 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] System.ArgumentException : The transaction specifiedfor TransactionScope has a different IsolationLevel than the value requestedfor the scope. (#96)\n\nIs it possible to recreate the issue in a forked repo? or is a standalone project preferred?\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/74798778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75142729", "body": "Just circling back on this to see if its possible for you to provide a repro test case for us.  This is the sole remaining open blocking issue preventing our intended 2.0GA release and so I'd like to resolve it (or at least better understand it so that we can intelligently choose not to address it) so that we can roll out the official 2.0GA packages to NuGet as soon as possible.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75142729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75161752", "body": "Understood -- I'm not likely to have cycles to attempt to resolve this until the weekend anyway, so anything you can get me before then would be fine.\n\nAlso, if its simpler to provide this in some manner other than a pull-request, please feel free to do that instead (i.e., a separate GitHub repo or other).\n\nDon't get hung up on the mechanics; do what's simplest for you to be able to convey a working (failing) test to us as frictionless as possible.\n\nThanks again!\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"piolo108\" notifications@github.com\nSent: \u200e2/\u200e19/\u200e2015 6:27 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] System.ArgumentException : The transaction specifiedfor TransactionScope has a different IsolationLevel than the value requestedfor the scope. (#96)\n\n@sbohlen, I apologize, I can definitely try to have something for you by tomorrow evening, the project is pretty big, I need to track all the spring configuration files which some are as embedded resources from other repositories.\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/75161752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76411901", "body": "@piolo108:\n\nI just wanted to circle back here to let you know that I've not forgotten about this; quite the contrary, I've been working to try to get to the bottom of this during most of my non-working/non-sleeping hours for the past week.\n\nAs mentioned , this is the sole remaining blocker to our 2.0GA release and as of now I'm still hoping/planning to resolve this (soon) and get it into the now-slightly-postponed release.\n\nHowever, in my attempts to get this back into a working state, I ran the tests you provided against the following combination of dependencies...\n- Spring.NET 1.3.2GA components (e.g., Spring.Data)\n- NHibernate 3.2\n\n...and I was still unable to get the tests to pass using this combination.  I understood (perhaps incorrectly) that this was a regression bug betw. 1.3.2GA and 2.0.0RC2 (?)\n\nCan you clarify the combination of Spring.NET and NHibernate versions under which these tests were initially passing for you?  I'd like to get a working/passing combination and the now-failing combination together and compare/contrast the points of difference as my next step in trying to isolate the underlying cause of the error here if possible.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76411901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76465726", "body": "I've also just discovered something else in my subsequent testing -- if I revert to using the `HibernateTransactionManager` (vs. the `HibernateTxScopeTransactionManager`) then your tests here actually pass using both of the following combinations:\n- Spring.NET 1.3.2-GA + NHibernate 3.2\n- Spring.NET 2.0.0-RC2 + NHibernate 4.x\n\nBased on this, it seems as if you may have uncovered an issue with the `HibernateTxScopeTransactionManager` when used with this combination of nesting of  `TransactionPropogation` values.\n\nI'd like to proceed on two parallel fronts from here if possible:\n1. We will try to resolve whatever the issue may be in `HibernateTxScopeTransactionManager` that is making the current tests you've provided fail.  If we're successful here, you could then continue to use the `HibernateTxScopeTransactionManager` in your project.\n2. As I understand this thread, you had an initial set of tests (a repro for which I don't think you've yet shared with us) that used `HibernateTransactionManager` and were apparently _passing_ under Spring.NET 1.3.2 but then _failing_ under Spring.NET 2.0.0.  Would it be possible for you to provide us another PR with a set of these tests that you indicated prior were failing when using the `HibernateTransactionManager` but then passing under the `HibernateTxScopeTransactionManager`?  Its likely that these original failing tests of your will uncover another/different set of bug(s) that we would want/need to address as well if possible.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76465726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76494833", "body": "@piolo108:\n\nThere are so many different references to pass/fail in my post that I can't even tell what specifically you're asking about re: clarification :)\n\nHere's the present state of affairs from my having run your new TestFixture in the `Spring.SessionFactoryImplError.Tests` project with diff. combinations of versions and TxManagers:\n\n| SPRNET ver | NHibernate ver | TransactionManager | Test Result |\n| --- | --- | --- | --- |\n| 1.3.2-GA | 3.2 | `HibernateTxScopeTransactionManager` | **FAIL** |\n| 2.0.0-RC2 | 4.x | `HibernateTxScopeTransactionManager` | **FAIL** |\n| 1.3.2-GA | 3.2 | `HibernateTransactionManager` | **PASS** |\n| 2.0.0-RC2 | 4.X | `HibernateTransactionManager` | **PASS** |\n\nThis leads me to believe that the cause of the failure in at least the specific tests in `Spring.SessionFactoryImplError.Tests` is unrelated to version of either SPRNET or NH.  Instead, its likely some difference in the way this specific combination of nested `TransactionPropagation` settings is handled by `HibernateTransactionManager` vs `HibernateTxScopeTransactionManager`.  We can (and will) investigate this to try to determine what's going on.\n\nAt the same time, I was asking if you could provide us the failing tests that you reference in your initial post (https://github.com/spring-projects/spring-net/issues/96#issue-56707905).\n\nMy understanding from reading the entirety of this thread was that you started out using `HibernateTransactionManager` and this gave you the error:\n\n```\nSystem.ArgumentException : The transaction specified for TransactionScope has a different IsolationLevel than the value requested for the scope\n```\n\nThen, you later switched to `HibernateTxScopeTransactionManager` and this solved that error but introduced this new error instead:\n\n```\nSystem.InvalidOperationException : No value for key [NHibernate.Impl.SessionFactoryImpl] bound to thread [Runner thread]\n   at Spring.Transaction.Support.TransactionSynchronizationManager.UnbindResource(Object key)\n   at Spring.Data.NHibernate.HibernateTxScopeTransactionManager.DoSuspend(Object transaction)\n   at Spring.Transaction.Support.AbstractPlatformTransactionManager.Suspend(Object transaction)\n   at Spring.Transaction.Support.AbstractPlatformTransactionManager.HandleExistingTransaction(ITransactionDefinition definition, Object transaction, Boolean debugEnabled)\n   at Spring.Transaction.Support.AbstractPlatformTransactionManager.GetTransaction(ITransactionDefinition definition)\n   at Spring.Transaction.Interceptor.TransactionAspectSupport.CreateTransactionIfNecessary(ITransactionAttribute sourceAttr, String joinpointIdentification)\n   at Spring.Transaction.Interceptor.TransactionInterceptor.Invoke(IMethodInvocation invocation)\n```\n\nMy understanding (maybe in error?) was that the first error was caused by `HibernateTransactionManager` and the second error was caused by `HibernateTxScopeTransactionManager`.  Your PR contained the failing test demonstrating the error(s) from `HibernateTxScopeTransactionManager` but we don't have any similar tests demonstrating your initial error when using `HibernateTransactionManager`, so that's what I was requesting.\n\nIf, as you seem to be clarifying now, you have _always_ been using `HibernateTxScopeTransactionManager` (or your own subclass of it) then my whole request for an additional PR is probably unfounded.\n\nIf you've been using your own subclass of `HibernateTxScopeTransactionManager` all along, then I'd like to request that you do the following and re-run the entirety of your tests:\n1. Swap back in the original/framework instance of `HibernateTxScopeTransactionManager` (this is just a sanity-check and is entirely likely to also FAIL but it will isolate whether your custom impl, has any bearing on your pass/fail results)\n2. Swap in the original/framework `HibernateTransactionManager` (based on my results here with your sample test, my guess is that this is more likely to pass for you\n\nSorry for the long-windedness here, wanted to explain my complete thinking here so that it (hopefully!) makes sense to you where I was coming from in my request.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/76494833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77060211", "body": "OK, understood, thanks for testing this.\n\nre: 1., we're in agreement that this is the expected result but it does help validate that the issue isn't per se in your own subclass of `HibernateTxScopeTransactionManager`.\n\nre: 2., I'm not entirely surprised by this result either; the main diff. between `HibernateTransactionManager` and `HibernateTxScopeTransactionManager` is in re: its handling of scopes and nested propagations so your inability to substitute one for the other without breaking other of your tests is also somewhat expected.\n\nUnfortunately, this leads us back to the two possible paths forward I outlined in https://github.com/spring-projects/spring-net/issues/96#issuecomment-76465726:\n1. We'll proceed to try to isolate why `HibernateTxScopeTransationManager` fails in the `Spring.SessionFactoryImplError.Tests` project from your pull request but `HibernateTransactionManager` passes.  Since you've verified that substituting `HibernateTransactionManager` for `HibernateTxScopeTransactionManager` isn't a fix for your use-case, this won't per se help you but its still something that we need to get to the bottom of ASAP (preferably prior to 2.0.0GA).\n2. I'd like to request that you assemble another PR if possible that uses `HibernateTxScopeTransactionManager` and demonstrates the initially-reported error `System.ArgumentException : The transaction specified for TransactionScope has a different IsolationLevel than the value requested for the scope`.  This should let us get to the bottom of why you received the initial test failure. \n\nWould it be possible for you to do this for us?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77060211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77167972", "body": "@ynauls :\n\nYes, please do -- that would (hopefully) give us a full/complete picture of the situation resulting in both of the different failure(s) you're reporting here.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77167972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77257888", "body": "I'd probably prefer option 2, creating a new `Spring.Template.Velocity.Castle` project with support for Castle Velocity and leaving the existing`Spring.Template.Velocity` project untouched.\n\nMy thinking is that this would both permit users to make a conscious choice re: which Velocity implementation they choose to adopt as well as be more 'honest' about the intent of the Spring Module they are selecting.\n\nOver time, if use of the `Spring.Template.Velocity` module is worth removing from Spring.NET entirely in favor of _only_ the `Spring.Template.Velocity.Castle` project, then having them separate makes that an easier action to perform as well.\n\nOnce you have had a chance to experiment/explore this space more deeply, why don't you circle back here and offer your feedback/results so that we can discuss it further and come to agreement re: which way makes the most sense after you've completed more research...\n\nNote that if we do decide to introduce a new `Spring.Template.Velocity.Castle` project, I'd probably want any pull-requests for this to be built by _linking_ to the same source files that are in the `Spring.Template.Velocity` project (where possible!) in the same manner as the existing multiple projects that support various NHibernate versions so that we don't end up with duplicate source code files everywhere, increasing the long-term maintenance burden if/when bugfixes are introduced into the project(s).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77257888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77640187", "body": "Understood; appreciate the update.  FWIW, we're going to release 2.0.0-GA no later than 3/15 so the sooner you can get this to us the better -- we'd like to be able to include a resolution to this issue in the release if possible.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77640187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77778497", "body": "Understood; I've pulled from your MASTER to refresh my local branch and have been able to fully reproduce your PASS/FAIL results on my end as well (both the results with the `HibernateTxScopeTransactionManager` and with your custom implementation).\n\nI'll dig into this shortly; thanks for taking the time to provide us a repro case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77778497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77779234", "body": "Thanks for the feedback.\n\nTBH, I don't think that this is limited in any meaningful way to TX advice per se.  Most advice (TX or otherwise) that is of type AROUND or AFTER (i.e., any advice that would technically need to wait for deferred execution of the method in order to perform its AFTER-invocation-action) would be expected to work with asyc methods without modification.  The advice itself would almost certainly have to be modified to be 'async-aware' (i.e., to await the advised method call prior to continuing its AFTER-invocation behavior) in order for this to be expected to work properly.\n\nIf you want to explore what might be required for AFTER or AROUND advice to properly support async-invocations, we'd be happy to consider a pull-request!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77779234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78043788", "body": "Thanks for the suggestions.  That straightforward pattern might perhaps be feasible for general AROUND advice (and sim. for AFTER advice).\n\nUnfortunately, my quick guess is that it would likely be insufficient (without further changes elsewhere) in the specific case of Tx advice.  Classes like the various `IPlatformTransactionManager` implementations and `TransactionSynchronizationManager` and it subclasses make a number of assumptions about thread-affinity (i.e., for persisting suspended Tx, etc.) that would no longer hold true in scenarios where the advised method is an async invocation.\n\nThese supporting classes (and probably others as well) would likely also either need to become 'async-aware' or have async-supporting variants of themselves introduced in order to support Tx advice around any async invocations.\n\nI don't see any technical reason why this couldn't be achieved, but unfortunately its probably not as simple/quick an undertaking as one might hope :(\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78043788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78060450", "body": "Sort of :)\n\nSee e.g., http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html, http://stackoverflow.com/questions/23555255/how-to-maintain-thread-context-across-async-await-model-in-c as just simple examples.  `TransactionSynchronizationManager` makes use of `CallContext.Get/SetData` for its persistence mechanism and this won't provide the desired behavior under async invocations.\n\nAsync's thread-affinity is _within_ a single async/await 'chain', not _across_ them, which is what would (likely) blow up when anyone tries to nest/promote transactions (obviously a common and necessary use-case for the Spring Tx advice).\n\nThe point isn't as much that this is _hard_ per se, but that its merely _different_ and will have a tendency to spider its way across a larger number of supporting classes rather than being addressable merely by making the _advice_ async ... the classes that manage/interact with the advised types need to be made 'async-aware' as well and this is (probably) a non-trivial undertaking.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78060450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78067186", "body": "Sure; its not all that obvious how to do this, but this MSDN article section shows it in action: https://msdn.microsoft.com/en-us/library/windows/apps/jj714082(v=vs.105).aspx#BKMK_HowtolinkafileinyourappprojectusingAddasLink\n\nNote that this article seems to be Windows/WindowsPhone app-centric, but the section on add-as-link is broadly relevant to all other project types as well.  This was the technique used in the `Spring.Data.NHibernateXYZ` projects so that the source files only exist \"on disk\" in `Spring.Data.NHibernate` but are then added-as-links into e.g., `Spring.Data.NHibernate32`, `Spring.Data.NHibernate4` where appropriate so as not to produce duplicate files in source-control.\n\nHope this helps!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78067186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78089485", "body": "I agree w all your points.  Same namespace is fine (at least for now).  \n\nSimilar to how Nhibernate was handled, there's (probably?) no use-case where you'd ever want/need both assemblies at the same time, and same namespace would facilitate substitution, as you point out.\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"djechelon\" notifications@github.com\nSent: \u200e3/\u200e10/\u200e2015 12:07 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] Spring.Template.Velocity depending on the outdatedApache NVelocity (#102)\n\nHi, how about namespaces? I'm starting the new project on my fork, but I wonder whether to keep Spring.Template.Velocity namespace (good for me) or adding a .Castle suffix (bad for me).\nI support for the first, as it allows replacing old instances of Velocity with Castle. Also, using modified namespace will prevent sharing source files.\nWhat do you think about it?\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78089485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78145473", "body": "In the next day or so I'll try to fork your fork :) and see if I can identify why the tests are failing with the `TypeLoadException` in order to at least get them to the point where they are failing for e.g., logical reasons of incompatibilities vs. structural reasons as you seem to be suggesting is the case now.\n\nAssuming I can get the tests at least running/failing for the 'right' reasons, I'll create a PR from my fork back to your own fork and/or circle back here with my findings.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/78145473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80691156", "body": "I've just created PR https://github.com/djechelon/spring-net/pull/1 which _does_ address the present issue, but uncovers another more tricky one that you will have to investigate resolving before proceeding.\n\nThe reason for your initial error is that Spring.Core contains a list of so-called \"well-known\" NamespaceParsers that are responsible for parsing config files, etc. for \"expected\" config namespaces.  You can see this here: https://github.com/spring-projects/spring-net/blob/master/src/Spring/Spring.Core/Objects/Factory/Xml/NamespaceParserRegistry.cs#L93-L104 and you will note that the final entry in the registration of these defines the Velocity namespace parser type as being from the `Spring.Template.Velocity` assembly.  This is, of course, _not_ the right assembly that contains the parser in your .Castle implementation and so in the simple PR I reference above I've added an app.config that registers the 'proper' namespace parser (same code/class of course, but from the `Spring.Template.Velocity.Castle` assembly in your case).\n\nAs mentioned, this resolves your current exception issue, but in the process exposes a more insidious one: if you run the tests again after accepting my PR you will find that they (nearly) all fail with a completely new exception:\n\n```\nSetUp : Spring.Objects.Factory.ObjectDefinitionStoreException : Unexpected exception parsing XML document from assembly [Spring.Template.Velocity.Castle.Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null], resource [Spring.Template.Velocity.VelocityEngineFactoryObjectTests.xml]Inner exception message= The type initializer for 'Spring.Objects.Factory.Xml.NamespaceParserRegistry' threw an exception.\n  ----> System.TypeInitializationException : The type initializer for 'Spring.Objects.Factory.Xml.NamespaceParserRegistry' threw an exception.\n  ----> System.Configuration.ConfigurationErrorsException : An error occurred creating the configuration section handler for spring/parsers: Inheritance security rules violated while overriding member: 'Spring.Template.Velocity.Config.TemplateNamespaceParser.ParseElement(System.Xml.XmlElement, Spring.Objects.Factory.Xml.ParserContext)'. Security accessibility of the overriding method must match the security accessibility of the method being overriden.\n```\n\nA careful reading of the exception message demonstrates that the root of the exception is actually being thrown by the .NET type initializer, not Spring.NET per se.  It took me some experimentation to determine the cause of this exception because the actual cause isn't _quite_ what's hinted at by the .NET run-time in this case.  The exception message would seem to suggest that the `Spring.Template.Velocity.Config.TemplateNamespaceParser.ParseElement(System.Xml.XmlElement, Spring.Objects.Factory.Xml.ParserContext)` method improperly declares itself as overriding a superclass member with a different accessibility modifier.\n\nHowever, since you've literally linked the source files from the existing `Spring.Template.Velocity` project, there's of course no chance at all that this error message is correct (i.e., there's no way the source would be acceptable under `Spring.Template.Velocity` but somehow also _invalid_ under your new `Spring.Template.Velocity.Castle` project since its the _same source code_ in both projects).  And in any event, I've inspected the superclass and the subclass declarations and they are all in agreement that the method is `public` in all cases.\n\nInstead, what I believe is likely happening is that the .NET run-time is improperly confusing the `Spring.Template.Velocity.Config.TemplateNamespaceParser.ParseElement(System.Xml.XmlElement, Spring.Objects.Factory.Xml.ParserContext)` method from `Spring.Template.Velocity.Castle` with the same method in `Spring.Template.Velocity` because _both_ of these assemblies exist on disk in the same output folder that functions as the 'root' of the AppDomain while the tests are run.\n\nThe first step is probably for you to validate this assumption and get the tests to pass with one or more temporary work-arounds before we try to find a more permanent solution to permitting these things to co-exist properly long-term.\n\nThere are a few ways I can hypothesize that you might be able to validate this assumption:\n1. you could change the output director(ies) of your .Castle and .Castle.Tests projects to some other location _not_ shared by the rest of the solution (e.g., _other than_ /build/***); this would (possibly) isolate the conflicting assemblies from ea. other but also might _not_ work b/c .Castle.Tests references Spring.Core.Tests and this in turn references Spring.Template.Velocity so you may end up in the same bad place with this approach\n2. You could rename the target assembly for your .Castle project to match the existing `Spring.Template.Velocity` assembly name, unload the existing `Spring.Template.Velocity` project from the solution, and re-wire the existing references to the 'original' `Spring.Template.Velocity` project throughout the solution to point to your new one.  While this is more effort than 1. above, this approach has a much higher chance of success (though it would require you to modify e.g., your XML config file(s), etc. to reflect the new assembly name of `Spring.Template.Velocity` of course) \n3. Anything else you can think of that might permit you to bypass this .NET run-time type load error :)\n\nIf you can successfully pursue any of the above approaches (or another) to at least get your tests running/passing (or, if my assumption as to the cause of this turns out to be incorrect, offer a more appropriate fix for this next exception), then we can carefully consider a durable/longer-term approach to (somehow) permitting all of this to properly co-exist together at the same time.\n\nHope this makes sense; let me know your thoughts! \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80691156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80718773", "body": "lol -- good point; I guess I'd not even considered that poss. since the rest of the AssemblyInfo files have long-since been matched/sync-ed in re: security attribs.  As a 'new' project, I suppose I should have realized that this might not be a valid assumption in this case :)\n\nLet me know what you find!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/80718773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81021638", "body": "Tested myself and uncovered what seems to be one (last!) issue; comments here: https://github.com/sbohlen/spring-net/pull/1#issuecomment-81020772\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81021638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81274326", "body": "@ynauls:\n\nAfter considerable investigation down any number of blind alleys, I have _finally_ identified the source of the 'bug' you've uncovered: it turns out to have been caused by myself -- and intentionally too, it appears :-/\n\nFWIW, after a lot of effort in the debugger, I eventually ended up temporarily back-porting `Spring.Data.NHibernate4` support into the 1.3.2-GA code base as a sort of a sanity-check in order to return to a known-good state where all your tests pass under a combination of SPRNET 1.3.2 and NH4.x.  Prior, I'd only been comparing [SPRNET 1.3.2 + NH3.2] and [SPRNET 2.0.0 + NH32 and/or NH4.x].  Using this back-porting approach, I was indeed able to get your tests to pass properly under SPRNET 1.3.2, which means I had definitive proof that the issue had to be a change introduced between SPRNET 1.3.2-GA and SPRNET 2.0.0-RC2.\n\nA file-by-file DIFF of the contents of the various `Spring.Data.NHibernate##` projects between 1.3.2-GA and 2.0.0-RC2 turned up no changes that might be the cause of this, so I next examined the `Spring.Data` project (since it of course offers the infrastructure upon which the NHibernate support depends).\n\nSure enough, I soon uncovered the source of the issue: commit https://github.com/spring-projects/spring-net/commit/d06db488492756b838702fac4d04679919e58b32.  If you revert that commit, all your tests again pass (at least the ones using your custom Hibernate Tx Manager) under SPRNET 2.0.0-RC2.\n\nCommit https://github.com/spring-projects/spring-net/commit/d06db488492756b838702fac4d04679919e58b32 was in response to JIRA issue [SPRNET-1444](https://jira.spring.io/browse/SPRNET-1444).  As you can see from that issue's comment thread, this was actually an _intentional_ breaking behavior change, setting the default the TX isolation level to `Unspecified` instead of `ReadCommitted`.\n\nYou can also see from that comment thread that there was some back-and-forth about the merits of introducing this breaking change, whether at the 2.0.0-GA milestone or otherwise as well as a (probably prudent!) suggestion by @lahma that we should consider introducing some config option, etc. that would permit reverting to the original/legacy behavior (e.g., `ReadCommitted`) if desired.  It seems (of course) as if that suggestion got lost along the way and never morphed into an action-item.\n\nAs such, the breaking change was left in 2.0.0 but no mechanism (e.g., `UseLegacyDefaultTransactionIsolation = true`) was introduced (yet).\n\nOur next decision now needs to be which of three possible paths to follow:\n1. revert https://github.com/spring-projects/spring-net/commit/d06db488492756b838702fac4d04679919e58b32 to restore the prior behavior and release 2.0.0-GA without this breaking change\n2. add e.g. a config setting that would flag reverting to the prior default isolation\n3. leave the breaking change intact and expose a config setting (probably in the TX config infrastructure) that would permit setting _any_ arbitrary isolation level as the default for your app\n\nUnless we choose 1., IMO 3. is probably the preferred course of action as this would both enable reverting to the 1.3.2-style default isolation as well as permit setting _any_ default you might choose (e.g., future-proof as well as max. flexibility).\n\nEither way, unless we select 1. (which simply undoes the change), either 2. or 3. is going to require a bit of effort in re: extending the config subsystem to accept some sort of new value/setting that controls this behavior.\n\nThoughts (from everyone!) welcome -- TBH I'm still not totally sold on the idea that the default wouldn't be best-off simply remaining at `ReadCommitted`...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81274326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81933718", "body": "Nice job finding [SPRNET-802](https://jira.spring.io/browse/SPRNET-802) :)\n\nFWIW, the motivation for [SPRNET-1444](https://jira.spring.io/browse/SPRNET-1444) wasn't just consistency for consistency's sake (betw. SPR and SPRNET) but was actually in support of an effort that had been underway to port much of the Spring AMQP project to .NET (https://github.com/spring-projects/spring-net-amqp).  The difference in default Tx isolation between the Tx advice on the two platforms was resulting in significant friction/differences in the downstream Spring AMQP code that had a dependency on the underlying Spring Tx infrastructure.\n\nI think that your question here is important:\n\n> Does Java's default Isolation level ISOLATION_DEFAULT translate one to one to .Net's Unspecified?\n\nThe answer (I think) is **NO**, they aren't perfectly the same.  [`ISOLATION_DEFAULT`](http://docs.spring.io/spring-framework/docs/2.0.x/api/org/springframework/transaction/TransactionDefinition.html#ISOLATION_DEFAULT) is actually a SPR constant rather than a native Java constant and as you can see from that link to the SPR docs, it does have an entirely different meaning than `Unspecified`.  We selected `Unspecified` because at the time we felt that it was semantically closer to `ISOLATION_DEFAULT` than was `ReadCommitted`.\n\nThat said, my (re)read of the SPR definition of `ISOLATION_DEFAULT` has me now actually beginning to second-guess that conclusion :-/\n\nSPR has introduced its own constants for Tx isolation whereas SPRNET (still) relies upon the underlying .NET constants to define isolation.  There had been some discussion at one point about porting the SPR isolation level constants over to SPRNET, but that effort hasn't (yet) been undertaken.\n\nIf SPR's `ISOLATION_DEFAULT` really does mean...\n\n> Use the default isolation level of the underlying datastore.\n\n...as the SPR docs identify, then in some cases it might actually be that `ReadCommitted` _is_ the right match to the _intent_ of `ISOLATION_DEFAULT` -- i.e., since \"the default isolation of the underlying datastore\" actually _is_ `ReadCommitted`, perhaps we should just leave it that way (?)\n\nI suppose that the real problem with retaining `ReadCommitted` is that it _is_ the semantic equivalent of `ISOLATION_DEAFULT` for _some_ databases, but not those for which some other Tx isolation is the database default, so its not really a 'universal' equivalent for `ISOLATION_DEFAULT`, but is instead a sort of 'hard-coded' coupling to e.g. SQL Server and/or other DBs where `ReadCommitted` is the default :(\n\nIn this context, the 'proper' mitigation for [SPRNET-1444](https://jira.spring.io/browse/SPRNET-1444) may not be simply to change the default Tx isolation from `ReadCommitted` to `Unspecified` but instead to port the SPR Tx isolation constant(s) into SPRNET so that we can actually achieve parity of _intent_ in the value of the default isolation for the Tx advice...\n\nI guess this all leads back to the conclusion that the right thing to do here is to revert the commit(s) that resulted from [SPRNET-1444](https://jira.spring.io/browse/SPRNET-1444) until we can come up with a better way to address the intent of matching `ISOLATION_DEFAULT` from SPR...\n\nThoughts --?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81933718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81943010", "body": "BTW, perhaps just to further reinforce this (or maybe just to rub salt in an already painful wound!), note that the code even contains a `//TODO:` for just this refactoring: https://github.com/spring-projects/spring-net/blob/master/src/Spring/Spring.Data/Transaction/Support/DefaultTransactionDefinition.cs#L68 :P\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/81943010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/82000858", "body": "With all the focus on the bug, I admit I didn't spend much (any!) time really looking closely at your custom implementation to really understand its differences -- would you be willing/interested in explaining a bit more about why you have a need for a custom TX manager?\n\nDoes your custom TX mgr have anything 'custom' that would be inappropriate for everyone to benefit from or is it just various bug-fixes (i.e., could you make the changes as a PR against the existing HibernateTxScopeTransactionManager instead of maintaining your own 'custom' impl)?\n\nI could obviously pick through a DIFF with a fine-tooth comb too, but hoping you could possibly provide more context for the changes you've made...\n\nThanks!\n\n-----Original Message-----\nFrom: \"Yerko Nauls\" notifications@github.com\nSent: \u200e3/\u200e16/\u200e2015 7:12 PM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] System.ArgumentException : The transaction specifiedfor TransactionScope has a different IsolationLevel than the value requestedfor the scope. (#96)\n\n@sbohlen, I agree, I think it will be worth porting SPR Tx isolation constants to ensure that we are comparing apples to apples.\nRolling back will resolve the original exception using my Custom Tx Scope Manager. \nSystem.ArgumentException : The transaction specified for TransactionScope has a different IsolationLevel than the value requested for the scope.\nParameter name: transactionOptions.IsolationLevel.\n\nI can continue using my Custom Tx Scope Manager with SPRNET 2.0 GA. \nHow about the error I ran into using NH Tx Scope Manager (#96 (comment))? Since this is an existing bug, perhaps this can be looked into in a point release? BTW. a potential fix to that issue is in my Custom Tx Scope Manager. It's definitely worth a good look by you :)\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/82000858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84360853", "body": "I concur that we don't want to define a 'replacement' additional namespace.\n\nYou're entirely correct that the 'well-known' parser attempting to be registered by `Spring.Core` is hard-coded to look in the `Spring.Template.Velocity` assembly, and so this will indeed fail (since you're parser is in a different assembly).\n\nAs I hinted at in my commit message here https://github.com/sbohlen/spring-net/commit/72c2f580c192a69d69c9b67f0fc8e1b1b0157338, you have to register the _actual_ location of the parser with the AppContext in order for it to find it properly.  Are you 100% certain that in your actual project you're properly registering the NamespaceParser from the `.Castle` assembly the way I did for your test project here: https://github.com/sbohlen/spring-net/blob/master/test/Spring/Spring.Template.Velocity.Castle.Tests/App.config ?\n\nYou need to do this to overwrite the 'well-known' parser registered by default for the _nvelocity_ namespace with the one you actually want to use.  Once you do this your app should properly use the correct parser and no longer attempt to load the one from the `Spring.Template.Velocity` assembly (which, as you point out, isn't there and will cause an the error you are experiencing).\n\nCan you ensure that you've followed that step and let me know if you're _still_ getting an error?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84360853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84369213", "body": "OK, great -- I agree with your estimation that its _likley_ to work.  We're planning on baking the final 2.0.0-GA release bits this weekend and since this wasn't manifest in the 2.0.0-RC2 packages (and we're still not 100% certain it will work as intended) I'm probably going to _exclude_ this work from the 2.0.0-GA bits as being too nascent to release formally just yet.\n\nAfter we push 2.0.0-GA, I'll accept the PR and push pre-release 2.1.0-alpha1 NuGet packages that contain this so that people can easily use NuGet to consume the bits for testing/evaluation of your Castle Velocity integration.\n\nMake sense --?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84369213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84384495", "body": "Thanks for the PR; I've reviewed it and I tend to agree with your proposed change(s).  The issue I'm trying to come to terms with now is whether this constitutes so much of a behavior change that we'd need to wait until after 2.0.0-GA to accept it (since its a divergence from the behavior that had been present in 2.0.0-RC2, the most recent RC).\n\nTBH, I really don't want to delay the 2.0.0-GA release long enough for a 2.0.0-RC3 to be released and evaluated, but accepting this PR (probably) means a behavior change from the 2.0.0-RC2 packages that wouldn't have a chance to be broadly evaluated before becoming 2.0.0-GA ... and that carries with it its own potential negative repercussions :(\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84384495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84423684", "body": "There have been no improvements to this capability as part of the 2.0 release cycle, so for the time being the recommendations in that JIRA issue as well as the referenced forum posts are still the latest information/recommendation available.\n\nThat said, we'd be happy to entertain a PR that tries to address this for a post-2.0-GA release ... ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/84423684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/86048750", "body": "Actually, I've looked at this again and have concluded that its safe to include in the 2.0GA release after all.  I've been interrupted by unexpected business travel, but plan to try to get the 2.0GA release out tomorrow (26 March) after merging this change first.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/86048750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/86991079", "body": "merged --- thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/86991079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/93026434", "body": "Fixed in 2.0.1-GA just pushed to NuGet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/93026434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/103067668", "body": "Unfortunately the MONO support in SPRNET isn't any longer being actively maintained (and has been unsupported for a number of years now).\n\nWe are still accepting pull-requests for MONO support, so if you can resolve the issue(s) we're happy to accept your fix(es) but MONO support is in a \"use-at-your-own-risk\" state and doesn't any longer undergo testing as part of the continuous integration process or the pre-release QA process that accompanies the rest of the SPRNET project.\n\nI'm closing this issue for now, but as mentioned please do feel free to submit a pull request with any proposed changes to support MONO. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/103067668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/129186328", "body": "That would be great-- we're eager to review and incorporate it into the project!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/129186328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/153008557", "body": "I'll take a look @ the PR later this week.\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"Thor Stenb\u00e6k\" notifications@github.com\nSent: \u200e11/\u200e2/\u200e2015 7:49 AM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nSubject: Re: [spring-net] {\"Error creating context 'spring.root': At least oneobject must implement IComparable.\"} (#124)\n\nWe have the same issue. \nSee our pull request: Multiple PropertyPlaceholderConfigurers fail in AbstractObjectFactory #120 \n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/153008557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/156410808", "body": "Hopefully this weekend.  The system on which I'd had the build/test env for this project set up experienced a HD failure and so I've got to rebuild it (along w all the requisite Visual Studio, etc. installs) to return to a fully working state first.\n\n-Steve B.\n\n-----Original Message-----\nFrom: \"Thor Stenb\u00e6k\" notifications@github.com\nSent: \u200e11/\u200e13/\u200e2015 6:05 AM\nTo: \"spring-projects/spring-net\" spring-net@noreply.github.com\nCc: \"Steve Bohlen\" sbohlen@gmail.com\nSubject: Re: [spring-net] {\"Error creating context 'spring.root': At least oneobject must implement IComparable.\"} (#124)\n\n@sbohlen, did you look into this PR? When can we expect an official release with this fix?\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/156410808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/158785162", "body": "Fixed in https://github.com/spring-projects/spring-net/pull/115\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/158785162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/158785410", "body": "Fixed in https://github.com/spring-projects/spring-net/pull/120\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/158785410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/240688907", "body": "Yes, recompiling the sources against the new TIBCO binaries is certainly one option.  However if the only 'public' difference between the older and newer TIBCO binaries is their version number (e.g., there haven't been any breaking changes in the public API exposed by the TIBCO libraries), I'd probably recommend that you first attempt to solve this by just adding a `<bindingRedirect>` to your app.config file.\n\nSee https://msdn.microsoft.com/en-us/library/7wd6ex19(v=vs.110).aspx for more info on this approach.\n\nAs mentioned, this will only work if there aren't any breaking changes in the 'public' surface area of the TIBCO binaries between these two versions, but of course if there _were_ breaking changes then even compiling the SPRNET source against the new binaries wouldn't work since you'd get compilation errors rather than the runtime errors you're experiencing now (meaning that to support the later version of TIBCO we'd have to adjust the SPRNET source and release separate support for the new version of TIBCO).\n\nLet us know how/if this approach works for you, and good luck!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/240688907/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/comments/9752196", "body": "Good pt; too late to implement for 2.0.0GA release, but I've opened an issue to track this idea so we don't lose sight of it: https://github.com/spring-projects/spring-net/issues/100\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/9752196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448523", "body": "I don't think it will matter, will it?  Won't NuGet silently replace NH4.0 with the latest NH4.x, package...?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448560", "body": ":D\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/10448560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "kindywu": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/85", "title": "when spring.net support EF6 and WebApi?", "body": "i think EF6 is better orm framework,can spring.net 2.0 support it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/85/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/58750051", "body": "how can i join the project?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/58750051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "systembugtj": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/63", "title": "CacheResult Key SpEl can't use #variableName", "body": "Spring.net 2.0.0.40000\n[CacheResult(\"AspNetCache\", \"'Address.Ip =' + #ipAddress\", TimeToLive = \"24:0:0\")]  \n public Address SelectAddressByIp(string ipAddress)\n\nIt has exception \"expect: LPAREN, found\"\n\nCheck the code, it break at\n\nmatch (POUND);\nmatch(ID);\nmatch(LPAREN);<-here\n\nLook like the variable reference is not checked correctly.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/63/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/35781223", "body": "When set the Key in CacheAttribute\n\n key = value;\n keyExpression = Expression.Parse(value);\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/35781223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/35781696", "body": "Typo\n\n[CacheResult(\"AspNetCache\", \"'Address.Ip =' + #ipAddress\", TimeToLive = \"24:0:0\")]\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/35781696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dsscsystems": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/59", "title": "Type Casting at Runtime for Array.SetValue", "body": "![bugs_spring_expressionevaluate_01](https://f.cloud.github.com/assets/5005685/1806386/8171a6da-6cad-11e3-906d-f6b3cbd19238.png)\nHello,\n\nI am having a problem with an expression, not sure if it is becus of what i am doing or a bug. Here the expression (see below). What it is doing is this, i load and instance of a class and call one of it properties called \"Steps\" which contains a string value of float values like so \"1,4,3,0,5,6,2,8,0\".\n\nI then pass Steps as a parameter to a static method call Conv.ToFloatArray(string) which returns an array of float[] value which is then used as a parameter for the next static that is called Algbra.StDev(float[]) this function returns a float value based on the value that is return the expression should return true or false. But instead throws an error, the exception is being thrown in this method: Spring.Util.ReflectionUtils.PackageParamArray(object[] argValues, int argCount, Type elementType).\n\nIt seems that when before it calls my Algbra.StDev(float[]) method, it tries to package the array of float and it fails and throws an error.I have added the logic for the methods i am using hopefully u will be able to help me resolve this and or maybe a work around.\n\nExpression:\n(Algbra.StDev(Conv.ToFloatArray(Steps, ',', 3)) > 3.5)\n\nValues:\nGblStats.Steps = \"1,4,3,0,5,6,2,8,0\";\n\nInstance:\npublic class GblStats\n{\n[System.ComponentModel.DataObjectField(false, false, false)]\n        [System.ComponentModel.Browsable(true)]  \n        public string Steps\n        {\n            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\n            get { return m_steps; }\n            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]\n            set\n            {\n                if (m_steps != value)\n                {\n                    m_steps = value;\n                    PropertyHasChanged();\n                }\n            }\n        }\n}\n\npublic static class Conversion\n    {\n[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining,\n            MethodCodeType = System.Runtime.CompilerServices.MethodCodeType.IL), System.Security.SuppressUnmanagedCodeSecurity]\n        public static float[] ToFloatArray(string value, string seperator, int numberofelements)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                return new float[] { };\n\n```\n        float[] result;\n\n        result = value.Split(',').Select(float.Parse).Take(numberofelements).ToArray();\n\n        return result;\n    }\n```\n\n}\n\npublic static class Algebra\n{\n/// <summary>\n\n\n        /// Used to calculate the average of single values passed in.\n        /// </summary>\n\n\n        /// <param name=\"values\">An array of single values.</param>\n        /// <returns>Standard Deviation of a list of single values.</returns>\n        /// <remarks></remarks>\n        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining,\n            MethodCodeType = System.Runtime.CompilerServices.MethodCodeType.IL), System.Security.SuppressUnmanagedCodeSecurity]\n        public static float StDev(params float[] values)\n        {\n            // Step 1: Average\n            // Step 2: Take each value - by the average\n            // Step 3: square\n            // Step 4: take all add them up\n            // Step 5: #sample minus by 1\n            // Step 6: divide step 4 by  4\n            int count = values.Count();\n            float total = 0.0f;\n            float average = 0.0f;\n            float values_minus_average = 0.0f;\n            float squareroot = 0.0f;\n\n```\n        int maxIndex = values.Count() - 1;\n        for (int Index = 0; Index <= maxIndex; Index++)\n        {\n            float value = values[Index];\n            total += value;\n        }\n\n        if (count > 0)\n        {\n            average = total / count;\n        }\n\n        maxIndex = values.Count() - 1;\n        for (int Index = 0; Index <= maxIndex; Index++)\n        {\n            float value = values[Index];\n            values_minus_average += ((value - average) * (value - average));\n        }\n\n        float stdevbase = 0.0f;\n\n        if (count > 1)\n        {\n            stdevbase = (values_minus_average / (count - 1));\n        }\n        else\n        {\n            stdevbase = values_minus_average;\n        }\n\n        squareroot = (float)System.Math.Sqrt(stdevbase);\n\n        return squareroot;\n    }\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/59/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29552975", "body": "They are not static properties, they have to be  in order for expressions to work? In the example the properties, and methods are not static?\n\nDocumentation: http://www.springframework.net/doc-latest/reference/html/expressions.html\n\npublic class Inventor\n{\n    public string Name;\n    public string Nationality;\n    public string[] Inventions;\n    private DateTime dob;\n    private Place pob;\n\n```\npublic Inventor() : this(null, DateTime.MinValue, null)\n{}\n\npublic Inventor(string name, DateTime dateOfBirth, string nationality)\n{\n    this.Name = name;\n    this.dob = dateOfBirth;\n    this.Nationality = nationality;\n    this.pob = new Place();\n}\n\npublic DateTime DOB\n{\n    get { return dob; }\n    set { dob = value; }\n}\n\npublic Place PlaceOfBirth\n{\n    get { return pob; }\n}\n\npublic int GetAge(DateTime on)\n{\n    // not very accurate, but it will do the job ;-)\n    return on.Year - dob.Year;\n}\n```\n\n}\n\npublic class Place\n{\n    public string City;\n    public string Country;\n}\n\npublic class Society\n{\n    public string Name;\n    public static string Advisors = \"advisors\";\n    public static string President = \"president\";\n\n```\nprivate IList members = new ArrayList();\nprivate IDictionary officers = new Hashtable();\n\npublic IList Members\n{\n    get { return members; }\n}\n\npublic IDictionary Officers\n{\n    get { return officers; }\n}\n\npublic bool IsMember(string name)\n{\n    bool found = false;\n    foreach (Inventor inventor in members)\n    {\n        if (inventor.Name == name)\n        {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29552975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29617745", "body": "oh ok, yes this definitely helps, but i have another question suppose I have 3 classes, 1 is a base class, the other 2 are sub-classes. All three classes are assigned aliases and loaded in the app.config file as typeAliases.\n\nNot with that said the two sub-classes will contain the same Properties, because they are derived from the base class, but contain an property and or overloaded methods, that aren't contained in the base class. Now if I were to use the method u described above (see quote below), how do it know which class to call, how can i achieve this? Like for example if I need to know what the key value is for a derived class (ColumnStatistics) how do it know to call it instead an of the other 2 classes?I will test the expr example u sent me and let u know i will be using this heavily also it will need to make call to properties that are not contain in the base and or derived class and evaluate it value.\n\n<quote>\nIf you try to access/call instance properties/methods you do not have to call the method on the type e.g.:\nstring expr = \"(Key == 'BNSum') and (Pattern >= 5)\";\n</quote>\n\n[App.Config]\n....typeAliases........\n\n```\n ....alias name=\"GblStats\" type=\"UltimateLotteryLib.Stats.NumberStatistics, UltimateLotteryLib.Stats\" /.....\n  .....alias name=\"ColStats\" type=\"UltimateLotteryLib.Stats.ColumnStatistics, UltimateLotteryLib.Stats\" /.....\n  ......alias name=\"PtnStats\" type=\"UltimateLotteryLib.Stats.GlobalPatternStatistics, UltimateLotteryLib.Stats\" /.....\n```\n\n ......../typeAliases.....\n\n[Base Class]\nNumberStatistics\n\n[Derived Classes]\nColumnStatistics\nGlobalPatternStatistics\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29617745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29902977", "body": "Everything is working perfectly now thanks, for providing assistance. I have 1 more question when creating expressions, like so string expr = \"(Key == 'BNSum') and (SUM >= #maxSum)\"; are numeric part of the expression automatically converted to numeric values when the expression is evaluated and it is using variable?\n\nvars[\"MaxSum\"] = \"5\";\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29902977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/31330316", "body": "Anything new anyone?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/31330316/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cherrydev": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/46", "title": "WebObjectFactory has incomplete disposable support for request and session", "body": "WebObjectFactory has the following implementation (OnEndSession is similar):\n\n``` C#\n        /// <summary>\n        /// Disposes all 'request'-scoped objects at the end of each Request\n        /// </summary>\n        private static void OnEndRequest(HttpContext context)\n        {\n            IDictionary items = context.Items[OBJECTTABLEKEY] as IDictionary;\n\n            if (items != null)\n            {\n                log.Debug(\"disposing 'request'-scoped item cache\");\n                ArrayList keys = new ArrayList(items.Keys);\n                for (int i = 0; i < keys.Count; i++)\n                {\n                    IDisposable d = items[keys[i]] as IDisposable;\n                    if (d != null)\n                    {\n                        d.Dispose();\n                    }\n                }\n            }\n        }\n```\n\nAbstractObjectFactory has no explicit ([but broken, actually](https://github.com/SpringSource/spring-net/issues/45)) support for separate scopes for disposable objects but for non scoped singletons, it has a fairly complex procedure of checking the objects up front for IDisposable interface, or an on-destroy definition (and wrapping that in an IDisposable), registering them, calling Dispose() on them when necessary, and also calling any DestructionAwareBeanPostProcessors.  Therefore, scoped singleton support for IDisposable in WebObjectFactory is currently incomplete since it does not support on-destroy configuration, DestructionAwareBeanPostProcessors or dependent objects.  I'll also note that the calls to Dispose() are unsafe since they are not wrapped in try blocks.\n\nPlease note that currently, ALL scoped singleton support for IDisposable is broken, so it will be necessary to fix this after, or in tandem with, the other [issue](https://github.com/SpringSource/spring-net/issues/45).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/46/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15326234", "body": "It would seem that we have a fairly clear distinction between components that want to access the whole hierarchy and ones that only want to access their local part:\n\nWhen doing post-processing, each post-processor in any local or higher context runs separately in every sub-context.  Therefore, it will only want to look in its local part each time it's run so that it's not processing the same objects multiple times, and not processing objects in higher contexts when it is defined only in a lower context.\n\nWhen RESOLVING an object, on the other hand, you always want to look in the entire hierarchy.\n\nThe problem is that while we have a way of specifying whether or not to check ancestors while fetching object definitions, we're not provided with that option when fetching the names of the definitions, making it impossible to enumerate the definitions within your local context unless you try to fetch the definitions from your local context by name and check if they are null.  While there's obviously a larger architectural problem that will need to be solved here, I think the most pragmatic solution this far into a major release cycle would be to modify the affected classes that call GetObjectDefinitionNames() to check for nulls when they only want local definitions, and modify the XML docs for that interface to make it clear that if they want only local definitions they will have to check to see if they are null or not.\n\nMy temporary solution for my own project has just been to make my own implementation of the broken VariablePlaceholderConfigurator and use that instead.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15326234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15855351", "body": "Sorry, I'm in the middle of a brutal code merge at work right now so I don't have time to cook up an example app, but the circumstances are trivial to reproduce:\n- Any ASP.NET or MVC project configured with spring 2.0-M2.\n- Create a single spring object implementing IDisposable and scope=\"request\"\n- Inject that object into a page (only because it's currently difficult to make scoped singletons eagerly created)\n- Display the page a single time in the browser: you should have no problem.\n- Display the page a second time in the browser: you should get the above error.\n\nIf you can't or won't reproduce this without a sample application, I'll try to get to it soon, but it'll probably be a couple of days.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15855351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hailtondecastro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4e39f3b220e5ec3924ea9b29efe3587e85479dde", "message": "The connection was not being effectively closed due to\n'NHibernate.ISession.Disconnect ()' contract:\n        //\n        // Summary:\n        //     Disconnect the ISession from the current ADO.NET\nconnection.\n        //\n        // Returns:\n        //     The connection provided by the application or null\n        //\n        // Remarks:\n        //     If the connection was obtained by Hibernate, close it or\nreturn it to the\n        //     connection pool. Otherwise return it to the application.\nThis is used by\n        //     applications which require long transactions."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thorstenbaek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/9fcf18fe5bf9f1a44090450497c20aa12373ff91", "message": "Changed OrderComparator to ObjectOrderComparator"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8eb9a86a203c866d8a1a089c7b8d403c5055a450", "message": "Added OrderComparer to embeddedValueResolvers SortedSet"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/124035261", "body": "Changed OrderComparer to ObjectOrderComparer. After digging more into the code I discovered that the PPCs are wrapped in adapters not implementing IOrder before beeing added to the SortedSet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/124035261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/153008395", "body": "We have the same issue. \nSee our pull request: Multiple PropertyPlaceholderConfigurers fail in AbstractObjectFactory #120 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/153008395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/156398805", "body": "@sbohlen, did you look into this PR? When can we expect an official release with this fix?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/156398805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "gitchomik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/bb2e263f940aca7423efa18046388da41eb5c183", "message": "fix issue 114\n\nhttps://github.com/spring-projects/spring-net/issues/114"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sean-gilliam": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/44e4c3bf68459220cf250a29bd1bcac0c37db2bc", "message": "Fixed method signature"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/ca42957beb8076729cc8e95109f051c5ce9dac88", "message": "Fixed several typos"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/86c89fbdb1d39267e8c31d8f91f8770d085eb0e5", "message": "Removed redundant delegate creation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/d4ba72bb21843ed589153c82fa5bc5078a2f4e0e", "message": "Replaced delegate syntax with easier to read lambda syntax"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/65452693", "body": "Thanks Sean. \n\nI closed this out and resubmitted it because I did a merge commit instead of a rebase on upstream. Doh. Still new-ish the git workflow.\n\nAre you guys still using Spring.NET?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/65452693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "chadsowald": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1acf52e5b9e50d1d71f5adc2226c6449f6bffda1", "message": "Add comments to equality members."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/12ee34ca8f3f86aebe95df96119617b5c0fa4f35", "message": "Add equality members to fix key-ref merging."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/56242514", "body": "You're welcome.  Thanks for the quick feedback!\n\nOn Fri, Sep 19, 2014 at 4:48 AM, Marko Lahma notifications@github.com\nwrote:\n\n> Thanks for the contribution and detailed report!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-net/pull/84#issuecomment-56167288\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/56242514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "aaronmell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/66bf53684c137a7c53d989ed3dc072c1ae8c984a", "message": "Fixed an issue with the refactoring"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/7da726e8544345f848fbb3c34d44266ba27222e6", "message": "Refactored DelegatingLocationSessionFactoryObject to support named connections\n\nThis will fail if you attempt to use a named connection instead of a connection string. I modified the PostProcessConfiguration to set the connection string if one could be looked up via NHibernates connection_string_name"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "twisterino": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/be24957bb5baeec771ead82ab6e7e0367e61417f", "message": "Typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/c2867ca21d9deb60f9553722e6e050a21fa0f406", "message": "Prevent TearDown to swallow exceptions"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yhrn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/09291a8216bf6f213f6c82bc3e636537a165f73f", "message": "SPRNET-1567 Assigning correct timeout\n\nSPRNET-1567 HibernateTransactionManager assign incorrect connection\ntimeout\nNow assigning the correct timeout to the correct property"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/36d58efe09873da09a816cab22146df9f3332567", "message": "SPRNET-1566 Return exception instead of throw\n\nSPRNET-1566 Spring.Data.Support.FallbackExceptionTranslator.Translate()\nshould return an exception, not throw one"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/68", "title": "Sprnet 1568", "body": "HibernateTransactionManager does not honor the transaction timeout:\nThese changes should ensure that the transaction is not committed if the deadline has passed.\n\nI have added and updated the test cases in HibernateTransactionManagerTests and these tests pass in my environment but almost all the other test cases in that fixture fail. However, this was also the case before my changes.\n\nI have updated the HibernateTxScopeTransactionManager in the same manner, but I'm not sure if there is anything else needed there as I have not used that class anything.\n\nIn addition, the exception handling in DoCommit was cleaned up to improve readability (it should behave exactly as before) and the checkTransactionTimeout method of ResourceHolderSupport was converted into a public method because otherwise the only way to trigger an exception on timeout was to check the value of  one of the properties TimeToLiveInSeconds or TimeToLiveInMilliseconds, which seemed very unintuitive to me.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36139111", "body": "Sorry, new to Git. Didn't know that I should have created separate feature branches for each issue and created pull requests from there. I hope this still works.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36139111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36217297", "body": "Going to redo this and try to do it right instead.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/36217297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/45842771", "body": "Sorry about the commits merged from trunk, I now realize that I should have rebased my feature branch instead. Still a Git newb...\n\nAnyway, I'm having second thoughts about this implementation. The problem I see is rollback. If _RollbackOnCommitFailure = false_ and a an exception is raised when checking the transaction timeout or flushing the transaction will not be rolled back even though commit has not really been attempted. If used in conjunction with declarative transaction management this can actually mean that the operation executing within the transaction seems to fail to the client but the transaction will actually be committed successfully when the NH session is closed.\n\nA possible solution to this is to call _DoRollback_ from within _DoCommit_ if an exception is raised prior to the actual transaction commit (_sessHolder.Transaction.Commit()_) and _RollbackOnCommitFailure = false_. However, I'm not sure if this would have any other implications that I'm not aware of so I'd like some feedback on that idea.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/45842771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "CNemo7539": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/a337b292a1d56e35ac4d724499d650cced66bfbe", "message": "Changed build file to properly reference MS assembly"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/19df92672f948f2315c3f88d648ef993547d5637", "message": "Added NAnt configuration to run on .Net 4.5"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33265029", "body": "+1\n\nWe are kind of in waiting pattern. I've forked and trying to build with new code. New version has some breaking changes not even mentioned in documentation. Some other stuff popping up here and there. But we are not losing hope to see official release. And it will be greatly appreciated if someone hint release date.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33265029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33295145", "body": "There are changes in expression and validation classes from non-generic to generic equivalents. This also trickles down to web validation controls.\n\nAlso I'm having some problems with abstract base class in MS testing that declares AdoTemplate property. By default this class uses ByType auto wiring. However auto wiring fails if ado template object is actually declared as generic, because generic AdoTemplate is not assignable to non-generic version. I've worked around by hiding property on the base class but it is kind of ugly. I'm not sure if using common ancestor will solve the problem. Maybe \nproperty getter and setter need to be modified to massage this problem.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33295145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "AndreasKl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/638002646c2e0e14282fc6fa6bebb89e35693f34", "message": "SPRNET-1387: ASP.NET PageHandlerFactory cannot inject dependencies in the presence of the WebForms 4.0 routing infrastructure\n\n- Changed how the WebSupportModule detects when it should inject into a Page\n\nSigned-off-by: Andreas Kluth <mail@andreaskluth.net>"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b804127d1ef6cc6df93b525f4e4c42dda081c84f", "message": "Housekeeping. Renamed test suite to match naming convention."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/5487d97d4c19f75c350596fbfa6383c9f24f0197", "message": "Issue #51: ActiveMQ 1.6 interfaces have changed\n- Updated NMS.ActiveMQ to v1.6.1 and Apache.NMS API to v1.6.0\n- Amended wrapper implementation to match new API"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/db4bd0d0ad3220449d2fd88d450dd9968227800e", "message": "Housekeeping. Fixed formatting."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8682271ef8e36a5e5198426255fad1622eb2a159", "message": "Housekeeping. Added factory method to reduce duplication."}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/226c08d9a7002617d60378b53ce52f881e500d18", "message": "Housekeeping. Fixed integration test to match template used in SimpleMessageListenerContainerTests.xml."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/26743831", "body": "@norvegec personally prefer your second solution and agree with @serra that unless we can be 100% sure having always an instance of `ManagedDictionary` this would be a breaking change.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/26743831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29539882", "body": "Hi,\n\nI suppose you would reach more readers if you would post your question at http://stackoverflow.com/.\n\nAre you sure that `GlobalPatternStatistics` has the static properties `Key` and `Pattern`? Usally you get this exception if you try to access a non-static method/property.\n\nAnyway, I need the code of `GlobalPatternStatistics` to validate if it is an issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29539882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29553268", "body": "Hi, `President` is a static field therefore registering the type `Society` and accessing `Sample.President` is possible. `Officers` is a non-static `IDictionary` therefore it is accessed without a type prefix.\n\n```\nTypeRegistry.RegisterType(\"Sample\", typeof(Society));\nInventor pupin = (Inventor) ExpressionEvaluator.GetValue(ieee, \"Officers[Sample.President]\");\n```\n\nIf you try to access/call instance properties/methods you do not have to call the method on the type e.g.:\n`string expr = \"(Key == 'BNSum') and (Pattern >= 5)\";`\n\nHope this explanation helps.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29553268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29585053", "body": "Sorry, missed to commit this file and detected it while getting the nant build running.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/29585053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "norvegec": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/40e007ad6b637aa53682b1a8b0836fc5009f0b21", "message": "Added check if parent IDictionary implementation is ManagedDictionary"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/3ab0ff9428e0b85bbc73285102ea7a6c4dadae68", "message": "Added test method for merged generic dictionary"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/aac001c707073f2aa4e5cfe4f519c65a800c404c", "message": "Added Generic support for Merge(object) method"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "thomast74": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2605f192d20216b7ca146ab059ee486e8d8a9a2c", "message": "Formatting changes and changes to support .Net 3.5 as it can't handle default method values"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1231e82334b8543f44453c6adea77d6f45b3e5b0", "message": "Spell checking"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/62aef6c05c5359976a2521e1fb92fcc05e6dc48f", "message": "Merge branch 'master' into DocUpdate\n\nConflicts:\n\tdoc/reference/src/index.xml"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/dcfd6e014a703c16df515fdc70dcc797c3bfccb2", "message": "SPRNET-1545 Request or Session scoped objects with IDisposable are failing during the 2nd time of the creation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/951b23209aba94ab6edcfe5fdf845c1c3968448d", "message": "Error because of using a wrong reference in lambda debig message"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/1e2f601407a72a37c9acaadef2589327b561af81", "message": "Enhance ComponentScan logging messages"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/8774590593bef9f908d44f377b5e7ce577b7eeda", "message": "SPRNET-1544 Porblem with scanned objects and ObjectScope is Request or Session, LazyInit not set to true"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/4005e9eff6b0f02dbfd0e161d5e46e0189ab8721", "message": "SPRNET-1543 Changed the default behaviour for GetObjectDefinionNames back to not include ancestors, added additional method that allows via bool parmeter to include parent factories. Other areas get the default inlucde where unit tests needed this options. Consumer of GetObjectDefinitionsNames are checked for potential NPE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/255cd75201ad7b74c2331fab6ab55617e0c91e04", "message": "Update typos and wrong references in XSD/XML documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/0ded0d93e4be38fd9da1119471b9307897ebff2a", "message": "Register ContextNamespaceParser as well known parser in NamespaceParserRegistry"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/f6bedbcfe9f4a8c243645d650fed021b6913dff1", "message": "Update NHibernate to version 3.3.3 GA"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e09235a449eb115e68ca658abc0c67affa012327", "message": "NPE when using AbstractDependencyInjecttionSpringContextTests and Autowire within test class"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7709976", "body": "Checked the Java Container and the order is the following:\n1. PostProcessor destruction\n2. IDisposal \n3. CustomDestroyMethod\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7709976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7724421", "body": "I am currently implementing a component-scan on top of spring code-config that implements the annotations in the same way as Spring Java.\nYou don't need to have the [Controller] annotation but it would identify a Type as a component and you would provide a meaning to it (like [Service] or [Repository]).\nFrom functionality point of view you could use also [Componenent] without any issues.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7724421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7726483", "body": "Would be great if you look over it when I am done with the initial part.\nI might be using some parts not 100% the correct way and I can still learn something.\n\nThe PostConstruct for example needs to have access to the object definition.\nIn Spring Java there is an interface (MergedBeanDefinitionPostProcessor) that provides the post processor with the object definition and is also good entrance point of scanning the type for special annotations.\nI have not found the same interface in the .Net version.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/7726483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9159319", "body": "Hi Steve,\n\nThanks it is fun doing it.\n\nI filled in the form sometime in August and I received the following\nregistration number:\n\n32220120805120428\n\nDo you need more information?\n\nRegards,\nThomas\n On Oct 4, 2012 8:52 PM, \"Steve Bohlen\" notifications@github.com wrote:\n\n> Thanks for the contribution, I'm reviewing it now.\n> \n> In the mean time, you're probably at the point where your contributions\n> have become non-trivial enough that we are going to need you to complete\n> the SpringSource Individual Contributor License Agreement (\"ICLA\") found\n> here: https://support.springsource.com/spring_committer_signup\n> \n> When you have a moment, can you do this for us? Thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SpringSource/spring-net/pull/28#issuecomment-9154701.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9159319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9166166", "body": "How you want me to handle user documentation? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/9166166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15320123", "body": "Added a Pull Request to correct this type\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15320123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15325606", "body": "I looked at all parts of the code that is using this method and there are more areas then the one you mentioned that are affected by a potential NPE exception because GetObjectDefinitionNames is returning from all parents but when try to get ObjectDefinitions is only looking in the current context.\n\nSomething is clearly a bit out of sync.\n\nWill check what the Java version is doing and we see form there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15325606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15333297", "body": "The Java version is only looking in the current context.  The Spring.NET version differs here. \n\nI would recommend the following:\n1.) I will add the methods that allows to tell if you want with ancestors or not. The default will be false. \n2.) In all sub components that uses GetObjectDefinitionNames()  will also check for null values. \n\nBut I'm not sure if that will be accepted,  we have to see. At the moment the way it is done is not consistent. \nOn the other side that change will allow us later to change the sub components to check with ancestors quite easily. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15333297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15851054", "body": "Can you provide your configuration or simple application that shows the error you get?\nOnce received I can look at it and maybe correct the issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15851054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/16021004", "body": "A new ticket is created for this issue: SPRNET-1545 (https://jira.springsource.org/browse/SPRNET-1545)\nI already submitted a Pull Request, not sure if and when it will be accepted.\nI am also not sure if accepted when a new version will be available on Nuget.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/16021004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39466698", "body": "The ADO template is now in upper case writing.\n\nTo make it working I had to add the following line into your constructor.\n\nDependencyCheck = false;\n\nWorked for me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39466698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39514910", "body": "Yes. It is only a work around.\nThe issue was introduced with the latest version.\nIt should be investigated what the real root cause is.\n\nI will create a Jira ticket for it and try to figure it out.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39514910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39549832", "body": "Is there a reason why Jira does not allow to select Spring.Net project when I create a new issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39549832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39635020", "body": "The protected setter from \n\n```\n    public AdoTemplate AdoTemplate\n    {\n        get { return adoTemplate; }\n        protected set { adoTemplate = value; }\n    }\n```\n\nis the root cause. The Autowrie.ByType routine checks all properties that CanWrite as required.\n\nI added a Pull Request that removes the AdoTemplate from the dependency check after autowiring.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39635020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7548954", "body": "Well technically this shouldn't happen. But in theory the TryParse could return NULL for scope and for this case the default Singleton is returned. You could just return scope straight away, I felt it is safer that way.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7548954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549370", "body": "Yes that is the case.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/7549370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "adamlepkowski": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/b32f730fdd5a48b7546818313838efb323b38b61", "message": "SPRNET-1507 Add support for dynamic type ExpandoObject in spring.net expressions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5526728", "body": "Yes, you have right, it does not compile under .NET 3.5 only under .NET 4.0. I will close this pull request and when I modified code correctly then I create new one. Can you give me some example or link to article how to use this #define in the way you described, because I have never used it. You means something like that: http://stackoverflow.com/questions/1879743/is-there-a-c-sharp-precompiler-define-for-the-clr-version \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5526728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5547340", "body": "Ok thank you\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5547340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ohadho": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/11d0d0d976ce6ae79628b7380e8e41116b48e14d", "message": "Merge remote-tracking branch 'upstream/master'"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/07eb2ed5bcec218ae9d23bf1b195f98ef3186153", "message": "Added test for bug fix (CompositionProxyTypeBuilder crashed when type had protected constructor)"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/2204ce8ea5224329f1b217a8c5cd566e76b045af", "message": "Bug fix: CompositionProxyTypeBuilder crashed when class has protected constructor."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bbaia": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-net/commits/01b1f5722459e707112120e9b60d88d670560c3a", "message": "Merge pull request #41 from thomast74/XML-Doc-Update\n\nUpdate typos and wrong references in XSD/XML documentation"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/375f4a551dd9d007ef389db3827262956ea0882f", "message": "Merge pull request #40 from thomast74/SPRNET-1542\n\nRegister ContextNamespaceParser as well known parser in NamespaceParserRegister [SPRNET-1452]"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/e606654fffb617c05ba9086f0312b7028882fee4", "message": "Merge pull request #39 from thomast74/SPRNET-1540\n\nUpdate NHibernate to version 3.3.3 GA"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/commits/fc22f0253d536fd1a0f5d0643dff98ae8405687f", "message": "Merge pull request #36 from thomast74/AutowireDependObjectBug\n\nNPE when using AbstractDependencyInjecttionSpringContextTests"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10235628", "body": "Maybe this can work:\n\n``` csharp\nT(MyClass).MyConstant == 5\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10235628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/40171662", "body": "see https://jira.spring.io/plugins/servlet/mobile#issue/SPRNETSOCIALTW-11\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/40171662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commit_comments": [], "review_comments": []}, "sawilde": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2447889", "body": "I'd have to investigate to see where the bottleneck - do you have any output from opencover that you can supply for initial analysis?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2447889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2465181", "body": "Not sure what or how you are running the code but I built the code and ran the following line from the debug folder (2.0)\n\n```\n..\\..\\..\\..\\build-support\\tools\\OpenCover\\OpenCover.Console.exe -register:user -mergebyhash \n-target:\"..\\..\\..\\..\\build-support\\tools\\nunit\\net-2.0\\nunit-console-x86.exe\" -targetargs:\"/noshadow \nSpring.Core.Tests.dll Spring.Web.Tests.dll Spring.Aop.Tests.dll Spring.Data.Tests.dll \nSpring.Data.Integration.Tests.dll Spring.Services.Tests.dll Spring.Testing.NUnit.Tests.dll\nSpring.Messaging.Nms.Tests.dll Spring.Messaging.Nms.Integration.Tests.dll \nSpring.Scheduling.Quartz.Tests.dll Spring.Messaging.Tests.dll Spring.Template.Velocity.Tests.dll\" \n-filter:\"+[Spring*]* -[*Tests]*\"\n```\n\n3669 (67 Errors, 1 Failure and 34 ignored) tests and this completed in 665 seconds (compared to 357 no coverage, as measured from TestResult.xml) and about 120 (45 otherwise) seconds was in the Spring.Core.Tests.dll it also resulted in an 18 MB results file.\n\nThe summary at the end of the run was \n\n```\nVisited Classes 936 of 1368 (68.4210526315789)\nVisited Methods 5928 of 11243 (52.726140709775)\nVisited Points 41988 of 77431 (54.2263434541721)\nVisited Branches 9355 of 18483 (50.6140778012227)\n\n==== Alternative Results (includes all methods including those without corresponding source) ====\nAlternative Visited Classes 949 of 1470 (64.5578231292517)\nAlternative Visited Methods 6081 of 11853 (51.3034674765882)\n```\n\nNOTE: I didn't run the NHibernate tests as I encountered loading (binding) errors so I skipped them\n\nNot sure where to go from here - I think I need to know more about your setup\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2465181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2479942", "body": "1) there will be some cost as the profiler has to analyze each assembly to assign numbers to sequence and branch points - if you use the same assemblies per test run then you will incur that cost each time - I am looking at ways to improve that speed probably by doing the work asynchronously with the profiler.\n\n2) -mergebyhash - is for when an assembly is loaded multiple times from different locations (usually) and allows the merging of results - i.e. nunit uses an agent process you will only need this option when running multiple Test assemblies. Otherwise you will get some unusual results if you are not expecting it and saves doing the processing post test run.\n\n3) probably - I assume you are using reportgenerator to merge the results which it will have to do before it can start analyzing them - again a single run will help cut that cost down.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2479942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2584537", "body": "I am glad you are finding it useful - any feedback on features or issues appreciated\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2584537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "serra": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2631717", "body": "I have tested this on VS 2010 for .net 4.0. Currently I have [some difficulties](http://forum.springframework.net/showthread.php?9515-What-are-the-prerequisites-to-do-a-succesful-build-from-a-clean-check-out) running builds and test for older versions of the .net framework on my machine. I'll post back here if those tests have passed too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2631717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2645674", "body": "See https://jira.springsource.org/browse/SPRNET-1477 : this functionality can already be achieved using a `ConfigSectionVariableSource` with `SectionName` set to \"appSettings\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2645674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2777799", "body": "I think http://forum.springframework.net/ is the place to start your discussion.\n\nWith regard to the 2.0 build issue: I ran into the same problem and haven't been able to fix it so far on my win7 64 bit system either. I started a thread on this issue http://forum.springframework.net/showthread.php?9515-What-are-the-prerequisites-to-do-a-succesful-build-from-a-clean-check-out. If you manage to do a 2.0 compile on your main machine, please drop a note there on how you did it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2777799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3248577", "body": "If there are any improvements you'd like to see, just let me know; I'm open to any feedback. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3248577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3281046", "body": "Thanks for the feedback, those are good points. I'll look into it later this week.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3281046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3584260", "body": "No sweat.\n\nOn Fri, Jan 20, 2012 at 3:12 PM, Steve Bohlen <\nreply@reply.github.com\n\n> wrote:\n> \n> Thanks for the tweaks -- really appreciated!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-net/pull/12#issuecomment-3583989\n\n## \n\nMarijn van der Zee\nSerra ICT Diensten\nhttp://www.serraict.com\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3584260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5193918", "body": "You're welcome.\n\nWhat is your preferred work flow when merging pull requests? I'm just wondering, because I noticed I didn't get the blame for these commits (no offense taken btw); it appears you created a new commit: [my commit](https://github.com/serra/spring-net/commit/e029dd70175f6d4ec1824ee8041f4a52ad0fc23a) and [your commit](https://github.com/SpringSource/spring-net/commit/153a1bb90935ea6d06573f933347ecd5f39655f2).\n\nGithub automatically closes pull requests when the associated commits are merged. You can hit the auto merge button, but you could also add a contributor's repo as a remote (handy for contributor's you work with a lot), or do a patch-and-apply, which would probably be more appropriate in this case:\n\n```\n$ git checkout master\n$ curl https://github.com/SpringSource/spring-net/pull/17.patch | git am\n$ git push origin master\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5193918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5198436", "body": "OK, that's clear. \nIMO it's not really necessary to have a single commit for a unit of work / jira issue, but that might be a matter of taste\nI do like my commit messages to have a reference to the issue, for traceability.\nI agree that in many cases it is appropriate to squash a bunch of commits to have a cleaner timeline;  I'll try remember to squash where appropriate before submitting pull requests here in the future.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/5198436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10317898", "body": "Reading constants using expressions _does_ work, I've posted on StackOverflow on this: http://stackoverflow.com/a/7090854/322283. I haven't tried it with bytes though, could you try it with a string constant and see if that works?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10317898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10328404", "body": "Took a quick look too, but didn't get beyond writing a test that shows that a static byte doesn't fail, but a constant byte does: https://github.com/serra/spring-net/commit/4fea28932ea97574cf72065ca2304478b9b74c83. hth\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10328404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10331262", "body": "In fact I pulled in your changes :)\nBut I added a test that shows that a static byte doesn't fail, which might be workaround for you if you need a quick solution and you have access to the source code you need to read the constant from: https://github.com/serra/spring-net/commit/4fea28932ea97574cf72065ca2304478b9b74c83#L0R91\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/10331262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "choyrim": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2754804", "body": "Well now I know that I need to ensure .net 2.0 compatibility.\n On Nov 15, 2011 11:13 AM, \"Steve Bohlen\" <\nreply@reply.github.com>\nwrote:\n\n> Merged w slight mods to ensure build compatibility with .NET 2.0 compiler\n> in commit 43516e6dbefc7049b26f35ec04b2c9a0bd65c051\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-net/pull/6#issuecomment-2746924\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2754804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2772250", "body": "Thanks for the encouraging words. I'm glad I made it thru my first\ncontribution in a long while.\n\nI would like to discuss some ideas for type conversion of generic types\nwith the spring.net developers at large. You know, bounce ideas. but I'm\nnot certain about the etiquette and I don't see any traffic or archives on\nthe lists I've been added to.\n\nShould I be posting to or lurking on a google group or one of forums\ninstead?\n\nOne more thing, the build.cmd does not seem to work on my windows 7 x64\nbox. it may have something to do with the placement of the program files\ndirectory. I finally tried on my old 32 bit xp box and the build worked\nfine except for the asp.net mvc parts.\n\n-Choy\n\nOn Wed, Nov 16, 2011 at 7:53 AM, Steve Bohlen <\nreply@reply.github.com\n\n> wrote:\n> \n> FWIW, this trips me up frequently as well (esp. .b/c compilation from\n> within VS targeting .NET 2.0 actually uses the 4.0 csc.exe and so tends to\n> be more liberal in permitting you to use the more recent syntactic sugar\n> constructs in the C# language).\n> \n> Since its unreasonable to expect everyone to have every version fo VS\n> since 2005 installed in parallel, the easiest way to ensure that you\n> haven't introduced anything that won't pass the 2.0 compiler is to run the\n> \"build.cmd\" convenience script in the root of the solution folder -- this\n> will invoke each of the specific framework-targeting builds with each of\n> their corresponding compilers and permit you to catch these kinds of\n> things.  The obvious culprits tend to be use of 'var' to do implicit\n> typing, but there are other less-obvious ones that keep tripping me up all\n> the time :)\n> \n> Thanks again for the pull -- other than this (minor) housekeeping issue,\n> it was just about perfect!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SpringSource/spring-net/pull/6#issuecomment-2759049\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/2772250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3280390", "body": "I haven't had a chance to look at this yet. But this area really needed better documentation. I'm glad you addressed it. I think any production usage of spring.net will want to use IVariableSource for placeholder configuration. I'll take a look after I get the docs to build.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3280390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3280595", "body": "The added documentation is great. I must admit it's a bit odd having so much text devoted to something that seems peripheral to the object factory. But this area hasn't been documented well which is unfortunate because it adds so much value.\n\nI'm still using 1.2 so I didn't realize they added a CanResolveVariable method. I'm not sure it adds any value since ResolveVariable can still return null. So I'm not sure why that was added. I'm complaining because it will break my custom 1.2 variable sources.\n\nsome comments on the docs:\n- You should note the inconsistent ordering/precedence semantics between VariablePlaceholderConfigurer.VariableSources and PropertyFileVariableSource.Locations. The first VariableSource takes precedence over the remaining ones. The last location takes precedence over the previous ones. This is because VariableSources are searched first to last. Locations are loaded first to last into a hash. We should consider fixing this in another incarnation.\n- You should note that for the RegistryVariableSource that the Key specified is resolved when the config is read in and so must exist. If not, you'll get an error. I was hoping that it would ignore the variable source if the key did not exist. So I had to write a custom one that took a string key and did nothing if the key was not there.\n\nThis entire IVariableSource piece has not received enough love. It's important when deploying to multiple environments and regions, i.e. dev, qa, uat, prod, new york, london, tokyo.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/3280595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "spassm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15867246", "body": "Hi, can you tell me when it will be available in NuGet? I'm using Spring.NET M2 libs. And it is blocking bug for me.\nI described my problem here:\nhttp://forum.springframework.net/showthread.php?10713-Container-Hierarchy\n\nThank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/15867246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "orochies": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33376552", "body": "I will begin a new project in ASP. NET 4.5, Is the framework stable enough to use? Thank you.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33376552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33407136", "body": "Thanks for the reply.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/33407136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vivian-farrell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37177243", "body": "My machine is Win7 64bit with Visual Studio 2010. I was using EN-AU but changed it to EN-US with the same result. I reverted my code to the commit you mentioned and as you expected, the tests passed. Hope this helps.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/37177243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38538031", "body": "Hi sorry been really busy with work. I haven't forgotten. It's on my todo list. Hopefully within the next week. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/38538031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akhilkakar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39409852", "body": "Stacktrace:\n\nSetUp : Spring.Objects.Factory.UnsatisfiedDependencyException : Error creating object with name 'DealingHibernateDaoTest' : Unsatisfied dependency expressed through object property 'AdoTemplate': Set this property value or disable dependency checking for this object.\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PopulateObject(String\u00a0name,\u00a0RootObjectDefinition\u00a0definition,\u00a0IObjectWrapper\u00a0wrapper) in c:\\devenv\\spring-net-spring-net-2.0.0-RC1\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs: line 541\n   at Spring.Testing.NUnit.AbstractDependencyInjectionSpringContextTests.SetUp() in c:\\devenv\\spring-net-spring-net-2.0.0-RC1\\src\\Spring\\Spring.Testing.NUnit\\Testing\\NUnit\\AbstractDependencyInjectionSpringContextTests.cs: line 169\n\nI am using AutoWiringMode.ByType\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39409852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39509723", "body": "Thanks for your help Thomas. By setting DependencyCheck = false; worked for me as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39509723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39516756", "body": "In the latest version, any class inheriting from AbstractTransactionalDbProviderSpringContextTests has to explicitly set the AdoTemplate property:\n\n```\nprivate AdoTemplate adoTemplate;\npublic IDbProvider DbProvider\n        {\n            set { adoTemplate = new AdoTemplate(value); }\n        }\n\n        public AdoTemplate AdoTemplate\n        {\n            get { return adoTemplate; }\n            protected set { adoTemplate = value; }\n        }\n```\n\nIn the earlier version of Spring, it wasn't required to set the AdoTemplate explicity. It was initialised when DbProvider value was injected.\n\n```\nprotected AdoTemplate adoTemplate;\npublic IDbProvider DbProvider\n        {\n            set\n            {\n                this.adoTemplate = new AdoTemplate(value);\n            }\n        }\n\npublic AdoTemplate AdoTemplate\n        {\n            get\n            {\n                return this.adoTemplate;\n            }\n        }\n```\n\nHope this helps.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/39516756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Lukkian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51124342", "body": "I think I found the problem, an undocumented breaking change here: https://github.com/spring-projects/spring-net-codeconfig/commit/f974629d442164439d51d0946a473b374169fa06\n\nI'll do some tests today and come back to report later.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51124342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51132992", "body": "I was right, the problem was solved!\n\nBut I found a new issue, described here: https://github.com/spring-projects/spring-net/issues/71\n\nAnd a possible solution on this pull request: https://github.com/spring-projects/spring-net/pull/74\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/51132992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nascosto": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/56075857", "body": "+1 :thumbsup:\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/56075857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mezza9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/59680080", "body": "That resolved the issue. Appreciate it!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/59680080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "seanmcelroy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/65270846", "body": "Nice to see you're still working on this project. :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/65270846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/65461512", "body": "We are, heavily, but only in our services tier at this point.  We have pulled it out of our MVC apps.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/65461512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ericklombardo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71949808", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71949808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hallissons": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71950777", "body": "+1\n\nEm quarta-feira, 28 de janeiro de 2015, Erick Lombardo <\nnotifications@github.com> escreveu:\n\n> +1\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/spring-projects/spring-net/issues/82#issuecomment-71949808\n> .\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71950777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "zhangyaoxing": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71960453", "body": "Finally. Good to know. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/71960453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kamiff": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72163028", "body": "First\uff0cwhen I checkout the source code from branch \"sprnet-generics\" and compile, There are several compilation error occurred in Spring.Web.Mvc4.2010 project, because this project seems to use several nonexistent interface(System.Web.Http.Services.IDependencyResolver) After review of this interface presents in asp.net mvc5. So I copied the relevant code from the M2 branch to the project, then it compiles.\n\nThen let me explain stuff starts with \"ASP.\" \"ASP.\" At the beginning  when I use Spring.NET (v1.3.2) as a container for a site with high conccurrency, I found there are a lot of code blocks for compatibilities of elder .NET versions, including the ancient the 1.1 version, but my application is based on ASP.NET MVC3, so I take the risk to use Spring.NET 2.0 M2 release, and modified it to enhance performance of creation of objects. Most of which I think we can make to enhance the quality of performance is the place to let the Spring container ignored by the view types of services injections can bring almost 10 times the original performance improvements! For example the Razor type view (.cshtml), the view file will be dynamically compiled into ASP.XXX object exists in the application. So if some classes are in the ASP. namespace, I'll let ASP.MVC build-in engine to create it, other than Spring engine. \u2014\u2014so that we get better performance.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72163028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72164414", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72164414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/comments/9606333", "body": "I think this optimization may be placed in Spring.Core.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/9606333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ncpga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72407813", "body": "+1. Cant wait.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72407813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "chrisdrobison": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72724949", "body": "I've noticed that the RC 2 Nuget packages have a common.logging dependency of >= 1.2.0. Shouldn't that get changed to 3.0?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/72724949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tikicoloda": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77873141", "body": "> Understood; appreciate the update. FWIW, we're going to release 2.0.0-GA no later than 3/15 so the sooner you can get this to us the better -- we'd like to be able to include a resolution to this issue in the release if possible.\n> \n> Thanks!\n\nThis is AWESOME news! I think I speak for the entire community when I say \"Thank You\"!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/77873141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hasanuzun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/129069779", "body": "I have already created a project as Spring.Data.EF as likes Spring.Data.NHibernateX. It is working properly in sample project. I will commit it as soon as possible. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/129069779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ratheeshpkr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/153073316", "body": "thanks @thorstenbaek. That solved the problem, but hope there will be an official release with this fix.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/153073316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gabrielsimas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211713471", "body": "I\u00b4m in, too! Let\u00b4s begin!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211713471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211909480", "body": "Yes. My Friend. It may not seem, but is still in development but\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211909480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211911031", "body": "My friend. I don\u00b4t understand. Your field type on DB is NUMBER and you passes string on variables \"values1\" and \"values2\". have you tried using string cast to decimal?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211911031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211912702", "body": "The ASP.NET CORE 1 just released yet Release Candidate. but that does not stop to get something. The Spring.net can replace Autofac as dependency injection container, quietly.\nOnly depends on us to get it ...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211912702/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211920307", "body": "Have you tried changing the HQL by Criteria or Linq to NHibernate? Criteria solve your problem, I think!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211920307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211923861", "body": "in this line result = value.Split(',').Select(float.Parse).Take(numberofelements).ToArray();\n\nAlready tried to force the \"Select float.parse\" with lambdas within float.parse (p => p ...)? Could this help?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/211923861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238673872", "body": "@Defee I\u00b4m in too! Let\u00b4s start!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238673872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238676120", "body": "@Defee And create Extension Method \"UseSpring\"... amazing!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238676120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256674930", "body": "@lahma which branch? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/256674930/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Defee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238027216", "body": "@gabrielsimas @ygorlazaro @ynauls The main problem for now is that spring.net doesn't support .netStandardLibraries. (or frameworks versions >=4,5). So solution libraries should be moved to .net core libraries. Some spring.net library dependencies haven't moved to .net core libraries yet. \n\nSo if we want to help that framework, we should migrate/adopt Common.Logging library (Common.Logging.Core is migrated). Than we should migrate a Spring.Core dll, so we will have some base features support. I'm completely in to help that migration happen.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238027216/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yahue": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238748222", "body": "amazing!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/238748222/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pa-vishal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/241197126", "body": "Thanks Steve, this works!\nLuckily, the TIBCO interfaces have not changed in newer version and just adding a 'binding redirection' config solves the problem.\n\nFor the benefit of the people who will hit by same problem, here is what I added to the app.config -\n\n`<configuration>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"TIBCO.EMS\" publicKeyToken=\"5b83db8ff05c64ba\" culture=\"neutral\"/>\n        <bindingRedirect oldVersion=\"1.0.0.0\" newVersion=\"1.0.830.14\" />\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>\n</configuration>`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/issues/comments/241197126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bbbush": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/comments/9677330", "body": "shouldn't there be a vote for a release for this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/comments/9677330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "japerr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/158079", "body": "Replaced: ((ISessionFactoryImplementor)factory).ConnectionProvider.GetConnection().ConnectionString\nWith local variable: connectionString\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-net/pulls/comments/158079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}