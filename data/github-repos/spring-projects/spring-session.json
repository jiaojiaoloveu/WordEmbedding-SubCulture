{"_default": {"1": {"kashipai": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/992", "title": "Null Pointer Exception - Spring Boot, Spring Data Redis, Spring Session", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\nI am trying to use Spring Session, Spring Data Redis with Spring Security as well as Spring boot, so that we can save the user as well as all the session data into Redis, the main objective of this would be load balancing, so that sessions will not be affiliated to a particular tomcat server, and we could take tomcats down, and requests for a particular client would still be served via other tomcats, since sessions will be available via Redis.\r\n\r\nIn the application which I am trying to do this, I have upgraded to Spring Boot Release 1.5.9.RELEASE, with Spring Security version 4.2.3.RELEASE.\r\n\r\nWe are facing road blocks when we authenticate a user, and the user navigates to second page. To be more clear I have created a sample of a similar situation here(https://github.com/kashipai/spring-security-redis-sample/tree/master/complete), I have taken the Spring guide, and modified it similar to as to how it is in our project.\r\n\r\nI have tried debugging the problem with eclipse, and I understand that the issue is to do with the deserialization of the Authentication Object from Redis, where in while fetching the entries of Authorities Object, it fails and returns null, and If in the Security Configuration there is a rule for a URL with hasAnyAuthority() then it throws a null pointer exception.\r\n\r\nAny help or pointers as to how to go about solving this issue would be very helpful.\r\n\r\nI have tried opening up an issue in StackOverflow without any solution being available for more than a week, don't know whether raising a query like this here is proper, if not please close the issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "michael-simons": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/991", "title": "Create a pair of serializers / deserializers supporting mixed versions of Spring Sessions among projects", "body": "While evaluating an idea for migrating an older project to a set of self contained systems by gradually replacing parts of it, I stumbled upon the following issue:\r\n\r\nThe project is on plain Spring 4.x and especially on an older Hibernate version. It's no option to upgrade it to Spring 5 right now. Parts of it shall be gradually replaced by not so small Spring Boot 2.0 applications with their own UI. Integration shall be done via service side includes when applicable. \r\n\r\nThe idea was to use Spring Session (Redis) to share sessions between the instances. \r\n\r\nThis poses at least two problems: First I the custom principal has probably to be duplicated or put in a shared library. Easy to solve.\r\n\r\nThe second problem is hard: In the old project I can only use Spring Session 1.3.x and when I want to use Spring Boot 2 for all new development, I'll have to Stick with Spring Session 2 (I guess it's possible to override versions until it works, but that feels to fragile). \r\n\r\nIt turns out that approach is not possible at the moment. Spring Session 1.3.x and Spring Session 2.x serialize way different objects (2.x a context AFAIK / seen).\r\n\r\nThe question or issue here is how much effort it would be, to provide a pair of  serializers / deserializers into and from JSON, that facilitate that use case. \r\n\r\nPossible solutions would be\r\n* A common JSON format that could be read and written on both sides\r\n* Only work on the 2.x side of things so that an older model could be read and written\r\n\r\nI could pursue that topic on my own, but reached out to @rwinch to see wether that is a realistic possibility or not. ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aankur": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/972", "title": "How to use spring-session and spring-security-oauth2 in an either/or relationship in securing a resource", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\nHi, \r\ni have a requirement to add Oauth to an existing implementation that uses spring-session and uses @EnableRedisHttpSession to enable sessions.\r\nThis might be related to #149 , but i am not sure.\r\n\r\nSuppose i have a protected controller at **/api/v1/test** i want to use **either** of the authentication mechanism to access the endpoint , By that i mean that a web authenticated consumer of the API or OAuth authenticated consumer  both should be able to access the endpoint.\r\n\r\nThe problem here is that both the implementation don't allow each other to work. we are able to use only one of the implementation at any given time.\r\n\r\nIf security.oauth2.resource.filter-order=2 is set WebSecurityConfigurerAdapter _order_(3) is specified only Oauth works.\r\n\r\nIf security.oauth2.resource.filter-order=3 is set WebSecurityConfigurerAdapter _order_(2) is specified only http session via cookie works.\r\n\r\nI am unable to make them both work. so i have created a sample micro-service app that displays this behavior. this behavior is  is also reproducible on the single auth service also.\r\nthe repository hosting the build is  at [https://github.com/aankur/spring-authentication-session-oauth2](url)\r\n\r\nHelp Appreciated\r\naankur/spring-authentication-session-oauth2#2", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "manojsharma20": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/967", "title": "Spring session jdbc getting password blank after successful login", "body": "Hi, I have integerated spring session jdbc but when login successfully and session is created and store in Spring_session, then password field getting blank. Password field contain after login '' something blank.\r\n\r\nI check several time, but it is the issue with spring session jdbc. When i remove the dependency, password is not getting blank anymore.\r\n\r\nPlease tell me how to fix this issue.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "espiegelberg": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/961", "title": "Community Extension: Neo4j", "body": "I\u2019ve had a chance to continue implementing a Neo4j store for Spring Session, (shamelessly) modeled after the JBC implementation. Available from https://github.com/espiegelberg/spring-session-data-neo4j-ogm, this was initially submitted as https://github.com/spring-projects/spring-session/pull/813 but is now reworked as a community extension project.\r\n\r\nWith the goal of ultimately getting it accepted as an official community extension project and using the Spring Session 2.x codebase, development is far enough along that I\u2019d like to get some feedback and begin to smooth out the rough edges. My project is undoubtedly not perfect but in asking for feedback early\u2019ish rather than late\u2019ish I\u2019m be happy to iterate and make any adjustments as needed.\r\n\r\nA few comments and questions:\r\n\r\n1) Please review my contribution; any and all feedback is appreciated. \r\n\r\n2) Looking at the MongoDB community extension project, the repo\u2019s name is spring-session-data-mongodb and the project\u2019s name is Spring Session MongoDB. I assume that means my contribution should be spring-session-data-neo4j-ogm (I\u2019d like to add the ogm, as other Neo4j implementations could use something other than OGM) with a project name of Spring Session Neo4j Ogm. Please let me know if this should be changed.\r\n\r\n3) I have what I feel is a reasonable amount of test coverage, again (seamlessly) modeled after the JDBC implementation\u2019s tests.\r\n\r\n4) My next step is to validate my contribution works in an actual application. For this, I\u2019ve created a sample spring boot web app, available from  https://github.com/espiegelberg/spring-session-data-sample-javaconfig-neo4j-ogm, to validate against. The project\u2019s README.md includes quickstart instructions, allowing anyone (including those unfamiliar with Neo4j) to get the project up and running quickly.\r\n\r\n5) Using the above sample application, I\u2019m experiencing an issue where each time the web application is hit a new session is created; resulting in a new node (ie: database record) being created in Neo4j. This is clearly incorrect, as the existing session should be found rather than a new one created. So I have some work left to do and am working to identify and resolve the issue. While I assume the issue lies within my code, the fact that Spring Session is at 2.0.0-SNAPSHOT (rather than 2.0.0.RELEASE) makes it plausible that the issue is within spring-session-core. So while I continue to investigate, in parallel I would appreciate a second set of eyes from the core Spring Session team, who undoubtedly know and understand the core project code better than I.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mayras": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/958", "title": "Crazy bug with change of session parameter \"_s\"", "body": "SessionRepositoryRequestWrapper.commitSession (line 236):\r\n\r\n\t\t\tHttpSessionWrapper wrappedSession = getCurrentSession();\r\n\r\nFor example, my previous requests was with _s=1, then I decided to get some CSS file using _s=0 (using another session), above method will returns HttpSessionWrapper for _s=1 but must for _s=0, why? because application doesn't call SessionRepositoryRequestWrapper.setCurrentSession for new parameter _s=0. It's really impossible to switch b/w sessions.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/957", "title": "SessionRepositoryFilter.doFilterInternal", "body": "SessionRepositoryFilter.doFilterInternal, line 170:\r\n\r\nwrappedRequest.commitSession();\r\n\r\nBut should be:\r\n\r\nstrategyRequest.commitSession();\r\n\r\nI'm not able to make necessary overrides", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jordillachmrf": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/949", "title": "MongoExpiringSession should calculate expireAt when getExpireAt is accessed", "body": "Using spring-session with MongoDB\r\n\r\n _MongoExpiringSession's_ **_expireAt_** field is set in the the implementation of _AbstractMongoSessionConverter's_ method \r\n    _MongoExpiringSession convert(DBObject sessionWrapper)_ \r\nand when _MongoExpiringSession_'s method _setLastAccessedTime_ is invoked.\r\n\r\nIn some circumstances when I change MongoExpiringSession's **_interval_** field through  \r\n    _request.getSession().setMaxInactiveInterval(...)_\r\n_**interval**_ field is updated in MongoDB, but the _**expireAt**_ field is not updated\r\n\r\nI think that this can be solved by calculating _**expireAt**_ field when getExpireAt is accessed. \r\nIn fact I think that MongoExpiringSession does not need this field and getExpireAt method should be something like\r\n\r\n_new Date(getLastAccessedTime() + TimeUnit.SECONDS.toMillis(this.interval));_\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alterhu2020": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/933", "title": "SpelEvaluationException: EL1008E: Property or field 'authentication' cannot be found on object of type 'java.util.LinkedHashMap' - maybe not public?", "body": "#<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\nThese are libraries i used here in springboot project.\r\n1. `spring-boot-starter-security`: 2.0.0.M6\r\n2. `spring-session-data-redis`: 2.0.0.RC1\r\n3. `spring-boot-starter-data-redis`: 2.0.1.RELEASE\r\n\r\n```\r\n       <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-security</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.session</groupId>\r\n            <artifactId>spring-session-data-redis</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-redis</artifactId>\r\n        </dependency>\r\n```\r\nAnd the spring security config code as below\r\n```\r\n@EnableWebSecurity(debug = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    @Bean\r\n    public AuthenticationManager authenticationManagerBean() throws Exception {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    @Override\r\n    public void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        UserDetails userDetails = User.withDefaultPasswordEncoder()\r\n                .username(\"test\").password(\"test\").roles(\"USER\").build();\r\n        auth.inMemoryAuthentication().withUser(userDetails);\r\n    }\r\n//..........................\r\n}\r\n```\r\nAnd the spring session config code as below\r\n```\r\n@EnableRedisHttpSession\r\npublic class CustomSessionRedisConfiguration {\r\n\r\n    /**\r\n     * @return\r\n     */\r\n    @Bean(name = {\"springSessionDefaultRedisSerializer\"})\r\n    RedisSerializer<Object> defaultRedisSerializer() {\r\n        GenericJackson2JsonRedisSerializer result = new \r\n       GenericJackson2JsonRedisSerializer(new ObjectMapper());\r\n        return result;\r\n    }\r\n}\r\n```\r\nI had read the official example code to make the redis sesion stored into json format, as showed in this config file[https://github.com/spring-projects/spring-session/blob/master/samples/boot/redis-json/src/main/java/sample/config/SessionConfig.java](https://github.com/spring-projects/spring-session/blob/master/samples/boot/redis-json/src/main/java/sample/config/SessionConfig.java), but it still have no luck. All they show the below error message when I open the main url http://127.0.0.1:9999/api/\r\n```\r\norg.springframework.expression.spel.SpelEvaluationException: EL1008E: Property or field 'authentication' cannot be found on object of type 'java.util.LinkedHashMap' - maybe not public?\r\n\torg.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:213)\r\n\torg.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:100)\r\n\torg.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:87)\r\n\torg.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:52)\r\n\torg.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)\r\n\torg.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:115)\r\n\torg.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:240)\r\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository$PrincipalNameResolver.resolvePrincipal(RedisOperationsSessionRepository.java:859)\r\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository$RedisSession.<init>(RedisOperationsSessionRepository.java:707)\r\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository.getSession(RedisOperationsSessionRepository.java:448)\r\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository.findById(RedisOperationsSessionRepository.java:409)\r\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository.findById(RedisOperationsSessionRepository.java:245)\r\n\torg.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.lambda$getRequestedSessionId$0(SessionRepositoryFilter.java:359)\r\n\tjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)\r\n\tjava.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1351)\r\n\tjava.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)\r\n\tjava.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)\r\n\tjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)\r\n\tjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\r\n\tjava.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)\r\n\tjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tjava.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)\r\n\torg.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.getRequestedSessionId(SessionRepositoryFilter.java:360)\r\n\torg.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.getSession(SessionRepositoryFilter.java:303)\r\n\torg.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.getSession(SessionRepositoryFilter.java:196)\r\n\tjavax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:231)\r\n\torg.springframework.security.web.debug.DebugRequestWrapper.getSession(DebugFilter.java:175)\r\n\tjavax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:231)\r\n\torg.springframework.security.web.context.HttpSessionSecurityContextRepository.loadContext(HttpSessionSecurityContextRepository.java:110)\r\n\torg.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:100)\r\n\torg.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\torg.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n\torg.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\torg.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\torg.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\r\n\torg.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\r\n\torg.springframework.security.web.debug.DebugFilter.invokeWithWrappedRequest(DebugFilter.java:90)\r\n\torg.springframework.security.web.debug.DebugFilter.doFilter(DebugFilter.java:77)\r\n\torg.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)\r\n\torg.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)\r\n\torg.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:146)\r\n\torg.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81)\r\n\torg.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\r\n\torg.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n```\r\nGuys, do you have any guide how to use the redis jackson in spring-session? thanks\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "philippeboyd": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/927", "title": "SpringSessionBackedSessionInformation : why is the session not saved as a field?", "body": "I'm facing an issue where I would like to have access to the session itself in the `SpringSessionBackedSessionInformation`. However, when the session is passed as an argument to the constructor, it is not saved as a a field with a getter. So my alternative was to create my own `SpringSessionBackedSessionRegistry` and `SpringSessionBackedSessionInformation` class but the latter is package private...\r\n\r\nMy goal here is to have access to certain attributes in the session besides EXPIRED_ATTR and SPRING_SECURITY_CONTEXT.\r\n\r\nUsing version `2.0.0.RC1`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vpavic": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/917", "title": "Consider adding support for multiple sessions for a single user", "body": "As a part of simplifications of integration with the Servlet APIs that was done in #906, the existing support for multiple sessions for a single user was removed. We should consider re-introducing this feature based on the new API while also taking into account the reactive support.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/831", "title": "Hazelcast implementation of `ReactorSessionRepository`", "body": "We should provide a Hazelcast based implementation of `ReactorSessionRepository`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/590", "title": "Consider adding event publishing hooks in `JdbcOperationsSessionRepository`", "body": "Due to limitations of the underlying data store, `JdbcOperationsSessionRepository` has no session event publishing capabilities. However, since many projects do include a publish-subscribe broker of some sort, it could make sense to add hooks that would make use of that broker to route events to all members of a cluster.\n\nWith this change, `JdbcOperationsSessionRepository` would create session events and then pass them to strategy of some sort, which would be implemented by users if they wish to enable event publishing. `JdbcOperationsSessionRepository` would also implement some sort of message listener contract which would be responsible for using `ApplicationEventPublisher` to publish events locally.\n\nWhat are your thoughts on this @rwinch? If you're open to this idea I'd like to implement it in time for 1.3.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/590/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/003996a1b3e9c720b8b54236362bbb5d070693cd", "message": "Upgrade Gradle to 4.5.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/13c0e325b4fb09dc763d1f88ea7735eb7a539adf", "message": "Adapt to Spring WebSocket configuration deprecations\n\nCloses gh-994"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7acdeffe2246a03a755b944c97b9677bfbd09bae", "message": "Remove outdated sample docs\n\nCloses gh-989"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/de03b20619c8c68d64b82a5b52a4b75fbbc9efe1", "message": "Upgrade Spring Boot to 2.0.0.RC1\n\nCloses gh-988"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/becee53dbf10426c9832a5e169f6ed0ced6d6b11", "message": "Restore `CookieSerializer.CookieValue` constructor visibility\n\nCloses gh-978"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4eb64e81404f6f081fbdbea54ded7567620632e7", "message": "Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e520ea237d428458ff46039a3fcb5009c83ee5bd", "message": "Release 2.0.1.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/175e05dcda823b38a6cb80db910027bb033e8cd5", "message": "Update integration tests\n\nThis commit updates TestContainers dependency and versions of Docker images used in integration tests."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/bb427ff1af0a8e8444023570d02406ece8f37245", "message": "Upgrade dependencies"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0a65b823739312846bea30eadd0c9be30fee17bc", "message": "Upgrade Spring Security to 5.0.1.RELEASE\n\nCloses gh-974"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e25c64efae2801e62767f1bbb216fb19dbcba073", "message": "Upgrade Spring Data to Kay-SR3\n\nCloses gh-975"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/43fcba65c4b2bfba700e9505e89aae3f39ba83e5", "message": "Ignore SQL Server integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1cc2c83f36631cc5193787958dcc5bfe30f3033a", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0941358807425626c638534a62b06c9eaf7550d2", "message": "Upgrade Spring Framework to 5.0.3.RELEASE\n\nCloses gh-973"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7d3698515e53df7b500f5b750ef24cc0404fc3b0", "message": "Upgrade Reactor to Bismuth-SR5\n\nCloses gh-976"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d3826034454ac8cd341bffc3db768b0c783535c5", "message": "Upgrade dependencies\n\nThis commit harmonizes project dependencies with Spring IO Platform Cairo levels."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/22e3b5ce38777fd028c78411e727772d07198eda", "message": "Update integration tests\n\nThis commit updates TestContainers dependency and versions of Docker images used in integration tests."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ebd4b349d238f21e4c3d1141fe920634442159d7", "message": "Fix run commands in samples documentation\n\nCloses gh-969"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ffa1bca898108d5105beee82c88cb96ac0e7cc87", "message": "Update Redis configuration to use bean classloader\n\nSpring Session 2.0 made changes to Redis configuration facilities so that the `RedisTemplate` used by `RedisOperationsSessionRepository` isn't exposed as a bean anymore. This has a consequence that bean `ClassLoader` isn't applied automatically which causes issues in Spring Boot applications that use DevTools.\n\nThis commit restores the previous behavior by updating Redis configuration classes to implement `BeanClassLoaderAware` callback and apply the application `ClassLoader` to `RedisTemplate`. The analogous change was made to reactive Redis configuration.\n\nCloses gh-968"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a9b3ce034b0e8e7ffcfa484003ac0cf8323c573c", "message": "Update readme"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1ba434a3572ad4219d463202a471f0163f1e7b29", "message": "Document `ReactiveMapSessionRepository` map requirements\n\nCloses gh-842"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/45807998f62d8a22fc6f548c798ba19fd40ddeda", "message": "Update documentation for 2.0\n\nCloses gh-199\nCloses gh-826\nCloses gh-878\nCloses gh-893"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2f49a8ac25bb33471be255340cb90ea33be2b605", "message": "Ignore SQL Server integration tests\n\nThis commit temporarily disables SQL Server integration tests due to frequent container startup failures on Jenkins.\n\nSee gh-959"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e364511c7ee83b2ebd718b2e8f0fb894ee563164", "message": "Polish contribution\n\nCloses gh-965"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1edce117aae86931b73cef7cb34df9a6b45474fd", "message": "Fix Redis change session id handling\n\nThis commit updates logic around changing session id in `RedisOperationsSessionRepository` to properly handle updates for new sessions i.e. ones that haven't been saved yet.\n\nPreviously, the logic skipped both Redis rename operation and replacement of session id within the current session holder object, which led to no such key errors on subsequent save operation which still observed the session id as changed.\n\nCloses gh-962"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c0f4c7f38134ca3e9c29525e8ca1aa3d5e93ca6a", "message": "Fix reactive Redis change session id handling\n\nThis commit updates logic around changing session id in `ReactiveRedisOperationsSessionRepository` to properly handle updates for new sessions i.e. ones that haven't been saved yet.\n\nPreviously, the logic skipped both Redis rename operation and replacement of session id within the current session holder object, which led to no such key errors on subsequent save operation which still observed the session id as changed.\n\nCloses gh-954"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7fa07b2973781b8b9b19ff2aec065a3fbdf175b5", "message": "Upgrade Gradle to 4.4.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3252b38c870f10f8649a13f93666591691796baf", "message": "Add Microsoft SQL Server integration tests\n\nCloses gh-959"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c4daeff3d81bab2d5b885d61603159b4cb31b9ef", "message": "Update integration tests\n\nThis commit updates TestContainers dependency and versions of Docker images used in integration tests."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2fccca1158db7339f7424b358aea4abce2711655", "message": "Upgrade dependencies\n\nThis commit harmonizes project dependencies with Spring IO Platform Cairo levels."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/81798c36f6b3f4175c1f55dc4488f4b1e5430240", "message": "Upgrade Gradle to 4.4"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/27283e29d5c6c5620ee85b9de266cdcb945020ac", "message": "Optimize `HazelcastSessionRepository.SessionUpdateEntryProcessor`\n\nCloses gh-947"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/77bb9dfdb1bde6e1adce3bdcd563ad5332aca2ac", "message": "Upgrade Spring Boot to 2.0.0.M7\n\nCloses gh-930"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/280d5c5a770d9c8d29c3570f28341cdb8c157e1d", "message": "Refactor JDBC configuration\n\nCloses gh-942"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6a370b1ef81da01dc9099ec14acb9f50f381e402", "message": "Refactor Redis configuration\n\nCloses gh-941"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/41de1b087a79a95263eeb61f4e87b393719733e4", "message": "Refactor Hazelcast configuration\n\nCloses gh-938"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6188fe68b7779bb5a141dd40d598161870fe6027", "message": "Improve session event handling\n\nThis commit removes constructor that takes session id instead of session object for the entire `AbstractSessionEvent` hierarchy.\n\nThe ability to create `AbstractSessionEvent` instances with no underlying session object leads to NPE when interacting with `HttpSession` obtained from `HttpSessionEvent`.\n\nSee gh-499\nCloses gh-939"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/97ad0311e2e7554660b79b4da83a7399182a7e1a", "message": "Upgrade Spring Data to Kay-SR2\n\nCloses gh-932"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/702bc37a999a0455a2f56fb6032f24f0fdf73d67", "message": "Upgrade Spring Framework to 5.0.2.RELEASE\n\nCloses gh-925"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/17e56dda1884b50bbe098441ea70fb9f9bc5ca9d", "message": "Polish configuration classes"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f5912da089e02f727590558f5ffffca6ea800a6a", "message": "Optimize `HazelcastSessionRepository` write operations\n\nThis commit introduces several optimizations to write operations in `HazelcastSessionRepository`.\n\n - when storing a new session, `IMap#set` is now used instead of `IMap#put`\n - when updating an existing session, `IMap#executeOnKey` and a dedicated `EntryProcessor` are used\n\nTo make these two changes possible, internal `HazelcastSession` now adds a flag to determine which of the two mentioned write scenarios to use, and also tracks a delta of session attributes in order to optimize updates.\n\nCloses gh-850"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/bff8ce3c03f71a0680d69058c0c4f9ab1f2b79c6", "message": "Polish samples"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a3803e9e1f54796e05fa4e69cecbd53cf3ac93e1", "message": "Update integration tests\n\nThis commit updates TestContainers dependency and versions of Docker images used in integration tests."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3fcdc9ebceb195299317b2298fdc8d808ed2cc31", "message": "Upgrade dependencies\n\nThis commit harmonizes project dependencies with Spring IO Platform Cairo levels."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/36d157a65845983d6e2021412ab9fef062ed851d", "message": "Polish default Redis namespace handling\n\nSee gh-919"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f28ab07b9a6404db08e9b38952c213c99c38558e", "message": "Migrate `SpringJUnit4ClassRunner` -> `SpringRunner`"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/42a6001aae66db2f7ee51f02fe06dbfba8f1519f", "message": "Upgrade Reactor to Bismuth-SR4\n\nCloses gh-929"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/fc4d2238bc86c5c6cc5547353f643204bf9ff69d", "message": "Rename `MapReactiveSessionRepository` to `ReactiveMapSessionRepository`\n\nCloses gh-928"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/36d349f3286a345c0330bfae468337adfaa0f75b", "message": "Polish contribution\n\nCloses gh-919"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4c9fbd5b6b870483cf3c17195d0dee7ee7829ef4", "message": "Migrate WebFlux sample to Boot\n\nCloses gh-923"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f2ba773ec24b70c2d043b73f0493e2108a57313f", "message": "Upgrade Spring Boot to 2.0.0.M6\n\nCloses gh-916"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/647dd7c7bb8a73f04e55125681e89fc055f81192", "message": "Add license file"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/03f6611e04a20cd4f3440e3d4262560f71e10863", "message": "Update integration tests\n\nThis commit updates TestContainers dependency and versions of Docker images used in integration tests."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/fff1d830976d9436133bfc661a28bb1ea18446d4", "message": "Upgrade dependencies\n\nThis commit harmonizes project dependencies with Spring IO Platform Cairo levels."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/91d4a5bfca26b1b98dc22c213995375153446201", "message": "Add `HeaderHttpSessionIdResolver` factory methods for commonly used headers\n\nCloses gh-706"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/34f29cf36c7358595d7aab354977898646cc4627", "message": "Improve Hazelcast configuration\n\n This commit improves Hazelcast configuration by introducing `@SpringSessionHazelcastInstance` qualifier for explicitly declaring a `HazelcastInstance` to be used by Spring Session. This is in particular useful in scenarios with multiple `HazelcastInstance` beans present in the application context.\n\n Closes gh-912"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7e26897ec2679e72e78280fc07a14e59ac57a5f3", "message": "Add support for configuring Redis session cleanup cron"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9ea1fb9af13352ea1f06d1086e2706a9133cd6cd", "message": "Upgrade Spring Data to Kay-SR1\n\nCloses gh-903"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2c664d1d9ef22f7c87bdf947b65d9592c8e7bcfa", "message": "Move JDBC qualifier annotations to shared package\n\nCloses gh-909"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/97698fd590ab2b7be34bf303ec2d57af3d635dd6", "message": "Add support for configuring JDBC session cleanup cron"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/fe3f40c6f418de3998059dd06ff1b4184eff0df2", "message": "Harmonize Redis configurations\n\nThis commit improves reactive Redis configuration by adding support for connection factory qualifier and Redis operations resolver annotations."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f8583bb02f2d9cc7b497d72809bc1f0c566b1794", "message": "Add missing `@Override`"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5df555cd53527519bfeb71d90fa87ed96b13e033", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6f05c84aa7c1f7c4efcf2c0d3c20709a79b0785f", "message": "Rename `HttpSessionStrategy` to `HttpSessionIdResolver`\n\nThis commit harmonizes `HttpSessionStrategy` with Spring Framework's `WebSessionIdResolver` by renaming it to `WebSessionIdResolver`."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/cd394bbe10c98fdb3f8e5049a88d108528be98ff", "message": "Align `HttpSessionStrategy` with `WebSessionIdResolver`\n\nThis commit simplifies `HttpSessionStrategy` API by aligning it with Spring Framework's `WebSessionIdResolver`. As a part of this, support for managing multiple users' sessions has been removed.\n\nCloses gh-275\nCloses gh-362"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2ecb2e60c058465eb04e3cdbe6b936f38ca3f7c9", "message": "Improve Redis configuration\n\nThis commit improves Redis configuration by introducing `@SpringSessionRedisConnectionFactory` qualifier for explicitly declaring a `RedisConnectionFactory` to be used by Spring Session. This is in particular useful in scenarios with multiple `RedisConnectionFactory` beans present in the application context.\n\nRedis configuration is simplified and no longer registers a Spring Session specific `RedisOperations<Object,Object>` bean with the application context.\n\nUsers are however able to obtain `RedisOperations<Object,Object>` instance used by Spring Session using newly introduced `@SpringSessionRedisOperations` annotation."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d04a95ebfbe5169a9bf358a7166a399a7cf9fcf2", "message": "Upgrade Spring Framework to 5.0.1.RELEASE\n\nCloses gh-902"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/858b52235e8d112d027b14b6ea169d2e92f10dfd", "message": "Upgrade Reactor to Bismuth-SR3\n\nCloses gh-905"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/00ede81665d278937beae66957fec0bc1097946a", "message": "Harmonize naming of reactive components\n\nCloses gh-897"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7d61c5496ae7c84ab86403a937fe4cfcd67743d3", "message": "Fix deprecation warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3492bc01d2c9bf6fdc2d2bc140ba49f8c570a548", "message": "Upgrade Spring Boot to 2.0.0.M5\n\nCloses gh-892"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e08ac357dd8f75f94a1f7f15c60af83576ed5376", "message": "Upgrade spring-build-conventions to 0.0.5.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3f670050efcf08b88b829d6513d9e279405ab799", "message": "Update integration tests\n\nThis commit updates versions of RDBMS and Redis Docker images used in\nintegration tests.\n\nCloses gh-894"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e3b61d25bb3bad8268582e536fa54fef4e00f55c", "message": "Improve JDBC configuration\n\nThis commit improves JDBC configuration by introducing `@SpringSessionDataSource` qualifier for explicitly declaring a `DataSource` to be used by Spring Session. This is in particular useful in scenarios with multiple `DataSource` beans present in the application context.\n\nAs a consequence, JDBC configuration is simplified and no longer registers a Spring Session specific `JdbcTemplate` bean.\n\nCloses gh-863"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/19b8effa415a5dbb02d0090bd600d90f5ed9987c", "message": "Add Redis implementation of `ReactorSessionRepository`\n\nCloses gh-816"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9f5f7540d2ebd27523632074429b4b7c4248f42b", "message": "Fix Users sample app navbar\n\nCloses gh-885"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/eb8c22939c7aab224198289ece8034b577b5e138", "message": "Upgrade Gradle to 4.2.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/45cfa1e9a414cec5c729e07ecc32b570ffc5466a", "message": "Upgrade spring-build-conventions to 0.0.4.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/99221e0948da04955c7bde5883862812ccea350d", "message": "Upgrade dependencies\n\nThis commit harmonizes project dependencies with Spring IO Platform Cairo levels."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/41cf2ef152c945f257fa8e38be3d12d18b11ecb3", "message": "Update documentation to reflect preference for Lettuce\n\nSee gh-886"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c51bce4777c98b80c5c50eef78743743eab8867f", "message": "Use Lettuce driver for integration tests\n\nCloses gh-886"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/b6f1184c4c0962d878585a3eaaf969f8c1d73ee3", "message": "Upgrade dependencies\n\nThis commit harmonizes project dependencies with Spring IO Platform Cairo levels."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c69a8b8762a0e4108f5e92b33f93c8c6fe332170", "message": "Improve JDBC data store schema scripts\n\nCloses gh-884"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/99fb17a66befc8382d8348cd9717f02edc606794", "message": "Adapt to Spring `WebSession` API changes"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/937b2fcbf159c1239ee708a02339870facc774bc", "message": "Upgrade Gradle to 4.2"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9c5a7e9156effc71aa0b175c1903825b621586bc", "message": "Upgrade Spring Boot to 2.0.0.M4\n\nCloses gh-877"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4deccd3ad076dcb914477494f89b3524c357a909", "message": "Upgrade Gradle to 4.1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/da058e9510a0f9f35525e7df011668b75a7abd15", "message": "Upgrade dependencies to latest snapshots\n\n- Reactor Bismuth-BUILD-SNAPSHOT\n- Spring Framework 5.0.0.BUILD-SNAPSHOT\n- Spring Data Kay-BUILD-SNAPSHOT\n- Spring Security 5.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d28ca4658b5471f4ffcffdbf93238e230e510922", "message": "Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/eb7bcc5eebc4ca7c5b391d26534c0228a45439bd", "message": "Harmonize `ReactorSessionRepository` API\n\nThis commit renames the `ReactorSessionRepository#delete` to `deleteById` in order to make API consistent with `SessionRepository`."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/188e5ba4e090e38fb31ca881f01f4586dd8ea9d7", "message": "Optimize JDBC session cleanup SQL statement\n\nThis commit improves session cleanup handling in  `JdbcOperationsSessionRepository#cleanUpExpiredSessions` by optimizing the used SQL statement. This is done by calculating the session expiry time when persisting the session, which in turn allows the cleanup SQL statement to be more index-friendly.\n\nCloses gh-847"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1e46630467e6af4fffec8ddce4bbfd4dbe78eda8", "message": "Remove `MapReactorSessionRepository` default constructor\n\nThis commit removes the default `MapReactorSessionRepository` so that the users are required to explicitly supply the `Map` used to store the sessions."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/b72c600884ffa8fdbc9a6534e9a5eef596bc74bd", "message": "Upgrade dependencies to current milestones\n\n- Reactor Bismuth-M4\n- Spring Framework 5.0.0.RC4\n- Spring Data Kay-RC3\n- Lettuce 5.0.0.RC2"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/274aec1691c60146c558194bf78d97235753942d", "message": "Fix Boot based samples"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0cdee25405c405c38c3a612f288fc5470674b35e", "message": "Remove `MapSessionRepository` default constructor\n\nThis commit removes the default `MapSessionRepository` constructor so that the users are required to explicitly supply the `Map` used to store the sessions."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8e3371aed9e6a92b79298a993f0974096191bb1a", "message": "Allow easier customization of cookie max age logic"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/63b67a501d0b5f7ce71d3bddc9f6ca247ce02355", "message": "Update guides for Redis based samples"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2b0431eae4acf7c9a9ec1c24e524c96ec78ae67f", "message": "Use TestContainers for Gretty integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/04ec08601422dc1bb3e5c7faaa6eabe5d3af2a22", "message": "Use TestContainers for integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/23c6c7cf31c094d16aa03b22bd072b4ca2610800", "message": "Upgrade Spring Boot to 2.0.0.M3\n\nCloses gh-841"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c8c5fae6780c689b1f4b057e02105819a8df695e", "message": "Polish build"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f4a58622e484fc23cb310f641d1fff9ff1ad5db6", "message": "Upgrade dependencies to latest snapshots\n\n- Reactor Bismuth-BUILD-SNAPSHOT\n- Spring Framework 5.0.0.BUILD-SNAPSHOT\n- Spring Data Kay-BUILD-SNAPSHOT\n- Spring Security 5.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/99a2b079ac07e9dadbbbd3fc50cdec2219a41b9c", "message": "Upgrade dependencies to current milestones\n\n- Spring Framework 5.0.0.RC3\n- Spring Data Kay-RC1\n- Spring Security 5.0.0.M3"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9120151692e266d9d270763918e2c72b6bae0c3c", "message": "Polish \"Add WebFlux Support\"\n\nCloses gh-683"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1d247aa96fbe2cba1198e7849781f9aead15ca25", "message": "Align Checkstyle config with spring-build-conventions"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c00d6a7bf21f319c9a204fc931ab2d232d0477a6", "message": "Apply correct convention plugin for modules"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c0df3bf28bd6df41974cb3267df4eec28f32efab", "message": "Fix deprecation warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1b8c9838a429ac91186f7946af8fda3202a89e24", "message": "Fix unchecked operations build warning"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8a1b454121351cc7c18a05a44e8c0c252a255399", "message": "Fix javadoc build warning"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ef69c8169a982b0d471d8010d5524ae4bc28ce5a", "message": "Polish dependencies\n\nThis commit removes needless dependency exclusions.\n\nSee gh-824"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5845a9c46a98d77cb72354db9788278f1d4b4dbd", "message": "Improve dependency management\n\nThis commit improves dependency management with the following changes:\n\n - `spring-session-core`: move `javax.servlet-api` from `provided` to `optional` configuration due to introduction of reactive support\n - `spring-session-data-redis`: remove Redis driver from `compile` configuration\n - Boot samples: delegate Redis driver choice to `spring-boot-starter-data-redis`\n - polish `test` configuration dependencies"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/05a3f59813aedf360e5e61b206629eaa78f2312d", "message": "Simplify Hazelcast sample"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/47a7a35aa425640c0f34f806bc05fadd59e92e95", "message": "Remove use of `Assert#notNull` from core components\n\nFixes gh-820"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/04b4fe3e3bf88e542288e2363a7f961918be431f", "message": "Fix Checkstyle violations"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/031541bc054a1adbead413758c67ff0ad3662f80", "message": "Fix Checkstyle violations"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/084e3428fbf510b85f9d299993a923ec9c07d29b", "message": "Move `SessionEventRegistry` back to integration-test sources\n\nFixes gh-810"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/b321ff02f081c7e1c42e3db3b65678571fb09597", "message": "Revert \"SessionRepository.save returns S\"\n\nSee gh-809"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f7e07b7f6b5b57b160d43354693b8f1e4ca695e2", "message": "Improve `Session` API to use Java 8"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4cf26d9c361f3f5d70dbf06dbb0826f8d2735f31", "message": "Move `ExpiringSession` API into `Session`"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a848df123579b36368147550529fbfa9e5e548cb", "message": "Replace explicit type arguments with diamond operator"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3c52298c477a89596c44833da9c499661d620225", "message": "Add support for configuring default `CookieSerializer` using `SessionCookieConfig`\n\nFixes gh-87"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7d52c8717359fc68d08091af6365e66e1f3d6143", "message": "Improve Spring Boot based samples\n\nStarting with 2.0.0.M1, Boot provides auto-config support for Lettuce.\n\nSee gh-790"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e3c6fb67f20eded1cbfbb02fcfe4a6082e4bdd46", "message": "Replace `StringBuffer` usages with `StringBuilder`\n\nFixes gh-718"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/79f187ddd6f00e31360171938d166e95b6a04ee4", "message": "Upgrade samples to Boot 2.0.0.M1\n\nFixes gh-782"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/22f4b0bc9de321cae8ab88bb9d4a8aaa63e3dee0", "message": "Update minimum requirements"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c5ea626d03f59b36f02700e5128bcb9480709d7c", "message": "Improve layout of community extensions doc section\n\nFixes gh-786"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d067cd1e661103016b453d851082e5f0bd578937", "message": "Remove obsolete .gradle files\n\nFixes gh-785"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/dd4983f33e62146ac3f18b723b34a2450ea7b02a", "message": "Improve samples logging"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e9e5d8eda6ca4da53a08623c8768b54bdb7e1715", "message": "Parameterize `SpringSessionBackedSessionRegistry`"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2b2f385d5f86694ddf994df270ae4ce42088bc5c", "message": "Use `spring-jcl` instead of `commons-logging`"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/86e892c806e126ca4a9e21b3fb69a1b91265d7af", "message": "Improve Spring Boot based samples\n\nFixes gh-693"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/448133494f0729441785d2c07a9b2c37a0650305", "message": "Replace anonymous types with lambda"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e0fc9e92baf9b98d344579cb4926ac255d15329b", "message": "Simplify `Map.get` and conditional calls"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5b4d0c40d8ba9b52c6f61e0abb12e8bb8ba35853", "message": "Replace explicit type arguments with diamond operator"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/63097e9d826984e2ce5bdd247d0c3ee0cbff5f6f", "message": "Fix broken documentation links"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2ebbe762f0211f7b2f11ae5c4e6bc454ecf56d82", "message": "Downgrade Spring Boot to 1.5.3.RELEASE\n\nFixes gh-710"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0312c31a42698e23e9a83ce7c7849fefb9af2115", "message": "Use explicit constraints in JDBC schema scripts\n\nFixes gh-750"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/815cbf4ee8b288862024ba6f7fa29e64b4a83dc5", "message": "Update `DefaultCookieSerializer` to use base64 by default\n\nFixes gh-736"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9b30726805dd0d190d6532891bac063950e5d956", "message": "Fix typo in .gitignore"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/aeb182712c17a5e1206b5fab7ee85b2c1c81076f", "message": "Remove logging for \"Skip invoking on\" response committed\n\nFixes gh-734"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3f239b49565f1a1ed044f0a09ff564b4cbbe2a72", "message": "Fix Spring Boot deprecation warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/dc3b6ba6f1109897aa6215d3c6a107105d8b69ac", "message": "Fix Mockito deprecation warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/012f121c48833673efc1b7fc81d5c5942ecc1c7c", "message": "Prevent NPE  in`MongoOperationsSessionRepository` when creating session if max inactive interval is undefined\n\nFixes gh-716"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c0cc15679c6cb5bfeac586e8331ffb70852b6464", "message": "Improve Hazelcast support documentation\n\nFixes gh-680"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/862659b9b7ab83c341ef264b705806383fac4aca", "message": "Restructure samples"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/41fbc90ec278387f4759c1f3ae68cf572f537d50", "message": "Fix Gradle deprecation warnings"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3cc37843133ba7c4594317d8a028a4711fa7844b", "message": "Remove deprecations\n\nThis commit removes `SessionMessageListener` and `CookieHttpSessionStrategy#setCookieName` which both were deprecated since `1.1.0`, and `SessionEntryListener` which was deprecated since `1.3.0`.\n\nFixes gh-675"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/94fc80a8f0c2545f25b5d8f203b01f41dbd234c3", "message": "Use capitalized words for `HeaderHttpSessionStrategy` default header name\n\nFixes gh-173"}], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/557", "title": "Introduce IndexResolver", "body": "<!--\nThanks for contributing to Spring Session. Please provide a brief description of your pull-request and reference any related issue numbers (prefix references with #).\n-->\n\nThis commit introduces `IndexResolver` as a strategy interface for resolving index values in `FindByIndexNameSessionRepository` implementations.\n\nThis PR assumes `IndexResolver` implementations are single purpose, meaning implementations support single index name. Each `FindByIndexNameSessionRepository` implementation then in turn defines its set of supported `IndexResolver`s. For this purpose, a convenience `CompositeIndexResolver` is provided.\n\nOut of the box the `PrincipalNameIndexResolver` is provided as the driver for this improvement, however each `FindByIndexNameSessionRepository`` implementation can easily provide own resolvers, depending on capabilities of backing technology.\n\n@rwinch Let me know what are your thoughts on this approach before I proceed to other TODOs:\n- [x] unit tests\n- [x] use `IndexResolver`s in `FindByIndexNameSessionRepository` implementations\n\nThis resolves #376.\n\n<!-- Please also confirm that you have signed the CLA by put an [X] in the box below: -->\n- [X] I have signed the CLA\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16260861", "body": "@rwinch would you be interested in accepting a contribution that would add Checkstyle to Spring Session to ensure code style consistency across the project and address issues such as this one?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16260861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281594", "body": "@rwinch - great, I'll put together a PR during the next week or so.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281761", "body": "@rwinch IntelliJ IDEA user here so that one might be a bit outside of my regular domain :)\nI'll look into it if and when I get some time, unless someone beats me to it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860511", "body": "I initially considered implementing it that way for the same reasons, but that would mean `SessionExpiredEvent`s wouldn't be fired.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860611", "body": "Agreed, not sure how and why this one slipped through as `public`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53861569", "body": "OK, this approach also covers the cleanup strategy then.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53861569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53863096", "body": "Ahh, I see... you'd like to have something similar to way Security's `JdbcDaoImpl` provides SQL customization options.\n\nI also considered this initially, but opted to go the route seen in Integration's `JdbcMessageStore`.\n\nMy reasoning was that in practice the `Session` object is closer to Integration's `Message` than it is to Security's `UserDetails` due to `Session` being entity which is internal to the framework unlike `UserDetails` which is often derived and constructed from some application domain entity provided by users. That's why the `enum` approach seemed like a good approach to me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53863096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53865045", "body": "@artembilan stolen is such a harsh word :)\n\nPrevious comment clearly stated the origin of the approach taken here, as well as [this comment](https://github.com/spring-projects/spring-session/issues/364#issuecomment-183479733) did in the original issue. If something is a valid and proven approach to a given problem why not reuse it?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53865045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53867309", "body": "No harm done @artembilan, that's why I used :) in the previous comment.\nWe're on the same page.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53867309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54490517", "body": "Certainly not, it seems like IntelliJ's Gradle plugin's messing with Gradle conf.\nI remember fixing something similar in `settings.gradle` prior to pushing the initial commit but it slipped in the updated commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54490517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54528646", "body": "Yeah, I figured that out myself in the meantime.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54528646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54530005", "body": "Ok, so assuming we take the Strings for queries route, you'd like to also remove the possibility of changing just table prefix?\n\nIn that case, users would need to provide custom queries just to the change table prefix. Consider the case where there are multiple apps sharing the same database schema - in order to avoid conflicts only the table prefix needs to be changed. Forcing users to provide custom queries in that case is a configuration overkill IMO.\n\nIf we keep table prefix option, we need some sort of `getQuery` method, and a cache would certainly be beneficial to prevent `String` manipulation on each `SessionRepository` operation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54530005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54614177", "body": "@rwinch we're very often in situation where customer owns the database and all we get is a schema with limited privileges, meaning we have multiple services that share the same schema. I agree it's a not great situation but its completely out our control.\n\nTherefore I think allowing users to customize the table prefix is not some exotic requirement but rather a failry common thing we heavily rely on with other frameworks we use regulary:\n- [Spring Integration](http://docs.spring.io/spring-integration/docs/4.2.5.RELEASE/reference/html/jdbc.html#jdbc-message-store-generic)\n- [Spring Batch](http://docs.spring.io/spring-batch/trunk/reference/html/configureJob.html#repositoryTablePrefix)\n- [Quartz Scheduler](http://quartz-scheduler.org/generated/2.2.1/html/qs-all/#page/Quartz_Scheduler_Documentation_Set%2Fre-jtx_jdbc_jobstoretx_configuration.html%23)\n\nNot to drag this any further, I'll update the PR soon according to your preferences but expect another PR to provide the table prefix customization as soon as you merge this one :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54614177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54754232", "body": "@rwinch yes, of course, that would be great.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54754232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57279259", "body": "Good thing you pointed this out, `@DirtiesContext` can be removed now.\n\nI've had issues similar to ones described in #396 with my initial implementation, since I had static port config for embedded MongoDB instance.\n\nMoving to randomly assigned port fixed this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57279259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57588611", "body": "Ahh yes, we can. I'll change the `RowMapper` to update the deserialized delegate with `lastAccessedTime` from column. It will also minimize the impact in other places.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57588611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57902478", "body": "You're absolutely correct. To make my oversight more comical I've just used Boot's H2 console auto-configuration in one of my projects a few days ago :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57902478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57902626", "body": "On a sidenote - websocket sample could also be changed to use auto-configuration for H2 console.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57902626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57903031", "body": "Yes, we can. I've copied the class from the original boot sample (together with formatting) and added what I needed for this sample.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57903031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60068404", "body": "Why a random `@Autowired` method?\nSimply overriding the default constructor and using the desired setter inside it is much cleaner and more understandable.\n\nAlso separate config for each test are preferred.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60068404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60068774", "body": "This shouldn't be an integration test.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60068774/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77401890", "body": "Agreed @rwinch, that scenario came across my mind today as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77401890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78590110", "body": "This description is actually taken from the `RedisOperationsSessionRepository`. IMO such wording is used to make emphasis that `defaultMaxInactiveInterval` is used during creation of events in `SessionRepository#createSession`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78590110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74002740", "body": "Is Ingalls milestone release really required here? Other Spring Data dependencies are on Hopper release train level ATM, so we should use `1.4.2.RELEASE`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74002740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003152", "body": "You shouldn't be using internals from other repository implementations. There is a PR to extract and generify session index resolving (see #557) however for now you should just copy `PrincipalNameResolver` into your repository.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003213", "body": "`CassandraOperations` would be more test-friendly here.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003587", "body": "IMO we should avoid depending on Guava.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003634", "body": "Same as [here](https://github.com/spring-projects/spring-session/pull/589/files#r74003587)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003849", "body": "Since this is an integration test, you should name it `CassandraSessionRepositoryITest` to be consistent with other integration tests.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74003849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90098179", "body": "@mp911de Yes, I agree with you and have expressed similar concerns (see [comment](https://github.com/spring-projects/spring-session/pull/589#issuecomment-263576014)). Thank you for reviewing this PR again!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90098179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67952730", "body": "Well, this is basically just an abstract base class that simplifies implementing single-purpose `IndexResolver`. Nothing in the `IndexResolver` contract itself prevents the implementations from supporting multiple indexes, as demonstrated by `CompositeIndexResolver`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67952730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67953041", "body": "IMO that wouldn't be optimal solution since it implies execution of logic for all supported indexes. This way you extract only what you need in a given situation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67953041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67963046", "body": "Each `FindByIndexNameSessionRepository` implementation would internally define its supported `IndexResolver`s, either using a `CompositeIndexResolver` or some other way. These would then get consumed according to repository needs, i.e. the same way duplicated principal name resolving logic is consumed now.\n\nThis approach allows having some resolvers that are reused across all repository implementations, such as `PrincipalNameIndexResolver`, as well as each implementation having its specific resolvers. If you would go the _input should just be the session and the result that has a mapping of index name to index value_ route then you wouldn't be able to reuse this logic.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67963046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68063953", "body": "> This requires another API because the current interface must have knowledge of the index name.\n\nYes, that's by design since I originally intended `IndexResolver` implementations to be single purpose. Each `FindByIndexNameSessionRepository` implementation holds the knowledge of its supported indexes anyway, doesn't it? Or did you mean _another API_ as in API targeted at users? Perhaps `FindByIndexNameSessionRepository` interface itself should communicate the index names it is capable of resolving?\n\n> Why not? Seems you could do this:\n\nThat kind of implementation is exactly what I wanted to avoid :) Your `GemfireIndexResolver` will get messy once other `IndexResolver` resolvers get in there too since you're relying on the concrete `IndexResolver` implementation.\n\nRegarding your proposed `IndexResolver` API and Gemfire implementation, consider things from perspective of current usage of `PrincipalNameResolver`s and equivalent logic - you'd really like to run the resolving for all the indexes and then extract the single value you're interested in instead of current `PrincipalNameResolver#resolvePrincipal`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68063953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68110705", "body": "I've updated the PR with changes to `FindByIndexNameSessionRepository` implementations to better demonstrate the intended usage of `IndexResolver`s\n\n> When are we interested in only a single index?\n\nWell, at any given time you're attempting to resolve an index you're interested in a single value, right? Unless I'm missing something obvious.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68110705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68299768", "body": "But this is dependent on the technology used to implement the repository, isn't it? For example, consider the [PrincipalNameExtractor](https://github.com/spring-projects/spring-session/pull/544/files#diff-961fafd60c6c9cf34e7772ea7993d626) from #544. It's basically a wrapper around an `IndexResolver`.\n\nOK, it certainly makes sense to provide API to communicate all the supported indexes. What are you thoughts on making it a part of `FindByIndexNameSessionRepository`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68299768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307521", "body": "This would benefit from `IndexResolver` having a method to resolve single index. However the GemFire repository implementation is the one I'm least familiar with, so this altogether could perhaps be refactored in a more optimal way.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307547", "body": "This would benefit from `IndexResolver` having a method to resolve single index.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307553", "body": "This would benefit from `IndexResolver` having a method to resolve single index.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307678", "body": "This would benefit from `IndexResolver` having a method to resolve single index. ATM I'm using `SingleIndexResolver` directly here, which I had to change a bit (make `SingleIndexResolver#resolveIndexValueFor` `public` instead of `protected` as originally outlined). `ValueExtractor`s are instantiated by Hazelcast, so perhaps the best would be to have Hazelcast specific `IndexResolver` implementation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/79307678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/82517475", "body": "Thank you for raising this concern @shakuzen - I've planned to comment on `findByIndexNameAndIndexValue` behavior but forgot. I'm not sure what would be the best way to address this due to exact reasons you've described. Delegates will fail even if only one of the results is not deserializable and I don't see a way around it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/82517475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/99339233", "body": "Thanks for giving this a test run @davidmelia. It's a problem with this code since it doesn't take into account that delegate's `delete` operation (or any other for that matter) could internally call an operation that can result in a deserialization error.\r\n\r\nI guess this is a case in point for implementing some sort of deserialization strategy vs the session repository decorator pattern.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/99339233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/127699441", "body": "Thanks for the tip!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/127699441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148869356", "body": "We need to validate that provided namespace is not `null` or empty.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148869356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148870436", "body": "No need to add test for default namespace, as other tests validate this already. OTOH we need to validate that namespace cannot be set to `null` or empty string as per previous comment.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148870436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148950750", "body": "Using `org.springframework.util.Assert#hasText` - I see you addressed that, thanks.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148950750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rwinch": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/914", "title": "Add ReactiveFindByIndexNameSessionRepository", "body": "A reactive equivalent to `FindByIndexNameSessionRepository`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/895", "title": "Spring Session Snapshot Metadata", "body": "### Summary\r\n\r\nSpring Session is experiencing issues with Spring Security's SNAPSHOT Maven metadata due to https://www.jfrog.com/jira/browse/RTFACT-12507\r\n\r\nRelated https://github.com/spring-projects/spring-boot/issues/10559 https://github.com/spring-projects/spring-security/issues/4609", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/869", "title": "TestContainers related memory leaks", "body": "When running the build I see warnings like this:\r\n\r\n```\r\n:spring-session-sample-javaconfig-redis:jar UP-TO-DATE\r\n:spring-session-sample-javaconfig-redis:integrationTest\r\n:spring-session-sample-javaconfig-redis:appAfterIntegrationTest\r\n19:43:55.657 [localhost-startStop-1] INFO  o.s.w.c.s.AnnotationConfigWebApplicationContext - Closing Root WebApplicationContext: startup date [Thu Sep 07 19:43:50 CDT 2017]; root of context hierarchy\r\n19:43:55.658 [localhost-startStop-1] INFO  o.s.c.s.DefaultLifecycleProcessor - Stopping beans in phase 2147483647\r\n\r\n19:43:57 WARN  The web application [ROOT] appears to have started a thread named [dockerjava-netty-1-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:\r\n java.lang.Thread.sleep(Native Method)\r\n org.testcontainers.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.confirmShutdown(SingleThreadEventExecutor.java:705)\r\n org.testcontainers.shaded.io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:325)\r\n org.testcontainers.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n org.testcontainers.shaded.io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n java.lang.Thread.run(Thread.java:745)\r\n19:43:57 WARN  The web application [ROOT] appears to have started a thread named [threadDeathWatcher-3-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:\r\n java.lang.Thread.sleep(Native Method)\r\n org.testcontainers.shaded.io.netty.util.ThreadDeathWatcher$Watcher.run(ThreadDeathWatcher.java:152)\r\n org.testcontainers.shaded.io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n java.lang.Thread.run(Thread.java:745)\r\n19:43:57 WARN  The web application [ROOT] appears to have started a thread named [dockerjava-netty-1-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:\r\n java.lang.Thread.sleep(Native Method)\r\n org.testcontainers.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.confirmShutdown(SingleThreadEventExecutor.java:705)\r\n org.testcontainers.shaded.io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:325)\r\n org.testcontainers.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n org.testcontainers.shaded.io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nwe should ensure all the threads are shutdown properly", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/772", "title": "httpsession-redis-json should not be deployed", "body": "The samples should not deploy https://bintray.com/spring/jars/samples/1.3.1.RELEASE#files/samples/httpsession-redis-json/1.3.1.RELEASE", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/689", "title": "RedisTests are Timing Based", "body": "The Redis Tests fail due to timing issues. See https://github.com/spring-projects/spring-session/issues/672#issuecomment-265845351", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/619", "title": "Add a Converter that performs special conversions based on a Map's keys", "body": "We should add a Converter<String,Object> that performs specific conversions based on the key of a Map. It would look to see if a special Converter is registered for the particular key and the perform the conversion if there is one.\n\nRelated #618\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/618", "title": "Add Converter to RedisOperationsSessionRepository", "body": "It would be nice if `RedisOperationsSessionRepository` had two `Converter<Map<String,Object>` injected into it. \n\nThe first would be ran just prior to saving the delta of the session attributes. This would allow custom serialization based on the keys.\n\nThe second would be ran just after reading in the session. This would allow custom deserialization based on the keys.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/529", "title": "Add a SafeDeserializingSessionRepository", "body": "I'm not sure about the name just yet, but we should have a `SessionRepository` implementation that can ignore specific set of exceptions to allow ignoring of deserialization exceptions (i.e. when a serialization UID changes). The implementation would look something like this, but would either allow for customizing the exceptions that are ignored or we would require updates to the existing implementations to ensure that they threw a consistent exception if deserialization failed (perfered):\n\n``` java\npublic class SafeDeserializingSessionRepository<S extends ExpiringSession> implements SessionRepository<S> {\n    private final SessionRepository<S> repository;\n\n    public SafeDeserializingSessionRepository(SessionRepository<S> repository) {\n        this.repository = repository;\n    }\n\n    public S getSession(String id) {\n        try {\n            return repository.getSession(id);\n        } catch(SerializationException e) {\n            delete(id);\n            return null;\n        }\n    }\n\n    public S createSession() {\n        return repository.createSession();\n    }\n\n    public void save(S session) {\n        repository.save(session);\n    }\n\n    public void delete(String id) {\n        repository.delete(id);\n    }\n}\n```\n\nRelates to #280\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/529/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/376", "title": "Extract IndexResolver", "body": "As pointed out in #372 there is currently quite a bit of duplication of logic for `PrincipalNameResolver`. It would be good to extract this logic out in a way that works for any index name and value. However, we should wait and see what shapes up in Spring Data as it may provide a convenient mechanism for this via [Redis Index](https://github.com/spring-projects/spring-data-redis/pull/156/files#diff-d2c04ffe360655561105d34b8ba1d122R31) (I'm in discussion to see if this makes sense to make indexing available in Spring Data Commons\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/369", "title": "EnableRedisHttpSession support no expiration", "body": "We should support having no expiration for `@EnableRedisHttpSession`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/369/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/359", "title": "Allow Serialization based on session attribute name in Redis", "body": "This is a brain storm on how to handle https://github.com/spring-projects/spring-session/issues/348#issuecomment-181205839\n\nFor example, a `org.springframework.core.convert.converter.Converter<Map<String,Object>,Map<byte[],byte[]>>` could be used to prior to [saving the delta](7c53558454a160e0443d73366ecc9e0d32211c3f). Then the we could provide a `org.springframework.core.convert.converter.Converter<Map<byte[],byte[]>,Map<String,Object>>` to convert back to the [objects just after we load the data](https://github.com/spring-projects/spring-session/blob/7c53558454a160e0443d73366ecc9e0d32211c3f/spring-session/src/main/java/org/springframework/session/data/redis/RedisOperationsSessionRepository.java#L407).\n\nThis would mean users could provide a mapping of session attribute name to the object rather than having to include class names in the serialization data.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/287", "title": "Programmatically Disable CSRF for x-auth-token", "body": "We should provide a way for Spring Session to programmatically disable Spring Security's CSRF support on requests in which x-auth-token is used for establishing the session.\n\nWe could perhaps disable CSRF in Spring Security when:\n- x-auth-token is provided\n- No cookies are present (specifically JSESSIONID, but remember the cookie name can be configured)\n\nWe should be mindful of how this works in a CORS scenario.\n\nIf changes are made to Spring Security we should be mindful of how this will work in an OAuth Scenario\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/287/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/263", "title": "Add Session HandlerMethodArgumentResolver", "body": "It would be nice if Spring Session would provide optional integration in Spring MVC to resolve a `Session` argument for Spring MVC. This could be done using Spring's [HandlerMethodArgumentResolver](https://github.com/spring-projects/spring-framework/blob/v4.2.0.RELEASE/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodArgumentResolver.java). \n\nThe argument would be resolved if the argument is of type `Session` (or a subclass like `ExpiringSession`). The value would be resolved using `SessionContextHolder.getSession()`.\n\nSee Spring Security's [CsrfTokenArgumentResolver](https://github.com/spring-projects/spring-security/blob/4.0.2.RELEASE/web/src/main/java/org/springframework/security/web/method/annotation/CsrfTokenArgumentResolver.java) for an example of how this might be implemented.\n\nBlocked by: #249 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/249", "title": "Add SessionContextHolder", "body": "Add the Session to a SessionContextHolder similar to SecurityContextHolder. The SessionContextHolder would store the Session in a ThreadLocal. This will allow users to access the current Session anywhere within their stack. For example:\n\n``` java\nSession session = SessionContextHolder.getSession();\n```\n\nWe would also want to have the SessionRepositoryFilter populate and clear out the SessionContextHolder (similar to SecurityContextPersistenceFilter).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/233", "title": "Custom Encoding", "body": "We should document how to encode the session to:\n- improve performance\n- allow attribute changes passively\n\nSee https://github.com/eishay/jvm-serializers/wiki for performance\n\nRelated (possibly distinct ticket) we should provide mechanisms to persist common objects (i.e. SecurityContext, CsrfToken, etc)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/207", "title": "Provide SimpSession implementation", "body": "- Spring's WebSocket support to work across a cluster \n- Ensure WebSocket and HttpSession is kept in sync at all times\n\nhttps://github.com/spring-projects/spring-framework/commit/281588d7bb9b4c15e72d743f5d88cc5ff39ff2de\n\nNOTE: It may not be necessary since there is already a multi server support, but we should consider if a node goes down and then back up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/192", "title": "Create websocket sample tests", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/170", "title": "Sample of Impersonating User", "body": "Demonstrate how one can use the multiple session support to impersonate a user to see what a particular type of user experiences. For example, admin is troubleshooting an issue, previewing permissions, etc.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/161", "title": "Make Managing Multiple Sessions Easier", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/137", "title": "Document SessionRepositoryFilter with RequestContextFilter", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/114", "title": "Document How to Use Custom sessionRepository with @EnableRedisHttpSessionConfiguration", "body": "``` java\n@EnableRedisHttpSessionConfiguration\npublic class HttpSessionConfig {\n    @Value(\"${server.session-timeout}\")\n    private int maxInactiveIntervalInSeconds;\n\n    @Primary\n    @Bean\n    public RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n        RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n        // customize\n        sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);\n        return sessionRepository;\n    }\n}\n```\n\nRelated Issues #110\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/104", "title": "Add XML Namespace Support", "body": "We should support Spring XML Namespace configuration of Spring Session\n\nNOTE: Update httpsesson-xml sample and guide (don't forget to remove link to this issue in guide)\n\nRelates to #101\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/104/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/78", "title": "Spring Cloud Sample", "body": "Demonstrate how Spring Session provides value in Cloud Foundry\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/78/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/75", "title": "Expose Default CookieHttpSessionStrategy as Bean", "body": "We could do that using the following:\n\n``` java\nConfigurableApplicationContext configurableApplicationContext = \n    (ConfigurableApplicationContext) wac;\nConfigurableListableBeanFactory bf = \n    configurableApplicationContext.getBeanFactory();\nbf.registerResolvableDependency(CookieHttpSessionStrategy.class, strategy);\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/75/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/66", "title": "Add Documentation About Session Size", "body": "In general, users who are not distributing their session are probably already paying the cost of large sessions with memory consumption. However, the problem is likely to get worse when users can distribute the sessions easily. We should provide some documentation on what belongs in a session and what does not.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/66/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/30", "title": "Consider move HttpSessionWrapper package scope", "body": "Arjen: This would make it easier to navigate to the HttpSessionWrapper object when browsing the code. This would be useful since it is such a central class.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/30/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/22", "title": "Netty Integration", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/22/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/21", "title": "Play Integration", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/21/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/19", "title": "Verify Session abstraction works with Netty & Play", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/19/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/11", "title": "Provide Session Id Generation Strategy", "body": "We are currently using UIDs for session id generation. It may be better to include other characters to increase the entropy. We should be careful in how we use SecureRandom See http://www.cigital.com/justice-league-blog/2009/08/14/proper-use-of-javas-securerandom/ Last, we may want to make generating ids a strategy interface so that users can swap this out\n- See PR #204\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/11/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/10", "title": "Consider non Spring Applications", "body": "We may want to consider non Spring Applications by reducing the number of dependencies and providing a mechanism for configuring with Filter parameters.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/10/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/6", "title": "Support Sticky Sessions", "body": "When a client is using sticky sessions, there could be certain optimizations we could perform.\n\nOne scenario that we could consider is that we could write asynchronously to a datastore and use a local cache for reads. NOTE that this would cause issues if we have multiple sources writing to the database.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/6/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/5", "title": "Consider Adding HttpSessionAttributeListener Support", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/5/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d0ee9fd16a34b582e43a5614e3e4504434f05a13", "message": "Use deployArtifacts"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7a631fe41422e5191d3e5f89db8dfe003d73a6f3", "message": "Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d217077dec01dacfb76614237b83e892883aed15", "message": "Release 2.0.0.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c8745923231125d926ddeb783acf4ec032a48d9b", "message": "Next Development Version 2.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/676f0e474e21645eb99008047c13c99e1650ea5e", "message": "Release 2.0.0.RC2"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e5ec61277186de8450ada91b051a69f5018d8a68", "message": "Update to Spring Security 5.0.0.RELEASE\n\nFixes gh-926"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ed328ff4b1822ef7d33966b18a1843db981a69de", "message": "spring-build-conventions:0.0.8.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/555223755d934de96b812060e1133c7ab6523d1c", "message": "Next Development Version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2e65d89ecc3b51277026605cd68861ef40cdc751", "message": "Release 2.0.0.RC1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f3f18432eee8104d5ed63e27f03118d59b2412bd", "message": "Update to Spring Security 5.0.0.RC1\n\nFixes gh-904"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6cfa975b29effc3719c04c5b206005b5c2c934d1", "message": "Move Redis Reactive Configuration\n\nRenaming the package to better align with WebSession pacakge structure\n\nFixes gh-901"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8b9d421ad63e0dfdad1313d5f8200cdb0769df2b", "message": "Tangles in RedisOperationsSessionRepository\n\nIssue: gh-900"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/df7ab9d99ed7db673360ca8d57b42366726cc624", "message": "Package tangles for Reactive Configuration\n\nFixes gh-900"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1c29c7f14f1606aa9afbc216a4d94f6a72dc936d", "message": "Update to 5.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/33fbaa03a8c32526f9768834c0249a842deb4829", "message": "Release 2.0.0.M5"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/88b26f2cfea0e2fb4ce5ce0f95e63e2ed6df66ea", "message": "Update to Spring Security 5.0.0.M5\n\nFixes gh-891"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c14fdb283d3752cb6c8c0eb7d51b2f7907021f86", "message": "Release 2.0.0.M4"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ee1ff3ed3bbef2c382d3a473863d96862725cf15", "message": "Update Spring Security 5.0.0.M4"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/52ea98b4ceb631979a24aa10a2a911e921d1377e", "message": "SpringWebSessionConfigurationTests close ApplicationContext"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5c294ae1d208ffba05cb27a4486b864278fc980d", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4a9f1700d54e3892af48601c4296b68773ac2803", "message": "Polish\n\nReorder methods"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/36ab358d24881afcfa28ecf1d834ee2395364330", "message": "Remove SpringSessionWebSessionManager\n\nSpring's DefaultWebSessionManager now supports all the functionality\nthat is needed for Spring Session, so we only need to implement\nWebSessionStore"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5697f49a71fc16f33fe8c4e701fc48ff2cac5def", "message": "Config->HelloWebfluxSessionConfig\n\nUse a more meaningful name"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/dfce66383fa85a583faaaa865966277727378c8c", "message": "webflux sample uses @EnableSpringWebSession\n\nIssue gh-861"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a83e59bf52f9fd920fe3739cb3c44e10965d906b", "message": "Polish\n\nFix checkstyle\n\nIssue gh-861"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f455df33333c9aebe2f07ec8ed0f28dda840353d", "message": "Add WebFlux sample\n\nFixesh gh-857"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a7bb9d3b31df84e51240ae569713b50c31afc309", "message": "SpringSessionWebSessionManager writes on commit\n\nwhen the ServerHttpResonse is commited the cookie and the session are written\n\nFixes gh-856"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5abbe66b1d0ad505f807748353cc2998c8992b88", "message": "Add WebFlux Support"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f00c1964306199acfdc83308a495f3d80ae9b3da", "message": "Update Dependencies to Prepare Release"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/be2604ca69c6d3cac08dd1663899d53f6d624850", "message": "Add Session.changeSessionId"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2aa71ffb6dd5155c9736d884505334a53ddd7047", "message": "Update to lettuce 5.0.0.RC1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8bdcba6e50e682da844619bb42fadb197ba5b743", "message": "Spring Session 2.0.0.M2 w/ Boot Samples\n\nThis is necessary because the current version of Spring Session is not\ncompatible with Boot 2.0.0.M2 and we cannot release against the SNAPSHOTs\n\nIssue gh-833"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/40b3d072249157d10a3414b2702b58936014610b", "message": "Revert \"Add --debug to Jenkinsfile\"\n\nThis reverts commit 9c4e20f074c59f042462d9c6430d71873b8f5dfb."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8c726f2215bc355ad697935104befd9d4ac49b74", "message": "Use Gradle 3.5.1\n\nThis works around a bug in 4.0 where Gradle is hanging when trying to\nresolve a configuration."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c2a86a27ce3e33e42da44e375c0b17dd5555e2ed", "message": "Travis skip install"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6a08ef6f9760726253617ed21890bfdff52a5b4e", "message": "Polish travis build"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9c4e20f074c59f042462d9c6430d71873b8f5dfb", "message": "Add --debug to Jenkinsfile\n\nTry and troubleshoot why the build is hanging"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7c6693a2687dcc40dcf1c293ff19ef1b087df808", "message": "Remove Sonar to see if it fixes build"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/36bb65e4b5dbd7cf18fe269d8350820e591cc1cc", "message": "Add default methods to Session\n\nFixes gh-819"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8ef36e4f3eaf38d2e3dffb3464bcd57802a7d181", "message": "Session Optional<T> getAttribute -> T getAttribute\n\nIssue gh-819"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ab3e28099331669097a97ebc791812618b1a854a", "message": "Update to latest SNAPSHOTs"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/30562b5749c2efc4483fe46c3bb4db0b5c372fb0", "message": "Use Spring IO Cairo-BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d42a7b65ea1ab6d2eba05396d79c7cfc41c62bf8", "message": "Add MapReactorSessionRepository\n\nFixes gh-815"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/db9807d12bd6f4ea25c61135f96264c7fb7cf390", "message": "Add ReactorSessionRepository\n\nFixes gh-814"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/db09fa8168a2af9c7852154e2a231b2ade03646f", "message": "Use SPRING_SESSION_TEAM_EMAILS"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c6c6beb40ca3fa380003756f0e55ad3f822740bc", "message": "Session.delete -> deleteById\n\nFixes gh-809"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0127ef9f9bf4a4a41f83092022e1ab81e61a86db", "message": "SessionRepository.getSession(String) -> findById(String)\n\nIssue gh-809"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/cd8686ae9cf17c8516806e5909f4f1306821ce2f", "message": "SessionRepository.save returns S\n\nIssue gh-809"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/233d179bfaf2df765eb6d0f815c08cbbe478ebc8", "message": "Revert \"Allow Publishing When Spring IO Fails\"\n\nThis reverts commit fca411996aef1a4b4e13cb17b3bb6099f80a9a5c."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4e8ae8d9d4066f31c88887c0a34b5a76d571bbb5", "message": "Revert \"Deploy Without Checks for Spring IO\"\n\nThis reverts commit 8c6810c6dda888ca02847e8043857362d10b1b5d."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8c6810c6dda888ca02847e8043857362d10b1b5d", "message": "Deploy Without Checks for Spring IO"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/fca411996aef1a4b4e13cb17b3bb6099f80a9a5c", "message": "Allow Publishing When Spring IO Fails\n\nThis is necessary to solve the problem of chicken and the Egg. See\nhttps://github.com/spring-io/platform/issues/622#issuecomment-310452646"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/79b8296e1c3dd9d92c055b8d0da4bd589987ad3c", "message": "Work Around spring-projects/spring-boot#9573\n\nIssue gh-806"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/043cb42149731fc7cb732dd231db5db8879170a9", "message": "Extract spring-session-jdbc\n\nIssue gh-806"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c28f047eb5ffba6654cbb3884091775e398a5dd7", "message": "Extract spring-session-data-hazelcast\n\nIssue gh-806"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/972cf66d7e4333a52a39c1e91903607d4b04262c", "message": "Extract spring-session-data-redis\n\nIssue gh-806"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f1319483eeeaab1e02bb4ffc0f9d9fdf44086383", "message": "Move spring-session to spring-session-core\n\nIssue gh-806"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6ad5006280ffbae212f04f1675a3745a04b0469b", "message": "Update to Gradle 4.0"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f8292ba512208d4a6265717f126ff4f97ef614dc", "message": "Update to Spring Boot 2.0.0.M2\n\nFixes gh-801"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/21bcc6e8d7b7c06f24cb408c35a41cb64da9ce40", "message": "Next Development Version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/905a77a3a846dcb71da8c3c4a62ae954418c8d1d", "message": "Release 2.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/295f9f78c3ee722f892cdc47c177a6f59ea4aae2", "message": "Update to latest Releases\n\n- Spring Framework 5.0.0.RC2\n- Spring Security 5.0.0.M2\n- Spring Data Kay-M4"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/04ecc82d09ecc059b55aa456aa1c74fac64f0f6d", "message": "Polish Artifactory Publish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2ddd9e58a3f79f7b19d54b6a4414e53933a43dd3", "message": "Update to spring-build-conventions 0.0.2.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7b385c7d334e2887301063f11a2a183181558574", "message": "Exclude check on artifactoryPublish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/87d51c54c93902c21d1c6bf12e3289281c5c6f26", "message": "Add Artifactory Deploy"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/210e8eebc5a372b45f188b748f9ec43c9fd8f1a5", "message": "Update to spring-build-conventions 0.0.2.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/76a6be572ad2b4684b61e57dd52f37b65f27cb89", "message": "Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7f9a9c4185b5534afe430b9b60e29fec6b393a7d", "message": "Update to lettuce-core 5.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/83c67d3e1185aa57c151712dc829f9f0f0aa9a00", "message": "Update to Spring Security 5.0.0.M1"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4f3324bac4862e7af31a6244e5bd3ef7b675664d", "message": "Update to spring-build-conventions 0.0.1.RELEASE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/23a28f790a5f2339f03f7ba811c8283d086533b1", "message": "Disable OSSRH Deploy\n\nFor the release disable OSSRH Deploy since we will release only\nto Artifactory for the milestone. We cannot deploy to OSSRH because\nwe have RC dependencies that are not in Maven Central."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a745d471ad1084314b524026ccd01171270b2897", "message": "Update to Spring Data Kay M3"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/df267774dae5db549f66a54898f072d9b57a0f17", "message": "Use dependency-management.gradle"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/78ea101a431f1016b547a2352b845f8a01c76273", "message": "Add logback.xml\n\nThis will ensure the logs are not too large which will improve performance\nand ensure that the build works on Travis which caps the log file size."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/63b836b2120ca167f005a2c49c5b0c952a68f5ce", "message": "Remove Mongo\n\nFixes gh-768"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/02da23a2a07c6168ea6a73fcd00aa7e4c48b2d10", "message": "Remove GemFire\n\nFixes gh-768"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/b254c7c6b94a4c2366aa6a3ee653705960a4f4a7", "message": "Add Jenkinsfile\n\nFixes gh-770"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/89adc132018df3d0be5dbdf31ddd62d4182d8ab1", "message": "Use Optional"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e6e752aea5c457a2431ab33e5534deab70828d1d", "message": "Servlet 3.1 compatible"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d590ca58e46b8a4a811e3c8fcfc229c737cfe65d", "message": "Standardize Build\n\nFixes gh-769"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e23aaeca5f8097fdea10a261d5369bc7e488765f", "message": "Fix .gitignore"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/707b8bb062157528acccec6277afc47e7547af82", "message": "Revert \"Workaround Lettuce Bug\"\n\nThis reverts commit adbff45a23568e84f4e3196e92a31782e12cbeaf.\n\nFixes gh-759"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/adbff45a23568e84f4e3196e92a31782e12cbeaf", "message": "Workaround Lettuce Bug\n\nIssue gh-759"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f30cb7a1e64d5c6301968769e670eabb44e95a8b", "message": "SpringSessionRememberMeServices rm SecurityContext attribute\n\nSpringSessionRememberMeServices use to invalidate the session which would\ncause Spring Security's saved request to be lost.\n\nNow SpringSessionRememberMeServices deletes the SecurityContext from the\nHttpSession instead.\n\nFixes gh-752"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ddf9ef66c1d79d2147553e572dc1424b4c53d102", "message": "Fix selenium versions\n\nSpring Platform Updated versions. Fix selenium dependencies to work\nwith them."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/b65423f2964476e85d57196434215a097fb18939", "message": "FindByUsernameTests check if driver is null\n\nFixes gh-740"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/43d83f639802745980c952a965b25b6d728283d8", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3ad002878504bf59f259be1975aeddff163eb626", "message": "Use relative xpath\n\nIssue gh-702"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/801f88d793d84868eefa9eced7da5623ca740f8b", "message": "Remove lombok from build.gradle\n\nIssue gh-702"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0d6b62b7a957db5497f4b1fe4da56424984faa00", "message": "Remove Lombok from httpsession-gemfire-boot\n\nFixes gh-702"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/00d5d76833bc8edd93ec419d39fcee500ecc8b62", "message": "Fix Buildship import with eclipse.jdt.javaRuntimeName\n\nSee https://discuss.gradle.org/t/building-with-newer-jdks/21102"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/85a1b43242a2f493b44f21b20387a16927b9356d", "message": "Update to Gradle 3.3"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/c182e90a1a5a3d2d4e55aa1a73fea9b352990325", "message": "httpsession-xml fixes"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/7dc3e12e07f235a88daa72fe2369d95018fad3d8", "message": "Polish httpsession-redis-json"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ce5e44233ea5b40d85c2745ec917c02cc40cf5f5", "message": "Polish httpsession-jdbc-xml"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/22c416e32b0049bfc8984d505c255b7dac9932d0", "message": "Polish jdbc-boot"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/ff72bf12343d1ab11da0838e546c285a3e88869c", "message": "Additional boot polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a45199059bcd7e9ae5c3b46794838ec034263aae", "message": "Polish httpsession-jdbc"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/37045e337c2d09b9261e6aed080123b86174372a", "message": "Polish httpsession"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/41e3f91b75610577e6ebb520654f9911d68b8219", "message": "Polish hazelcast-spring"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/efeed5e2cf9fa0864c25c1858a0f9f9ae21566dd", "message": "Polish hazelcast"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1952a4550fe79deea1a336fd59504099d7ec834e", "message": "Polish findbyusername"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9efb5b59e54b136a6b805da3495874083783d37b", "message": "Polish custom-cookies"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/4b196744f291dd43ffed2b71026ef60568511ebe", "message": "Polish"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/f98697416e62eabcbdec3eb2416d3d17de5507b2", "message": "spring-boot-starter-data-redis"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/d66fa56513151e6f033fc79624f5d9c007bc2034", "message": "Spring IO defaults to Cairo"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/89c91c19d8aae5568a373b2f8c2818c50344ba84", "message": "Fix spring platform Brussels\n\n* Update to dependency-management-1.0.0.RC2\n* Update to spring-io-plugin 0.0.6.RELEASE\n* Update to Boot 1.5 (which requires newer dependency management plugin)"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5e294b805f6f36f596101668d64f8d3b3c54a482", "message": "Fix Formatter"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/a7b5f86bcd5570ccbaaf5d6a95d065bdd8e5071f", "message": "Start 2.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9c236fa25651507ed56720104ec8abfc249746df", "message": "Start 1.4.x"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/304e32eef5c993dd7c5f55788c38ba0d1a8ce0c1", "message": "Fix Typo"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/9067f8235d1f86790f696c09cbc9328a68eed47c", "message": "Add What's New in 1.3\n\nFixes gh-627"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/19928e6b7fae96d43fb08f6a9fca6c5c7a225396", "message": "Add MongoSession.isExpired interval < 0 Test\n\nIssue gh-629"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/48922733", "body": "Related to #21 #22\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/48922733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50193384", "body": "Thanks for the interest and the feedback. Right now I am targeting the first stable to be available in Q4 of this year.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50193384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50193477", "body": "Thanks for the PR! This is now merged into master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50193477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50193570", "body": "Thanks for the PR! This is now merged into master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50193570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50472138", "body": "It is possible to do this by creating your own [SessionRepository](https://github.com/spring-projects/spring-session/blob/master/spring-session/src/main/java/org/springframework/session/SessionRepository.java) implementation. You can use the [MapSessionRepository](https://github.com/spring-projects/spring-session/blob/master/spring-session/src/main/java/org/springframework/session/MapSessionRepository.java) as an example. Remember that every request that gets the `HttpSession` will invoke `SessionRepository.getSession(String)`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50472138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50632875", "body": "Duplicate of #28\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50632875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50637523", "body": "Closing this issue. Please reopen if you feel it did not address your question.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50637523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50818656", "body": "Thanks for reporting this issue. The problem was related to the fact that the OnCommitedResponseWrapper was not triggering when the response length was reached. Specifically the servlet specification states that the response should be considered committed if:\n\n> The amount of content specified in the setContentLength method of the response has been greater than zero and has been written to the response.\n\nThis means that the session header was not written until after the response was committed. Since the response was committed, the header was not actually included.\n\nI have fixed this in master which should resolve your issue. I have verified that the fix resolves your sample application. If you get a chance, \"Can you give the latest snapshot a try?\"\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50818656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50883186", "body": "@ralscha Thanks for the feedback. Locally I had tested this using Jetty as well (which all the URLs work on). It appears that somehow the URL for bigger has since broke again on Tomcat. I will look into resolving this. Thanks again for the report and double checking my work!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50883186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50931010", "body": "@ralscha The second problem was related to the fact that the OnCommitedResponseWrapper was not triggering when the buffer size was reached. As alluded to, this only impacted Tomcat and not Jetty. \n\nI have fixed this in master which should resolve your issue. I have verified the URLs on both Tomcat and Jetty now work. If you get a chance, \"Can you give the latest snapshot a try?\"\n\nThanks again for trying Spring Session and providing critical feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50931010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/51870058", "body": "Thanks for reporting this. I have fixed this in master. The issue was due to not updating the bean type of `RedisTemplate<String,Session>` to `RedisTemplate<String,ExpiringSession>` when #28 was resolved\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/51870058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/54147343", "body": "We can certainly add a sample to this repository.\n\nTo get you going...All you need to do is ensure that Spring Session Filter is in place before the `SecurityContextPersistenceFilter`. You can find an example of it being used in [rwinch/spring-websocket-portfolio/security](https://github.com/rwinch/spring-websocket-portfolio/blob/06e7412f0062bb578417d655d9f439f108946bc2/src/main/java/org/springframework/samples/portfolio/config/WebSecurityConfig.java#L50)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/54147343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56536698", "body": "Are you working with the snapshot or the last milestone? If you are working on the milestone refer to its documentation in the tag rather than master https://github.com/spring-projects/spring-session/tree/1.0.0.M1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56536698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57257793", "body": "The [javadoc](https://repo.spring.io/libs-snapshot/org/springframework/session/spring-session/1.0.0.BUILD-SNAPSHOT/spring-session-1.0.0.BUILD-20140930.020428-118-javadoc.jar) and [sources](https://repo.spring.io/libs-snapshot/org/springframework/session/spring-session/1.0.0.BUILD-SNAPSHOT/spring-session-1.0.0.BUILD-20140930.020428-118-sources.jar) are now being published.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57257793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57262901", "body": "Ideally we could do the following:\n\n``` java\n@Configuration\npublic class Config {\n    @Bean\n    public JedisConnectionFactory connectionFactory() throws Exception {\n        return new JedisConnectionFactory();\n    }\n\n    @Bean\n    public RedisTemplate<String,ExpiringSession> redisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, ExpiringSession> template = new RedisTemplate<String, ExpiringSession>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n\n    @Bean\n    public SessionRepository<? extends ExpiringSession> sessionRepository(RedisTemplate<String, ExpiringSession> redisTemplate) {\n        return new RedisOperationsSessionRepository(redisTemplate);\n    }\n\n    @Bean\n    public <S extends ExpiringSession> SessionRepositoryFilter<? extends ExpiringSession> sessionFilter(SessionRepository<S> sessionRepository) {\n        return new SessionRepositoryFilter<S>(sessionRepository);\n    }\n}\n```\n\nbut Spring cannot autowire this properly\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57262901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57318333", "body": "The above did not work due to https://jira.spring.io/browse/SPR-11471 Upgrading Spring resolves the issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57318333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57330729", "body": "Fixed in 750ae663fce9b59d0d6b0631103b06edfa302aa8\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57330729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57366933", "body": "Thanks for the interest @cemo! I have pushed out changes. You can see an example in the [README](https://github.com/spring-projects/spring-session#spring-configuration) (and of course the sample application)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57366933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57367012", "body": "PS You might find #43 interesting too\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57367012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/58031746", "body": "The [SecurityConfig](https://github.com/adeelmahmood/restsession/blob/7114c33aa9c313d96352d7358d7f96b09b76fa0e/restsession/src/main/java/restsession/SecurityConfig.java#L31) specifies to make the application stateless, so the SecurityContext will not be saved into session. Specifically, to resolve the problem the follwoing code should be removed:\n\n```\n.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/58031746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/58078212", "body": "There is no direct support for this yet. You can follow #49 to get updates. If you wanted support for this today, you would need to create a custom `HttpSessionStrategy` that can resolve the session id differently. For example, you might want to resolve the session id based upon a cookie named session that has multiple values and another cookie named whichsession that specifies which index of the sessions to use.\n\nKeep in mind that we plan on changing the APIs around still so that we could support automatic rewriting of the URLs to include which user. You can follow the progress at #12\n\nIf you implement a solution successfully, we'd love to see a PR!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/58078212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/58455369", "body": "> I added this HttpSessionStrategy implementation based on your suggestion on how multiple sessions can be handled by a custom HttpSessionStrategy. \n\nThanks!\n\n> The idea is pretty much the same as described in issue #48 except the current session cookie stores the session id instead of the index. \n\nWe probably want it to use an index so that we can also extract the index from the URL (more on that later)\n\n> I am not sure how practical this implementation is because it relies very much on the user request including or excluding appropriate cookies to either initiate a new session, use an existing one, delete an existing session etc. \n\nThe thought is that you would need another Filter that interacts with the same API that switches which session you are using.\n\n> Secondly having separate implementations for multiple sessions vs single sessions seems a bit odd too but may be thats ok.\n\nThis is a good point...perhaps we should switch this around so it works with a single implementation. The problem is then we complicate our APIs. We want the required API for someone to implement to be as simple as possible. Basically the minimum API should be dead simple so others can provide custom strategies.\n\n> Can you share some thoughts on how automatic url rewriting can help with that. E.g in this implementation, absence of or empty current session cookie suggests the need of a new session so instead may be a request parameter can be specified and SessionRepositoryFilter can invoke another method on HttpSessionStrategy to indicate that a new session is needed regardless of existing valid session.\n\nThe idea is that the URL would contain an index of which session we should be using. This way a user could have multiple tabs open at the same time all leveraging different sessions. If the current session is indicated by a cookie, then there can only be one session per browser since cookies would be shared across multiple tabs.\n\n> If this implementation isnt practical please suggest how you are thinking the api can be expanded to accommodate multiple sessions. I would love to help.\n\nI think this is a good start at an implementation, but it may be a bit early. The main reason, as I mentioned previously in #12, the APIs will be changing so we shouldn't implement the current API but wait until #12 is completed.\n\nFortunately, the thought and comments you have put into this issue will be quite helpful when I implement #12.\n\nIn the meantime, lets leave this open as I'm guessing a lot of your work can be easily converted into working with the new APIs once they are rewritten.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/58455369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59148276", "body": "Thanks for the report. Did you try injecting a Hazelcast distributed Map into the [MapSessionRepository](https://github.com/spring-projects/spring-session/blob/07ff3088bf1843e35c0b8a7319e5d2ecc4971349/spring-session/src/main/java/org/springframework/session/MapSessionRepository.java)? I haven't tried this but it should work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59148276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59148418", "body": "Thanks for the report. If a good PR (with tests) is submitted we would likely include it, but it is unlikely that I will be able to prioritize this any time soon since a relational database will likely not perform all that well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59148418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59200181", "body": "I'm saying that it is unlikely to perform as well as a NoSQL store like Redis. This isn't to say a JDBC store doesn't have its place, but just that there are plenty of other features that have a higher priority.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59200181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62438595", "body": "Please provide a configuration that reproduces the problem.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62438595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62448190", "body": "This seems to work fine for me. Can you create a minimal complete project that reproduces the issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62448190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62623619", "body": "Please see https://github.com/phosphene/spring-boot-session-jersey-test-demo/pull/1 for the fixes. The problem was that the @EnableRedisHttpSession will register a Filter automatically when used with Spring Boot, so its configuration is being preferred over the customizations (to use headers). You can remove the code in Spring Security and ensure to create a Bean that implements HttpSessionStrategy to resolve this. The PR illustrates the changes necessary.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62623619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62837075", "body": "The path is not available so there is no way to determine which value should be used.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62837075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63158167", "body": "Thanks this is merged into master now at 0926df9c545b6ef4f4068919efbc7048f7b8ae1f I also added a test to ensure that this doesn't happen again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63158167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63257590", "body": "Fixed as part of #59 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63257590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63257678", "body": "Fixed as part of #35\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63257678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63258136", "body": "Superseded #49\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63258136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63258235", "body": "I have pushed support for multiple sessions into master a0805e8411182486c3d11aef0bdcbda019b493b7 For a demo, please give the [users](https://github.com/spring-projects/spring-session/tree/master/samples/users) sample a try.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63258235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63353720", "body": "Thanks for the PR. I wonder if it might be better to use the bom plugin you created to ensure the Spring IO versions are used in the first place. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63353720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63871167", "body": "This does not appear to be related to Spring Session. The response sent back is:\n\n``` http\nHTTP/1.1 415 Unsupported Media Type\nServer: Apache-Coyote/1.1\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/html;charset=utf-8\nContent-Language: en\nContent-Length: 1135\nDate: Thu, 20 Nov 2014 20:07:40 GMT\n\n<html>\n  <head>\n    <title>Apache Tomcat/8.0.14 - Error report</title>\n    <style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style>\n  </head>\n  <body>\n    <h1>HTTP Status 415 - Unsupported Media Type</h1>\n    <div class=\"line\"/>\n    <p>\n      <b>type</b>\n Status report    </p>\n    <p>\n      <b>message</b>\n      <u>Unsupported Media Type</u>\n    </p>\n    <p>\n      <b>description</b>\n      <u>The server refused this request because the request entity is in a format not supported by the requested resource for the requested method.</u>\n    </p>\n    <hr class=\"line\"/>\n    <h3>Apache Tomcat/8.0.14</h3>\n  </body>\n</html>\n```\n\nI'm guessing this is due to one of the other snapshot related dependencies you have in the pom.xml\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63871167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65081958", "body": "I haven't considered it yet due to other priorities (i.e. Spring Security). If you look at [the configuration](https://github.com/spring-projects/spring-session#spring-configuration) that is necessary, it is actually rather limited (an Enable annotation and a Data ConnectionFactory). This means in my mind this is a lower priority than other requests at the moment. Of course a PR with proper testing documentation etc would bump this issue up in priority.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65081958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65125241", "body": "Thanks for your question and interest in Spring Session. Unfortunately, there isn't an easy way to do that at this time. Right now the best option is to create a SessionRepository that wraps the MapSessionRepository and overrides the createSession method to override the createSession method to something like this:\n\n``` java\n    public ExpiringSession createSession() {\n        // delegate is an instance of MapSessionRepository\n        ExpiringSession session = delegate.createSession();\n        if(defaultMaxInactiveInterval != null) {\n            session.setMaxInactiveInterval(defaultMaxInactiveInterval);\n        }\n        return session;\n    }\n```\n\nI created #73 to address this in the next release\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65125241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65422282", "body": "You can easily place the extra fields in the session attributes. By accessing it using the standard Servlet HttpSession APIs you ensure you do not be coupled to a custom session implementation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65422282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65426668", "body": "> For example, firstname of principal can be updated in site A. This change needs to be reflected at B and C.\n\nSo you would query for those sessions by the value of a session attribute and update the session to have the correct firstname....right?\n\n> Also session attributes are not easy to query in a relational database.\n\nIt all depends on how you persist the data. The way you persist the data does not have to be a mirror of how it is accessed in your APIs. If you give a dedicated column for certain attribute name/value pairs, then you should be able to query the value quite easily.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65426668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65652592", "body": "Thanks for trying Spring Session and bringing feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65652592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/66726918", "body": "@wilkinsona Seems like we have a circular dependency between the platform-versions.properties and Spring Session's already. Specifically before I do a release, I must run the Spring IO tests which use the platform-versions.properties to determine the versions of the dependencies for the tests. Is there a reason this is much different than using the platform-version.properties to control the versions that Spring Session uses up front?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/66726918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67193941", "body": "@chrylis Thanks for the offer to help out! What I am wanting to do is have an example that demonstrates how easy it is to use Spring Session in the cloud. \n\nI envision this sample as being able to be ran locally, but with no changes it can also be deployed to the cloud. More concretely at the moment I imagine the sample will demonstrate:\n- Being deployed to Cloud Foundry\n- Leveraging [Spring Cloud Connectors](http://cloud.spring.io/spring-cloud-connectors/) to automatically wire the Cloud Redis DataSource to Spring Session\n- Scaling up to two or more instances to see that the session works across both instances\n\nNOTE: Cloud Foundry already provides automatic distributed sessions for .war files. However, it would not work for an executable jar (i.e. Spring Boot application).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67193941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67357084", "body": "The reason is that we do not want users coupling themselves to RedisSession. Additionally, you should only save a Session that was created with the SessionRepository#createSession() method or returned by SessionRepository#getSession(). Instead, you should be able to do this using the following:\n\n``` java\npublic class MyClass<S extends ExpiringSession> {\n\n    private SessionRepository<S> repository; // = ... RedisSessionRepository ...;\n\n    public void doStuff() {\n        S session = repository.createSession();\n        // ... do stuff\n        repository.save(session);\n    }\n}\n```\n\nAlternatively if you are not worried about type safety, you can use something like this:\n\n``` java\npublic class MyClass {\n\n        private SessionRepository repository; // = ... RedisSessionRepository ...;\n\n        public void doStuff() {\n            Session session = repository.createSession();\n            // ... do stuff\n            repository.save(session);\n        }\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67357084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67357595", "body": "PS: What is the reason you need to interact with Spring Session directly?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67357595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67361347", "body": "Related to #17 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67361347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67361505", "body": "> We are creating an abstract layer in our system to hide the implementation of the Session Management and in the implementation of our SessionManager interface I want to use the SessionRepository directly.\n\nThanks for the feedback. \n\n> One other use case that we have is to show our internal IT admin users a list of all active sessions and allow them to see information about the sessions and to invalidate selected sessions. In order to support this use case, our SessionManager interface has a \"getAllSessions\" method. In order to support that method, I would need to have a method in the SessionRepository that would do the same thing.\n> \n> I'm not sure if this sort of method would be something that could be added to your SessionRepository interface.\n\nMost likely you would want paging support for this too right? The best approach is to create a new interface that extends SessionRepository that add your additional methods. It is important to keep the core interface as simple as possible since not everyone needs the management APIs and adding additional methods makes it harder to write custom implementations.\n\nAs an FYI we are looking to support looking up sessions by a user identifier (i.e. username) in a future release See #7 Any additional management like methods will likely be added to a different interface (that will probably extend SessionRepository).  Does this sound like it would work for your needs? If not, please create a new issue with specific requirements for us to consider.\n\nThanks again for your feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67361505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67577557", "body": "Needs to activate Kh...perhaps better to filter on the event type though?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67577557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67899728", "body": "Thanks for the feedback.\n\nThe problem is that with our current setup Eclipse is compiling as JDK 1.5 compatible (which is the same as our CI build). The difference is that Eclipse's custom compiler marks the `@Override` as an error when defined on an interface when set to 1.5 compatible mode. The standard JDK does not fail in this instance. I am not experiencing the issue since I happen to be coding Spring Session in IntelliJ.\n\nWorking around the issue would be to setup Eclipse to use 1.6 compatibility. However, this won't work until Gradle 2.3.rc-1 is out. See [GRADLE-2221](https://issues.gradle.org/browse/GRADLE-2221)\n\nTo make things easier I have removed the `@Override` from methods overridden in an interface. This should ensure the code compiles in Eclipse\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67899728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67899912", "body": "Thanks for the PR this has been fixed in master. The integration tests should also work now that gh-86 is fixed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67899912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67899962", "body": "Thanks this is merged into master.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67899962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67901809", "body": "Switching the setting manually is a bit of a pain and we want things to be as easy as possible for developers. Since removing the `@Override` does not break anything removing it for now seems like the best approach. We will revert it once we can work around the Eclipse issue. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67901809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68006484", "body": "Duplicate of #88 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68006484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68010505", "body": "Fixed via 59dbd75ca295a09f590e360d6f5d9ebea8d701de\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68010505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68010533", "body": "Fixed via 7f9b5c0\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68010533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68726100", "body": "I think the behavior is correct. If the object in session is non-passive, we should fail fast. This is no different than how Hibernate would behave if you used Java Serialization to persist an object to a database that changed.\n\nIn most cases, I would want to use a custom serialization to ensure that objects are read and written in a passive way. You can customize the way the objects are [serialized](http://docs.spring.io/spring-data/redis/docs/1.4.0.RELEASE/reference/html/#redis:serializer) into the database. You can customize how the values are persisted using something like the following:\n\n``` java\n    @Primary\n    @Bean\n    public RedisTemplate<String,ExpiringSession> sessionRedisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, ExpiringSession> template = new RedisTemplate<String, ExpiringSession>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n\n        // customize the hash value serializer (default is JdkSerializationRedisSerializer)\n        template.setHashValueSerializer(...);\n\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68726100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68772987", "body": "You can now find the reference documentation at http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68772987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68796491", "body": "@wilkinsona This is now merged into master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68796491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68943278", "body": "You can now find command line examples in the reference at http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#api-redisoperationssessionrepository-cli\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/68943278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69085537", "body": "> It's not obvious what the purpose of the Redis spring:session:expirations keys is. Are these there so that the server can proactively identify sessions and force them closed on the HTTP(ish) end?\n\nDid you see the explanations in the Javadoc and [reference](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#api-redisoperationssessionrepository-expiration)? Does this explain things for you? If not, please reopen and ask a more specific question.\n\n> If so, what happens in a load-balanced situation where you have multiple servers reading and writing to the session store simultaneously? Are there race issues on either appending or the actual expiration-time processing?\n\nThanks for pointing this out. After a bit of thought I created #93 to address this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69085537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69207538", "body": "I think I understand the confusion here.  I made some clarifications to the reference. They will be deployed shortly. \n\nCan you take a look and see if it helps? See https://github.com/spring-projects/spring-session/commit/d96c8f2ce5968ced90cb43009156a61bd21853d1\n\nIf that still doesn't clarify things, please create a new github issue and we can try to sort out in the next release (for now we are getting ready for GA).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69207538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69209401", "body": "Thanks for all your feedback! I think this will help ensure things are more clear for other users.\n\nAs explained in #93 I do see a race condition in which the session expiration may be off by the longest HTTP request used with the session. Is this what you are referring to? If not, please feel free to create an issue and we can discuss there.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69209401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69220918", "body": "This is fixed now\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69220918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69221246", "body": "There is a Hazelcast sample application that demonstrates this works now. See http://docs.spring.io/spring-session/docs/current/reference/html5/#api-mapsessionrepository-hazelcast\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69221246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69221380", "body": "Thanks for the report and feedback. There is a sample application and a guide now at http://docs.spring.io/spring-session/docs/current/reference/html5/#samples\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69221380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69221710", "body": "This is fixed via SessionDestroyedEvent http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69221710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69242850", "body": "Thanks @dwelch2344 for your willingness to contribute! I have no experience working with Elasticache, so I will probably not be of much help in that respect.\n\nI have outlined the steps below:\n- The first step would be to implement the `SessionRepository<ExpiringSession>`. Currently there are two implementations that you can refer to:\n  - [MapSessionRepository](https://github.com/spring-projects/spring-session/blob/1c829ae78a0e1b6d8e4f768bc26d27fe2a6295ae/spring-session/src/main/java/org/springframework/session/MapSessionRepository.java) - uses a Map implementation as the datastore\n  - [RedisOperationsSessionRepository](https://github.com/spring-projects/spring-session/blob/1.0.0.RELEASE/spring-session/src/main/java/org/springframework/session/data/redis/RedisOperationsSessionRepository.java) - uses Spring Data Redis as the implementation.\n- Are you using Spring Session with WebSockets or just for HttpSession support? If you want to support WebSocket's you will need to ensure that a [SessionDestroyedEvent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent) is fired. The `RedisOperationsSessionRepository` does this by [listening to Redis keyspace notifications](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-expiration). Specifically this is done using [SessionMessageListener](https://github.com/spring-projects/spring-session/blob/1c829ae78a0e1b6d8e4f768bc26d27fe2a6295ae/spring-session/src/main/java/org/springframework/session/data/redis/SessionMessageListener.java)\n- Last you will need to know how to configure it. You can base your configuration off of [RedisHttpSessionConfiguration](https://github.com/spring-projects/spring-session/blob/1c829ae78a0e1b6d8e4f768bc26d27fe2a6295ae/spring-session/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java)\n\nPlease feel free to post any questions here and I will be sure to answer than as fast as possible. Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69242850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69937088", "body": "Thanks for the PR This is now merged into master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69937088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69957641", "body": "You can find this at https://github.com/spring-projects/spring-session/tree/ba07c1d5620f290eb5ee8a853c748019182d8345/samples/httpsession-xml\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69957641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69957701", "body": "@pdorgambide Thanks for creating a ticket. I agree that this is something that should be documented.\n\nIn the meantime, are you aware you can used mixed [Spring XML configuration with Spring Java Configuration](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-java-combining)? I've added a complete sample at [httpsession-xml](https://github.com/spring-projects/spring-session/tree/ba07c1d5620f290eb5ee8a853c748019182d8345/samples/httpsession-xml). You can find a summary of how to do it at #105\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69957701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69994593", "body": "Thanks for the quick PR!\n\nWe want to ensure to include tests for every code change. Can you add a few tests to CookieHttpSessionStrategyTests?\n\nIdeally we would have some additional documentation (i.e. just before [HttpSession & RESTful APIs](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#httpsession-rest)). Remember a feature doesn't exist unless it is documented. Do you mind adding that to the [docs/src/docs/asciidoc/index.adoc](https://github.com/spring-projects/spring-session/blob/master/docs/src/docs/asciidoc/index.adoc)? You can generate the documentation using \"./gradlew docZip\" and look in docs/build/asciidoctor/html5.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69994593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70006929", "body": "Thanks for the PR!\n\nUnfortunately, this doesn't quite resolve the issue since we need to ensure that our documentation is updated. Specifically the [docs/src/docs/asciidoc/guides/boot.adoc](https://github.com/spring-projects/spring-session/blob/ba07c1d5620f290eb5ee8a853c748019182d8345/docs/src/docs/asciidoc/guides/boot.adoc) needs to update the [Spring Configuration](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/boot.html#boot-spring-configuration) section to remove the <2>. It would be good to replace it with something like:\n\n```\nNOTE: Spring Boot automatically creates ... In a production environment you\nneed to ensure to configure your JedisConnectionFactory bean to point to your\nRedis instance. <insert link to how to configure>\n```\n\nWould you mind updating the PR to contain the documentation updates too? Afterwards I can merge the PR.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70006929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70107881", "body": "At the moment I don't really see this as being a common use case. I'm hesitant to introduce additional complexity without a popular usecase(s). Perhaps if you explain your use case I will better understand.\n\nThe way in which you would do this currently is by providing your own SessionRepository and ensuring to mark it as `@Primary`. For example:\n\n``` java\n@EnableRedisHttpSession\npublic class HttpSessionConfig {\n    @Value(\"${server.session-timeout}\")\n    private int maxInactiveIntervalInSeconds;\n\n    @Primary\n    @Bean\n    public RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n        RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n        sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);\n        return sessionRepository;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70107881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70109304", "body": "Thanks! Once we get the updated docs I can double check everything and merge the PR. Thanks again!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70109304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70114166", "body": "@pdorgambide Thanks for following up. Does this mean you were able to get your application configured using XML and JavaConfig?\n\nThe `NoSuchMethodError` sounds like a bug. Spring Session should work with Servlet 2.5, but based on your description it sounds as though it is not. Can you create a new issue with a complete stacktrace?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70114166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70123121", "body": "Thanks for updating the PR! Your commits afc3752b33227e3dfacbf26f90522571eea57814 37aafc51480e12f2742843810e0b205cd45632d5 are now merged into master.\n\nNOTE: I ended up adding a [little polish](https://github.com/spring-projects/spring-session/commit/3f2364312132b65fa12841e7392a01bf38d361c3) to the documentation. Feel free to review and provide any feedback you might have.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70123121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70123534", "body": "Fixed via gh-108 Thanks again for the PR @roykachouh !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70123534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70596322", "body": "> Just tried it and it works perfectly, thank you! (only @RedisHttpSessionConfiguration from your example should be @EnableRedisHttpSession)\n\nThanks I updated the code.\n\n> I think the code snippet above would be a good addition to the documentation, as I think that it's a common use-case to change the default session-timeout.\n\nYou are right that this should be included in the documentation. I created #114 to address this\n\n> Thanks again for the feedback and also for this great project\n\nThank you for trying it out and providing feedback :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70596322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70597530", "body": "Thank you for your feedback.\n\n`@EnableRedisHttpSession` requires Redis 2.8.0+ I have added #115 to document this.\n\nThe reasoning is that the keyspace notifications are used to ensure that the [SessionDestroyedEvent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-expiration) is fired. This is especially important if you are using Spring Session with WebSocket support.\n\nIf you are not using Spring Session with WebSocket support, then you can use a configuration similar to the following:\n\n``` java\n@Configuration\n@EnableScheduling\npublic class RedisHttpSessionConfiguration {\n    // set to some value i.e. @Value(\"${spring.session.inactive}\")\n    private Integer maxInactiveIntervalInSeconds;\n\n    @Bean\n    public RedisTemplate<String,ExpiringSession> sessionRedisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, ExpiringSession> template = new RedisTemplate<String, ExpiringSession>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n\n    @Bean\n    public RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n        RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n        sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);\n        return sessionRepository;\n    }\n\n    @Bean\n    public <S extends ExpiringSession> SessionRepositoryFilter<? extends ExpiringSession> springSessionRepositoryFilter(SessionRepository<S> sessionRepository) {\n        SessionRepositoryFilter<S> sessionRepositoryFilter = new SessionRepositoryFilter<S>(sessionRepository);\n        return sessionRepositoryFilter;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70597530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70666509", "body": "@brixtonasias -Thanks for reporting this and submitting a PR! This is now merged into master and should be visible in the [snapshot docs](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/boot.html#boot-running) the next time the documentation is published (within the next hour).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70666509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70679633", "body": "Thanks for the PR @brixtonasias ! This is merged into master now. Keep them coming!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70679633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71204327", "body": "Thank you for the feedback.\n\nDo you have any specific questions that I can answer now? I will be sure to include them in the documentation as well.\n- Spring Session has a single required dependency (commons-logging).\n- HttpSession Redis implementation requires\n  - Servlet 2.5 should be the minimum, but we have a bug #111 that will be fixed in 1.0.1\n  - Redis 2.8.0+ to support [keyspace notifications](http://redis.io/topics/notifications) See #115\n  - Spring Data Redis (it is known and tested to work with 1.3.0)\n  - redis.clients (it is known and tested to work with 2.4.1)\n- WebSocket implementation requires spring-websocket-4.1.4\n\nIf you are looking for an easy way to manage your dependency versions, then I would suggest the [Spring IO Platform](http://docs.spring.io/platform/docs/1.1.1.RELEASE/reference/htmlsingle/) which provides known working versions of projects that work together along with easy mechanisms to manage the versions (i.e. using a [Maven BOM](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies)).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71204327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71206381", "body": "If you are NOT using web sockets (i.e. only using HttpSession integration) then Spring 3.2.x _should work_  (we officially test against Spring 4.1.x). However, we should also add tests to confirm this (Created #120). Please let me know if you have any problems or not. If you do, we can certainly make some changes to ensure Spring 3.2.x works.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71206381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71490616", "body": "Thanks for the report @danveloper! This indeed seems to be a bug with the `RedisHttpSessionConfiguration` and thus the `@EnableRedisHttpSession` annotation.\n\n# UPDATE Fixing in 1.0.1\n\nAs of Spring Session 1.0.1 this can be disabled by exposing `ConfigureRedisAction.NO_OP` as a bean.\n\nAn XML Configuration example\n\n``` xml\n<util:constant\n        static-field=\"org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP\"/>\n```\n\nA Java Configuration example\n\n``` java\n@Bean\npublic static ConfigureRedisAction configureRedisAction() {\n    return ConfigureRedisAction.NO_OP;\n}\n```\n\n# Fixing the Issue\n\nI'm debating what the best approach to fixing this would be though and wondering what your thoughts were @danveloper.\n\nThere is certainly a need for a fix, so I'm not debating that we need to fix something. However, I like the fact that it updates the Redis configuration _by default_ for two reasons:\n- It makes it very easy to get things up and working in a development environment\n- Making it enabled by default means that users would have to explicitly disable for production. Since there is an explicit step to disable the configuration, they should be aware that it is necessary to configure Redis to send the namespace notifications. This is critical for applications that require `SessionDestroyedEvent` to be fired to clean up resources. In particular, this is important for WebSocket applications to ensure open WebSockets are closed when the HttpSession expires.\n\nMy initial thoughts on how we should update the configuration is:\n- `RedisHttpSessionConfiguration` should _by default_ update the Redis configuration _only if_ Spring WebSocket support is enabled. \n- `RedisHttpSessionConfiguration` should allow disabling updating the Redis configuration\n- `RedisHttpSessionConfiguration` should _by default_ try to subscribe to keyspace notifications _only if_ Spring WebSocket support is enabled. This will help increase performance for applications simply using Spring Session for `HttpSession` which typically does not need to receive the `SessionDestroyedEvent`\n- `RedisHttpSessionConfiguration` should allow explicitly configuring if the application should subscribe to keyspace notifications\n- We should update the documentation to discuss the changes\n\n# Workaround\n\nIn the meantime, a workaround is to remove `@EnableRedisHttpSession` from your configuration and then include a configuration with a fix. For example:\n\n``` java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportAware;\nimport org.springframework.core.annotation.AnnotationAttributes;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.data.redis.connection.RedisConnection;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.listener.PatternTopic;\nimport org.springframework.data.redis.listener.RedisMessageListenerContainer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.session.ExpiringSession;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.data.redis.RedisOperationsSessionRepository;\nimport org.springframework.session.data.redis.SessionMessageListener;\nimport org.springframework.session.web.http.HttpSessionStrategy;\nimport org.springframework.session.web.http.SessionRepositoryFilter;\nimport org.springframework.util.ClassUtils;\n\n@Configuration\n@EnableScheduling\npublic class RedisHttpSessionConfiguration {\n    @Value(\"${spring.session.maxInactive ?: 1800}\")\n    private Integer maxInactiveIntervalInSeconds;\n\n    private HttpSessionStrategy httpSessionStrategy;\n\n    @Autowired\n    private ApplicationEventPublisher eventPublisher;\n\n    @Bean\n    public RedisMessageListenerContainer redisMessageListenerContainer(\n            RedisConnectionFactory connectionFactory) {\n        RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n        container.setConnectionFactory(connectionFactory);\n        container.addMessageListener(redisSessionMessageListener(),\n                Arrays.asList(new PatternTopic(\"__keyevent@*:del\"),new PatternTopic(\"__keyevent@*:expired\")));\n        return container;\n    }\n\n    @Bean\n    public SessionMessageListener redisSessionMessageListener() {\n        return new SessionMessageListener(eventPublisher);\n    }\n\n    @Bean\n    public RedisTemplate<String,ExpiringSession> sessionRedisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, ExpiringSession> template = new RedisTemplate<String, ExpiringSession>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n\n    @Bean\n    public RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n        RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n        sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);\n        return sessionRepository;\n    }\n\n    @Bean\n    public <S extends ExpiringSession> SessionRepositoryFilter<? extends ExpiringSession> springSessionRepositoryFilter(SessionRepository<S> sessionRepository) {\n        SessionRepositoryFilter<S> sessionRepositoryFilter = new SessionRepositoryFilter<S>(sessionRepository);\n        if(httpSessionStrategy != null) {\n            sessionRepositoryFilter.setHttpSessionStrategy(httpSessionStrategy);\n        }\n        return sessionRepositoryFilter;\n    }\n\n    @Autowired(required = false)\n    public void setHttpSessionStrategy(HttpSessionStrategy httpSessionStrategy) {\n        this.httpSessionStrategy = httpSessionStrategy;\n    }\n}\n```\n\nIf you are not using the `SessionDestroyedEvent` you can also disable subscribing to the notifications which should improve performance. For example:\n\n``` java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.BeanClassLoaderAware;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.ImportAware;\nimport org.springframework.core.annotation.AnnotationAttributes;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.data.redis.connection.RedisConnection;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.listener.PatternTopic;\nimport org.springframework.data.redis.listener.RedisMessageListenerContainer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.session.ExpiringSession;\nimport org.springframework.session.SessionRepository;\nimport org.springframework.session.data.redis.RedisOperationsSessionRepository;\nimport org.springframework.session.data.redis.SessionMessageListener;\nimport org.springframework.session.web.http.HttpSessionStrategy;\nimport org.springframework.session.web.http.SessionRepositoryFilter;\nimport org.springframework.util.ClassUtils;\n\n@Configuration\npublic class RedisHttpSessionConfiguration {\n    @Value(\"${spring.session.maxInactive ?: 1800}\")\n    private Integer maxInactiveIntervalInSeconds;\n\n    private HttpSessionStrategy httpSessionStrategy;\n\n    @Bean\n    public RedisTemplate<String,ExpiringSession> sessionRedisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, ExpiringSession> template = new RedisTemplate<String, ExpiringSession>();\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n\n    @Bean\n    public RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n        RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n        sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);\n        return sessionRepository;\n    }\n\n    @Bean\n    public <S extends ExpiringSession> SessionRepositoryFilter<? extends ExpiringSession> springSessionRepositoryFilter(SessionRepository<S> sessionRepository) {\n        SessionRepositoryFilter<S> sessionRepositoryFilter = new SessionRepositoryFilter<S>(sessionRepository);\n        if(httpSessionStrategy != null) {\n            sessionRepositoryFilter.setHttpSessionStrategy(httpSessionStrategy);\n        }\n        return sessionRepositoryFilter;\n    }\n\n    @Autowired(required = false)\n    public void setHttpSessionStrategy(HttpSessionStrategy httpSessionStrategy) {\n        this.httpSessionStrategy = httpSessionStrategy;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71490616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71492945", "body": "I do think that providing an embedded Redis solution would be very useful. However, I'm thinking it may be better to do this in Spring Data Redis since it is generally more applicable than Spring Session.\n\nThoughts @olivergierke ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71492945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71493348", "body": "How are you adding the Spring Session Filter? Can you provide your Spring Session / Spring Security configuration? Do you have a springSessionRepositoryFilter mapping in your web.xml or are you using `AbstractHttpSessionApplicationInitializer`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71493348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71514360", "body": "# tl;dr\n\nThanks for reporting this and providing a PR! This is now merged into master.\n\nYou could also work around this issue using the following:\n\n``` groovy\ncompile 'org.springframework.session:spring-session-redis:1.0.0.RELEASE'\ncompile 'org.springframework.boot:spring-boot-starter-redis'\n```\n\nThe advantage is that this allows Boot to manage as many of the dependency versions as possible\n\n# Details of the Problem...\n\nDigging into this a bit deeper so I could figure out how this issue got past our build...\n\n## Version Mismatch\n\nThe issue happens because Spring Boot 1.2.1's [RedisAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/v1.2.1.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java#L76) requires `RedisSentinelConfiguration` which is not available until Spring Data Redis 1.4.0\n\n## Why does Boot allow a version mismatch?\n\nSpring Boot is suppose to manage my versions for me. So how did this happen?\n\n### Boot Gradle only manages unspecified versions\n\nThis happens because Spring Boot's Gradle plugin currently only manages unspecified versions (not transitive versions). That means when using Spring Boot 1.2.1 that a configuration like this:\n\n``` groovy\ncompile 'org.springframework.session:spring-session-data-redis:1.0.0.RELEASE'\n```\n\nwill bring in Spring Data Redis 1.3.0 resolved from Spring Session Data Redis 1.0.0.RELEASE.\n\n### Additional Workaround\n\nYou could also work around this issue using the following:\n\n``` groovy\ncompile 'org.springframework.session:spring-session-redis:1.0.0.RELEASE'\ncompile 'org.springframework.boot:spring-boot-starter-redis'\n```\n\nInstead of using spring-session-data-redis, we only include spring-session and allow Spring Boot's starter pom to bring in all our Redis dependencies. I created #125 to improve our sample and documentation.\n\n### Spring Boot Gradle 1.3+ Adding Dependency Management\n\nSpring Boot 1.3 is currently scheduled to include the dependency management plugin which will ensure transitive dependencies are also managed. [See spring-boot/issues/2133](https://github.com/spring-projects/spring-boot/issues/2133).\n\n## How did it get past our Build?\n\nSo the question is...\"How did this get past our build?\"\n\n### Samples use Spring Boot 1.10\n\nWe do have integration tests and a CI build that verify all of the Spring Session samples work. This includes a Spring Boot sample. However, the Spring Boot sample is on 1.10 version of Spring Boot. Since you are using [Spring Boot 1.2.1](https://twitter.com/danveloper/status/559439175737282560) with spring-session-data-redis you are getting conflicting versions.\n\n### Spring IO Checks\n\nWe also certify that Spring Session works with Spring IO 1.1.1 versions (which means it should work with Spring Boot 1.2.1). More concretely, this means we re-run all the tests with the versions found in Spring IO 1.1.1. The reason this works is because the Spring IO plugin changes ALL of the versions to match the versions found in Spring IO. This means that even though we declare a dependency on version Spring Data Redis 1.3.0 within our build when we certify against Spring IO we ensure all the versions are Spring IO versions including Spring Data Redis. This means that our tests will pass.\n\n# Changes in Spring Session?\n\nSo what changes should we make to Spring Session? Initially we used Spring Data Redis 1.3.0 as we viewed this as the minimum version of Spring Data that could be used. This ensured that our tests ran against Spring Data 1.3.0 and then re-ran (when using Spring IO Checks) against the latest version.\n\nHowever, this does seem cause some headaches in transitive versions. It also does not make it easy to follow the best practice of being on the latest and greatest.\n\nUltimately, I think we should update all of our versions to match the Spring IO Versions #126 and then create additional testing to verify our minimum versions as described in #120 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71514360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71529179", "body": "@danveloper I'm glad you were able to work around  the issue. Thank you for your feedback and for the useful directions on enabling keyspace notifications in AWS.\n\nI have concerns with the configuration not failing when it tries to update the Redis configuration. \n\nDevelopers likely did thorough testing within another environment. For example, they might be integrating with WebSocket support and validate that when an HttpSession is terminated the WebSocket is indeed closing properly.\n\nThis means they are confident that everything is working by the time the get to production. Many users may not even notice a warning being logged. Without Redis keyspace notifications being enabled, the applications WebSocket connections will not properly closed when the HttpSession is destroyed.\n\nObviously developers should read the instructions completely, look for warnings, and perform some smoke tests in production to avoid such issues. However, I fear that by not failing we are setting up users for failure.\n\nA compromise might be to require users to explicitly set a property to allow \"fall back\". This means users would be aware that they need to do something in production. Of course this is one more piece of configuration users would need. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71529179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71529668", "body": "@dwelch2344 It looks like @danveloper has Spring Session working with Amazon ElasticCache. See https://github.com/spring-projects/spring-session/issues/124#issuecomment-71525940\n\nObviously we need to resolved #124 but does this get you what you need?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71529668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71549994", "body": "Great idea! I think this may be doable, but we will see when I get into the details. Thanks for your feedback!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71549994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71698715", "body": "Thanks for looking into this @ghillert I have reopened the issue\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71698715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71855095", "body": "Thank you for the report. This is a duplicate of https://github.com/spring-projects/spring-session/issues/65\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71855095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71861948", "body": "@yacota Thanks for your interest. At this time there are no concrete plans of when this integration would be made. Of course a good PR with proper testing would almost guarantee inclusion in the next feature release :)\n\nOne other question is...does integration between Spring Session & Security belong in Spring Security or in Spring Session? This will be something that we can easily change later, but it is something I may want feedback from @wilkinsona on.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71861948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71909453", "body": "Thanks for the report.\n\nAs you pointed out, at this time there is no integration with Spring Session and ServletRequestListener which means it is essentially a no go with Spring Session.\n\nAre their any particular reasons Spring Boot uses the RequestContextListener @philwebb or is this something that could be changed to use the RequestContextFilter?\n\nOne possible option for supporting something like this is to ensure you decorate the ServletRequestListener instead of using the ServletRequestListener directly. For example:\n\n``` java\npublic class RequestContextListener implements ServletRequestListener {\n    private ServletRequestListener delegate;\n\n    public void requestInitialized(ServletRequestEvent requestEvent) {\n        delegate.requestInitialized(wrap(requestEvent));\n    }\n\n    public void requestDestroyed(ServletRequestEvent requestEvent) {\n        delegate.requestDestroyed(wrap(requestEvent);\n    }\n\n    private ServletRequestEvent wrap(ServletRequestEvent e) {\n        return new ServletRequestEvent(e.getServletContext(), wrap(e.getServletRequest());\n    }\n\n    private ServletRequest wrap(ServletRequest r) {\n        return new SessionRepositoryRequestWrapper(...);\n    }\n}\n```\n\nThe problem right now is that `SessionRepositoryRequestWrapper` is private so would not work. \n\nI'm not sure if I really like this as an option since it seems like we should be able to use a Filter which already works. I guess it probably depends on what @philwebb replies with.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71909453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72040985", "body": "Thanks for the report!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72040985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72041254", "body": "Yes you must invoke setAttribute to invoke the save. This ensures that only attributes that have been updated are persisted to improve performance without the need for proxies.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72041254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72041786", "body": "Glad you found a workaround. If you are willing,  you might provide more details on your workaround on the referenced issue. This may help others to be able to use a similar work around.\n\nThanks again for reporting this!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72041786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72677826", "body": "@aravindanr Typically `MapSessionRepository` (in particular when using a HashMap) is used for testing purposes due to the fact that it does not work across a cluster.\n\n`MapSessionRepository` can be used in a cluster when using a distributed `Map` implementation (i.e. Hazelcast). However, to support session timeouts is very implementation specific so it is unlikely we will be able to support `HttpSessionListener` in the generic `MapSessionRepository`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72677826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72678187", "body": "@njariwala You would need to place it in the same package as illustrated in the [example above](https://github.com/spring-projects/spring-session/issues/124#issuecomment-71525940).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72678187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72683379", "body": "Thanks for the PR @dsyer! It does seem that the cookie should be set if the session id changes. \n\nCan you elaborate a little more on why one would want to always include the session cookie in the response? I wonder why the client would not just save the user information just like any other piece of data that they are requesting. Sending a response on every request seems to bundle unrequested data in the response. To me this feels like someone requesting /messages/ and getting back information related to /user/current in the response.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72683379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72686014", "body": "@IamFive Thanks for the report. We don't have a guide at the moment, but we do have a sample with XML within the latest SNAPSHOT. Can you see if [HttpSession XML](https://github.com/spring-projects/spring-session/tree/master//samples/httpsession-xml) within the [Samples of the latest SNAPSHOT](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#samples) helps you?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72686014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72692142", "body": "Thanks for the report and suggestion @damiancalabresi!\n\nSpring Session at its core (i.e. SessionRepositoryFilter) does not depend on anything but commons-logging and we would like to keep it that way. This ensures that we have a very light footprint for applications that are not otherwise using Spring.\n\nThe solution to your problem is to ensure that you add a  `RequestContextFilter` (provided by spring-web jar) after the `SessionRepositoryFilter` which will ensure that the `HttpServletRequest` is properly set. Is there a reason that this won't work for you?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72692142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72721644", "body": "@damiancalabresi Very good point on adding this use case to the documentation! I have created #137 to address this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72721644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72898692", "body": "@chrylis Yes this is considered a workaround until we can get a fix out. The alternative is to use the more verbose [workaround](https://github.com/spring-projects/spring-session/issues/124#issuecomment-71490616) I provided.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72898692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73382304", "body": "Thanks for your interest in Spring Session. Currently Spring Session does not support querying by a user identifier. Please follow #7 and #17 for possible improvements that would make this possible.\n\nThat mechanism would likely work. You would need to take into account that sessions can expire. Of course if you get something working, we'd love a pull request!\n\nI'm going to go ahead and close this. If you feel I didn't answer your question, feel free to reopen.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73382304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73520573", "body": "@shanewow Right now I'm not sure there is a good answer as to how to do that. We'd really like to keep the `RedisSession` private so that we can modify it as necessary without causing users any passivity issues.\n\nThe best solution I can come up with is to ensure that the username is populated in the session attributes. Then, anytime the `HttpServletRequest.getUserPrincipal()` changes ensure to save using another RedisTemplate a mapping of the username to the session id (which might contain multiple ids). This could all be done in a separate `Filter` and interacting with the generic `HttpSession` and `HttpServletRequest` API's.\n\nThe problem is to figure out how to clean up expired sessions from the username. I'm not quite sure how to properly go about this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73520573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73521947", "body": "Thanks for the report. We do have a sample application with Spring Session and Spring Security that is using session fixation that has no problems.\n\nCan you check to see if you have multiple SESSION cookies (i.e. one in / and one in /context-root)? This is known to cause strange behaviors.\n\nIf not do you think you can provide some more details? What container are you using? Are you able to provide a sample that reproduces the issue?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73521947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73728563", "body": "It appears someone else is having the same issue. See https://spring.io/blog/2014/11/18/spring-session-1-0-0-rc1-released#comment-1845628123\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73728563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73889622", "body": "@domdorn Thanks for your investigation! If you do find a solution a PR would be greatly appreciated. Note at the moment I am working full steam on getting Spring Security 4.0 out the door. As soon as I'm finished (later this month) I will return to Spring Session to get a 1.0.1 release out.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73889622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74009397", "body": "Can you please clarify what the issue is?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74009397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74014239", "body": "This is still very vague. Please provide a detailed explanation of your issue.\n\nNOTE: The docs do not state to first visit that URL. First you should already have a session. Then, you should visit that URL. Please try [Exploring the users Sample Application](http://docs.spring.io/spring-session/docs/current/reference/html5/guides/users.html#exploring-the-users-sample-application) and look at the cookies after you have added a second user.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74014239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74118453", "body": "@LeeMinKyu Thank you for the detailed explanation. Are the applications hosted on the same host port and context path? If not, the cookie will be isolated for each application instance.\n\nIf that doesn't help...Can you post the HTTP Response for when the cookies is set for each application?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74118453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74270630", "body": "The request/responses were not of the SESSION cookie getting set (the SESSION cookie was already present. Please submit the request/responses when the cookie was first set (hint clear out the cookies).\n\n> I find that if I access same server from different URLs , session id in cookie is not equal.\n\nYes this is how browsers work. If you get a session cookie from yourbank.com you do not want evil.com to be able to read or write to yourbank.com's cookies.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74270630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74271110", "body": "It sounds as though the load balancer is what is creating all the `HttpSession`s? If that is the case, can you setup the load balancer to hit a page that does not use the `HttpSession`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74271110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74271387", "body": "If you are interested in something like Tomcat's Crawler Session Manager Valve, please create a ticket to track that. I'm not guaranteeing we will create it, but it is best to have a distinct ticket to keep track of interest.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74271387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74441380", "body": "Can you post both the request/response for when the cookie was created please?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74441380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74777273", "body": "Thank you for your feedback and offer to help. My concerns with doing this are:\n- If a user uses a distributed map implementation, then they will likely expect that the event is fired on each node (like the Redis implementation)\n- We would also need to ensure the SessionDestroyedEvent is fired when a session expires\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74777273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75090799", "body": "Thanks for the additional details.. Spring Security is preferring to use the native method to change the session id rather than invalidating the session and creating a new one. I created #152 to address the issue.\n\nIn the meantime, you can explicitly use SessionFixationProtectionStrategy instead of ChangeSessionIdAuthenticationStrategy.\n\nIf you are using Java Config you can explicitly configure it using something like this:\n\n``` java\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .sessionManagement()\n                .sessionFixation()\n                    .migrateSession();\n    }\n```\n\nIf you are using XML based configuration you can specify the strategy with something like:\n\n``` xml\n<http ...>\n    <session-management session-fixation-protection=\"migrateSession\"/>\n</http>\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75090799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75124821", "body": "I am trying the sample you posted and it appears to work for me in the latest Chrome & Firefox on OSX.\n\nSpecifically, I perform the following steps:\n- Open http://localhost:8080/\n- Enter in user / pass\n- I see the \"Secured Content\" page\n- I log out and see the \"You have been logged out\" message\n\nIt appears I am doing something different. What browser/OS are you using? Did you try in incognito mode? Did you try clearing cookies before hand?\n\nOne thing that I noticed is that your sample shows a context root of /security-sessionmanagement This might explain what is happening. You may have two cookies present (one at / and one at /security-sessionmanagement). If that is the case, perhaps the wrong one is being used.\n\n```\n> I'm actually trying to disable it as a whole, with\n>\n> <http ...>\n>    <session-management session-fixation-protection=\"none\"/>\n> </http>\n> but it does not work, as the code does not check for the \"none\" keyword.. \n```\n\nCan you elaborate on this? I have some [tests](https://github.com/spring-projects/spring-security/blob/fb085cae25adcf2ae584ad85c708fc1630c20865/config/src/test/groovy/org/springframework/security/config/http/SessionManagementConfigTests.groovy#L371-L393) that verify it is working correctly. Perhaps you have found a case that is not covered by my test? In short, can you provide more details on how it is \"not working\"?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75124821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75155243", "body": "Thanks I'm closing this in favor of #154 since we do not want the always send cookie flag. I'll cherry-pick the commit and apply it to #154.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75155243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75158662", "body": "Thanks for your patience as I worked on reproducing this issue.\n\nI was able to reproduce it. The issue happens if you have a cookie with the name SESSION with an invalid id.\n\nIt did not happen to me before because I started with a browser with no cookies. I also log out any time I log in (good habits die hard) which means when I restarted the application server I had logged out and thus the cookie was removed.\n\nPlease try again with the latest snapshot and see if that resolves your issue. Please confirm it works. If it does not please reopen this issue.\n\nThanks again for taking the time to make Spring Session better!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75158662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75253179", "body": "Great! Let me know how it goes :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75253179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75574385", "body": "Thanks for the PR! This is merged into master now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75574385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75574465", "body": "Thanks to a PR from @domdorn this should now be resolved in master!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75574465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75576414", "body": "In my opinion, we don't want to have a sample for every permutation of Spring Security (or other projects). If we did this, we would have way too many samples.\n\nInstead, I believe we need to highlight deltas in Spring Session. So the question I'd ask is \"How does _Spring Session_ use change between the basic Spring Security / Spring Session example and this sample?\"\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75576414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75576660", "body": "Wow! You have been real busy! Thanks again for the PR! Keep up the great work :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75576660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75588008", "body": "Thanks for the fast response. I like the idea of having a basic XML based example of using Spring Security and Spring Session. If you can update the sample to leverage only the basics of Spring Security and to rename the project to security-xml I can merge in the project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75588008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75588744", "body": "Thanks for the report.\n\nI believe Tomcat leaves the session alone if it is an invalid session id and the HttpSession is not requested, so I'm confused why this is a problem with Spring Session. Can you provide a sample of this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75588744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75632745", "body": "Why not just create a new session and delete the previous one? This is only two lines of code and does not involve adding another method to the Session API.\n\nPerhaps you can you explain your use case a little better?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75632745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75771473", "body": "_bump_ @olivergierke \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75771473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75772237", "body": "@manderson23 Thanks for offering to document this! There does not need to be a sample application, but I think we should have an example of how to customize it in both XML and Java configuration within the reference. Please note that all code should be tested too. You will find the code from the reference is in [docs/src/test/java/docs|https://github.com/spring-projects/spring-session/tree/master/docs/src/test/java/docs] and then the reference includes the code that has been tested.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75772237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75851637", "body": "The dependencies for Spring WebSocket are optional, so they should not impact the version of Spring that is necessary (in fact at its core Spring Session does not require Spring at all).\n\nWhat specifically are you having trouble with when using Spring Session with Spring 3 (and which exact version are you using)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75851637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75909696", "body": "@manderson23 Thanks for the fast response! Go ahead and create a new PR with multiple commits (i.e. one from @llambda and one from yourself with the additions). Once we accept the other PR we can close this one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75909696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76001605", "body": "I guess my question is...how does app 1 and app 2 see the same session id? Spring Session typically stores the session cookie in a cookie with a path of the context root. So this means that the session id for app 1 should not be visible to app 2.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76001605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76017698", "body": "> I know, that a \"good\" rest service should be state free, but sometimes real life doesn't allow this.\n\nA \"good\" REST service should have no state in the server. The state is transferred into data stores (i.e. a database). So I think this is perfectly reasonable.\n\nIf someone disagrees with you...ask them \"If the client truly had all the state, what would be the point of communicating with the server?\" No one complains when a REST service stores application data in a data store, why this hang up with Session? The reason I have found is that Session typically has historical connotations that makes people uneasy (likely due to using it wrong).\n\n> So, maybe my original question isn't so stupid.\n\nHopefully I didn't come off condescending (it was not my intention). I was not trying to imply the question was stupid. I'm just wanting to understand the problem before we try to solve it :)\n\nThe more I think about it, the more I agree that developers may need to isolate Spring Session for their application without requiring another database.\n\nCan you create a ticket that we can use as an enhancement request to support Session Isolation?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76017698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76193651", "body": "Sorry I was not more explicit. Spring Session uses [GitHub](https://github.com/spring-projects/spring-session/issues) to manage tickets. I realize this is technically a ticket, but this is more of a discussion than a specific request to have a single redis instance in our tracking. If someone read the heading of this issue in release notes, it would not really clue them in as to what the new feature is. \n\nI'd create it myself, but I have found typically it is best to have the person with the request create it because we don't get lost in translation.\n\nThanks again for your feedback on Spring Session!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76193651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76225202", "body": "Great glad it is working for you!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76225202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76225314", "body": "Thanks @cscheffel !\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76225314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76226600", "body": "This is indeed a Spring Security question. You really need to be careful disabling CSRF if the application is used within a browser. See http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/#when-to-use-csrf-protection\n\nIf you still have questions, this is a better question for StackOverflow with the spring-security tag. If you don't get a response within a 3 days feel free to mention me on StackOverflow to get my attention.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76226600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/77594206", "body": "@domdorn Thanks for the quick responses. I am rather busy with getting Security 4.0 GA out right now so haven't had time to look at Spring Session. \n\nAfter Security 4.0 GA I will be focusing on a 1.0.1 release. We will make sure something gets in 1.0.1 to resolve your issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/77594206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/77983537", "body": "Not really. It is pretty much the same idea as the users sample but instead of authenticating with multiple users (via some external mechanism) impersonation is done. The reason it is different is that the sudo is external of Spring Session (it does not care about how the user is authenticated).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/77983537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82414240", "body": "Thanks for the report. This is due to the fact that the Windows Version was not updated. Can you help out on https://github.com/kstyrc/embedded-redis/issues/23 to provide feedback on the fix?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82414240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82415190", "body": "@szabobar Let's track this issue further on #174 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82415190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82416628", "body": "@szabobar What version of Redis are you using? You need to use at least Redis 2.8.0+ since we rely on [Keyspace Notifications](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-expiration).\n\nAdmittedly this is not obvious so we have #115 to make it more apparent.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82416628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82434898", "body": "@szabobar Thanks for the fast response. Do the samples with the embedded Redis work on Windows? If not, we still have an issue and we should probably reopen this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82434898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82435107", "body": "(reopening for now to ensure this doesn't get lost)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82435107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82439843", "body": "@t4gedieb Thanks for the response. Can you respond to @kstyrc on kstyrc/embedded-redis#23 so that we can get the Windows version updated too?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82439843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/83761184", "body": "@danyunfu Thanks for the report. Can you provide any additional details so I can reproduce it? How are you deploying it to Tomcat? Which version of Tomcat are you using? Are you just running it using Spring Boot and Gradle?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/83761184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84053252", "body": "@Listick Thank you for the report. I will begin looking through Spring Session issues as soon as I get Spring Security 4.0 GA out within the next week. Until then I need to stay focused. Expect a reply in the next week.\n\nIn the meantime, you might try to outline detailed steps of the problem that include:\n- What steps do I need to take (perhaps using one of the sample applications)\n- What is the _incorrect_ outcome of the steps that you are experiencing?\n- What is the _expected (fixed)_ outcome of the steps?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84053252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86345713", "body": "@derylseale  Are you able to provide a sample that we can use to reproduce this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86345713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86345760", "body": "@chrylis Thanks for the feedback. This is useful to know that it is working for some and not others.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86345760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87677562", "body": "@sreekanthsnair This will likely be scheduled for a 1.1. For now you can implement a modified version of [CookieHttpSessionStrategy](https://github.com/spring-projects/spring-session/blob/2d8664d84119d663a525ca6f0b2d86cd60cd09f4/spring-session/src/main/java/org/springframework/session/web/http/CookieHttpSessionStrategy.java) and provide it as a Bean.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87677562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87684651", "body": "@egov-systems For now those that need to set the cookie path can implement HttpSessionManager themselves. The implementation will look strikingly similar to CookieHttpSessionStrategy, but with the ability to set the cookie path. You will then need to provide it as a Bean.\n\nIn a future version of Spring Session (quite likely 1.1) we will provide this functionality out of the box and you can delete your custom implementation and leverage the built in support.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87684651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87698880", "body": "@domdorn To be honest, I just haven't had a lot of time to look at it. In order to avoid too much context switching, I typically work for a set period of time on one project. Then work for a set time on another, until I rotate through the projects I work on.\n\nI will be focussing on a patch release for Spring Session within the next week. To be honest, I probably need to figure out a better system on how I manage open source contributions, but I haven't found a better system yet (suggestions welcome :) ).\n\nIn terms of why it is scheduled for 1.1 vs 1.0.1 we try to be pretty strict on including only bug fixes in patch releases to ensure that upgrades go as smoothly as possible. You can learn more about the versioning here https://apr.apache.org/versioning.html\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87698880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88099588", "body": "@andirdju Thanks for your thoughts. I think this is quite a bit different:\n- Hibernate would fail to store any data if the schema is not created. The failure would be obvious to anyone who tested the application\n- If Redis is not configured correctly, the sessions would still be created. The failure is that session timeouts would not be handled properly (causing a security vulnerability) The failure would not be obvious unless someone waited until the session timed out and verified it cleaned up the related resources (i.e. websocket connections)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88099588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88131824", "body": "Thanks for the PR! This is now merged into master\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88131824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89052142", "body": "Thanks again for the report and the example. This is a duplicate of #152\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89052142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89053142", "body": "@domdorn Any updates on this? Can you provide a stacktrace, steps to reproduce, or a sample? Is this fixed via #154?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89053142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/90555791", "body": "Thanks for the report @prasenjit-net This is indeed a duplicate of #152 Please give the 1.0.1.BUILD-SNAPSHOT a try from https://repo.spring.io/snapshots and let me know if you are still having problems.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/90555791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/90651205", "body": "Thanks for the response. I am unable to reproduce this. Please create a new ticket if you are able to reproduce.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/90651205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/91364066", "body": "@thomasdarimont Thanks for the response. Do you consider kstyrc/embedded-redis#30 a show stopper for including support in Spring Data Redis? I think we could enhance the Spring Data support to use a specific version later on. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/91364066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/7221332", "body": "@cemo Thanks for trying Spring Session and for your feedback. It is removed from the interface because this is an implementation detail and not something that should be on the interface itself. With that in mind it may make sense for me to update the MapSession implementation to also implement Serializable. Would this help alleviate your problem?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/7221332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9280786", "body": "Thanks for pointing this out @dsyer . To be honest it was because I wasn't aware that Spring Boot created the RedisConnectionFactory (I had thought I tried this at one point and it didn't work but perhaps it was something I did incorrectly). Do you mind logging a ticket (or sending a PR) and we can update the sample and guide?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9280786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9565918", "body": "@Bessonov Thanks for pointing this out. This reported and fixed in https://github.com/spring-projects/spring-session/issues/96 You will find that the [current SNAPSHOT](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/rest.html) the formatting is fixed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9565918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/12769644", "body": "Thanks for catching this. It will actually 1.1. However, this still needs fixed :) Thanks again\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/12769644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/13550549", "body": "@shakuzen Thanks for pointing that out. I have changed `@since` to 1.1. See a48864bf207fd2b0d98d33a2fc01e5456ca6d8c7\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/13550549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14864366", "body": "Can you expand on why you think the \".\" should be specified automatically rather than by the user? It seems the way it is provides more flexibility (i.e. the separator can be anything without the need for an extra property).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14864366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14864568", "body": "That is a good point. I created #326 to address this. Thanks for bring this up!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14864568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281446", "body": "@vpavic I would love that :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281635", "body": "@vpavic Awesome! If you are feeling ambitious I'd love to see a PR that sets up Eclipse on import with the correct settings too. Something similar to what Spring Framework does https://github.com/spring-projects/spring-framework/tree/master/src/eclipse\n\nUPDATE: This is now done via #417\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281957", "body": "@vpavic Not a problem. If you could set it up for IntelliJ that would also be nice :) If not, I will certainly be happy with what I can get :-D\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16281957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37233839", "body": "Thanks for the comment. Spring Security does something very similar and it works within OSGi, so this shouldn't be an issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37233839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37234018", "body": "Thanks for your comment. You are right that in many instances it is preferable to have a static class. However, this won't work since the `SessionRepositoryRequestWrapper` is non-static. The reasons `SessionRepositoryRequestWrapper` is non-static is because it needs a reference to the type argument of `SessionRepositoryFilter` to be type safe.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37234018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37488761", "body": "The class and test should likely be renamed to something like HazelcastSpringTest (it would reflect the name of the sample that you choose).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37488761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37488834", "body": "Since this sample relies on Spring, you could leverage Spring's SocketUtils to generate the port\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37488834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37488896", "body": "Master has a newly added `@EnableSpringHttpSession` which will take care of the `SessionRepositoryFilter` and adding a `SessionEventHttpSessionListenerAdapter`. It also allows defaulting and overriding `HttpSessionStrategy`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37488896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37773008", "body": "> Would it be better to have a default of -1 (to indicate it should be ignored)\n\nI don't like the idea of -1 because in terms of HTTP Servlet specification that means do not expire. From the http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpSession.html#getMaxInactiveInterval()[Javadoc]:  \"A negative time indicates the session should never timeout.\"\n\n> change to an Integer and make the default for this null\n\nUnfortunately Annotations cannot have a type of Integer and they cannot have a default value of null. Are we able to read the configuration that was provided and if it was specified in the configuration, then do not use the value in the annotation?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37773008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37861378", "body": "@shakuzen \n\n> I'm leaning more towards having to change the default attribute value to 0 to match to default of maxIdleSeconds. \n\nHazelcast can be used for many things, so setting it to 0 may make sense when there is no context. However, when considered for an HttpSession we should be conscious that the default needs to be secure. A default that prevents expiration is not what I would consider secure.\n\n> Then the user can configure it themselves and we will only override if a value is passed to maxInactiveIntervalInSeconds. Though this is different than the Redis configuration, I believe. So we have to choose to play it safe and avoid overwriting the user's configuration, or maintain consistency with the equivalent Redis configuration.\n\nI'm wondering why this needs to be configured externally vs using the annotation. Can you elaborate?\n\nOne option is we could make the maxInactiveIntervalInSeconds attribute a String. If the value was \"\", then we would use the value configured externally. The default would still be 1800 to preserve a secure by default setting. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37861378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37862730", "body": "@manderson23 Does my proposal sound like it will work for you? Specifically something like this would ensure the value configured externally would be used:\n\n``` java\n@EnableHazelcastHttpSession(maxInactiveIntervalInSeconds=\"\")\n```\n\nAnother advantage to using a String is that users can leverage Spring properties (i.e. `${session.timeout}`) for configuring the timeout as well. Of course the disadvantage is that a String is not necessarily a number.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37862730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37863039", "body": "`@ConditionalOnMissingBean` only exists in Spring Boot, so we likely shouldn't include that in our Javadoc (that will confuse users who do not leverage Boot).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37863039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37877266", "body": "At least for now, lets not provide a public constant. Stating empty String in the javadoc should be sufficient since it is very easy to reproduce.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37877266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46740058", "body": "Is there good reason to have a base class right now since we only have a single repository? If not, could this be folded into a single implementation or made package private for now? This will allow us to more flexibility when updating. Of course if there is good reason for this being made available I'd like to understand why.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46740058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46740342", "body": "A note that we will need to update how we do the principal when we fix #301. The reason is that I think we will be making it so that any attribute can be indexed, so interface for finding by a session attribute will be more generic. Perhaps something like `findBySessionAttr(String name, String value)`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46740342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46740560", "body": "If we fold into a common base class, we can use GemFireSession directly rather than having to wrap the value passed in. Alternatively, the base class could be made generic.\n\nThis also allows for customizing when the session gets persisted. For example, we might have the ExpiringSession object itself perform the writes if users want immediate writes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46740560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46742148", "body": "I'm wondering if this is writing every attribute every time. If so, is there a way to only write the updates? This will increase performance a lot and will handle race conditions better. For example:\n- Assume we have a Session with the attribute of username\n- Thread1 - starts to process a request to get a protected resource. The username attribute is present in the session.\n- Thread2 - processes a request to log the user out (remove the username attribute).\n- Thread2 - The username attribute is removed from the session and Redis is updated to reflect the username is removed\n- Thread1 - the request finishes and the Session is updated to include all of the original Session attributes. This means the username is now set in the Session which indicates the user is logged in. However, the user should be logged out.\n\nIf we were to write only the delta, this would not be an issue. However, writing every attribute every time alleviates problems like #311\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/46742148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/51327697", "body": "@jvalkeal What issue were you having exactly? This looks exactly like the way I would solve the issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/51327697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52239692", "body": "@artembilan This is a convention that is used in Spring Session to distinguish between integration tests and unit tests. Otherwise we will get collisions in the class names.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52239692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52240543", "body": "@artembilan Not a problem at all! All feedback is welcome...keep it coming :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52240543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52240386", "body": "@artembilan Thanks for the feedback! That is a good point :) I created #358 Any chance you  (or anyone else) could send a PR?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52240386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53859649", "body": "Rather than first querying and then deleting this could just be a delete which would prevent loading all the session ids in memory and reduce overhead on the database.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53859649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53859793", "body": "I think I would prefer to use private static final Strings here\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53859793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860075", "body": "Unfortunately, this will not publish the ApplicationEvent for every node in the cluster. For this reason, I think we should just not publish the event and establish this as a limitation of the datastore.\n\nThis ties in with why we can simply perform a delete rather than looking up the session id first.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860177", "body": "NOTE: See https://github.com/spring-projects/spring-session/pull/379/files#r53860075\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860623", "body": "@vpavic Thanks. See https://github.com/spring-projects/spring-session/pull/379/files#r53860177\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860753", "body": "I should be more clear. I'm not sure I like the enum. I would only use Strings as this aligns with Spring coding conventions.\n\nEDIT: Eventually we may make these injectable queries too which would make the Enum difficult to work with.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53860753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54487823", "body": "Is this necessary?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54487823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54519807", "body": "`@Override' on interface methods won't compile in Eclipse. Please remove this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54519807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54519887", "body": "If we keep this, need to add `publishEvent` to work with Spring 4.2.x (which we now compile with).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54519887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54519991", "body": "I agree with @copa2 about [the table prefix](https://github.com/spring-projects/spring-session/pull/379#issuecomment-189323488).\n\nIf you need to allow customizing the queries, then allow the entire query to be injected.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54519991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54520032", "body": "This won't be available to all JVM instances which is inconsistent with the way Spring Session works. We should probably remove this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54520032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54520161", "body": "If we change to using Strings for the queries, then this can be simplified. For example, we won't need queryCache. We won't need to [worry about concurrent access to queryCache](https://github.com/spring-projects/spring-session/pull/379#issuecomment-189323488). In fact, this method could be deleted.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54520161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54520881", "body": "We should probably use interface type declaration for deserializer and serializer\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54520881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521709", "body": "Move `SPRING_SECURITY_CONTEXT`  to PrincipalNameResolver since that is the only place it is used\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521799", "body": "I'd also default the table to SPRING_SESSION to be more explicit\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521956", "body": "Change to `Converter<byte[], Object>`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521981", "body": "Change argument type to `Converter<Object, byte[]>`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54521981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522405", "body": "At some point in the javadoc we should probably include the default schema that should be used with this.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522467", "body": "It would probably be good to have some sort of optimization to allow only updating the lastUpdateTime if that is all that was changed. This would be beneficial so that the entire Session does not need to be serialized every time.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522638", "body": "Change to `RowMapper<ExpiringSession>` (this will involve changing all the references to `MapSession` too).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522715", "body": "Let's use `springSessionJdbcOperations` as the qualifier.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54522715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54569794", "body": "> In that case, users would need to provide custom queries just to the change table prefix. Consider the case where there are multiple apps sharing the same database schema - in order to avoid conflicts only the table prefix needs to be changed. Forcing users to provide custom queries in that case is a configuration overkill IMO.\n\nWe probably wouldn't advice placing something like session in a shared database (although this would still be possible with a little bit of work). Typically different applications would use different username / password for their database connection. The different users could have different default schema which would isolate the sessions.\n\nWe could certainly create a separate ticket for adding a table prefix and see if it gets enough votes, but don't think we'd add something like this in an initial release (once we add something it cannot be removed).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54569794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54738077", "body": "@vpavic Thank you for your response. Would a table name work (vs just a prefix)? We could have a setter that contains modifies the table name of every query (only if they are using the default queries).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54738077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53698652", "body": "Do we actually need these resources?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53698652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699077", "body": "I prefer not to expose this logic for reasons explained in #372 Please move this logic within the mongo package and make it package scope or private.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699394", "body": "`@Override` on interface methods will not compile in Eclipse since we are needing to work with older JDKs. Please remove any `@Override` for interface methods so this compiles.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699588", "body": "Please restore this being final\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699722", "body": "Please rename to `MongoHttpSessionConfiguration` to match existing naming conventions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699921", "body": "Please rename to MongoOperationsSessionRepository to match existing naming conventions\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700324", "body": "Did you consider creating a dedicated MongoSession object that used the [Spring Data Mongo Repsitory](http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#repositories)? Is there a reason to use the DBObject directly? I'm wondering if using the repository support might make it easier to customize things like serialization.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700479", "body": "Is there a reason to remove the `-` from the id?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700670", "body": "It may be good to have an expiration on the actual object as well to ensure that if the application is down when sessions expire (then brought back up) that the sessions are still cleaned up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700880", "body": "Unfortunately this event will not be published across all nodes. This means that we don't really get the expected support. Perhaps (at least for now) Mongo support just doesn't support events (this is allowed).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53700880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53701048", "body": "It seems like there should be some existing API (either in Spring Core or Spring Data Mongo) that we could use rather than writing our own. Have you looked into this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53701048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53701774", "body": "Thank you for pointing this out. I noticed that and included that detail in my summary https://github.com/spring-projects/spring-session/pull/371#issuecomment-187409315 (along with an issue to get the boot sample fixed). \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53701774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704558", "body": "First it appeared unnecessary for the changes that were made. Does anything need this change right now? Second by keeping it final we are able to change certain implementation details without worrying about passivity.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705573", "body": "Would it be possible to provide [a custom MongoConverter](http://docs.spring.io/spring-data/data-mongo/docs/1.7.2.RELEASE/reference/html/#mongo.custom-converters) to work around this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706282", "body": "Ok that makes more sense then.\n\nWould you be interested in contributing the FST serialization in a separate PR and making the class non-final in that PR rather than this one? If so, can you create an issue to track that? Thanks for considering this!\n\nNOTE: You might hold off on sending that PR till we get some of the other comments sorted out so you don't have dual maintance.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706955", "body": "Please keep in mind that I am new to Mongo, so this might not work...\n\nIt seems you might be able to use  `Converter<ExpiringSession, DBObject>` and `Converter<DBObject,ExpiringSession>`. This would be implemented similar to `MongoSessionSerializer` using JDK serialization?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53707415", "body": "I would like to keep it in a distinct PR so we can keep track of why we are making changes.\n\nIn regards to getting FST in the Spring IO platform...I believe optional dependencies do not need to be in Spring IO Platform.\n\ncc @wilkinsona \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53707415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53710600", "body": "Yes please remove that.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53710600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53858849", "body": "Thanks @wilkinsona For some reason I thought the Gradle plugin only checked runtime and not optional scopes.\n\nWhat are your thoughts on adding FST as a dependency to Spring IO Platform?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53858849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54475396", "body": "Can we make this package scope?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54475396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54476291", "body": "In the other implementations the configuration is in a distinct package to keep configuration distinct from that of the code actually doing stuff. This ensures we do not have any web based dependencies in `org.springframework.session.data.gemfire` (they are all in sub packages). Do you have a good reason for putting this in the same package? If not, it probably makes sense to move this and other configuration related classes into `org.springframework.session.data.mongo.config.annotation.web.http`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54476291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54476412", "body": "We should probably introduce setter methods for each of these member variables (including the non-autowired members) and perform `@Autowire` on the setter method. This ensures users can still use XML based configuration by allowing them to create an instance of `MongoHttpSessionConfiguration` and set the properties.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54476412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54476609", "body": "Spring Session uses commons-logging (same as Spring Framework).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54476609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54477447", "body": "These to fields should likely be on a parent interface of  `StandardMongoSessionToDBObjectConverter` and `StandardDBObjectToMongoSessionConverter` since they only make sense if those `Converter`s are being used.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54477447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54478162", "body": "The typical pattern Spring Session follows is required dependencies are constructor injected and anything that has a default is a setter method.\n\nSince we have a default for everything but the MongoOperations, I think it makes sense to move all the other dependencies to setter methods.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54478162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54478894", "body": "I'm guessing `getPrincpalQuery` is necessary so you can customize the field name of principal, but I'm not very keen on this since the user would need to override this if they used another `Converter`. I'm trying to figure out what the right answer is here since you did originally have the strategy aware of the principal name attribute.\n\nPerhaps the right answer might be to keep `MongoExpiringSession` public (but mark final) and allow the Converter to inject the query on the `MongoExpiringSession`. The `MongoSessionRepository` already requires `MongoSessionRepository` so it could obtain the query from the `MongoExpiringSession`. This way all the query information is kept within the converters. The one thing we might change is for the API on `MongoExpiringSession` to have a method to lookup the query by index name.\n\nI'm not entirely convinced of this, so please let me know your thoughts.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54478894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54482268", "body": "I'm thinking rather than injecting two `Converter` implementations we should require a `GeneircConverter`. This would allow for a few benefits:\n\n1) It would allow the same class to serialize and deserialize.\n2) It would allow for converting other types (if necessary) in the future without adding more setter methods.\n3) Likely we could experiment with registering the default Spring `GeneircConverter` so any hooks for automatic conversion are included with this feature.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54482268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54482360", "body": "Very minor, but test names should end in Test**s**\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54482360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54484495", "body": "@jkubrynski Awesome! We could probably send the Jackson serialization in a new PR so we can keep making progress on this. I hope to be rather responsive on this until we finish up.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54484495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54492478", "body": "Yes please. The defaults in the implementation would be nice so that users that manually instantiate get the same defaults. This would also allow keeping these defaults package scope while moving the configuration to a distinct package.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54492478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54602513", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54602513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54605667", "body": "I think we should allow the user to inject the queries as well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54605667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54724587", "body": "I see your point there. However, I'm quite reluctant to provide our own serialization APIs. Perhaps we can extend `GenericConverter` and have it contain a lookup method for the queries. This ensures that we have all the conversion logic and queries in the same API but yet reuses the existing Spring infrastructure. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54724587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54960292", "body": "I think we should make\n\n`Query getQueryForIndexName(String indexName)`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54960292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54960906", "body": "The more I think about this the less I like it because it is a one off. How is the index for principalName created? Perhaps we should have a method like:\n\n`List<Index> getIndexes()`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54960906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961177", "body": "The package should be `org.springframework.session.data.mongo.config.annotation.web.http` to isolate the web based dependencies (there may eventually be an EnableMongoSession annotation for things like Spring Batch which don't have HTTP).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961434", "body": "@jkubrynski We won't be able to change the method signature on a public interface once we go GA. Therefore, I think we should probably make this a little more generic.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961542", "body": "Again we won't be able to change a public interface once we go GA. Therefore, I think we should probably make this a little more generic.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/55520558", "body": "It would probably be good to use an include pointing to the actual classpath resource files we use.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/55520558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57244972", "body": "Just curious why `@DirtiesContext` was necessary\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57244972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57586877", "body": "Is there a reason that we cannot just set and get the lastAccessedTime on the delegate?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57586877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57588692", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57588692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57898205", "body": "Is this necessary with newer versions of Boot? I thought this was automatically setup to `/h2-console` via `H2ConsoleAutoConfiguration`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57898205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57898336", "body": "Can we add no format tags around these methods so they are formatted correctly?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57898336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57902670", "body": "Happens to me sometimes too. It just shows you are a long time Boot user :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57902670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57903055", "body": "> On a sidenote - websocket sample could also be changed to use auto-configuration for H2 console.\n\nGood point! I created #457\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/57903055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58946868", "body": "Can we just use services as shown https://docs.travis-ci.com/user/database-setup/#CouchDB\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58946868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58947992", "body": "Can you demonstrate with Maven like the other examples?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58947992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58948158", "body": "Is there a reason for having a global namespace? In general, I'm not sure I like the additional complexity of this (not to mention none of the other implementations support this).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58948158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58948967", "body": "We use commons-logging (like Spring Framework)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58948967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58949828", "body": "I don't think this should be needed. I think this is probably due to the global support which I think we should remove. If we do add global session support, we would move it to a different PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58949828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58949883", "body": "This package should not depend on servlet dependencies.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58949883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58950187", "body": "I don't think we should have a couchbase specific API here. We could use something like Spring's converter APIs to convert the values.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58950187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58951111", "body": "These changes should be in a distinct PR\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58951111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58951177", "body": "These changes should be in its own PR\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58951177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58951418", "body": "Is there a reason we need a distinct `CouchbaseDao`? Perhaps this would be better in the `CouchbaseSessionRepository`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58951418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968392", "body": "Right but you will notice that none of the other repository implementations have web dependencies in them. Doing this will cause [package tangles](http://structure101.com/blog/2008/12/software-erosion-and-package-tangles/).\n\nI really think we need to consider global namespace as its own thing as a PR to add new repository should not contain web dependencies nor should it change anything out of its package structure.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968422", "body": "Thanks. I think eventually we should do Gradle too, but most people that know Gradle syntax know Maven. However, people that know Maven don't know Gradle.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968446", "body": "Thanks for pointing that out. I did not read carefully.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968547", "body": "If we are going to consider global namespace, it will need to be a distinct ticket and PR. We don't want to change too much in one ticket / commit as this makes troubleshooting difficult.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58968547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/59037779", "body": "Thanks! Lets first create a ticket and discuss if this is something we want to add to Spring Session. It is quite likely a useful feature, but I'm not entirely convinced Spring Session is the right place for it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/59037779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60231859", "body": "Should have an `@After` that closes the context\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60231859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224847", "body": "I don't think we need isNew because when it is new the id has changed\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224916", "body": "Make this package scope\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64225120", "body": "Rename to `markUnchanged`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64225120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77393231", "body": "User's might be a bit surprised to find out if the manually invoke `setConversionService` and then `setClassLoader` that the `ConversionService` is overridden.\n\nPerhaps a better approach could be to remove the `setClassLoader` method and have the configuration class create a default `ConversionService`  with the appropriate `ClassLoader` if the user has not explicitly provided one.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77393231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67931214", "body": "What do we do if it supports multiple indexes?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67931214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67931537", "body": "Perhaps the input should just be the session and the result that has a mapping of index name to index value. Is there any advantage in only supporting a single session attribute?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67931537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67954705", "body": "How would implementations that support multiple indexes (i.e. Gemfire) use this API?\n\nThe SessionRepository could keep all the index names that need indexing. However, that means the SessionRepository and the IndexResolver configuration need to be kept in sync which is not ideal.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67954705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68055654", "body": "> either using a CompositeIndexResolver or some other way.\n\nThis requires another API because the current interface must have knowledge of the index name.\n\n> If you would go the input should just be the session and the result that has a mapping of index name to index value route then you wouldn't be able to reuse this logic.\n\nWhy not? Seems you could do this:\n\n``` java\n\npublic interface IndexResolver<S extends Session> {\n    Map<String,String> resolveIndexes(S session);\n}\n\npublic class PrincipalNameIndexResolver<S extends Session> implements IndexResolver<S> {\n    private SpelExpressionParser parser = new SpelExpressionParser();\n    private String indexName = FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME;\n\n    public String resolvePrincipal(Session session) {\n        String principalName = session.getAttribute(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME);\n        if(principalName != null) {\n            return principalName;\n        }\n        Object authentication = session.getAttribute(\"SPRING_SECURITY_CONTEXT\");\n        if(authentication != null) {\n            Expression expression = parser.parseExpression(\"authentication?.name\");\n            return expression.getValue(authentication, String.class);\n        }\n        return null;\n    }\n\n    @Override\n    public Map<String, String> resolveIndexes(S session) {\n        String index = resolvePrincipal(session);\n        if(index == null) {\n            return Collections.emptyMap();\n        }\n        return Collections.singletonMap(indexName, index);\n    }\n}\n\npublic class GemfireIndexResolver<S extends Session> implements IndexResolver<S> {\n    private PrincipalNameIndexResolver<S> principalResolver = new PrincipalNameIndexResolver<>();\n\n    @Override\n    public Map<String, String> resolveIndexes(S session) {\n        Map<String, String> gemfireIndexes = resolveThem(session);\n        gemfireIndexes.putAll(principalResolver.resolveIndexes(session));\n        return gemfireIndexes;\n    }\n\n    private Map<String, String> resolveThem(S session) {\n        // TODO\n        return null;\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68055654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68070034", "body": "> Each FindByIndexNameSessionRepository implementation holds the knowledge of its supported indexes anyway, doesn't it? \n\nIt does. Introducing this new API we have yet another API that needs to be aware of the index names and be kept in sync. The proposed change allows all the index logic to be moved into the new resolver api.\n\n> Your GemfireIndexResolver will get messy once other IndexResolver resolvers get in there too since you're relying on the concrete IndexResolver implementation.\n\nHow would this be cleaner with the original design? Either way you would need to have that specific functionality.\n\n> you'd really like to run the resolving for all the indexes and then extract the single value you're interested in instead of current \n\nWhen are we interested in only a single index?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68070034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68112472", "body": "Most the time I want to write all the index's (that have changed) to the data store. This could easily be done with the suggested changes.\n\nIf I'm looking up an index, then the user provides the index name and the index value so I do not need to resolve anything.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68112472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68309720", "body": "> It's basically a wrapper around an IndexResolver\n\nRight, but the logic to resolve the index would be able to be reused. This is the goal. If we need adapters to translate the results of the IndexResolver into implementation specific code this is much easier than rewriting the code for resolving the indexes.\n\n> What are you thoughts on making it a part of FindByIndexNameSessionRepository?\n- This interface is already GA, so we cannot add a new method on it\n- I don't think this is the right place for it. User's do not care what the indexes are. It is the internal implementation that cares about the indexes. So the `FindByIndexNameSessionRepository` implementation would have an `IndexResolver` injected into it.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68309720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224317", "body": "I don't think we need isNew. When the MapSession is new, the id has changed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224461", "body": "Can we change this to method to `markUnchanged`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224590", "body": "I think we should change this to package scope.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224619", "body": "We should also change this to package scope.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64224619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67038068", "body": "@tsachev I think  you are right. While this would be a breaking change, it is quite minor and can be acceptable for a minor release (most users leveraging it will likely be using `SessionRepository<? extends ExpiringSession>`.\n\n@eddumelendez Can you update this to use MapSession generic type?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67038068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/128538387", "body": "I don't like this because it means we cannot have an empty String value. Could the code that sets the cookie value to \"\" set the max age too?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/128538387/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rougou": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/913", "title": "Using JacksonMongoSessionConverter with Spring Security causes IllegalArgumentException", "body": "Hi, I'm trying to use JacksonMongoSessionConverter to convert my session data to json. Because I'm using Spring Security, I add the modules from SecurityJackson2Modules and initialize the converter as follows:\r\n\r\n```\r\n@Bean\r\npublic AbstractMongoSessionConverter mongoSessionConverter() {\r\n  List<Module> securityModules = SecurityJackson2Modules.getModules(getClass().getClassLoader());\r\n  return new JacksonMongoSessionConverter(securityModules);\r\n}\r\n```\r\nThis gives me the following error when JacksonMongoSessionConverter tries to convert the data back to a MongoExpiringSession object:\r\n```\r\njava.lang.IllegalArgumentException: The class with org.springframework.session.data.mongo.MongoExpiringSession and name of org.springframework.session.data.mongo.MongoExpiringSession is not whitelisted. If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or by providing a Mixin. If the serialization is only done by a trusted source, you can also enable default typing. See https://github.com/spring-projects/spring-security/issues/4370 for details\r\n\tat org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.typeFromId(SecurityJackson2Modules.java:193)\r\n\tat com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:150)\r\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:112)\r\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeWithType(BeanDeserializerBase.java:1082)\r\n\tat com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:63)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3798)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2842)\r\n\tat org.springframework.session.data.mongo.JacksonMongoSessionConverter.convert(JacksonMongoSessionConverter.java:100)\r\n...\r\n```\r\nLooking at the redis converter (GenericJackson2JsonRedisSerializer), it calls `enableDefaultTyping()` which solves this problem, but there is no way to modify the ObjectMapper with JacksonMongoSessionConverter.\r\n\r\nOn a side note, I think the javadoc for [SecurityJackson2Modules ](https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/jackson2/SecurityJackson2Modules.html) is wrong where it says `Above code is equivalent to`, since `enableDefaultTyping()` is no longer called after [this change](https://github.com/spring-projects/spring-security/commit/b43c6d0c8f32f82e2ad1fd0d44f4578d1b7505a4).\r\n\r\nAny help on how to solve this (without rewriting the entire converter) and guidance on the security implications is appreciated.\r\n\r\n(version: spring-session-1.3.1.RELEASE, used with spring-security-core-4.2.3.RELEASE)\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zhangmeng0426": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/896", "title": "Spring-session catch an exception when removeAttribute(or clear session) ", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\n\r\nSpring session version 1.2.0\r\ncache is redis\r\nstruts2-2.3.32\r\nJDK 1.8\r\n\r\nwhen I clear the session, \r\n   **my code is :** \r\n                      session = ActionContext.getContext().getSession();\r\n\t\t      session.clear();\r\n   **struts2 code is :** \r\n                      synchronized (session.getId().intern()) {\r\n                             Enumeration<String> attributeNamesEnum = session.getAttributeNames();\r\n                             while (attributeNamesEnum.hasMoreElements()) {\r\n                                     session.removeAttribute(attributeNamesEnum.nextElement());\r\n                              }\r\n                         }\r\n   **when catch the exception ,info is :** \r\n      **java.util.ConcurrentModificationException**\r\n        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)\r\n        at java.util.HashMap$KeyIterator.next(HashMap.java:1461)\r\n        at java.util.Collections$3.nextElement(Collections.java:5216)\r\n        at org.apache.struts2.dispatcher.SessionMap.clear(SessionMap.java:94)\r\n        at com.merchant.action.MerchantManageAction.modifyUserMobilePhone(MerchantManageAction.java:361)\r\n   \r\n     thanks!\r\n     \r\n\r\n   \r\n  \r\n   \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "im-scooter": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/851", "title": "OnCommittedResponseWrapper#trackContentLength(String content)  behavior is invalid", "body": "OnCommittedResponseWrapper#trackContentLength(String content)  behavior is invalid.\r\nNow method uses  content.length() to get string size. Further this value used to determinate output buffer capacity. Unfortunately  this approach doesn't  work for localized strings, thus localized string takes 1-2  bytes for UTF-8 encoding, For Jetty HttpServletResponse#bufferSize() returns size of in bytes internal buffer . So when OnCommittedResponseWrapper#doOnResponseCommitted() is called first time response is committed and no way to set session cookie.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkrgwbj": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/844", "title": "Spring sessigon takes up a lot of cpu", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\nHi,We use the spring environment in the current network environment, usually no problem, but the beginning of the month, the amount of users is very large, there will be this exception.\r\n####\r\ndid not handle the exception.java.lang.OutOfMemoryError: unable to create new native thread\r\n\tat java.lang.Thread.start0(Native Method) ~[?:1.7.0_79]\r\n\tat java.lang.Thread.start(Thread.java:714) ~[?:1.7.0_79]\r\n\tat org.springframework.core.task.SimpleAsyncTaskExecutor.doExecute(SimpleAsyncTaskExecutor.java:230) ~[spring-core-4.3.5.RELEASE.jar:4.3.5.RELEASE]\r\n\tat org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:188) ~[spring-core-4.3.5.RELEASE.jar:4.3.5.RELEASE]\r\n\tat org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:167) ~[spring-core-4.3.5.RELEASE.jar:4.3.5.RELEASE]\r\n\tat org.springframework.data.redis.listener.RedisMessageListenerContainer.dispatchMessage(RedisMessageListenerContainer.java:965) ~[spring-data-redis-1.7.1.RELEASE.jar:?]\r\n\tat org.springframework.data.redis.listener.RedisMessageListenerContainer.access$1400(RedisMessageListenerContainer.java:72) ~[spring-data-redis-1.7.1.RELEASE.jar:?]\r\n\tat org.springframework.data.redis.listener.RedisMessageListenerContainer$DispatchMessageListener.onMessage(RedisMessageListenerContainer.java:956) ~[spring-data-redis-1.7.1.RELEASE.ja\r\nr:?]\tat org.springframework.data.redis.connection.lettuce.LettuceMessageListener.message(LettuceMessageListener.java:44) ~[spring-data-redis-1.7.1.RELEASE.jar:?]\r\n\tat org.springframework.data.redis.connection.lettuce.LettuceMessageListener.message(LettuceMessageListener.java:30) ~[spring-data-redis-1.7.1.RELEASE.jar:?]\r\n\tat com.lambdaworks.redis.pubsub.RedisPubSubConnectionImpl.notifyListeners(RedisPubSubConnectionImpl.java:164) ~[lettuce-3.5.0.Final.jar:?]\r\n\tat com.lambdaworks.redis.pubsub.RedisPubSubConnectionImpl.channelRead(RedisPubSubConnectionImpl.java:133) ~[lettuce-3.5.0.Final.jar:?]\r\n\tat com.lambdaworks.redis.RedisChannelHandler.channelRead(RedisChannelHandler.java:90) ~[lettuce-3.5.0.Final.jar:?]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:328) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:321) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat com.lambdaworks.redis.pubsub.PubSubCommandHandler.decode(PubSubCommandHandler.java:61) ~[lettuce-3.5.0.Final.jar:?]\r\n\tat com.lambdaworks.redis.protocol.CommandHandler.channelRead(CommandHandler.java:153) ~[lettuce-3.5.0.Final.jar:?]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:328) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:321) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:328) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:321) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:328) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:321) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:328) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:321) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1280) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:328) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:890) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:564) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:505) ~[netty-transport-4.0.37.Final.jar:4.0.37.Final]^C\r\n\r\n####", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/572", "title": "about use twemproxy, initialization error", "body": "Caused by: org.springframework.data.redis.RedisConnectionFailureException: Unexpected end of stream.; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.\n    at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:67)\n    at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:41)\n    at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:37)\n    at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:37)\n    at org.springframework.data.redis.connection.jedis.JedisConnection.convertJedisAccessException(JedisConnection.java:212)\n    at org.springframework.data.redis.connection.jedis.JedisConnection.getConfig(JedisConnection.java:573)\n    at org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction.getNotifyOptions(ConfigureNotifyKeyspaceEventsAction.java:74)\n    at org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction.configure(ConfigureNotifyKeyspaceEventsAction.java:55)\n    at org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration$EnableRedisKeyspaceNotificationsInitializer.afterPropertiesSet(RedisHttpSessionConfiguration.java:224)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)\n    ... 38 more\nCaused by: redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.\n    at redis.clients.util.RedisInputStream.ensureFill(RedisInputStream.java:198)\n    at redis.clients.util.RedisInputStream.readByte(RedisInputStream.java:40)\n    at redis.clients.jedis.Protocol.process(Protocol.java:141)\n    at redis.clients.jedis.Protocol.read(Protocol.java:205)\n    at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:297)\n    at redis.clients.jedis.Connection.getBinaryMultiBulkReply(Connection.java:233)\n    at redis.clients.jedis.Connection.getMultiBulkReply(Connection.java:226)\n    at redis.clients.jedis.Jedis.configGet(Jedis.java:2578)\n    at org.springframework.data.redis.connection.jedis.JedisConnection.getConfig(JedisConnection.java:571)\n    ... 43 more\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jpganz": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/839", "title": "How can I copy values from one redis to other when it has redis sessions?", "body": "I am trying to do this:\r\n\r\nI have one redis instance(redis1) with sentinels working, it has the sessions.\r\n\r\nI have other redis instance (redis2) with sentinels working, it has nothing.\r\n\r\nWhen I enter to redis2 instace I want to look in redis1 for the session and store it (if need it) in redis2. I created a filter to do it but there are several issues with the serialization, I was wondering if there is any other way to do it? Each redis works great individually but when trying to do this I just cannot archive it.\r\n\r\nAny ideas how?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gschambial": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/827", "title": "Spring Session is null after oauth success callback", "body": "Hi guys,\r\n\r\nI am using following configuration for a Spring Microservices application:\r\n\r\n1. Spring Session (Backed by Redis Server)\r\n2. Form login\r\n3. Social Login (Facebook + Twitter ) using spring-social plugin.\r\n\r\n**Form Login** is working fine with both `HttpSession `as well as `SpringSession `using `Redis`.\r\n\r\nIn case of **Social Login,** `SpringSession `is always null. When I use `HttpSession `it works fine.\r\n\r\nI am using following configuration to enable `SpringSession`:\r\n\r\n```\r\n@EnableRedisHttpSession\r\npublic class SpringSessionConfig {\r\n\r\n    @Bean\r\n    public LettuceConnectionFactory connectionFactory() {\r\n            return new LettuceConnectionFactory(); \r\n    }\r\n\r\n    @Bean\r\n    public HttpSessionStrategy httpSessionStrategy() {\r\n            return new HeaderHttpSessionStrategy(); \r\n    }\r\n\r\n} \r\n```\r\n\r\n```\r\n@Configuration\r\npublic class SpringSessionFilterInitializer extends AbstractHttpSessionApplicationInitializer {\r\n\r\n    public SpringSessionFilterInitializer() {\r\n        super(SpringSessionConfig.class);\r\n    }\r\n\r\n}\r\n```\r\nCan Anyone help me in getting the right direction?\r\n\r\nThanks in advance.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mondrias": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/812", "title": "Resisson - Spring Session - Spring Security - Integration", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\n\r\nFriends I am integrating redisson with spring session and spring security I have the detail may be something in my configuration.\r\n\r\nERROR [io.undertow.request] (default task-8) UT005023: Exception handling request to /ssoGD-0.0.1-SNAPSHOT/: org.redisson.client.RedisException: Unexpected exception while processing command\r\nat org.redisson.command.CommandAsyncService.convertException(CommandAsyncService.java:319)\r\n\r\nCaused by: com.fasterxml.jackson.databind.JsonMappingException: No suitable constructor found for type [simple type, class org.springframework.security.web.savedrequest.DefaultSavedRequest]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)\r\nat [Source: io.netty.buffer.ByteBufInputStream@11badfeb; line: 1, column: 79]\r\n\r\nI understand was added to Jacksson2 support to spring security but I do not know if it is the client i use less this support.\r\n\r\nBased on the following example and add what the redisson documentation indicates. In the redis client I see that the session key is created\r\n\r\nhttps://github.com/spring-projects/spring-session/tree/master/samples/javaconfig/security\r\n\r\nThanks, forgive me, my English is new to this.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stojsavljevic": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/811", "title": "Omitting Path of a cookie", "body": "Hi,\r\n\r\nis it possible to completely omit `Path` attribute of a cookie?\r\n\r\nFrom what I can see in `DefaultCookieSerializer` it doesn't seem possible.\r\n\r\nI believe this can be useful in cases when an application is accessed from different paths.\r\nAnd when `Path` is omitted browser will default to current resource path.\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68376299", "body": "I find this javadoc misleading. In my mind, this flag is not about when session will be saved (after changes or immediately). It's about avoiding save when changes are not detected. But we must state that changes might not be detected (as @rwinch pointed out). Also, we should state that flag can help to reduce the possibility of race conditions.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/68376299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/80695360", "body": "Thanks for catching this. Going to fix it ASAP..\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/80695360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/80700521", "body": "It's fixed. Thanks again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/80700521/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "treeleafj": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/796", "title": "SpringHttpSessionConfiguration", "body": "```java\r\n@Configuration\r\npublic class SpringHttpSessionConfiguration implements ApplicationContextAware {\r\n\r\n\tprivate CookieHttpSessionStrategy defaultHttpSessionStrategy = new CookieHttpSessionStrategy();\r\n\r\n\tprivate boolean usesSpringSessionRememberMeServices;\r\n\r\n\tprivate ServletContext servletContext;\r\n\r\n\tprivate CookieSerializer cookieSerializer;\r\n\r\n\tprivate HttpSessionStrategy httpSessionStrategy = this.defaultHttpSessionStrategy;\r\n\r\n\tprivate List<HttpSessionListener> httpSessionListeners = new ArrayList<HttpSessionListener>();\r\n\r\n\t@PostConstruct\r\n\tpublic void init() {\r\n\t\tif (this.cookieSerializer != null) {\r\n                        //why not?: this.httpSessionStrategy.setCookieSerializer(this.cookieSerializer);\r\n\t\t\tthis.defaultHttpSessionStrategy.setCookieSerializer(this.cookieSerializer);\r\n\t\t}\r\n\t\telse if (this.usesSpringSessionRememberMeServices) {\r\n\t\t\tDefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer();\r\n\t\t\tcookieSerializer.setRememberMeRequestAttribute(\r\n\t\t\t\t\tSpringSessionRememberMeServices.REMEMBER_ME_LOGIN_ATTR);\r\n                        //why not?: this.httpSessionStrategy.setCookieSerializer(cookieSerializer);\r\n\t\t\tthis.defaultHttpSessionStrategy.setCookieSerializer(cookieSerializer);\r\n\t\t}\r\n\t}\r\n\r\n       @Autowired(required = false)\r\n\tpublic void setHttpSessionStrategy(HttpSessionStrategy httpSessionStrategy) {\r\n\t\tthis.httpSessionStrategy = httpSessionStrategy;//<----- this not defaultHttpSessionStrategy\r\n\t}\r\n}\r\n```\r\n\r\nmy:\r\n\r\n```java\r\n@Bean\r\npublic CookieSerializer cookieSerializer() {\r\n        DefaultCookieSerializer myCookieSerializer = new DefaultCookieSerializer();\r\n        myCookieSerializer.setCookieName(\"access_token\");\r\n        myCookieSerializer.setCookiePath(\"/\");\r\n        return myCookieSerializer;\r\n}\r\n\r\n@Bean\r\npublic HttpSessionStrategy httpSessionStrategy() {\r\n        return new MyCookieHttpSessionStrategy();//now, cant not set myCookieSerializer, must: HttpSessionStrategy httpSessionStrategy(CookieSerializer cookieSerializer) {//set ....}\r\n}\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kaixinwangzi1982": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/793", "title": "Cannot create a session after the response has been committed", "body": "```\r\nServlet.service() for servlet [CometServlet] in context with path [] threw exception\r\njava.lang.IllegalStateException: Cannot create a session after the response has been committed\r\n\tat org.apache.catalina.connector.Request.doGetSession(Request.java:2921)\r\n\tat org.apache.catalina.connector.Request.getSession(Request.java:2318)\r\n\tat org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:899)\r\n\tat org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:911)\r\n\tat com.pms.utils.CometUtil.handleEvent(CometUtil.java:39)\r\n\tat com.pms.utils.CometUtil.handleEvent(CometUtil.java:16)\r\n\tat org.comet4j.event.EventSource.fire(EventSource.java:39)\r\n\tat org.comet4j.event.Observable.fireEvent(Observable.java:104)\r\n\tat org.comet4j.core.CometEngine.connect(CometEngine.java:84)\r\n\tat org.comet4j.core.CometServlet.event(CometServlet.java:43)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilterEvent(ApplicationFilterChain.java:484)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilterEvent(ApplicationFilterChain.java:377)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\r\n\tat org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:123)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\r\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\r\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)\r\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1721)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n```\r\nThis is my issue, when not integrating spring-session. Comet works. But now, it does now work.\r\nThis is my web.xml following:\r\n\r\n```xml\r\n\t<!-- Spring Listener -->\r\n\t<context-param>\r\n\t\t<param-name>contextConfigLocation</param-name>\r\n\t\t<param-value>\r\n            classpath:/applicationContext.xml\r\n        </param-value>\r\n\t</context-param>\r\n\t\r\n\t<!-- \u8fc7\u6ee4\u5668 spring-session -->\r\n    <filter>\r\n        <filter-name>springSessionRepositoryFilter</filter-name>\r\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>springSessionRepositoryFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n        <dispatcher>REQUEST</dispatcher>\r\n        <dispatcher>ERROR</dispatcher>\r\n    </filter-mapping>\r\n    \r\n\t<listener>\r\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n\t</listener>\r\n\t\r\n\t<!-- Character Filter -->\r\n\t<filter>\r\n\t\t<filter-name>CharacterEncodingFilter</filter-name>\r\n\t\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\r\n\t\t<init-param>\r\n\t\t\t<param-name>encoding</param-name>\r\n\t\t\t<param-value>UTF-8</param-value>\r\n\t\t</init-param>\r\n\t\t<init-param>\r\n\t\t\t<param-name>forceEncoding</param-name>\r\n\t\t\t<param-value>true</param-value>\r\n\t\t</init-param>\r\n\t</filter>\r\n\t<filter-mapping>\r\n\t\t<filter-name>CharacterEncodingFilter</filter-name>\r\n\t\t<url-pattern>/*</url-pattern>\r\n\t</filter-mapping>\r\n\t\r\n\t\r\n    \r\n    \r\n\t<listener>\r\n\t\t<listener-class>org.springframework.web.util.WebAppRootListener</listener-class>\r\n\t</listener>\r\n\r\n\t<listener>\r\n\t\t<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>\r\n\t</listener>\r\n\t<!-- <listener>\r\n \t\t <listener-class>com.pms.wx.listener.TaskListener</listener-class>\r\n    </listener> -->\r\n    \r\n\t<context-param>\r\n\t\t<param-name>logbackConfigLocation</param-name>\r\n\t\t<param-value>classpath:logback.xml</param-value>\r\n\t</context-param>\r\n\t<listener>\r\n\t\t<listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>\r\n\t</listener>\r\n\r\n    <listener>\r\n        <description>Comet4J\u5bb9\u5668\u4fa6\u542c</description>\r\n        <listener-class>org.comet4j.core.CometAppListener</listener-class>\r\n    </listener>\r\n    <listener>\r\n        <description>\u76d1\u542c\u6211\u4eec\u81ea\u5df1\u7684\u63a8\u9001\u7c7b</description>\r\n        <listener-class>com.pms.utils.CometUtil</listener-class>\r\n    </listener>\r\n    <servlet>\r\n        <description>\u5ba2\u6237\u7aef\u8bbf\u95ee\u5165\u53e3</description>\r\n        <servlet-name>CometServlet</servlet-name>\r\n        <servlet-class>org.comet4j.core.CometServlet</servlet-class>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>CometServlet</servlet-name>\r\n        <url-pattern>/servlet/conn</url-pattern>\r\n    </servlet-mapping>\r\n```", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "matamicen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/760", "title": "Session.istrue() is always true! ...", "body": "Hi,\r\nThis is my controller (I am using springBoot) ... I can see the KEY **\"name\"** and it **VALUE** in REDIS Server When I make the SetAtributte, but When I call the page again in order to see the  KEY **\"name\"** value the Session.istrue() is TRUE and then the Old GetAttribute **\"name\"** is Null!!\r\n\r\nAny idea?\r\n\r\n```\r\npackage com.sedooe.authentication.mvc;\r\n\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api\")\r\npublic class Controller {\r\n\r\n\r\n    @RequestMapping(value = \"/resource\", method = RequestMethod.GET)\r\n    public Map<String, String> getResource(HttpServletRequest req, HttpServletResponse resp, @RequestParam(value = \"param\") String param1) {\r\n        Map<String, String> resource = new HashMap<String, String>();\r\n        try {\r\n\r\n          resource.put(\"resource\", \"here is some resource\");\r\n\r\n          if (!req.getSession().isNew())\r\n          {     resource.put(\"resource2\", \"Old Session attribute name: \" + req.getAttribute(\"name\").toString());\r\n          }\r\n          req.getSession().setAttribute(\"name\", param1);\r\n          resource.put(\"resource3\", \"New Session attribute name: \" + req.getSession().getAttribute(\"name\").toString());\r\n         \r\n      } catch (Exception e)\r\n      {e.printStackTrace();\r\n\r\n      }\r\n\r\n        return resource;\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wtaccuracy": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/758", "title": "additional data to store in redis ", "body": "spring:session:sessions:expires:xxxxx\r\nxxxx is session id\r\nif i want to know whether user A is login\uff0ci should store on other place\uff0c\r\nit is wonderful if spring session can provide a api to make it  spring:session:sessions:A:expires:xxxxx", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stnor": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/754", "title": "When using a session scoped bean in Tomcat, spring session is not used?", "body": "Tomcat 8.0.41\r\nSpring Session 1.3.0.RELEASE\r\nSpring 4.3.6.RELEASE\r\n\r\nWhen using SessionScope bean in a Servlet filter on Tomcat 8.0, Spring IoC doesn't seem to be using spring session...\r\n\r\nI noticed I was getting a JSESSIONID returned in the browser and then I did set a line break point in the tomcat-servlet-api:8.0.41.javax.servlet.http.Cookie constructor.\r\n\r\n<img width=\"633\" alt=\"screen shot 2017-04-21 at 14 58 31\" src=\"https://cloud.githubusercontent.com/assets/561167/25278641/3846a9ec-26a4-11e7-91a3-87d1f3bb3981.png\">\r\n\r\nIsn't Spring session supposed to be in this stack in order to manage this?\r\n\r\nI tried to reproduce this on Spring Boot, but wasn't able to.\r\n\r\n```java\r\n@Component\r\npublic class NompUserTermsFilter implements Filter {\r\n\r\n    @Autowired UserTermsSessionBean userTermsSessionBean;\r\n\r\n    public NompUserTermsFilter() {\r\n        super();\r\n    }\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\r\n        HttpServletRequest httpServletRequest = (HttpServletRequest) request;\r\n        System.out.println(httpServletRequest.getRequestURI());\r\n        userTermsSessionBean.noop();\r\n        filterChain.doFilter(request, response);\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n\r\n    }\r\n}\r\n\r\n@Component\r\n@SessionScope\r\npublic class UserTermsSessionBean implements Serializable {\r\n\r\n    private Boolean needToAcceptAgreement;\r\n\r\n    public void noop() {\r\n\r\n    }\r\n```\r\n\r\n\r\n```xml\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n         version=\"3.0\">\r\n\r\n    <display-name>Nomp</display-name>\r\n\r\n    <session-config>\r\n        <session-timeout>60</session-timeout>\r\n        <tracking-mode>COOKIE</tracking-mode>\r\n    </session-config>\r\n\r\n    <servlet>\r\n        <servlet-name>nomp</servlet-name>\r\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n        <load-on-startup>1</load-on-startup>\r\n        <async-supported>true</async-supported>\r\n    </servlet>\r\n\r\n    <servlet-mapping>\r\n        <servlet-name>nomp</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n\r\n    <filter>\r\n        <filter-name>springSessionRepositoryFilter</filter-name>\r\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n        <async-supported>true</async-supported>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>springSessionRepositoryFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n\r\n    <filter>\r\n        <filter-name>nompUserTermsFilter</filter-name>\r\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n        <async-supported>true</async-supported>\r\n    </filter>\r\n\r\n    <filter-mapping>\r\n        <filter-name>nompUserTermsFilter</filter-name>\r\n        <url-pattern>/api/*</url-pattern>\r\n    </filter-mapping>\r\n...\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joaocarlos86": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/753", "title": "Cant execute actions with dynamically rendered buttons - Primefaces, JSF and Spring Session", "body": "Versions: \r\n\r\nPrimefaces 6.0\r\nJSF (myfaces) 2.3\r\nspring-session 1.3.0.RELEASE\r\nspring-session-data-redis 1.3.0.RELEASE\r\nlettuce 3.5.0.FINAL\r\n\r\nI'm having issues using the HttpSession (SpringSession - redis) to clusterize the session of my users. The issue behavior is very specific, but, to me, looks like the ViewState is not being recovered correctly.\r\n\r\nIn a page I have a button (primefaces, ajax), when I click this button it triggers a action in my managed bean and a dialog is show with a text derived by the action executed in my managed bean.\r\nBut, if I have a button that is dynamically rendered, when a action renders this button, the button doesn't trigger any action in my managed bean.\r\n\r\nAfter debugging the execution stack of JSF, I've seen that the dynamically generated button action triggers the JSF lifecycle, but the action never reaches the ManagedBean.\r\n\r\nEverything works fine if I remove spring session.\r\n\r\nI'm providing a sample application proving the issue. (at https://github.com/joaocarlos86/spring-session-problem)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tommyacm": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/743", "title": "Jackson2JsonRedisSerializer and  GenericJackson2JsonRedisSerializer DeSerialization problem", "body": "I use both Jackson2JsonRedisSerializer  and GenericJackson2JsonRedisSerializer  for my redis cluster,but when i deserialize object,the error is below,\r\n[error]\r\norg.springframework.data.redis.serializer.SerializationException: Could not read JSON: Invalid UTF-32 character 0x40636c61(above 10ffff)  at char #8, byte #35); nested exception is java.io.CharConversionException: Invalid UTF-32 character 0x40636c61(above 10ffff)  at char #8, byte #35)\r\n\tat org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:130)\r\n\tat org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:109)\r\n\tat org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:318)\r\n\tat org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:58)\r\n\tat org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:207)\r\n\tat org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:169)\r\n\tat org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:91)\r\n\tat org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:43)\r\n\tat com.changyou.rampage.redis.support.JedisClusterNoSqlClient.get(JedisClusterNoSqlClient.java:60)\r\n\tat com.changyou.rampage.msgcenter.controller.MsgCenterVisitorController.redisTest(MsgCenterVisitorController.java:70)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\r\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:622)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:108)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1434)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: java.io.CharConversionException: Invalid UTF-32 character 0x40636c61(above 10ffff)  at char #8, byte #35)\r\n\tat com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(UTF32Reader.java:189)\r\n\tat com.fasterxml.jackson.core.io.UTF32Reader.read(UTF32Reader.java:150)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMore(ReaderBasedJsonParser.java:241)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd(ReaderBasedJsonParser.java:2345)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:644)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:3834)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3783)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2929)\r\n\tat org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:128)\r\n\t... 79 more\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "roband": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/738", "title": "invalidate does not work on session objects handed out to HttpSessionListener", "body": "Using Spring Session 1.3.0\r\n\r\nIf a HttpSessionListener is added, it correctly gets events sent to it by the Spring Session SessionEventHttpSessionListenerAdapter.\r\n\r\nHowever, if the listener then calls invalidate() on the session object received, then nothing happens.\r\n\r\nThe code in SessionEventHttpSessionListenerAdapter.createHttpSessionEvent looks fishy, it just does a new ExpiringSessionHttpSession, that object is in no way connected to the rest of Spring Session.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "raxim1": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/729", "title": "SessionRepositoryFilter - problem with renewing session", "body": "Maybe i'm stupid a little bit, but i have made a lot of configuration with spring.\r\n\r\nAfter a day of trying, i made a dirty workaround. To be honest i thought that i can rewrite the SessionRepositoryFilter faster than deal with it.\r\n\r\nIn my system users can have multiple profiles, and without login they can switch between them.\r\nProfiles has different roles attached. So it's a little bit linux \"su\", but with the same credentials.\r\nProfiles for task separation, not admin related.\r\n\r\nThe SessionRepositoryFilter needs to be splitted up i think avoiding inner final classes for SessionRepositoryRequestWrapper.\r\n\r\npublic HttpSessionWrapper getSession(boolean create) {\r\n...\r\nString requestedSessionId = getRequestedSessionId();\r\n\t\t\tif (requestedSessionId != null\r\n\t\t\t\t\t&& getAttribute(INVALID_SESSION_ID_ATTR) == null) {\r\n\t\t\t\tS session = getSession(requestedSessionId);\r\n\t\t\t\tif (session != null) {\r\n\t\t\t\t\tthis.requestedSessionIdValid = true;\r\n\t\t\t\t\tcurrentSession = new HttpSessionWrapper(session, getServletContext());\r\n\t\t\t\t\tcurrentSession.setNew(false);\r\n\t\t\t\t\tsetCurrentSession(currentSession);\r\n\t\t\t\t\treturn currentSession;\r\n\t\t\t\t}\r\n...\r\nif(create != true)\r\n{\r\nreturn \r\n}\r\n...\r\ncreate session\r\n...\r\n}\r\n\r\nI would have liked to invalidate a session and create a new one at the same time.\r\n\r\nIn the controller i have made the following, as when you invalidate a session, you cannot renew it.\r\n1, \r\nI have called setAuthentication populating a new details. (principal/credentials are not changed in my case, so i'm copying over!!!)\r\n2,\r\nrequest.getSession().invalidate();\r\nrequest.setAttribute(INVALID_SESSION_ID_ATTR, \"true\");\r\nrequest.getSession(true);\r\n\r\nAny idea, how i can achieve that goal without dirty hacks, or i have found a real bug?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leofromgroza": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/725", "title": "Add possibility to extend classes", "body": "I want to ask you to make [org.springframework.session.data.redis.RedisOperationsSessionRepository.RedisSession](https://github.com/spring-projects/spring-session/blob/1.3.0.RELEASE/spring-session/src/main/java/org/springframework/session/data/redis/RedisOperationsSessionRepository.java#L670) extendable (public and non-final separate class). \r\nMaybe you want to know why we need this. In our API there are some methods that should not prolong our session. So we have some custom logic in current implementation of org.springframework.session.ExpiringSession#setLastAccessedTime. It checks should the session be prolonged or not. But we want to extend RedisOperationsSessionRepository and use it with a little bit modified RedisSession.\r\nWe tried to handle our issue by adding logic into places where method org.springframework.session.ExpiringSession#setLastAccessedTime is calling. For now in Spring Web there are 3 such places in two different classes. Such approach is not suitable for us, because in future it could be much more places where that method will be calling and where we should add our custom logic.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/725/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ctatineni": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/701", "title": "Session expired event with Multiple clients", "body": "Hello,\r\n\r\n  I am trying to create a micro service using spring session to create sessions in Redis, i am trying to override Session expired event method. my question is when we have multiple instances of this micro service are running, how do we make sure only one instance is processing the event?\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/175", "title": "Async web request with spring session", "body": "Hello,\n  If i use servlet 3 async feature, session was not persisting during on response commit, am i missing any configuration?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gpradeepkrishna": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/699", "title": "Spring session (redis) - Add support for using redis serializers for keys in RedisOperationsSessionRepository", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\nI'm using Spring session 1.1.1 release and storing my sessions in redis. We wanted to change the way session data is stored in redis this is due to the fact all session details are stored in redis in the clear. This makes it open for any security breach. We wanted it to be encrypted and hence I did following changes to supply a custom serializer to spring redis session.\r\n\r\n```java\r\n@Autowired\r\n@Qualifier(\"sessionRedisTemplate\")\r\nprivate RedisTemplate<Object, Object> redisTemplate;\r\n\r\n@PostConstruct\r\npublic void postConstruct() {\r\n\t/* \r\n\t * genericRedisSerializer & stringRedisSerializers are custom implementations\r\n\t * that encrypts contents before putting it in redis (both keys and values)\r\n\t */\r\n\tredisTemplate.setKeySerializer(genericRedisSerializer);\r\n\tredisTemplate.setHashKeySerializer(genericRedisSerializer);\r\n\tredisTemplate.setDefaultSerializer(genericRedisSerializer);\r\n\tredisTemplate.setHashValueSerializer(genericRedisSerializer);\r\n\tredisTemplate.setValueSerializer(genericRedisSerializer);\r\n\tredisTemplate.setStringSerializer(stringRedisSerializer);\r\n}\r\n```\r\n\r\nThis works well but leaves behind a list of indexes that aren't cleared (`spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:username`). Overtime this gets really large enough for us to run through scripts in redis to clear them.\r\n\r\nUpon further investigation we found that Redis keyspace notification handler in `RedisOperationsSessionRepository` doesn't perform deserialization of the keys before retrieving it from the message. This fails the asynchronous process and hence leading to these indexes to live forever.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/699/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Knight-endless-love": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/696", "title": "how to get a new session automatically  ?", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/696/reactions", "total_count": 1, "+1": 0, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lexang": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/690", "title": "spring-session-data-redis   session\u4fdd\u5b58\u5bf9\u8c61  redisTemplate\u83b7\u53d6\u5bf9\u8c61", "body": "<!--\r\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\r\n-->\r\n\t\r\n\t`\t\r\n\t\t\t HttpSession session = request.getSession();\r\n\t\t\t String id=session.getId();\r\n\t\t\t System.out.println(\"session  id  :\"+id);\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t String value = (String) session.getAttribute(\"username&&redis\");\r\n\t\t\t System.out.println(\"username&&redis\"+value);\r\n\t\t\t \r\n\t\t\t \r\n\t\t\tUser user= userService.getByLogincode(userName);\r\n\t\t\t\r\n\t\t\t session.setAttribute(\"user\", user); \r\n\t\t\t user =(User) session.getAttribute(\"user\"); \r\n\t\t\t \r\n\t\t\t System.out.println( redisTemplate.opsForHash().get(\"spring:session:sessions:\"+id, \"sessionAttr:user\"));\r\n\t\t\t System.out.println(redisTemplate.boundHashOps(\"spring:session:sessions:\"+id).get(\"sessionAttr:username&&redis\"));\r\n\t\t\t Map map=redisClient.hgetall(\"spring:session:sessions:\"+id);\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t System.out.println(redisTemplate.boundHashOps(\"spring:session:sessions:\"+id).entries());\r\n\t\t\t \r\n\t\t\t  user=(User) redisTemplate.opsForHash().get(\"spring:session:sessions:\"+id, \"sessionAttr:user\");\r\n\t\t\t \r\n\t\t\t  System.out.println(user);`\r\n\r\n\r\n\r\n![qq 20161211144200](https://cloud.githubusercontent.com/assets/10265864/21078603/38184152-bfb0-11e6-9633-8381097f212a.png)\r\n![qq 20161211144255](https://cloud.githubusercontent.com/assets/10265864/21078604/381ca4ea-bfb0-11e6-9ffb-d509c1224d1e.png)\r\n\r\n\r\n\u4ecereedis\u83b7\u53d6\u7684\u5c5e\u6027 \u4e3a\u7a7a \u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 \u600e\u4e48\u89e3\u51b3\uff1f ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "etlweather": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/685", "title": "Serialization error when using LDAP authentication and user entered wrong password", "body": "I am using Spring Security with LDAP (well Active Directory to be precise) and when the user enters a wrong password, with Spring Session enabled, with Redis, we get a serialization error.\r\n\r\n```\r\nThere was an unexpected error (type=Internal Server Error, status=500).\r\nCannot serialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to serialize object using DefaultSerializer;     nested exception is java.io.NotSerializableException: com.sun.jndi.ldap.LdapCtx\r\n```\r\n\r\nBeen also mentioned on StackOverflow: http://stackoverflow.com/questions/32751094/spring-boot-with-session-redis-serialization-error-with-bad-active-directory-lda\r\n\r\nUsing Spring Session 1.2.2.RELEASE\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "criedluv": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/674", "title": "Spring session websocket example not running across multiple Tomcat servers", "body": "I am testing clustering of the spring sessions websocket sample. \r\n\r\nI'm running the sample as described in docs: http://docs.spring.io/spring-session/docs/current/reference/html5/guides/websocket.html. Code from: https://github.com/spring-projects/spring-session/archive/1.2.2.RELEASE.zip.\r\n\r\nIf I run two browser sessions against the  app on one Tomcat server, all works as expected. but If I run the app  on each of two servers I don't get the results I  expect.\r\n\r\nI start the app on two servers and login as Rob on one and Luke on the other.  Rob comes up first as expected with no chat users listed.  Then Luke comes up but does not list Rob as a chat user.  Rob then detects Luke and lists Luke as a chat user. \r\n\r\nAlso, if I refresh the web page for Rob the user goes away and Rob is added to the list for Luke. This cycle continues back and forth.\r\n\r\nIt looks like spring sessions is sharing session info. I see entries in Redis for both logins. \r\n\r\nShould I expect this sample to run across multiple servers?\r\n\r\nthanks.\r\n \r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghsbhatia": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/653", "title": "Exception on Initialization - Error creating bean with name 'enableRedisKeyspaceNotificationsInitializer'", "body": "spring-session-1.0.2.RELEASE\n\nSteps to Reproduce:\n1. Include the following dependency\n   \n   ```\n   <dependency>\n       <groupId>org.springframework.session</groupId>\n       <artifactId>spring-session</artifactId>\n   </dependency>\n   ```\n2. Start the application when Redis server is not running\n\nException:\n\nError creating bean with name 'enableRedisKeyspaceNotificationsInitializer' defined in class path resource[org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool\n\nRoot Cause:\n\nA connection is requested from RedisConnectionFactory. If Redis is not running, exception is thrown in the follwing code in RedisHttpSessionConfiguration.java  \n\n```\nstatic class EnableRedisKeyspaceNotificationsInitializer implements InitializingBean {\n    private final RedisConnectionFactory connectionFactory;\n\n    private ConfigureRedisAction configure;\n\n    EnableRedisKeyspaceNotificationsInitializer(RedisConnectionFactory connectionFactory, ConfigureRedisAction configure) {\n        this.connectionFactory = connectionFactory;\n        this.configure = configure;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        RedisConnection connection = connectionFactory.getConnection();\n        configure.configure(connection);\n    }\n}\n```\n\nEnahancement:\n1. Configure ConfigureRedisAction instance only when RedisConnection is available.\n2. Change signature of ConfigureRedisAction.configure to accept RedisConnectionFactory rather than RedisConnection. That way, when ConfigureRedisAction.NO_OP is autowired, no attempt is made to create a connection that would be unutilized.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zwfflying": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/649", "title": "request.getInputStream is empty", "body": "<!--\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\n-->\n\nI submit a post request.\nwhen i use request.getInputStream to get parameters, but find nothing.\n## by watching the source code, i find this line maybe the reason:\n\nCookieHttpSessionStrategy.java line 165 \n## String u = request.getParameter(this.sessionParam);\n\nthe inputStream has already read;\nlink:[http://blog.csdn.net/lchpersonal521/article/details/52104959](url)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "crisarmen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/648", "title": "Update an object stored ", "body": "Hello,\n\nI am trying to use spring-session-data-redis:1.2.2 on an existing project built with Spring/Spring MVC.\n\nAt the moment we have java objects stored in the session, and such objects are retrieved a modified in different parts of the code. Just as a simplified example, consider the simple object:\n\n```\npublic class TestObject implements Serializable{\n    private static final long serialVersionUID = -1283966188531894027L;  \n    private Integer val;\n    public TestObject(Integer val){\n        this.val = val;\n    }\n\n    public Integer getVal() {\n        return val;\n    }\n\n    public void setVal(Integer val) {\n        this.val = val;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((val == null) ? 0 : val.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        TestObject other = (TestObject) obj;\n        if (val == null) {\n            if (other.val != null)\n                return false;\n        } else if (!val.equals(other.val))\n            return false;\n        return true;\n    }   \n}\n```\n\nAt a certain point in the flow we retrieve the object an modify the internal value doing something like:\n\n```\nTestObject t = (TestObject)WebUtils.getSessionAttribute(request, \"testAttribute\");\nt.setVal(99);\n```\n\nAnd after in the flow we retrieve it and read the value doing something like:\n\n```\nTestObject t = (TestObject)WebUtils.getSessionAttribute(request, \"testAttribute\");\nint value = t.getVal();  //here we expect to see 99\n```\n\nBefore trying to use spring-session, here value was 99.\nBut now when I retrieve the value, I don't see 99, but I see the original value that the TestObject had when he was initially stored in the session.\n\nIs there something I can configure in order to be able to  replicate the behaviour I had before using spring-session?\n\nFew notes:\n- redisFlushMode is configured to IMMEDIATE\n- I appreciate that I could force a rewrite of the TestObject after the value is modified doing something like:\n\n```\nTestObject t = (TestObject)WebUtils.getSessionAttribute(request, \"testAttribute\");\nt.setVal(99);\nWebUtils.setSessionAttribute(request, \"testAttribute\", t);\n```\n\nbut I was curious to know if there was something I could do without modifying the existing code.\n\nThanks in advance for your help.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "campa": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/644", "title": "Help in configuration of Spring Session with WebSocketConfigurer and without StompBroker", "body": "Hi guys,\n\nI'm trying to use Spring Session with websockets, but I have not a StompBroker so I cannot extends directly your AbstractWebSocketMessageBrokerConfigurer . I need custom handlers... also.\n\nMy Websocket conf i very basic and it looks like this:\n\n```\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\n...\npublic class WebSocketBWConfiguration implements WebSocketConfigurer {\n  @Override\n  public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n    registry.addHandler(new BWebSocketHandler(), \"/api/deals\").setAllowedOrigins(\"*\").addInterceptors(new HttpSessionHandshakeInterceptor());\n }\n}\n\n```\n\nBWebSocketHandler is my custom Handler.\nCan you suggest me howto have Spring Session working with this websocket configuration ? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ling4": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/634", "title": "Session.invalidate() prevent removing session attributes in redis.", "body": "Hi guys,\n\n  Using spring session with redis here, when user logout, the code do the following things: \n  session.removeAttribute(user);\n  session.invalidate();\n  After that, I still can see the session attribute with value in redis!\n  But if session.invalidate() not called, the attribute value would be removed smoothly. But that's not what I want, the next user login should use a new session id in the same browser by invalidating the last.\n  Any ideas why?\n\nTHX\nling4\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bilak": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/630", "title": "NullPointerException while registering WebSocket session", "body": "Hello,\n[this](https://github.com/bilak/spring-websocket-rabbitmq-poc/tree/oauth2) is my testing project. I'd like to setup services stack with gateway service, authorization(uaa) service and api service. Api service is used to provide rest/websocket api. Now I'd like to join http session with web socket session to be able to test session timeouts. When I try to create websocket session I'm getting following exception.\n\n```\njava.lang.NullPointerException: null\n    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) ~[na:1.8.0_77]\n    at org.springframework.session.web.socket.handler.WebSocketRegistryListener.registerWsSession(WebSocketRegistryListener.java:118) ~[spring-session-1.2.1.RELEASE.jar:na]\n    at org.springframework.session.web.socket.handler.WebSocketRegistryListener.afterConnectionEstablished(WebSocketRegistryListener.java:86) ~[spring-session-1.2.1.RELEASE.jar:na]\n    at org.springframework.session.web.socket.handler.WebSocketRegistryListener.onApplicationEvent(WebSocketRegistryListener.java:67) ~[spring-session-1.2.1.RELEASE.jar:na]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n    at org.springframework.session.web.socket.handler.WebSocketConnectHandlerDecoratorFactory$SessionWebSocketHandler.publishEvent(WebSocketConnectHandlerDecoratorFactory.java:84) [spring-session-1.2.1.RELEASE.jar:na]\n    at org.springframework.session.web.socket.handler.WebSocketConnectHandlerDecoratorFactory$SessionWebSocketHandler.afterConnectionEstablished(WebSocketConnectHandlerDecoratorFactory.java:78) [spring-session-1.2.1.RELEASE.jar:na]\n    at org.springframework.web.socket.handler.WebSocketHandlerDecorator.afterConnectionEstablished(WebSocketHandlerDecorator.java:70) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.afterConnectionEstablished(LoggingWebSocketHandlerDecorator.java:48) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.afterConnectionEstablished(ExceptionWebSocketHandlerDecorator.java:48) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateConnectionEstablished(AbstractSockJsSession.java:374) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.initializeDelegateSession(WebSocketServerSockJsSession.java:159) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.afterConnectionEstablished(SockJsWebSocketHandler.java:87) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onOpen(StandardWebSocketHandlerAdapter.java:100) [spring-websocket-4.2.4.RELEASE.jar:4.2.4.RELEASE]\n    at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:133) [tomcat-embed-websocket-8.5.4.jar:8.5.4]\n    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:827) [tomcat-embed-core-8.5.4.jar:8.5.4]\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425) [tomcat-embed-core-8.5.4.jar:8.5.4]\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.4.jar:8.5.4]\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_77]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_77]\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.4.jar:8.5.4]\n    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_77]\n```\n\nIf you need more informations let me know. \n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "liuanxin": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/623", "title": "every time change with SESSION ", "body": "<!--\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\n-->\n\nproject build with spring boot with 1.3.6.R\n\n``` xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.3.6.RELEASE</version>\n    <relativePath/>\n</parent>\n```\n\nand with\n\n``` xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-redis</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session</artifactId>\n</dependency>\n```\n\nfirst request\n\n> request headers : nil\n> response headers : `Set-Cookie:SESSION=41de189d-1528-42cd-a355-87c0d3be19d0; Path=/; HttpOnly`\n\nsecond:\n\n> request headers : `Cookie:SESSION=41de189d-1528-42cd-a355-87c0d3be19d0`\n> response headers : `Set-Cookie:SESSION=546f5bed-09aa-4672-8af6-4089d07f4863; Path=/; HttpOnly`\n\n**The result is that every new request overwrites the cookie requested the previous time**\n\nWith the simplest configuration, noting to change, It's ok, not this problem. I can't determine is not the other jar package causes the response conflict.\n\nor config the `spring.session.domain: http://127.0.0.1:8080/` in the application.yml, but not same config in [SessionProperties](https://github.com/spring-projects/spring-boot/blob/v1.4.0.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java)\n\ncomment `spring-session` package, use the tomcat native session, not this problem too.\n\nhave a good day, thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/623/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rogue2yjg": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/617", "title": "Using spring-session-data-redis causes not working of commons fileupload", "body": "We have a Spring Boot application using spring-session-data-redis 1.2.1.RELEASE. Also we use commons fileupload. But spring session data redis rewrite HttpServletRequest and delete our file stream before entering our Controller when we uploading files. Besides the filter of spring session data redis owns highest priority. The result is MultipartFile param of our Controller is null.\nHow can we solve the problem?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abincai": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/607", "title": "forward error cause two session(session,jsessionid)", "body": "config for error page\n\n``` java\n   @Bean\n   public EmbeddedServletContainerCustomizer containerCustomizer() {\n   return (container -> {\n   ErrorPage error404Page = new ErrorPage(HttpStatus.NOT_FOUND, \"/\");\n   container.addErrorPages(error404Page);\n   });\n   }\n```\n\nor \n\n``` java\n@Controller\n@RequestMapping(\"/error\")\npublic class CustomerErrorController implements ErrorController {\n  @Override\n  public String getErrorPath() {\n    return \"/error\";\n  }\n\n  @RequestMapping(produces = \"text/html\")\n  @ResponseStatus(code = HttpStatus.OK)\n  public String errorHtml(HttpServletRequest request, HttpServletResponse response) {\n    return \"forward:/\";\n  }\n}\n```\n\ncause two session. one create by spring-session,the other one create by jetty\n\nlog\n\n\u00b7\u00b7\u00b7log\n2016-08-31 21:34:10.896 DEBUG 301300 --- [qtp733693146-64] o.s.s.w.h.S.SESSION_LOGGER               : A new session was created. To help you troubleshoot where the session was created we provided a StackTrace (this is not an error). You can prevent this from appearing by disabling DEBUG logging for org.springframework.session.web.http.SessionRepositoryFilter.SESSION_LOGGER\n\n.......\n\n2016-08-31 21:16:34.781 DEBUG 301300 --- [qtp733693146-17] org.eclipse.jetty.server.session         : New session & id 13uxok8vr02jq1wftjfk2yq5rr 13uxok8vr02jq1wftjfk2yq5rr\n2016-08-31 21:16:34.781 DEBUG 301300 --- [qtp733693146-17] org.eclipse.jetty.server.session         : Session 13uxok8vr02jq1wftjfk2yq5rr maxInactiveInterval=1800\n\u00b7\u00b7\u00b7\n\ncookie\n\n```\nJSESSIONID:13uxok8vr02jq1wftjfk2yq5rr \nSESSION:c3c7c3a3-ea1d-49db-a1a2-3b1a524ef871\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/607/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "beku8": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/603", "title": "Cross domain single sign on support", "body": "<!--\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\n-->\n\nIts probably out of the scope of this project, but is there any plan to support single sign on & single log outs across different domains, just like google.com & youtube.com. \n\nSince we have a single point of session storage this seems to be pretty much possible. Have one login server, and other clients redirects to that login server and gets a callback url, pretty much like Oauth2 dance. They share some token to synchronize the logout etc.\n\nI understand this is more related to spring security question, but spring-session seems to play very important role.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdithShenoy": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/602", "title": "RedisConnectionFailure because of Spring Session inactivity", "body": "Hi @rwinch ,\n\nWe are using Spring Session 1.1.1 and have set a timeout of 30 minutes.\n\nAfter the application is inactive for about 20 minutes ( for example) , when i come and access something on the application, I get the RedisConnectionFailure exception. But this is very inconsistent as immediately if I make the request again, it works. Any idea why this might be happening?\n\n`{\"error\":\"Internal Server Error\",\"exception\":\"org.springframework.data.redis.RedisConnectionFailureException\",\"message\":\"Unexpected end of stream.; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.\"}`\n\nAlso,  request.getSession(false)  throws null, even when session exists at times!\n\nRegards,\nAdith Shenoy\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/602/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/554", "title": "Spring session unable to connect to Redis sentinel", "body": "Hi @rwinch,\n\nI'm using spring session 1.1.1.RELEASE to manage my applications session.\n\nA redis cluster is set up on separate nodes. For the application to correctly connect to the node serving as the master, application node includes twemproxy. This means that the redis related communication goes through localhost and gets routed to the redis master node via this proxy.\n\nConfirmation of access to redis master:\nMaster and twemproxy are up and listening on the correct port\nWe are able to establish connection\nredis-cli -h localhost ping\nPONG\nThere are no firewall issues\n\nIn my application. i am giving localhost and 6379 to connect but is not working.\n\n```\nspring.redis.host: localhost\nspring.redis.port: 6379 \n```\n\ngetting the below error:\n\n```\n.   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.3.3.RELEASE)\n\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'enableRedisKeyspaceNotificationsInitializer' defined in class path resource [org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Unexpected end of stream.; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)\n    at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)\n    at com.rakuten.point.pointclub.PointClubApplication.main(PointClubApplication.java:20)\n    ... 6 more\nCaused by: org.springframework.data.redis.RedisConnectionFailureException: Unexpected end of stream.; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.\n    at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:47)\n    at org.springframework.data.redis.connection.jedis.JedisExceptionConverter.convert(JedisExceptionConverter.java:36)\n    at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:37)\n    at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:37)\n    at org.springframework.data.redis.connection.jedis.JedisConnection.convertJedisAccessException(JedisConnection.java:210)\n    at org.springframework.data.redis.connection.jedis.JedisConnection.getConfig(JedisConnection.java:571)\n    at org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction.getNotifyOptions(ConfigureNotifyKeyspaceEventsAction.java:69)\n    at org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction.configure(ConfigureNotifyKeyspaceEventsAction.java:50)\n    at org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration$EnableRedisKeyspaceNotificationsInitializer.afterPropertiesSet(RedisHttpSessionConfiguration.java:176)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)\n    ... 22 more\nCaused by: redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.\n    at redis.clients.util.RedisInputStream.ensureFill(RedisInputStream.java:198)\n    at redis.clients.util.RedisInputStream.readByte(RedisInputStream.java:40)\n    at redis.clients.jedis.Protocol.process(Protocol.java:141)\n    at redis.clients.jedis.Protocol.read(Protocol.java:205)\n    at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:297)\n    at redis.clients.jedis.Connection.getBinaryMultiBulkReply(Connection.java:233)\n    at redis.clients.jedis.Connection.getMultiBulkReply(Connection.java:226)\n    at redis.clients.jedis.Jedis.configGet(Jedis.java:2541)\n    at org.springframework.data.redis.connection.jedis.JedisConnection.getConfig(JedisConnection.java:569)\n    ... 27 more\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wuxianwei": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/585", "title": "RedisSessionExpirationPolicy#onDelete()[delete error values from the expirations set]", "body": "  public void onDelete(ExpiringSession session) {\n    long toExpire = roundUpToNextMinute(expiresInMillis(session));\n    String expireKey = getExpirationKey(toExpire);\n    **## this.redis.boundSetOps(expireKey).remove(session.getId());**\n  }\nmaybe change to:\n  public void onDelete(ExpiringSession session) {\n    long toExpire = roundUpToNextMinute(expiresInMillis(session));\n    String expireKey = getExpirationKey(toExpire);\n    **## this.redis.boundSetOps(expireKey).remove(\"expires:\" + session.getId());**\n  }\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tkruse": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/579", "title": "Move WebSocketSecurityConfig to spring security", "body": "It has no direct dependencies to spring-session, and would be useful even without spring-session. It can be manually copied as a workaround, of course.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kamal2311": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/578", "title": "Spring session keys created in redis have different formats when running from a windows machine vs when running on a linux machine", "body": "Note that keys written from a spring boot spring session app  running on a windows machine have  these junk characters where as the keys written from an app running on a linux machine does not have these junk characters. Looks like platform specific encoding is affecting these keys. \n\n**Generated from windows machine**\n\"\\xac\\xed\\x00\\x05t\\x00<spring:session:sessions:144a6b90-f6e7-44fc-b92b-ada5671ffe36\"\n\n**Generated from Linux machine**\n\"spring:session:sessions:9263abe7-0557-4062-9209-a4248f7c97c7\"\n\"spring:session:sessions:dd32765e-9440-4bec-9cd9-8d8fd037ce1f\"\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xenoterracide": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/576", "title": "comprehensive tutorial with tests", "body": "I have never successfully gotten spring session to work. http://stackoverflow.com/q/28384907/206466 https://github.com/spring-projects/spring-session/issues/217\n\nit would be nice to see an example project that enables one of the production modes, show map repository used for development and an MVC test that verifies the header.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71332763", "body": "agreed, this is probably something done in a starter? this class is mentioned in the documentation like it's something you don't write... then for a starter app you could either just add the @EnableRedisHttpSession \nand it would enable this for you unless another config provided. Also I was going to file a bug saying the docs don't mention what this is and it's not on the classpath.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71332763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sethunr": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/573", "title": "Spring session and spring data redis for  non sticky session replication across servers", "body": "Hi Rob,\n\nI'm not sure whether this is an issue that need to be created here or not Didn't find any other place and hence posting it here.\n\nWe are trying to implement a session replication strategy for our tomcat containers. The application is built on spring web and spring security. We use spring managed CSRF too. Our thinking was that use spring session, spring-data-redis to store the session to redis and use the session from redis by tomcat containers. We were able to store the session to redis successfully. But subsequently, we were not able to proceed in the right direction. The issues we have are:\n1. How to identify the right session for a given user request? I read somewhere that an invocation of httpRequest.getSession() transparently refer the redis backed spring session, but the session was not having all those information persisted into redis. I'm using a custom filter to get the session before the request is serviced to read the spring security related information\n2. When I use a redis desktop client and look at the HEX coded information I can see a lot much information on SPRING_SECURITY_CONTEXT, but from the session when I retrieve the security context, it just had the UsernamePasswordAuthenticationToken alone. Does it look like I need to write my won deserializers for the rest of the information? How do I do that if that is the case? The HEX format of the spring security context from redis look like below:\n\n\\xAC\\xED\\x00\\x05sr\\x00=org.springframework.security.core.context.SecurityContextImpl\\x00\\x00\\x00\\x00\\x00\\x00\\x01@\\x02\\x00\\x01L\\x00\\x0Eauthenticationt\\x002Lorg/springframework/security/core/Authentication;xpsr\\x00Oorg.springframework.security.authentication.UsernamePasswordAuthenticationToken\\x00\\x00\\x00\\x00\\x00\\x00\\x01@\\x02\\x00\\x02L\\x00\\x0Bcredentialst\\x00\\x12Ljava/lang/Object;L\\x00\\x09principalq\\x00~\\x00\\x04xr\\x00Gorg.springframework.security.authentication.AbstractAuthenticationToken\\xD3\\xAA(~nGd\\x0E\\x02\\x00\\x03Z\\x00\\x0DauthenticatedL\\x00\\x0Bauthoritiest\\x00\\x16Ljava/util/Collection;L\\x00\\x07detailsq\\x00~\\x00\\x04xp\\x01sr\\x00&java.util.Collections$UnmodifiableList\\xFC\\x0F%1\\xB5\\xEC\\x8E\\x10\\x02\\x00\\x01L\\x00\\x04listt\\x00\\x10Ljava/util/List;xr\\x00,java.util.Collections$UnmodifiableCollection\\x19B\\x00\\x80\\xCB^\\xF7\\x1E\\x02\\x00\\x01L\\x00\\x01cq\\x00~\\x00\\x06xpsr\\x00\\x13java.util.ArrayListx\\x81\\xD2\\x1D\\x99\\xC7a\\x9D\\x03\\x00\\x01I\\x00\\x04sizexp\\x00\\x00\\x00\\x04w\\x04\\x00\\x00\\x00\\x04sr\\x00Borg.springframework.security.core.authority.SimpleGrantedAuthority\\x00\\x00\\x00\\x00\\x00\\x00\\x01@\\x02\\x00\\x01L\\x00\\x04rolet\\x00\\x12Ljava/lang/String;xpt\\x00\\x09HostAdminsq\\x00~\\x00\\x0Et\\x00\\x0EDI_Integrationsq\\x00~\\x00\\x0Et\\x00\\x0DDI_Dispatchersq\\x00~\\x00\\x0Et\\x00\\x09DI_Driverxq\\x00~\\x00\\x0Dppsr\\x00&com.company.mdm.security.MDMUserDetailsc\\xBCx\\x96/~\\xCFe\\x02\\x00\\x01L\\x00\\x05_usert\\x00!Lcom/company/mdm/domain/user/User;xr\\x00 com.company.security.LoginContext\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x12Z\\x00\\x14_isAccountNonExpiredZ\\x00\\x13_isAccountNonLockedZ\\x00\\x0F_isAppStoreUserZ\\x00\\x18_isCredentialsNonExpiredZ\\x00\\x0A_isEnabledZ\\x00\\x0AenrollmentL\\x00\\x0C_authoritiesq\\x00~\\x00\\x06L\\x00\\x0A_companyIdt\\x00\\x13Ljava/lang/Integer;L\\x00\\x0B_dateFormatq\\x00~\\x00\\x0FL\\x00\\x07_localeq\\x00~\\x00\\x0FL\\x00\\x09_passwordq\\x00~\\x00\\x0FL\\x00\\x07_secLvlq\\x00~\\x00\\x0FL\\x00\\x09_timeZoneq\\x00~\\x00\\x0FL\\x00\\x08_tokenIdq\\x00~\\x00\\x0FL\\x00\\x07_userIdq\\x00~\\x00\\x1BL\\x00\\x0B_userLocalet\\x00\\x12Ljava/util/Locale;L\\x00\\x09_userNameq\\x00~\\x00\\x0FL\\x00\\x0BcompanyCodeq\\x00~\\x00\\x0Fxp\\x01\\x01\\x00\\x01\\x01\\x00sq\\x00~\\x00\\x0C\\x00\\x00\\x00\\x04w\\x04\\x00\\x00\\x00\\x04q\\x00~\\x00\\x10q\\x00~\\x00\\x12q\\x00~\\x00\\x14q\\x00~\\x00\\x16xsr\\x00\\x11java.lang.Integer\\x12\\xE2\\xA0\\xA4\\xF7\\x81\\x878\\x02\\x00\\x01I\\x00\\x05valuexr\\x00\\x10java.lang.Number\\x86\\xAC\\x95\\x1D\\x0B\\x94\\xE0\\x8B\\x02\\x00\\x00xp\\x00\\x00\\x00\\x01t\\x00\\x19MM/dd/yyyy hh:mm:ss aaa zt\\x00\\x05en-USt\\x00,55hBiwOi5AcBPYk1Uh5cpyt7WeyOS+ghoBtDWFxmLfE=pt\\x00\\x09GMT-05:00psq\\x00~\\x00\\x1F\\x00\\x00\\x00\\x01sr\\x00\\x10java.util.Locale~\\xF8\\x11`\\x9C0\\xF9\\xEC\\x03\\x00\\x06I\\x00\\x08hashcodeL\\x00\\x07countryq\\x00~\\x00\\x0FL\\x00\\x0Aextensionsq\\x00~\\x00\\x0FL\\x00\\x08languageq\\x00~\\x00\\x0FL\\x00\\x06scriptq\\x00~\\x00\\x0FL\\x00\\x07variantq\\x00~\\x00\\x0Fxp\\xFF\\xFF\\xFF\\xFFt\\x00\\x02USt\\x00\\x00t\\x00\\x02enq\\x00~\\x00_q\\x00~\\x00_xt\\x00\\x05admint\\x00\\x08NUVZQAINsr\\x00\\x1Fcom.company.mdm.domain.user.User\\xB1l\\xB4wgCO\\x0F\\x02\\x00\\x07L\\x00\\x06dobStrq\\x00~\\x00\\x0FL\\x00\\x08fullNameq\\x00~\\x00\\x0FL\\x00\\x0DlicenseExpStrq\\x00~\\x00\\x0FL\\x00\\x06loadIdq\\x00~\\x00\\x1BL\\x00\\x14numberOfLoadAssignedq\\x00~\\x00\\x1BL\\x00\\x11openLoadsAssignedt\\x00\\x13Ljava/lang/Boolean;L\\x00\\x06statusq\\x00~\\x00\\x0Fxppt\\x00\\x0Ccompany Adminppppp\n1. Is it the right approach to use spring session together wth spring-data-redis for this purpose   or use spring session and go with a stateless architecture where we don't really worry about the http session at all.\n\nThe kind of configurations that I have are given below:\n\nweb.xml:\n\n```\n     <filter>\n    <filter-name>springSessionRepositoryFilter</filter-name>\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>springSessionRepositoryFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n    <dispatcher>REQUEST</dispatcher>\n    <dispatcher>ERROR</dispatcher>\n    <dispatcher>ASYNC</dispatcher>\n</filter-mapping>\n```\n\nThis filter is before the spring security filter.\n\njedisContext.xml:\n\n```\n  <bean class=\"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration\" />\n <bean class=\"org.springframework.web.filter.DelegatingFilterProxy\">\n   <constructor-arg>\n    <bean class=\"org.springframework.session.web.http.SessionRepositoryFilter\">\n        <constructor-arg ref=\"sessionRepository\"/>\n    </bean>\n   </constructor-arg>\n </bean>\n```\n\nWe use the following versions:\nSpring version: 4.3.0.RELESE, spring security version: 3.2.9.RELEASE\nSpring session version: 1.2.1.RELEASE, Spring session data redis version: 1.7.1.RELEASE\n\nThanks in advance\nSethukumar\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "codependent": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/571", "title": "Session Cookie is not added in the response when using Tiles and Tomcat 8", "body": "I opened a [question on Stackoverflow](http://stackoverflow.com/questions/38368151/spring-session-not-working-on-tomcat-8-when-using-tiles-session-cookie-is-not) where you can find a complete description of the problem.\n\nTo sum up, when using Tiles, Tomcat's HttpServletReponse addCookie() checks that the response is not included. If it is, it doesn't add the cookie so the created session doesn't reach the browser.\n\nAny idea of how this could be addressed?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "khauser": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/570", "title": "Exclude classes from deserialization", "body": "Hi there,\n\nI have set up a running microservice infrastructure (https://github.com/khauser/microservices4vaadin) based on:\n- Spring-Boot 1.3.5\n- Spring Session 1.2.1\n- Spring Data Redis 1.7.2\n- Jedis 2.8.1\n- Vaadin 7.6.7\n- and \"some\" others ..\n\nIn this scenario spring session (+redis) is used to share a common session overall microservices having the `@EnableRedisHttpSession`-tag (authserver, edge, frontend). In order to get this run I had to add some dirty hacks where you might have some over proposals.\n\nThe problem is that all services try to deserialize the whole objects stored in the session. In spite of User and Authorisation data this is fine, all the enable services need them and do have the related classes. But for example the frontend (implemented with vaadin) additionally needs to store also the `VaadinSession`-object which definitely is not needed by the other services. Thats why I have adjusted the deserialization process within spring-session by adding \n\n``` java\nif(!key.contains(\"springVaadinServlet\"))\n                map.put((HK) deserializeHashKey(entry.getKey()), (HV) deserializeHashValue(entry.getValue()));\n```\n\nto line 280 in org.springframework.data.redis.core.AbstractOperations.java. Now the other services (authserver, edge) ignore the data form the Vaadin session.\n\nIs there another way to achieve the same behavior, maybe a \"exclude classes from deserialization\"-feature?\n\nThanks for you help!\nKarsten\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danwashusen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/567", "title": "spring-security and spring-session seem to be incompatible 'out of the box'", "body": "spring.version=4.2.6.RELEASE\nspring-security.version=4.1.0.RELEASE\nspring-session.version=1.2.0.RELEASE\n\nIt looks like the spring-security classes o.s.security.web.authentication.session.AbstractSessionFixationProtectionStrategy and o.s.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy are incompatible with spring-session unless org.springframework.web.util.HttpSessionMutexListener is configured.\n\nCode in AbstractSessionFixationProtectionStrategy#onAuthentication uses `WebUtils.getSessionMutex(session)` to get the mutex lock object, without HttpSessionMutexListener configured the session instance is used. However spring-session seems to be using a different instance of SessionRepositoryFilter$SessionRepositoryRequestWrapper$HttpSessionWrapper for each request. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "edeandrea": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/563", "title": "encodeRedirectURL being called by SpringMVC after HttpSessionManager.encodeUrl, which wipes out newly-created session alias", "body": "I notice 2 bugs in the spring-session code, both inside the CookieHttpSessionStrategy class. I submitted pull request #562 to fix the issue.\n\nI've attached a small spring-boot application to demonstrate the problem. You can run the spring-boot application, navigate to http://localhost:8080/springsessionbug/test. On the page you'll see a button. Upon clicking that it should redirect back to the same page but create a new session. It outputs something to standard out saying what the actual redirect should be, but you'll notice in your browser's address bar the _s parameter is not added to the url, plus there is just a ? there, showing the 2nd bug I reported.\n\nI also submitted this via the GSS Support Portal (https://support.pivotal.io/tickets/30469).\n\nThe first, using their own sample application, after getting a new session alias from the HttpSessionManager, it calls HttpSessionManager.encodeURL and then stores the output into a request attribute which is later rendered. However, in a Spring MVC application, a Controller may want to issue a redirect to a newly-encoded URL, like this:\n\nHttpSessionManager sessionManager = (HttpSessionManager) request.getAttribute(HttpSessionManager.class.getName()); \nString newSessionAlias = sessionManager.getNewSessionAlias(request); \nString currentSessionAlias = sessionManager.getCurrentSessionAlias(request);\n\nreturn String.format(\"redirect:%s\", sessionManager.encodeURL(\"/test\", newSessionAlias));\n\nThe problem here is that Spring MVC will funnel the redirect back through CookieHttpSessionStrategy.MultiSessionHttpServletResponse.encodeRedirectURL, which then looks up the current alias & re-encodes with that alias, effectively replacing the new alias which the controller added. The fix would be for the CookieHttpSessionStrategy.MultiSessionHttpServletResponse to examine the inputted url for the appropriate parameter & don't re-encode if it finds it there.\n\nThe second issue is that inside CookieHttpSessionStrategy line 346 (return path + \"?\" + query;) is that if there is no query string (on the default session alias) then the resulting URL will end in a ? with nothing after it. In that situation the ? should be removed as well because the query string is empty.\n\n[spring-session-bug.zip](https://github.com/spring-projects/spring-session/files/337345/spring-session-bug.zip)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "smithsos": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/561", "title": "Mismatched constant names for the HTTP session id in a websocket context", "body": "Both SessionRepositoryMessageInterceptor from SpringSession and HttpSessionHandshakeInterceptor define constants for the HTTP session id.\n\nSpring session defines the constant as _SPRING.SESSION.ID_ and spring-websockets defines it as _HTTP.SESSION.ID_.\n\nThe constants are different and this leads to an null pointer exception when HttpSessionHandshakeInterceptor is enabled. The stacktrace is below.\n\n```\n[ERROR] 2016-06-27 11:52:59.679 [http-nio-8080-exec-8] WebSocketConnectHandlerDecoratorFactory:87 - Error publishing org.springframework.session.web.socket.events.SessionConnectEvent[source=SessionWebSocketHandler [delegate=SubProtocolWebSocketHandler[StompSubProtocolHandler[v10.stomp, v11.stomp, v12.stomp]]]].\njava.lang.NullPointerException\n    at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) ~[?:1.8.0_91]\n    at org.springframework.session.web.socket.handler.WebSocketRegistryListener.registerWsSession(WebSocketRegistryListener.java:118) ~[spring-session-1.2.0.RELEASE.jar:?]\n    at org.springframework.session.web.socket.handler.WebSocketRegistryListener.afterConnectionEstablished(WebSocketRegistryListener.java:86) ~[spring-session-1.2.0.RELEASE.jar:?]\n    at org.springframework.session.web.socket.handler.WebSocketRegistryListener.onApplicationEvent(WebSocketRegistryListener.java:67) ~[spring-session-1.2.0.RELEASE.jar:?]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]\n```\n\nThe session id is present in the attributes map under the key HTTP.SESSION.ID. Spring session version 1.2.0.RELEASE. Spring websocket version is 4.3.0.RELEASE.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/561/reactions", "total_count": 6, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 1, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "elygre": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/560", "title": "Provide DeltaAwareSessionAttribute interface", "body": "<!--\nThanks for raising a Spring Session issue. Please provide a brief description of your problem along with the version of Spring Session that you are using. If possible, please also consider putting together a sample application that reproduces the issue.\n-->\n\nWe have been bitten a few times by the behaviour that a session attribute is only written to the backing store if session.setAttribute() has been called. That is, the following pseudocode will not persist `config` to the backing store, because the session is not aware that it changed:\n\n```\nMyConfigAttribute config = session.getAttribute(\"config-attribute\")\nconfig.setSomeValue()\n```\n\nNow, it can be fixed easily enough, but this forces the attribute to be written every time, even if nothing changed:\n\n```\nMyConfigAttribute config = session.getAttribute(\"config-attribute\")\nsession.setAttribute(\"config-attribute\", config);\nconfig.setSomeValue()\n```\n\nIt would be nice if there was some way of indicating that the attribut _may_ change, and have the session store check this during persisting. One way would be to have an interface that could be implemented by the attribute classes, which would repsonsd to queries to whether it changed. (The implementation would probably be to use a transient field).\n\n```\npublic class MyConfigAttribute implements DeltaAwareSessionAttribute [\n   boolean sessionAttributeHasChanged() { ... }\n}\n```\n\nWith this, the session store would have to understand this. The simplest implementation would be to instrument `getAttribute`, so that when the client calls `session.getAttribute(\"config-attribute\")`, the store would \"tag\" this attribute for later checking, and then let the attribute decide for itself whether the session has changed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ssi-paulsideleau": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/552", "title": "Issue with CookieHttpSessionStrategy and Undertow", "body": "Spring Session 1.2.0\n\nIf you do an include to a JSP page and the content of the JSP page exceeds the response buffer size, SpringSession will not be able to write the set-cookie response header if the app is running on Undertow.  That's b/c undertow ignores the response.addCookie when called within an include.  See http://lists.jboss.org/pipermail/undertow-dev/2015-June/001265.html.  You may want to eagerly write the cookie as soon as a new session id is created to minimize this and/or reconsider supporting URL encoding.  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mschipperheyn": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/542", "title": "Documentation: OpenSessionInView problem", "body": "When you follow the guide to integrated Spring session with Spring Security, you will place the sessionRepositoryFilter at the top of the processing chain. \n\nThis places it before the OpenSessionInViewFilter which will normally be configured in the AppInitializer or web.xml. And it will create LazyLoadingExceptions if anything is saved during the authentication process, such as updating the last login date. \n\nTo solve this, a user will need to remove the OpenSessionInViewFilter from the AppInitializer/web.xml and add it to AbstractHttpSessionApplicationInitializer like so:\n\n```\npublic class SessionWebApplicationInitializer extends AbstractHttpSessionApplicationInitializer {\n\npublic SessionWebApplicationInitializer() {\n}\n\npublic SessionWebApplicationInitializer(Class<?>... configurationClasses) {\n    super(configurationClasses);\n}\n\nprotected void beforeSessionRepositoryFilter(ServletContext servletContext) {\n    Dynamic registration = servletContext.addFilter(\"openSessionInViewFilter\", new OpenSessionInViewFilter());\n    if (registration == null) {\n        throw new IllegalStateException(\n                \"Duplicate Filter registration for openSessionInViewFilter. Check to ensure the Filter is only configured once.\");\n    }\n    registration.setAsyncSupported(false);\n    EnumSet<DispatcherType> dispatcherTypes = getSessionDispatcherTypes();\n    registration.addMappingForUrlPatterns(dispatcherTypes, false,\"/*\");\n}\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattluce": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/539", "title": "uri fragments handled incorrectly by CookieHttpSessionStrategy.encodeUrl", "body": "URI Fragments are not handled properly by encodeUrl. See test below.\n\nUsing UriComponentsBuilder in encodeUrl fixes this issue.\n\n```\n@Test\npublic void encodeUrlWithFragment() {\n    assertThat(new CookieHttpSessionStrategy().encodeURL(\"/url?a=b#xyz\", \"2\"))\n            .isEqualTo(\"/url?a=b&_s=2#xyz\");\n}}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "solidjb": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/535", "title": "Add Dropwizard Metrics", "body": "Add Dropwizard Metrics\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bpapez": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/499", "title": "NullPointerException in sessionDestroyed listener", "body": "We are using Spring Session version 1.1.1.RELEASE with Redis and sometimes see the following stacktrace in the log:\n\n```\n2016-04-20 11:07:33,986: ERROR [RedisOperationsSessionRepository] - Error publishing org.springframework.session.events.SessionExpiredEvent[source=org.springframework.session.data.redis.RedisOperationsSessionRepository@3ec0b82f].\njava.lang.NullPointerException\n       at org.springframework.session.web.http.ExpiringSessionHttpSession.getId(ExpiringSessionHttpSession.java:61)\n       at org.jahia.bin.listeners.JahiaContextLoaderListener.sessionDestroyed(JahiaContextLoaderListener.java:446)\n       at org.springframework.session.web.http.SessionEventHttpSessionListenerAdapter.onApplicationEvent(SessionEventHttpSessionListenerAdapter.java:62)\n       at org.springframework.session.web.http.SessionEventHttpSessionListenerAdapter.onApplicationEvent(SessionEventHttpSessionListenerAdapter.java:40)\n       at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)\n       at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)\n       at org.springframework.session.data.redis.RedisOperationsSessionRepository.publishEvent(RedisOperationsSessionRepository.java:557)\n       at org.springframework.session.data.redis.RedisOperationsSessionRepository.handleExpired(RedisOperationsSessionRepository.java:549)\n       at org.springframework.session.data.redis.RedisOperationsSessionRepository.onMessage(RedisOperationsSessionRepository.java:515)\n       at org.springframework.data.redis.listener.RedisMessageListenerContainer.executeListener(RedisMessageListenerContainer.java:245)\n       at org.springframework.data.redis.listener.RedisMessageListenerContainer.processMessage(RedisMessageListenerContainer.java:235)\n       at org.springframework.data.redis.listener.RedisMessageListenerContainer$1.run(RedisMessageListenerContainer.java:960)\n       at java.lang.Thread.run(Thread.java:745)\n```\n\nIs this a bug or an expected behaviour? Do we have to expect that NullPointerException or could it be prevented?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/499/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/441", "title": "Failover support with sticky session", "body": "We have a strong requirement to use sticky sessions, because when content is written to our backend repository there is some asynchronous technology to update other cluster nodes. So only with sticky session it is guaranteed that the writing user can immediately on the next request read the updated content.\n\nTherefore we are currently using the DefaultCookieSerializer and specify a jvmRoute similar to how it is done at Tomcat. However we would like to also provide failover support, so that when a server goes down, another cluster node is taking over the session. As the session is stored in Redis this is perfectly possible. However the problem we are facing is that now the session with the jvmRoute in the cookie still points to the node, which has been shut down. \n\nLets say I had servers with jvmRoute node1, node2, node3 and then node3 goes down. What happens next is that suddenly the requests will arbitrarily be sent to node1 and node2 (like non-sticky), whereas we would like that the requests of the session continue sticking always to the same server. For that it would be necessary to create a new cookie with the jvmRoute of the new cluster node, which will now continue working on that session.\n\nWhen using Tomcat PersistentManager this problem is solved by using the org.apache.catalina.ha.session.JvmRouteBinderValve. How could something like that be best solved when using Spring Session?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dzhai": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/497", "title": "Multiple clients to share data in a session, but is not the same sessionid", "body": "**As such**\n**spring:session:userid:cache**                                  ---- The user cache information  \n**spring:session:userid:login_pc_XXXX**                    ---- Sessionid of cookies and custom data  \n**spring:session:userid:login_IOS_XXXX**                  ---- Sessionid of cookies and custom data  \n**spring:session:userid:login_Android_XXXX**            ---- Sessionid of cookies and custom data  \n**spring:session:userid:login_pc_XXXX**                    ---- Sessionid of cookies and custom data  \n....\n\nthanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/497/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rolandgroen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/485", "title": "Default pool size for the Redis RedisMessageListenerContainer.taskExecutor", "body": "The RedisMessageListenerContainer uses a SimpleAsyncTaskExecutor to dispatch the messages. This causes problems regarding thread creation and repletion, see issue https://github.com/spring-projects/spring-session/issues/483. \n\nIt makes sense to make spring-session inject a Pooled TaskExecutor into spring-data-redis. We use a pool size of 10. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkopylec": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/474", "title": "Session namespaces support", "body": "Hi, what do you think about adding namespaces support to Spring Session?\nI have created such an impelmentation in data-couchbase support: https://github.com/spring-projects/spring-session/pull/468\n@rwinch points out that there should not be a support for namespaces in the PR so let's discuss it here.\n\nThe idea is to have a global session namespace (that's how Spring Session is implemented now) and an additional, optional appilication namespaces:\n- application namespace - attributes are visible only to instances of the same web application within a distributed system\n- global namespace - attributes are visible to all instances of all web applications within a distributed system\n\nBy default namespaces support could be turned off somehow.\n\nHaving namespaces pros (in my opinion):\n1. Session data in a large distributed system (aspecially in microservices architecture) can be pretty big. Having application and global namespaces reduces the amount of data to read every `HttpSession.getSession()` invocation. You can gain a significant performance boost using session namespaces.\n2. With namespaces multiple different apps/services in the system can set or get a session attribute of the same name without conflicting each other.\n\n[Here](https://github.com/mkopylec/spring-session/blob/master/spring-session/src/integration-test/groovy/org/springframework/session/data/couchbase/specification/NamespacesSpec.groovy) you can see how namespaces work in data-couchbase PR.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58955414", "body": "Sure, I thought that if the whole project is build on gradle I will stick to one build technology.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58955414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58955542", "body": "No, those two are different databases: http://www.couchbase.com/couchbase-vs-couchdb\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58955542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957131", "body": "Ok, I'll change that\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957227", "body": "Yes, this is because of namespaces support.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58956988", "body": "Generally this is for microservices architecture systems. There couple of reasons I decided to go with namespace:\n1. Session data in a large distributed system (aspecially in microservices architecture) can be pretty big. Having app and global namespaces reduces the amount of data to read every `HttpSession.getSession()` invocation. You can gain a significant performance boost using session namespaces.\n2. There is almost none additional complexity for a developer. If you don't want to use them you can set the same namespace in all your apps in the system or use only global namespace. Maybe by default namespaces support could be turned off.\n3. With namespaces multiple different microservices in the system can set or get a session attribute of the same name without conflicting each other.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58956988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957431", "body": "Sure, good idea.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957536", "body": "This is because `DelegatingSessionStrategy` depends on servlet api 3.1.0\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957975", "body": "I'm not quite sure it's a good idea. From the DDD side the `CouchbaseSessionRepository` playes a domian repository role for a session entity and the `CouchbaseDao` is just a data access object that communicates directly with couchbase server.\nBeside that joining those two guys will create a quite big, hard to read class in my opinion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58957975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58983110", "body": "Ok, I understand. I can create such a ticket and PR.One important question here: should the PR consider namespaces support only for data couchbase or maybe the changes should be global and made in the core Spring Session API (`ExpiringSession`, `FindByIndexNameSessionRepository`, etc.)? Or maybe it should be a brand new session repository?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/58983110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60426090", "body": "What is the purpose of having setters in `@Configuration` class?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60426090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "xiaolongyuan": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/465", "title": "Can provide an example of the integration of Spring-security-oauth2?", "body": "", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mrusinak": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/461", "title": "Session timeout handling in Spring Security not working", "body": "When attempting to add spring-session to an existing Spring MVC project with spring-security, I get the following behavior (EDIT: with tomcat's session-timeout set to 1 minute for testing):\n- With the springSessionRepositoryFilter filter in web.xml _commented-out_, I am correctly booted to the login screen after a minute of inactivity\n- With the springSessionRepositoryFilter filter in web.xml active, I can continue to use the app at least 5 minutes after the last activity\n\nBesides that, everything seems to work as expected - the session is persisted in redis & across webapp restarts, and logging out manually correctly invalidates the session. \n\nSome snippets of my configuration - here is the invalid session handler configuration for spring-security, that will cause expired sessions to be redirected to a login page:\n\n``` xml\n    ...\n    <beans:bean id=\"sessionManagementFilter\" class=\"org.springframework.security.web.session.SessionManagementFilter\">\n        <beans:constructor-arg name=\"securityContextRepository\">\n            <beans:bean class=\"org.springframework.security.web.context.HttpSessionSecurityContextRepository\"/>\n        </beans:constructor-arg>\n        <beans:property name=\"invalidSessionStrategy\">\n            <beans:bean class=\"my.CustomInvalidSessionStrategy\"/>\n        </beans:property>\n    </beans:bean>\n    ...\n    <http>\n        ...\n        <custom-filter position=\"SESSION_MANAGEMENT_FILTER\" ref=\"sessionManagementFilter\"/>\n        ...\n        <logout delete-cookies=\"true\" invalidate-session=\"true\" logout-url=\"/signout.html\" success-handler-ref=\"logoutSuccessHandler\"/>\n    </http>\n```\n\nThe web.xml 's filter chain looks like:\n\n``` xml\n    <filter>\n        <filter-name>springSessionRepositoryFilter</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>springSessionRepositoryFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n    <filter>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\nAnd (one of) the spring context files loaded contains:\n\n``` xml\n    <bean class=\"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration\"/>\n\n    <bean class=\"org.springframework.security.web.session.HttpSessionEventPublisher\"/>\n\n    <bean class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"/>\n```\n\nI apologize if this has been asked before - I've been browsing around the issues related to session timeouts and/or spring security, but they seem to either be about concurrency limits or seemed to pre-date the \"HttpSessionEventPublisher\", which appears to be the solution to this. Hopefully I'm just missing something really obvious!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wirasto": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/453", "title": "Multisession can't switch to other session", "body": "When I check, current session alias always 0.\nSo, every I use ?_s=1 or ?_s=alias_login_before, only give me login page.\n\n```\nString currentSessionAlias = sessionManager.getCurrentSessionAlias(httpServletRequest);\nSystem.out.println(\"currentSessionAlias: \" + currentSessionAlias);\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "YLombardi": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/361", "title": "Unreadable session after serialization", "body": "I use Spring session with a Redis repository.\nI also use the same Redis to store cache data.\nIt works fine but I the session attributes that are storred in Redis are unreadable.\nWhen I try to read the content of the repository, I see this : \n[http://img11.hostingpics.net/pics/492480redisexpiration.png](http://img11.hostingpics.net/pics/492480redisexpiration.png)\n\nHere is my configuration classes : \n\n``` java\n@Configuration\n@EnableRedisHttpSession\npublic class SessionRepositoryConfig {\n    @Value(\"${spring.redis.host}\")\n    private String redisHostName;\n\n    @Value(\"${spring.redis.port}\")\n    private Integer redisPort;\n\n    @Value(\"${spring.redis.expiration.short}\")\n    private Integer redisExpirationShort;\n\n    @Value(\"${spring.redis.expiration.medium}\")\n    private Integer redisExpirationMedium;\n\n    @Value(\"${spring.redis.expiration.long}\")\n    private Integer redisExpirationLong;\n\n    @Bean\n    JedisConnectionFactory jedisConnectionFactory() {\n        JedisConnectionFactory factory = new JedisConnectionFactory();\n        factory.setHostName(redisHostName);\n        factory.setPort(redisPort);\n        factory.setUsePool(true);\n        return factory;\n    }\n    @Bean\n    @Order(value = 0)\n    public FilterRegistrationBean sessionRepositoryFilterRegistration(SessionRepositoryFilter springSessionRepositoryFilter) {\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new DelegatingFilterProxy(springSessionRepositoryFilter));\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\"));\n        return filterRegistrationBean;\n    }\n}\n\n\n@Configuration\n@EnableCaching\npublic class RedisConfiguration extends CachingConfigurerSupport {\n    @Primary\n    @Bean\n    public RedisTemplate<String,ExpiringSession> redisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, ExpiringSession> template = new RedisTemplate<>();\n\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());\n        template.setHashValueSerializer(new LdapFailAwareRedisObjectSerializer());\n\n        template.setConnectionFactory(connectionFactory);\n        return template;\n    }\n    @Bean\n    public KeyGenerator keyGenerator() {\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(method.getName());\n            for (Object obj : params) {\n                sb.append(obj.toString());\n            }\n            return sb.toString();\n        };\n    }\n}\n```\n\nI use a custom serializer because I had an issue with the serialization of ldap information (http://stackoverflow.com/questions/32751094/spring-boot-with-session-redis-serialization-error-with-bad-active-directory-lda).\n\nAny idea why I can't read content of the redis database ?\nI think this is a serialization issue but I don't find any solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "truemany": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/355", "title": "how to use spring-session in stereotype.Controller?", "body": "how to use spring-session in stereotype.Controller?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pcornelissen": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/348", "title": "Provide reliable serialization mechanism (not objectstream)", "body": "The current way to handle serialization via objectstream may be the solution that was easiest to implement (and fastest at runtime?), but it has some serious disadvantages. The negative effects are also visible in issues like #320 and #200.\n\nI think this is rather unfortunate, because the current approach makes the whole microservice based application potentially a deployment monolith. When you change a class in one service then you also need to change all other services that fetch the underlying data. The current approach is very very fragile :-(\n\nI was first made aware of this problem when I tried to upgrade one service from spring boot 1.2.x to 1.3.x. Due to the fact that spring security changed, the UserDetails implementation changed too and the whole app broke apart. This is really bad, because now I have to do a big bang release of all services that use the session at once.\n\nWhat I would expect to be possible:\nMicroservice 1 handles the user authentication, as it does more than just displaying it, it has it's own UserDetails Implementation.\nMicroservice 2 just uses a simple POJO to read the UserDetails from the session to display it and make security related decisions\n\nThis doesn't work at all at the moment, as both services need to use exactly the same implementation. \n\nWouldn't it be much more robust to use something like json/jsonb or something like that?\nThen you even could use non java clients to read the same session info.\n#283 seems to allow a better serialization strategy, but every spring-session user has to come up with his own implementation and I think this is a very common use-case and it would be great it spring would ship with a good solution.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/348/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kianris": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/331", "title": "Serialized session losing property editors", "body": "We have a `@Controller` that uses `@InitBinder` to register a custom property editor.  When there are data binding errors the `BeanPropertyBindingResult` is saved to the session in Spring's flash map but the BeanWrapper containing the property editors is transient, causing errors when values are retrieved and not converted properly.\n\nThere are some issues relating to this, https://jira.spring.io/browse/SPR-2569 and https://jira.spring.io/browse/SPR-2674, that suggest property editors should be re-applied after the binding result has been retrieved from the session. Is there a way to do this at the application level or would this need a pull request for spring-session?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jjparsons": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/320", "title": "Spring Session & Microservices", "body": "Is it possible to use Spring Session for clustered HTTP sessions and a CRSF repository in a microservices system? Spring Session requires the UserDetails impl and GrantedAuthority impl to be shared across all microservices for deserialization. Ideally once serialized on the microservice that creates the session, other microservices should be able leverage session information without knowledge of the underlying impl. I feel this is an anti-pattern because microservices should be designed using a banded context and be fairly independent from a model perspective following the principles of the Twelve-Factor App.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/320/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leonty": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/317", "title": "DefaultCookieSerializer drops domain at all if the pattern doesn't match", "body": "This refers #299. \nIf I use domainNamePattern to change the domain, the DefaultCookieSerializer removes the domain parameter at all if the regexp doesn't match. I came acros this when tried to implement \"3rd level domain cookie\" behavior. I used a regexp to keep to drop segments after 3rd and expected that domain that doesn't match the regexp at all just stay as is. (the regexp in the example of #299 is not very useful as it cuts the domain to 1 and 2 segments - imagine a cookie for \".org\" !)\n\nI think it would be more useful for real use to keep the domain unchanged if the regexp doesn't match return request.getServerName() at the end of the this code:\n\n```\nprivate String getDomainName(HttpServletRequest request) {\n    if (domainName != null) {\n        return domainName;\n    }\n    if (domainNamePattern != null) {\n        Matcher matcher = domainNamePattern.matcher(request.getServerName());\n        if (matcher.matches()) {\n            return matcher.group(1);\n        }\n    }\n    return null;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oassuncao": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/311", "title": "Save session on Redis RedisSession.saveDelta", "body": "I'm using Spring Session version 1.0.2.RELEASE and I found a problem when RedisSession save delta\n\nIf you add a new value on session (RedisSession) the session save correctly on Redis, because we have this code below:\n\n```\n        public void setAttribute(String attributeName, Object attributeValue) {\n            cached.setAttribute(attributeName, attributeValue);\n            delta.put(getSessionAttrNameKey(attributeName), attributeValue);\n        }\n```\n\nBut if in other request I get a object in this session, change some property of this object, the session on redis is not updated.\n\nThe problem is when we create RedisSession passing MapSession, this map is setter on variable \"cached\" but the values of \"cached\" doesn't pass to \"delta\"\n\nExample to reproduce the problem:\nPOJO\n\n```\npublic class NamePOJO implements Serializable {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\nController\n\n```\n    ...\n    @RequestMapping(value = \"/changeSession/{value}\")\n    public void changeOnSession(@PathVariable(value  = \"value\") String value, HttpServletRequest request) throws IOException {\n        final String sessionName = \"SESSION_NAME\";\n\n        NamePOJO oldVersion;\n        if (request.getSession().getAttribute(sessionName) == null) {\n            oldVersion = new NamePOJO();\n            oldVersion.setName(value);\n            request.getSession().setAttribute(sessionName, oldVersion);\n        }\n\n        oldVersion = (NamePOJO)request.getSession().getAttribute(sessionName);\n\n        log.info(String.format(\"Old name %s new name %s\", oldVersion.getName(), value));\n        oldVersion.setName(value);\n    }\n    ...\n```\n\n1\\* Request (/changeSession/Test)\nOutput: Old name Test new name Test\n2\\* Request (/changeSession/Changed)\nOutput: Old name Test new name Changed\n3\\* Request (/changeSession/Changed)\nOutput: Old name Test new name Changed\n\nOn the 3\\* request, the old name doesn't changed\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "louvelg": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/291", "title": "Issue with JSF Primefaces", "body": "Hi,\n\nI have an issue with spring session in a project with spring boot, JSF and Primefaces.\nIf I have don't have @EnableRedisHttpSession in my spring boot config, my page works fine, but if i have @EnableRedisHttpSession, I have this error :\n\njavax.faces.application.ViewExpiredException: viewId:/groupe/groupeCreate.xhtml - La vue \u00ab/groupe/groupeCreate.xhtml\u00bb n\u2019a pas pu \u00eatre restaur\u00e9e.\n    at com.sun.faces.lifecycle.RestoreViewPhase.execute(RestoreViewPhase.java:212)\n    at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)\n    at com.sun.faces.lifecycle.RestoreViewPhase.doPhase(RestoreViewPhase.java:123)\n    at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:198)\n    at javax.faces.webapp.FacesServlet.service(FacesServlet.java:658)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.ocpsoft.rewrite.servlet.RewriteFilter.doFilter(RewriteFilter.java:205)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:59)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:109)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:721)\n    at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:466)\n    at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:391)\n    at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:318)\n    at org.ocpsoft.rewrite.servlet.impl.HttpRewriteResultHandler.handleResult(HttpRewriteResultHandler.java:41)\n    at org.ocpsoft.rewrite.servlet.RewriteFilter.rewrite(RewriteFilter.java:268)\n    at org.ocpsoft.rewrite.servlet.RewriteFilter.doFilter(RewriteFilter.java:188)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:125)\n    at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:65)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:116)\n    at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:60)\n    at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:91)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:109)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1527)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1484)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Unknown Source)\n\nThis occured on a simple page with a requestScopeBean :\n\nMy page : \n\n``` html\n<ui:param name=\"b\" value=\"#{groupeCreateView}\" />\n<h:form id=\"FormContent\">\n            <div class=\"wrapper wrapper-content\">\n                <div class=\"ibox\">\n                    <div class=\"ibox-content\">\n                        <div class=\"row\">\n                            <div class=\"col-lg-12\">\n                                <p:messages closable=\"true\" />\n                            </div>\n                        </div>\n                            <div class=\"row\">\n                                <div class=\"col-lg-12\">\n                                    <div class=\"form-group\">\n                                        <label> <h:outputText value=\"#{message.groupe_name} : \" /><h:outputText styleClass=\"requiredField\" value=\" *\" />\n                                        </label>\n                                        <h:inputText value=\"#{b.groupe.name}\" required=\"true\" label=\"#{message.groupe_name}\" styleClass=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"col-lg-12\">\n                                    <div class=\"form-group\">\n                                        <label> <h:outputText value=\"#{message.groupe_description} : \" />\n                                        </label>\n                                        <h:inputTextarea value=\"#{b.groupe.description}\"  label=\"#{message.groupe_description}\" styleClass=\"form-control\">\n                                            <f:validateLength maximum=\"65000\"></f:validateLength>\n                                        </h:inputTextarea>\n                                    </div>\n                                </div>\n                            </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-lg-12\">\n                                <div class=\"submit-btns-zone pull-right\">\n                                    <h:link outcome=\"pretty:viewGroupeList\" styleClass=\"btn btn-white\">\n                                        <h:outputText value=\"#{message.cancel}\" />\n                                    </h:link>\n                                    <h:commandLink action=\"#{b.createGroupe}\" styleClass=\"btn btn-primary\">\n                                        <h:outputText value=\"#{message.save}\" />\n                                    </h:commandLink>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </h:form>\n```\n\nAnd my JSF Bean : \n\n``` java\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.RequestScoped;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.ocpsoft.pretty.faces.annotation.URLMapping;\n\n@RequestScoped\n@ManagedBean(name = \"groupeCreateView\")\n@URLMapping(id = \"viewGroupeCreate\", pattern = \"/groupe/create\", viewId = \"/faces/groupe/groupeCreate.xhtml\")\npublic class GroupeCreateView extends BaseView implements Serializable {\n\n    @Autowired\n    private transient GroupeService groupeService;\n\n    private Groupe                  groupe;\n\n    @PostConstruct\n    public void init() {\n        initBean();\n        groupe = new Groupe();\n    }\n\n    public String createGroupe() {\n        groupe.setTenantId(getTenantId());\n        groupeService.createGroupe(getUser(), groupe);\n        return \"pretty:viewGroupeList\";\n    }\n\n    public Groupe getGroupe() {\n        return groupe;\n    }\n\n    public void setGroupe(Groupe groupe) {\n        this.groupe = groupe;\n    }\n}\n```\n\nMy initBean method : \n\n``` java\npublic void initBean() {\n        WebApplicationContextUtils.getRequiredWebApplicationContext((ServletContext) FacesContext.getCurrentInstance().getExternalContext().getContext()).getAutowireCapableBeanFactory()\n                .autowireBean(this);\n    }\n```\n\nCan you help me to find or correct this issue.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Balaji001": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/282", "title": "Redis cluster connection connection support in spring with jedis (primary for write other for read)", "body": "Hi ,\n\ncan you  please support for redis cluster connection in spring with jedis and redis template. i have multiple nodes from aws elastic cache primary one for write and other two nodes for read. now how can i connect both these three nodes or is it possible to connect single point(with replica group name) so that they can transfer respective nodes if it is write request it will go for primary node or if read it goes for reading capacity nodes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ptahchiev": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/264", "title": "Provide a way to retrieve user's last N sessions.", "body": "It would be a nice feature to be able to show a list of user's last N sessions - where one logged in from, was it mobile, which browser, the date, etc. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72380072", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72380072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hlassiege": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/244", "title": "Is it possible to exclude some url from the SessionRepositoryFilter", "body": "Hi,\n\nI noticed that the SessionRepositoryFilter is active for all url of the application. Even for images, scripts, stylesheets etc... \nIs it possible to add a settings in order to exclude some patterns ?\n\nBye,\nHugo\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/210", "title": "Spring-session and spring-social", "body": "Hi,\n\nSometimes I have some exception in the logs about the fact that a bean is not serializable : \n\n```\nt=http-nio-8443-exec-13 l=ERROR c=o.a.c.c.C.[.[.[.[dispatcherServlet] m=Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception java.io.NotSerializableException: org.springframework.social.security.SocialAuthenticationServiceRegistry\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184) ~[na:1.8.0_25]\n        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[na:1.8.0_25]\n        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[na:1.8.0_25]\n        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[na:1.8.0_25]\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_25]\n        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) ~[na:1.8.0_25]\nWrapped by: org.springframework.core.serializer.support.SerializationFailedException: Failed to serialize object using DefaultSerializer; nested exception is java.io.NotSerializableException: org.springframework.social.security.SocialAuthenticationServiceRegistry\n        at org.springframework.core.serializer.support.SerializingConverter.convert(SerializingConverter.java:67) ~[spring-core-4.1.5.RELEASE.jar!/:4.1.5.RELEASE]\n        at org.springframework.core.serializer.support.SerializingConverter.convert(SerializingConverter.java:34) ~[spring-core-4.1.5.RELEASE.jar!/:4.1.5.RELEASE]\n        at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.serialize(JdkSerializationRedisSerializer.java:50) ~[spring-data-redis-1.4.2.RELEASE.jar!/:1.4.2.RELEASE]\n        at org.springframework.data.redis.core.AbstractOperations.rawHashValue(AbstractOperations.java:146) ~[spring-data-redis-1.4.2.RELEASE.jar!/:1.4.2.RELEASE]\n        at org.springframework.data.redis.core.DefaultHashOperations.putAll(DefaultHashOperations.java:128) ~[spring-data-redis-1.4.2.RELEASE.jar!/:1.4.2.RELEASE]\n        at org.springframework.data.redis.core.DefaultBoundHashOperations.putAll(DefaultBoundHashOperations.java:85) ~[spring-data-redis-1.4.2.RELEASE.jar!/:1.4.2.RELEASE]\nWrapped by: org.springframework.data.redis.serializer.SerializationException: Cannot serialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to serialize object using DefaultSerializer; nested exception is java.io.NotSerializableException: org.springframework.social.security.SocialAuthenticationServiceRegistry\n        at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.serialize(JdkSerializationRedisSerializer.java:52) ~[spring-data-redis-1.4.2.RELEASE.jar!/:1.4.2.RELEASE]\n```\n\nI don't see any other problems except the log but I prefer to report it if someone had an idea about it ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zampettim": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/243", "title": "Allow the CookieHttpSessionStrategy to be extended and overridden", "body": "The CookieHttpSessionStrategy implementation is marked as `final` and thus cannot be extended. So I'm forced to either cut and paste or re-implement all of the good work that went into the implementation. I want to extend the implementation with my own code that adds some additional capabilities, like adding the support for the header strategy if the header exists. This is to support things like dual API and Web Client strategy, or even to just add additional logic to how the session information is setup.\n\nBy removing the `final` keyword, folks can override the implementation to do this. Or provide an alternative method to inject their own logic if desired.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/243/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tsachev": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/235", "title": "Is there a way to implement what org.springframework.web.util.HttpSessionMutexListener provides?", "body": "There are things like spring securty and spring mvc that will use session mutex provided by `org.springframework.web.util.HttpSessionMutexListener`, which is `javax.servlet.http.HttpSessionListener`.\n\n`javax.servlet.http.HttpSessionListener` has two methods `sessionCreated(HttpSessionEvent)` and `sessionDestroyed(HttpSessionEvent)`.\nI saw that there is `SessionDestroyedEvent`, but is there is alternative to `sessionCreated()`?\n`HttpSessionStrategy#onNewSession()` will be invoked too late (after the request is processed).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/59360811", "body": "Why not use `@ConfigurationProperties` here and make `sensible` and `path` configurable?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/59360811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64895241", "body": "I wonder if we should mark this as `changed` if `this.sessionAttrs.remove(attributeName)` returns `null`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64895241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64895699", "body": "Maybe we should use `MapSession` in the generic type (to avoid downcasts) like in other repositories?\n@rwinch Is this breaking change?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/64895699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "csavory": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/219", "title": "Allow subclassing of SessionRepositoryMessageInterceptor", "body": "This issue could be related to #98\n\nWe are currently configuring a WebSocketMessageBroker by extending `WebSocketMessageBrokerConfigurationSupport`.  The reason we are doing this is so we can attach the current user to the Spring Security Context.  We do that with these two beans:\n\n``` java\n    @Bean\n    public AbstractSubscribableChannel clientInboundChannel() {\n        Executor securityExecutor = new DelegatingSecurityContextExecutor( clientInboundChannelExecutor() );\n        ExecutorSubscribableChannel result = new ExecutorSubscribableChannel( securityExecutor );\n        result.addInterceptor( securityContextChannelInterceptorAdapter() );\n        return result;\n    }\n\n    @Bean\n    public ChannelInterceptorAdapter securityContextChannelInterceptorAdapter() {\n        return new SessionRepositoryMessageInterceptor() {\n\n            @Override\n            public Message<?> preSend( Message<?> message, MessageChannel channel ) {\n                Authentication auth = (Authentication) SimpMessageHeaderAccessor.getUser( message.getHeaders() );\n                SecurityContextHolder.getContext().setAuthentication( auth );\n                return super.preSend( message, channel );\n            }\n        };\n    }\n```\n\nI'm trying to follow the examples here: http://docs.spring.io/spring-session/docs/current/reference/html5/guides/websocket.html to integrate Spring session into our application.  In order to do that, I would like to change our class definition to:\n\n``` java\npublic class WebSocketConfig extends AbstractSessionWebSocketMessageBrokerConfigurer<ExpiringSession>\n```\n\nand then override this method like this:\n\n``` java\n    @Override\n    public void configureClientInboundChannel(ChannelRegistration registration) {\n        registration.setInterceptors(new SessionRepositoryMessageInterceptor<ExpiringSession>(sessionRepository) {\n\n            @Override\n            public Message<?> preSend( Message<?> message, MessageChannel channel ) {\n                Authentication auth = (Authentication) SimpMessageHeaderAccessor.getUser( message.getHeaders() );\n                SecurityContextHolder.getContext().setAuthentication( auth );\n                return super.preSend( message, channel );\n            }\n        });\n    }\n```\n\nBut I can't because SessionRepositoryMessageInterceptor is final and can't be subclassed. Any chance you can change that class definition? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cshannon": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/212", "title": "Add an option to expire a session a certain amount of time after creation", "body": "It would be really useful to be able to expire a session (plus associated websocket connections) after a session is a certain age, regardless of last access time.  This would be equivalent to a cache \"expireAfterWrite\" setting.  \n\nThe specific use case I have in mind is when using Spring Security I would like to be able to set a maximum time that a Session can be alive before it expires and a user must be re-authorized .  While usually not an issue, sometimes a session can stay open a long time and not expire if a user doesn't close their browser (do to polling channels, etc).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chrylis": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/200", "title": "class versioning recommendations/best practices", "body": "I'm running into issues where new class versions are changing `serialVersionUID`s and throwing deserialization exceptions when a user with an existing session holding serialized data from an old class version tries to view a page. Are there any particular recommendations or best practices on how to handle incompatible serialization versions with Spring Session? Is there any manageable way to handle this in a Web application, such as at least saying \"there was a problem\" and explicitly expiring the session so the user can log back in?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56492661", "body": "Seconded. I'm trying to follow along with the guide and am getting errors (apparently the guide's API is out of date), and I can't click through to the source.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56492661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56625682", "body": "Snapshot.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56625682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67192917", "body": "Can you be a bit more specific on what you mean here? I'm just about to get started on a Spring Session-CF module for my Real Project, and I've already been elbows-deep in Spring Cloud Connectors, so I may be able to hack on some of the infos/builders.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67192917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67199062", "body": "Also, AIUI, it won't work for blue-green deployments even with war packaging, and blue-green is the reason I have to have Spring Session managing session state from the outset.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67199062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67878904", "body": "Note that this still leaves warnings on the duplicated `doFilterInternal` on `OncePerRequestFilter`, but I wasn't sure how you'd like to handle that, and it doesn't fail the build now (though the integration tests still fail because `UUID` can't be instrumented).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67878904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67901579", "body": "Odd. I would actually suggest reverting that change, since it looks like an Eclipse-specific problem, and making the workaround setting Eclipse to 1.6 mode manually after import. (Or, of course, switching to IDEA, but I'm trying to get some other stuff pushed first!)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67901579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69191038", "body": "Yes, I read that section of the reference. It's unclear exactly what additional logic is supposed to be run that simply expiring the Redis key wouldn't do and who's responsible for the cron job. The reference talks about \"cleanup in a deterministic fashion\", but why isn't expiration sufficient?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69191038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69208878", "body": "That's a lot clearer. I still think there's at least one race involved in the active-expiration case (where multiple frontend servers are running and one extends the session lifetime near expiration), but the impact there seems minimal and fail-closed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69208878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69210936", "body": "I think my race is related but distinct, but I've been up too long to trace it clearly right now. If I'm right, the impact will be almost negligible anyhow. I'll revisit and post another issue if I'm able to nail it down, but I'm pretty sure the proper resolution will just be a doc note.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69210936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72897329", "body": "If the class is semantically usable for non-core extensions, it seems like a bad practice to trespass on the distribution package, especially since that can fail in interesting ways with particular classloader hierarchies.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72897329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74028305", "body": "What exactly do you mean by sticky sessions? That's usually an issue for the load balancer.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74028305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/77928107", "body": "So basically Spring Sudo?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/77928107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86344329", "body": "I have no problem, but I'm running on Undertow.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86344329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rstoyanchev": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/196", "title": "WebSocket example should mention server affinity is required for SockJS", "body": "Raised following discussion https://jira.spring.io/browse/SPR-12936?focusedCommentId=114740&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-114740.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/98", "title": "Provide alternative to AbstractSessionWebSocketMessageBrokerConfigurer", "body": "Although this approach works, it can be limiting. For example it prevents advanced configuration by extending directly from WebSocketMessageBrokerConfigurationSupport.\n\nThe preferred way to extend configuration is for Spring Session to provide a concrete WebSocketMessageBrokerConfigurer (similar to how Spring Boot customizes Spring MVC) probably along with an @EnableXxx annotation to import it. \n\nFrom what I can see a specific challenge may be making sure an SessionRepositoryMessageInterceptor is registered for each endpoint. I think it should be possible to automate that in other ways.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/98/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brentonr": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/177", "title": "Mutable rich session objects don't work with session's saveDelta()", "body": "When a mutable object is referenced in a fetched session, and that object is modified, the attribute is never put into the delta list for saving to redis.\n\nThis was observed using `spring-session` with `spring-security-oauth2`, specifically with `org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint` and it's `@SessionAttrtibutes(\"authorizationRequest\")` annotation. While the authorizationRequest object (map in this case) is modified, the attribute \"authorizationRequest\" is not entered into the delta. On a subsequent POST, the request is unauthorized because the authorizationRequest map is not up to date in the session.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84039377", "body": "+1. We implemented something similar to this by wrapping Tomcat's JDBCStore and using it as a fallback when Redis was unavailable (something that's necessary in AWS with Multi-AZ read replica failovers taking a few minutes to come back online, or to handle temporary hiccups).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84039377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "joshlong": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/168", "title": "Please add / merge the Bootiful examples from https://github.com/joshlong/bootiful-sessions.git", "body": "Please add / merge the Bootiful examples from https://github.com/joshlong/bootiful-sessions.git\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "flexguse": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/138", "title": "Create helicopter view documentation for deciders", "body": "Many developers like me need a helicopter view documentation for our bosses to convince them to use Spring Session.\n\nIn a small company with agile processes this seems not to be necessary but if you are part of a bigger organisation this kind of documentation is necessary.\n\nThe documentation should contain:\n- how is the architecture of a standard webapplication and how in a multi application / multi servlet container situation using Spring Session? (chart / diagram, see attached images)\n\n![without spring session](https://cloud.githubusercontent.com/assets/4136568/6037546/0b98c87e-ac55-11e4-863f-294dc0b03e4e.jpg)\n\n![with spring session](https://cloud.githubusercontent.com/assets/4136568/6037552/207675ac-ac55-11e4-9907-43758839d149.jpg)\n- are there any security risks by sharing session information across multiple applications\n- some performance figures\n- some advertisement which is always loved by bosses ;)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Thilak-T": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/132", "title": "Multiple sessions are created when SessionRepositoryFilter precede ShallowEtagHeaderFilter", "body": "Multiple sessions are created when SessionRepositoryFilter precede ShallowEtagHeaderFilter. The reason being ShallowEtagHeaderFilter wraps the response with ShallowEtagResponseWrapper, which maintains an internal stream and commits the response just by copying the internal stream directly to the native httpresponse stream. Thus it bypass all HttpResponseWrappers in between including SessionRepositoryResponseWrapper, so the onResponseCommitted method is not getting called when the response is actually committed by ShallowEtagHeaderFilter.\n\nWhen the control reaches SessionRepositoryFilter, response is already committed, so the newly added cookie header is not sent to the client. As a workaround, i moved SessionRepositoryFilter after ShallowEtagHeaderFilter in the filter chain and it works well.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/132/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/333", "title": "implemented crawler manager similar to tomcat crawler valve", "body": "As documented in the issue https://github.com/spring-projects/spring-session/issues/147, we were using tomcat's crawler valve. So implemented for spring-session based on tomcat's valve implementation.\n", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74026650", "body": "Just want to know whether do you login to first server from one browser and access second server from another browser?\n\nIn your config jedis.xml, there is no IP for redis server. does it defaults to localhost?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74026650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74028712", "body": "I mean a way to tell spring-session that the app uses sticky session concept, so that the app primarily read-write on local session object and a replica is maintained on redis for fail-over. If the local session object is lost for some reason, spring-session tries to get from redis.\n\nIntention is to avoid reading the session from redis for each http request, since we know the next request will come back to the same server.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74028712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49335334", "body": "`ConcurrentMap` is used because the map cache could be accessed  from multiple threads concurrently. `#putIfAbsent()` is not used as overwrites are allowed. overwrites are legal if for some reason cache is not purged of old session before creating new session. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49335334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cemo": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/129", "title": "RequestContextListener with Spring Session", "body": "We need to access some session bean scope beans but this is causing an error in our side. Since `org.springframework.web.context.request.RequestContextListener` is setting `Request` very early, Accessing a SessionScope bean is throwing an exception. `org.springframework.web.context.request.RequestContextHolder` must be set after wrapping Request by SessionRepository. \n\nUsing `org.springframework.web.filter.RequestContextFilter` instead of `org.springframework.web.context.request.RequestContextListener` is a solution but this is not common practice. For example even Spring Boot is using [RequestContextListener](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java#L179).   \n\nIt seems that RequestContextListener should not be used with Spring Session. What do you think? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/47616624", "body": "Definitely +1   \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/47616624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57360876", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57360876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63866131", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63866131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65065622", "body": "@rwinch Is there any progress on this issue? Will it be available before release? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65065622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65425542", "body": "For example, We have sites A, B, C. One user has a different session per site. Spring Security stores Security Context in Session in our case and I need to update each session in case a change in principal object. For example, `firstname` of principal can be updated in site A. This change needs to be reflected at B and C. \n\nAlso session attributes are not easy to query in a relational database. \n\nThis is a really blocker issue at my side.     \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65425542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65554804", "body": "Thanks for your explanation. You are right.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/65554804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71913437", "body": "Having both `RequestContextListener` and `RequestContextFilter`together seems harmless at first glance. Maybe in case a existing `Spring Session Filter` and `ContextListener` beans,  RequestContextFilter can be registered as well. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71913437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72213106", "body": "duplicates #129 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72213106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73478414", "body": "There is a todo for `set domain` as well. Maybe a customizer for cookie would be ideal.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73478414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76133702", "body": "I need to customize secure flag of Cookie as well. \n\n+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76133702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78247511", "body": "@philwebb, @rwinch Is there anything I can provide for this issue? There is not any issue for this in Spring Boot yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78247511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/90358636", "body": "see #152 \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/90358636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/7219767", "body": "@rwinch forgive my ignorance but why did you remove Serialization? In our application we are serializing HttpSession's to Database with JDBC. I am just curious about the reason of this commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/7219767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/7222043", "body": "Yes, It will help a lot. Thanks for your valuable feedback and prompt response as always.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/7222043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "pdeva": {"issues": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/23", "title": "Provide a way to get session size ", "body": ".. Using a JMX metric ideally. Very useful when you want to make sure the session size doesn't go out of hand when using frameworks like Vaadin or gwt\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/23/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50184592", "body": "+1. We too would like to see an eta or roadmap of some sort\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50184592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "izeye": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/79ccbe7066aef858e873995fe5589a7079c85cde", "message": "Polish\n\nSee gh-965"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "driverpt": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5f23a41674a4a29f1c0b36486b9cf03653c30b07", "message": "Make Redis namespace fully configurable\n\nSee gh-919"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148931186", "body": "How do you suggest to do that? Throw an Exception?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/148931186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gregturn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1752928d962970949de2ce7a02b639d3b4dd1570", "message": "Configure WebSessionManager's WebSessionIdResolver by bean definition\n\nAllow a WebSessionIdResolver registered as a Spring bean to be wired into the WebSessionManager."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8b233e84ef3aa51bb00d123a5fabea9b6dfd7dac", "message": "Create @EnableSpringWebSession annotation."}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/84e7fbace130ce654d811e9227edaf12d8ecc86a", "message": "Fix MapReactorSessionRepository's delete()."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikemassa84": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/2161f966de7138a7f095a8ad0e1c638a9df3fb1d", "message": "Update grails3.adoc\n\nAdd a note about spring-session and grails flash scope, with link to stackoverflow answer."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kanjielu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5f0e4c3b8526d3ed0654efd3757c5df3469341ed", "message": "fix typo\n\nchange \"they key\" to  \"the key\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jgrandja": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/538476402152dcc8b4d48097e87d68aa1259be54", "message": "Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/56033a9b68b1988abae0724c11bb6811d8261c0d", "message": "Release version 2.0.0.M3"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mp911de": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8dd1a10f1bde5a3afd02fee69920d48547e25697", "message": "Adapt to changes in Spring Data Redis API"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74051864", "body": "Performing that check eagerly might help skip conversion (serialization)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74051864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052006", "body": "Docs should mention batches are used for atomicity reasons\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052182", "body": "How about batch loading for multiple `UUID`s?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052442", "body": "You might want to keep contact points configurable and maybe qualify the `Cluster` instance\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052648", "body": "You might want to keep the keyspace name configurable and add a qualifier. Otherwise, this `Session` instance might be used by other components (Spring Data, Zipkin, ...)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052739", "body": "Qualifier also for the `CassandraTemplate`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74052739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90016604", "body": "How about changing to `CREATE KEYSPACE IF NOT EXISTS ...`? Removes the need to catch `AlreadyExistsException` in `public Session session()`.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90016604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90017352", "body": "Index access is quite low-level. How about access by column name?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90017352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90017644", "body": "Injecting `CqlOperations` is sufficient for this kind of access. Future versions of Spring Data Cassandra will break up the inheritance `CassandraOperations` `->` `CqlOperations` so using `CqlOperations` is the more future proof approach.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90017644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90017798", "body": "Is this result required? Currently, it's not assigned.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90017798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90018782", "body": "`@EnableCassandraHttpSession`", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90018782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90019592", "body": "This class assumes it's the sole source for Cassandra infrastructure. How about setting `ConsistencyLevel` on `Cluster`?\r\n\r\n```java\r\nCluster.builder().withQueryOptions(new QueryOptions().setConsistencyLevel(consistencyLevel))\r\n```\r\n\r\nSetting `ConsistencyLevel` on `CassandraSessionRepository` is a good approach as environments using Cassandra for other purposes might configure `Cluster` differently.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90019592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90019721", "body": "`CqlOperations` (`CqlTemplate`) should be sufficient", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90019721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90020054", "body": "I'm not sure configuring the keyspace/contact points/port at this level is a good idea. Both are environmental settings that should be provided externally.\r\n\r\n@vpavic @rwinch thoughts?", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90020054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "spring-buildmaster": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/78db900303744e491a1792c92e7028abfd5d7a8f", "message": "Release version 2.0.0.M2"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/288c6220124d282e68b72674755b9eeaeefa885a", "message": "Next development version"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3827ae1e7254080e908e62eed3ccea54558b9949", "message": "Release version 1.3.0.RELEASE"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eddumelendez": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6327d36ce9a63380cc96ce608a7bdbebbe0e3bb0", "message": "Use Base64 implementation provided by Java 8\n\nFixes gh-735"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/489cf01812a1b0ece764ca9d39468c6dc056b291", "message": "Polish samples\n\nFixes gh-698"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1a318b89d907d01d80c9ba1b7c6ac99ca3cc3753", "message": "Convert groovy tests to java"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60067553", "body": "my mistake. now it is fixed. thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60067553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60388078", "body": "Add setter methods for timeoutInSeconds and principalSessionsEnabled\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60388078/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60529255", "body": "Expose attributes to make them configurable. Take a look for jdbc #490 and mongo #492\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60529255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67098237", "body": "@rwinch Sure, I wil.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/67098237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jxblum": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/432eb84a946e869a868e8943e2471d940590a2d1", "message": "Restore proper behavior of HttpSession created events in GemFire support when client Region is a PROXY in the client/server topology\n\nFixes gh-757"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/bd31710117e700f959aba83e527264085adfeb0f", "message": "Upgrade to Jackson 2.9.0.pr2\n\nJackson 2.9.0.pr2 is required by the latest Spring Data Redis Kay"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/e67afefcd81c52e6dfab7b9371b2cf265b38ed13", "message": "Fix Java 8 ambiguous compiler errors"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/327323da38e5b7d0f14c137e80585068f3631e22", "message": "Upgrade to io.spring.dependency-management Gradle plugin 1.0.2.RELEASE\n\nApply io.spring.dependency-management Gradle plugin to all Boot samples to properly resolve Boot dependencies with implicit versioning"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/83e5d6f2a7642b0e6a05761a398ee1a209504a62", "message": "Upgrade to Java 8 source and target baseline"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/887f02455146ded206295d9c2ee48607f551ff84", "message": "Fix test failure\n\nPolish for #gh-755"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8dd6aa38ed65ac1afc809ee4205b5afff2bb88e6", "message": "Upgrade to io.lettuce:lettuce-core:5.0.0.BUILD-SNAPSHOT"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/6f4025eacb021071c813c8d6205a73658c7f9315", "message": "Simply GemFire configuration in docs GemFire Indexing integration tests"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3cc53fae2c474b4bc94791d7da5466239c593e9c", "message": "Upgrade to Gradle 3.5"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/25ded686ac02bfe146c4e1bb994ff4a6e4732bfb", "message": "Improve GemFire SessionRepository, Session copy logic to avoid issues with delta propagation on updates\n\nFixes #gh-755\n\n(cherry picked from commit dcc0c079817f733fea25b41003f9672689c4c4db)\nSigned-off-by: John Blum <jblum@pivotal.io>"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/b3706addbbddfd398218ac3614dc0b75df7f4263", "message": "Introduce more reliable coordination between a GemFire client/server during integration tests.\n\nFixes gh-672"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/5c6565bd9c19beb99ffa2084940acbc871eebba7", "message": "Fix compilation error caused by improper use of Assert.notNull(..)\n\nFixes gh-724"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/3e24393e9a2e9f5682afce21ad2349519368dcc0", "message": "Fixes GemFire client/server integratione tests issue when setting JAVA_TOOL_OPTIONS env var\n\nFixes gh-669"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/0e10b7763cb6e07f4bd078b70e8dc59e00bd597e", "message": "Remove 'thymeleaf-extras-conditionalcomments' dependency\n\nFixes gh-721"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/536156a4ec297e8cc316e7a907cbb7f5a87223d2", "message": "Consistentely apply Spring Data BOM across Spring Session modules\n\nFixes gh-709"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/aa3536a71a9b1e2b222d46157847e92ca272f2c4", "message": "Set Spring dependencies to build snapshots\n\nSets Spring Framework to 5.0.0.BUILD-SNAPSHOT\n\nSets Spring Data to 2.0.0.BUILD-SNAPSHOT\n\nSets Spring Data Release Train to Kay-BUILD-SNAPSHOT\n\nSets Spring Security to 4.2.2.BUILD-SNAPSHOT\n\nFixes gh-709"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/dd23c96c1ac61d4df6066274c4c0c32f68714bee", "message": "Set Spring Boot version to 2.0.0.BUILD-SNAPSHOT\n\nFixes gh-709"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/800d52279f74557bb545440cf6bab39b7508ab9e", "message": "Disable spring3Test check"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/commits/61a6344ffa4ab3a689ec3458930eaca77a656bca", "message": "Upgrade to Spring Data Kay\n\nDependency updates supporting Kay:\n\nUpgrade Spring Framework to 5.0.0.M3\n\nUpgrade Spring Boot to 1.5.0.RC1\n\nUpgrade Jackson to 2.7.6\n\nUpgrade Jedis to 2.9.0\n\nUpgrade Lettuce to 5.0.0.Beta1\n\nUpgrade Mockito to 2.5.4\n\nFixes #gh-677"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47475073", "body": "Noted\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47475073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47475209", "body": "This is something the GemFire team did with the HTTP Session Management module and something we could implement on behalf of the user.  In GemFire, it is a simple \"flag\" to flush on write.  I could implement something similar with an additional attribute on the @EnableGemFireHttpSession annotation.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47475209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47475306", "body": "Delta has been implemented in the latest [commit](https://github.com/jxblum/spring-session/commit/bc6eeb22b2d371f4a3099a166c551600441b4def).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47475306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47476588", "body": "Yes.  There are several reasons:\n1. I wanted to have a clean separation between the basic CRUD operations implemented in the concrete class (e.g. GemFireOperationsSessionRepository) and the event handling/translation logic that would be common (literally the same) for all concrete classes.  The GemFire cache event to Spring Session event translation is, or rather should be, consistent across all GemFire SessionRepository implementations.  The concrete implementation should only have to focus on implementing the CRUD operations IMO.\n2. Also, the AbstractGemFireSessionRepository handles \"registering\" the GemFireOperationSessionRepository as a \"CacheListener\" on the appropriate GemFire component without the user having to know which component (i.e. the GemFire Region storing Session state).\n3. Next, I have just moved the GemFireSession class (along with a new GemFireSessionAttributes supporting class) to the AbstractGemFireSessionRepository class to simplify future SessionRepository implementations based on GemFire.  For instance, another possible implementation might be to use SD's Repository abstraction (i.e. GemfireRepository) to back the SessionRepository based on GemFire.  This was what Vinicius did in his implementation of Spring Session GemFire support, but his approach was quite brittle in how he registered the repo.\n\nThere are subtle other reasons, but the 3 points above capture my main intent.  I had thought about naming this class `GemFireSessionRepositorySupport`, but I have not renamed it yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/47476588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/50935740", "body": "Yes, and in fact I have just updated the PR again with a couple more changes including the removal of the _hamcrest-core_ testCompile dependency.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/50935740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "slaskawi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/18ccee051fa8b0b8cb2cc792ee4b9f640927218d", "message": "Add link to Infinispan for Spring Session documentation\n\nFixes gh-745"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sylvermining": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/8e7c736a0aef27eda21371eaf7a237498098dcad", "message": "Move groovy test to java"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "atreides322": {"issues": [], "commits": [{"url": "https://api.github.com/repos/spring-projects/spring-session/commits/1df1a7606993472fc5c551046408735b85e6ce64", "message": "Prevent expiration on RedisSession interval < 0\n\nSince a negative maxInactiveInterval is supposed to disable\nexpiration, if it is negative, use persist on the session's\nspring:session:session and spring:session:expires keys to\nprevent the expiration of the RedisSession.\n\nIssue gh-629"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "artgramlich": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/204", "title": "Allow for configuration of session id generation and format.", "body": "This patch allows a configurable strategy for how session ids are generated and allows configurable encoding when it makes sense.  It defaults to the existing uuid generation and format. \n\nIt also tries to follow the best practices for SecureRandom mentioned in the issue #11 and borrows some ideas from how Tomcat and Jetty generate ids.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ralscha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50845532", "body": "Hi. Thanks for the fix. The StringHttpMessageConverter url (http://localhost:8080/string) does work now, but a request to http://localhost:8080/bigger still does not contain the  x-auth-token response header. \nI use this snapshot: spring-session-1.0.0.BUILD-20140801.000037-56.jar\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50845532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50980941", "body": "Hi. Looks good, the response always contains the header. \nThanks for your work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/50980941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bjornharvold": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/53838830", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/53838830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/54220229", "body": "Hi Rob,\n\nThanks for that. Your IntegrationPortfolioTests is complaining about the spring security filter. When I run the actual webapp, are you saying no jsessionid gets created and instead spring-session is used? \n\nI see \"Set-Cookie : SESSION=86a3fd47-d123-4700-8fe9-c67045ec6ddc\".\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/54220229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56881125", "body": "You can find an example of this integration here. Gunnar Hillert just gave a talk on Spring Security and Single Paged Applications and here's his demo.\n\nhttps://github.com/ghillert/botanic-ng\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56881125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "manikantag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56859452", "body": "+1. Very much required. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56859452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56869679", "body": "+1 for Spring Security integration. Spring-Session could very much complement Spring Security, esp. for REST services.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/56869679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adeelmahmood": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57919639", "body": "Adding some logging information. It seems like the session is retrieved on subsequent calls but marked as anonymous which makes it invalid.\n\n`[nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Populated SecurityContextHolder with anonymous token: 'org.\nspringframework.security.authentication.AnonymousAuthenticationToken@6fa90ed4: Principal: anonymousUser; Credentials: [PROTECTED]; Authenticated: true; Details:\n org.springframework.security.web.authentication.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: cd99acca-0646-45ff-8d4d-f6b358193c16;\n Granted Authorities: ROLE_ANONYMOUS'\n[nio-8080-exec-3] o.s.security.web.FilterChainProxy        : /session at position 10 of 12 in additional filter chain; firing Filter: 'SessionManagementFilter'\n[nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Requested session ID cd99acca-0646-45ff-8d4d-f6b358193c16 is invalid.`\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/57919639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "btiernay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59197839", "body": "Thanks Rob. Just curious, are you implying that Spring OAuth with a JDBC store doesn't perform well? Wouldn't your point apply equally there considering an OAuth token is essentially a type of session token shared among Resource Servers?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59197839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59203684", "body": "Hi Rob, appreciate the clarification regarding the priorities. I wasn't trying to imply that this was high priority, just that it is extremely useful for a lot of environments. I can think of a few \"NewSQL\" JDBC enabled stores that might perform just as well or better than some NoSQL implementations:\n- GemFire\n- SQLFire\n- MemSQL\n- VoltDB\n\nEven the MySQL MEMORY storage engine may be viable for many people.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/59203684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sbeimin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/61086034", "body": "After some research I discovered that beans with scope=\"session\" that will be proxied using aop:scoped-proxy/ get instantiated and stored into the `org.springframework.web.context.request.RequestAttributes` through the `org.springframework.web.context.request.SessionScope`. The `SessionScope` acquires the `RequestAttributes` instance through `RequestContextHolder.currentRequestAttributes();`\r\n\r\nThis `RequestAttributes` object contains an unwrapped `ServletRequest`. Said `ServletRequest` isn't wrapped by the `SessionRepositoryFilter` because it the `ServletRequestAttributes` gets instantiated with the original `HttpServletRequest` in the `org.springframework.web.context.request.RequestContextListener`. This Listener is called before any Filters.\r\n\r\nA solution to this is to use a `org.springframework.web.filter.RequestContextFilter` instead of a `org.springframework.web.context.request.RequestContextListener`\r\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/61086034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "phosphene": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62438214", "body": "I have @EnableAutoConfiguration and @EnableRedisHttpSession in place,\nand in my SecurityConfig.java I have the following:\n\n```\n        final SessionRepositoryFilter sessionRepositoryFilter = new SessionRepositoryFilter(sessionRepository);\n        sessionRepositoryFilter.setHttpSessionStrategy(new HeaderHttpSessionStrategy());\n\n        http\n        .addFilterBefore(sessionRepositoryFilter, ChannelProcessingFilter.class)\n        .csrf().disable();\n\n```\n\nHowever, my setting of the httpSessionStrategy does not have an effect. The cookie strategy is in effect, still.\n\nThanks for the help and for the project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62438214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62442934", "body": "thanks Rob,\n\nApplication.java\n\n```\n@ComponentScan\n@EnableElasticsearchRepositories(\"com.blah.rest.search\")\n@EnableJpaRepositories(\"com.blah.rest.repository\")\n@EnableAutoConfiguration(exclude={ErrorMvcAutoConfiguration.class})\n@EnableRedisHttpSession\npublic class Application extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n\n    public static void main(String[] args) {\n        new Application().configure(new SpringApplicationBuilder(Application.class)).run(\n                args);\n    }\n\n    @Bean\n    public JedisConnectionFactory connectionFactory() {\n        return new JedisConnectionFactory();\n    }\n\n}\n```\n\nSecurityConfig.java\n\n```\n@EnableWebMvcSecurity\n@EnableWebSecurity(debug = false)\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n@Configuration\n@Order\nclass SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private SessionRepository<? extends ExpiringSession> sessionRepository;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n        final SessionRepositoryFilter sessionRepositoryFilter = new SessionRepositoryFilter(sessionRepository);\n        sessionRepositoryFilter.setHttpSessionStrategy(new HeaderHttpSessionStrategy());\n\n        http\n        .addFilterBefore(sessionRepositoryFilter, ChannelProcessingFilter.class)\n        .csrf().disable();\n\n        http.authorizeRequests()\n.             . antMatchers(HttpMethod.GET, \"/sessions/**\").hasRole(\"USER\")\n               .antMatchers(HttpMethod.POST, \"/sessions\").permitAll();\n\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {\n        authManagerBuilder.userDetailsService(new DefaultUserDetailsService());\n    }\n\n    @Bean\n    @Override\n    public UserDetailsService userDetailsServiceBean() throws Exception {\n        return super.userDetailsServiceBean();\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n}\n```\n\nSessions are working just fine. Excepting only that it uses the cookie strategy even though I set it to a header strategy.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62442934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62446975", "body": "Let me know if that is sufficient to reproduce the problem.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62446975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62450689", "body": "will do. thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62450689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62596746", "body": "Rob, \n\nI've created a complete project that reproduces my issue.\n\nhttps://github.com/phosphene/spring-boot-session-jersey-test-demo\n\n'mvn verify' will test session and print out the headers to reveal that the cookie strategy is in effect even though set to header strategy.\n\nthanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62596746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62607721", "body": "let me know if that project is sufficient or too much.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/62607721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63871481", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63871481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wilkinsona": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63362539", "body": "Unfortunately that'll create a circular dependency as you'd want to use the BOM from the version of the Platform that Spring Session will be included in. The plugin's the best answer we have at the moment.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/63362539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/66761259", "body": "You could use the dependency management plugin to obtain Spring Session's dependencies' versions from an already-released version of the Platform but the Spring IO Plugin provides additional benefit: it lets me check that a Spring Session is compatible with an upcoming version of the Platform as I can easily run your tests on Java 7 and Java 8 using the versions from the upcoming Platform release.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/66761259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53779822", "body": "Optional dependencies need to be in the Platform\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53779822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53913962", "body": "I'm rather wary of it at the moment. FST's own dependencies are pretty minimal (Jackson, Objensis, and Javassist), but minor updates are released very frequently (20 in the last 12 months) and that may prove problematic in the future.\n\nIf it were me, I'd be looking for alternatives that are less of a moving target. If there aren't any, I'd consider using jarjar and embedding FST so that you can have complete control over the version that's used.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53913962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "fieder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/64812696", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/64812696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jstano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67359492", "body": "We are creating an abstract layer in our system to hide the implementation of the Session Management and in the implementation of our SessionManager interface I want to use the SessionRepository directly.\n\nOne other use case that we have is to show our internal IT admin users a list of all active sessions and allow them to see information about the sessions and to invalidate selected sessions. In order to support this use case, our SessionManager interface has a \"getAllSessions\" method. In order to support that method, I would need to have a method in the SessionRepository that would do the same thing.\n\nI'm not sure if this sort of method would be something that could be added to your SessionRepository interface.\n\nThanks again.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/67359492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "wgorder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69461198", "body": "Ill probably just end up splitting it out into its own class instead of a nested one, and duplicating it.  A shared lib might be appropriate here but not feasible for a demo as I am not publishing artifacts anywhere.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69461198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69633380", "body": "Ill just close this.  I don't think there is away around duplicating the objects if using jackson to deserialize.  Of course adding a deserialization strategy that did not require pre-existing classes like groovy for example would be an interesting idea.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69633380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "artembilan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69911258", "body": "Related SO question http://stackoverflow.com/questions/27934251/spring-messaging-xml-config-with-stomp-and-spring-sessions\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69911258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69935286", "body": "To this issue. I was going to show some XML config for `<websocket:broker>`, but noticed that `WebSocketHandlerDecoratorFactory` requires `ApplicationEventPublisher` as ctor arg. Would be better to implement `ApplicationEventPublisherAware` there.\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/69935286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52238455", "body": "Uh! Just have noticed that.\nFrom my perspective it should not be so bad at all:\n\n```\n /**\n     * Shuts down all running Hazelcast Instances on this JVM.\n     * It doesn't shutdown all members of the\n     * cluster but just the ones running on this JVM.\n     *\n     * @see #newHazelcastInstance(Config)\n     */\n    public static void shutdownAll() {\n```\n\nBut from other side I would be consistent and close only that `HazelcastInstance` which we have started with the `HazelcastITestUtils.embeddedHazelcastServer`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52238455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52238782", "body": "I don't like all this `I` notations in the class names. Feels like the C++ artifacts, but that is just IMHO.\nLooks like Hazelcast doesn't feel itself bad to use it in its types like `IMap` :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52238782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52240173", "body": "Thank you @rwinch . Got it! Makes sense: `ITest` == Integration Test.\nNever mind - the matter of opinion :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/52240173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53863289", "body": "@rwinch, looks like the solution is stolen from the Spring Integration: https://github.com/spring-projects/spring-integration/blob/master/spring-integration-jdbc/src/main/java/org/springframework/integration/jdbc/JdbcMessageStore.java#L94.\n\nNot sure if we really have some gain from the `enum`, but that might be some `hash` performance producing for the `HashMap` key...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53863289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53866595", "body": "@vpavic , sorry if that really sounded so hurting.\nReally wasn't going to say anything bad nor to you, nor to the approach. \n\nJust was going to explain to @rwinch that there might no reason to nit-pick to this code.\n\nFrom other side `steal` isn't applied between Spring projects. You use code from one Spring project in the another, therefore this word should be treated as enough soft.\n\nAnyway I got your point and will use the more formal language in the future. :smile: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53866595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "llambda": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70009264", "body": "Sure, I can certainly add some docs. By the way I added a test to the commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70009264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74610897", "body": "Sorry, I haven't had time to work on it yet. Also I noticed gradle doc generation fails with Java 8 saying \"FAILURE: Build failed with an exception\"\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74610897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "roykachouh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70009605", "body": "Hey @rwinch, I updated the docs...I will make sure to check them in future PR's. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70009605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70139032", "body": "Looks good @rwinch! I look forward to helping out more on this project.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70139032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pdorgambide": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70113197", "body": "@rwinch  thanks a lot.\nI am an Spring's caveman and It has been easier configure my legacy projects with XML: **applicationContext-session.xml**\nOnce time it runs, due that I use Servlet 2.5 throws the next exception: \n\n```\njava.lang.NoSuchMethodError: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.getServletContext()\n```\n\nHttpRequest interface has the getServletContext() since 3.0 ;o(\nThis challenge allow me to know more about Servlet 3.0, Spring Boot and JavaConfig and take in consideration for use into near future.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70113197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70120022", "body": "@rwinch I am able to get the application configured only with XML.\nI will create the new issue with the complete stracktrace to let you located and fix. \nAwesome work.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70120022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73662702", "body": "Thanks for your quick answer, I will try to clarify the maximum of your requirements to to locate this issue and fix if finally it exist.\nWe have only the next cookies at localhost (develop enviroment), the request sends:\n`Cookie:SESSION=9d1995b6-2831-4de4-a8c3-de41ef9ac970; JSESSIONID=76E7B5DD151E565C48B4CE398463FFCA`\n- _JSESSIONID_ has domain=localhost and  path=\"/context-root\"\n- _SESSION_ has domain=localhost and path=\"/context-root/\" (notice the end slash **/**)\n\nThe container is **Tomcat 6.0.36 (servlet 2.5)**\nThe configuration is xml based as you suggest at #101:\n_web.xml_\n\n```\n(defined before springSecurityFilterChain)\n        <filter>\n        <filter-name>springSessionRepositoryFilter</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>springSessionRepositoryFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>   \n```\n\n_applicationContext-session.xml_ (class with @EnableRedisHttpSession)\n`<bean class=\"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfig\"/>`\n Finally the  _SessionRepositoryFilter_ has some changes to fix the #111:\n`currentSession = new HttpSessionWrapper(session, getServletContext());`\nchanged to:\n`ServletContext context = super.getSession(true).getServletContext();`\n `currentSession = new HttpSessionWrapper(session, context);`\nat lines near 193 and 202.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73662702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "NoUsername": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70220512", "body": "Ah, I didn't think of that solution. It seems I didn't fully understand how to take advantage of overriding Spring beans.\n\nJust tried it and it works perfectly, thank you! (only `@RedisHttpSessionConfiguration` from your example should be `@EnableRedisHttpSession`)\n\nI think the code snippet above would be a good addition to the documentation, as I think that it's a common use-case to change the default session-timeout.\n\nMy use-case is that the application can run in clustered mode and without clustered mode. Non-clustered mode is typically used in dev environments and on the dev-server. the staging server then already uses clustered mode (to test the proxy configuration and failover etc) and the production system also uses it obviously.\n\nSo the use-case for having \"dynamic\" configuration is that for non-clustered mode we use the normal spring-boot approach to configure tomcats session timeout via `server.session-timeout` and we want to use the same value for clustered mode without duplicating the value anywhere else.\n\nThanks again for the feedback and also for this great project :+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/70220512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78382215", "body": "Did you also define the `RedisOperationsSessionRepository` bean and defined it as a `@Primary` bean (like in rwinch's first answer)?\n\nBecause this worked for me (tested) and is used in production - not 100% sure about the spring-session version we currently use though.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78382215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dave-r12": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71205512", "body": "Excellent, thanks for the fast reply.\n\nWe are on spring framework 3.2, is there a minimum version there?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71205512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "danveloper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71525940", "body": "I think it should be enabled by default, but fail gracefully with a warning. This would allow the same configuration to be used between dev and prod, where dev would _JustWork(tm)_ and prod would require some manual intervention (which would be obvious from the warning).\n\nI was able to work around the problem by subclassing the `RedisHttpSessionConfiguration` with an implementation that disables the keyspace notifications initializer, and bringing it in through normal configuration means:\n\n``` groovy\npackage org.springframework.session.data.redis.config.annotation.web.http\n\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.core.type.AnnotationMetadata\nimport org.springframework.data.redis.connection.RedisConnectionFactory\nimport org.springframework.data.redis.core.RedisTemplate\nimport org.springframework.session.ExpiringSession\nimport org.springframework.session.data.redis.RedisOperationsSessionRepository\n\n@Configuration\nclass GateRedisHttpSessionConfiguration extends RedisHttpSessionConfiguration {\n\n  @Value('${session.expiration:1800}')\n  int expiration\n\n  public void setImportMetadata(AnnotationMetadata importMetadata) {\n  }\n\n  @Bean\n  public RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n    RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n    sessionRepository.setDefaultMaxInactiveInterval(expiration);\n    return sessionRepository;\n  }\n\n  @Override\n  public RedisHttpSessionConfiguration.EnableRedisKeyspaceNotificationsInitializer enableRedisKeyspaceNotificationsInitializer(RedisConnectionFactory connectionFactory) {\n    null\n  }\n}\n```\n\n---\n\nFor posterity, here are the steps for enabling the keyspace notifications on AWS:\n\n<h4>Log into the AWS console and choose the <em>ElastiCache</em> service</h4>\n\n![image](https://cloud.githubusercontent.com/assets/1418180/5906945/4dc6aef2-a550-11e4-9940-9c5246c165a5.png)\n\n<h4>Choose the <em>Cache Parameter Groups</em> and click <em>Create Parameter Group</em></h4>\n\n![image](https://cloud.githubusercontent.com/assets/1418180/5907041/d9f9dc96-a550-11e4-9384-c63be1274318.png)\n\n<h4>Give the new group and name and description and click <em>Create</em></h4>\n\n![image](https://cloud.githubusercontent.com/assets/1418180/5907049/ea97385a-a550-11e4-9409-277408c0a99d.png)\n\n<h4>With the new parameter group created, select it and click <em>Edit Parameters</em></h4>\n\n![image](https://cloud.githubusercontent.com/assets/1418180/5907063/039b5ab6-a551-11e4-82d9-351e3640cfe8.png)\n\n<h4>Page through the parameters until you find <em>notify-keyspace-events</em> and enter \"eA\" in the <em>Value<em> field and click <em>Save Changes</em></h4>\n\n![image](https://cloud.githubusercontent.com/assets/1418180/5907079/24a1bd72-a551-11e4-801c-b10a3fc44faa.png)\n\n<h4>Choose <em>Cache Clusters</em> from the context navigation and create a new <em>Redis</em> cache cluster</h4>\n\n<h4>When specifying your cluster detail, choose the newly created parameter group</h4>\n\n![image](https://cloud.githubusercontent.com/assets/1418180/5907148/8a6f25e0-a551-11e4-9a45-1eb7c67dd49c.png)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71525940/reactions", "total_count": 6, "+1": 1, "-1": 0, "laugh": 0, "hooray": 5, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71542603", "body": "Could it provide a different strategy for ascertaining the database's configuration? Maybe in the absence of the `CONFIG` command, the event notification initializer could run a test to determine if expirations were working? This might introduce some slowness during startup, but might be favorable to total failure.\n\nI'd probably prefer a slower startup over managing feature flags between dev & prod. If this isn't possible or is otherwise infeasible, then feature flag might be the only way to go.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71542603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ghillert": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71697394", "body": "Please document that `embedded-redis` which is used by the samples, uses an old Redis version. See also:\n- `embedded-redis` GitHub issue: https://github.com/kstyrc/embedded-redis/issues/23\n- `spring-session` GitHub issue: https://github.com/spring-projects/spring-session/issues/113\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71697394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71697761", "body": "@rwinch Please re-open. The problem is that `embedded-redis` bundles an older Redis version `2.6`. \n\nI have create a GitHub issue for that project: https://github.com/kstyrc/embedded-redis/issues/23\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71697761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "yacota": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71861076", "body": "Is there any plan to include this issue in a release?\nFrom one of your comments at https://spring.io/blog/2014/11/18/spring-session-1-0-0-rc1-released#comment-1699673845 ... we'll have to wait until 1.1.0 at least.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71861076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71990439", "body": "Thanks @rwinch for your rapid answer.\nI see your point about where does this integration belong to. \nAnother point I am afraid of is that implementation details could vary \"a lot\" depending on which session repository is used (Redis, Hazelcast, ...), maybe a core API interface that deals with main concepts like session invalidation, .... with other jars that really implement it (-redis.jar, -hazelcast.jar) could work.\nI think that this is a similar approach took in Spring Social design\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71990439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72165983", "body": "+1 to @rwinch comment. Could you please provide more details ?\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72165983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72422143", "body": "Thanks @rajeevpandey-pt \nI have ended up with a similar solution, the main difference I think is that each of your nodes/servers have its own \"copy\" of SessionRegistryImpl's maps (principals and sessions). \nAs long as you expire/remove the session from Redis you do not care about it, but you have non expired SessionInformation objects in almost all of your nodes(except one)\nTo avoid this \"problem\" I have provided a custom SessionRegistryImpl that exposes both maps(session and principals) to the hole cluster, so the hole cluster see the same maps \nThose maps are backed by Hazelcast.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72422143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "philwebb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71912301", "body": "@rwinch We'd have to do some testing if we switched from `RequestContextListener` to `RequestContextFilter` and it probably couldn't happen until 1.3. I'm not aware of any specific reason why we chose one over the other.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/71912301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78268447", "body": "@cemo A Spring Boot issue would be appreciated. We could take a look for 1.3\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78268447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "rajeevpandey-pt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72012413", "body": "Thanks for the quick response @rwinch. Although i got a work around to deal with this as using ConcurrentSessionFilter with CookieClearingLogoutHandler and SecurityContextLogoutHandler, and deleting the session from redis in RedirectStrategy for session expiry.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72012413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72357603", "body": "I am pleased to share the details of referenced issue, scenario is that we have REST APIs for login and logout using spring security and spring session, deployed in clustered tomcat environment, redis and database is shared among those tomcat.\nI have provided a custom implementation  of RedisOperationsSessionRepository to store session in redis as well as in database and configured that in SessionRepositoryFilter.\nTo handle duplicate session configured ConcurrentSessionFilter with SessionRegistryImpl for session registry, CookieClearingLogoutHandler and SecurityContextLogoutHandler for logout handlers, and a custom RedirectStrategy with RedisOperationsSessionRepository to handle expired session.\nUsernamePasswordAuthenticationFilter is configured with ConcurrentSessionControlAuthenticationStrategy to handle duplicate login that marks least recently used session invalid. So when that session attempts to call API that needs authentication,  ConcurrentSessionFilter will invoke logout handlers to clear that cookie and clear the context for that session, and invoke RedirectStrategy where I am deleting that session from redis and database.\nThe problem I was facing with multiple tomcats was because of these two points\n1. ConcurrentSessionFilter was configured with only CookieClearingLogoutHandler so even though it cleared cookie but when control reaches back to ConcurrentSessionFilter it creates cookie again because session is there that it got from redis/database.\n2. And I was not deleting session from redis and database in RedirectStrategy.\nSo clearing the session from context and redis/database in case of duplicate session solved my problem.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72357603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "njariwala": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72138759", "body": "RedisHttpSessionConfiguration.EnableRedisKeyspaceNotificationsInitializer is not visible for outsiders extending RedisHttpSessionConfiguration. The workaround doesn't work. Can you help me with this?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72138759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "damiancalabresi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72254329", "body": "I don't think this issue is duplicated. The issue #129 is about an exception. In my case, the problem is in a filter that is executed after the SessionRepositoryFilter. This filter is creating another session just because the RequestContextHolder isn't updated.\n\nAs a temporary fix, I have added a filter named RequestContextHolderUpdateFilter just to be called after the SessionRepositoryFilter, with the order:\nSessionRepositoryFilter.DEFAULT_ORDER+1\n\nThis filter does this:\nHttpServletRequest httpRequest = (HttpServletRequest) request;\nRequestContextHolder.setRequestAttributes(new ServletRequestAttributes(httpRequest));\n\nI supose a good solution could be add the previous line to the SessionRepositoryFilter.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72254329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72720566", "body": "Thanks for your answer. I didn't use the RequestContextFilter but it should be the right solution. \nInstead of this, I created a custom filter that do practically the same. I will replace it with the RequestContextFilter.\n\nI think this issue should be closed, probably this case could be added to the documentation in the future.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72720566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aravindanr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72277540", "body": "@rwinch Any plans to support this for MapSession. Currently, I am using MapSession with Spring Security. Since the Session events are not published, the Spring Security Session Management does not work correctly. Destroyed sessions do not get removed from SessionRegistry. To fix this, i am manually publishing the event in a LogoutHandler.\n\nFor my use case, if at least MapSession publishes appropriate events, it would be beneficial.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/72277540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "IamFive": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73203220", "body": "yeah, i have found the sample project and successfully integrate spring-session\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73203220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dsyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73214321", "body": "Actually I think always sending the cookie is probably not the best idea for the reasons you say. I was just throwing out ideas really - some stuff I was playing with and it seemed to work so I thought it would be good to discuss it here. The flag to always send cookies is a separate commit, so it ought to be easy to get rid of.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73214321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9229350", "body": "You don't need a `RedisConnectionFactory` is you are using Spring Boot. Was there a reason you put it in? Maybe if you want to show the `@Bean` definition we could move it to a separate snippet and comment on the fact that it isn't necessary?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9229350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/23919289", "body": "Because this is a gradle build.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/23919289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "shanewow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73396028", "body": "Hi, I would like to create a wrapper or extend the RedisOperationsSessionRepository in order to save each session to a second RedisTemplate using the username instead of sessionId as the hash. I hit a brick wall with trying to call or override the save method as RedisSession is private. Can this class be made public? Or is there another way to filter/inject logic when the session is created and deleted? Essentially how would I delete and create from a second RedisTemplate at the same time the RedisOperationsSessionRepository does? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73396028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "domdorn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73747336", "body": "I just pushed a sample project to \nhttps://github.com/domdorn/spring-session\n\nrun with\n % ./gradlew :samples:security-sessionmanagement:tomcatRun \n\nthen open with a browser http://localhost:8080/ \n\nif you comment out the \n            <security:session-management session-fixation-protection=\"newSession\"\n                invalid-session-url=\"/login/sessionExpired\" />\nin /WEB-INF/security.spring.xml\nOR\nremove the code that integrates spring-session in /WEB-INF/web.xml and /WEB-INF/applicationContext.xml\n\nit works. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73747336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73889223", "body": "Some small updates before I leave work:\n\nthe org.springframework.session.web.http.SessionRepositoryFilter.SessionRepositoryRequestWrapper\nis missing the method isRequestedSessionIdValid()\n\nthis causes sessions to be invalid all the time.\n\n``` java\n        @Override\n        public boolean isRequestedSessionIdValid() {\n            return his.getRequestedSessionId() == null || (this.getSession(false) != null && this.getSession(false).getId().equals(this.getRequestedSessionId()));\n        }\n```\n\nI'm investigating further.. \n\nCheers,\nDominik\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/73889223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75077827", "body": "org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy#applySessionFixation \nis going through to the native session.. \n\njava.lang.IllegalStateException: No session\n    at org.eclipse.jetty.server.Request.changeSessionId(Request.java:1357)\n    at javax.servlet.http.HttpServletRequestWrapper.changeSessionId(HttpServletRequestWrapper.java:290)\n    at javax.servlet.http.HttpServletRequestWrapper.changeSessionId(HttpServletRequestWrapper.java:290)\n    at javax.servlet.http.HttpServletRequestWrapper.changeSessionId(HttpServletRequestWrapper.java:290)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:202)\n    at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:187)\n    at org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy.applySessionFixation(ChangeSessionIdAuthenticationStrategy.java:48)\n    at org.springframework.security.web.authentication.session.AbstractSessionFixationProtectionStrategy.onAuthentication(AbstractSessionFixationProtectionStrategy.java:82)\n    at org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy.onAuthentication(ChangeSessionIdAuthenticationStrategy.java:32)\n    at org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy.onAuthentication(CompositeSessionAuthenticationStrategy.java:83)\n    at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:201)\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301)\n    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301)\n    at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:105)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301)\n    at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75077827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75093865", "body": "I'm actually trying to disable it as a whole, with \n\n``` xml\n<http ...>\n    <session-management session-fixation-protection=\"none\"/>\n</http>\n```\n\nbut it does not work, as the code does not check for the \"none\" keyword.. \nRight now it also looks like when the session id is changed, the new session id is not written to the cookie, so the next request tries to find a session that does not exist (the old one).. I'm looking into this right now. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75093865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75111471", "body": "Something is definitely wrong with the way the session fixation stuff works.. the context ends up in a session for which no cookie has been sent... and the filters (apparently) try to read from sessions that don't exist anymore.. \n\n``` plain\nCookies: empty\n-------------- BEGIN GET /login\n750500 [redisMessageListenerContainer-1] ERROR o.s.d.r.l.RedisMessageListenerContainer - Connection failure occurred. Restarting subscription task after 5000 ms \n755501 [redisMessageListenerContainer-1] DEBUG o.s.d.r.l.RedisMessageListenerContainer - Started listening for Redis messages \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 1 of 12 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter' \n771609 [qtp1676827075-17] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No HttpSession currently exists \n771609 [qtp1676827075-17] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No SecurityContext was available from the HttpSession: null. A new one will be created. \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 2 of 12 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter' \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 3 of 12 in additional filter chain; firing Filter: 'HeaderWriterFilter' \n771609 [qtp1676827075-17] DEBUG o.s.s.w.h.writers.HstsHeaderWriter - Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@144bc342 \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 4 of 12 in additional filter chain; firing Filter: 'CsrfFilter' \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 5 of 12 in additional filter chain; firing Filter: 'LogoutFilter' \n771609 [qtp1676827075-17] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /login' doesn't match 'POST /logout \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 6 of 12 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter' \n771609 [qtp1676827075-17] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /login' doesn't match 'POST /login \n771609 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 7 of 12 in additional filter chain; firing Filter: 'DefaultLoginPageGeneratingFilter' \n771614 [qtp1676827075-17] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - onNewSession \n771615 [qtp1676827075-17] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - added sessionCookie for sessionIds: {0=505c5639-33ba-4ec7-a539-6f5d4505b376} \n771615 [qtp1676827075-17] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession. \n771615 [qtp1676827075-17] DEBUG o.s.s.w.c.SecurityContextPersistenceFilter - SecurityContextHolder now cleared, as request processing completed \n771621 [qtp1676827075-17] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - onNewSession \n771621 [qtp1676827075-17] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - added sessionCookie for sessionIds: {0=505c5639-33ba-4ec7-a539-6f5d4505b376} \n773574 [pool-1-thread-1] DEBUG o.s.s.d.r.RedisOperationsSessionRepository - Cleaning up sessions expiring at Thu Feb 19 19:10:00 CET 2015 \n\n\n----------------- end first request to GET /login\n-> Set-Cookie:SESSION=505c5639-33ba-4ec7-a539-6f5d4505b376;Path=/security-sessionmanagement/;HttpOnly\n\n----------------- begin POST /login\nCookie:SESSION=505c5639-33ba-4ec7-a539-6f5d4505b376\n\n810933 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 1 of 12 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter' \n810936 [qtp1676827075-17] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - HttpSession returned null object for SPRING_SECURITY_CONTEXT \n810936 [qtp1676827075-17] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No SecurityContext was available from the HttpSession: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper$HttpSessionWrapper@12c0fc70. A new one will be created. \n810936 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 2 of 12 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter' \n810936 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 3 of 12 in additional filter chain; firing Filter: 'HeaderWriterFilter' \n810937 [qtp1676827075-17] DEBUG o.s.s.w.h.writers.HstsHeaderWriter - Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@144bc342 \n810937 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 4 of 12 in additional filter chain; firing Filter: 'CsrfFilter' \n810937 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 5 of 12 in additional filter chain; firing Filter: 'LogoutFilter' \n810937 [qtp1676827075-17] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Checking match of request : '/login'; against '/logout' \n810937 [qtp1676827075-17] DEBUG o.s.security.web.FilterChainProxy - /login at position 6 of 12 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter' \n810937 [qtp1676827075-17] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Checking match of request : '/login'; against '/login' \n810937 [qtp1676827075-17] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Request is to process authentication \n810937 [qtp1676827075-17] DEBUG o.s.s.a.ProviderManager - Authentication attempt using org.springframework.security.authentication.dao.DaoAuthenticationProvider \n810937 [qtp1676827075-17] DEBUG o.s.s.w.a.s.CompositeSessionAuthenticationStrategy - Delegating to org.springframework.security.web.csrf.CsrfAuthenticationStrategy@c95e58f \n810938 [qtp1676827075-17] DEBUG o.s.s.w.a.s.CompositeSessionAuthenticationStrategy - Delegating to org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy@2898b0c4 \n810938 [qtp1676827075-17] DEBUG o.s.s.w.a.s.SessionFixationProtectionStrategy - Invalidating session with Id '505c5639-33ba-4ec7-a539-6f5d4505b376' and migrating attributes. \n810939 [qtp1676827075-17] DEBUG o.s.s.w.a.s.SessionFixationProtectionStrategy - Started new session: 8dbe6773-8ebb-4ef0-81ca-1efe8390e7ab \n810939 [qtp1676827075-17] DEBUG o.s.s.w.a.UsernamePasswordAuthenticationFilter - Authentication success. Updating SecurityContextHolder to contain: org.springframework.security.authentication.UsernamePasswordAuthenticationToken@d0a6205d: Principal: org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMINISTRATOR,ROLE_USER; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffe3f86: RemoteIpAddress: 127.0.0.1; SessionId: 505c5639-33ba-4ec7-a539-6f5d4505b376; Granted Authorities: ROLE_ADMINISTRATOR, ROLE_USER \n810939 [qtp1676827075-17] DEBUG o.s.s.w.a.SavedRequestAwareAuthenticationSuccessHandler - Using default Url: /index.jsp \n810939 [qtp1676827075-17] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to '/security-sessionmanagement/index.jsp' \n810940 [qtp1676827075-17] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - SecurityContext stored to HttpSession: 'org.springframework.security.core.context.SecurityContextImpl@d0a6205d: Authentication: org.springframework.security.authentication.UsernamePasswordAuthenticationToken@d0a6205d: Principal: org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMINISTRATOR,ROLE_USER; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffe3f86: RemoteIpAddress: 127.0.0.1; SessionId: 505c5639-33ba-4ec7-a539-6f5d4505b376; Granted Authorities: ROLE_ADMINISTRATOR, ROLE_USER' \n810940 [qtp1676827075-17] DEBUG o.s.s.w.c.SecurityContextPersistenceFilter - SecurityContextHolder now cleared, as request processing completed \n\n------------ END POST /login\n-> Location:http://localhost:8080/security-sessionmanagement/index.jsp\n-> NO COOKIE SET!\n\n------------ BEGIN GET /index.jsp\n-> Cookie:SESSION=505c5639-33ba-4ec7-a539-6f5d4505b376\n\n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 1 of 12 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter' \n810943 [qtp1676827075-16] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No HttpSession currently exists \n810943 [qtp1676827075-16] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No SecurityContext was available from the HttpSession: null. A new one will be created. \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 2 of 12 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter' \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 3 of 12 in additional filter chain; firing Filter: 'HeaderWriterFilter' \n810943 [qtp1676827075-16] DEBUG o.s.s.w.h.writers.HstsHeaderWriter - Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@144bc342 \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 4 of 12 in additional filter chain; firing Filter: 'CsrfFilter' \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 5 of 12 in additional filter chain; firing Filter: 'LogoutFilter' \n810943 [qtp1676827075-16] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /index.jsp' doesn't match 'POST /logout \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 6 of 12 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter' \n810943 [qtp1676827075-16] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /index.jsp' doesn't match 'POST /login \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 7 of 12 in additional filter chain; firing Filter: 'DefaultLoginPageGeneratingFilter' \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 8 of 12 in additional filter chain; firing Filter: 'RequestCacheAwareFilter' \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 9 of 12 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter' \n810943 [qtp1676827075-16] DEBUG o.s.security.web.FilterChainProxy - /index.jsp at position 10 of 12 in additional filter chain; firing Filter: 'SessionManagementFilter' \n810943 [qtp1676827075-16] DEBUG o.s.s.w.s.SessionManagementFilter - Requested session ID 505c5639-33ba-4ec7-a539-6f5d4505b376 is invalid. \n810943 [qtp1676827075-16] DEBUG o.s.s.w.s.SimpleRedirectInvalidSessionStrategy - Starting new session (if required) and redirecting to '/login/sessionExpired' \n810944 [qtp1676827075-16] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to '/security-sessionmanagement/login/sessionExpired' \n810944 [qtp1676827075-16] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession. \n810946 [qtp1676827075-16] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - onNewSession \n810946 [qtp1676827075-16] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - added sessionCookie for sessionIds: {0=9ece947b-8cf6-470c-bb88-5e9a9a1e5aed} \n810946 [qtp1676827075-16] DEBUG o.s.s.w.c.SecurityContextPersistenceFilter - SecurityContextHolder now cleared, as request processing completed \n810946 [qtp1676827075-16] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - onNewSession \n810946 [qtp1676827075-16] DEBUG o.s.s.w.h.CookieHttpSessionStrategy - added sessionCookie for sessionIds: {0=9ece947b-8cf6-470c-bb88-5e9a9a1e5aed} \n\n-------------END GET /index.jsp\n-> Location:http://localhost:8080/security-sessionmanagement/login/sessionExpired\n-> Set-Cookie:SESSION=9ece947b-8cf6-470c-bb88-5e9a9a1e5aed;Path=/security-sessionmanagement/;HttpOnly\n\n-------------BEGIN GET /login/sessionExpired\n-> Cookie:SESSION=9ece947b-8cf6-470c-bb88-5e9a9a1e5aed\n\n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 1 of 12 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter' \n810948 [qtp1676827075-15] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - HttpSession returned null object for SPRING_SECURITY_CONTEXT \n810948 [qtp1676827075-15] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No SecurityContext was available from the HttpSession: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper$HttpSessionWrapper@20da3e72. A new one will be created. \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 2 of 12 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter' \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 3 of 12 in additional filter chain; firing Filter: 'HeaderWriterFilter' \n810948 [qtp1676827075-15] DEBUG o.s.s.w.h.writers.HstsHeaderWriter - Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@144bc342 \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 4 of 12 in additional filter chain; firing Filter: 'CsrfFilter' \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 5 of 12 in additional filter chain; firing Filter: 'LogoutFilter' \n810948 [qtp1676827075-15] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /login/sessionexpired' doesn't match 'POST /logout \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 6 of 12 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter' \n810948 [qtp1676827075-15] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /login/sessionexpired' doesn't match 'POST /login \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 7 of 12 in additional filter chain; firing Filter: 'DefaultLoginPageGeneratingFilter' \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 8 of 12 in additional filter chain; firing Filter: 'RequestCacheAwareFilter' \n810948 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 9 of 12 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter' \n810949 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 10 of 12 in additional filter chain; firing Filter: 'SessionManagementFilter' \n810949 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 11 of 12 in additional filter chain; firing Filter: 'ExceptionTranslationFilter' \n810949 [qtp1676827075-15] DEBUG o.s.security.web.FilterChainProxy - /login/sessionExpired at position 12 of 12 in additional filter chain; firing Filter: 'FilterSecurityInterceptor' \n810949 [qtp1676827075-15] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Checking match of request : '/login/sessionexpired'; against '/login' \n810949 [qtp1676827075-15] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Checking match of request : '/login/sessionexpired'; against '/login/sessionexpired' \n810949 [qtp1676827075-15] DEBUG o.s.s.w.a.i.FilterSecurityInterceptor - Secure object: FilterInvocation: URL: /login/sessionExpired; Attributes: [permitAll] \n810949 [qtp1676827075-15] DEBUG o.s.s.w.a.ExceptionTranslationFilter - Authentication exception occurred; redirecting to authentication entry point \norg.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext\n    at org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(AbstractSecurityInterceptor.java:341) ~[spring-security-core-4.0.0.RC1.jar:na]\n    at org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:200) ~[spring-security-core-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.access.intercept.FcurityInterceptor.invoke(FilterSecurityInterceptor.java:115) ~[spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) ~[spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:106) ~[spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:153) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.authentication.AbstracticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:184) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:85) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [spring-security-we.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:301) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-4.0.0.RC1.jar:na]\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:111) [main/:na]\n    at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:65) [main/:na]\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at ch.qos.logback.classic.selector.servlet.LoggerContextFilter.doFilter(LoggerContextFilter.java:70) [logback-classic-1.1.2.jar:na]\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:583) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-serverv20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1125) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1059) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.Server.handle(Server.java:497) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:248) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-io-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:610) [jetty-util-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:539) [jetty-util-9.2.3.v20140905.jar:9.2.3.v20140905]\n    at java.lang.Thread.ead.java:745) [na:1.8.0_31]\n810949 [qtp1676827075-15] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request '/login/sessionexpired' matched by universal pattern '/**' \n810951 [qtp1676827075-15] DEBUG o.s.s.w.s.HttpSessionRequestCache - DefaultSavedRequest added to Session: DefaultSavedRequest[http://localhost:8080/security-sessionmanagement/login/sessionExpired] \n810951 [qtp1676827075-15] DEBUG o.s.s.w.a.ExceptionTranslationFilter - Calling Authentication entry point. \n810951 [qtp1676827075-15] DEBUG o.s.s.web.DefaultRedirectStrategy - Redirecting to 'http://localhost:8080/security-sessionmanagement/login' \n810951 [qtp1676827075-15] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession. \n810952 [qtp1676827075-15] DEBUG o.s.s.w.c.SecurityContextPersistenceFilter - SecurityContextHolder now cleared, as request processing completed \n\n------------- END GET /login/sessionExpired\n-> Location:http://localhost:8080/security-sessionmanagement/login\n-> No new Cookie sent!\n\n------------- BEGIN GET /login\n-> Cookie:SESSION=9ece947b-8cf6-470c-bb88-5e9a9a1e5aed\n\n\n810959 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 1 of 12 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter' \n810960 [qtp1676827075-21] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - HttpSession returned null object for SPRING_SECURITY_CONTEXT \n810960 [qtp1676827075-21] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - No SecurityContext was available from the HttpSession: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper$HttpSessionWrapper@9d48cc2. A new one will be created. \n810960 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 2 of 12 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter' \n810960 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 3 of 12 in additional filter chain; firing Filter: 'HeaderWriterFilter' \n810960 [qtp1676827075-21] DEBUG o.s.s.w.h.writers.HstsHeaderWriter - Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@144bc342 \n810960 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 4 of 12 in additional filter chain; firing Filter: 'CsrfFilter' \n810960 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 5 of 12 in additional filter chain; firing Filter: 'LogoutFilter' \n810960 [qtp1676827075-21] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /login' doesn't match 'POST /logout \n810960 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 6 of 12 in additional filter chain; firing Filter: 'UsernamePasswordAuthenticationFilter' \n810960 [qtp1676827075-21] DEBUG o.s.s.w.u.m.AntPathRequestMatcher - Request 'GET /login' doesn't match 'POST /login \n810960 [qtp1676827075-21] DEBUG o.s.security.web.FilterChainProxy - /login at position 7 of 12 in additional filter chain; firing Filter: 'DefaultLoginPageGeneratingFilter' \n810964 [qtp1676827075-21] DEBUG o.s.s.w.c.HttpSessionSecurityContextRepository - SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession. \n810964 [qtp1676827075-21] DEBUG o.s.s.w.c.SecurityContextPersistenceFilter - SecurityContextHolder now cleared, as request processing completed \n\n\n\nContents in Redis after these Requests:\n-----------------------------------------\n127.0.0.1:6379> KEYS * \n1) \"spring:session:expirations:1424371260000\"\n2) \"spring:session:expirations:1424371320000\"\n3) \"spring:session:sessions:9ece947b-8cf6-470c-bb88-5e9a9a1e5aed\"\n4) \"spring:session:sessions:8dbe6773-8ebb-4ef0-81ca-1efe8390e7ab\"\n\n127.0.0.1:6379> HKEYS spring:session:sessions:9ece947b-8cf6-470c-bb88-5e9a9a1e5aed \n1) \"sessionAttr:SPRING_SECURITY_SAVED_REQUEST\"\n2) \"maxInactiveInterval\"\n3) \"lastAccessedTime\"\n4) \"creationTime\"\n\n127.0.0.1:6379> HKEYS spring:session:sessions:8dbe6773-8ebb-4ef0-81ca-1efe8390e7ab\n1) \"creationTime\"\n2) \"sessionAttr:org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository.CSRF_TOKEN\"\n3) \"maxInactiveInterval\"\n4) \"sessionAttr:SPRING_SECURITY_CONTEXT\"\n5) \"lastAccessedTime\"\n6) \"sessionAttr:SPRING_SECURITY_LAST_EXCEPTION\"\n\n```\n\ndo you have any idea what could be wrong here? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75111471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75140310", "body": "I push the updated sample tomorrow at work.. my hotel has quite crappy internet today.\n\nignoring the \"none\" means that it still calls \n/home/domdorn/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-web/4.0.0.RC1/b445eb63b983ab7f29cb45c862c48cbccc4e57e1/spring-security-web-4.0.0.RC1-sources.jar!/org/springframework/security/web/authentication/session/AbstractSessionFixationProtectionStrategy.java:82\n\n``` java\n        if (hadSessionAlready && request.isRequestedSessionIdValid()) {\n\n            String originalSessionId;\n            String newSessionId;\n            Object mutex = WebUtils.getSessionMutex(session);\n            synchronized(mutex) {\n                // We need to migrate to a new session\n                originalSessionId = session.getId();\n\n                session = applySessionFixation(request); // thats 82\n                newSessionId = session.getId();\n            }\n\n            if (originalSessionId.equals(newSessionId)) {\n                logger.warn(\"Your servlet container did not change the session ID when a new session was created. You will\" +\n                        \" not be adequately protected against session-fixation attacks\");\n            }\n\n            onSessionChange(originalSessionId, session, authentication);\n        }\n\n```\n\nThe program then jumps into the child classes` applySessionFixation (org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy ) \nwhich discards the old session and creates a new session... imo this shouldn't happen if the attribute is set to \"none\"...  \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75140310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75216855", "body": "#155 is more or less a specific version of this... maybe it might be better to just make createSessionCookie protected and allow users to override it in a subclass? \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75216855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75217915", "body": "It works now in my sample project.. I need to test it against our production version, will report back later.\nThanks for your help!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75217915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75583030", "body": "I agree, maybe we should just call it security-xml .. people can use it as a bootstrap example or compare their existing XML setups and I can add corner cases from our prod-environment to it. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75583030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75734693", "body": "I think that's fixed.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75734693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76641840", "body": "@rwinch is there anything missing preventing this to be merged? I would really like to see this in 1.0.1 as right now, we have to provide our own CookieHttpSessionStrategy just to override how certain things in the cookie are set. Thx\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76641840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87687591", "body": "hmm... just out of curiosity... something wrong with my patch? I'm fine with adjusting/enhancing it. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87687591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89238381", "body": "Hmm.. I'm not sure, as I've got assigned a new work item.. steps to reproduce where\n1. start redis instance\n2. log in to the application\n3. kill redis instance\n4. reload web-page\n   -> session-cookie is valid, but session is not found in redis, instead of deleting the cookie, it redirects to login page, which instead of deleting the old cookie again redirects and so on.. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89238381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "slacrey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74013700", "body": "so sorry,please view the http://docs.spring.io/spring-session/docs/current/reference/html5/guides/users.html#adding-a-session, first visit http://localhost:8080/?_s=1,inside the browser is no such \"1 69c00682-d12d-45d7-bc43-d8500c44cb52\" cookie. again there will be a browser cookie.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74013700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LeeMinKyu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74211977", "body": "@Thilak-T Thank you for your comment.\nBrowser is Chrome and no access from another browser.\nRedis server ip is a specific ip. I just think that redis server ip doesn't have to expose on this issue. \n\n@rwinch  Thank you for your comment.\nWeb applications are same(port, path, os version, apache, tomcat version, jdk version ... all same ).\n\nServer 1 request and response  - login page ( == home )\n![image](https://cloud.githubusercontent.com/assets/8723117/6182933/cdeef3fc-b390-11e4-873b-148c0fdca534.png)\n\nServer 2 request and response  - login page ( == home )\n![image](https://cloud.githubusercontent.com/assets/8723117/6182941/021c4e36-b391-11e4-8c3f-85000b13afcc.png)\n\nIn this case, Is it impossible to get same session id ??\nIf host of request header becomes equal, can I get the same session id ?\n\n---\n\n<br>\n**Additionally**\nI find that if I access same server from different URLs , session id in cookie is not equal.\n\nI access my local server from http://localhost/\n![image](https://cloud.githubusercontent.com/assets/8723117/6183036/d4623ce2-b392-11e4-91d9-5c09a61be3c6.png)\n\naccess my local server from http://127.0.0.1/\n![image](https://cloud.githubusercontent.com/assets/8723117/6183046/054d9aa4-b393-11e4-8c18-0c550f98941b.png)\n\naccess my local server from private ip\n![image](https://cloud.githubusercontent.com/assets/8723117/6183061/3ae50a94-b393-11e4-9092-b69bfd583063.png)\n\nIs it intended?\nSession id is affected by domain url? Can I customize session id?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74211977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74417165", "body": "@rwinch  Thank you for your comment.\nAnd I'm so sorry. At last, I can understand that ' **_when the cookie was first set**_ '.\nYou want that the response headers have 'Set-Cookie' attribute,, right?\nI followed your comment, cleared out the cookies and re-accessed my web pages.\n\n**Server1**\n\n---\n\n![image](https://cloud.githubusercontent.com/assets/8723117/6203067/2c200b2c-b54f-11e4-836b-2e1f8fbdfa41.png)\n\n**Server2**\n\n---\n\n![image](https://cloud.githubusercontent.com/assets/8723117/6203063/1ad17b08-b54f-11e4-8f80-c9e8fa9c73ff.png)\n\nI guess, \nIf the request URLs are same, the session cookie's values are same even though each network headers's remote address( = server IP ) is different.\nIs it right?\nIf right, my web.xml, spring-security.xml and jedis.xml  are correct? \nIf not, How do I set the spring - mvc + security + session + redis for sharing session in multiple servers?\nI want to share a session for sharing user's login_info and auth in multiple servers.\n\nOnce again, thank you for your comments and sorry about my not good english.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74417165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "manderson23": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74519514", "body": "Hey @llambda any progress on the docs? I'm just in the middle of porting an application to Spring Session that requires a max age on the cookie.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74519514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74687314", "body": "I could maybe provide a PR with the required documentation changes to get this merged if @rwinch could provide guidance on the level of detail required. Is something like the following enough? OR do you also want code samples?\n\n## Cookies\n\n[CookieHttpSessionStrategy](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/api/org/springframework/session/web/http/CookieHttpSessionStrategy.html) provides the mechanism for overriding default values of the cookie associated with the HTTP session.\n\nThe following values are configurable.\n- **Name** - The name of the cookie. The default value is SESSION.\n- **Maximum Age** - The maximum age of the cookie in seconds. This value has the same behaviour as [javax.servlet.http.Cookie.setMaxAge](http://docs.oracle.com/javaee/7/api/javax/servlet/http/Cookie.html#setMaxAge%28int%29) The default value is -1.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74687314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74779321", "body": "For your first point is it really realistic to support distributed maps generally in this way? It could be made clear in the javadoc. In the future we may look at using Hazelcast for clustering but I honestly wouldn't expect to be able to drop a map into the constructor and have it work flawlessly. \n\nExpiry is an issue though for now in our implementation we periodically check for expired entries and delete if required. Out of interest how does the Redis implementation handle expiry?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/74779321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75715943", "body": "Any comments on my suggestion re documentation for getting this merged?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75715943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75800115", "body": "@rwinch given the code requirement how would a pull work? Do I need to fork @llambda repo and work/create a pull against that? If i fork the main repo I assume my build would fail until this pull was merged.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75800115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37727025", "body": "Would it be better to have a default of -1 (to indicate it should be ignored) for the case where you would like to use the value defined in an external Hazelcast configuration? Otherwise Spring Session will always overwrite.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37727025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37806910", "body": "I can see the value in consistency across repository implementations. And I also agree that -1 isn't a reasonable value.\n\nI just raised it as a possible concern as I suspect my use case may have the hazelcast configuration externalised from the Spring configuration.\n\nWhat about if the `maxIdleSeconds` is 0 (the default) we override with the value from the annitation otherwise we leave it and don't use it (like @rwinch suggested).\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37806910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37862249", "body": "@rwinch as you say Hazelcast can be used for many things and my thoughts were that we should support Hazelcast being configured completely outwith spring (this will probably be the case for me) and by default don't override any of these values.\n\nIn this case I can probably handle ensuring this is configured via Spring instead of assuming the Hazelcast configuration value is used but maybe that wouldn't be the case for everyone.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37862249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37862822", "body": "@rwinch that would work for me.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37862822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jsumners": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75636965", "body": "I avoid passing in `HttpServletRequest` unless I absolutely have to. I try to keep my method signatures short. Also, if spring-session is providing a nicer API than `HttpSession` then I'd like to use it.\n\nHere's a scenario where I think `reset()` or `clear()` is useful:\n\nA user is presented with a few choices: activate account, lookup account, reset password. Each of these actions will involve state saved in the session. But each action should be totally separate. So, if the user started on one action but found out that was the wrong one and switched one of the others, then the session state should be reset or cleared. We could do that as you suggest:\n\n``` java\npublic ModelAndView startPoint(HttpSession session, HttpServletRequest request) {\n  // Make sure the session is clean\n  session.invalidate();\n  HttpSession _session = request.getSession(true);\n\n  // now use _session when we already had session\n}\n```\n\nOr we could use an improved API:\n\n``` java\npublic ModelAndView startPoint(Session session) {\n  // Make sure the session is clean\n  session.clear();\n\n  // go about our business\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75636965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "olivergierke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75771834", "body": "For Redis, @thomasdarimont should be able to give more insight.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75771834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78226781", "body": "Maybe its worth considering to switch to the standard [`Authentication-Info`](http://tools.ietf.org/html/rfc2617#section-3.2.3) header, too.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78226781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "thomasdarimont": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75777670", "body": "We already looked at this before but at that time the used Redis version was pretty old. Looks better now, I filed: https://jira.spring.io/browse/DATAREDIS-376 and https://github.com/kstyrc/embedded-redis/issues/30\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/75777670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cscheffel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76016296", "body": "In the current preproduction-state, all the services run under \"localhost\" with different ports.\nYou are right (of course), that this is a \"developer only\"-problem, so I guess, that this will not be the case for us in production (thanks for the question like answer).\n\nBUT: What about Rest-based services used internally in our datacenter?\n\nThere we will have serveral apps (i.e. rest services) on the same host using different ports only.\nI know, that a \"good\" rest service should be state free, but sometimes real life doesn't allow this.\n\nToday, this is not a current problem because we have not switched all services to spring session, but I have to keep this in mind.\n\nSo, maybe my original question isn't so stupid.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76016296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76137895", "body": "I like to create a ticket, but do not see, where and how to do this.\n\nI looked at http://jira.spring.io where all other spring projects can be found but can't see spring session there.\n\nWould it be enough for you to write down the text here (or in a new issue)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76137895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76205529", "body": "I have opened an enhancement request under #166 and will close this question.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76205529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "peterksteiner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76114935", "body": "I've been able to create my own version of your demo apps with Spring 3.2.1.RELEASE. I've posted to https://github.com/peterksteiner/spring-session-demo\nEverything works just fine w/o Spring 4. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/76114935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tcesenthil": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78381412", "body": "Hi\n   I defined \"server.session-timeout=15\" in application.properties file and followed the above approach to my HttpSessionConfig file (as listed below). My Session was not automatically destroyed after 15 seconds. \n\n   I had placed a print statement during the SessionDestroyedEvent event. This statement got triggered when the timeout was hard-coded via the annotation or when programmatically set but, it never worked when i defined it via application.properties.\n\n   What could be the reason ? or am i missing something ?\n\n@Configuration\n//@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 30)\n@EnableRedisHttpSession\npublic class HttpSessionConfig {\n\n```\n@Value(\"${server.session-timeout}\")\nprivate int maxInactiveIntervalInSeconds;   \n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78381412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78384490", "body": "Yes, here is the code\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.ExpiringSession;\nimport org.springframework.session.data.redis.RedisOperationsSessionRepository;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\n@Configuration\n//@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 30)\n@EnableRedisHttpSession\npublic class HttpSessionConfig {\n\n```\n@Value(\"${server.session-timeout}\")\nprivate int maxInactiveIntervalInSeconds;   \n\n@Primary\n@Bean\npublic RedisOperationsSessionRepository sessionRepository(RedisTemplate<String, ExpiringSession> sessionRedisTemplate) {\n    RedisOperationsSessionRepository sessionRepository = new RedisOperationsSessionRepository(sessionRedisTemplate);\n    sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);\n    return sessionRepository;\n}   \n\n@Bean\npublic JedisConnectionFactory connectionFactory() {\n    return new JedisConnectionFactory();\n}\n\n@Bean\npublic RedisTemplate<String, Customer> name(\n        RedisConnectionFactory connectionFactory) {\n    RedisTemplate<String, Customer> redisTemplate = new RedisTemplate<String, Customer>();\n    redisTemplate.setConnectionFactory(connectionFactory);\n    return redisTemplate;\n}\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78384490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78385039", "body": "If i uncomment the annotation based definition of maxInactiveIntervalInSeconds , auto expiry happens exactly after 30 seconds. It is only the value that comes from the application.properties that doesn't seems to work. The destroyed event statement is not getting printed at all, however long it takes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78385039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78834350", "body": "any pointers anyone ? the external configuration value is being picked up but session is not Auto-expiring after that many seconds. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/78834350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/81936046", "body": "After reading through the Spring Session Documentation, here is my understanding. Will these 3 steps (at a high level) be sufficient to allow Spring Session to write to Gemfire repository instead of Redis ? I am interested in getting this component developed and tested for public & my private use.\n\nStep 1: Implement just a Configuration class which provide all functions as the annotation\n1. Allow spring to Load the configuration class \n2. Register Spring Session Filter in Container \n3. Establish Repo Connection Factory\n4. Repo connection configuration\n\nwe will continue to re-use the Spring Session\u2019s springSessionRepositoryFilter\n\nStep 2: Need to develop an equivalent GemfireOperationsSessionRepository implementing the interface SessionRepository<S Session>\n\nStep 3: SessionMessageListener.java \n   3.1. Need to decide a technique to identify and save delta changes in Session to underlying repository\n   3.2. Need to see how session expire notification from underlying repository can be captured to invoke SessionDestroyEvent and cleanup operations -\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/81936046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "szabobar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82405692", "body": "Sorry, but after I added 1.0.1-BUILD_SNAPSHOT dependency, I also got that error, so that fix does not resolve the bug.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82405692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82415179", "body": "Sure,\n\nBut, If I use redis server on my win7, the problem was the same, so that code does not work with not embedded redis server.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82415179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82419626", "body": "Your right, if I use the 2.8.17.4 version, work for me: \nhttps://github.com/MSOpenTech/redis/releases/tag/win-2.8.17.4\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82419626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "michael-wirth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82438509", "body": "@szabobar I guess you're using Windows (as myself). \n\nThe embedded-redis:0.4 contains Redis 2.8 for Linux and Mac, but only version 2.6 for Windows. You have to patch the embedded-redis artifact or  define an external path to your lokal Redis 2.8 executable.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/82438509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "danyunfu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/83753055", "body": "I have the same error on Tomcat\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/83753055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84005817", "body": "Maven+Spring Boot, Tomcat 8.0.12, deployed as a jar via Maven build, I tried embedded Redis 0.5 and 0.4. I'm also Windows (I noticed some of your other issues with embedded Redis may be a Windows issue?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84005817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Calabor-Hoc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/83846551", "body": "Mr Winch, I am doing a big project and your session framework is a important part of it. So I'm very eager to know if this mistake I reported is true or just my wrong judgement on your code. Thank you very much!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/83846551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brandon-atkinson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84052304", "body": "This also affects users of Amazon's ElastiCache redis, as it doesn't support CONFIG either.\n+1 on a fix for this, even if it's by allowing an option to disable disable keyspace notifications.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/84052304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sreekanthsnair": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86377900", "body": "This is of very important, at least it should respect what web.xml config value of cookie-config path value\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86377900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87546675", "body": "@rwinch  any kind update on this, only because of this issue i'm stuck integrating spring session. We have an EAR project where we are setting all cookie path to / via web.xl to make our SSO work but due to spring session overriding cookie behaviors we are unable to proceed with spring session integration. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87546675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "derylseale": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86551965", "body": "I've created a small test project that demonstrates the error. If you change to Spring Boot v1.1.10, then the error goes away.\n\nhttps://github.com/derylseale/176_test\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/86551965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "egov-systems": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87683664", "body": "@rwinch thanks,  you mean to say our own implementation of CookieHttpSessionStrategy  and provide it as bean or do spring-session is having any patch for the same ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87683664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87685053", "body": "@rwinch thanks Rob\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/87685053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andirdju": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88098040", "body": "@rwinch , @danveloper ,\nI think calling the config commands is a bit like hibernate.hbm2ddl.auto option, its better to make it disabled by default.\n\nwhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88098040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88116800", "body": "@dwelch2344, @rwinch\nthe issue with aws elasticache is that not all commands are allowed.\nhttp://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/ClientConfig.html\n-- Restricted Commands\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88116800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88204785", "body": "@dwelch2344, @rwinch \nfinally got it working on aws elasticache redis using guide from @danveloper:\nhttps://github.com/spring-projects/spring-session/issues/124#issuecomment-71525940\n\nIn my setup I just need to adjust the spring-el syntax to something like this,\nit won't work with the `$` sign:\n\n```\n@Value(\"#{systemProperties['spring_session_redis_expiration'] ?: 1800}\")\n```\n\ntest it using aws beanstalk with 5 instance, load balanced, no sticky session.\nno need to relogin after restarting the tomcat server :smile:.\nPreviously I was using https://github.com/jcoleman/tomcat-redis-session-manager to handle the centralized session storage.\n\nthe config I use (besides the `RedisHttpSessionConfiguration` subclass):\n\n```\n    @Order(100)\n    public class SpringSessionInitializer extends AbstractHttpSessionApplicationInitializer {\n    }\n```\n\n```\n    @Configuration\n    public class Config {\n\n      @Bean\n      public static JedisConnectionFactory jedisConnectionFactory() {\n        JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory(jedisPoolConfig());\n        jedisConnectionFactory.setHostName(System.getProperty(\"spring_session_redis_host\"));\n        jedisConnectionFactory\n            .setPort(Integer.parseInt(System.getProperty(\"spring_session_redis_port\")));\n        jedisConnectionFactory.setPassword(System.getProperty(\"spring_session_redis_password\"));\n        jedisConnectionFactory.setDatabase(Integer.parseInt(System\n            .getProperty(\"spring_session_redis_database\")));\n        jedisConnectionFactory.setTimeout(Integer.parseInt(System\n            .getProperty(\"spring_session_redis_timeout\")));\n        jedisConnectionFactory.setUsePool(Boolean.parseBoolean(System\n            .getProperty(\"spring_session_redis_use_pool\")));\n        return jedisConnectionFactory;\n      }\n\n      @Bean\n      public static JedisPoolConfig jedisPoolConfig() {\n        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n        jedisPoolConfig.setTestOnBorrow(Boolean.parseBoolean(System\n            .getProperty(\"spring_session_redis_pool_test_on_borrow\")));\n        jedisPoolConfig.setMaxTotal(Integer.parseInt(System\n            .getProperty(\"spring_session_redis_pool_max_total\")));\n        jedisPoolConfig.setMaxIdle(Integer.parseInt(System\n            .getProperty(\"spring_session_redis_pool_max_idle\")));\n        jedisPoolConfig.setMinIdle(Integer.parseInt(System\n            .getProperty(\"spring_session_redis_pool_min_idle\")));\n        return jedisPoolConfig;\n      }\n\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/88204785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kstyrc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89065406", "body": "@danyunfu you couldn't use embedded redis 0.5, as it got release just today -,- It includes an update for windows binary to 2.8.19\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/89065406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "AndreasKl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/91335316", "body": "@brentonr storing mutable data in a session is considered bad practice and leads to hard to track issues. Implementing some sort of dirty tracking via proxies would be possible but wouldn`t solve all inherent problems that mutable state in a session causes.\n\nThere is a nice read why mutable state in a session is an issue:\nhttp://www.ibm.com/developerworks/library/j-jtp09238/\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/91335316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/91338193", "body": "You most likely set the session data in another thread that differs from the requesting thread. The thread-local that contains the reference to the session is however bound to the requesting thread. \n\nTo solve this you could collect all data you would like to add to your session in a map and after dispatching to the requesting thread write the data into your now accessible session. If you are using Spring Web Mvc this could be done with a custom `HandlerMethodReturnValueHandler`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/issues/comments/91338193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Bessonov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9528622", "body": "One dash is missing.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/9528622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "martin-g": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/12769620", "body": "1.1 will be the next release, right ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/12769620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/23918417", "body": "why ignore the pom.xml \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/23918417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37147186", "body": "I foresee OSGi users crying because of this but this is something normal for them :-)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37147186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37147201", "body": "As far as I can see this class could be `static`, so it won't keep a reference to its outer. This is preferable most of the time.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37147201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49276923", "body": "final\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49276923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49276943", "body": "Is there a need for concurrency in these maps?\nIf YES, then why not use `ConcurrentMap` as a type and use `#putIfAbsent()` instead of `#put()`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49276943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49276947", "body": "bad formatting.\nthere is some more ahead.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/49276947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "shakuzen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/13520218", "body": "It appears this is now 1.2 in master but I believe it should be 1.1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/13520218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37766966", "body": "I wanted to maintain the functionality in a very similar way to the Redis equivalent in order to lower the barrier to entry. You are right that Spring Session will always overwrite this value, which can be confusing if you configure the same thing externally. However, Spring Session would only be configuring the specific `Map` used for the `SessionRepository` which seems like it might acceptable and the same as the Redis configuration does, from what I can tell.\n\nIf we do want to avoid overwriting, I think we would have to change to an `Integer` and make the default for this `null` (I think -1 would be potentially confusing and could be mistaken for a valid value when it is not). Then only overwrite the value (Hazelcast's default `maxIdleSeconds` is 0) if this is not null.\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37766966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37823130", "body": "@rwinch I'm not sure how we would be able to read the provided configuration. The user could put the configuration in any xml file and include that configuration. Alternatively, they could configure it in Java, reading the values from a properties file, perhaps.\n\n@manderson23 The problem is, as far as I can tell, we have no way to know if the user configured `maxIdleSeconds` as 0 or if they did not configure it and it is just 0 by default. In case they configured it as 0, I think we would want to respect that and not overwrite it.\n\nI'm leaning more towards having to change the default attribute value to 0 to match to default of `maxIdleSeconds`. Then the user can configure it themselves and we will only override if a value is passed to `maxInactiveIntervalInSeconds`. Though this is different than the Redis configuration, I believe. So we have to choose to play it safe and avoid overwriting the user's configuration, or maintain consistency with the equivalent Redis configuration.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37823130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37865087", "body": ":+1: I agree. I meant to remove this in the next commit I made and I just haven't made another one yet.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37865087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37874675", "body": "If something other than a `Number` is given, the application will fail on startup with a straightforward message, which I figured was sufficient exception handling. Let me know if you want anything else.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37874675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37875309", "body": "@rwinch and @manderson23 I implemented my understanding of the previous discussion on the default/overriding the session timeout. Let me know what you think. Currently it only mentions the String constant I added `DO_NOT_CONFIGURE_INACTIVE_INTERVAL_STRING`, but perhaps the JavaDoc for this can/should mention the value of that constant as `\"\"`?\nAlso let me know if you think of a better name for the constant.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37875309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37875944", "body": "Sorry, this actually always fails right now. I thought I tested it. I will push a fix after testing...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37875944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37878947", "body": "Updated now as requested.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/37878947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/39516210", "body": "I should probably change these to `this.eventPublisher` to match style.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/39516210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/50934160", "body": "Can the Hamcrest dependencies be removed now that everything has been changed over to AssertJ?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/50934160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/51516916", "body": "I realized when reading this sentence we have an issue. The `put` method on `IMap` does indeed set the TTL, but what we actually want is the TTI (time to idle) set.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/51516916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/51738026", "body": "As [discussed in Gitter](https://gitter.im/spring-projects/spring-session?at=56b07d126b6468374a0af02c), this is not an issue as I thought it was. Things should work as expected, but it would be better if we add a test specifically for this, like:\n- Save a session\n- Wait a some time less than the expiration time\n- Update the session as SessionRepositoryFilter does\n- Wait until past the original time it should have expired\n- Ensure it has not expired because it was updated.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/51738026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78560214", "body": "listen \u2192 listens\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78560214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78560267", "body": "translate \u2192 translates\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78560267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78561138", "body": "This is the publisher for all of the Session events, but the JavaDoc here only mentions the `SessionDestroyedEvent`, which I think might be a little confusing for users.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78561138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78561565", "body": "Nit-pick: \"newly created\" seems to be adding emphasis but I'm not sure why. Any session that has been inactive for the set amount of time will be invalidated, right?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78561565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78680841", "body": "To me that sounds like leaking implementation details that are not what I would expect a person using this method to need to know about or care about.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/78680841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/80656313", "body": "Should be:\n\n``` java\nAssert.notNull(cached, \"MapSession cannot be null\");\n```\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/80656313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/82515863", "body": "Is it possible some of the sessions are deserializable while some are not? It would seem nice to be able to return just the ones that are deserializable and delete the ones that are not. Otherwise, repeated attempts to find will always result in an empty result (until any configured timeout of the sessions that cannot be deserialized). I'm not sure how this can be accomplished in a way that supports any `FindByIndexNameSessionRepository` implementation, though.\nAt least documenting the behavior in the JavaDoc for this method would be nice, I think.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/82515863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sutra": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14802971", "body": "I believe we should add  a `.` separator between the `requestedCookieValue` and the `jvmRoute`.\nOtherwise the user have to `setJvmRoute(\".node01jvmA\")`.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14802971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14864545", "body": "Tomcat does that. In tomcat's setting, if set `jvmRoute=\"node01\"`, then you will get the cookie name `abc123.node01`(see #256).\nIf design this as an extra suffix, maybe a new name should be used to avoid confusion.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/14864545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "SlimeQ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16362221", "body": "YEEEAAAAAAAAH!!!!!!!!!!!!!!!!!!!!!!!\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16362221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16362253", "body": ":+1: :+1: :+1: \n:100: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16362253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jkubrynski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16729422", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16729422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16742748", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/comments/16742748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699178", "body": "This sample is a clone of a boot sample. In boot-sample there is nice webapp to show the application usage and as I know it uses those resources.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53699178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704102", "body": "I removed the final because it is implemented with covering all required logic, which means we can use it for example for storing sessions in Mongo or relational databases by simply creating annotated class that extends the MapSession. Is there any particular reason for keeping it final?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704333", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704350", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704369", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704381", "body": "Ok\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704799", "body": "Yep - the problem is with serialization. Mongo repositories are not capable of writing Spring Security objects, like for example `UsernamePasswordAuthenticationToken`. Thats why we need `MongoSessionSerializer` to handle that. Exposing it as an interface allows users to plugin-in their own serialization mechanisms.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53704799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705111", "body": "Just making the id shorter. `-` sign is redundant here in my opinion. Of course it will also work with minus char so if you prefer this version I can remove the replacement\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705503", "body": "Yes, but we need some additional information like for example field names. That's why I decided to create dedicated interface. Schema design in Mongo is a big topic so IMHO it's good to give such extension point to the users.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705944", "body": "We use is in a version with FST serialization :) I can make it final but it means each custom implementation will probably copy 90% of this code, as it covers most usecases.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53705944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706192", "body": "I was thinking about that but it means custom converter for each non-standard object. That's possible but not sure useful for users, when they will have to register their own serializers. Serializers like Kryo, FST or even Java serializations are handling it much better.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706624", "body": "I think there will be problem in adding FST to IO platform so I decided to open `MapSession` with this PR. But definitely I can this change to another PR\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/53706624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54483079", "body": "Thanks, I'm still working on Jackson serialization which I should finish in\nfew days.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54483079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54491190", "body": "Yes - I've made configuration as well as the converters package scoped, which means if I'd like to open annotation to a different package I've to open also those classes.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54491190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54491456", "body": "I haven't noticed anyone is still using XML config :) I'll fixed it\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54491456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54492127", "body": "The defaults are in the configuration -> do you want to move them to the implementation?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54492127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54601395", "body": "The user is able to override this query when he want to change `principal` field name - not needed for changing the converter. \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54601395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54601550", "body": "But things like maxInteractiveInterval or collectionName are specified on annotation. Do you want to copy those default to the implementation?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54601550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54601774", "body": "That was something not clear for me. You can use many different converters but we also have to stick to some naming convention. How would you like to enforce user to serialize `expireAt` to field with exactly this name? And it's needed to create a TTL index.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54601774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54604113", "body": "Generally I'm not a fan of such approach. When someone will decide to serialize attributes as a map he needs to create whole MongoExpiringSession object from scratch, as you use fully qualified field name for keeping principal, and Mongo doesn't allow dots as field names. So with such approach we totally close repository or converters from being extended by users. I'm not sure it's something you want?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54604113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54606584", "body": "How would you like to do that? By creating bean with queries? In my opinion\nit's much easier to just create a converter which with methods returning\nthose queries, so user will be able to keep in in the same place. That is\ngenerally something that I've created in initial commit.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54606584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54724961", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54724961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54960984", "body": "I've simplified this -> cannot see the usecase in which we won't use `is` on criteria\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54960984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961233", "body": "Currently there is no index on principal. It used only for querying against principal. I'd prefer to refactor that after allowing more than principal query.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961400", "body": "OK\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961523", "body": "Not if we want to allow users to create their own converters -> then then need to operate on this object\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961651", "body": "AAaa - I get it! Sure - will change it :)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/54961651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jvalkeal": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/48453990", "body": "Actually I think this casting is wrong and was related to use of jdk serialization. Been playing with kryo and I'm now getting casting errors. Need to play with it a bit more.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/48453990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "snicoll": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60063829", "body": "uh? Shouldn't you just be using `setTableName`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60063829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60068705", "body": "I guess it's taken from what I've done in Spring Boot. I agree an `@Autowired` method with no parameter is not really a good idea.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/60068705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "simonbasle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88620373", "body": "this could be probably upgraded to `2.1.4` (if Spring Session is currently using Spring Data Hopper @rwinch ?)\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88620373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88620563", "body": "is there a real rationale for these version bumps (this one and above)?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88620563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88620964", "body": "this can have side effects if other data is colocated with the session data in Couchbase, which happens a lot... (I know this is for integration test, but still...) maybe the DELETE query can have a restricting WHERE clause?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88620964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88624094", "body": "maybe this part could recognize more types as natively storable? Couchbase SDK can store `String`, `Boolean`,  `Integer`, `Long`, `Double` and its own json value types `JsonObject` and `JsonArray`...\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88624094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88624346", "body": "since this is not in the couchbase package, probably needs to be double-checked by @rwinch \n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/88624346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Fitzoh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74038460", "body": "Cool, I had a mental TODO of extracting that to a common class, will just copy-paste for now.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74038460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74040032", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74040032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74040511", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74040511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74040638", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74040638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74041789", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74041789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74042477", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74042477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74158496", "body": "Lowered to the stable version, which also drops the Cassandra version from 3 to 2.\n\nTests fail on cass3, but pass on cass2 locally. \n\nPretty sure this means the travis tests will be broken until I can get embedded cass working.\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74158496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74159531", "body": "Good call, updated\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74159531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74170952", "body": "Batch is only for insert, update, delete isn't it?\nhttp://docs.datastax.com/en/cql/3.1/cql/cql_reference/batch_r.html\nOr are you talking about doing:\n`select * from session where id in [<list of uuids>]`?\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/74170952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77954399", "body": "updated\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77954399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77956571", "body": "updated\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77956571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77956589", "body": "updated\n", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/77956589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "jjzazuet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90051819", "body": "Ok yeah I can tackle that change. Thanks!", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90051819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "cah-andrewfitzgerald": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90158314", "body": "updated", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90158314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90158703", "body": "Skipping this per @vpavic's feedback. We shouldn't be configuring the cluster at all.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90158703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159180", "body": "updated", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159189", "body": "removed", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159194", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159214", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159380", "body": "Sounds good guys, I'll get that stripped out.", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159835", "body": "leaving that one for @jjzazuet ", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/90159835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "davidmelia": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/99330548", "body": "Hi, I have just tested the above using Redis and calling delegate.delete results in a serialization issue as RedisOperationsSessionRepository goes away and tries to get the session again\r\nRedisSession session = getSession(sessionId, true);\r\n\r\nNot sure if this is an issue with this code or with RedisOperationsSessionRepository.  Thanks", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/99330548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "bsideup": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/127694342", "body": "you can also use `getFirstMappedPort()` since 1.4 :)", "reactions": {"url": "https://api.github.com/repos/spring-projects/spring-session/pulls/comments/127694342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}