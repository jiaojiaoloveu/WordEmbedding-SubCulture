{"_default": {"1": {"degasus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/fca56d532a4da844c324d7a4ea05252e72d89fcf", "message": "Merge pull request #4453 from degasus/custom_texture\n\nCustomTexture: Drop old texture format."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a5a05991458cd83b022491cf5ac020b7497272b9", "message": "CustomTexture: Drop old texture format."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0b466249e005a5e47a479bce0e4be67ad2dcecb0", "message": "CustomTextures: Drop format convertion."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/71b551968881af7259256922d8924958f212454c", "message": "Merge pull request #6308 from JosJuice/avidump-s\n\nAVIDump: Remove incorrect usage of s_ prefix"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e02025b45e0ee25a325e25dd96efafd8849ddc45", "message": "Merge pull request #6307 from rukai/fix-frame-dump-path\n\nHandle framedump path not existing"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2719e1fb88a408a82ea22d955197476770c7b4ca", "message": "Merge pull request #6289 from degasus/arb_mipmap_for_upscaled_textures\n\nVideoCommon: Apply custom texture scale for arbitrary mipmaps."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/cb7eede193b1644b58fdfaf03925d483832dddae", "message": "VideoCommon: Apply custom texture scale for arbitrary mipmaps.\n\nWe want to get the same mipmap level. And if the IR and the custom\ntexture upscaling fits, we don't need to modify the LOD bias."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2a43f41acec1d79865f3a1c4e951eaf766d0fec1", "message": "Merge pull request #6297 from JosJuice/custom-texture-arb-filename\n\nTreat custom textures with \"_arb\" suffix as having arbitrary mipmaps"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/56d74d65d0003bb0f5833e8b039579e58d50fa98", "message": "Merge pull request #6298 from 34will/feature/Android_Single_Char_Fix\n\n[Android] Fix for single char name for Wii and WAD Games"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b93ae142724f07cb9664a92b55887557dbb7d8ee", "message": "Merge pull request #6300 from JonnyH/WIP/glsl-es-implicit-int-float-conversions-in-gpu-texture-decode\n\nGLSL-ES doesn't allow implicit int/uint conversions"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/41fe276323f9f4759c546f78a8735bfa6422a6a3", "message": "Merge pull request #6295 from 34will/master\n\nYes/No Dialogs for Android"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a1467f0e5a1ba53e712a003d9f38dea8534df303", "message": "Merge pull request #6282 from mahdihijazi/replace_file_browser\n\n[Android] Replace current file browser"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/22f469697b722c90608d0e899cae87670a5d49e4", "message": "Merge pull request #6290 from JosJuice/invalid-aspect-ratio\n\nTreat invalid aspect ratio setting values as Auto"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/29e8806d09c98bb0a93419115df60adec2b902f2", "message": "Merge pull request #6268 from degasus/xfb_copy\n\nVideoCommon: Apply the yscale as upscaling of the XFB."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/56d153f54865ad22816e01e9353327cc0301f41c", "message": "VideoCommon: Apply the yscale as upscaling of the XFB."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/dc08b73db19b8d59ec9ba373a4fb8d7d8639c9e3", "message": "Merge pull request #6141 from JonnyH/WIP/shader-framebuffer-fetch2\n\nImplement dual-source blending in shader"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1cf1e7cde07abf5642c48da1f9a0f82b99b9de24", "message": "Merge pull request #6286 from JosJuice/game-list-cache-vector\n\nDolphinWX: Speed up in-memory operations on game list cache"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/11976526d11f0475a3af126758260cdd69dd2a35", "message": "Merge pull request #6283 from JosJuice/qt-vs-launch\n\nFix launching DolphinQt2 from Visual Studio"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ff8893b1a981b1506cd3336da92eb75a1b0a0c82", "message": "Merge pull request #6277 from vladfi1/surfaceless_egl\n\nSurfaceless egl rendering."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e705d433126e00e3dc39e7a25a182fcd3b555a2b", "message": "Merge pull request #6270 from mahdihijazi/suppport_restore_state\n\n[Android] Support restore emulator state"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/075a2269611c0cc529e4a70404ce122b9517f215", "message": "Merge pull request #4437 from sepalani/d3d11_fix_debug_build\n\nMAX_XFB_HEIGHT: PAL value off by two fixed"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/cb168b184386f169aeb828f660ac63c5bc3e540c", "message": "Merge pull request #6134 from ligfx/soundstreamlifecycle\n\nSoundStream: change Start/Stop lifecycle to Init/SetRunning/destruct"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3daeb6b970c3c51ac3f67fca390a691a804a884e", "message": "Merge pull request #6266 from iwubcode/fix_pal_vertical_scaling\n\nFix PAL vertical scaling"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/dcac455a16abf034d565ff123a18c6178ef25883", "message": "Merge pull request #6256 from JosJuice/scaled-xfb-copies\n\nOnly use the \"Scaled EFB Copy\" setting for EFB, not XFB"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5006ac5c518a4e52599e09eb5fc80010d25c2c01", "message": "Merge pull request #6262 from linkmauve/no-shadow\n\nRename constructor parameters to avoid shadowing members"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/873e7370a8b427545e4e95168fa10d70a71f7d6e", "message": "Merge pull request #6231 from linkmauve/intensity-efbcopy\n\nReimplement EFB copy for intensity formats"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0bf24f549a2cc6146e138bd03dd1338689d96b3f", "message": "Merge pull request #6190 from JosJuice/is-trivially-copyable-vs\n\nRemove IsTriviallyCopyable hack for VS"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f5477036604d5ee6a2b9a0d3e315c66cce07fc55", "message": "Merge pull request #6224 from hackbar/input-fix-moga\n\nAndroid: Handle missing mappings for the Moga Pro 2 HID controller."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ed13a8d7a7a43e4a6869fd4de6fcad641a1e66be", "message": "Merge pull request #6255 from JosJuice/strerrorr-detect\n\nHandle both the XSI and GNU versions of strerror_r"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5afd07c03386e15514ad218252aa7d9c4f79444e", "message": "Merge pull request #6254 from iwubcode/frame_counter_and_advance_fix\n\nVideo Common: frame logic fix"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/685df1fdf7a6e538718479893182af88e9007796", "message": "Merge pull request #6260 from JosJuice/android-hybrid-xfb\n\nUpdate Android GUI settings for Hybrid XFB"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9f9b4bc0286a79f7b3d15fa11b1c5e2a70eb1b81", "message": "Merge pull request #6259 from mahdihijazi/java8\n\n[Android] Enable Java 8 features in Dolphin Java code base"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/49a55e0a930f866fbca12a0e83b7e9d60beebdbf", "message": "Merge pull request #6252 from JonnyH/WIP/gles-gpu-texture-conversion-fixes\n\nFix GLES GPU texture conversion shader"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a70c03a1c0a6fce6724a323db3bdc41d8b905090", "message": "Merge pull request #6249 from stenzek/texture-dump\n\nTexture dumping regression fixes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/eb1ae383041ed849ea696e473e8156f3b70dcfa8", "message": "Merge pull request #6027 from JonnyH/WIP/chained-signal-handler-android-debuggerd\n\nCall the previously-set sigaction in fastmem handler if it's not our fault"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/aeaca502f0b7b205ed0bac7bf8a7539ebc15008a", "message": "Merge pull request #6248 from JonnyH/WIP/fix-arm64-MOVI2R-values-between-2gb-and-4gb-of-pc\n\nFix arm64 MOVI2R for addresses between 2gb and 4gb offset from PC"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d243b2c0a87ffe8374a7f7d2b1eb30273c1626a2", "message": "Merge pull request #6244 from tramzel/android_analog_triggers\n\n[Android] Add support for true analog triggers."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/02dd062518aba4aabe39f588d6c23d85db834a8d", "message": "VideoCommon: Drop now unused efb2tex matrix generation."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/cde02b5b5f5d300d9a5cb04233aee5e45b42bc93", "message": "Merge pull request #6239 from stenzek/d3d-videocommon-efbtotex\n\nD3D: Use VideoCommon EFB-to-Texture Shaders"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/30b5cbcb0267372ee20c8ebeb08e4b16bacf4a7c", "message": "Merge pull request #6235 from lioncash/reorder\n\nWiiSaveBanner: Resolve a -Wreorder warning"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0e8c883b24baec63c5e9973685cdcdb8afbf03d2", "message": "Merge pull request #6236 from lioncash/missing-decl\n\nOGL/TextureConverter: Resolve -Wmissing-variable-declaration warnings"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8bcc392d5d2285b2bf1c26942ecedcb0672e8bc4", "message": "Merge pull request #5887 from linkmauve/alpha-fix\n\nSimplify EFB copy shaders"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/4c48cc6757a17c3bea3b25a108038466d56f9331", "message": "Merge pull request #6230 from leoetlino/warning-fixes\n\nSmall warning fixes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/76fbdbb06e27e3cf408cfac38a5933eafd43d189", "message": "Merge pull request #5903 from linkmauve/fix-mp2e\n\nRound values in swizzlers"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7498d80a6fe8aced9449e537c3a63203247aba09", "message": "Merge pull request #5882 from degasus/efb2tex_copies\n\nUse VideoCommon shader generators for efb2tex copies."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e2a9ee384f737b78f55a1bdd56e928bd33d802ba", "message": "VideoCommon: Rename TextureConversionShader namespace."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e8febd0cef02c205b77ab6fdb7af33da59ce59cc", "message": "VideoCommon: Create a namespace for TextureConversionShaderGen."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/491c10ec96e4cb58724f0768a76e0cece63f2b07", "message": "VideoBackends: Use VideoCommon shader generators for efb2tex copies.\n\nThis will generate one shader per copy format. For now, it is the same\nshader with the colmat hard coded. So it should already improve the GPU\nperformance a bit, but a rewrite of the shader generator is suggested.\n\nHalf of the patch is done by linkmauve1:\nVideoCommon: Reorganise the shader writes."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/96e094e127b2abd72c06d7803f5d8ee8e7ad8aa0", "message": "Merge pull request #6216 from stenzek/headless-frame-dumping\n\nOGL: Fix headless frame dumping"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9178a6e636b080c6dc97835f35eac0e3719eeac8", "message": "Merge pull request #6197 from degasus/GP\n\nJit: Optimize gather pipe usage."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/40ed0e4251097edcfd21a6d1dd641e6f6001ad86", "message": "Merge pull request #6198 from lioncash/cmake\n\nD3D: Remove non-existent files from CMakeLists.txt"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6205", "title": "hacky GP exception handling", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4108", "title": "StringUtils: Rewrite ToString and TryParse to use more templates.", "body": "Also apply this logic to IniFile.\nAdds an unittest test for TryParse(ToString(x)) == x.\n\n~~Bad luck, template selections seems to be harder, so we need a lot of std::string(\"whatever\")~~\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4108)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4105", "title": "[WIP] MMIO: Add MMIO Debug handler to dump all MMIO usages.", "body": "This PR tries to give an easy way to dump all MMIO usage of a few register.\nIn non-debugging contexts, this PR has no effect.\n\nDo you think it's worth to have such a framework in master?\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4105)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/2551", "title": "[RFC] Options", "body": "The first commit extends our IniFile library to support options in a DoNotRepeatYourself style.\nThe second one is an example usage for the video config.\nThe third commit touches all GameInis with a projection hack. The projection hack had no group and is moved to Video_Hacks now. Also the ini option which matches the default values are removed.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/2551)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33482306", "body": "They don't export it in any way for OpenGL. So we could fetch it from registry or nvapi.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33482306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33484075", "body": "neobrain: tbh, I don't think this will matter. All users will ask why they have a black screen and the usual answer will be \"update your driver\". Some guys may change this flag and wonder afterwards why they get a wrose performance.\n\nimo only this guys matter who can't upgrade their driver. As only 33X driver support ogl4.4 at all, I don't see why anybody shouldn't be able to upgrade.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33484075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33485110", "body": "waddlesplash: glxinfo | grep ARB_buffer_storage ?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33485110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33505903", "body": "\"AFAIK there have been stability issues with recent drivers\" -- this one bothers mich today, but here is a good news: All drivers exporting ARB_buffer_storage are known for this stability issue. So the fallback one isn't affected.\n\nIf \"the common\" think such an option is needed, I'll create it (ini only?). But imo it isn't needed\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33505903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33681721", "body": "In which way do we want to fix the videosw issue?\na) use more of the common vertexloader, but so we'd have to convert everything as the videocommon vertexloader wants to and fix it afterwards\nb) complete fork vertexloader. I've done the first step (for positions): http://pastie.org/8681971 -- Please don't see this patch as ready for merging, it's poc\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33681721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33690830", "body": "hrydgard: yeah, I'm also thinking about forking our videosw based on the hardware api. So it likely will be a)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33690830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33699359", "body": "Please don't accept this one until HdkR confirm it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33699359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33884191", "body": "neobrain: updated\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33884191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33884399", "body": "delroth: updated\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33884399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33894704", "body": "lgtm. @delroth: This isn't just a fix for fifo player, it's change the behavoir of disabled xfb (which is a hack, yeah) of videosw like it's done on the hardwarebackends.\n\nbtw: fixing the fifoplayer _will_ also change the dff format. It won't be possible to render all those current fifo logs in the issues any more without such a patch.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33894704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34074414", "body": "opened too early. There are other changes in the same way. I'll reopen when I think I'm done\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34074414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34076560", "body": "Updated with the AtomicStore/AtomicLoad ones, if they don't work, we should fix them.\n\nBut do we need a MemoryBarrier between the two calls SizzlingCalamari has pasted?\n\nSorry I don't know how to do threaded code. If you want, I'll change it back to the volatile one like all other audio backends.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34076560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34105485", "body": "NACK, this won't work at all. grep -q | grep is useless ;)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34105485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34172806", "body": "updated with std::atomic, so imo this branch is ready for merging.\n\nFor history: The first PA backend used the simple (push based) api. This was changed to use this async api for volume control, but without using callbacks. So it was basicly the same code flow but with a more complicated api. This was reverted sometimes to use a nicer api.\nSo I'll use the async api again, but this time in a callback way.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34172806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34239113", "body": "I like the logic change, but the names of this extensions are too often c&p. I'll try another proposal tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34239113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34383511", "body": "I store the return value of every non-void call in m_pa_error. If this error flag is set, we will break both on connection with the pa server and in the mainloop.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34383511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34561093", "body": "Smell like a hack, but the only clean solution I know about is also much uglier:\nsuccess = GrepFunction(...) && success;\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34561093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34586629", "body": "I think we have to discuss how much time we allow the emulator to fall behind without to restart the throttling. This will allow to have some small shutters (eg for shader compilation) without audio shuttering, but it will increase the audio latency.\n\nMy proposal: 40 ms, so it would allow a complete frame on 25 fps games.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34586629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34622803", "body": "Tested by JMC47. I've applied the rounding of the fps/vps in the titlebar.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34622803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34784444", "body": "https://forums.dolphin-emu.org/Thread-green-notice-development-thread-testing-of-audio-latency-fix-branch\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34784444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028238", "body": "So, shall I disable the stripping on windows or shall I fix it to strip for '\\'?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35153278", "body": "There are lots of float->integer converstion in the code:\nint myint = int(myfloat);\nBut everytime we've calucate anything with the float, we must round to get the correct result:\nint myint = int(round(myfloat));\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35153278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35165985", "body": "Hm, so I'll prefer to check this in the backend itself. I don't think this is forbidden on GL.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35165985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35181295", "body": "thx for fixing my code :D\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35181295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35217865", "body": "As nobody has answered, I've decided to disable this on windows.\n\nReady for merging?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35217865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218721", "body": "Log messages include the filename of the source file, eg:\n37:09:903 /home/markus/projects/dolphin-emu/Source/Core/DolphinWX/GLInterface/GLX.cpp:82 N[Video]: glX-Version 1.4\n\nAs cmake generates makefiles which uses absolut paths, `__FILE__` will be this absolute path.\nOn Visual Studio, `__FILE__` is the relative path, so here, it would be (bad example):\n37:09:903 GLInterface/GLX.cpp:82 N[Video]: glX-Version 1.4\n\nimo the Visual Studio log is fine, but the cmake one is scary. So this isn't system, but compiler depened.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35396506", "body": "neobrain: I full agree\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35396506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35623923", "body": "I've renamed the \"Core::isTabPressed\" flag to \"SConfig::m_ThrottleDisable\". If this better now?\n\nThere is still no setter/getter function, but I don't see why making such functions is cleaner than just sharing the boolean itself.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35623923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35633771", "body": "neobrain: I've tested this on linux only. Here configuring tab as hotkeys + the hotkey itself works fine. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35633771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6194441", "body": "tbh, I don't know what I've done wrong. My change to OnKeyDown was trivial :/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6194441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6361531", "body": "https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61214\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6361531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766588", "body": "@CarlKenner Why 3d texture? Just add an additional step afterwards to merge this two images as you want and you'll get a Dolphin VR without any slowdowns compared to master.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766751", "body": "@CarlKenner Only a bit, likely not noticeable. This way to render still has (a bit more than) the double GPU effort, but as long as your GPU is fine (don't play at 4xIR in stereo on a consumer GPU...) there is no additional slowdown. The old DolphinVR implementation did switch the framebuffer twice on every draw call, this was a huge CPU overhead within the driver.\n\nBut indeed, this commit makes some of your 3d patches obsolete, but I think it's worth to port DolphinVR over to this technic. So it's basicly:\n- port your projection matrix hacks into the current geometry shaders (it must be switch-able within the shader to not split the draw calls)\n- write a postprocessing step which seperate this texture array into two textures. This is likely just two glBlitFramebuffer with some binding calls before\n- have fun playing lots of games fullspeed on a consumer CPU\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766858", "body": "Nice idea. Haven't thought about this way to save one framebuffer binding call :D\n\nYeah, I see porting your patches to this framework is lots of work. but I hope you'll succed on the task.\n\nThe new requirement is basicly geometry shader aka OpenGL 3.2. It should be supported by every GPU we support right now. Geometry shaders are a hard dependency for all DX10 GPUS which we already require for integer shaders. But bad luck, some drivers doesn't offer this:\n- intel sandybridge on windows ( the hardware is able to, but the driver just doesn't expose it)\n- some rarely used mesa drivers (most of them already support 3.3 for half a year)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8769884", "body": "@penkamaster Look in the video ini, there is an option for it. But don't expect it to be feature complete\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8769884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8987397", "body": "optimize for the common case:\nif (current_primitive_type != PRIMITIVE_TRIANGLES)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8987397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9384450", "body": "This segfaults here on linux:\n#0  0x00007fffec908453 in std::string::append(std::string const&) () from /usr/lib/libstdc++.so.6\n#1  0x00000000007a38fc in operator+<char, std::char_traits<char>, std::allocator<char> > (__rhs=<error reading variable: Cannot access memory at address 0x2e019bf>,\n\n```\n__lhs=<unknown type in /home/markus/projects/dolphin-emu/build/Binaries/dolphin-emu, CU 0x26d4fb4, DIE 0x26e6090>) at /usr/include/c++/4.9.2/bits/basic_string.h:2451\n```\n#2  InputConfig::LoadConfig (this=this@entry=0xce2d80 Pad::s_config, isGC=isGC@entry=true) at ../Source/Core/InputCommon/InputConfig.cpp:73\n#3  0x00000000005ede87 in Pad::Initialize (hwnd=0x2e019d7) at ../Source/Core/Core/HW/GCPad.cpp:45\n#4  0x00000000005a037b in Core::EmuThread () at ../Source/Core/Core/Core.cpp:369\n\n(gdb) up 2\n#2  InputConfig::LoadConfig (this=this@entry=0xce2d80 Pad::s_config, isGC=isGC@entry=true) at ../Source/Core/InputCommon/InputConfig.cpp:73\n\n73                  profile_ini.Load(File::GetUserPath(D_CONFIG_IDX) + path + profile[n] + \".ini\");\n(gdb) print profile\n$1 = {\"\", \"\", \"\", \"\", \"\"}\n(gdb) print n\n$2 = 11\n(gdb) print controllers\n$3 = std::vector of length 12, capacity 16 = {0x7fffd03c0a40, 0x7fffd094c5c0, 0x7fffd094d9c0, 0x7fffd094ee20, 0x7fffd084dd90, 0x7fffd08907a0, 0x7fffd084e040, 0x7fffd0890720, \n  0x7fffd07f0fc0, 0x7fffd07f0f40, 0x7fffd07e4790, 0x7fffd07e4810}\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9384450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619264", "body": "The uploading part is already done before. This commit does remove the invalidation of this flag. But so we have to update this cache instead.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619281", "body": "Yeah, I'll do this once the regression is fixed. Through this code will get another rewrite after PR #1992 is also merged.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619547", "body": "Likely, but I've tried to update the cache in the same way as we write into the framebuffer in line 1141.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12664096", "body": "This breaks real wiimotes on linux :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12664096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13064979", "body": "Can you please replace your WARN_LOG with DEBUG_LOG? WARN_LOG is enabled on release builds and so it shouldn't be used for general debug messages.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13064979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13394769", "body": "Nope, this is a bug.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13394769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931531", "body": "if (available_ticks >= 0)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931539", "body": "This is a race condition\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931547", "body": "either the fifo is empty, or we ran out of ticks. So if there are still ticks, the fifo must be empty.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17480406", "body": "@Linktothepast Do you have any idea here? https://forums.dolphin-emu.org/Thread-emulate-format-changes-for-kirby-air-ride\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17480406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17480564", "body": "Oh, \"toggle fullscreen\". This should have no effect on emulation, so more likely timing. Flipping flags because of timing is usually a bad idea.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17480564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "stenzek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6a002a493812e451762bd3babbbd695760c28413", "message": "Merge pull request #6312 from spycrab/qt_vulkan_resize\n\nQt: Fix render window resize bug"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ce0c699b6605a1d103b6434bc28d20d161040904", "message": "Merge pull request #6246 from stenzek/vulkan-readback-fixes\n\nVulkan: Fix MSAA regression from 5.0-5968"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/4997fbce44f9d092c503ce34f92faafb1af1dd44", "message": "Vulkan: Fix possible mismatch between EFB framebuffer and render pass\n\nThis could happen when changing MSAA settings or internal resolution at\nruntime."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/05257263381c0db9e42f8911cd4c9068fe593ab8", "message": "Vulkan: Move pipeline barrier outside render pass for EFB peeks"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/48a8063cd5e0b6bce6d152ea8b2bd213bb954244", "message": "Vulkan: Fix FramebufferManagerBase::m_EFBLayers being set out-of-range"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/173a33886c72304aea923382ec114679dcad6ba4", "message": "Vulkan: Move render pass management to ObjectCache"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0e50b2c9f23c71f25866a1d4d14ea1b1b8a36e7d", "message": "Vulkan: Add missing layout transition when resolving MSAA depth buffers"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6a4e3cb3d609060191992b0fc71e849338ea57d6", "message": "Merge pull request #6250 from JonnyH/WIP/fix-ubershader-gles-int-uint-conversion\n\nFix an invalid (uint < int) comparison in GLES with ubershaders"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2579f8eaa5baf308a2eeafce172628d8264ee402", "message": "TextureCache: Don't dump custom textures\n\nThey don't have a basename, therefore were being saved to empty files, and potentially can be compressed."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5f5aca7870ead6a35e5c6cd234f526489d3f4b57", "message": "OGL: Fix incorrect usage of glGetTextureSubImage\n\nWas causing issues with texture dumping on newer drivers."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9d246800c2a9baea00b643e2f48bf213a8834a30", "message": "Merge pull request #6227 from degasus/efb2tex_copies\n\nVideoCommon: Drop now unused efb2tex matrix generation."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d0601c0a8372780ae3412d25bf81561d23e89ac1", "message": "TextureConversionShader: Use round() instead of roundEven() in HLSL\n\nHLSL does not define roundEven(), only round(). This means that the\noutput may differ slightly for OpenGL vs Direct3D. However, it ensures\nconsistency across OpenGL drivers, as round() in GLSL can go either way."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e0ffce27854e179025f98542ba2d4843f1e2161c", "message": "D3D: Use VideoCommon EFB-to-texture shaders"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/beb35320f6d73d063ad7b957692ffe591eb33c70", "message": "TextureConverterShaderGen: Make generated shaders HLSL-compatible"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0c480a7777c82c8a2e327c165c2092516446e6e9", "message": "Merge pull request #6233 from lioncash/vulkan-texture\n\n VKTexture: Remove unimplemented ScaleRectangleFromTexture() prototype"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/cd68b3606cea8a7041751bda482170533bae3220", "message": "Merge pull request #6193 from stenzek/readbacks\n\nAbstract Staging Textures - VideoCommon interface for texture readbacks/uploads"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/cf1f97514866a655f0d497ab61c9c392d83bef6c", "message": "Vulkan: Fix headless framedumping without USE_X11 set"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/32125cf1817b57f0b6eb390409ba7167a1671cf7", "message": "OGL: Fix headless frame dumping\n\nAlso skips swapping the window system buffers in headless mode, as there\nmay not be a surface which can be swapped in the first place. Instead,\nwe call glFlush() at the end of a frame in this case."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ab44536a3c5e03851a94848c8c08779d11eedf3d", "message": "OGL: Update the window size after swapping buffers, not before\n\nPrevents us from rendering beyond the viewport bounds."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7f217a8bb24da323042081a02b65f84f9ce9761f", "message": "Vulkan: Drop StagingTexture2D class as it is now duplicated functionality"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/db1d9de933a914ff0c35a179d3ba1112fb0bcab1", "message": "AbstractTexture: Drop slow map readback path"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/193763ca3ab62086c5a2f09870ffdc84cbd8ee00", "message": "TextureCacheBase: Don't crop last row/column of XFB copies\n\nUnsure why this was happening in the first place."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6577365851967d03caf1b70f440e1eee76198ebb", "message": "VideoCommon: Re-implement asynchronous frame dumping\n\nThis was lost as a result of hybrid XFB, now it is back, and ~10%\nfaster in very brief testing."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/752dd4761d292c94623b166403733847c198162a", "message": "D3D: Use new readback methods for EFB2RAM"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9da9f26b9049ab590217750d8d582590a3409754", "message": "OGL: Use new readback methods for EFB2RAM"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/59517318d6a237055bf244e05fed8ce059167e83", "message": "Vulkan: Use new readback methods for texture encoding"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c2cc128f1b6be695a4facd3c0fd697a24c3df17a", "message": "AbstractTexture: Implement Save using new common methods"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/56afebeb44f1ace990d9383e9b840fdc27610029", "message": "AbstractTexture: Seperate CopyRectangleFromTexture to two methods\n\nScaleRectangleFromTexture, which does a draw, and\nCopyRectangleFromTexture, which where possible, does a bit-for-bit copy."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f43d85921dc85ae586d69b21d28a7578835a55bd", "message": "VideoBackends: Add AbstractStagingTexture class\n\nCan be used for asynchronous readback or upload of textures."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a584ccc7d882213d93586cae9063d9865311aaad", "message": "AbstractTexture: Support BGRA8 formats\n\nUsed for some driver's swap chains, and EFB to RAM."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/49a9c33bd75df2b8cebd58eab10f140c79a8f65c", "message": "VideoCommon: Move abstract texture creation function to Renderer"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5860c97144a01c4203e98671e158086c672bcf97", "message": "D3D: Move device release from Renderer destructor to shutdown\n\nNecessary if we wish to have GPU objects in our base class, as otherwise\nthe device will be released before the objects."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c5a89b648383ee5ef3f4fe8285fbd2fcf71e3aad", "message": "D3D: Remove BeginFrame/EndFrame\n\nThese functions did not do anything anyway. There is also no need to\npresent the backbuffer when shutting down."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d9400f708a5af50a38273e25c103143968e16b67", "message": "D3D: Move remaining static variables from Render.cpp to Renderer class"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/798ec96e1447f8c21b4b774d3be9c50ed30a9318", "message": "D3D: Make state cache part of Renderer and not static"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/efb97598629b96378edd783af82936185d8a99ce", "message": "LightingShaderGen: Always calculate lighting for both color channels\n\nCel-damage uses the color from the lighting stage of the vertex pipeline\nas texture coordinates, but sets numColorChans to zero.\n\nWe now calculate the colors in all cases, but override the color before\nwriting it from the vertex shader if numColorChans is set to a lower value."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/470e8d63b645b232b6d0c58e9a2d5291ab068d3c", "message": "VideoConfig: Rename \"Full Resolution Frame Dumps\" to \"Internal\"\n\nWhat is the \"full\" resolution, anyway?"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8985cb2f0be5cbd831b537c7fa8dc15c5d7222bc", "message": "Renderer: Re-implement window size frame dumping\n\nThis was broken by hybrid XFB, and all frame dumping/screenshots occured\nat the full internal resolution."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/39559f6358acf6c3eb6395f215ccc6732fedb1dd", "message": "VideoConfig: Remove bSupportsInternalResolutionFrameDumps\n\nField is unused as of Hybrid XFB."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/18c1bf19cac3b4299c55db35117f1383a5c80318", "message": "VideoCommon: Use constant for number of color channels in XFMemory"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/175db0d817835730d10fa07e594deb3dc842fa28", "message": "Merge pull request #6206 from spycrab/qt_fix_bs\n\nQt: Fix blackscreen"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6317", "title": "AbstractTexture: Move Bind() method to Renderer", "body": "This makes state tracking simpler, and enables easier porting to command lists later on.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6316", "title": "Move guest viewport conversion to VideoCommon", "body": "Does what the title suggests. We will now be able to change viewports in the renderer without depending on the emulated GPU's state, which is useful for drawing shaded quads in videocommon.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6315", "title": "Abstract Framebuffers", "body": "Another prerequisite for moving framebuffer manager to common, and abstract pipelines.\r\nThese PRs are all dependent on another, but I'm breaking it up to (hopefully) make it easier to review.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6128", "title": "Guest Memory Locking", "body": "This PR is a huge work-in-progress, implementing guest memory page locking. I've had this around for a while, but it's at the point where it's working in at least a few games, so it's worth getting comments, ideas for optimizations, etc. There's also a lot of debugging code left in which has to be removed.\r\n\r\nThere's also a few commits that aren't directly related from my other PRs to simplify the Vulkan implementation, it's likely they will be merged before this is finished.\r\n\r\nThe idea is nothing new, it's been floating around in IRC discussions for ages, but as far as I'm aware nobody has implemented it to this level yet.\r\n\r\n**The problem:**\r\nCurrently, if \"EFB Copies To Texture Only\" is checked, we don't populate the guest memory where the copy is stored, instead zeroing it out. This leads to breakage in games which read this memory on the CPU, which is often used for object detection, visual effects, etc.\r\n\r\nIf this option is disabled, we perform the readback from the host's GPU to the guest RAM. This means the CPU has to wait until the GPU has finished rendering, introducing a synchronization point, stalling the CPU. This means large drops in FPS, depending on how many copies are happening in each frame. \r\n\r\nIt's possible the guest won't touch this RAM at all, and it is just using it for the GPU! Which means we stalled for nothing.\r\n\r\n**The solution:**\r\nIn this PR, we are essentially creating \"Lazy EFB Copies\". Instead of zeroing out the memory, we change the protection on the pages that back this memory to PROT_NONE. Therefore, if the guest does read the memory after the copy, we will get a page fault, and can perform the readback. If it doesn't read it, we can skip the readback. Well, we defer it until we know the GPU is finished rendering, and copy it then instead.\r\n\r\nUnfortunately, we can only do this at a page granularity, which means potentially up to 4KB at either end of the copy bounds will also be locked. If the game touches this region, we still still fault and have to do the readback, even though the actual copy may not have been touched. This is likely where the performance won't be as good as EFB2Tex, and we can't get rid of the option entirely.\r\n\r\nWe can use this for other things, like hashless texture caching too. Instead of changing to PROT_NONE, we can change to PROT_READ, which means if the game modifies the memory backing these textures, we will fault then, and can force a re-hash/invalidate the cache entry. If we never fault, we know the texture hasn't changed, and therefore can skip hashing it entirely!\r\n\r\n**State:**\r\nDon't expect huge performance boosts across the board yet. Some games are faster, others not so much, and may be slower than master with EFB2RAM on, due to the extra page fault overhead. Particularly around those which place copies adjacent in memory, there is still some optimization to do.\r\n\r\n- [x] Base page locking support in Memmap (is this the best place to put it?)\r\n- [x] Implement support for faulting from any thread, and executing callbacks on the GPU thread (Dual Core, AsyncRequests)\r\n- [x] Deferred EFB copies in texture cache base\r\n- [x] Abstract texture readback on D3D\r\n- [x] Deferring EFB copies on D3D\r\n- [x] Abstract texture readback on D3D\r\n- [x] Deferring EFB copies on OpenGL\r\n- [x] Abstract texture readback on Vulkan\r\n- [x] Deferring EFB copies on Vulkan\r\n- [x] Hashless texture cache (currently disabled by default)\r\n- [ ] Locking for paletted textures in texture cache\r\n- [ ] Make things generally faster!\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6067", "title": "Vulkan: Use reversed depth range in viewport", "body": "Matches OpenGL behavior and accuracy, fixes a few of these bugs. Still seems to be an issue rendering Gecko OS that I need to look into.\r\n\r\n**We need to verify that this works correctly on all drivers before merging.**\r\n\r\nI've tested the latest NV dev driver, 383.12, and it's fine here. But we should check older versions, AMD, and Intel, and add DriverDetails bugs if it does not work there.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6042", "title": "VideoCommon pipelines (\"Abstract Pipeline\")", "body": "This PR adds support for \"abstract pipelines\", graphics configurations which can be drawn from videocommon. ~~Depends on PR #5343 for the state structures.~~\r\n\r\nThe eventual is to use it for all graphics drawing, replacing backend-specific shaders/programs. Currently, support is only implemented for \"utility\" pipelines. This is the first stage, next we can replace the various shaders currently in the backend with these pipelines (e.g. texture conversion, EFB copies, post-processing).\r\n\r\n- [x] Graphics pipeline support\r\n- [ ] Compute pipeline support\r\n- [x] Utility pipeline/shader drawing\r\n- [x] Replace backend raster font with VideoCommon implementation\r\n\r\nThe next stages, replacing the shaders, will be a separate PR, to make reviewing/testing easier.\r\n\r\nThe line count looks kinda scary at the moment due to the amount of duplicated functionality. Once we drop the backend-specific code, it will drop significantly. :)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6038", "title": "Externals: Update glslang to upstream commit d004e5c", "body": "The version we were using is over a year old at this point. I'm wondering if this is related to the \"black screen\" issues that some users are reporting, since apparently it was \"fixed' when using the VK_nv_glsl extension, but regressed once we disabled it.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5019", "title": "Vulkan: Switch to using xcb instead of xlib", "body": "Been meaning to do this for a while, but kept forgetting. This PR switches the Vulkan backend to use xcb surfaces instead of xlib surfaces. This should resolve the issues with the backend not working on distributions that did not compile the loader with xcb support.\r\n\r\nFew changes:\r\n\r\n- Previously, we were leaking a display/connection every time the backend was started, this PR also fixes this behavior.\r\n- The selection of surface extension has been moved to the build system, which I feel is a more appropriate place.\r\n- I've dropped the xlib backend, if we ever need it back again it's just a matter of reverting the commit. But I've mentioned, it's unlikely that any system that is using a libX11 that is not a libxcb wrapper will support Vulkan anyway.\r\n- Improved error messages with possible solutions when startup fails.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16138754", "body": "If you're meaning the text in the readme, yeah, I suppose it could be confusing.\n\nThe requirements are a card that supports the 10_0 feature level, with the D3D11 API. Most D3D10-level cards have D3D11 drivers, even though they don't support the 11_0 feature level.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16138754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "spycrab": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/42c562afbca5ff13bfcd3c56e893894a2b1ff006", "message": "Qt: Fix render window resize bug"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/adada166031688b6ed10b993b4fe194b2bc226a3", "message": "Qt: Toggle Screensaver"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0dd52ca7abdadbf24c831bfbf9ac8f39a7627ec9", "message": "UICommon: Move screensaver code to UICommon"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/4f4021686ee10cf96c782d47742c1854689ac56b", "message": "Qt/KDE: Fix icon"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b63ec57c1e5ace830ab67f0d4779b782d08b7b21", "message": "Qt: Connect debugging widgets"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8795b342d101a370d314a8b600d38ff1512ec1d4", "message": "Qt/Debugger: Implement \"Breakpoints\" window"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/08716be43bbefe29ec6fe2a08a88439278746006", "message": "Qt/Debugger: Implement \"Watch\" window"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ec37ce093f5349a785d056958a187f5391322b4c", "message": "Qt/Debugger: Implement \"Registers\" window"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2a19ccf806e79f5d712c2b141a6353bc87be8c38", "message": "Qt/InterfaceSettings: Add \"Show Debugging UI\" option"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ff283ff912fab0f7a6abfd0f98256e112e8dba88", "message": "Qt/Settings: Add debug mode flag"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/474b1c2d5c8a8b48274f15ea7140b3e8ddc50c6a", "message": "Qt: Implement FIFO Player"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/aa8bf7133319ac3a02ca621d81021b96b63514cf", "message": "FifoRecorder: Implement IsRecordingDone()"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/aac1b386b96a1015b7b1e9443273114e2f7b0aec", "message": "FifoPlayer: Implement IsPlaying()"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9388852e05abea3ec041ee96f814c8092ae0cd35", "message": "Qt: Fix blackscreen"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6287", "title": " Qt/Settings: Implement \"GameCube pane\"", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6279", "title": "Qt: Implement \"AR Codes\"", "body": "*Screenshots:*\r\n![Window A](https://i.imgur.com/XN0GRCO.png)\r\n![Window B](https://i.imgur.com/mQ0gQay.png)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JosJuice": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2441fd28d578fb6984a6cab494ccd96cc4ebfb02", "message": "AVIDump: Remove incorrect usage of s_ prefix"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/83870fbcf062f546bf9ea1fbe4654a7e06cc1d1d", "message": "Use \"implementation\" for all dependencies in build.gradle"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/226b65bd38eb9a92cc7d151df718214dc854ec70", "message": "Clean up variable naming in HiresTextures::Update"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c25fffc9a064851bd93c4b82fdd25e41a4975961", "message": "Treat custom textures with \"_arb\" suffix as having arbitrary mipmaps\n\nThis is adapted from Bighead's code that was posted at\nhttps://forums.dolphin-emu.org/Thread-dolphin-custom-texture-mipmaps?pid=460867#pid460867\n\nIn master, custom textures are never treated as having arbitrary mipmaps,\nso we need either a change like this or a change that makes us apply the\narbitrary mipmap heuristic even when a custom texture is used."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1557e6ab05294c65253ca60774c332cfe9659191", "message": "Specify underlying types for enums that get casted from integers\n\nOtherwise we might get UB if the value we cast is larger than the\nmax value of the underlying type that the compiled picked for the enum.\n\nI haven't done any extensive check through Dolphin to find cases\nof this, I'm just fixing the cases I already know of."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a2404c42a16e808952471e219cf25d4b1bedb05d", "message": "Treat invalid aspect ratio setting values as Auto"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6ad04fc58973837b51c8c06012f61511dcbe63b5", "message": "Merge pull request #6288 from JosJuice/boot-savestate-thread\n\nDon't involve host thread when booting from savestate"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/af51063a9a357074e9cec4ffee6b8ac9f7a8cf52", "message": "DolphinWX: Rewrite the logic for adding/removing games from cache\n\nThanks to degasus for coming up with most of this faster design."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c492a5a86a46a2950a4833ccfa3e862452253679", "message": "Don't involve host thread when booting from savestate\n\nSuggested by https://github.com/dolphin-emu/dolphin/pull/6271#discussion_r159868704"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/04cefc6ed343a1c20ed5b54e25f06d6b43ba3fbe", "message": "DolphinWX: Use vector instead of list for game list cache\n\nThe advantage of std::list is that elements can be removed from the\nmiddle efficiently, but we don't actually need that, because the\nordering of the elements doesn't matter for us. We can just replace the\nelement we want to remove with the last element and then call pop_back.\n\nReplacing list with vector should speed up looping through the elements."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e44b64b82c240342e72b6c8e425b03d97554008d", "message": "DolphinQt2: Don't use a mutex in GameFileCache\n\nGameTracker's usage of GameFileCache is thread-safe even without\nusing a mutex. All of its access to GameFileCache happens on the\nthread m_load_thread, except for the call to GameFileCache::Load,\nwhich finishes before m_load_thread starts executing."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9988652d86ad2e0d35db236b92e9feb4259f6d78", "message": "Fix launching DolphinQt2 from Visual Studio\n\nStarting with 5.0-5504, trying to launch DolphinQt2 from Visual Studio\nshows the error message \"The operation could not be completed. Undefined\nerror\" instead of launching the exe file. (The exe gets created\ncorrectly, it just doesn't get launched. It's possible to work around\nthe problem by launching the exe manually outside of Visual Studio, but\nthen you won't have an attached debugger automatically.) This commit\nfixes that by removing headers from DolphinQt2.vcxproj's ClInclude list\nthat already are in the QtMoc list. (The problem was originally about\nLogWidget.h and LogConfigWidget.h, but 5.0-5600 made the problem be\nabout CheatWarningWidget.h and GeckoCodeWidget.h instead.)"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a4be51109c21df3b7b3e5ce3382116fc39a7766a", "message": "Translation resources sync with Transifex"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/82a6701f795a883d80c3b0167b4d3f3e224a5cd8", "message": "Optionally delete savestate that gets loaded at boot"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b921f6cdefe9b05359a885e790ed860b4eaf256f", "message": "MainAndroid: Don't set User directory redundantly"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3e6e66b0d9a1f35dd3032a6d7728123d9c270c44", "message": "Android: Don't return anything from HandleInit\n\nIt only ever returned false."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d8f10ba177dffbb78d82eb7d441b4e3fcf412196", "message": "Android: Always run HandleInit logic on app start\n\nNote: By \"HandleInit\" in this commit message, I mean the code that is\nin HandleInit in master except the part that launches EmulationActivity.\nIn other words, I mean the call to SetUserDirectory and the call to\nDirectoryInitializationService.startService. Couldn't think of\nsomething more accurate to call that than \"HandleInit\"...\n\nIn master, HandleInit only runs when the main activity is launched.\nThis is a problem if the app ends up being launched in some other way,\nsuch as resuming EmulationActivity after the app has been killed in\norder to reclaim memory. It's important that we run HandleInit, because\notherwise the native code won't know where the User and Sys folders are.\n\nIn order to implement this, I'm dropping the ability to set a custom\nUser folder in an intent. I don't think anyone is using that anyway.\nIt's not impossible to support it, but I can't see a way to support\nit that doesn't involve something ugly like having code for calling\nHandleInit in every activity (or at least MainActivity + TvMainActivity\n+ EmulationActivity, with more activities potentially needing it in\nthe future if we expand the usage of native code for e.g. settings).\nIf we want to support setting a custom user directory, we should\nconsider another way to do it, such as a setting that's stored in\ngetFilesDir() or getExternalStorageDirectory(). Intents are intended\nto control the behavior of a specific activity, not the whole app."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f9a05119370dbc3a261cda61d97b17c261db7b0b", "message": "MainAndroid: Optionally wait for savestate to finish writing"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/87957fadddfa95386f46aea6baac8ad65a92c7d5", "message": "MainAndroid: Allow specifying savestate to load at boot"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a81cbf60fb14dc5b7e213f2e847c51fe5026c249", "message": "MainAndroid: Add wrapper for Core::IsRunning"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d9dd21073926b12df1cbabc92d9db564887186a3", "message": "MainAndroid: Allow specifying path for savestates"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1df69c57507dbeea638eceac1c7410b737f1739c", "message": "Merge pull request #6051 from JosJuice/android-sys\n\nAndroid: Extract Sys to a different folder than the User folder"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9dd88d76dd1b6fa06b2d3702e39d2773424f6417", "message": "Redesign the ability to load state at boot\n\nBootParameters can now contain the path of a savestate to load at boot.\nMovie has been made to use this instead of poking at Core.cpp's state."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/152f7fa35c0647f5203bf644959291bbaebd0f3c", "message": "Android: Fix race condition with writing files before setting User path"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3262314435bb394d27aa3e1f490905e6868e4203", "message": "Android: Don't extract Sys if it already is extracted"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b3b7aef09a99eb10ce73a9a625654c69c74cf7bc", "message": "Android: Extract Sys to a different folder than the User folder"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ac18cffcaba8590baea2c7541f9c615a6b29992a", "message": "DolphinQt2: Don't crash when trying to play without a game selected"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d1c1793a342c61c2e04ca19136fa2ecf50d34898", "message": "Don't expose SYSDATA_DIR in a header"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/bfa7c14fef480d02e9cf614af590fedae1867f5f", "message": "Merge pull request #6258 from mahdihijazi/extract_service\n\n[Android] Refactor AssetCopyService and the way we extract resources \u2026"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/bedc8149230d22ab06cc8050e1f91469247e315d", "message": "Merge pull request #6267 from mahdihijazi/gc_pad_settings\n\n[Android] Fix a bug when you open the gc pad settings after fresh install"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f41273fe79fb3cc81bb034e9f325328f0ceab006", "message": "GameConfigLoader: Map whole sections, not just individual keys\n\nThere are two reasons for this change:\n\n1. It removes many repetitive lines of code.\n\n2. I think it's a good idea to enable the use of old-style section\nnames even for settings that previously haven't been settable in game\nINIs. Mixing the two styles in INIs (using the new style only for new\nsettings) is not ideal, and people on the forums don't even seem to\nknow that the new style exists (nobody knew a way to set ubershader\nsettings per game, for instance). Encouraging everyone to start using\nonly the new style might work long-term, but it would take take time\nand effort to make everyone get used to it. Considering that this commit\n*reduces* the amount of code by adding the ability to use old-style\nnames for more settings, I'd say that adding this ability is worth it."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5296ee6d3dce29a2ac4901b1dd698f1466aeab97", "message": "Reduce the indentation level of MapINIToRealLocation"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/06e25d1b4a0276cfe50b6f27b3a415e740d30658", "message": "Fix default value for Show FPS in Android GUI\n\nhttps://bugs.dolphin-emu.org/issues/10728"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a3355a3e4aad867cf5ebc03c12134b8961d39e3c", "message": "Only use the \"Scaled EFB Copy\" setting for EFB, not XFB\n\nThe hybrid XFB PR made it apply to both EFB copies and XFB copies."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/bd5da5cfd60d2d2321579800ed62471a4a663e88", "message": "Handle both the XSI and GNU versions of strerror_r\n\nTrying to force the XSI version by undefining _GNU_SOURCE can lead\nto compilation errors on some systems because of headers expecting\nthat _GNU_SOURCE is defined.\n\nThis commit uses define checks to detect which version we have.\nI tried making an overloaded function (int and const char*) instead,\nbut that led to a warning about one of the variants being unused."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/4973ae9952f63fd21ac034da00611a831c3ab2ee", "message": "Rename GFX_HACK_COPY_EFB_ENABLED to GFX_HACK_COPY_EFB_SCALED\n\nNot sure why it was named like this... It doesn't affect whether\nthe copy happens or not, only what resolution it uses."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/acee8b1e234d0d21a25a971bb499d878fec1ef04", "message": "Update Android GUI settings for Hybrid XFB"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ba01642dc78a44126b334d7ff4d3ceae5fec7902", "message": "Translation resources sync with Transifex"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/be7f212dd09553048ea37ec7cc808921354e31d2", "message": "Merge pull request #6245 from lioncash/missing-decl\n\nDolphinWX: Resolve missing declaration warnings"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9d8a82e1d9d945d68b17adab1aff34c96aeda003", "message": "Don't use wrong encoding for paths when opening streams on Windows"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f68956a61473347f503b34a9422eef1173aa74f8", "message": "Merge pull request #6232 from lioncash/d3d-vert-mgr\n\nD3D/VertexManager: Add missing includes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c4db59e7b6b2a5ac7f265e4362d54ba1fa633526", "message": "Clarify the \"Select the OTP/SEEPROM dump\" message\n\nMost users don't know what OTP/SEEPROM means."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/05879875f6b6c19c55411c09af7f930991cda919", "message": "Make USB keyboard input respect the background input setting"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2b2941d0c9274ea04a2f6c5f816f2bf804d25407", "message": "Translation resources sync with Transifex"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6344997fad69b82881cf83d24a41b5573bd71c72", "message": "Don't forcibly enable immediate XFB in game INIs\n\nForcing people to use hacks is a bad idea in general, and there are\ntwo practical problems with doing it for immediate XFB in particular:\n\n1. It breaks the GC IPL, which some users run when launching games.\n\n2. Competitive players don't necessarily want the lowest possible\n   latency - they might want the latency that's the closest to console,\n   so if they're playing locally with a low-latency monitor, they might\n   not want to use immediate XFB. (This isn't a theoretical concern -\n   I've seen Melee players want to increase their latency.)\n\nBesides, it feels arbitrary that just these five specific games should\nhave immediate XFB forced on."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b3b58b586c798c6f5ff36e0ddfce1120d06b3c2a", "message": "Merge pull request #5943 from leoetlino/features\n\nIOS: Check for available features when adding devices"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d0b9923b0ab4727e054e23356d34c7db7b660aeb", "message": "Move XFB settings in DTM header back to where they were\n\n7f0834c9 moved the locations of the Real XFB (now XFB to RAM) and\nDisabled XFB (now Immediate Mode) settings. There are programs\nother than Dolphin that parse DTM headers, so this is not good.\n\nNote that Immediate XFB actually is the inversion of Disabled XFB.\nI hope that's not too much of a problem..."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b8c83dd5f39b0b7667843596f35fb744082a8cea", "message": "Merge pull request #5973 from ligfx/renamefifoqueue\n\nRename Common::FifoQueue to Common::SPSCQueue"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2ead31c7697cb2e25e3fca4bd9d492cb66f93342", "message": "Merge pull request #6203 from lioncash/missing-braces-warn\n\nVideoCommon: Resolve -Wmissing-brace warnings"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2385a03c2baa5f4d1d65f9af86801f624a59a988", "message": "Merge pull request #6201 from lioncash/headers\n\nVideoBackends: Remove header inclusions made unnecessary with Hybrid XFB"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/4c23516b1671a61319d47edbb1c3b4bf069d289f", "message": "Merge pull request #6202 from lioncash/reorder-warn\n\nAbstractTexture: Remove a redundant constructor initializer list entry"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7372bb02b522e35d6f1c1b6f9a9c27e2707417ee", "message": "Merge pull request #6200 from lioncash/discio-warn\n\nVolumeGC: Correct printf specifier in LoadBannerFile()"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6318", "title": "Tweak Qt debugger strings to be more translation friendly", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6291", "title": "Replace usage of SOIL with libpng", "body": "This is a rebased and improved version of PR #4575. Just like that PR, it replaces the usage of SOIL in the custom texture loading code with libpng, and then removes SOIL from Dolphin entirely. But unlike when that PR was made, we now have the ability to load DDS textures without SOIL thanks to PR #5279, so the formats that are supported after this PR are PNG and DDS. Practically every texture pack only uses those two file types, and those two file types are the only file types that Ishiiruka supports.\r\n\r\nFor reasons to stop using SOIL, see PR #2163 (including the comments) and [issue 9686](https://bugs.dolphin-emu.org/issues/9686).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6285", "title": "DolphinQt2: Perform more of GameTracker's work on a separate thread", "body": "This reduces the time from startup to the game list window showing up.\r\n\r\nI made this commit because it combined with PR #6281 would let me make the cached games show up in the game list before we check which of them actually exist on the file system, like in DolphinWX, which will make the game list fully populated quicker than in master. But I figured I might as well submit it as a separate PR, since it has some benefit on its own.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6281", "title": "Unify ISOFile (wx) with GameFile (Qt) and put it in UICommon", "body": "The original reason I wanted to do this was so that we can replace the Android-specific code with this in the future, but of course, just deduplicating between DolphinWX and DolphinQt2 is nice too.\r\n\r\nFixes:\r\n\r\n- DolphinQt2 showing the wrong size for split WBFS disc images.\r\n\r\n- DolphinQt2 being case sensitive when checking if a file is a DOL/ELF.\r\n\r\n- DolphinQt2 not detecting when a Wii banner has become available after the game list cache was created.\r\n\r\nRemoves:\r\n\r\n- DolphinWX's ability to load PNGs as custom banners. But it was already rather broken (see https://bugs.dolphin-emu.org/issues/10365 and https://bugs.dolphin-emu.org/issues/10366). The reason I removed this was because PNG decoding relied on wx code and we don't have any good non-wx/Qt code for loading PNG files right now (let's not use SOIL), but we should be able to use libpng directly to implement PNG loading in the future.\r\n\r\n- DolphinQt2's ability to ignore a cached game if the last modified time differs. We currently don't have a non-wx/Qt way to get the time.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6208", "title": "[WIP] Re-add the monitor resolution mode setting in the Advanced tab", "body": "This reverts PR #6196.\r\n\r\nWe've been getting complaint comments on that PR unusually quickly compared to other feature removal PRs (such at fractional IR). While I don't agree with all the points they make, the one about resolutions that can't run over 30 Hz makes sense.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5805", "title": "DolphinWX: Set C++ locale", "body": "After 3a83ebc, the Show System Clock feature started using the unfortunate combination of MM/DD/YY dates (rare outside of the US) and 24-hour time (rare in the US) regardless of the user's locale settings. This commit makes it use the configured locale again.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5723", "title": "Optimize DoFileSearch on all platforms", "body": "My main reason for doing this was to avoid the slow function File::ScanDirectoryTree which previously was used on all OSes other than Windows, but it seems like this improved the speed a bit on Windows too; the DoFileSearch call that happens when pressing the game list refresh button took about 50-80 ms before this and 25-50 ms after this. (The directories that I tested with mostly contain files with non-matching extensions.) The performance improvement on other platforms should be much larger because of how slow File::ScanDirectoryTree was.\r\n\r\nTODO:\r\n- [x] Debug ScanDirectoryTree (it seems to act as if the directory it tries to scan doesn't exist)\r\n- [x] Test on operating systems other than Windows", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11149449", "body": "The change here is that the filesystems of all Wii games now are read at boot. One of your Wii ISOs probably has a corrupt filesystem. It probably makes Dolphin crash when you open the game properties window even without this commit, so it should be possible to identify which one it is and redump it. I'm going to rewrite the filesystem loading code sometime, and I think that will get rid of this problem, but I don't know when that is going to be done. I guess Dolphin could have some sort of workaround in the meantime, like stopping if the number of files in a filesystem is larger than some value, but I don't know if it's worth it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11149449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11156551", "body": "This doesn't have anything to do with the return value of `ReadFile`. The error happens in `CFileSystemGCWii::InitFileSystem()`, which happens to be called the first time `ReadFile` is called.\n\nI'm not sure how useful such an indicator would be compared to the work required to implement it. There are way more kinds of potential errors in dumps than this specific value being wrong.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11156551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16355896", "body": "The bot only runs when triggered manually, and I don't think it has been triggered for Transifex \u2192 GitHub recently. This commit is only for GitHub \u2192 Transifex, so Transifex has the newest source strings but GitHub doesn't have the newest translated strings.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16355896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rukai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6c7e6016fbf78f6fd8762c2ff863f3b955c9e52b", "message": "Handle framedump path not existing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "leoetlino": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/55584bf45618fd34fc5a3a3740c09597bb1e83bc", "message": "Merge pull request #6294 from VinDuv/macos-dolphinbar-fixes\n\nmacOS Dolphinbar fixes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3e00be93416e0a32b31df66476daa5d1b5e69bf5", "message": "Merge pull request #6305 from booto/codehandler\n\nRestore original MSR when returning from codehandler"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/27b6a2e634a5a589ace5d4baf71f68dfc1966c81", "message": "Merge pull request #6292 from gyroninja/master\n\nFixed SIGSEGV in PPCDebugInterface When Reading Too Early in The Boot Process"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/973bd154b942917a98be2d69105078ac8c20b335", "message": "Merge pull request #6304 from container1234/qt-debugger\n\nQt/Debugger: Minor fixes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ec78118a4349baebdd4192b234bacbd36f956615", "message": "Merge pull request #6302 from JosJuice/gradle-compile\n\nUse \"implementation\" for all dependencies in build.gradle"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/955214c6b6549d0060908e4e9ef4eed60becd69c", "message": "Merge pull request #6299 from Ebola16/master\n\nISOProperties: Rename \"Edit Config\" and \"Show Defaults\""}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e31f8f8ecb901a81cdf6075ca305032a6ba3366b", "message": "Merge pull request #6284 from JosJuice/qt-gamefilecache-mutex\n\nDolphinQt2: Don't use a mutex in GameFileCache"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/637fbec35dc59ee4b2c6b8a0283d8af77670aac2", "message": "Merge pull request #6274 from myfreeweb/freebsd-libusb-no-detach\n\npassthrough: do not detach kernel driver on FreeBSD"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c749125be509323fc4a1e79d1d8affbfbaacefab", "message": "Merge pull request #6276 from vladfi1/encode\n\nAllow users to specify the encoder used for framedumping."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1f89d91deb3d80fc54ab4314a992cd851d843b8d", "message": "Merge pull request #6280 from spycrab/qt_screensaver\n\nQt: Toggle Screensaver"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/26a9957285aac023ee7d35cf506b82381575df9a", "message": "Merge pull request #6278 from spycrab/qt_fix_icon\n\nQt/KDE: Fix icon"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/257da9980ed0dd1fe363ef81a511a49dd6cd97c1", "message": "Merge pull request #6275 from JosJuice/android-reliable-init\n\nAndroid: Always run HandleInit logic on app start"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3bc61ed3635f5932cad8b460812ad8545aada4da", "message": "Merge pull request #6271 from JosJuice/load-state-at-boot\n\nRedesign the ability to load state at boot"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c9b78e23a20b3bab7af132ca870b4df8440c2145", "message": "Merge pull request #6272 from JosJuice/qt-no-selected-game\n\nDolphinQt2: Don't crash when trying to play without a game selected"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b187d4cd084b20f389d1440b5de53b89101817d5", "message": "Merge pull request #6269 from JosJuice/ini-section-mapping\n\nGameConfigLoader: Map whole sections, not just individual keys"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8a9eff140437068f9ef485281970ad2fbe473baf", "message": "Merge pull request #6215 from iwubcode/immediate_mode_fixes\n\nGame Inis: Additional games requiring 'Immediate Mode' off"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f475c6d3de8d706501eb974c5cb5bd9b0516a65c", "message": "Merge pull request #6052 from Ebola16/master\n\nUpdate Readme.md and various fixes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3eeab02ee209927f0b70433a67740cbb0c55f643", "message": "Merge pull request #6263 from JosJuice/show-fps-default\n\nFix default value for Show FPS in Android GUI"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/438e8b64a4b080370c7a65ed23af52838a4e7aaa", "message": "Merge pull request #6257 from JosJuice/copy-efb-enabled-scaled\n\nRename GFX_HACK_COPY_EFB_ENABLED to GFX_HACK_COPY_EFB_SCALED"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/4733bbd8f38c0583aed0fd2faa2c9d577456bcfe", "message": "Merge pull request #6166 from ligfx/invokedeviceschangedcallbacks\n\nControllerInterface: cleanup callbacks API and logic"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a4592bc3c54d37111b916d707beb2152fdebf5fb", "message": "Merge pull request #6210 from ligfx/qtmappingwindowdontstoredevq\n\nMappingWindow: don't store devq separately from controller default device"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7e7f1fe7136bf6381902e6e17564a2d2d32cc263", "message": "Merge pull request #6226 from aldelaro5/add-xer-debugger\n\ndebugger: Add the XER to the register view"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/fa0cf5c038ddf956065bc86810dbef222ec5d989", "message": "Merge pull request #6247 from leoetlino/homebrew\n\nBoot: Minor fixes for Wii homebrew"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/28244546bd983ed141cc1248d521b667f00b6bde", "message": "Merge pull request #6251 from bobjrsenior/more-registers-on-register-window\n\nDolphinWX: Add TB and GQRs to Register Window"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3dd777be70fabcfbba191750b56bf4ca340407f5", "message": "Boot: Add default exception handlers\n\nSome homebrew expect exception handlers to be present -- which is\nalmost always the case on console, since most of the time homebrew are\nlaunched from either a libogc or SDK title) -- and break if they are\nnot. To fix this, we just need to include default, dummy handlers."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/520039ab2899c85eba30edd9ca83e50fd2b04219", "message": "Boot: Use values from libogc for booting Wii homebrew\n\nSet HID0, HID4, GPR1 to values that are used by libogc for\ninitialisation. This makes boots more similar to a launch\nfrom the HBC or another loader, since normally the registers\nhave already been initialised by the loader.\n\nThis fixes a crash in homebrew that assume GPR1 points to a correct\nlocation and attempt to use it before initialising registers."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ecd7191b5a111a06b45694515169845b874775ec", "message": "Boot: Fix BAT setup in Wii mode\n\nHID4.SBE must be set before calling PowerPC::Update{D,I}BAT, otherwise\nextended BATs will not be enabled."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1a9d6b99e95547bd8aadb8b287bbf8ae949ba7a2", "message": "Merge pull request #6237 from lioncash/gekko-disasm\n\nGekkoDisassembler: Correct disassembly of fabs, fnabs, and fneg"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ecf30cfc749ff49697c8b6bf24efae4202a2bf61", "message": "Merge pull request #6240 from JosJuice/stream-path-encoding\n\nDon't use wrong encoding for paths when opening streams on Windows"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/08da19fc87fc69d241a2d61e437ec0704d6e8b87", "message": "Merge pull request #6217 from ligfx/qtfifofix\n\nFIFOPlayerWindow: don't reset frame/object limit every frame"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d1ef62cc5a75821ffcc99cad33358ad778ae49bd", "message": "Merge pull request #6238 from lioncash/shader-str\n\nDolphinWX/Main: Fix shader compilation dialog translations"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d95177526fc46d953bc7febca80a6874e67ab2be", "message": "VideoBackends: Fix -Wswitch warnings"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/67ba326ff6e9db7227ee9992501e1e319a0652c7", "message": "VideoCommon: Fix -Wformat warnings"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0773a48c6c990c488e70ff7c1f46713593440ddc", "message": "Merge pull request #6223 from JosJuice/dont-force-immediate-xfb\n\nDon't forcibly enable immediate XFB in game INIs"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9fe5dd7fa9996989b124b5f1a8d2190a689384ad", "message": "Merge pull request #6221 from leoetlino/qt-small-fixes\n\nQt: Small fixes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/291c99217e87b93d99139a72c6422605edcf3fa1", "message": "Qt: Fix NAND import menu item parent"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6e796a74fbe1aa6b1ad4d752397062e1186a5150", "message": "Qt: Add support for --exec"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/05c8d229afc3d88f4c368a648e96b049ccd2fba3", "message": "Config: Handle unknown system strings better\n\nCurrently, a simple typo in the system name will trigger an assert\nmessage that complains about a \"programming error\". This is not\nuser friendly and misleading.\n\nSo this changes GetSystemFromName to return an std::optional, which\nallows for callers to check whether the system exists and handle\nfailures better."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/653977cec758514027a0c73937b781f60c18ced9", "message": "UICommon: Fix unsafe usage of optparse::Values::all\n\nThe const-qualified all() member method triggers undefined behaviour\nif the option passed to it is not set."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/60afb1d1b44762868e4ac97e2a3eae106e70e3f5", "message": "WX: Fix argument parsing\n\nManually convert each argument to a UTF-8 std::string, because the\nimplicit conversion for wxCmdLineArgsArray to char** calls ToAscii\n(which is obviously undesired).\n\nFixes https://bugs.dolphin-emu.org/issues/10274"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/73a67aa413d9bd5e30f361089915135b2fb41e7a", "message": "Merge pull request #6204 from stenzek/downscaled-screenshots\n\nFrame Dumping: Fix window-size framedumping"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f2f50d4fe5e0f97d36d6d132f40516ad6174601f", "message": "Merge pull request #6213 from ligfx/restoresysconf\n\nBootManager: RestoreSYSCONF without resetting all other config"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a4c057b315dcbcd1fdbc3fbdf3fdcc46c448b699", "message": "Merge pull request #6212 from ligfx/qtimmediatexfb\n\nQt: show \"Immediately present XFB\" option"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/88bfbda157a16f92bda12db274676c4aeb336e61", "message": "Merge pull request #6211 from sepalani/dsy-net\n\ntotaldb.dsy: RecvFrom and SendTo added"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/901e29f0806a02f320c5ae7b8b80c5cf9f4828ff", "message": "Merge pull request #5995 from spycrab/qt_fifoplayer\n\nQt: Implement FIFO Player"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/28f9034536b1615cbc9e24a051f584baafbb2026", "message": "Merge pull request #6207 from JosJuice/dtm-immediate-xfb\n\nMove Immediate XFB down in DTM header"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/01794126ade973a125161ca0ea9904197bccedc3", "message": "Merge pull request #6191 from lioncash/file-static\n\nD3DUtil: Make file-scope variables internally linked where applicable"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/38f44b2839d1cb3792f1bf517efe4a092933c43e", "message": "Merge pull request #4853 from ligfx/always_connected\n\nGCPadEmu: only connected if default device connected"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/80bcc0d58d7d3b39d0e1b7973cbce34d4cf61f4e", "message": "Merge pull request #6186 from lioncash/enum-class\n\nVideoConfig: Make AspectMode and StereoMode enum classes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a75546747ead9aad27ea7e62d340d18e446dcaf3", "message": "Merge pull request #6164 from leoetlino/usb-hid\n\nIOS/USB: Implement HIDv5"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6273", "title": "[RFC] Enable C++17", "body": "C++17 allows for some nice cleanups and removes the need for standard library backports (optional/variant).\r\n\r\nSee discussion at https://github.com/dolphin-emu/dolphin/pull/6264#discussion_r158134178\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6264", "title": "Common: Add a Subscribable class (from #5758)", "body": "From PR https://github.com/dolphin-emu/dolphin/pull/5758 (rebased on top of master)\r\n\r\n>Adds a `Subscribable` class in Common, to encapsulate the callback management logic. Could probably be used in other places with callbacks, too. Calling `Subscribable().Subscribe` returns a move-only value that, when destructed, unsubscribes the callback if the original Subscribable still exists (thread-safe).\r\n\r\nThis is not used anywhere yet, but I plan to replace the existing callbacks with `Subscribable`s (`Core::SetOnStoppedCallback`, config change callbacks).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5881", "title": "[WIP] Config: Port Main.Core and Main.DSP to OnionConfig ", "body": "Depends on ~#5876~ and #6264\r\n\r\n* Update IsSettingSaveable to let OnionConfig handle Main.Core and Main.DSP. GetINIToLocationMap was changed to handle loading remaining Core settings from legacy game INIs. \r\n\r\n* Remove most of BootManager's ugly config \"cache\". The only thing remaining is Wii remotes, which are still there because controller   configuration is not yet part of OnionConfig. I wanted to keep that   change for another time to avoid making this one too huge. \r\n\r\n* Remove Movie::SetGraphicsConfig, which shouldn't be needed anymore.\r\n\r\n* Minor config code cleanups.\r\n\r\n* Fix netplay config loader. Settings that were added since the original OnionConfig PR and missing from it have been added to the loader.\r\n\r\nTODO:\r\n\r\n* UI code for configuration. Currently the config is shown properly in the UI, command line overrides, movie, work (and netplay should also work), but changing settings is not properly working for every setting yet.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "booto": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/83d18fc2fa4ae0a01af938a69d1ab325b3a17601", "message": "Restore original MSR when returning from codehandler"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6057", "title": "Reorganise debugger execution breakpoints", "body": "Centralise the handling of execution breakpoints in Dolphin and add two\r\noptions - 'log' (when enabled, breakpoints emit an info log message in the\r\n'IBM CPU' category) and 'break' (when disabled, the breakpoint will not\r\nstop execution).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7245341", "body": "I've made a new PR which I believes addresses this problem: https://github.com/dolphin-emu/dolphin/pull/720\nPlease test this and report your findings on that PR.\nA Windows binary is available https://dl.dolphin-emu.org/prs/pr-720-dolphin-latest-x64.7z if you need it.\n(Also, if you notice regressions like this, please open a new issue here: https://code.google.com/p/dolphin-emu/issues/list )\n\nLooks like it has been merged now, so you can just use the normal download from https://dolphin-emu.org/download/ if you like.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7245341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13065460", "body": "done in #2955 \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13065460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15435015", "body": "Yup, was just meant to be used as a hint when debugging, not an exact addr.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15435015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15687630", "body": "I thought that the intent was clearer by using the extra bool, but I don't have any problem with changing it if I'm in the minority.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15687630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15687680", "body": "I still need to investigate this a bit - the original code reported the number of blocks left, while YAGCD documents this as bytes. I left it like this for the moment so it's easier to add a *32 if it needs to be changed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15687680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15719653", "body": "Not sure, not been able to test on real hardware - but the game itself seems to work ok either way.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15719653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15793908", "body": "Is that kinda weird, given the comment on the following line?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15793908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19321207", "body": "new_uid.GetUidDataSize() is the number of bytes in new_uid.data\n\nnew_uid.GetUidData() returns a pointer to new_uid.data\n\nafaict, casting this to 'u32_' and indexing with 'i' is going to access up to 4_sizeof(new_uid.data) bytes?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19321207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598186", "body": "Talked briefly on IRC about a potential problem with this thread and Input() accessing controller_payload \"at the same time\" - the latter may have half processed the buffer, then this populates it with new data.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598232", "body": "It might optimise out anyway(?)... but is it important to not just >>28 and use the same mask as below?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598255", "body": "(Similar to above)\nIt might optimise out (?) but is it important to not just >>20 and use the same mask as below?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598833", "body": "after working out which channel you're working with,  maybe get a pointer or reference in to that relevant data so you don't have to offset all the below accesses by 9*chan..\n\n```\nu8 *this_controller_data = &controller_payload[1 + 9*chan];\n```\n\n(you could possibly make 'this_controller_data' a smarter type than u8*, alt. have named constants to index into this_controller_data)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21598833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21599541", "body": "might be an idea to lock for as short a time as possible - just long enough to copy the data out of harm's way (into a local u8/vector/whatever) then let the usb polling thread have its way with the shared data structure again?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21599541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21654172", "body": "even if SConfig::GetInstance().m_GameCubeAdapter isn't defined?\nEdit: nvm, I saw it gets checked inside SI_GCAdapter::Output()\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21654172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21807299", "body": "This is setting a field in a static array (https://github.com/phire/dolphin/blob/wii_ssl_segfault/Source/Core/Core/IPC_HLE/WII_IPC_HLE_Device_net_ssl.h#L86). If this class is constructed more than once, it'll trash the existing state. (Doesn't happen at the moment, but it'd nice for this to be enforced via code than convention).\n\nIf this class should be a singleton, it should have private constructor and this pattern: http://stackoverflow.com/a/11711991\n\nRegardless, is there any reason that the WII_SSL array shouldn't be made an instance var of the class, and do this init in a (WII_SSL) constructor?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21807299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31698327", "body": "Is mode 0666 really the best way?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31698327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31699137", "body": "Allowing user to set the group via variable, looking for commonly used groups, and allowing the user to explicitly opt-in (again, via a var) to a 0666 rule seems better?\n\nAlso, informing the user what's going on during install, and why?\n\nIs there plans to do something like this in the distributed Ubuntu builds in post-install (or similar...)?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31699137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34124151", "body": "I think it gets scaled to the IR here? https://github.com/dolphin-emu/dolphin/pull/2720/files#diff-5e54d54b6176b92ca94504f0a897770cR493\n\nI was considering having a smallish struct for the fbXYZ params and just passing a pointer to it through the various layers.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34124151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34124939", "body": "stride is in pixels, YUYV is 2 bytes per pixel\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34124939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34334833", "body": "I can fix this up, but it'll have effects on other parts of the code, because this is is not already consistently done in current master: e.g. one of these fbWidths is a stride https://github.com/dolphin-emu/dolphin/blob/master/Source/Core/VideoCommon/RenderBase.cpp#L130\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34334833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34980809", "body": "Not important, but related: looks like there's not much of a good reason for IsHotkey to take a signed 'id' parameter afaict?\n\nIt passes it to HotkeyManagerEmu::IsPressed which pretty much treats it as unsigned.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34980809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272459", "body": "Any reason why `frame` can't be `const u8*`?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272591", "body": "From the [docs on WriteFile](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365747%28v=vs.85%29.aspx):\n\n> Accessing the output buffer while a write operation is using the buffer may lead to corruption of the data written from that buffer. Applications must not write to, reallocate, or free the output buffer that a write operation is using until the write operation completes.\n\nI'm not sure about the semantics of the caller, but is seems like this code doesn't do anything to guarantee this?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272654", "body": "Is the cast to `LPDWORD` (I believe that's the equivalent of `unsigned int*`) necessary here?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272681", "body": "Same as above (is cast necessary?)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/37272681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/41110932", "body": "The code contained in that ifndef is meant to be included on platforms that aren't windows... I imagine this would include freebsd?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/41110932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/41112416", "body": "https://github.com/dolphin-emu/dolphin/blob/master/Source/Core/Common/Common.h#L61\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/41112416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/41116907", "body": "Main repo says [it is](https://github.com/dolphin-emu/dolphin/blame/master/Source/Core/Common/CDUtils.cpp#L13)?\n\nLooks like it was [part of a PR merged two days ago](https://github.com/dolphin-emu/dolphin/pull/3102).\n\nHow old is the clone of master you're building against?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/41116907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/100647864", "body": "Ugh, I changed this to NTSCJInVI because I was reading your comment from my email, and edits don't get sent there. I might just wait for some sort of consensus from @sepalani before changing it further.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/100647864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/138618591", "body": "Is the width of bool guaranteed? I did this because JIT-emitted code interacts with the return value and I wanted the width to be guaranteed and clear.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/138618591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/138659579", "body": "Not yet! :(\r\nThere isn't a way to edit existing breakpoints afaict - beyond doing a saving to text, then clearing, editing the text, then loading. I have a few changes to breakpoints tentatively planned (including allowing changes to existing breakpoints), and at that point I'll need a non-const version, but I didn't want to add it yet, unused.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/138659579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/138773768", "body": "`TriggerBreakPoint` now returns a bool, and `CheckBreakPoints` implicitly casts to u32 on return. There's a comment above the definition of `CheckBreakPoints` explaining the behaviour.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/138773768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "VinDuv": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/bb5e5d964a172d92596aa403dec3f83f369554d8", "message": "Added patches for hidapi modifications\n\nThis allows tracking what modifications were made to the upstream code."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3abc288e02089b3143547177e027d3820e5d7e59", "message": "macOS: Add errno setting in set_report (HID)\n\nIsDeviceUsable in IOhidapi.cpp uses errno to detect if hid_write failed because of an unconnected Wiimote on a Dolphinbar (it expects errno == EPIPE in this case).\nmacOS\u2019s implementation of hid_write detected this specific error (IOHIDDeviceSetReport returns kUSBHostReturnPipeStalled) but didn\u2019t set errno so the check failed.\nThis add errno assignment to failure cases of macOS\u2019s hid_write."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8d5810a1038347b9e56d41334d3f83641c913b3d", "message": "macOS: Use unique IDs for HID paths\n\nIf available, use the system-generated unique ID for HID device paths instead of a transport/vid/pid/location tuple.\nThe Mayflash Dolphinbar registers four HID devices (regardless of the number of connected Wiimotes) which had the same path with the previous path building method, causing a bit of confusion when detecting and connecting to Wiimotes.\nThe unique IDs do not change if the computer is suspended and resumed, but do change if the HID device is unplugged/replugged."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Helios747": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/93979cd16adfbabc572732cf336666955798a64a", "message": "Merge pull request #6301 from Helios747/sa2b_workaround\n\n[INI] Force Single Core mode in Sonic Adventure 2 Battle"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/78f0ca69ae8be563a99fc9bcd08217130b145ee4", "message": "[INI] Force Single Core mode in Sonic Adventure 2 Battle"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/57640a4c83f0b5579b8ccefd865276f8ff8bc261", "message": "Merge pull request #6293 from container1234/dolphinqt-debugger\n\nQt/Debugger: Add TB, XER and GQRs to Registers Window"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/3b887388cd6aba4c74dc14d66627bde3337255f6", "message": "Merge pull request #6234 from amolloy/high_sierra\n\nFix Wiimote support on macOS 10.13 High Sierra"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d71f4168e94f1ced736461bd62ec39e46be3c78f", "message": "Merge pull request #6229 from JosJuice/clarify-keys-dump\n\nClarify the \"Select the OTP/SEEPROM dump\" message"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c48ccdb1cd7a67fc992d192370cb1c03c6ee874e", "message": "Merge pull request #6228 from JosJuice/usb-keyboard-background-input\n\nMake USB keyboard input respect the background input setting"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/05b67c7f7c052018fbc6ee0947c6a3f0e5372d26", "message": "Merge pull request #6209 from lioncash/file-statics\n\nD3DBase: Mark file-scope variables as internally linked where applicable"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7c96e51bc89b43c8df3a1e14839894cd04fea2b4", "message": "Merge pull request #6187 from raelgc/1-exit-on-esc\n\nAdd an exit key to `dolphin-emu-nogui`"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/066471be076994ea8538d13e8d6979609193a2de", "message": "Merge pull request #4601 from stenzek/celdamage-lighting\n\nShaderGen: Always calculate lighting for both color channels"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6243", "title": "[WIP] [AVIDump] fix compilation on Linux", "body": "untested. pls test\r\n\r\nFixes https://bugs.dolphin-emu.org/issues/10644", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4484", "title": "[UI] Remove experimental tag from Vulkan", "body": "**Do not use this thread as a means to report bugs. Report them here.** [https://bugs.dolphin-emu.org](https://bugs.dolphin-emu.org\r\n)\r\n\\<JMC47> Helios747: can you make a PR to remove experimental from teh vulkan backend\r\n\\<JMC47> people are talking shit about it being experimental on reddit and how it's not done\r\n\\<Helios747> Stenzek, are you cool with removing experimental from the Vulkan backend?\r\n\\<Helios747> It's primarily your work\r\n\\<Stenzek> Helios747: Sure, I guess", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "container1234": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/025d9383ac64edd85afc09b3be588c653664bc7c", "message": "Use double instead of float for FPRs"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b6138b940806439460229d766b51c2aba1636e29", "message": "Fix 64bit registers that are not displayed correctly"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5cff714b776fe1963a40b288a86dd39a07ad23a7", "message": "Qt/Debugger: Add TB, XER and GQRs to Registers Window"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gyroninja": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9628e229163b590459cf20c538cee1c0c27a5105", "message": "Changed PPCDebugInterace to check memory only after the emulator has finished starting"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "34will": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/86a787bdf9df5ef54cf38bfd16ae24c73bd9e83c", "message": "Modified StringUtil to change UTF16ToUTF8 to use a wstring_convert and codecvt_utf8<wchar_t> to convert a UTF16 wstring to a UTF8 string."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a949e98d9b3b77493a0e38e7f2227e57c8c6e066", "message": "Modified UTF16BEUTF8 to just convert the UTF-16 C-string into a std::u16string, and pass it into CodeToUTF8 with the 'from' parameter being \"UTF-16BE\", rather than manually performing the big endian to little endian encoding."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ba111959fa9ac4a40dfb1e7bafe2d2d4a7ef371b", "message": "Modified StringUtil to use a u16string instead of a wstring in the non-win32 UTF16BEToUTR8 method."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/10ea9e5f5b4da1b0ff0c9615ee3772125c0348cd", "message": "Added an actual implementation for yes/no dialogs on Android using Object.wait and Object.notify.\n\nModified NativeLibrary to display alerts in AlertDialogs rather than Toast notifications, and allow yes/no options.\nModified MainAndroid to use the new displayAlertMsg, and to return its output."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JonnyH": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/46254a2cf2d99b6786d25f985e49c13551a8f395", "message": "Some more implicit uint/float conversions in the texture decode shaders"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f23dd992dd5ba3c7b20a761032c1559f56bc657f", "message": "GLSL-ES doesn't allow implicit int/uint conversions"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c709f3c2d150ed35a33a32e45f7c3fe9605f682f", "message": "Standardise some enums from ALL_CAPS to CamelCase"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ceb1f8c8cbc41aed49c5ae8d66499057d979b51a", "message": "Enable shader_framebuffer_fetch blend path on ubershaders\n\nTested on a linux Intel Skylake integrated graphics with\nblend_func_extended force-disabled, as it's the only platform I have\nthat doesn't crash with ubershaders and supports fb_fetch"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8d68adcaf3442122fff5bb0988c2f06b0128f021", "message": "Workaround qualcomm driver bug\n\nIt seems it doesn't like modifying inout variables in place - so instead\nuse a temporary for ocol0/ocol1 and only write them once at the end of\nthe shader"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/29a9ed043bd0946497edf7c4d392ce46041b9817", "message": "Implement dual-source blending in shader\n\nFor some GLES drivers that don't support dual-source blending, but do\nsupport GL_EXT_shader_framebuffer_fetch, this might be useful."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a38103afbf78bf30be3dd9ecf15637aefb8695a9", "message": "Fix GLES GPU texture conversion shader\n\nGLES doesn't support C-style array initialisers, so stuff like:\n\nType var[2] = {\nVALUE_A,\nVALUE_B\n};\n\nisn't supported in GLES (it was added in\nGL_ARB_shading_language_420pack).\n\nThe texture conversion shader used this, so would fail to compile on\nGLES."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e4010047667ff26ade271e6f1a92705cbb6ab365", "message": "Fix an invalid (uint < int) comparison in GLES with ubershaders"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8ae76a6680686145946c0da71c59b33ba6e615cb", "message": "Fix arm64 MOVI2R for addresses between 2gb and 4gb offset from PC\n\nThe PC offset ADRP() path takes a s32 value, but the input offset was\nbeing tested as abs(ptr) < 0xFFFFFFFF. This caused values between\n0x80000000 and 0xFFFFFFFF to incorrectly use this path, despite the\noffsets not being representable in an s32.\n\nThis caused a crash in the VertexLoader on android 8.1 immediate in wind\nwaker (and possibly all other apps on android 8.1) as the jit and data\nsections happened to be loaded 4gb apart in virtual memory, causing some\npointers to hit this"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Ebola16": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1fabc93756be6513610050ac5414abab3dbff140", "message": "ISOProperties: Rename Edit Config and Show Defaults"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1f226ec14ff5d0fe30d5e328ec9854b1967a3ab9", "message": "Update Readme.md and various fixes"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6319", "title": "Update the Android Gradle plugin to version 3.0.1", "body": "Fixes\r\n\r\n![a](https://user-images.githubusercontent.com/17330088/35199774-e1318d06-fed0-11e7-8936-5dc78927b0a7.PNG)\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mahdihijazi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/409ae4c444c6c870f2aceabfe2328c2ac5d7c656", "message": "[Android] Replace current file browser\n\n1. Allow users to pick games dircetory from external storage.\n2. Better UX experince to distinguish between selecting a directory or\na game. The later is needed when we implement change disk for android."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/42fa129552e3c1bc1e277857fe2ffc8b86e39c3e", "message": "[Android] Fix refreshing the games list after adding a directory\n\nThis was a regression from the time we introrduced the Platform enums."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/136e835fb489f2b0412c760739dd5c668055fb56", "message": "[Android] Support restore emulator state after the emulation screen is killed\n\n1) Most of the times the native heap is kept around even after the activity\nis killed, we can ask the native code if it is still running and resume\nthe emulation if that is the case.\n\n2) In case the native heap is freed and the emulation can't resume we used\na temporary state to load on the game boot.\n\nI couldn't find a way to test this, if you want to test this schnario,\nadd this block to EmulationFragment.\n\npublic void onDestroy()\n{\n\tstopEmulation();\n\tsuper.onDestroy();\n}\n\nonDestroy is only called if the acivity killed by the OS and not be rotation\nchange whihch in this case will make sure to kill the emulation and start\nagain when the activiy is re-created."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/58ee9d2a78fddff454088cc0ceb8bb46cbb811e8", "message": "Fix a bug when you open the gc pad settings after fresh install of Dolphin\n\nYou will see an empty gc pad settings screen until you open any other\nsettings screen and change something, at that moment the Dolphin.ini will\nbe created and the gc pad settings will be loaded successfully the next\ntime you open the screen.\n\nThis fixes the bug by putting the default gc pad settings section even if\nthe Dolphin.ini file doesn't exist"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2cecb64e4cbc5b4e2f6c676ce0232ae225a313b9", "message": "Don't override the WiimoteNew.ini so the user don't loose the selected source"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1190afef51fc91042efce96e7c4a0cafe3d78ae5", "message": "[Android] Refactor AssetCopyService and the way we extract resources from the assets\n\nThis solves the following issues:\n1. If user uninstall Dolphin and install it again the resources will\nnot be copied unless the user manually clear the app cache because we\nare enabling the allowBackup flag in the manifest which will make the app\nrestore the settings saved in the shared prefernces including the flag\nassetsCopied. This PR always copy the files everytime you open Dolphin.\n\n2. If the AssetCopyService took long time and you tried to open the settings\nscreen or start a game the behaviour was not expected or the emulator will\ncrash, this PR make sure that whatever we add to the DirectoryInitializationService\nor how long it will take will still work as expected by blocking both\nthe settings screen and the emulaion screen to wait untill all resources\nneeded are copied.\n\n3. Better communication between the DirectoryInitializationService and the\nUI screens using brocast messages."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e61e4d4b3c7ab24f78edc32078a4b1682d7e5c04", "message": "Replace all Anonymouse class with lambdas or method refernce where applicable"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c6bc25a189392cf6465328afe0302581a49eff37", "message": "Enable Java 8 features in Dolphin"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6313", "title": "Android: Support change disc", "body": "Tested on Shield TV. Still needs to be verified on mobile devices.\r\n\r\n@JosJuice :)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6310", "title": "Android: Fix settings screen animation if Animator Duration Scale is Off", "body": "If Animator Duration Scale is Off, the Enhancements/Hacks screens were\r\nnot visible unless you enable the Animator Duration Scale back. This\r\nmake sure screens will be visible regardless of your animation settings.\r\n\r\nfor more info:\r\nhttps://www.reddit.com/r/DolphinEmulator/comments/7o6abu/dolphin_emulator_android_version_fix_for_when/", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6306", "title": "Android: Don't hard code the user dircetory path to /sdcard/dolphin-emu ", "body": "Android is allowed to pick any path for the external storage media and\r\nthat's why we should always use Environment.getExternalStorageDirectory()\r\nto get the external storage path\r\n\r\nI need to test this first, I will ask the user who posted the issue on the forums to test if that solve the problem. If others can help me test it, that would be appreciated since all my devices don't have the issue.\r\n\r\nfor more info:\r\nhttps://forums.dolphin-emu.org/Thread-unable-to-create-dolphin-folder-hence-settings-won-t-save?pid=460539#pid460539", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6046", "title": "[Android] Enhance the scan of the games process", "body": "- Move the operation into the background thread\r\n- Show a dialog to indicate that the process is in progress\r\n\r\nif you have a small set of games, there is a possibility that the dialog will not be noticeable at all.\r\n\r\nBelow video show the change:\r\n\r\n[![video](http://img.youtube.com/vi/VU57PU23CLY/0.jpg)](http://www.youtube.com/watch?v=VU57PU23CLY)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vladfi1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/330881ae80387a0acced81fc5e5409a5b8a4972e", "message": "Allow users to specify the encoder used for framedumping."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/45ac9b678defcf597fa2cc98d0c5814cb90039c8", "message": "Require WINDOW_BIT if we have a window handle."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/eb5926719629d19dfddd1028e8bc73bc03d9b568", "message": "Surfaceless egl rendering."}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4967", "title": "Step MemoryWatcher at end of each video frame", "body": "This is more efficient than the current approach of checking 600 times per second - typically whoever is listening only cares about each frame, not what happens between frames.\r\n\r\nEdit: I no longer plan on making a zmq PR. These commits should still be fine though. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "delroth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/fd13851df26937dadb681adb12864149c48698ba", "message": "Merge pull request #6076 from spycrab/qt_debugger\n\nQt: Implement Debugger (part 1 of \u221e)"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8a830074b64e0487afa523cd465de5ab40efb0a7", "message": "Merge pull request #6220 from leoetlino/utf8\n\nWX: Fix argument parsing"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6178", "title": "Load Sys GameSettings from a .zip file", "body": "Currently we store default GameSettings for Dolphin in individual .ini files (1332 of them, to be precise). While this shouldn't be an issue, some operating systems (_cough_ Windows _cough_) are really slow at creating or copying large numbers of files, and GameSettings have been an issue in the past for this reason.\r\n\r\nThis PR adds support for loading Sys GameSettings from a single .zip archive. In our Git repository we still keep individual .ini files with their own commit history, etc. At build time CMake / Visual Studio are responsible for packaging the individual files into a zip archive which is then used at runtime.\r\n\r\nTesting checklist:\r\n- [ ] Windows\r\n- [ ] MacOS\r\n- [x] Linux\r\n- [ ] Android (does not build yet)", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3755", "title": "ax: switch to new style interrupt triggering", "body": "I suspect it might help with some of the AX timing issues that have been recently noticed, but I don't have any affected games to test. It should be strictly better though.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3755)\n\n<!-- Reviewable:end -->\n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33481912", "body": "Is there really no way to detect the error without checking the driver version? I obviously don't like performance regressions but simply breaking half of the NVIDIA versions from 2013 isn't really much better.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33481912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33580681", "body": "Why were these commented before? Would like more context (maybe in the commit message).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33580681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33590137", "body": "Preview: https://github.com/lioncash/dolphin/blob/d7268dd176a2f8ea276694cac9f2a5c54065d372/Readme.md\n\nCould you make the \"usage\" line monospace?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33590137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33590176", "body": "Also a few more things to monospace: file names (VS solution names), build steps, ...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33590176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33641610", "body": "LGTM but this code is kind of a mess of #ifs mixed with ifs. Why do we not use polymorphism here instead of these series of if statements?\n\nIf that makes sense to you, would appreciate if you could create an issue about that if you don't want to fix that in the near future.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33641610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33691692", "body": "+1 for making our sw backend closer to the hw implementations when it can\nbe instead of having it be a (mostly) separate implem.\n\nOn Thu, Jan 30, 2014 at 3:14 PM, Markus Wick notifications@github.comwrote:\n\n> hrydgard: yeah, I'm also thinking about forking our videosw based on the\n> hardware api. So it likely will be a)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/pull/11#issuecomment-33690830\n> .\n\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33691692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33696928", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33696928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33696991", "body": "If these are the same implementation, do not copy paste and try to add an abstraction layer instead.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33696991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33870039", "body": "We don't have to keep compatibility with the stupid parts of Dolphin. I'd\nsay drop this change and fix fifoplayer instead if it's buggy.\n\nOn Sat, Feb 1, 2014 at 1:13 PM, BhaaL notifications@github.com wrote:\n\n> I'd prefer a solution/fix in fifoplayer aswell; as from what I've heard on\n> IRC the problem is not that it has to do things like that, but it simply\n> does because dolphin used to.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/pull/22#issuecomment-33869990\n> .\n\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33870039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33876715", "body": "Makes the memory cleanup automatic. Unfortunately in this case (inside a vector) it's a little annoying to use:\n\n```\nstd::vector<std::unique_ptr<Foo>> vec;\n\n// To add\nstd::unique_ptr<Foo> my_ptr(new Foo(a, b, c));\nvec.push_back(std::move(my_ptr));\n```\n\nConsider my request optional - if you don't know how to use unique_ptr it might be worth learning though, and that could be an interesting exercise. If it makes the code less readable in your opinion, feel free to ignore me :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33876715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33877698", "body": "I really don't agree with your typedef, FWIW. A unique pointer is a special type of pointer, naming it FooPtr makes it potentially confusing.\n\nDidn't know about emplace_back, thanks a bunch! That's useful to know :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33877698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33899325", "body": "Would maybe be worth asking some people knowledgable about Intel optimization/FPU stuff if there is a better way. I'll try to pass this around.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33899325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33915855", "body": "std::move is only needed when create a unique_ptr from another unique_ptr (and it will invalidate the previous unique_ptr - there can be only one unique_ptr pointing to an object). In this case it should be ok since the pointer is passed directly.\n\nAlso, LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33915855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33972759", "body": "Idea if someone is bored: implement a proper Event class in Dolphin that we\ncan use for this kind of stuff. When writing the threaded mode of AX HLE\n(and before, when writing the async-dvd thingy) I tried to use\nstd::condition_variable to get stop events without having to poll... but\nit's really horrible to use (have to use a mutex as well, kinda\ncomplicated, bleh).\n\nIn general we're lacking a few useful multithreading constructs in Dolphin:\nevents, queues (FifoQueue is nice but I'm not sure if it handles all the\nneeds we have, on top of being very badly named :p),\nWaitForMultipleObjects-style function, etc.\n\nOn Mon, Feb 3, 2014 at 4:35 PM, Jordan Cristiano\nnotifications@github.comwrote:\n\n> You might need to worry about instruction reordering and coherency issues\n> with the m_run_thread variable.\n> \n> m_run_thread = false;m_thread.join();\n> \n> The compiler is free to move the assignment of m_run_thread around the\n> join(). Also, the m_run_thread variable could be set, but not be visibly\n> set on the audio thread if it's on a separate cpu core. The variable seemed\n> to be [incorrectly] marked as volatile before to attempt to get rid of\n> these errors. Volatile solves the coherence, but not the ordering issue, at\n> least on x86.\n> \n> I would say to use the atomic helper functions in Common/Atomic.h,\n> specifically AtomicStoreAquire/AtomicStoreRelease, since I don't think the\n> win32 versions of AtomicStore/AtomicLoad are correct.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/pull/20#issuecomment-33965880\n> .\n\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33972759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34018885", "body": "LGTM'd by @Parlane on IRC.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34018885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34092090", "body": "Might be worth integrating https://chromium.googlesource.com/chromium/src/base/+/master/atomicops.h (+ implementation and related files) into Common? We would at least have a robust, well tested implementation at hand instead of the current API which has problems as Jordan mentioned.\n\nBSD licensed, so this should be possible without too much trouble. Might need some changes to better match our codebase (namespace changes, etc.).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34092090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34092176", "body": "Of course, I still think the proper solution would be to not use atomics at all here and rely on a proper Event object that would encapsulate all that (this Event object might internally use atomics - but users shouldn't care).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34092176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34148453", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34148453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34198081", "body": "LGTM, would appreciate seeing some user testing results though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34198081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34317430", "body": "Does that cause any additional warnings?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34317430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34318200", "body": "Feel like fixing them as a followup commit in this PR? :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34318200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34319716", "body": "Could you get some user testing for this? Maybe on forums.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34319716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34320459", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34320459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34386491", "body": "@neobrain any update? Is it worth keeping this PR?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34386491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34387057", "body": "Breaks Android build. Reopening.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34387057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34425731", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34425731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34524511", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34524511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34550801", "body": "Mostly LGTM from my side, thanks for taking the time to address the code duplication issues :-)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34550801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34561545", "body": "That's also what I suggested on IRC. Sounds like a better idea than the current hardcoded functions.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34561545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34593890", "body": "Did not review the whole thing, but I like the idea and I trust you to have done it right :)\n\nFWIW, not personally opposed to large scale cleanup changes like this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34593890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34714244", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34714244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34825866", "body": "No opinion on the string changes.\n\nPlease filter out the 3 fail commits from your branch (git rebase -i origin/master).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34825866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35008201", "body": "I don't like the idea of removing optimizations that should apply safely to Win7 SP1 / Win8 just because MS can't fix their shit. If you want to work around the issue, please at least make it conditional on the OS version.\n\nMy overall opinion on the workaround is still \"no\" and I'd ask people to wait for a clear consensus on the ML before merging.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35008201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35009224", "body": "Right, the best course of action would be to do AVX2 detection in x64CpuDetect and disable FMA3 in MSVCR120.DLL if AVX2 HW support is present but SW support is not.\n\nNo idea about the cost of these optimizations. Why don't you tell us? :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35009224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35014875", "body": "@Parlane there are cases where OS support for AVX/AVX2 can be disabled even on later versions of Windows. No idea which cases in particular.\n\n@BhaaLseN curious: does your workaround actually works (was it tested on a problematic version of windows)? I still wonder whether the crash happens during a DLL initialization.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35014875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35021415", "body": "Not good enough when we haven't tested that it works in our specific case.\n\n@hrydgard committed this only because I talked about it on dolphin-dev@ and suggested it was the recommended workaround. I don't think he ever noticed this bug happening in PPSSPP so I doubt it was tested in his case too.\n\nUntil we have tested if we actually reach main() on an OS that triggers this MS bug I don't think this should be merged.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35021415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025789", "body": "I'm not expecting this change causing crashes - more like this change being useless and not fixing our current crashes.\n\n@BhaaLseN 1 IRC report, 1 forum thread (https://forums.dolphin-emu.org/Thread-various-dev-builds-not-opening-but-official-stable-build-does) and 1 issue report (https://code.google.com/p/dolphin-emu/issues/detail?id=7027). It's likely more reports happened but we were never able to correlate them and ignored them.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025899", "body": "Make that two forum threads: https://forums.dolphin-emu.org/Thread-stopped-working-fault-msvcr120-dll\n\nMore:\nhttps://forums.dolphin-emu.org/Thread-dolphin-exe-stopped-working--33918?highlight=c000001d\nhttps://forums.dolphin-emu.org/Thread-dolphin-netplay-version-652-not-working-64-bit?highlight=c000001d\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027771", "body": "Note that I'm looking for error c000001d here, which is \"Illegal instruction\". Completely different issue.\n\nAlso, we ship MSVCR120.DLL with Dolphin, avoiding this type of issues.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027918", "body": "@lioncash care to review?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028044", "body": "Would appreciate some user testing on the forums.\n\nAlso, squash the commits that should be squashed please.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028117", "body": "I'd like @neobrain to review that.\n\nAlso, needs rebasing.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35087339", "body": "Another way to test this would be to find all the functions that use FMA3 in MSVCR120.DLL, replace the FMA3 code with 0xcc and see what happens on a machine that supports FMA3.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35087339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35151697", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35151697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35152377", "body": "@Sonicadvance1 handed that off to JMC for testing and he couldn't find any issues. I'm fine with making a forum thread too if you think it is likely to notice more bugs.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35152377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35202563", "body": "Haven't reviewed the opcode docs, but the rest is LGTM from me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35202563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218664", "body": "+1 to what @neobrain said.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35220517", "body": "LGTM, haven't looked at everything but the little I saw made me very happy.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35220517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35222524", "body": "I didn't even know about that. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35222524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35398274", "body": "Ack, but please add this explanation in the code (or a link to this comment?) before merging.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35398274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35451986", "body": "\\o/\n\nI'll do some scripting to try to find basic errors and fix them.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35451986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35572388", "body": "LGTM, 0 errors from my script.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35572388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35626269", "body": "Because exposing global variables directly is kind of terrible. Opinion though - don't know if other people share the same concern. @neobrain?\n\nm_ThrottleDisable does not follow the Dolphin coding style.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35626269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35626518", "body": "I also don't really understand why this is made part of the config object. The fact that throttling is temporarily disabled is not user configurable (it's the result of pressing Tab).\n\nAlso not a fan of the name: it's not clear that this is only a temporary throttle disabled (due to the user pressing the hostkey). With its current name it could be easily confused with the framelimitter settings.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35626518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35693870", "body": "I'm -0 on this. Our architecture handling is quickly becoming a huge mess and I think we need a proper cleanup instead of hacking it any time we want to support another arch.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35693870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35816539", "body": "Not too terrible. Please clean up the commits (I see some that could be squashed in the list) and I'll merge this PR unless someone objects to it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35816539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35820524", "body": "Commit summary (first line) is useless.\n\n\"JitBackpatch: initialize the MOV InstructionInfo to zero\"\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35820524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35820886", "body": "Now builds everywhere thanks to Lioncash's and flacs' fixes.\n\nAny objection to merging this branch?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35820886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35825821", "body": "LGTM if it builds/works.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35825821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35827421", "body": "10:19:45        @Lioncash | Seems good to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35827421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35841483", "body": "Please buildbot-try this PR.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35841483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35842735", "body": "At least try an OSX build then.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35842735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35844357", "body": "Both @shuffle2 and BhaaL confirmed that these could be removed. Merging.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35844357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35844458", "body": "@neobrain suggests I should wait for @Sonicadvance1 approval.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35844458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5212073", "body": "Would be nice if that context was put in the commit message in the future :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5212073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5284408", "body": "My thread on dolphin-dev@ about non-const refs was triggered by discussions\naround this PR :)\n\nOn Wed, Feb 5, 2014 at 6:03 PM, BhaaL notifications@github.com wrote:\n\n> Did you intentionally choose to use T\\* as first parameter over T&, or did\n> it just end up like that?\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/commit/cfa2d012c81e7d162487871b4c18c1c9f10e534a#commitcomment-5284334\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5284408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5285478", "body": "That's basically it.\nhttps://ml.dolphin-emu.org/archives/dolphin-dev/2014-February/000063.html\n\nOn Wed, Feb 5, 2014 at 7:20 PM, BhaaL notifications@github.com wrote:\n\n> Gonna fix my spam filters, half of them got moved to trash automatically :|\n> I'm guessing its about the non-verbosity of references being not visible\n> at caller site (because it looks the same as a plain non-ref call) and you\n> only notice when looking at the fwd declaration and/or implementation.\n> Gonna read the ML and re-comment afterwards...perhaps\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/commit/cfa2d012c81e7d162487871b4c18c1c9f10e534a#commitcomment-5285364\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5285478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5819040", "body": "It makes Zelda HLE synchronous and fixes all the freezes we know of. It does not fix the several audio issues of Zelda HLE, including bad volumes, bad square waves generation, etc.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5819040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6440540", "body": "@shuffle2 https://forums.dolphin-emu.org/Thread-dolphin-not-open-on-haswell-without-avx?pid=324946#pid324946\n\nLooks like this is not fixed. Any ideas?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6440540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6512938", "body": "Yeah, kostamarino was a lot better than @Linktothepast. Bring him back!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6512938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6731436", "body": "Then let's drop support and require 3.0. 2.9.x are development releases of\nWX (not stable), and most distros that matter support either 3.0 or not 2.9:\n- Debian Stable has only 2.8\n- Debian Testing has 2.8 and 3.0\n- Arch has 3.0.1\n- Fedora has had 3.0 for the last two versions\n- Ubuntu LTS has 3.0\n- Gentoo has 2.8 unmasked and 3.0 masked\n\nOn Thu, Jun 19, 2014 at 3:19 PM, Tony Wasserka notifications@github.com\nwrote:\n\n> This commit broke Dolphin build with wxWidgets 2.9.4, which we technically\n> still support.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dolphin-emu/dolphin/commit/90df5efd01782847f6427efa552b4a2a5a007413#commitcomment-6731281\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6731436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6910467", "body": "It's broken in many more ways than just this line.\n\nOn Mon, Jul 7, 2014 at 10:16 AM, TotalNerd notifications@github.com wrote:\n\n> Hey, your last version of this all it needed was:\n> \n> core->Set(\"CPUCore\", (int)m_LocalCoreStartupParameter.iCPUCore);\n> \n> in ConfigManager.h\n> \n> All that is added is the (int) cast, or at least that's how I fixed it\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dolphin-emu/dolphin/commit/59c938d3a7e21a17d778f346fc9a5ad39159ce6e#commitcomment-6910450\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6910467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6986010", "body": "This causes aborts on exit when using FifoCI:\n\n```\n(gdb) bt\n#0  0x00007f154117dd67 in raise () from /usr/lib/libc.so.6\n#1  0x00007f154117f118 in abort () from /usr/lib/libc.so.6\n#2  0x00007f1541c891f5 in __gnu_cxx::__verbose_terminate_handler() ()\n   from /usr/lib/libstdc++.so.6\n#3  0x00007f1541c87076 in ?? () from /usr/lib/libstdc++.so.6\n#4  0x00007f1541c870c1 in std::terminate() ()\n   from /usr/lib/libstdc++.so.6\n#5  0x000000000044459e in std::thread::~thread() ()\n#6  0x00007f1541180882 in __run_exit_handlers ()\n   from /usr/lib/libc.so.6\n#7  0x00007f15411808d5 in exit () from /usr/lib/libc.so.6\n#8  0x00007f154116a007 in __libc_start_main () from /usr/lib/libc.so.6\n#9  0x0000000000431c7f in _start ()\n```\n\nDolphin in NoGUI mode, using FifoPlayer's LoopReplay=false option (that might be important for shutdown purposes).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6986010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068532", "body": "Why four? Respecting user settings is the right thing to do.\n\nOn Sat, Jul 19, 2014 at 2:00 AM, Sammi-Husky notifications@github.com\nwrote:\n\n> Currently, this increments/decrements by the number of lines set by the\n> user's mouse settings in windows. Some users may not know that you can\n> change it, and might make this seem broken. Would it not be better to just\n> always scroll by four rather then relying on users having their mouse\n> setting at 4?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dolphin-emu/dolphin/commit/9c1b427687e6760b227d164af1ff6cbcbb047bdd#commitcomment-7068484\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069871", "body": "Please make that a vector instead.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069872", "body": "Neither of these (release/reset) should be needed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069911", "body": "But Flush(true) won't do anything if bDirty is false, which it should be\nafter the first call to Flush.\n\nI agree that the thread management is bad, but I don't understand this\ncrash either.\n\nOn Sat, Jul 19, 2014 at 12:43 PM, shuffle2 notifications@github.com wrote:\n\n> fwiw the actual crash here is because Flush(true) is called once before\n> this point, and (on windows std::thread impl), the std::thread::_Id has\n> become 0, causing terminate to be called.\n> The management of flushThread needs to be revised...calling Flush mutliple\n> times shouldn't be an error, and creating a new thread each Flush is silly.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dolphin-emu/dolphin/commit/79e90a1521f338be9ac6d638cbaf70e0ed7002bd#commitcomment-7069905\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069927", "body": "But why is it still running when it's been joined (because we go through if\n(exiting))?\n\n(That same crash/std::terminate also happens on Linux, BTW).\n\nOn Sat, Jul 19, 2014 at 12:50 PM, shuffle2 notifications@github.com wrote:\n\n> Sorry, had my branch inverted :)\n> The terminate is directly after the delete[], when flushThread has its\n> dtor called and it's _Id is _not_ zero (still running). Oops.\n> \n> 00000000`00993a70 b201            mov     dl,1\n> 00000000`00993a72 e879000000      call    Dolphin!MemoryCard::Flush (00000000`00993af0)\n> 00000000`00993a77 488b4b18        mov     rcx,qword ptr [rbx+18h]\n> 00000000`00993a7b e822260500      call    Dolphin!operator delete[] (00000000`009e60a2)\n> 00000000`00993a80 90              nop\n> 00000000`00993a81 83bb8800000000  cmp     dword ptr [rbx+88h],0\n> 00000000`00993a88 7407            je      Dolphin!MemoryCard::~MemoryCard+0x41 (00000000`00993a91)\n> 00000000`00993a8a ff15d0ab2100    call    qword ptr [Dolphin!_imp_?terminateYAXXZ (00000000`00bae660)]\n> 00000000`00993a90 90              nop\n> 00000000`00993a91 48837b6810      cmp     qword ptr [rbx+68h],10h\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dolphin-emu/dolphin/commit/79e90a1521f338be9ac6d638cbaf70e0ed7002bd#commitcomment-7069918\n> .\n## \n\nPierre \"delroth\" Bourdon delroth@gmail.com\nSoftware Engineer @ Z\u00fcrich, Switzerland\nhttp://code.delroth.net/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8957510", "body": "Sorry for that unreviewed master commit. The GH web interface confused me, I thought the \"edit\" button would create a PR for me. Apparently not! :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8957510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8959291", "body": "It's done for the mixing buffers (which have a fixed size of 0x50) already, the rest are all mostly different sizes, or if they're the same size it's a coincidence.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8959291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16839266", "body": "_cough_ unittests _cough_\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16839266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "sepalani": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/44935c23e0da675e12ac30e51f7634b4240b5dda", "message": "MAX_XFB_HEIGHT: PAL value off by two fixed"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b4b80e1be97781ceb5f7581abd854588252e867c", "message": "totaldb.dsy: RecvFrom and SendTo added"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6309", "title": "PPCSymbolDB: two columns symbol map support added", "body": "This PR adds support for two columns symbol maps like the Super Smash Bros. Brawl Korean one.\r\n\r\nRegarding RSBK the symbol map doesn't have a section header (.text) and has symbols like :\r\n```800107a8 DrawNonShadowBorder/[@unnamed@gf_3d_scene_cpp@]/(gf_3d_scene.o)```\r\n\r\nThis PR doesn't deal with the missing header but just with the two columns format issue.\r\nAt least, the symbol map now loads if the \".text\" section header is added. \r\n\r\nReady to be reviewed.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6182", "title": "[WIP] OpenSSL logger", "body": "This PR is based on:\r\n- https://github.com/dolphin-emu/dolphin/pull/6075\r\n- https://github.com/dolphin-emu/dolphin/pull/6176\r\n\r\nIt adds another logger that HLE hooks with OpenSSL functions to log SSL traffic. This method should work with any other functions as long as we know the parameters. It has to be enabled with the config's option \"OpenSSLDumpPCAP\".\r\n\r\nI tested it with a small homebrew and still is WIP as it needs to be tested on other games. It also requires reverse engineering skills to find these functions and add them to the symbol map in order to use HLE hooks. I might provide a OpenSSL signature database file soon if it's reliable.\r\n\r\nI still have to figure out the SSL structure used if I want to retrieve the socket fd that's used.\r\n\r\n**DISCLAIMER:** Keep in mind that logging SSL traffic will most likely log sensitive information. That's why you should be careful if you plan to share these network dumps.\r\n\r\nNeed to be tested on:\r\n- [ ] Amazon Instant Video\r\n- [ ] Crunchyroll\r\n- [ ] Hulu PLUS\r\n- [ ] Netflix\r\n- [ ] Youtube (?) *does it still work if we bypass the error code 20110?*\r\n- [ ] Dragon Quest X (?) *does it use openssl.rso?*\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6176", "title": "Move StepOut to PowerPC", "body": "This PR moves the StepOut code from WxWidgets to PowerPC.\r\n\r\nReady to be reviewed & merged.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6075", "title": "PCAP logging with fake TCP/UDP packet", "body": "This is more an experimental PR than anything else. It's faking Ethernet/IP headers using Dolphin's MAC and a dummy one. However, it lacks several things such as\r\n- Proper TCP packets with flags, sequence number, etc.\r\n- Dolphin's IP is hardcoded, FTM.\r\n- ~It's still WIP as I haven't tested many cases.~\r\n\r\nWhat it does:\r\n- Log SSL traffic\r\n- Log TCP traffic\r\n- Log UDP traffic\r\n- Create a PCAP file (filename with gamename+timestamp) in Dump/SSL\r\n\r\nRegardless, I tested it with different games and it seems to produce a valid PCAP file while logging TCP, UDP and SSL traffic. Config's \"NetworkDumpPCAP\" can be switched to True/False to switch between binary SSL dump and TCP/UDP/SSL PCAP dump.\r\n\r\nI'm quite skeptical regarding this method and really think a custom format (or another one) should probably be used instead within the PCAP file. Even though, after some testing it has interesting advantages such as allowing Wireshark to detect protocols such as SSL over 443 in TCP mode without using ISO's SSL built-ins and the use of other Wireshark features.\r\n\r\nAnyway, ready to be reviewed & merged. Depends on https://github.com/dolphin-emu/dolphin/pull/5978.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5978", "title": "NetworkCaptureLogger: Move SSL logging", "body": "This PR moves the SSL logging part to its own logger class. Not sure, if putting it inside SConfig is a good idea so I'm open to suggestions.\r\n\r\nReady to be reviewed & merged.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5924", "title": "MemoryView: ARAM crash fixed", "body": "I don't know if the ARAM memory view is broken or not but it can be valid with plethora of different address ranges. However, when the address is out-of-bound (such as 0x8000000) it dereferences a nullptr and crashes Dolphin.\r\n\r\nI created the ```HostIsARAMAddress``` function which is checking out-of-bounds based on the ```ReadARAM``` function. Not sure if it's the best way to check that but at least that's a working alternative.\r\n\r\nI'm open to suggestions concerning this function implementation.\r\n\r\nReady to be reviewed & merged.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5499", "title": "LogWindow: Fix phantom logs", "body": "That function is EVIL! It replaces the string with a blank one when an encoding error occurs. Log messages based on other strings like OS's ones (e.g. error strings & cie) might produce invalid characters for that encoding depending on the OS language. That's to say, all these logs will go blank.\r\n\r\nThis PR prevents that to happen and it seems that the system encoding is properly handled without that.\r\n\r\nReady to be reviewed & merged.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5274", "title": "Force SyncGPU on pause", "body": "This PR is an attempt to fix random crashes that happen when the emulator hits a breakpoint (and probably happen when the emulator is paused). It seems that these crashes only happen on dual-core with SyncGPU off, switching to single-core or enabling SyncGPU seems to fix them.\r\n\r\nI try to address these by enabling SyncGPU before pausing the emulator. However, even if it works I'm not sure that's the best way to sync the GPU since I mess with the config on the fly. So I'm open to any suggestions.\r\n\r\nRegardless, this fix the following issue for me: https://bugs.dolphin-emu.org/issues/10132\r\nAnd might fix this one as well: https://bugs.dolphin-emu.org/issues/10071\r\n\r\nReady to be reviewed & tested.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5223", "title": "DVDInterface: Change DVDLowReadDiskID behaviour", "body": "It seems to fix GeckoOS/Neogamma not responding when there is no disc inserted.\r\n\r\nGeckoOS code suggested that the ID read should be zeroed.\r\n\r\nNeed a hardware test to confirm that's the correct behaviour/way to fix this.  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4507", "title": "PowerPC: HostR/W float/double added", "body": "This PR added HostRead/Write functions for floating points.\r\n\r\nReady to be review & merged.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "myfreeweb": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5c1c67d4d8685ec5e1b6d86c1c515efe54d036c0", "message": "passthrough: do not detach kernel driver on FreeBSD\n\nlibusb_detach_kernel_driver() always fails as a regular non-root user:\nhttps://lists.freebsd.org/pipermail/freebsd-usb/2016-March/014161.html"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iwubcode": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/50d96a4411642118c5c4570a12838d2fdd35b27b", "message": "BPStructs: Use static cast for XFB/EFB copies"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e1332b1d7ed4696a4a727906bce62689b8eb329c", "message": "Texture Cache Base: Move PAL vertical scaling to be baked into the texture size.  This saves on a number of multiplications and fixes an issue where we were multiplying the y-scaling factor by the srcRectangle's height + 1 which was causing a crash in some GC titles"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2f7eacd08c8a55116cbf3b213d6ae7a0c71def15", "message": "Video Common: move frame advance and counter logic to only happen when we actually render a frame."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/bb0d6cced4adaf8498fcc0741d40f19177a35dbc", "message": "Game Inis: change Rhythm Heaven Fever to have Immediate Mode disabled which is needed for certain levels"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/febeb49df2f6a0198d97adc1824e0b9451cc47a6", "message": "Game Inis: set Immediate Mode to false for Xenoblade and Zelda Twilight Princess which are known to have frame pacing issues with it enabled"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6222", "title": "[WIP] Emulated wii motion input improvements", "body": "Still working on this.  The goal is to improve emulated wiimote interactions.  Tasks include:\r\n\r\n* Fixing nunchuck swing/shake commands\r\n* Adding intensities to the UI for swing/shake commands (instead of hardcoding them) so games like 'Boom Blox' can be somewhat playable\r\n* Looking at wiimote swings, to see why they don't work in some games like 'No More Heroes'\r\n* Other QOL improvements to make emulated wiimote/nunchuck controls a viable alternative to using a real wiimote\r\n\r\n**I will not be investigating MotionPlus, so please don't ask!**\r\n\r\n\r\nLatest windows build:  https://dl.dolphin-emu.org/prs/pr-6222-dolphin-latest-x64.7z", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5749", "title": "[ DO NOT MERGE ] Collapse efb2ram", "body": "This is a proof of concept based off an idea I had while investigating EFB encoding shaders for Hybrid XFB.\r\n\r\n**The Goal**\r\n\r\nThe goal of this PR is to implement EFB2Ram in a set of operations that can be reused for other tasks.  Additionally, it is to clean up the EFB2Ram code path,\r\n\r\nExamples of tasks that could be reused:\r\n  - Applying a shader to a texture could be used to write a common post-processing system for Hybrid XFB ( #5498 )\r\n  - Getting the data from a texture is something that is already attempted by Abstract Raw Texture ( #5645 ) for moving Image / Video Dumping to be implemented in a backend independent way.  Also would require Hybrid XFB.\r\n\r\n**The Results**\r\n\r\nThe current implementation is Vulkan / D3D only and results are not matching master.  Additionally there are some performance slow-downs (which is to be expected).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "linkmauve": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f5dc8e77375b6fd332b339f9fc388a1f8ef894e7", "message": "Rename constructor parameters to avoid shadowing members"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d9c2de90c0a2c59d71d4928e4724112c51cd6bfe", "message": "Reimplement EFB copy for intensity formats\n\nThis is the direct continuation of #5887, and removes the last usage of\nthe colmat matrix in EFB copy conversion shaders."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/85bb1d7bb073155985e92c88343a6911d7f0752b", "message": "VideoCommon: Reimplement texture format conversion\n\nThis fixes the rendering of the scan visor in Metroid Prime 2: Echoes,\nas seen in https://fifoci.dolphin-emu.org/dff/mp2-scanner/\n\nThe alpha channel was off-by-one on Ivy Bridge due to the rounding\nafter multiplication with colmat.  This commit removes this matrix\naltogether in most cases, making them simple GLSL swizzles."}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4553", "title": "[WIP] Add a GLFW backend for NoGUI", "body": "This PR is very incomplete and only here for CI, but can already use the Vulkan renderer on both X11 and Wayland (and I guess on OSX and Windows too).\r\n\r\nInput is still missing altogether, as is GL rendering, and proper GL context creation.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bobjrsenior": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7589ade972b6e748ecfb4cef589d2753bfae9355", "message": "DolphinWX: Add TB and GQR to Register Window\n\nThe Time Base Register was added under the BAT registers. TBL and TBU\nwere ORed together to get one 64-bit value to display. It is labeled TB\n\nThe Graphics Quantisation Registers were added under the Segment\nRegisters. They are Labeled GQR0-GQR7.\n\nAll new registers are read only."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lioncash": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/e88c457276986c3eb88e98112f7f65ae5ce25803", "message": "DolphinWX: Resolve missing declaration warnings\n\nWithout the include, the prototypes of the functions can't be found"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ed2be3b8e3a032c625dcc5041bcd5c480c8b112e", "message": "DolphinWX/Main: Fix shader compilation dialog translations\n\nFixes issue 10685"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/de82330a74fb0a593302a3099d0e9bc7a14012a1", "message": "GekkoDisassembler: Correct disassembly of fabs, fnabs, and fneg\n\nThese three instructions use the B field (bits 16-20 of the opcode)\nto determine what the operand register is. However, the code was\nusing the path that uses the C field (bits 21-25).\n\nThis amends the code to use the B field (and also fixes the 64-bit PPC\nopcodes, because why not?).\n\nFixes issue 10683."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/050440fd5b81767f5674fb2b9616df449dd8c390", "message": "OGL/TextureConverter: Remove unnecessary using declaration"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/93e85f9a7c655de44bf113eeff986efe422d15e5", "message": "OGL/TextureConverter: Resolve -Wmissing-variable-declaration warnings"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/666af4605eb37094533fc6aa908013f0aa3dd914", "message": "WiiSaveBanner: Resolve a -Wreorder warning"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6ca85dbf0abde5ab014b4d614d94f393667ec0f2", "message": "VKTexture: Add missing override specifier to the other ScaleRectangeFromTexture() prototype"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c7bc16811c173cc8a8c9d66661c5b06953570287", "message": "VKTexture: Remove unimplemented ScaleRectangleFromTexture() prototype"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b0fadbb5dedcf377b425623e6c843685ae45bddb", "message": "D3D/VertexManager: Add missing includes\n\nGets rid of reliance on indirect includes"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/1e7096dd27d9a37a9705dec3ea878db2f9d45693", "message": "D3DBase: Mark file-scope variables as internally linked where applicable"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d6f10fdc1527a7591297c4fe9e6df3071a43f87e", "message": "D3DUtil: Remove unused defines"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/01a92af014ee7815734383573895c34ee89eac92", "message": "D3DUtil: Make file-scope variables internally linked where applicable\n\nAll file scope variables are able to be made internally linked.\n\nCD3DFont is essentially used as an extension to the utility interface, so\nthis is able to be made internal as well, removing a global from\nexternal view."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/518f6a362473fe73b395cb4020c1f8d2eef79d2a", "message": "VideoCommon: Resolve -Wmissing-brace warnings\n\nResolves around 5 -Wmissing-brace warnings on macOS."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/2bd88bdb9fd3e80fc2a3263454a81e603aed14bd", "message": "AbstractTexture: Remove a redundant constructor initializer list entry\n\nThis is already initialized in the class definition. This would\npreviously cause a -Wreorder warning on macOS, as m_config is\ndefined after m_currently_mapped."}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3597", "title": "x64Emitter: Minor changes", "body": "<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.svg\" height=\"40\" alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3597)\n\n<!-- Reviewable:end -->\n", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33580939", "body": "@delroth HdkR had initially commented them out since integer range parsing hadn't been implemented at the time, and it was just forgotten about, I suppose.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33580939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33692664", "body": "+1 for the same reason @delroth stated.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33692664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33876045", "body": "@delroth Never used unique_ptr much. In what way could it be used? (genuinely curious)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33876045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33880027", "body": "@delroth ~~I think for this commit, I'll leave it as is, since it would require me to make changes outside of InputCommon. Though I will read up on unique_ptr for the future~~\n\nActually, let me give this a shot.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33880027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33905205", "body": "@BhaaLseN `emplace_back` and iterating by reference avoids the use of `std::move` :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33905205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33911611", "body": "@BhaaLseN Actually, I'm not so sure. When I replied to your comment, I thought it was a general response, not a specific line comment :x. My bad. I _think_ the current code in the initializer list is correct, but I'm open to being corrected.\n\nIf anyone can clarify if it's necessary, that would be awesome.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33911611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33915996", "body": "@delroth Thanks for the clarification :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33915996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34404130", "body": "Looks good to me. Much cleaner :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34404130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34535527", "body": "Couldn't the string just be tested with the string::empty function instead of hardcoding an empty string to test against?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34535527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34536573", "body": "What? If defaultValue.empty(), then they didn't specify one (or at least that's how it should be). Considering std::string isn't null terminated, that test would work from what I understand.\n\nGenuinely confused here. For what reason would an empty string not be synonymous with not providing a value?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34536573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34537344", "body": "Goddammit, I just realized this was a literal comparison and not a length comparison. Well now I feel stupid :|\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34537344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34826575", "body": "I disagree with the tab being called Speed Hacks, since some of the hacks do more than just affect speed. (ie. Texture Cache Accuracy, Destination Alpha, EFB Copies, etc).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34826575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34951670", "body": "I vehemently disagree with the use of auto (in loops with maps, I can understand this though), since it kills 'immediate readability' of the type in the for/foreach loop, but other than that, it looks fine.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34951670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34955530", "body": "All smiles over here now.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34955530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34957360", "body": "\uff3c\uff08\uff3e \uff3e\uff09\uff0f\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34957360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028334", "body": "Will review it when I get home. Phone is being weird and I can't view\nGithub for whatever reason.\nOn Feb 13, 2014 4:26 PM, \"Pierre Bourdon\" notifications@github.com wrote:\n\n> @lioncash https://github.com/lioncash care to review?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/pull/60#issuecomment-35027918\n> .\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35028334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35033131", "body": "@jordan-woyak Nice, LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35033131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35033412", "body": "@Sonicadvance1 Does logcat say anything about context creation failing on rotation? Not saying this code causes it, just being extra finicky. \n\nIf it doesn't, then it looks fine to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35033412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35816483", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35816483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35822459", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35822459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5212046", "body": "@ExtremeDude2 Because the [GLES30](http://developer.android.com/reference/android/opengl/GLES30.html) class was introduced in API 18. API 17 and below only has up to the [GLES20](http://developer.android.com/reference/android/opengl/GLES20.html) class.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5212046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6780592", "body": "Yeah, just discovered it seems to be getting an access violation here: https://github.com/dolphin-emu/dolphin/blob/f05d3f6e5d6da8be530c0cd4ffaaec0382240ec5/Source/Core/Common/IniFile.cpp#L106 and I really have no idea why this is happening. The behavior should be the same, since the underlying global 'Get' and 'Set' methods called the ones in IniFile::Section\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6780592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7045430", "body": "Looks good to me\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7045430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068605", "body": "I agree with delroth on this. Using a hard constant is not how this should be handled. It was intentionally done to respect the user's mouse settings.\n\nScrolling should always be done by the amount of lines specified in the mouse settings. Doing otherwise is just bad UI design in regards to how lists are supposed to be scrolled (e.g. ideally uniform across applications).\n\nAlso, what if a user does not want to scroll by 4?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068667", "body": "There is\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7070805", "body": "@Sammi-Husky Implemented in #650 \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7070805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7204891", "body": "Looks good to me\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7204891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7263727", "body": "cc @neobrain and @degasus\n\ncullmode 3 is CULL_ALL, however the comment here says if it's CULL_NONE, then this should be executed. This is just a double check, but is this a typo within the comment, or is this actually a bug here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7263727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7415076", "body": "Yep, it's known that this one breaks it. There is a pull request made to fix this, see #789 \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7415076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7417630", "body": "Have you tried doing a full rebuild? \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7417630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8194762", "body": "I'll fix the coding style when I get home sometime today, no worries.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8194762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13394683", "body": "Should this variable be present? If it hits the `if (g_bRecordFifoData)` branch at line 495, it'll be passing the bytes_read as zero due to variable shadowing (initial declaration is at line 462). Just wondering if this was intended.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13394683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15356369", "body": "m_tex_width and m_text_height can be moved to the class body as well.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15356369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "tramzel": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6f6cdd206b1cdb3078ae8b9ebe2716285fbe87e5", "message": "[Android] Add support for true analog triggers.\n\nThis only works if GCPadNew.ini and Dolphin.ini files are not already in the dolphin config folder. Any advice would be helpful. I'd really like to tackle the UI and wiring for deadzones, radius, etc."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "amolloy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/f5839f854aa12194d024cc31ce6401eb2740c65a", "message": "Fix whitespace in and around WiimoteScannerDarwin::~WiimoteScannerDarwin() (linter)."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/8354e89cf1e1cd8b8bb5458820e4e1714d6cc89a", "message": "Break out of the loop waiting for the SearchBT to be done in WiimoteScannerDarwin::FindWiimotes() when the object is destroyed. Allows the application to quit correctly when Continuous Scanning is enabled on macOS."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/d306397bbc64b51e891f689252f77c0cfa31983b", "message": "-[deviceInquiryComplete:error:aborted:]  comes in on the main thread in macOS 10.13, so instead of using CFRunLoopRun()/CFRunLoopStop(), just let the run loop do one pass. This is already in a loop waiting for done to be false. This also means -[deviceInquiryComplete:error:aborted:] should no longer call CFRunLoopStop(). Fixes connecting to Wiimotes in macOS 10.13+, should continue to work as before in 10.12 and below."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aldelaro5": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/b7fdf374e603e4dc63e9e433e300da6279d44092", "message": "debugger: Add the XER to the register view"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hackbar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0067bf1b3ec07139854f15c113468abd1e582e39", "message": "Android: Handle missing mappings for the Moga Pro 2 HID controller.\n\nIt seems to report the GENERIC_1 axis stuck at 1."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Armada651": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7e24b093013d4dac14c4adea31322fd0b527d639", "message": "Merge pull request #6218 from Armada651/uber-interpolation\n\nUberShaderPixel: Fix the interpolation qualifier for interface blocks."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/7dd207931d40a641789c8ee386b9da370b0f5019", "message": "UberShaderPixel: Fix the interpolation qualifier for interface blocks.\n\nFixes MSAA on MacOS with ubershaders enabled."}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3395", "title": "GeometryShaderManager: Use IPD values defined in millimeters.", "body": "This gives the `StereoDepth` value an actual unit and allows GameINIs to provide a scaling factor for every game using the `StereoMeterInUnits` parameter. This new parameter is also very important to support positional tracking once VR functionality is added.\n\nAnother advantage of the `StereoMeterInUnits` parameter is that it allows use to provide a better default convergence value for games that have scaling defined, but have no convergence value. To do this we also change the convergence value to be defined in millimeters instead of game-specific units. However, this is still a point of discussion since it may be undesirable to have the convergence distance change when the scale is adjusted in `StereoMeterInUnits`.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3395)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34286901", "body": "I'm struggling with how to unify the following cleanly:\n\nDInput defines all functions as part of classes for example an effect is created as:\n\n`device->CreateEffect(force_type_names[f].guid, &eff, &pEffect, NULL)`\n\nHowever the Apple ForceFeedback API passes the class as the first argument to globally defined functions:\n\n`FFDeviceCreateEffect(device, force_type_names[f].guid, &eff, &pEffect, NULL)`\n\nTo solve this problem I've been trying use a wrapper class, I'd like to allocate it locally but I run into a problem because the type that I'm wrapping is a pointer. Handling that without hacks means I have to allocate all wrappers on the heap which makes things a mess for memory management. One hack is to turn the wrapper class into something of a fake pointer with the `->` operator returning itself.\n\nI could also try to use inheritance to add the functions to the `device`, then I could just cast the pointers, but I'm not sure how hacky that will turn out. Speaking of hacks, maybe I can make use of the fact that a class implicitly passes itself as the first argument to a function?\n\nI could also do it the other way around and define macros or functions for DInput to convert from the Apple syntax to the DInput syntax. But that would result in mixing the syntax and make it more difficult to maintain. Not to mention what the macros will look like, I can't think of any other method than just using function definitions with all arguments and reorder them like this:\n\n`#define FFDeviceCreateEffect(x, a, b, c, d) x->CreateEffect(a, b, c, d)`\n\nAnyone have any good ideas how to handle this kind of compatibility layer?\n\n**EDIT:** Better idea, don't do any of the above and just allocate the wrappers on the heap. Then implement the IUnknown interface Mac OS X defines to handle ref-counting like DirectInput does. Seems like that's cleanest and most compatible solution.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34286901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34447232", "body": "Done with the implementation, the PR is ready for review. I have tested rumble on both OS X and Windows (with DirectInput) and it works fine on both platforms.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34447232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34550708", "body": "Done amending the PR, please review.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34550708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34550927", "body": "No problem, I enjoy creating compatibility layers as it really brings you back to studying the basics of C++.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34550927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34553299", "body": "There's currently a bug due to which only the Constant Force effect is created even though more effects are supported.\n\nPlease don't merge this yet.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34553299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34568132", "body": "Okay, the PR can be merged when you think it's ready.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34568132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5207172", "body": "It has been said on IRC before, but the NVAPI has a function called `NvAPI_SYS_GetDriverAndBranchVersion`   that should get us a reliable version string.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5207172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6672584", "body": "Looks like I broke \"render to main\" with OpenGL on Windows, will make a fix.\n\nDone: https://github.com/Armada651/dolphin/commit/f408dc72e74c34747075c0099e01898119068e84\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6672584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6986052", "body": "Fixed in 64801008a0102c4603c23a0d02c9782f057b5858.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6986052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7018794", "body": "I think this is a bad change, for my exclusive fullscreen branch it will potentially cause focus loops. It also does not match the function prototype which strongly implies this function returns true when only the _renderer_ is in focus.\n\nIt is also likely this change breaks input, because I faced the same issue, try reverting it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7018794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019017", "body": "On second thought, they're actually fullscreen loops.\n\nIt will cause fullscreen loops because exclusive fullscreen depends on the renderer window being the top-most window. I use `Host_RendererHasFocus()` to detect if the render window has focus and if so then I know I can go to fullscreen.\n\nIf you also let it return true when the main window is on top of the render window then the renderer will enter exclusive fullscreen when it is actually not able to. If you need a function that returns true if any Dolphin window is active I'd rather see it as a new function beside `RendererHasFocus()`.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019084", "body": "Will you address it in your next PR or shall I do it in mine?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019116", "body": "No need, I'll wait.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8767008", "body": "@CarlKenner It's not really necessary to port these changes to DolphinVR, as long as you don't enable the stereoscopic 3D option you can still continue to use your own method of 3D rendering. I'm actually interested in measuring the performance difference between the two different methods.\n\nThe most difficult part in merging will not be layered textures, as degasus explained you can just blit these to standard 2D textures. What's more difficult is that the current geometry shader is not compatible with the projection matrices supplied by the Oculus SDK. You'll have to revert commit 6cacfad010b05cd9d79056a81c4dc7d19ca57273 where compatibility with stereo projection matrices was removed from the geometry shader.\n\nAbout the telescope, if you want to black out one eye when holding the telescope the best method would be to give the telescope texture two layers where the second layer is completely black. The pixel shader will automatically sample the correct layer and it would black out only the right eye. The texture cache can already replace textures by custom ones, all that needs to be added is support for custom textures to be multi-layered. Ofcourse, this should only be done in a VR headset, it would look very strange for a 3D monitor to be black for one eye.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8767008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8770101", "body": "@CarlKenner Have a look at commit 51a4d6a4bef09e7b270ee26e5b2889379819da45 that's when the geometry shader still used a shearing parameter.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8770101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8831662", "body": "Fix one GPU, break another I guess. What are your system specifications?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8831662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8837277", "body": "I think PR #1651 fixes the regression you're encountering.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8837277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8845049", "body": "Good to hear it, I think we've nailed down all regressions related to stereoscopic 3D now.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8845049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13325145", "body": "@shuffle2 Why exactly was this removed? It works fine on my VS2015 installation.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13325145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ligfx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/fc2a0a1988ba0695fa345ee137ccc8b1efc727f9", "message": "FIFOPlayerWindow: don't reset frame/object limit every frame"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ebc547030dffadb9da09ff23c9c115802a897ea4", "message": "BootManager: RestoreSYSCONF without resetting all other config\n\nThis was causing an issue where DolphinQt couldn't save graphics options\n(DolphinWX doesn't hit this code path), because this function was being\ncalled before the in-memory config was flushed to disk.\n\nWith this PR, the in-memory config isn't reset, and only SYSCONF-related\nvariables may get changed."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/5dc3ecdb7244ebecee0b31057774ec5c519af72d", "message": "Qt: show \"Immediately present XFB\" option"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/6b7d5bb80c296f765494f6a11d230a96fa7143d9", "message": "DeviceQualifier: small cleanup"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ac855e2c93319622d644a99ab5f2ece012338fff", "message": "MappingWindow: don't store devq separately from controller default device"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/9551fe1c736fe514d0c70f01c67df9dd89ce501e", "message": "MappingWindow: m_controller is never nullptr\n\nSince GCPadWiiUConfigDialog was made its own class, m_controller will\nnever be nullptr."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/a988a8a4587bf18d8ad8dba36653b803e3a583b4", "message": "AudioCommon: make SetSoundStreamRunning idempotent"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/0baddbf9a8152ab7dd3ab200e516a998a0c9433f", "message": "SoundStream: change Start/Stop to Init/SetRunning/destruct"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/ad4a89d64b0d346553be473c1d877b34b896bfeb", "message": "CubebStream: implement SetRunning"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/c62d83a34b34fe591dca1d3c03354ff915c589f4", "message": "GCPadEmu: only connected if default device connected\n\nThis lets Dolphin know if a configured GameCube Controller should actually\nbe treated as connected or not.\n\nTalked to @JMC47 a bit about this last night. My use-case is that all of\nmy controllers are the same hardware (Xbox One controllers) so share the\nsame configuration (modulo device number). Treating them all as always\nconnected isn't a problem for most games, but in some (Smash Bros.) it\nforces me to go find a keyboard/mouse and unconfigure any controllers\nthat I don't actually have connected. Hotplugging devices (works on macOS,\nat least) + this patch remove my need to ever touch the Controller Config\ndialog while in a game.\n\nThis patch makes the following changes:\n\n- A new `BooleanSetting` in `GCPadEmu` called \"Always Connected\", which\n  defaults to false.\n- `ControllerEmu` tracks whether the default device is connected on every\n  call to `UpdateReferences()`.\n- `GCPadEmu.GetStatus()` now sets err bit to `PAD_ERR_NO_CONTROLLER` if\n  the default device isn't connected.\n- `SIDevice_GCController` handles `PAD_ERR_NO_CONTROLLER` by imitating the\n  behaviour of `SIDevice_Null` (as far as I can tell, this is the only use\n  of the error bit from `GCPadStatus`).\n\nI wanted to add an OSD message akin to the ones when Wiimotes get\nconnected/disconnected, but I haven't yet found where to put the logic."}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/379e28b58ca335443e398692f0f22e36f5040761", "message": "Add GCPadStatus.isConnected boolean"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/commits/bb1c7946572163d461f2fec0ca4889e3cd35b750", "message": "Remove unused GCPadStatus.err"}], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6219", "title": "PixelShaderGen: only use dual-source if bpmem requires dual-src blending", "body": "This fixes [Issue 9373: Depth issues on Mario Kart Double Dash](https://bugs.dolphin-emu.org/issues/9373).\r\n\r\nThere seems to be some interaction between having `ocol1` in the fragment shader and calling `glBindFragDataLocationIndexed`: removing either one fixes the issue. Adding stronger dual source requirements to the fragment shader seemed like the cleaner option.\r\n\r\nBefore:\r\n\r\n<img width=\"583\" alt=\"screen shot 2017-11-25 at 2 18 01 pm\" src=\"https://user-images.githubusercontent.com/594093/33235343-a1827308-d1eb-11e7-8d15-5add1ee6384b.png\">\r\n\r\nAfter:\r\n\r\n<img width=\"583\" alt=\"screen shot 2017-11-25 at 2 17 32 pm\" src=\"https://user-images.githubusercontent.com/594093/33235344-a51960ee-d1eb-11e7-8382-ef08f5a1396a.png\">\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6183", "title": "Add hotplug support to DInput and XInput controller backends", "body": "Creates a third backend, Win32, which encompasses the existing XInput and DInput backends, and ask them to repopulate devices when it sees a change event.\r\n\r\nUnfortunately, there's not really a great way to map change events to XInput and DInput devices. So, when a change event happens, _all_ XInput and DInput controllers are removed and re-added. Stupid, but works. It's how SDL does it too.\r\n\r\n(There's supposedly a way to map events to DInput devices, but the Internet claims it's sketchy. There _is_ a straightforward way to do it for RawInput, if that's ever used in the future.)", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6180", "title": "Add hotplug support to SDL2 controller backend", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6157", "title": "TraversalServer: use C++'s <chrono> and <random>", "body": "Simpler than `gettimeofday` and reading `/dev/urandom`, and cross-platform to boot!", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6143", "title": "CMake: add DOLPHIN_CXX_FLAGS option", "body": "Lets you do fun stuff like adding extra warnings + warnings as errors for Dolphin only.\r\n\r\nClosed the original, #6137, in a momentary lapse of thinking.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6129", "title": "(needs 6134) AudioCommon: allow changing stream parameters (backend, DPL2, etc.) at runtime", "body": "The main idea here is to stop storing the global Mixer instance as a member variable on sound streams. With that done, sound streams can be created and destroyed at runtime without affecting the rest of the audio system.\r\n\r\nThis lets you do cool things like changing the backend or enabling/disabling DPL2 decoding at runtime (Interesting discovery: on my computer, a decoded DPL2 stream is significantly louder than the stereo stream).\r\n\r\nCurrently needs #6130, #6133, and #6134.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6126", "title": "InputCommon: Merge ControlReference and Control", "body": "Currently, there's:\r\n- a `ControllerEmu::Control` class, which holds a configuration name, a displayable name, and a unique_ptr to a ControlReference\r\n- a `ControlReference` class, which holds an expression, a range, and functionality for binding to real hardware controls.\r\n\r\nI *sort of* see why they might have been separated, since the config name and displayable name aren't needed for ControlReference's functionality. However, it splits up config information between the two different classes, and makes the model of emulated controllers more complex and confusing. For example, code that access controller bindings has to go through an extra level of indirection (`control->control_ref`), as opposed to the numeric and boolean settings simple access.\r\n\r\nAnother weird bit is that ControlGroup keeps a vector of unique_ptrs to Controls, presumably to keep the correct vtables for the Input and Output subclasses. But, those subclasses don't do or have anything different, except for constructors that pick which ControlReference subclass to use!\r\n\r\nThis PR merges the two classes:\r\n- ControlReference and ExpressionParser are moved into the ControllerEmu namespace (which makes sense: they both deal with user configuration);\r\n- ControlReference gains the two member variables, `name` and `ui_name`, that Control held; and\r\n- all use of Control is converted to ControlReference.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5994", "title": "BlockingLoop: cleanup Run() logic using compare_exchange_strong", "body": "Rather than trying to manually handle state changes that might have occurred between a load and a store, use std::atomic's compare_exchange_strong. Also changes the state machine from `Need Execution -> Last Execution -> Done -> Sleeping` to `Need Execution -> Executing -> Done -> Sleeping`.\r\n\r\nBlockingLoopTest takes the same amount of time to run before and after this change (~260ms on my computer).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5966", "title": "[DO NOT MERGE] PropertiesDialog: add and use WrapInVerticalScrollArea", "body": "Before (too tall to fit on my monitor):\r\n\r\n<img width=\"481\" alt=\"screen shot 2017-08-22 at 4 37 50 pm\" src=\"https://user-images.githubusercontent.com/594093/29592413-aa4d114c-8758-11e7-90e5-e425fe40d845.png\">\r\n\r\nAfter:\r\n<img width=\"483\" alt=\"screen shot 2017-08-22 at 5 46 37 pm\" src=\"https://user-images.githubusercontent.com/594093/29593928-214692ec-8762-11e7-8566-8667dee7a2d2.png\">\r\n<img width=\"481\" alt=\"screen shot 2017-08-22 at 5 46 45 pm\" src=\"https://user-images.githubusercontent.com/594093/29593930-2263255a-8762-11e7-8ce9-810a7fe3094d.png\">\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5813", "title": "Remove region tags from translations that don't need them", "body": "The Danish, Malay, and Romanian translations all specify a region (Denmark, Malaysia, and Romania, respectively). I'm not a translator, so I'm not sure why they might be this way, but I'm going to put forward some arguments from a software perspective:\r\n\r\n- The language and region tags are not guaranteed to match up. macOS is possibly the weirdest here, since it generates tags like \"da-US\" (Danish as spoken in the United States). In these cases, the region probably doesn't matter, and we want to use the translation anyways.\r\n\r\n- To add some numbers to this, according to Debian's metrics the region-less tags are **far** more popular: [~480K strings are translated to \"da\"](https://www.debian.org/international/l10n/po/da), [~130K to \"ms\"](https://www.debian.org/international/l10n/po/ms), and [~300K to \"ro\"](https://www.debian.org/international/l10n/po/ro). Only ~8K are translated to each of [\"da_DK\"](https://www.debian.org/international/l10n/po/da_DK), [\"ms_MY\"](https://www.debian.org/international/l10n/po/ms_MY), and [\"ro_RO\"](https://www.debian.org/international/l10n/po/ro_RO).\r\n\r\n- These language are stored without the region tag when configured manually by the user from the interface pane.\r\n\r\n- Qt will refuse to match a region-less tag, like \"da\", against a language with a region tag, like \"da-DK\". It loosely follows [RFC 4647 \"Matching of Language Tags\"](https://tools.ietf.org/html/rfc4647), which specifically notes that tags can be matched against less specific ones, but should not be matched against more specific ones.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5676", "title": "DSP: remove old, unused ReadAnnotatedAssembly", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5674", "title": "[RFC/POC] DolphinQt2: make connecting widgets to settings more declarative", "body": "The point of this: **write less code.** That means faster development, and easier UI changes.\r\n\r\nHere's a quick taste of the new way:\r\n\r\n```c++\r\nBindControlToValue(m_checkbox_cheats, SConfig::GetInstance().bEnableCheats);\r\nBindControlToValue(m_combobox_speedlimit, SConfig::GetInstance().m_EmulationSpeed,\r\n                   [](float speedlimit) { return static_cast<int>(std::round(speedlimit * 10)); },\r\n                   [](int index) { return index * 0.1f; });\r\nauto* cpu_emulator_engine = new QButtonGroup(this);\r\ncpu_emulator_engine->addButton(m_radio_interpreter, PowerPC::CPUCore::CORE_INTERPRETER);\r\ncpu_emulator_engine->addButton(m_radio_cached_interpreter,\r\n                               PowerPC::CPUCore::CORE_CACHEDINTERPRETER);\r\ncpu_emulator_engine->addButton(m_radio_jit, PowerPC::CPUCore::CORE_JIT64);\r\nBindControlToValue(cpu_emulator_engine, SConfig::GetInstance().iCPUCore);\r\n```\r\n\r\nversus the current way:\r\n\r\n```c++\r\nconnect(m_checkbox_cheats, &QCheckBox::clicked, this, &GeneralPane::OnSaveConfig);\r\nconnect(m_combobox_speedlimit,\r\n        static_cast<void (QComboBox::*)(const QString&)>(&QComboBox::activated),\r\n        this, &GeneralPane::OnSaveConfig);\r\nconnect(m_radio_interpreter, &QRadioButton::clicked, this, &GeneralPane::OnSaveConfig);\r\nconnect(m_radio_cached_interpreter, &QRadioButton::clicked, this, &GeneralPane::OnSaveConfig);\r\nconnect(m_radio_jit, &QRadioButton::clicked, this, &GeneralPane::OnSaveConfig);\r\nLoadConfig();\r\n\r\nvoid GeneralPane::LoadConfig()\r\n{\r\n  m_checkbox_cheats->setChecked(SConfig::GetInstance().bEnableCheats);\r\n\r\n  int selection = qRound(SConfig::GetInstance().m_EmulationSpeed * 10);\r\n  if (selection < m_combobox_speedlimit->count())\r\n    m_combobox_speedlimit->setCurrentIndex(selection);\r\n\r\n  switch (SConfig::GetInstance().iCPUCore)\r\n  {\r\n  case PowerPC::CPUCore::CORE_INTERPRETER:\r\n    m_radio_interpreter->setChecked(true);\r\n    break;\r\n  case PowerPC::CPUCore::CORE_CACHEDINTERPRETER:\r\n    m_radio_cached_interpreter->setChecked(true);\r\n    break;\r\n  case PowerPC::CPUCore::CORE_JIT64:\r\n    m_radio_jit->setChecked(true);\r\n    break;\r\n  default:\r\n    break;\r\n  }\r\n}\r\n\r\nvoid GeneralPane::OnSaveConfig()\r\n{\r\n  SConfig::GetInstance().bEnableCheats = m_checkbox_cheats->isChecked();\r\n  SConfig::GetInstance().m_EmulationSpeed = m_combobox_speedlimit->currentIndex() * 0.1f;\r\n\r\n  int engine_value = 0;\r\n  if (m_radio_interpreter->isChecked())\r\n    engine_value = PowerPC::CPUCore::CORE_INTERPRETER;\r\n  else if (m_radio_cached_interpreter->isChecked())\r\n    engine_value = PowerPC::CPUCore::CORE_CACHEDINTERPRETER;\r\n  else\r\n    engine_value = PowerPC::CPUCore::CORE_JIT64;\r\n  SConfig::GetInstance().iCPUCore = engine_value;\r\n}\r\n\r\n```\r\n\r\nThis adds a new `QtUtils/Bind.h` header containing the `BindControlToValue` function and various machinery to make it work (there's some template magic going on, so... help pls?). Supporting for additional widgets is added by specializing a traits struct with two, simple properties: `SetFunc` and `SignalFunc`.\r\n\r\nAs an initial proof-of-concept, the General settings pane has been modified to use these new functions.\r\n\r\nI haven't worked out how this applies to observable properties (the ones with signals in Settings.cpp) or non-SConfig properties (ControllerEmu stuff, for example) yet.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5374", "title": "[WIP] FIFO logs: add VI register state and move frame end logic to Video_BeginField", "body": "(Formerly titled \"Add VideoInterface register state to FIFO logs\".)\r\n\r\n- Marks FIFO log frames in `Video_BeginField` instead of `RenderToXFB`\r\n- Adds VideoInterface register state to FIFO logs\r\n\r\nThis fixes a couple FIFO issues:\r\n\r\n- FIFO logs played back at 120 FPS/VPS, which is too fast for most (all?) games. Adding VideoInterface register state throttles Dolphin to the correct VPS, and marking frames in `Video_BeginField` instead of `RenderToXFB` results in the correct FPS/VPS ratio.\r\n\r\n    Example: a FIFO log of Godzilla: Destroy All Monsters running at 40FPS in PAL50 mode:\r\n\r\n    \r\n    <img width=\"182\" alt=\"screen shot 2017-05-29 at 9 23 33 pm\" src=\"https://cloud.githubusercontent.com/assets/594093/26568053/2d1feaf4-44b5-11e7-9b67-ffa588f3b88d.png\">\r\n\r\n\r\n- FIFO player didn't work in Real or Virtual XFB mode. Setting the VI registers, which contain the XFB location, properly lets this work.\r\n\r\n- Dolphin couldn't count frames properly during direct writes to XFB (e.g. SSX Tricky intro videos) because `RenderToXFB` is never called. Marking frames in `Video_BeginField` fixes this. Admittedly, this is pointless, since FIFORecorder doesn't record anything (unless you like looking at the green color of a blank XFB).\r\n\r\n- FIFO logs with unusual VI settings were displayed in an incorrect aspect ratio.\r\n\r\n    Example: Super Monkey Ball 2 in \"Letterbox\" mode, before and after:\r\n\r\n   \r\n    <img width=\"161\" alt=\"857f4032-30fb-11e7-9ed2-87381e39eaba\" src=\"https://cloud.githubusercontent.com/assets/594093/26567662/d61c3116-44b1-11e7-8183-4bad3f8d094d.png\"> <img width=\"161\" alt=\"8797329e-30fb-11e7-83e5-b3cc58f4273d\" src=\"https://cloud.githubusercontent.com/assets/594093/26567663/d6f06ca6-44b1-11e7-87ea-e41c714a1ab8.png\">", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4992", "title": "OGL: crop option now crops as well as scales", "body": "The existing code always scales up the image, relying on the implicit cropping provided by the window. It only works for cropping on one dimension (e.g. if the window is wider than 4:3, and the image is taller than 4:3).\r\n\r\nHere's a (hopefully) representative ASCII picture:\r\n\r\n```\r\n                image \r\n               +------+\r\n           +--------------+\r\nwindow ->  |   |      |   |\r\n           |   |      |   |\r\n           |   |      |   |\r\n           +--------------+\r\n               +------+\r\n```\r\n\r\nThis PR changes the VideoCommon code to expose a `CropRectangle`, and changes the OpenGL backend to only render within that area. The other backends still do not properly crop, but no longer scale when they shouldn't.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cbdevnet": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6311", "title": "Have dolphin-emu-nogui conform to the _NET_WM_PID protocol", "body": "To allow our management application to map the window opened by `dolphin-emu-nogui` to the spawned child pid, we use the `_NET_WM_PID` protocol as [documented](https://specifications.freedesktop.org/wm-spec/1.3/ar01s05.html).\r\n\r\nWhen running `dolphin-emu` (with GUI), all required window properties are set. `dolphin-emu-nogui` however does not even set class hints.\r\n\r\nThis patch sets the `_NET_WM_PID` property of the emulator window, as well as the `WM_CLIENT_MACHINE` property, which is required as per spec.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TraceBullet": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6303", "title": "Fix Auto-Adjust Window Size option making the window too large", "body": "Fixes https://bugs.dolphin-emu.org/issues/10658\r\n\r\nWhen using the Auto-Adjust Window Size option, SetWindowSize was applying the scale factor to the already-scaled size, causing the window to become massive for anything above 1x IR.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ZexaronS": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6296", "title": "Warn on missing custom texture folder", "body": "Except I don't know yet of a better way make it stop proceeding, currently it will just go ahead and try loading textures from the nonexisting path, it won't find any so it will report that it loaded 0 textures in 0 seconds.\r\n\r\nThere could be some check to see if the DoFileSearch found anything. For example checking `if filenames == 0` - but what would be the command to stop it?\r\n\r\nI was looking into `HiresTextures::Shutdown()` but I thought it wasn't going to do what I think it would do.\r\n  ", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6050", "title": "Update Contributing.md - clang-format extension for VS2017 (fixed)", "body": "I was under the impression that I would have to make a new branch and start over completely, thankfully not.\r\n\r\nIf anyone has any information on how to make clang-format run without creating ,TMP files it would be helpful as the existing command doesn't prevent this.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5996", "title": "New Low Mem System For Custom Texture Prefetching, with log-only Texture Counter", "body": "This is the first successor part of the retired #5768 , with an added texture counter which was salvaged from the cancelled attempt to count textures per-extension, as it only takes a few lines of code, I hoped it wouldn't require a totally separate PR.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gwicks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6225", "title": "Android: Basic implmentation of per-game settings ", "body": "Doesn't fully implement loading the parent ini's from the APK, since there are several other PRs open aiming to do that. Holding off on fully implementing cheats for now (keeping the tabbed layout so that it's easier to add later on).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LAGonauta": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6171", "title": "Added DPL2 decoder to XAudio2 and XAudio2_7 backends.", "body": "I cherry picked this commit from PR #5235, as suggested by @ligfx.\r\n\r\nTested on Windows 8.1 x64, works fine. I will test later on Windows 10 x64, but it would be great if someone could test it on Windows 7.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5235", "title": "Change FFDShow DPL2 decoder to FreeSurround", "body": "Added the FreeSurround decoder to the mixer, and removed the legacy FFDShow decoder.\r\nThe decoding is done through the new SurroundDecoder class using a FixedSizeQueue as a ring buffer as the decoder needs a fixed amount of frames to be able to decode the surround information.\r\n\r\nTested on XAudio2 (with PR #6171), OpenAL, and Cubeb on Windows.\r\nAlso tested on OpenAL and Cubeb on Ubuntu, but PulseAudio still needs testing.\r\n\r\nThe upmix works really well, but I am not sure if we should set SURROUND_FRAMES_PER_CALL to 512 or 256. Both work, but in theory the algorithm has more quality with 512, less steering glitches and less crosstalk. The best quality is with SURROUND_FRAMES_PER_CALL set to 4096, but the latency seems to be equivalent to time-stretching with a buffer size of 80 ms.\r\n\r\nFixes [bug #9047](https://bugs.dolphin-emu.org/issues/9047).\r\n\r\nThe new decoder seems to have some kind of incompatibility with some distros (Ubuntu 16.04, for example) as it causes glitches on decode, but unlike the current decoder the decoding is accurate and also doesn't generate (or rarely generates) samples greater than 1.0f. I will investigate the glitches later.\r\nWorks perfectly fine on Ubuntu 17.04+ and on Mac.\r\n\r\nAny suggestion is greatly appreciated :)\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bb010g": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6152", "title": "Enforce UTF-8 now that VS handles it sanely", "body": "Follow up to #5541. [Fixed in 15.3](https://developercommunity.visualstudio.com/solutions/93089/view.html).\n\n<!-- Reviewable:start -->\n---\nThis change is\u2002[<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/6152)\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858692", "body": "Couldn't this be replaced by a range-based for?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858702", "body": "Isn't `&it->` equivalent to `it.`?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858706", "body": "This should be moved into the for head.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858709", "body": "Range-based for again\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858712", "body": "Again with the reference to immediate deferencing access.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858718", "body": "`r->value`\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858721", "body": "`it.second.value`\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858725", "body": "It seems that `auto` is used a bit excessively in these bodies. Could at least the commonly used variables have explicit types?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858846", "body": "Moving `++it` into the for head doesn't change anything besides look. And [the spec](http://en.cppreference.com/w/cpp/language/range-for) says that a range-based for would be virtually identical, differing only in that you would have to say `it.second`.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858890", "body": "What I'm suggesting is a semantically preferred way of saying the same you have right now. That `++it` is currently being called at the end of the for loop body, and the same thing would happen if it was moved to the third clause of the header. Ninja edit: I derped on the range-based for and missed the `it` reassignment. Anyhow, moving `++it` to the header does the same thing; it's just cleaner to see the iteration at the top.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858914", "body": "The `continue;` would still skip the iteration step; [see here](http://en.cppreference.com/w/cpp/language/for).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "HannesMann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6146", "title": "Netplay: Add Quality of Service (QoS) support", "body": "This adds support for tagging outgoing packets with a Quality of Service bit. \r\nThis should make Dolphin get prioritized over other network traffic in routers, which means you can download and stream while playing NetPlay without packet drops or input lag.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Bumrang": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6138", "title": "Added Windows support for MemoryWatcher", "body": "This adds Windows support for MemoryWatcher. It opens a Windows named pipe at `\\\\\\\\.\\\\pipe\\\\Dolphin Emulator\\\\MemoryWatcher` and sends everything there.\r\n\r\nSo far only tested against SSBM, everything looks to works OK. Compiles normally on Windows 10 and Linux (have not tested OSX).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "beholdnec": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6125", "title": "Utilize Eigen math library", "body": "This PR imports the Eigen math library (version 3.3.4) and uses it to perform matrix math in some parts of VideoCommon and WiimoteEmu, replacing some of our older ad-hoc matrix code. Our code becomes more concise, and we gain a stable, high-quality math library that we can use in the future.\r\n\r\nEigen was chosen because:\r\n- It is licensed under the MPL2 which is compatible with our license.\r\n- It consists purely of headers and does not rely on third-party libraries.\r\n- It has powerful matrix classes -- matrices are generic over type and size -- and in fact, a vector in Eigen is just a matrix with one column.\r\n- It is reputed to be both fast and easy to use.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5843", "title": "[RFC / WIP - DO NOT MERGE] Support I*, IA*, and RGB565 host textures", "body": "This branch allows video backends to support I8, IA4, IA8 and RGB565 texture formats directly. Video backends report their format support to TextureCacheBase, which then chooses the most efficient format to upload to the GPU. Currently, only Vulkan implements these texture formats. For other backends, textures are still decoded to RGBA8.\r\n\r\nWhy is this better? Currently, we decode all textures to RGBA8 format. This drastically inflates memory traffic from CPU to GPU - For instance, decoding I4 to RGBA8 increases the number of bytes 8 times. In this PR, I4 textures are decoded to I8 format for a mere 2x increase. CPU->GPU memory traffic is a performance bottleneck, though admittedly, this would have been more relevant several years ago.\r\n\r\nThis branch is a work in progress - it should not be merged right away, but I am looking for testing and comments on the code.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5792", "title": "Utilize ComPtr in D3D, DInput and XAudio2 backends", "body": "This PR uses COM smart pointers to manage COM pointers.\r\n\r\nThis makes it easier to avoid resource leaks of COM objects.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5788", "title": "VideoCommon: Use __restrict pointers in texture decoders.", "body": "Also, add some miscellaneous code improvements.\r\n\r\n__restrict pointers allow the compiler to perform optimizations that it could not otherwise prove safe, such as auto-vectorization. Basically, the compiler can't know that a write to one pointer will interfere with a read from another pointer, so it will generate memory-reads even if they aren't needed.\r\n\r\nI used [Compiler Explorer](https://gcc.godbolt.org/) to make sure these changes lead to better code.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NickDriscoll": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6117", "title": "Lua scripting (Gamecube only)", "body": "This branch adds a Lua console and Lua scripting capabilities to the Dolphin Emulator.\r\n\r\nSee the documentation on how to write scripts for Dolphin [Here](https://github.com/NickDriscoll/dolphin/blob/Lua_scripting/Lua.md)\r\n\r\nIt's GameCube only for now simply because I've had to sift through the source code myself to discern how Dolphin works, and I couldn't figure out Wiimotes.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CyberShadow": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6116", "title": "GZ2E01: Add Quick Item Select ActionReplay code", "body": "As suggested in https://github.com/dolphin-emu/dolphin/pull/6105, this adds the AR code part to allow single-key item selection for Legend of Zelda: Twilight Princess (GCN/NA), an enhancement I found extremely useful.\r\n\r\nThe ActionReplay code was generated by this program:\r\nhttps://gist.github.com/CyberShadow/02da7df8322400840f8de83d95d6f2ed#file-ar_tpkey-d\r\n\r\nI'll add the remaining part (description + input profile) to the wiki once this is merged.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Barath-Kannan": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6106", "title": "Add Hotkey for Cycling between Controller Profiles", "body": "Only implemented in WX - Couldn't get the Qt version to build without crashing.\r\n\r\nThis allows you to assign a hotkey to cycling forward and backwards between controller profiles, and filter the cycling on a string. These options appear under \"Wii and Wii Remote\" tab in \"Hotkey Settings\".\r\n\r\nReally important feature IMO to make the majority of Wii games playable while using anything other than a Wiimote - a standard ps or xbox controller can't do anywhere near as much as a Wii controller but being able to assign a button to switching profiles makes switching between IR / swing / nunchuk stick much easier.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RisingFog": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6023", "title": "[DO NOT MERGE] Adjust COMMAND_LATENCY_US to fix Ed Edd n Eddy", "body": "This change has not been hardware verified at all, and is assumed to be a hack until otherwise noted.\r\n\r\nThe possible real issue here is with ~~lines 1059 to 1065, with the TODO comment seemingly pointing to this possible issue.~~ line 1208, changing this to 382 while keeping everything else the same works.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4317", "title": "[WIP/RFC] Add GPU Overclock to Advanced Menu", "body": "![](http://i.imgur.com/aXctXZZ.png)\n\nThis adds GPU Overclocking to the Advanced menu. Requires SyncGPU to be enabled for overclocking to be used. SyncGPU is always enabled in single core mode.\n\nThis is untested, and may have some slight changes in look and possibly how it works, so marking as WIP/RFC.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4317)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4265", "title": "[WIP] TAS dialog: Toggle analog inputs between TAS and regular input", "body": "Rebase of #3609 .\n\nI've been considering an alternative UI element instead of using a lock/unlock bitmap toggle. Possibly using a checkbox instead. Would like some comments on this to see what's needed.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4265)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8209978", "body": "It can still be turned on and off during gameplay, it's simply moving it from VideoConfig to ConfigManager\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8209978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "shuffle2": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/6020", "title": "Fix sram accesses.", "body": "The meat of the PR is just being a little less dumb (but still dumb) about how to interpret the address sent to the \"ipl\" device.\r\n\r\nNotably, rtc value is just maintained in the sram region, so I merged it into `struct Sram`.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6010075", "body": "integer overflow\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6010075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6251831", "body": "Please carefully read this: http://msdn.microsoft.com/en-us/library/e9b52ceh.aspx\n\n> _MCW_PC (Precision control)\n> (Not supported on ARM or x64 platforms.)\n\nIndeed, it tells the truth:\n\n```\nDebug Assertion Failed!\n\nProgram: C:\\src\\dolphin\\Source\\..\\Binary\\x64\\DolphinD.exe\nFile: f:\\dd\\vctools\\crt\\fpw32\\tran\\amd64\\ieee.c\nLine: 102\n\nExpression: (mask&~(_MCW_DN|_MCW_EM|_MCW_RC))==0\n```\n\nI haven't looked deeply into this, but probably this commit should just be reverted.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6251831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6441550", "body": "I will try reproing the bug via bcd entry flag in a few days.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6441550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6455842", "body": "Yea, repros here. The linker can simply optimize out the symbol, so it doesn't even exist in the binary. With some hack to force it to be kept in, it works correctly. I'll check to see if there's a cleaner way to do that than what I'm doing now...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6455842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6477260", "body": "I, also, feel the pain of supporting dumb users.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6477260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069905", "body": "fwiw the actual crash here is because Flush(true) is called once before this point, and (on windows std::thread impl), the std::thread::_Id has become 0, causing terminate to be called.\nThe management of flushThread needs to be revised...calling Flush mutliple times shouldn't be an error, and creating a new thread each Flush is silly.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069918", "body": "Sorry, had my branch inverted :)\nThe terminate is directly after the delete[], when flushThread has its dtor called and its _Id is _not_ zero (still not joined). Oops.\n\n```\n00000000`00993a70 b201            mov     dl,1\n00000000`00993a72 e879000000      call    Dolphin!MemoryCard::Flush (00000000`00993af0)\n00000000`00993a77 488b4b18        mov     rcx,qword ptr [rbx+18h]\n00000000`00993a7b e822260500      call    Dolphin!operator delete[] (00000000`009e60a2)\n00000000`00993a80 90              nop\n00000000`00993a81 83bb8800000000  cmp     dword ptr [rbx+88h],0\n00000000`00993a88 7407            je      Dolphin!MemoryCard::~MemoryCard+0x41 (00000000`00993a91)\n00000000`00993a8a ff15d0ab2100    call    qword ptr [Dolphin!_imp_?terminateYAXXZ (00000000`00bae660)]\n00000000`00993a90 90              nop\n00000000`00993a91 48837b6810      cmp     qword ptr [rbx+68h],10h\n```\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069935", "body": "In my repro, first call to Flush(false) creates the thread (from delayed write). Note it sets dirty=false right away. Then first Flush(true) is called and it's not dirty, so there is no join. Then second Flush(true) again does nothing. Then std::thread dtor is called and it dies.\nNote that JoinThread() is also never called (only from https://github.com/dolphin-emu/dolphin/blob/2c8393c899f7be2a38cbc1e9808431ec66de6cba/Source/Core/Core/HW/EXI_DeviceMemoryCard.cpp#L435 ).\n\nOf course, the thread isn't actually executing anymore, it's just a violation of the std::thread api to delete without join (or, i assume detached wouldn't care either).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7687633", "body": "Ha, I thought that might be an issue, but I don't think it's enabled on buildbot / equivalent available on msvc :(\nI think the warning is slightly broken, as the compiler can quite easily tell there is no dependency conflict here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7687633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7708041", "body": "I already fixed it, and the warning is broken because it doesn't matter in which order the compiler orders the statements in this case. Also it's not \"re-ordering\" anything, the order is well defined to follow declaration order written in the declaration of the class, not the initialization list of a constructor of a class.\n\n> Order of initialization of bases and members is defined in 12.6.2 [class.base.init]/5.\n\nSure, the compiler is being nice and warning you about this...but it does so when it's unnecessary. The compiler can prove there is no dependency between the initializers so it's just \"who cares\".\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7708041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8825103", "body": "Why is Qualcomm mentioned extensively in this \"Windows/Intel\" bug? From the code it looks like the bug exists on Qualcomm and Intel; you've just written the commit message to make it sound like exclusively a Windows problem.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8825103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8825110", "body": "Anyways, did you report the bug to the affected people? Are you sure it's not some weird part of the GLSL spec?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8825110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8959281", "body": "I think it would be nice to typedef the std::array usage in these files.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8959281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "GradyMoran": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5983", "title": "WX: Custom Load Path", "body": "implements https://bugs.dolphin-emu.org/issues/9970\r\n\r\nOnly on WX. \r\n\r\nThis is my first contribution to dolphin, so criticism is welcome.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chaseholdren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5893", "title": "Added Player ID to Controller Port Assignment dialog.", "body": "This change will make it easier to assign controller ports when all players just join with the default name 'Player'.\r\n\r\n![image](https://user-images.githubusercontent.com/20975532/29005761-5a5c176e-7ab0-11e7-9d09-b06ae2454210.png)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "redsoxfantom": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5875", "title": "Issue #9983: Add filesizes to FileSystem tab", "body": "This adds extra text to each file and folder on the tree of files on the FileSystem Tab. This text displays the size of the file in a human readable format like so:\r\n\r\nDisc\r\n+- Folder1\\ [10.05 MiB]\r\n   +- File1 [10.02 MiB]\r\n   +- File2 [25.00 KiB]\r\n   +- Folder2\\ [543 B]\r\n      +- File3 [543 B]\r\n+- File4 [43.07 MiB]\r\n\r\nThis change implements the fix for issue [9983](https://bugs.dolphin-emu.org/issues/9983)", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akien-mga": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5850", "title": "Detect and use system-wide pugixml if available", "body": "The included `FindPugiXML.cmake` module is as basic as it can get, so will likely only suffice if PugiXML is installed in the canonical `/usr/include` and `/usr/lib` or `/usr/lib64` paths on Linux.\r\n\r\nIt works on Mageia 6 x86_64 with:\r\n```\r\n/usr/include/pugiconfig.hpp\r\n/usr/include/pugixml.hpp\r\n/usr/lib64/libpugixml.so\r\n```\r\nfrom pugixml 1.7.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jawnnypoo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5825", "title": "Android updates", "body": "This updates a few things for the Android build. This includes:\r\n\r\n- Bumping Android build tools to version 2.3.3\r\n- Gradle wrapper to 4.0.1\r\n- Adds the `google()` maven repository so that most dependencies are pulled in automagically from Google\r\n- RxJava/RxAndroid 2.0\r\n- Change margins of FAB to 16dp to match material guidelines\r\n\r\n:smile: ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grimpunch": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5804", "title": "Qt: Implement Wii settings pane", "body": "![](https://puu.sh/wPdwV/ca12b903a4.png)\r\nCurrent settings menu is on the left, menu with my additional settings on the right.\r\nI ported over the volume slider for the wiimote speaker and the checkbox toggle for enabling the rumble feature on wiimotes.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "macman31": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5799", "title": "USB timeout values: increase and unify to 5000ms", "body": "This allows Dolphin to use USB devices shared over the network if the\r\nnetwork adds >16ms latency to USB interrupts responses.\r\n\r\nThis is needed for game adapters and Bluetooth adapters shared with\r\nsolutions like VirtualHere on the Steam Link or via usbip for example,\r\nif the remote device is not directly connected over a good Ethernet\r\nnetwork.\r\n\r\n5000ms is to absorb any network latency burst that might occur because\r\nof WiFi/etc. while still not indefinitely making threads hang in case\r\nUSB interrupts fail for some reason.\r\n\r\nBug report: https://bugs.dolphin-emu.org/issues/10408", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Orphis": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5624", "title": "cmake: Windows fixes", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5622", "title": "wx /permissive- fixes", "body": "The internal list container from wx doesn't compile with /permissive- on Windows, so we switch to the implementation using the STL instead (just as on the other platforms).\r\n\r\nThe second change fixes some ambiguity in MSVC since both types can be converted to each other and the ternary operator can't work then.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4936", "title": "cmake: Cleanup target and file lists by putting everything in folders", "body": "Targets are split between \"Externals\", \"Dolphin\" and \"Tests\".\r\nFiles are mirroring the on-disk layout.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Neui": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5562", "title": "Add \"File Type\"-column to the game list", "body": "Implements https://bugs.dolphin-emu.org/issues/10304 for both interfaces, DolphinWX and DolphinQt.\r\n\r\nDisplays the blob-type of the file as an column as a replacement of the blue text that used to indicate an compressed image. It uses the `DiskIO::BlobType`-enum because file extensions can be unreliable.\r\n\r\nIt introduces new strings to be translated, that aren't included in this PR.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4532", "title": "Use $DOLPHIN_EMU_PATH as an alternative for the user directory", "body": "Allow to use the environment variable `DOLPHIN_EMU_PATH` to set the user directory. This has the advantage to be declared in their `.profile` or similar files, so they don't always have to use the command line parameter `-u` (or symlinking the default directory).\r\n\r\nPlease note that when there's no trailing slash (`/`), it'll create directories like (assuming `DOLPHIN_EMU_PATH` is set to `/tmp/dolphin`) `/tmp/dolphinGC/`, `/tmp/dolphinConfig/`, et cetera.\r\n\r\nThis was only made for POSIX systems and Mac OS X, because Windows got the somewhat similar Registry. However, I don't have Mac OS X, so I couldn't test it there. I briefly tested it in Ubuntu, where it works.\r\n\r\nIt is [based of this thread and post](https://forums.dolphin-emu.org/Thread-some-help-with-this-global-user-directory?pid=431063#pid431063).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neomonkey": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5290", "title": "Memory error on non-Windows and strtoul state error", "body": "This patch fixes strtoul functionts return test. The function can return also EINVAL which was not taken in account.\r\n\r\nThe second bug is a memory error and possibly a double free bug in non-Windows machines.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4KZelda": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/5280", "title": "Android spec cleanups, add missing mipmap icons and round icons", "body": "-Use built in android.R strings\r\n-Move icons to mimap folder per Android specs\r\n-Add round icon", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hthh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4600", "title": "VideoCommon: Start refactoring TextureCacheBase::Load", "body": "I think this is a step in the right direction (and won't break anything).\r\n\r\nThis fixes:\r\n * Duplicate use of `width` and `height` to mean \"requested width\" and \"width to load (possibly from high res)\"\r\n * Overlapping use of `texLevels` and `tex_levels` to mean different things\r\n * Duplicate logic invoking `TexDecoder_Decode`\r\n * A few other little things\r\n\r\nIt should also fixes RGBA mipmap loading from tmem, but this is (still) untested.\r\n\r\nThe new `TextureRequest` thing can probably be used in the software backend too, particularly if we add a cache for them.", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3955", "title": "[WIP/RFC] Jit64: FPR lazy conversions", "body": "This'll conflict pretty heavily with #3565 so I thought I'd share it so we can start thinking about how best to combine the ideas (if people think this optimisation is worthwhile).\n\nThis makes a lot of single-float code generate many fewer instructions, sometimes just one x86-64 instructions per PPC float instruction.\n\nI'm in no hurry to merge this, but would be interested in getting feedback on the idea, and maybe numbers on if it actually improves performance (as I hope it will :) )\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3955)\n\n<!-- Reviewable:end -->\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kamiyo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4445", "title": "FIR Resampling, dither, wiimote-emu speaker fix", "body": "(third time's the charm?)\r\n\r\nFirst the quick fixes: Wiimote emu speaker pan should go from -128 to 128; the code takes that and offsets from 128 (lines 122-123 in Core/HW/WiimoteEmu/Speaker.cpp), so if we only do -127 to 127, we won't ever get 100% pan on either side.\r\n\r\nPreviously the wiimote emu speaker data was being pushed to one mixer; we should instead have a separate mixer for each wiimote.\r\n\r\nChanged signed short, int, etc. to s16, s32, etc.\r\n\r\nSimplified some increment statements.\r\n\r\nRemoved SSE stuff that isn't being used.\r\n\r\nAdded a little-endian version for wave-file writing (I was using this to debug, but I think there was interest in dumping the final audio mix, so I'll leave this function).\r\n\r\nFinally, a FIR filter for higher-quality resampling, all done on the audio thread, including:\r\n  processing done with floats\r\n  extraction of the windowed-sinc and linear filters to separate class (with base class for different filters if desired)\r\n  a noise-shaped dither for float->short\r\n  extract ring-buffer to a separate class\r\n\r\nAgain, all of the heavy lifting is done by the audio thread. The filter generation is done at mixer creation - this should take negligible time - and is only done once. As with all filters, there is a delay of N samples, where N is filter length. I have opted for a lightweight 17-tap filter (this default can be changed). 17 samples (0.35ms for 48khz) is negligible compared to the latency the OS mixer -> audio driver creates, so no worries there.\n\n<!-- Reviewable:start -->\n---\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4445)\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3577", "title": "[WIP] Finite Impulse Response Resampler for Audio", "body": "**I will fix the build errors in the coming days as the bots build them; I do need feedback on algorithmic choices and performance considerations. Thanks!**\n\nThis implements a Finite Impulse Response Filter resampler for the audio mixer. Needs testing.\n1. Changes the mixer to use floats instead of shorts, and thus changes the audio backends to take float samples (interestingly, openal was already converting samples to float, so this actually saves some work). The short->sample conversion is done on audio thread, and only when new samples have been added. The part that needs testing is the audio backend (I can confirm my code works for OpenAL and xaudio2 on Windows 10, but cannot test any of the other ones).\n\nChanging to float means we leave the dithering up to the backend (the OS should dither when it mixes sound from other applications, etc. No use worrying about it here), and we don't worry about overflows or integer math, and (according to some sources) may even be faster than doing integer math. Really, just makes the coding easier.\n1. Implements a FIR filter class within CMixer (should this be extracted to be stand alone? Can be used elsewhere, and maybe even for multiple dimensions and graphics applications?). In addition, the ability to save and read from a filter cache file (located in Cache/Audio) is included, preventing need to compute filter each time Dolphin is run, given that the filter file settings are the same as the requested. In the Audio Config panel, there is the ability to change from Linear to various FIR presets, as well as an option to tweak the parameters and clear the stored filter cache. In addition to the actual impulse filter, there is also a delta table, to interpolate between two impulse values (and also is stored in a separate file).\n2. Other changes:\n\nMade dma, streaming, and wiimote mixers into unique_ptr\nVarious u32 and other typedef replacements\nVolume in float instead of 0-256\n1. Does not take into account some various simplifications that Lioncash made to mixer.cpp/.h in #3514. Can be incorporated if desired.\n\nFIR parameters primer (correct me if I've gotten anything wrong):\n. num_crossings (taps) is the length of the filter. Since the ideal filter is infinite, the longer our finite one is, the more \"ideal\" it is, meaning that our lowpass filter resembles more of a brickwall and has less of a slope (affects the transition bandwidth). Tradeoff is number of multiply-adds and filter size.\n. samples_per_crossing is the resolution between each zero-crossing of the filter. This is the resolution of the fractional interpolation, more is more accurate (less error). In this case, we are additionally interpolating between adjacent filter values using the delta table. Tradeoff is filter size/memory usage.\n. lowpass_frequency is the point at which we are cutting off the sound. The Nyquist-Shannon theorem states that we can perfectly reconstruct anything below Fs/2, so we must lowpass at Fs/2. For example, going from 32khz->48khz, we don't want any frequencies above 16khz, so we'll theoretically set the lowpass_frequency (in ratio of samplerate) to 0.5 (of 32khz). Since there is a transition band (the lowpass filter is not a perfect vertical brick wall), we set it a bit under at 0.45. Calculation of these parameters can be found at: http://www.labbookpages.co.uk/audio/firWindowing.html#kaiser\n. beta parameter affects the amount of ripple, with tradeoff also for transition width (the less ripples the larger the transition width).\n\nShort answer to why this is better than linear interpolation: antialiasing.\n\nI've set the presets to be fairly innocuous, with 7 multiply adds for each channel necessary for the lowest preset (default), and 27 for the highest.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.svg\" height=\"40\" alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3577)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3474", "title": "Change emulated wiimote speaker pan from linear to constant power pan law", "body": "A constant power pan law is audibly more pleasing than linear, since linear makes signals panned to the center seem softer than those panned either all the way to the left or all the way to the right. See: http://www.rs-met.com/documents/tutorials/PanRules.pdf\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3474)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "altf4": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4407", "title": "Add linked list support to Memorywatcher", "body": "Adds support to the MemoryWatcher API for reading linked list structures from game memory. This exact format is described in MemoryWatcher.h\n\nA working external program that interfaces with this functionality can be found here:\n\nhttps://github.com/altf4/SmashBot/tree/python-rewrite\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4407)\n\n<!-- Reviewable:end -->\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JMC47": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4303", "title": "Mask GetPointer Differently on GameCube", "body": "GameCube can't access EXRAM I'm guessing, so we need to wrap it different.  Number was verified by LibOGC or something by someone who wasn't me.\n\nFixes Starfox Assault crash better this time.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4303)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3622", "title": "[DO NOT MERGE] Add delay to SetFinish for Datel Products", "body": "This is basically a blind adjustment for me to test some bugs I've been running into.  Assuming I didn't set it too high, it should fix various Datel products from hanging.  Also wanted to test it on random hangs in Pokemon Colosseum's bonus disc (which consequentially happens in Pokemon Box as well.)\n\nAlso this is based off of Fiora's stuff, but the code has slightly changed meaning I could have broken everything.\n\nPlease note I have no idea what I'm doing.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34229182", "body": "I did some testing with this, and on Linux it's very hard for me record/get actual data when it comes to the latency.  I think it's actually slightly better than Windows xaudio2.  The latency of audio is the main reason I took interest in testing this.  The main thing I did was check Zelda Four Swords Adventures menus, and basically time how long it took the sound to play after I hit the button.  With Zelda-HLE, it was instantaneous, which is great.  But the issues with LLE/AX-HLE + Latency are still bad.  Regardless, that is likely not backend specific, and wouldn't be fixed by rewriting an audio backend.  Still unfortunate.\n\nAs for performance in games, pulse audio outperformed all the other audio backends in Linux when it comes to latency, choppiness, among other things.  I tested a bunch of GC games.\n\nCompared to the Windows, audio latency is the same, which is a huge improvement over Alsa and the other backends I tried.\n\nNow, while writing this, I actually discovered why I got such great audio latency when first testing this.  Holding tab when starting a game will temporarily (until slowdown) fix the audio latency.  It improves it by at least 2 - 3 frames according to my Four Swords Adventures test.  I don't know how stupid that is, but, whatever.  That just tells me the audio latency problem is separate from backends.  This backend performs well, gets a thumbs up from me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34229182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34405844", "body": "I tested the games broken before the PPC_FP merge that I have.  Starfox Assault is great now, works fine.  Games broken by the PPC_FP merge are also working nicely.\n\nThe only caveat is a very small performance issue (10 - 15% depending on game) that has cropped up.  Metroid Prime is affected by about 10%, but Mario Tennis seems to be hit even worse for me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34405844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34570592", "body": "I'd like to further support what neobrain said.  Even though I'm technically more of a user than a developer, I find that performance issues are only temporary, but broken graphics, JITs, features, and games will mar Dolphin for much longer.\n\nOn top of that, there are ways to speed up Dolphin's JIT that doesn't involve short changing the emulation.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34570592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34618019", "body": "I have seriously tested this in a ton of games and find it absolutely necessary for the future of Dolphin.  This makes it mostly comparable to using Zelda u-code HLE in most games latency wise.  I did notice Midway Arcade Treasures 2 was oddly unaffected, but, perhaps that game just has shit audio even on console.\n\nI know this does need testing from more people, but I can confirm pulse audio (with the pulse audio rewrite stuff) and xaudio 2 on Windows both have extremely good audio latency (compared to previous builds) with these changes with no known drawbacks.\n\nI tested Mario Superstar Baseball, F-Zero GX, Super Smash Bros. Melee/Brawl, Super Monkey Ball 1/2, Midway Arcade Treasures 2, Wiiplay, Wiisports, Wii Sports Resort among others.  I mainly use the fork for playing because the audio latency difference makes a lot of games more enjoyable to me.  Once you notice how bad the audio latency is in dolphin, it really bugs you.  This alleviates it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34618019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8022894", "body": "Yeah, we're discussing this in IRC, many laughs were had as people realized it was broken.  I expect a revert or quick fix.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8022894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8161211", "body": "It was discussed on IRC that this commit (probably; the game isn't running ) wouldn't affect clonewars.  Regardless, there was discussion about re-enabling this feature as an option in case something is broken by it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8161211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8236902", "body": "I want someone to blame.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8236902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766913", "body": "Maybe Armada will have an idea on how to handle that.  I never really thought about that case until you just mentioned it.  3D support is more or less about making it 3D; where as the oculus rift and other VR units would have stuff like the situation with Link's Telescope.  Seems like a scary difference...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296506", "body": "This is all deletions except a break.  In this case, I don't believe the code is copyrighted.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296535", "body": "comment says it's from Billiard, who we have permission to relicense from.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296571", "body": "Non copyrightable\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296577", "body": "Non copyrightable\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11296577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cwitty": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4228", "title": "[RFC] A demo of how to integrate Python with Dolphin.", "body": "I don't really expect this to be merged (and it's certainly not ready to be merged in its current state).  It's mostly just a tech demo, to show what it would take to integrate some Python into Dolphin.  If you're on Linux, you may be able to install some packages, turn on the cmake option ENABLE_PYQT, and see a partly-new frontend that looks exactly like DolphinQt2 (because I copied all the UI code from there).  Even if you can't build it, you might be interested in looking at the patch to see what the Python code looks like and what the language bindings look like.\n\nI probably won't work on this any more without significant encouragement, but I'm happy to answer questions (I'll be hanging out on IRC sporadically).\n\nEverything below the line is copied from my commit message.  (There are build instructions down there.)\n# \n\nI've copied DolphinQt2 and rewrote part of it in Python to make\nDolphinPyQt.  (In particular, I've rewritten Host.cpp, InDevelopmentWarning.cpp,\nMainWindow.cpp, and RenderWidget.cpp in Python.  For the most part,\nI just did a line-by-line port, except that I made the warning in\nin_development_warning.py even more dire.)\n\nI've only tested this on one machine (Debian Linux (testing distribution)).\nIt very likely won't build on Windows or Mac.  To rebuild the Python\nbindings on Debian, you'd need at least the packages cython, pyqt5-dev,\nand sip-dev; with those packages, go to Core/DolphinPyQt, touch\nwrap_dolphin.pyx and dolphin.sip, and type make.  (Yes, I checked in\na Makefile, rather than figure out how to add cython and sip to cmake.)\n\nHowever, you may not need to rebuild the bindings; I've checked in the\ngenerated files.  This is explicitly recommended by the Cython developers;\nthe generated Cython bindings are cross-platform, and there's no need\nto rebuild them.  I don't know if the sip-generated bindings are portable,\nbut I'm guessing not.  If you don't need to rebuild the bindings, you may\nonly need libpython3.5-dev and python3-pyqt5 (but I have a lot more\nPython packages installed, and I don't know if any of them are necessary).\n\nI only used sip to make bindings for code in DolphinQt2/; if DolphinQt2\nwere completely rewritten in Python, sip wouldn't be needed any longer.\n(Not that I think there's any reason to do that.)  The sip bindings\nare generated from dolphin.sip; the Cython bindings are generated\nfrom wrap_dolphin.pyx and *.pxd.\n\nI've done very little testing; there are surely many bugs (including\nstupid typos).  But at least I can load the emulator, start a game,\nand exit.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4228)\n\n<!-- Reviewable:end -->\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "phire": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4112", "title": "[RFC] Add a typesafe event hooking system (Start of libdolphin-lite)", "body": "#3974 was getting a bit unwieldy with it's various globals for comunicating between fifoplayer and video common.\n\nSo here is a typesafe event hooking system should allow a much looser coupling between things like fifoplayer and video common. In the future, I also want to expose these hooks to a scripting interface.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4112)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3845", "title": "VideoSoftware: Implement xfb copy filter (Deflickering/Brightness)", "body": "The Copy filter does 3 things.\n\n**1)** Resolve the Multisampled framebuffer. Games can specify 7 coefficients, the 3 samples from the current pixel, and two samples from the pixels above and below. \nSince dolphin hasn't implemented Multisampling, even in video software, I haven't implemented this fully.\n\nWhen games aren't using the multisampling mode, the 3 middle coefficients all point at the current pixel, while the upper/lower coefficients also point at a single upper or lower pixel.\n\n**2)** Deflicker filter. The game does a vertical blur across 3 lines, blending the odd and even fields together which minimises the flickering effect inherent to 480i consoles on interlaced TVs.\nThis is why 99.9% of games render all 480 lines each frame even when rendering at 60fps.\n\nThe filter is counter-productive for progressive displays, which is why dolphin hasn't implemented it before now, though it does blur away the dither pattern. \n\nWhen we implement this in the hardware backends, we can add an enhancement which points all 7 coefficients at the middle pixel, forcing the deflicker filter off.\n\n**3)** Brightness filter. You are meant to choose coefficients that add up to 64. But some games cleverly break this rule to create a brightness filter. Resident Evil 4 uses this to implement a global brightness slider option, while other (Rogue Squadron 3?, mario galaxy?) games use it to implement a fade to black effect.\n\nIf it wasn't for **3**, there would be little reason to implement this, except so users of melee/brawl could see the deflicker on/off option in action. \n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3845)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3804", "title": "Mark Dual Core Hack as Deprecated (Post 5.0 release)", "body": "And disable it by default for fresh dolphin installs. Users who already have\ndual core mode enabled in their settings will keep it enabled, for now.\n### Why Dual Core mode is bad?\n\nDual core mode does provide a nice speedup, but it lets the timings of\nthe host's GPU/API/Driver leak into the emulation, which can cause all\nsorts of glitches and crashes.\n\nFX-Zero is notably sensitive, crashing and restarting multiple times\nduring the intro sequence whenever a shader-stutter causes a frame to\ntake too long, but almost every game can have crashes when they encounter\nweird timings.\n\nIt's not just crashes, dual core mode has be tracked as the cause of\nvarious glitches like objects flicking, text disappearing, objects looking\nglitched, the and sun shining though solid objects in bunches of games.\n\nNone of these glitches/crashes can be fixed, yet users encounter them\nand assume something is wrong with Dolphin.\n\nAnd dual core mode isn't always faster. There are occasional reports on IRC\nof laptop users getting speedups when switching to single core mode. \n### Plans for the future\n\nOne of the goals for 6.0 is going to \"removing dual core mode\". This is the first step.\n\nThere are also plans to improve \"Single Core Mode\" to make it multithreaded in a\nbetter way than \"Dual Core Mode\". it might even be possible to get dolphin's gpu code\nto take advantage of more than one extra core cores (loading textures, compiling shaders\nand loading vertices can easily be split onto separate threads).\n\nThere are also plans to add accurate GPU timing to Single Core Mode (instead of the\n\"infinitely fast GPU\" we currently have) which will fix those games which are broken in\nsingle core mode at the moment.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3804)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3599", "title": "WIP: Add efb copy and other memory timings to sync gpu", "body": "<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.svg\" height=\"40\" alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3599)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3251", "title": "[RFC] Add LuaJIT to externals.", "body": "There is a reason why I picked LuaJIT instead of plain Lua (or another scripting language, like python)\n\nI'm planning to allow registering of hooks to call a lua function every time dolphin flushes the vertices (or potentially more often than that) to allow custom scripts to run when BPmem/XFmem/CPmem matches certain states, which requires a scripting language which generates fast code.\n\nAlso, other scripting languages are bloated.\n\nTODO: CMakeFiles for building on *nix\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3251)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/2791", "title": "[WIP] Add option for forcing square pixels.", "body": "This option is only for people who think circles in poorly programmed games should be emulated as circles in dolphin. They don't appear as circles on the real hardware. \n\nIf you are here because you want to get rid of the tiny black bars that dolphin now has around  the picture on your 16:9 monitor, you are in the wrong place. While this option might fix that for some games, it won't for others.\n\nInstead you want to check the \"crop\" option in the advanced graphics settings. Crop has been improved and now crops the image to either 16:9 or 4:3. A few pixels will be chopped off, but those pixels would have been hidden in the overscan area of your TV.\n\nThis option will never be enabled by default, as that will cause many other games (that put an effort to use the correct aspect ratio) to render incorrectly.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/2791)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33870077", "body": "I'd rather this be fixed in fifo player too.\n\nIt's two lines of code + some scathing comments. I only submitted this pullrequest as an option as fixing fifoplayer is non-trival.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33870077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34015139", "body": "You are also going to need to fix JitIL too.\n\nIf you want, I'm pretty sure I can make a test case which fails on JitIL too.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34015139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34039587", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34039587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34042110", "body": "I'm getting a warning message with this patch along the lines of:\n\n```\nWarning: Someone forgot to unlock PPC reg 0.\n```\n\nThese pop up several hundred times when trying to load game with jit64 if panic handlers are enabled.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34042110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34044893", "body": "Zelda: Wind Waker (both NTSC and PAL) hits an assertion during boot on the Interpreter backend.\n\n```\nN[OSREPORT]: Failed assertion -1.0e32f < r && r < 1.0e32f in \"c_m3d_g_cyl.cpp\" on line 49\nN[OSREPORT]: Halt in \"c_m3d_g_cyl.cpp\" on line 49.\nN[OSREPORT]: \nN[OSREPORT]: Address:      Back Chain    LR Save\nN[OSREPORT]: 0x8040ce78:   0x8040cf08    0x80006d08\nN[OSREPORT]: 0x8040cf08:   0x8040cf38    0x80252258\nN[OSREPORT]: 0x8040cf38:   0x8040cf48    0x800ad204\nN[OSREPORT]: 0x8040cf48:   0x8040cf58    0x800ac95c\nN[OSREPORT]: 0x8040cf58:   0x8040cf68    0x800ac908\nN[OSREPORT]: 0x8040cf68:   0x8040cf88    0x80055aa8\nN[OSREPORT]: 0x8040cf88:   0x8040cf98    0x80309ab8\nN[OSREPORT]: 0x8040cf98:   0x8040cfa0    0x80309a78\nN[OSREPORT]: 0x8040cfa0:   0xffffffff    0x80003268\n```\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34044893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34046403", "body": "Super Mario Sunshine, Both Jit64 and JitIL, most of Mario's clothes aren't rendering, both ingame and in the menu. \n\n![gmse01-1](https://f.cloud.github.com/assets/138484/2075051/aefda9c0-8d85-11e3-8936-880f48f3da54.png)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34046403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34052312", "body": "Ok, I put some thought into this.\n\nYour clever QNaN correction code will fail to convert some subnormals to a double. It should fail on any subnormal with a fraction bit pattern of 00...0011...... The zero at the top of the faction will overwrite the second 1 after the fraction has been normalized.\n\nIn the opposite direction there will be an issue where if the top bit of a double's fraction is set, and that double gets converted into a single subnormal, the top bit of the subnormal's fraction will be set.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34052312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34392181", "body": "I've managed to fix this: See https://github.com/Tilka/dolphin/pull/1\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34392181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562528", "body": "Can confirm, 68b215a works on my computer too.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34571736", "body": "I'll point out that any game relying on this undefined behavior is\nincredibly broken. Numbers smaller than the smallest single subnormal have\nbits 10, 9 and 8 of their exponent truncated resulting in a number anywhere\nbetween one and zero.\n\nNumbers largest than single positive infinity also have bits 10, 9 and 8\ntruncated, resulting in any number between one and max single infinity, or\npossibly NaN. There is even a very small chance you can end up with the\ncorrect result of positive infinity.\n\nNo sane compiler would generate this code, only an incredibly wrong\nprogrammer doing assembly.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34571736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34572135", "body": "But correct emulation of this wouldn't actually be too taxing, if we added\ntype propagation to the floating point registers.\n\nIdeally, the only code which generates this ultra accurate conversion would\nbe a double operations followed by a stfs, but to be safe a fpR entering\nthe block unmodified would be treated as possibly being an out of range\ndouble.\n\nlfs, stfs pairs would result in an straight int copy. Any code using single\noperations on the fpRs would generate code operating on singles, only\nconverting to doubles (using cvtsd2ss and cvtss2sd instructions) at the\nstart and finish of the block.\n\nThe new accurate convert to double operation will only be needed when a lfs\nexits a block.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34572135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027823", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7779758", "body": "Debug code!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7779758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7779761", "body": "Do we always need to PUSHF/POPF?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7779761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8379567", "body": "I think this should be tidied up to use hostname.substr(0, NET_SSL_MAX_HOTENAME_LEN-1) to correctly resize the and null terminate the string.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8379567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9135413", "body": "it floats around videosoftware and videocommon. No explanation except it seems that these two registers are biased by 342 so you can do negative numbers, to an extent. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9135413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10212662", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10212662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273233", "body": "OpenCL changes are probably copyrightable, but that code has been deleted.\nAudio code is whitespace changes only.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273259", "body": "Not Copyrightable\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273265", "body": "Not copyrightable.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273293", "body": "Formatting/spelling changes only. Not Copyrightable \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273338", "body": "Patch from xsacha who we have permission from. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273467", "body": "There is copyrightable code here in the dx11 backend, but it no-longer exists in master, replaced by texture conversion shaders.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273474", "body": "Nothing Copyrightable here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273477", "body": "Not Copyrightable\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273525", "body": "Code cleanup only\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273535", "body": "Not Copyrightable\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273588", "body": "StringFromFormat has be re-written.\nDX9 backend has been removed. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273597", "body": "Yeah, no.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273600", "body": "not copyrightable.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273818", "body": "Not Copyrightable\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273822", "body": "not Copyrightable.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273826", "body": "Formatting only.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11273826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11666160", "body": "This is the wrong define, the code below never executes. \n\nYou want _M_X86_64\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11666160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13406208", "body": "Should have paid attention to those variable shadowing warnings.\n\nThis was possibly a merge failure. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13406208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931540", "body": "No, this needs to only trigger when the fifo is empty (or blocked by a breakpoint) available ticks >= 0 could just mean we were called with too few cycles.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931555", "body": "That was my initial implementation, but this function gets called with 0 ticks.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/15931555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17978989", "body": "There were time limitations. After 5.0, I want to massively expand the amount of information returned. We too want to know about creating default profiles.\n\nFalse is probably correct, I had huge problems working out the actual intent and name for this function. I guess what I really want to capture is when the user is using something other than the default device that came with their system (hence android touchscreens being excluded), and the Vive controller, Oculus Remote and HMDs are default devices. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17978989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/18074969", "body": "You forgot to set a default value for this, which causes debug builds with poisoned values to fail.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/18074969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "comex": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/4084", "title": "WIP: let's make memchecks fast", "body": "first commit is from my other PR.  lol, this is probably pointless.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/4084)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/2477", "title": "(WIP) Opportunistic resend", "body": "Currently based on top of #1556 - just look at the two latest commits.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/2477)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34354839", "body": "Out of curiosity, what device, if any, are you testing this on?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34354839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7598028", "body": "Sadly, it does not (yet) exist when it comes to MSVC.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7598028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7687608", "body": "C++ is horrible.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7687608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/13032528", "body": "Well, for the record, I remain strongly against this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/13032528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/13032542", "body": "Using a return value does not have zero overhead, but this is another one of those things that nobody will ever agree on, so may as well stick with consistency..\n\nYou could always use an algebraic data type :p\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/13032542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/13032580", "body": "Reference parameters or just random value parameters?  I don't think I've seen the latter done in any codebase except Dolphin.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/13032580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16632014", "body": "On Sat, Aug 23, 2014 at 1:26 PM, Fiora notifications@github.com wrote:\n\n> I'm not sure; I was copying other similar code, but you might be right. I suppose common sense would say \"we only need to push ABI caller-save registers\"? but it seems like we push all the registers in a lot of places, which confuses me a little\n\nBased on a short inspection, I think this is yet another stupid thing\nI did last year.  Please fix. /sigh/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16632014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16636782", "body": "Yeah, probably a teeny bit.  (The most important uses of PushRegisters are for slow paths which are only taken conditionally at runtime.)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16636782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962382", "body": "It would be nice, but I guess it would need some testing on a real Wii.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962407", "body": "No reason... I just didn't change that part of the code.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962413", "body": "right.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962427", "body": "As long as it isn't too likely to degrade performance...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16962427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17029862", "body": "I'm not going to do this for now because it's volatile and I am perhaps irrationally worried about performance.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17029862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17031277", "body": "The comment is defined approximately as follows:\n![welp](http://t6.rbxcdn.com/aea6c7010d6beaad8521e6c1b2584ee0)\n\n(but i'll change it.  or just simplify the whole thing since it probably doesn't matter)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17031277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17031774", "body": "Whoopsie >_>\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17031774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17088399", "body": "I'll move it (although there are no pointer or other size dependent types in the entire struct, so it shouldn't really matter...).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17088399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17134979", "body": "I thought I search and replaced all of these, not sure why I missed this instance of NPC.  Will fix.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17134979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17180002", "body": "What do you mean by \"something is not right\"?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17180002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17209971", "body": "Changed to MOVTwo (I associate \"move\" with C++ _shrug_).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17209971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210012", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210013", "body": "Removed... the JIT doesn't actually use AH, by the way.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210023", "body": "There's no alignment meant here between lines with different numbers of tabs, so I believe tabs are appropriate.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210031", "body": "`above_fits_in_first_0x100` has to be in the struct, and I think it would be relatively confusing if the only usage of it were one line in some random other file. /shrug/\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210053", "body": "Yes.  Although the original intent was to emphasize the - 0x80, not to obey a column limit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17210053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17212081", "body": "Oh, yeah, forgot about that... I shouldn't have that in this commit.  Unchecked doesn't really make sense, though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17212081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17212094", "body": "Dunno... I don't trust `clear()` _not_ to free the allocation, although perhaps I should.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17212094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17212363", "body": "Whoops, you're right.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17212363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217953", "body": "Yes: other stuff downcasts it and it's a mess.  If you want to see, try changing it to size_t...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217971", "body": "Because only part of the vector has actual code in it.  This could be changed in general to only `reserve`ing an appropriate amount of space and using `push_back` etc. to actually add ops, but I don't trust the vector to not free memory at inopportune times.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217974", "body": "Because I don't like randomly casting from things to other things, in this case int.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217993", "body": "I think the 'modifies an argument' rule only applies to primitive or struct-like types, not classes which one would not generally expect to be copied.  I could just remove the argument, though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17217993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17218195", "body": "Because that's ugly.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17218195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17221318", "body": "It doesn't matter - only `rsp_alignment & 0xf` is significant.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17221318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17281584", "body": "The choice to not use the vector's size field is for the rest of the code; having a size parameter to a debug function is fallout for that.\n\nAs for not trusting it - actually, here's a question: is `vector::clear()` required by the standard not to deallocate?  [cppreference](http://en.cppreference.com/w/cpp/container/vector/clear) says it is, and it's rarely wrong, but I can't find such language in the C++14 standard, and cplusplus.com merely says it is [not guaranteed to deallocate](http://www.cplusplus.com/reference/vector/vector/clear/).\n\nIf it's in the standard that constantly clearing and readding elements is safe, then I will trust it.  Otherwise, I don't know... I'm not terribly familiar with most STL implementations.  If you say that it's safe, I might trust you too :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17281584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17495533", "body": "While you're at it, can you fix the whitespace here?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17495533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506231", "body": "Is this off the CPU thread?  If not, it shouldn't be threadsafe.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506263", "body": "Is this necessary?  (though I don't see why it would be harmful.)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506277", "body": "If there is only one field left, no point having a struct.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506296", "body": "Can you explain this change?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506302", "body": "Ew.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506342", "body": "Any reason this can't just be a regular count-up loop?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506359", "body": "When things like this random reordering and removing the debug stuff are in the same commit as substantive changes, it's harder to tell what's going on.\n\nthis applies to most of this commit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17506359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17523243", "body": "Yes, it fixes it.  Please fix that and rebase.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17523243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17583612", "body": "oh, yeah, i'm dumb.  for some reason i thought i couldn't do it here, but i can\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17583612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17699085", "body": "I don't like getters.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17699085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17699883", "body": "Then we are at an impasse. :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17699883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17702201", "body": "Why did you remove the check for `offset` being nonzero?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17702201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17702218", "body": "Here too.  It still matters in the non-indexed case, no?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17702218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18201179", "body": "Incidentally, is there any reason x64Emitter doesn't do this internally?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18201179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18201222", "body": "Why are you shifting when the non-constant version only masks?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18201222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18433240", "body": "It would be really nice if this could just be one map rather than two.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18433240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18433718", "body": "@FioraAeterna Ah, yeah.\n\nYou're also adding yet another map lookup every 4 bytes of invalidation, though...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18433718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441188", "body": "nullptr\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441190", "body": "nullptr\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441207", "body": "`m_log_dtk_audio`, etc. please\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441208", "body": "remove\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441219", "body": "Underscores please, and make this something other than LONG.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441222", "body": "PointerWrap&\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441234", "body": "`void*`\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441403", "body": "It's not like the rest of Dolphin acts sanely if malloc starts failing...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18441403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18499022", "body": "Please fix the indentation here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18499022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745361", "body": "add 'the' between for and best (or reword _shrug_).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745390", "body": "I'm not sure about the word \"utilization\" - it seems to suggest that it somehow just uses more of the existing GPU resources rather than possibly running slower.  Maybe I'm completely overthinking it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745402", "body": "\"greatly improve\".  Also, the existing \"yields less issues\" is fairly ungrammatical.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745404", "body": "\", though\" sounds too casual for a UI.  Just remove it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745409", "body": "I don't think the \"much more flexibility\" bit is needed, and it's fairly vague.  Maybe just tack on the \"much slower\" part...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745424", "body": "Like the above, I don't think going into that much detail is necessary for users.  If the idea is that a user with OpenGL 3.3 won't benefit from disabling it, then you should say so (and that still leaves the user having to figure out whether they have it or not).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745434", "body": "For one thing, it's a different tense than \"will result in\", although I just noticed that's actually a problem with the change, since the original matches \"is a bit slower\".  For another, it should be \"fewer\" issues.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745770", "body": "What?  It doesn't have to do with plurals, but about future vs. present tense.  IMO they should both be present tense.  And now I'm going to bed...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18745770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18986794", "body": "Ew, don't use strncmp.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18986794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18987336", "body": "Is there a reason this doesn't have the packed test?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18987336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18995037", "body": "It really shouldn't be based on the name, but on the numbers or something...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18995037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19000179", "body": "yeah I'm an idiot.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19000179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19050213", "body": "A bitset (i.e. a set of values encoded as set bits) inherently has no use for a sign bit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19050213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19064540", "body": "Fixed(?) - there's probably more, but whatever, not really the point of this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19064540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19064564", "body": "If it's not a string then it probably shouldn't be `char*`.\n\nedit: also, no space before `*`\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19064564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19064696", "body": "right.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19064696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19120855", "body": "This could theoretically be executed 32767 times.  I suppose it's in practice much less, so the overhead doesn't matter?... I'm not sure what the point of switching is, though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19120855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19122249", "body": "I see.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19122249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19173259", "body": "The main reason I added the dummy parameter is that otherwise it can't infer the return type.  AFAICT, this is what necessitated the ugly `template<class T> T& GetUidData()` that actually just returned one type.  I really don't like that, so I went with the least ugly obvious alternative.\n\nI suppose I could change it to two methods, one for pixel and one for vertex... that would sidestep the issue.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19173259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19189078", "body": "Because you're not supposed to actually use the namespace, because `BitSet<u32>` is more typing than `BitSet32`.  Though I suppose this isn't critical.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19189078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19190020", "body": "Actually, that doesn't work.  Whatever, I will change it back.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19190020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19377461", "body": "this line is broken\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19377461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19382840", "body": "Don't use such a silly type name on non-Windows.  It's not even necessary, afaict.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19382840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19428038", "body": "newline before {\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19428038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19514189", "body": "If it causes the window to flash / reset position then it's no good.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19514189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19573636", "body": "I suggest changing the method to take an enum, and then removing the default case.  \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19573636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709034", "body": "g_main_window\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709044", "body": "m_render_widget\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709046", "body": "Put all methods before member variables.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709047", "body": "Can we unify play/stop into one button?  \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709172", "body": "indentation\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19709172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19714765", "body": "Not easily.  A fair amount of random core stuff calls Host_\\* functions without any explicit context argument. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19714765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19714906", "body": "I don't like using functions when not necessary.  Although it could be an enum, at the cost of copying the ifdefs from the .cpp file.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19714906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19760665", "body": "Two lines, please\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19760665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19786992", "body": "*isn't?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19786992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19920439", "body": "Is this the reason for the regression?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19920439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20064246", "body": "Is there any reason that arg1 would have garbage in the upper 32 bits here?\n\nI don't think there is, but if so, this would break ABI.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20064246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20365920", "body": "Please add a comment to the effect that the array elements are duplicated.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20365920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20403296", "body": "typo\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20403296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20403311", "body": "Do games which use bounding box request it frequently?\n\nIf so, this is pretty bad for performance; it would be better to revert to the software implementation in fake-completion mode.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20403311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407531", "body": "Because to me, \"location of X user data and \"which of {X, Y} to use for this\" are logically distinct ideas .  I would not expect the output of File::GetUserPath to change unless settings changed, as opposed to possibly changing depending on the current emulation mode.  \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407545", "body": "Actually, my comment is not quite accurate; socket results could hypothetically be relayed from the host in either netplay or movies.  As I said elsewhere, a better long-term justification for this feature is to make it easy to avoid accidentally putting random state in movies for TAS and such, while short-term it's useful because such transmission is not implemented yet.  I will fix the comment. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407562", "body": "Only the NAND moves, not the whole user folder.  You can still call the same function, if you actually want the user folder: e.g. the sysconf-settings relay will want to write to the real Wii folder if the configuration dialog is changed, regardless of whether a game is currently running in this mode.  But if you want the temporary folder, it's not in the user folder, so it doesn't go under GetUserPath.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407567", "body": "(and I'm about to fall asleep and am on my phone, so please excuse my somewhat garbled language. :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20407567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20411935", "body": "pad_status.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20411935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20621910", "body": "This adds the possibility (or was it already there?) to write 4 bytes past the 'end'.  Thus I think the calculation of `MAXVBUFFERSIZE` should have a + 4 added in there, though naturally with the `ROUND_UP_POW2` it wouldn't actually affect anything.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20621910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20845065", "body": "As statics these should all be `s_`.  Also, please use `unordered_set`.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/20845065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21649256", "body": "s_mutex\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21649256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21649260", "body": "these should all be s_\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21649260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637963", "body": "This is needlessly inefficient...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637990", "body": "Is this relevant to forward branches, or just something else stuck in the commit?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22638058", "body": "If dst is assigned to some other register in src, it would be better to ensure the whole thing is done with a sequence of MOV-registers rather than going through memory.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22638058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22835198", "body": "What is all this stuff?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22835198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129060", "body": "Because it's part of the packets, and the packets are fixed-length because the protocol was designed to be very simple to assist scalability.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129065", "body": "Is that possible?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25146926", "body": "I wanted TraversalServer.cpp to not depend on the rest of Dolphin, since it didn't really need to, so it does not link with any other .cpp files.  Anyway, I don't think there is any reason to prefer StringFromFormat over sprintf if the result is fixed length and will not be turned into a `std::string`, although it would make sense if you changed things fully to string.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25146926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25147369", "body": "For what it's worth, a bit of detail on this:\n\nSince the traversal server is supposed to match up UDP ports, it cannot be TCP.  It could be enet, but last I checked, enet has some event loop stuff that is O(n) in the number of connections, and generally is not designed for large numbers of connections.  This could be fixed, but the question is whether it's necessary.  We'd basically need to replace the implementation if we ever want to add any kind of social networking or other complex features to the central server; on the other hand, for the simple directory service it currently offers, UDP is fine.\n\nNot that anyone asked, but I currently don't think Dolphin should try to do social networking, because there are many different use cases for netplay.  While 'generic matchmaking for any game' is one, it would require a lot of moderation to do right, and then there are groups like the Smash competitive players who really want community-specific tools.  Instead, I think any efforts along these lines should work towards making it possible for other tools to either embed or control Dolphin; then more interested groups can provide their own social networking, whether generic or game-specific.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25147369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26144872", "body": "not a hash anymore\n\nedit: the below loop looks overcomplicated, and I don't think it's correct.  Can you check it?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26144872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26145208", "body": "If it's not hashing then there's no need to make it optional.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26145208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28216782", "body": "Please use `ArraySize`.  \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28216782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21649260", "body": "these should all be s_\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/21649260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637963", "body": "This is needlessly inefficient...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637990", "body": "Is this relevant to forward branches, or just something else stuck in the commit?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22637990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22638058", "body": "If dst is assigned to some other register in src, it would be better to ensure the whole thing is done with a sequence of MOV-registers rather than going through memory.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22638058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22835198", "body": "What is all this stuff?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22835198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129060", "body": "Because it's part of the packets, and the packets are fixed-length because the protocol was designed to be very simple to assist scalability.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129065", "body": "Is that possible?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25129065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25146926", "body": "I wanted TraversalServer.cpp to not depend on the rest of Dolphin, since it didn't really need to, so it does not link with any other .cpp files.  Anyway, I don't think there is any reason to prefer StringFromFormat over sprintf if the result is fixed length and will not be turned into a `std::string`, although it would make sense if you changed things fully to string.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25146926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25147369", "body": "For what it's worth, a bit of detail on this:\n\nSince the traversal server is supposed to match up UDP ports, it cannot be TCP.  It could be enet, but last I checked, enet has some event loop stuff that is O(n) in the number of connections, and generally is not designed for large numbers of connections.  This could be fixed, but the question is whether it's necessary.  We'd basically need to replace the implementation if we ever want to add any kind of social networking or other complex features to the central server; on the other hand, for the simple directory service it currently offers, UDP is fine.\n\nNot that anyone asked, but I currently don't think Dolphin should try to do social networking, because there are many different use cases for netplay.  While 'generic matchmaking for any game' is one, it would require a lot of moderation to do right, and then there are groups like the Smash competitive players who really want community-specific tools.  Instead, I think any efforts along these lines should work towards making it possible for other tools to either embed or control Dolphin; then more interested groups can provide their own social networking, whether generic or game-specific.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/25147369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26144872", "body": "not a hash anymore\n\nedit: the below loop looks overcomplicated, and I don't think it's correct.  Can you check it?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26144872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26145208", "body": "If it's not hashing then there's no need to make it optional.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/26145208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28216782", "body": "Please use `ArraySize`.  \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28216782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28216819", "body": "Should put this before the member variables.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28216819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28937938", "body": "See the commit message for the commit that introduced this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28937938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28938149", "body": "Okay.  There are also a bunch of other dubious accelerators - two options labeled `&D`, three `&U`.  I guess I should just remove all the accelerators in the file (reminder to self: see whether pressing enter on the value textbox triggers Set Value).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/28938149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104610", "body": "You shouldn't need to do this more than once.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104624", "body": "Don't add braces for no reason.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104640", "body": "Not that I really care, but judging from GitHub's display, neither of these indentations is right.  Keep the same tab level as the previous line and use spaces for the rest.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104656", "body": "I'm skeptical of this algorithm, since constant signals would result in never flushing.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29104656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29553678", "body": "any chance you can stop repeating SConfig::GetInstance?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29553678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29999128", "body": "m_ and enum?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/29999128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31578677", "body": "i prefer two spaces.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31578677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31864888", "body": "uintptr_t? \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31864888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31864910", "body": "This check is definitely not right.  For one thing, it doesn't cover the whole region.  For another, aren't we supposed to be getting full position independence? - if not, the check should be in whatever allocations actually care about this, not the mmap function.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31864910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31865174", "body": "Oops, that wasn't supposed to be left in.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31865174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31865178", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31865178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31869713", "body": "What's this for?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31869713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31869726", "body": "Can you use os.path.realpath for this?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31869726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31869742", "body": "Would be a bit faster to use only one invocation of install_name_tool.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31869742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31881035", "body": "This should be a regular array to avoid allocation.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/31881035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34064357", "body": "No it wasn't.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/34064357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/36456764", "body": "and the IR/DR mode\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/36456764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/40505891", "body": "I think this should be `{\"\"}`\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/40505891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/40506569", "body": "Oh, don't do that.  Unnecessary special casing just makes code confusing.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/40506569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Aestek": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3964", "title": "Netplay: Add auto buffer ", "body": "Add option to automatically adapt buffer based on last ping values.\nBuffer is calculated using the 80th percentile of the last ping values to ignore lag spikes but still\naccount for ping fluctuations.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3964)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "grp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3941", "title": "Initial support for iOS.", "body": "Interpreter runs and graphics work well enough to render in the simulator\nand on device. It's very slow on either, likely due to no JIT.\n- Add interface to EAGL, the iOS context for OpenGLES.\n- Disable CoreAudio, IOKit, Bluetooth features not available on iOS.\n- Add support for **APPLE** targets on ARM CPUs.\n- Add UIKit wrapper app to test; will eventually host the UI. This includes\n  code signing support (via CMake) and a placeholder icon.\n- Fix rendering to target the iOS framebuffer. iOS doesn't render to\n  framebuffer 0, it renders to a framebuffer you create. (This is often\n  the first issue when getting GL to render in an existing app on iOS.)\n- Add build and deployment instructions.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3941)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mathieui": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3833", "title": "WIP: [netplay] enable dynamic \"write to memcard\" setting", "body": "https://bugs.dolphin-emu.org/issues/9538\n\nThat feature appears to be controlled by one boolean only; so setting it to true in the global settings should be enough to enable writing to memcards.\n\nUntested right now.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3833)\n\n<!-- Reviewable:end -->\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10087579", "body": "The checkbox should probably be toggled upon creation depending on the value of the option\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10087579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "endrift": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3807", "title": "[WIP] VideoCommon: Add epsilon to work around Nvidia rounding issue in texture lookup", "body": "Fixes [ea-vp6](https://bugs.dolphin-emu.org/issues/7193) on Nvidia (at least on OS X). Also a terrible hack. ~~Probably breaks a lot of stuff.~~ I'm mostly posting this to see how much fifoci complains, and also to try and spur conversation about how to actually fix it.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3807)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3481", "title": "[RFC] Core: Implement argv loading", "body": "Dolphin currently lacks argument loading, which can make it difficult to do things like test homebrews. This patch adds support for passing arguments to the emulated program, if it detects that the program supports it.\n\nCurrently, it uses a magic constant for where to put the arguments in the program's memory space. This should be fixed, but I'm not sure to what. Additionally, there's no interface for setting arguments; they're hardcoded based on the path of the file you're loading (for argv[0]). This will need to change for passing argv[1..].\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3481)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mikevin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3625", "title": "Issue #8970: Check existence of ISO before opening properties window", "body": "Fixed a bug where Dolphin crashes when it tries to load an ISO that no\nlonger exists.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.svg\" height=\"40\" alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3625)\n\n<!-- Reviewable:end -->\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sigmabeta": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3583", "title": "[Android [WIP [DONT-MERGE]]] Refactor app to use dependency injection", "body": "(Uploading this PR well before it's finished just to make sure buildbot can still build this; annotation processors can be weird.)\n\nI'm moving the app's architecture to an MVP + DI structure. There's lots of reasons for this:\n\n-Many things in the app are singletons and the number is only growing (GC adapter / Dolphinbar support for example work this way)\n-The Settings UI runs into a lot of problems resulting from the file schema being pretty disorganized, so just loading all the files as singletons will reduce the amount of code necessary\n-When UI tests are added to the project, DI helps provide mocks for things like the game DB\n-More, but you probably didn't even read this far\n\nDagger's the most commonly used library on Android for implementing DI, and its main advantage is that it's completely reflection-free; reflection is performance expensive on Android and hard to trace when things go wrong. Dagger uses an annotation processor, so it can be finicky at build-time, but it does mean that DI problems are caught there instead of at runtime.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.svg\" height=\"40\" alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3583)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmastrac": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3565", "title": "[WIP/RFC] Refactor the register cache to use C++ idioms for locking/binding/unlocking", "body": "Preface: this code compiles and works, but there are likely a few small bugs that will be shaken out via testing.\n\nThis work builds on my two other inflight PRs that are waiting for the freeze to end (the first three of four commits are from there). The changeset with all the magic is https://github.com/dolphin-emu/dolphin/commit/494f3027056cc157ab6fce89cc0dd14f38561623. Also note that Github won't show the diff for Jit_Integer.cpp due to size.\n\nThe goals of this PR are 1) to replace manual locking/binding/unlocking/transaction patterns with automated management of locks and binds with C++ constructors and destructors and 2) to keep the structure and function of the code as close to before as possible, and 3) fix a number of small bugs that are revealed using a stricter register cache.\n\nBecause a significant amount of the complexity in the register cache and the required complexity for us to port that code to the new API happens around the 'update' phase of stores and loads, I decided that I'd tackle that as part of the patch.\n\nTo handle register rollback in the case of memory exceptions, I've introduced the concept of a transactional binding. A register with a transactional binding will be bound to an X64 register until the point at which `Rollback()` or `Commit()` is called.\n\nAll of the register locks and borrows are lazy -- they won't be computed until the first time we access their location. This allows the regcache to avoid allocating a register that will be flushed immediately, or binding a PPC register to an x64 register that we're going to need shortly.\n\nThe register cache also adds the concept of an \"immediate\" register. This is a register with an immutable immediate value that can be used in the same way as a PPC register. It allows us to unify the code paths for registers that happened to have an immediate value and opcodes that pull operands from the constants embedded in their encoding. There are still a few places where I haven't refactored the code to take advantage of these. To avoid increasing the size of this patch more than necessary, I'll do that at a later date.\n\nI've used the \"auto\" keyword heavily in the changeset to allow me to change the underlying types as I tweak the API. I'm not attached to that, but if we switch to concrete types I'd want to do that as a final pass once everything is ready to commit.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3565)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mickdermack": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/3353", "title": "WX: Open control config dialog on mouse down", "body": "Opening on mouse up has the effect of my PR #3068 not working when right clicking the button, because the mouse up event is triggered after the event filter is already disabled again.\n\nAnother possible solution would be modifying the event filter to block a single mouse up event if it received a mouse down event while it was active.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/3353)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdmiralCurtiss": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/2618", "title": "Match Wii Video Mode settings to console.", "body": "~~This is the GUI changes from #2532, which changes the Wii video mode selection to be more like on console. http://i.imgur.com/0y3DLI1m.png http://i.imgur.com/wB9znLe.png The labeling is slightly different because \"EDTV/HDTV\" would make little sense in Dolphin.~~\n\nChanged after some feedback to the more user-friendly:\n\ne: All this has now is the GUI change from PAL60 checkbox to 50Hz/60Hz radio buttons.\n\n[![Wii 50Hz/60Hz](http://i.imgur.com/qtPdpYa.png)](http://i.imgur.com/qtPdpYa.png)\n\n~~Since the bProgressive flag also applied to GameCube before, this also includes a separate option for Component Cable emulation rather than having it combined with the Progressive/480p option. If 480p is selected as the Wii video mode but Component Cable is disabled, it will be automatically temporarily enabled while running Wii games. (e: Last part no longer necessary since it's not combined anymore.)~~\n\nPlease review and discuss.\n\n<!-- Reviewable:start -->\n\n[<img src=\"https://reviewable.io/review_button.svg\" height=\"40\" alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/2618)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12119511", "body": "Better like this, then?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12119511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "CryZe": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/2591", "title": "[WIP] Implementing ICache Invalidations for Patches and Action Replay Codes", "body": "Both Patches and Action Replay Codes didn't invalidate the instruction cache when writing over instructions and thus they worked fine while using the Interpreter and were completely broken with the JIT compiler. This fixes it. \n\nAt the moment it's still somewhat delayed though (around 5 seconds) and I don't know what's causing it, so any help would be appreciated.\n\nHere's the related issue for it: https://code.google.com/p/dolphin-emu/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Summary&groupby=&sort=&id=8068\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/2591)\n\n<!-- Reviewable:end -->\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "skidau": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/2236", "title": "Saved the selected controller profile into the game ini.", "body": "A controller profile can be linked to a game by pressing the Set button while the game is running.  This allows Dolphin to remember games which have controller profiles like \"Nunchuck required\" or \"Horizontal Wiimote\" and automatically load those profiles without the user needing to switch between them after the game has started. To clear the selected profile, the user can clear the profile combo-box and press the Set button.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/2236)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8403027", "body": "#1479 should fix this issue.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8403027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "magumagu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/1831", "title": "[WIP] Remove MMU-hack, and always turn on MMU.", "body": "Making the assumption that games never cause DSI or ISI exceptions doesn't provide much performance benefit, and keeping around the fake memory region makes improving our MMU implementation (e.g. adding a correct BAT implementation) difficult, and JIT modifications in general more complicated.\n\nAs a bonus, this makes it harder for games to crash Dolphin.\n\nProbably doesn't make sense to start seriously benchmarking/testing this until Fiora's latest batch of changes are merged; there are a couple of important changes in there which affect the performance of non-MMU games in MMU mode.  I want to start the discussion now, though, to make sure there isn't some other reason I'm missing to keep around MMU-disabled mode.\n\nThis patch doesn't remove all the code which checks `ADDR_MASK_MEM1` (0x20000000) because we still make assumptions about that bit in addresses even if we don't physically map a fake-vmem region; fixing that mess will probably be a followup to this patch.\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/dolphin-emu/dolphin/1831)\n\n<!-- Reviewable:end -->\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "neobrain": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33482571", "body": "Instead of adding more and more ugly hacks for detecting broken drivers\\* we should just add an option for end users to disable usage of the extension. Aka a new VideoConfig field \"bNoBufferStorage\" with an analogous name in the ini and a default value of false.\n\n(*) to be fair, the best thing to do would be to write a proper unit test that gets run before using buffer storage and which uses the extension and checks that it works. But I don't expect anyone to be willing to do that\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33482571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33495686", "body": "There are valid excuses for not having a fully up-to-date driver. AFAIK there have been stability issues with recent drivers, and I guess some people won't want to risk system stability just to use Dolphin.\n\nSo yes, I think there are valid cases where we need to provide a solution.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33495686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33509601", "body": "Fair enough then.\n\nI hope in the future we can add options for this anyway, but that shouldn't matter for this patch.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33509601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33538079", "body": "Don't create pull requests for a merge inside your own master branch, but create another PR for the actual branch in your fork, please.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33538079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33897792", "body": "I was going to respond how fixing things in FifoPlayer is harder than it sounds, and that this hack hence deserves to be merged anyway for now. An idea came to my mind how I _might_ be able to fix FifoPlayer more easily, but I have to evaluate how well it works first. Thus, leaving this open for now.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33897792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34112141", "body": "Is this something we care about?\n\nThe non-UBO code path is basically blocking the merging of tev_fixes_new, unless we want to make that code path even more complicated by supporting integer constants ...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34112141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34112990", "body": "```\n23:00 <HdkR> neobrain: I have said multiple times that I don't want Android related issues blocking desktop development\n23:01 <HdkR> neobrain: I say merge it if it is blocking tev_fixes\n23:02 <HdkR> I refuse to let Qualcomm block improvements\n```\n\nSounds reasonable.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34112990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34232905", "body": "Looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34232905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34389602", "body": "Haven't got to tinker with it, yet. Let's leave this open until I find time for it :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34389602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34541180", "body": "If you want comments on accuracy vs. performance - my usual attitude holds: Do whatever you need to do to achieve proper emulation of everything and stop caring about performance already. The latter is useless if things don't work, and without testing every single GC/Wii game on the planet you cannot know if any \"gah, which game would use this anyway?\" feature actually does break something.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34541180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34561139", "body": "Couldn't you store all the function names in an array of literal strings and loop over them (using degasus's suggestion, for instance)? That would in fact even be cleaner than the original code.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34561139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34825914", "body": "-1 on speed hacks.\n\na) I'm worried that it will make the tab bar in the English translation longer than the actual dialog width, which is a usability mess, because it actually starts adding something like a scroll bar for the tab bar then. Haven't checked, though.\nb) Adding the word \"Speed\" makes even more idiots randomly check everything there.\nc) I don't think there's any benefit of having a further distinction of \"Speed hacks\", rather than just plain \"Hacks\".\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34825914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35024363", "body": "+1 on having this actually tested. If it ends up not actually working, the whole point of this patch is defeated.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35024363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35121771", "body": "Apart from the comments I added, LGTM, even though I don't see much of a point of desperately merging things from the backends to master instead of fixing the broken architecture.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35121771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218519", "body": "Does assigning \"tab\" to this hotkey work flawlessly across all relevant platforms?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218589", "body": "Having platform-specific behavior just because \"no one on Windows answered\" is dumb IMO.\nMaybe the question would get more attention if you explained what gets stripped to what with an example.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35218589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35394830", "body": "I guess I'll throw my idea just out here. The situation is that:\n- The \"Disable XFB\" code path (which is used most commonly) puts the end of a frame  whenever the game requests an EFB copy to XFB. Up till the addition of XFB support in the sw renderer, the sw renderer used the same logic.\n- The \"Enable XFB\" code paths (and the software renderer in any configuration) waits for the correct VI commands to be called by the CPU until a frame is shown to screen.\n- FifoPlayer has a hard-dependency on the \"Disable XFB\" behavior, since it doesn't use VI at all. Since the new sw renderer code behaves unexpected in this sense, running dffs in the sw renderer will not work.\n\nA potential solution would be to make FifoPlayer call the VI commands required to end a frame properly. However, this is a lot less trivial than it sounds, particularly if we don't want to make DualCore support unnecessarily harder. Ideally, the FifoPlayer thread (=CPU thread) first needs to push all frame data, then wait until the GPU thread is done processing that data and then end the frame.\n\nMaybe someone wants to work on implementing this idea (or on evaluating if it's feasible at all), that would be an ideal solution. However, there's no point in leaving the issue open if no one is going to fix it soon. Hence, given that this workaround just restores behavior of the previous code _and_ that FifoPlayer is really important for me to work on other things, I'd like to merge this patch until a better solution is developed, unless anyone vastly disagrees with me here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35394830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35634674", "body": "\"I've renamed the \"Core::isTabPressed\" flag to \"SConfig::m_ThrottleDisable\". If this better now?\"\n@degasus Why move it to SConfig? I have a bad feeling about having temporary flags within a configuration struct. Do we have other things like that in the struct already?\n\nHaving getters/setters in SConfig for this particular variable seems kind of odd to me since no other struct member uses that either.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35634674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298060", "body": "Yeah uh, that magic value really should not be there...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5717403", "body": "@crudelios I'm probably repeating myself, but where do these magic values 607 and 479 come from again? It looks like these should actually be the scissor rect coordinates... If not, I still wonder why the scissor rect isn't considered at all in the code.\n\nAnd why is clipping done after perspective divide?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5717403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6731281", "body": "This commit broke Dolphin build with wxWidgets 2.9.4, which we technically still support.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6731281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7266021", "body": "Yeah, should've been \"if cull mode is all\" in the comment. The code is fine.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7266021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16839030", "body": "This change causes a regression for me. Try the following code:\n\n```\nunion Test {\n    uint16_t raw;\n    BitField<0, 11, int16_t> bitfield;\n};\n\nTest test = { 0xe003 };\nstd::cout << test.Value() << std::endl;\n```\n\nClearly, this test should print the value `3`. It prints the value `0xe003` though, which doesn't even fit into 11 bits.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16839030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16839456", "body": "For reference, there was another small error in this code:\n\nWhen left-shifting storage by `(shift - position)`, the result will be promoted to the type `int`. Hence, an additional `static_cast` is needed to cast the shifted result back to `StorageType` such that the sign-extension in the right-shift is done properly.\n\nThe final line should look like\n\n```\n    return (T)(static_cast<StorageType>((storage) << (shift - position)) >> shift);\n```\n\nIndeed, with the fixed version the GetMask() call remains redundant.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16839456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "waddlesplash": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33484829", "body": "The latest driver in the Ubuntu 13.10 repos is 319.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33484829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33485596", "body": "Returns nothing. My full driver version is 319.32.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33485596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10902959", "body": "Thanks for everything, Rachel.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10902959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Sonicadvance1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33538759", "body": "+1 Reviewed it in the last merge request.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33538759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33639677", "body": "Cleaned up what delroth talked about\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33639677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33640099", "body": "Updated what Matt_P said. Use std::swap like a boss.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33640099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33641801", "body": "I do have an issue about it, I planned on rewriting it in a week or two. https://code.google.com/p/dolphin-emu/issues/detail?id=6981\n\nI'm a bit busy with work right now, which is why I've only done these two small things. Once I get back to the US I'll have some more time available.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33641801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33877242", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33877242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33896320", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33896320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34109188", "body": "Only problem I see with this is v46 qualcomm drivers just straight up sigsegv with using our UBOs.\nThe v46 drivers are widely used on Snapdragon 800 devices since the v4X drivers were the first to support the hardware correctly.\nI don't have a v46 device to test with since I was using someone else's phone at the time to test it last time.\n\nI only did some light testing with it last time, since it seems it is due to how large our UBOs are, I tested a UBO with only a couple array members and it worked, but I couldn't test it too much.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34109188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34361203", "body": "Not testing it on any device currently. I've been just testing the encodings with a disassembler.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34361203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34385377", "body": "I kept success in there so if it fails to initialize the base OpenGL versions it won't even attempt to grab the extensions\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34385377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34385811", "body": "I like that we use that function in one place.\nLGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34385811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34390661", "body": "Woops. copy&paste failure, was supposed to be = false\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34390661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34557256", "body": "Timed this with clang and it went from ~3:25 to ~0:01 in compile time.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34557256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562302", "body": "Would still be hardcoded, just hardcoded in an array instead of in functions.\nIt's just shuffling code around.\nTo me it is a bunch of worthless work just to have a loop to do the initialisation.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562636", "body": "01:38 @HdkR degasus: neobrain: Matt_P: http://pastie.org/8713405 Something like that?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562865", "body": "Or do we want to run head on in to a wall and attempt to grab extension function pointers if something else failed earlier? I do know the typical Dolphin fashion is to bash our face in to the wall as much as possible which is why I ask.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34562865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34575724", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34575724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34594531", "body": "LGTM. Nothing crazy happening there, just a bunch of cleanup.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34594531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34595846", "body": "http://pastie.org/8716939\nSlightly cleaner that shows what could be.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34595846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34725610", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34725610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34733939", "body": "ARM is a bit weird due to some headers colliding with the introduction of AArch64.\nSome headers use 32bit values for the exception handler's registers, and some use 64bit.\nQuite a while ago we moved to the header that was using 64bit values.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34733939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35045475", "body": "It does complain, this probably does cause it. May have to look in to it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35045475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35147436", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35147436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35148447", "body": "Read through but it is a heck of a lot of changes to digest. Will require multiple passes and some thorough testing.\nInteresting if any game will do something that we implicitly supported, and with this being a bit stricter it'll throw an error.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35148447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35148880", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35148880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35149040", "body": "LGTM, I want some other people's opinions as well though ;)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35149040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35179203", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35179203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35214852", "body": "PR has been updated to include everything commented by neo\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35214852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35217931", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35217931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35221102", "body": "LGTM other than those few comments I've posted.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35221102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35233598", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35233598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35472063", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35472063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35694017", "body": "I was thinking that we should clean up to make it so we actually have 32bit and 64bit defines for things instead of checking for x86 or x86_64\n\nSomething like, ARCH_x86, ARCH_ARM, ARCH_GENERIC\nthen 32bit/64bit flags which would work in any of the arches.\nThis would be a huge amount of define renaming in our source tree.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35694017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35694053", "body": "If we need sub-arch (armv6, armv7 scenerio) in the future it would be annoying as well though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35694053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35694182", "body": "Problem tends to stem from the project expecting x86 in most cases and not expecting a clean cut of x86 specific code, so there is host specific code strewn about.\nWe aren't as bad as PCSX2 in this case, but it is still terrible.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35694182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35825875", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35825875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35880906", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35880906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8825699", "body": "The original workaround that I put in place was working around the Qualcomm bug.\nWhich is why I classified it as a Qualcomm bug since we only need the workaround for Qualcomm.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8825699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Parlane": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33622822", "body": "neobrain why did you merge this without testing :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33622822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34018953", "body": "lgtm :) \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34018953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34028342", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34028342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34122585", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34122585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34148479", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34148479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34302258", "body": "lgtm\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34302258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34311128", "body": "I guess it must have been cached or something, sorry for wasting time...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34311128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34317481", "body": "Yep. 4 extras from what I could see make recompiling.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34317481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34534921", "body": "Please comment on my usage of:\nconst std::string& IniFile::NULL_STRING = \"\";\n\nI couldn't see any other way to know if the user provided a default or not.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34534921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34536266", "body": "No because then you can't differientiate between and empty string and not specifying one.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34536266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34537231", "body": "http://codepad.org/PTedQhpF\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34537231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34537241", "body": "Old code supports NULL, \"\" and \"<text>\"\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34537241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34594048", "body": "LGTM, but there is no way I can actually say this is perfect. I will have to trust your methods for cleanup.\n\nSo if you could explain the technique you used I would be happy to merge this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34594048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34601318", "body": "@delroth  is this ok now ?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34601318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34680126", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34680126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34714897", "body": "And forth we go in to the sunlight, the dark wilderness left behind. LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34714897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34725958", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34725958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34912402", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34912402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34948210", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34948210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34950820", "body": "05:49 @Lioncash Matt_P: At 12:49AM it looks fine to me\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34950820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34951042", "body": "06:01 @phire I see nothing wrong with it\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34951042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35014538", "body": "http://msdn.microsoft.com/en-us/library/windows/desktop/dn424972(v=vs.85).aspx\n\nedit: nvm, delroths suggestion is best.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35014538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35032591", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35032591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35032947", "body": "jordan, I'm assuming you have tested this?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35032947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35147515", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35147515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35149675", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35149675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35151718", "body": "LGTM, but i think we should use the cool new initializer lists:\n\nhttp://pastie.org/private/iefjxgtit7ukqp0euqqdga#7\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35151718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35154702", "body": "LGTM, I'm happy.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35154702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35176641", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35176641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35176821", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35176821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35180118", "body": "Good, I never knew wtf it was for <_<\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35180118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35223574", "body": "I trust you!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35223574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35223943", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35223943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35821821", "body": "No objections. Looks great.\n\nMatthew Parlane\nOn 23/02/2014 2:27 PM, \"Pierre Bourdon\" notifications@github.com wrote:\n\n> Now builds everywhere thanks to Lioncash's and flacs' fixes.\n> \n> Any objection to merging this branch?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dolphin-emu/dolphin/pull/91#issuecomment-35820886\n> .\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35821821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35822507", "body": "Why not have a constructor for InstructionInfo ?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35822507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35866648", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35866648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5207678", "body": "Dunno, the buildbot system wanted it I guess.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5207678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7450377", "body": "lol. Removing the Source directory...\n\nCheck your pulled the changes in correctly without conflict.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7450377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6000994", "body": "Sorry guys, this will only make sense if familiar with GDB protocol....\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6000994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6001027", "body": "Debugging. Not for release.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6001027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003685", "body": "setting.txt encrypt/decrypt\n\nRefer to usage.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003753", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003776", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003800", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6003800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004060", "body": "Done.... this is confusing due to three licence mentions :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004081", "body": "http://wiibrew.org/wiki//dev/net/kd/time\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004113", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004129", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004156", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004208", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004254", "body": "Gah... fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004262", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/6004262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9453205", "body": "Do you have a problem with std::swap ?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9453205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9772557", "body": "m_Status.EXT = (m_ChannelId != 2 && GetDevice(1)->IsPresent()) ? 1 : 0;\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9772557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9772559", "body": "Code style lols. edit: ye you didnt write it, ok :P\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9772559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9772574", "body": "OK :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9772574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9775274", "body": "u32 is shorter than auto here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9775274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10006787", "body": "Or we could just add our own enum list. WII_SEEK_SET\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10006787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115699", "body": "Yes we can pass NULL, or we can add it like suggested.\nNote: Personalization data can be provided in addition to the more generic entropy source to make this instantiation as unique as possible.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115813", "body": "Yea it builds but not needed, so removed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116102", "body": "Have to manually get them selves in to that predicament, at which point the mac they end up using is undefined. Which is still a valid mac <_<\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116905", "body": "Ye dw, this code is just plain bad.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10138491", "body": "I would hope not <_<\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10138491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10140427", "body": "I'm just doing what the example ssl client does from PolarSSL website.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10140427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145597", "body": "No reason to keep this method. In fact, hopefully I can replace this file with polarssl usage.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145709", "body": "I guess we could add (void) to the start, as we really do not care if it works. :\\\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145729", "body": "Line endings changed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10376294", "body": "Fuck :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10376294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9775274", "body": "u32 is shorter than auto here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/9775274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10006787", "body": "Or we could just add our own enum list. WII_SEEK_SET\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10006787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115699", "body": "Yes we can pass NULL, or we can add it like suggested.\nNote: Personalization data can be provided in addition to the more generic entropy source to make this instantiation as unique as possible.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115813", "body": "Yea it builds but not needed, so removed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10115813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116102", "body": "Have to manually get them selves in to that predicament, at which point the mac they end up using is undefined. Which is still a valid mac <_<\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116905", "body": "Ye dw, this code is just plain bad.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10116905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10138491", "body": "I would hope not <_<\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10138491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10140427", "body": "I'm just doing what the example ssl client does from PolarSSL website.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10140427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145597", "body": "No reason to keep this method. In fact, hopefully I can replace this file with polarssl usage.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145709", "body": "I guess we could add (void) to the start, as we really do not care if it works. :\\\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145729", "body": "Line endings changed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10145729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10376294", "body": "Fuck :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10376294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10376486", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10376486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10411590", "body": "Fixed. :\\\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10411590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10643275", "body": "Weird I commented this and it didn't show up :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10643275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11092734", "body": "This PR is not a cleanup. No other reason. I left things as they were.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11092734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11092737", "body": "8 is equivilant to COMMAND_ASYNC_RESPONSE\nhttp://wiibrew.org/wiki/IOS\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11092737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11092741", "body": "Yep even messier, hence not clean :o\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11092741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11759007", "body": "Ye it's not aligned at all lol. And it uses a tab to vertically align.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11759007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16155947", "body": "@lioncash delroth is questioning your code.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16155947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16156011", "body": "@magcius ???\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16156011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18942673", "body": "I agree with adding XFB here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18942673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22772346", "body": "Just trying to be different.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22772346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/32109789", "body": "Why is b here?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/32109789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/44828785", "body": "Yep pretty dumb mistake. Was meant to be POLLERR\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/44828785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/62258753", "body": "Needs a + here I believe.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/62258753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/62789521", "body": "Remove extra line here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/62789521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/63001377", "body": "Should favour strings here. Using StringFromFormat and then window_id.c_str()\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/63001377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/63001536", "body": "Again let's use std::string and StringFromFormat.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/63001536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/63001550", "body": "Again let's use std::string and StringFromFormat.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/63001550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "hrydgard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33690327", "body": "In PPSSPP I created a \"VertexReader\" that reads OpenGL formatted vertex data (of any format). This lets me share the entire vertex loader with no issues except possibly slightly slowing down the software renderer. I'd do the same thing if I were back working on Dolphin.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33690327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35022105", "body": "I just commited it in PPSSPP because I couldn't see a downside - I mean, worst case sinf and cosf and powf and friends run the same speed as on older CPUs that are missing FMA3. Who cares, really - PPSSPP doesn't have a performance problem on any modern Intel anyway, and these aren't in any hot path.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35022105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025086", "body": "Just wait and see if PPSSPP gets any reports of problems from this within a week, if not I'd say it's safe. Happy to act as Dolphin's crash test dummy :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027592", "body": "There's one common issue where people somehow get msvcr120 dlls of the wrong bitness installed, this causes crash 0xc000007b . The fix is to reinstall the VS 2013 runtime from MS.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35027592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5203984", "body": "You could check the return value of sscanf to determine if you were successful parsing the version.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5203984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5294696", "body": "Nitpicking, but there's no good reason to use | when you mean + here, as an add can be folded into the \"addressing mode\" of the MOV that does the write, while the or can't so it will likely be an extra instruction. Not like it's really going to matter though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5294696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5294712", "body": "Very impressive work doing this properly - I didn't think my old bbox code would live this long though :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5294712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5611870", "body": "Tip: Write pull request numbers as #111 (with a hash instead of \"PR\") to get them autolinked on github.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5611870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5958744", "body": "@Sonicadvance1 , hm, I usually @ you on emitter fixes but may have missed these. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5958744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6456497", "body": "Calling it \"expected\" seems a bit odd as this is not a test. Just base[] or base_estimate[] ?  Same for dec?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6456497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6670744", "body": "If you don't have an ARM vertex loader JIT yet, you should probably consider writing one. Preferably one that's better than Dolphin's rather lame vertex loader x86 jit :)  The one in PPSSPP helped speed more than I expected it to.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6670744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7511324", "body": "Using ANDPD instead of PAND may make some CPUs very slightly happier, but likely doesn't matter a whole lot (as you do an integer operation later anyway)...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7511324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7650040", "body": "The original use was to be able to stop right before a crash, before we had real breakpoint support - that is, you'd get a crash, check the value of debugcount, set it to break at just a little below that, and run again from the start. Useful for bootstrapping but pretty useless today :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7650040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7650060", "body": "This line seems a little .. outdated.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7650060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7826764", "body": "This now contains only one sign bit so I would rename it, in order to not confuse readers. Might also want to rename psAbsMask2 .\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7826764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7967697", "body": "Very nice catch! Must have been a pain to find.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7967697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7969093", "body": "Is this a win? https://blogs.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/ has some comments towards the end that indicate that LEA has gotten slower on recent CPUs.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7969093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8106605", "body": "Double negatives are bad, m'kay :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8106605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8126790", "body": "I think the rule is to be consistent with the surroundings.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8126790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8236898", "body": "Oh, it was that easy? :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8236898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8824263", "body": "Uh, wow.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8824263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jchv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33701652", "body": "How much can you pull out of it? The OS X version needs to be compiled in Objective C++, and the code is mostly boilerplate as it is. There are enough differences that I can't tell where you would want abstraction to be put at.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33701652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59674570", "body": "@shuffle2 I think the reason it's not a widespread problem is simply because most games don't use (OS)timers. The majority of exceptions are EUR releases that are hardcoded internally to expect 60Hz so they run a 60Hz timer instead of relying on the vsync interrupt (Killer 7, RE4, etc.). From the reported VC title issues I'm guessing the emulators are similarly coded to use a fixed timer unless the video output exactly matches the original hardware.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59674570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59607867", "body": "Logic would suggest that calculating a 256-bit hash then compressing it to 32-bit is a bit wasteful...\n\nIs there a reason why up to 8 bytes beyond the length are being included?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59607867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59608380", "body": "u64 h[4] = 256 bits, no? If you mean only the low 32-bits are being used, may as well throw this whole thing out and use a proper 64-bit hash function since it won't cost anything extra.\ndata2 looks like it is initialized to point to the end of the input data, which is then fed as a hash input... it's a u8\\* so only 1 byte instead of 8, but it's still beyond the specified length.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59608380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59609715", "body": "There are the AES-NI instructions.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/59609715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/66412949", "body": "Hardcoded endpoints? Ew. That could cause issues if the inevitable clone devices don't use the exact same ordering or if they are changed with a hardware revision. Better to grab them from the descriptors.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/66412949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/68148055", "body": "Has this been benchmarked? It's possible that in some cases the GQRs get updated a lot more often than they get referenced, since they're included in the SDK's thread context and they don't use lazy updating like the FPRs (which they could have gotten away with, if people didn't decide to shove data in the \"unimplemented\" bits and access them via mfspr).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/68148055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/68459786", "body": "It's probably the only game that actually uses multiple threads.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/68459786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/68649940", "body": "Why bother with this? Don't the Android libraries count as basic OS fundamentals and are no different from linking with kernel32 and friends on windows?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/68649940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/69282292", "body": "WII_IPC based \"cooked\" (decrypted) reads still take longer than they should, due to https://code.google.com/p/dolphin-emu/issues/detail?id=7890\nRelated: decryption shouldn't be implemented at the disk interface level - the drive hardware doesn't know anything about it, it's handled by IOS and moving it to WII_IPC_HLE_Device_DI would make sure the disc transfer rate is only applied to fetching the data, not decrypting it (or erroneously applying it to an already decrypted block).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/69282292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/69480621", "body": "FYI this type of operation is _recommended_ in the SDK as one of the fastest ways of achieving direct EFB writes (the other being using the write pipe with the fifo pointed at the EFB).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/69480621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71529876", "body": "That never made much sense to me. How do you write color and Z values in one write transaction when the corresponding EFB addresses are 0x00400000 bytes apart?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71529876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/69536022", "body": "Got any in game before and after screenshots? Metal Gear Solid or Starfox Assault would probably be likely to show them off.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/69536022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70765065", "body": "@FioraAeterna Why would it be ignored? Real hardware nearly always wraps addresses.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70765065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70796172", "body": "DCBZ is like any other data access instruction, it can take either depending on the data translation mode. But in this case it's pretty much irrelevant because the stupid default BAT setup maps an entire 256MB range when only 24MB of physical memory actually exists, so it gets translated to a non-existent physical address which wraps to whatever when accessed. If the memory views were repeated to match the BAT setup/physical wrapping this hack wouldn't be necessary...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70796172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70855661", "body": "I agree that seems a bit blergh, it looks like a cheap way to not bother checking for MEM1 vs. MEM2.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70855661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70896816", "body": "I'm starting to think it's not even correct? Due to the non-power-of-2 size of MEM1, it doesn't wrap from tail to head... What's the address it's meant to be correcting?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/70896816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71322613", "body": "DCBZ (and most other cache ops) is executed as no-op when the effective address matches a direct-store segment. It sounds like a bug in handwritten assembly, getting the operands reversed (so r0 is meant to be interpreted as zero).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71322613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71584156", "body": "LOL, let's just commit it to master anyway even if it's doing the wrong thing.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71584156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71597044", "body": "Setting the direct-store bit in the segment registers is basically the same thing as disabling them (at least for Gekko/Broadway), it ensures any translation that misses the BATs will trigger a DSI/ISI regardless of where SDR1 points (i.e. no need to create empty page tables to protect against false hits). Except for the cache ops, which apparently just turn into no-ops.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71597044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71911598", "body": "Disregarding portability issues (I don't believe OSX has clock_gettime()), this is actually a good idea on Android; it prevents the clock jumping around if the system is set to update automatically from the network and the device switches between cell towers that aren't perfectly synchronized.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/71911598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72141842", "body": "That hash is crc8.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72141842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72392600", "body": "The use of enums was probably just to get sensible names to show up when debugging, as sonicadvance1 has already pointed out they don't cover all the usable values and assuming they do is a Bad Idea(tm). Good job fixing the out-of-range-MEM2-access-hitting-the-locked-cache bug though, since it was ignored when I pointed it out 6 months ago...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72392600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72782856", "body": "@tony971 Because then getting the title for one single game requires scanning the titles of every other game present. Such an exponential increase in processing just for a minor UI enhancement should not be acceptable IMO.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72782856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72787759", "body": "Also FWIW 4 out of 12 of the two-disc games in my library include the disc number in the disc name.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/72787759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/74627049", "body": "tlbie doesn't translate addresses.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/74627049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/74714326", "body": "That sounds bad, if you're relying on tlbie to always be used when an individual effective address mapping is removed it won't work. Case in point: as a workaround for no tlbia instruction games will loop 64 times on tlbie starting with address 0 and incrementing by the page size. So the addresses used are completely bogus, but they still purge the entire TLB regardless (which is all that matters for real hardware).\nThe VM SDK even uses bad addresses for ordinary tlbie operations; for some reason Nintendo thought only bits 14-19 should be used for the address (since those are the only bits used to lookup TLB entries) and mask out all the other bits. Dumbasses.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/74714326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/74720710", "body": "I think you'll have to react to addresses being evicted from the ITLB instead.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/74720710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/75016962", "body": "Not sure if phire means the android NDK has issues _in general_ with TLS or just Dolphin's android port, but I've used them extensively on android without any problems (and they're also used by the NDK itself for communicating with the java VM and OpenGLES). However you may need to use the pthreads api rather than __thread.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/75016962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/75033113", "body": "Why is the old method slower anyway? I can't really see why retrieving a thread-local var should be any faster than retrieving the current thread ID...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/75033113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/75358322", "body": "First you need an old priest and a young priest...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/75358322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "BhaaLseN": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33869990", "body": "I'd prefer a solution/fix in fifoplayer aswell; as from what I've heard on IRC the problem is not that it has to do things like that, but it simply does because dolphin used to.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33869990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33897749", "body": "Wasn't SW supposed to be the backend which is the most correct (and closest to real hardware) of them?\nIf I'm wrong with that, go ahead; but I still think that the fifoplayer requires a fix anyways. And in the long term, we shouldn't need to rely on such hacks, should we?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33897749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33905431", "body": "Ok, nvm then :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33905431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34348442", "body": "Maybe rewrite that changed block to use a single if (success) and just go with if (!init_foo) Disable(\"foo\") inside?\nOr should it affect the success-bool too?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34348442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34448077", "body": "Sure, but the Disable calls do not change success. Therefore, if success is true, all of them will be tried, and if its false none of them will be. \nI was talking about:\n\n```\nif (success) {\n  if (!init_foo()) Disable(\"foo\");\n  if (!init_bar()) Disable(\"bar baz\");\n  ...\n}\n```\n\n...but in the end, it probably won't matter either. so meh.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34448077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35008971", "body": "As far as I can see from the Connect ticket, it also applies to Win7 SP1 and Win8.1 (provided the instructions are available but disabled).\nA simple OS Version check isn't going to cut it.\n\nThen again, how much does it actually gain us in using or not using those optimizations? The JIT probably isn't going to suffer, nor are shaders going to be. So my question is whether those optimizations are negligible for the places where they do come into play.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35008971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35009510", "body": "Might take a look at that later (or more likely, this weekend; not today)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35009510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35017935", "body": "@delroth: as said, i cannot test this, as my hardware is not affected (and i asked for testing). But hey, Microsoft brought this as workaround in the Connect, and ector also committed it. Good enough for me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35017935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025628", "body": "tbh. I havent heard or read about this issue anywhere; and from a quick look i couldn't see anything on the forums either. How come we know about it?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35025628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35087226", "body": "Poked that first link for someone to try it out (as it seemed to be the most recent of the reports), at least to get some feedback if it works or not.\nIf it doesn't work, trash it; if it does, lets talk about what to do next (runtime detection/disable based on whatever; merge as is; trash it anyways).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35087226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35158713", "body": "LGTM, a lot cleaner than the old one.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35158713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35305626", "body": "And wheres the windows build support? :)\n...that aside, looks good enough for me, but I don't have any OSX around with adk/ndk. Or is it still only the Java part being built, but not the ntaive part (using ndk-build)?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35305626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35407829", "body": "I'm fine with that too, as long as it gets a comment (and possibly an issue on gcode so that we wont forget about it)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35407829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35527351", "body": "Does not build on Win32; CommonFuncs.h misses clocale for some reason.\nAnd, CommonFuncs.h includes Common.h which includes CommonFuncs.h - that should probably be fixed one way or another.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35527351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35527620", "body": "DInput stuffs doesnt compile either, but I have no idea what it wants to tell me:\n`6>C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h(2500): error C2733: '_BitScanForward' : second C linkage of overloaded function not allowed (ControllerInterface\\DInput\\DInputJoystick.cpp)\n6>          D:\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h(108) : see declaration of '_BitScanForward'` (and a lot more where that came from)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35527620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5284334", "body": "Did you intentionally choose to use T\\* as first parameter over T&, or did it just end up like that?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5284334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5285364", "body": "Gonna fix my spam filters, half of them got moved to trash automatically :|\nI'm guessing its about the non-verbosity of references being not visible at caller site (because it looks the same as a plain non-ref call) and you only notice when looking at the fwd declaration and/or implementation. Gonna read the ML and re-comment afterwards...perhaps\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5285364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298050", "body": "Whats that magic value there? Make it a constant/define/whatever?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298077", "body": "Please add some comments on where those values (0.5, 16.0f, 342.0f and 6) come from; or what they do. To someone not familiar with bbox, it looks a bit like trial&error or random guessing.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298110", "body": "Some linebreaks, please?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298131", "body": "Those numbers keep repeating all over the code...maybe it makes sense to make them constants/defines/whatever too? Mainly for readability reasons.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298289", "body": "Hmm, gonna be hard to get donko to comment on that :P\nAnyone else knows what its doing?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8128225", "body": "In general, put them on the next line; but if the majority of the file does otherwise, stick to that. It should be in Contributing.md aswell IIRC.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8128225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9132047", "body": "We're in the process of re-licensing, and that requires consent from all developers that have code thats still there. This particular developer opposes the change, which only left us the choice of removing their code.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9132047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9135288", "body": "Whats 342, other than a magic constant?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9135288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11154690", "body": "Maybe we should add a check for the return value of `ReadFile` against a somewhat appropriate size anyways until that happens? Might even be worthwhile to put a little status indicator somewhere that shows a potential bad dump if this happens.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11154690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "SizzlingCalamari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33877204", "body": "It doesn't have to be that ugly. :)\nYou make it a little nicer like this:\n\n``` c++\ntypedef std::unique_ptr<Foo> FooPtr;\nstd::vector<FooPtr> vec;\n\nvec.emplace_back(new Foo(a, b, c));\n```\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33877204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33879386", "body": "I agree. The typedef could be potentially confusing. I guess it all depends on the naming convention, which could end up more confusing than just using unique_ptr in the template to begin with.\nYou're welcome about the emplace_back!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33879386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33965880", "body": "You might need to worry about instruction reordering and coherency issues with the m_run_thread variable.\n\n``` c++\nm_run_thread = false;\nm_thread.join();\n```\n\nThe compiler is free to move the assignment of m_run_thread around the join(). Also, the m_run_thread variable could be set, but not be visibly set on the audio thread if it's on a separate cpu core. The variable seemed to be [incorrectly] marked as volatile before to attempt to get rid of these errors. Volatile solves the coherence, but not the ordering issue, at least on x86.\n\nI would say to use the atomic helper functions in Common/Atomic.h, specifically AtomicStoreAquire/AtomicStoreRelease, since I don't think the win32 versions of AtomicStore/AtomicLoad are correct.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/33965880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34091620", "body": "After taking another look, I'd say that the easiest, most correct way would be to use \n\n``` c++\nstd::atomic<bool> m_run_thread;\n```\n\nThis type may be a bit slower than doing the synchronization manually, but it takes care of all the gotchas and threading tricks as far as I know. I really think this should be used until someone looks at the atomic operations and creates a fully functional interface for them, along with some documentation on their usage. The only thing we're losing by using the std::atomic types is speed.\n\nTo answer your question about the memory barrier, saying that the atomic calls need a memory barrier is what I was going for in the previous comment. std::atomic types by default use a full memory barrier in both directions and synchronize with all other threads.\n\nIf you want to look in to doing it manually still, I'm pretty sure that the AtomicStoreAquire/AtomicStoreRelease functions are strict enough with their memory ordering constraints to get the job done correctly. Someone chime in if this isn't correct.\n\nLast thing, about the AtomicStore/AtomicLoad functions. They seem to be misrepresented in what they can accomplish. These functions use a relaxed memory model, which only provide atomic access and give no protection against compiler/hardware instruction reordering. They are fine for some uses, but an event signal like this isn't one of them. Also, since they are template functions, they may not even be atomic in the win32 case because of their implementation just being a variable read/assign. If someone puts a 64 bit type through them, the 64 bit reads/writes could turn out non atomic by being split into two 32 bit reads/writes.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34091620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34093803", "body": "Another alternative could be the Mintomic lock free atomics library.\nhttp://mintomic.github.io/\nThis library only seems to use relaxed atomics though, leaving it up to the user to implement the needed memory model using the provided memory fences and relaxed atomics.\n\nIt uses a BSD license as well.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34093803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Tilka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34541111", "body": "Summing up from IRC:\nSeems like the incorrect ~z in my interpreter code was also the only reason why the Jit64 backend wasn't working. Since the FLD+FSTP variant of DoubleToSingle() is a little faster than doing everything ourselves (Metroid Prime: 140 FPS down to 124 instead of 115), we'll revert 42ac7fb but keep it around for future reference. Interestingly, there has yet to be a comment that generally questions the accuracy vs. performance trade-off of this branch!? :smirk:\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34541111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34725868", "body": "Yeah, let me just scratch that. I agree that a class would be the best way to solve this if we actually needed 128-bit arithmetic but I only wanted a nice way to define 128-bit constants. Since they are casted to void\\* anyway, using different types is the best way to solve this I think.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34725868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34730641", "body": "Actually, don't merge this yet, I found some more.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34730641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34926589", "body": "Please review, I consider this merge-ready.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34926589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35176604", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35176604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35380359", "body": "I don't like ff29be9, it duplicates the array every time the header is included and also leads to unused variable warnings. Other than that, LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35380359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35815730", "body": "Some performance testing (approximate numbers in VPS with tab pressed, 47d17ae -> 640058a):\n\nAngry Birds (level selection): 174 -> 168\nAnno (splash screen): 340 -> 335\nAnno (profile selection): 255 -> 250\nMetroid Prime Triology (intro): 61 -> 58\nMetroid Prime Triology (in-game): 35 -> 35\n(at this point I got bored and started doing something else)\n\nThe [forum thread](https://forums.dolphin-emu.org/Thread-green-notice-development-thread-testers-wanted-float-conversion-fixes) hasn't gotten much attention yet.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35815730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35833192", "body": "There, I also renamed the rounding mode table.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35833192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35834291", "body": "You should remove the UNITTESTS option from CMakeLists.txt and Source/CMakeLists.txt.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35834291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35834890", "body": "It does.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35834890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35835169", "body": "I consider this merge-ready.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35835169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35841749", "body": "I can't, it's too large.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35841749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35843492", "body": "21:50:07    pauldachz> flacs: Currently building your PolarSSL PR on OS X for your convenience.\n[...]\n22:04:46    pauldachz> flacs: That PR builds fine, no extra warnings or anything.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35843492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35845397", "body": "Don't merge this yet, I need to rethink TextureConversionShader.cpp\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35845397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35887809", "body": "(I guess this is pretty obvious but:) lgtm\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35887809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6441472", "body": "@delroth According to your disassembly in that thread, `_set_FMA3_enable(0);` is not being executed. Was that a Dolphin version that already has this workaround in it?\n\nBy now, it seems like there are multiple issues and the following factors play a role in them:\n- Windows version\n- Windows bitness (only on 64 bit)\n- whether XSAVE was disabled with `bcdedit /set xsavedisable 1` (https://forums.dolphin-emu.org/Thread-dolphin-not-open-on-haswell-without-avx?pid=324815#pid324815)\n- WoW64 might also be an issue (http://www.os2museum.com/wp/?p=960)\n- CPU features (AVX, AVX2, FMA3, FMA4, I'm entirely confused now)\n- CPU vendor (\"Windows Server 2008 R2 SP1 does not support the AVX feature on AMD processors\", see KB2568088)\n\nRelated Microsoft Connect bug (only describes one of these issues): https://connect.microsoft.com/VisualStudio/feedback/details/811093\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6441472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10212504", "body": "alignment pls\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10212504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10235704", "body": "This change broke Pac-Man World 3 ([issue 8386](https://code.google.com/p/dolphin-emu/issues/detail?id=8386)).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10235704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11015039", "body": "This should be in the \"Remove About QT\" commit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11015039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11015040", "body": "Please squash this into the \"add exit function\" commit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11015040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11552257", "body": "Please create an issue with steps to reproduce this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11552257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ExtremeDude2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34867233", "body": "It probably would be best to close this as I'm going to redo it soon without the \"Speed Hacks\" and mistakes\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/34867233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5207673", "body": "hmm, why 18?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5207673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5238624", "body": "About time I guess\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5238624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5819023", "body": "So is this what we hope it is?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5819023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jordan-woyak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35033010", "body": "yes. broken before. fixed after.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/issues/comments/35033010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "crudelios": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5295268", "body": "Thanks!\n\nThe bbox code is slowly becoming a complicated mess :P \n\nAbout the line note, I always though a bitwise OR would be faster than ADDing. Since I'll be changing the BBox code (again) to fix some final bugs, I'll replace that | with a + ;)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5295268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298223", "body": "That magic value (1.0f - (float) 1e-7) comes directly from the software renderer (method MultipleVec3Perspective() in TransformUnit.cpp).\n\nI'm not really sure what it does as well, but it seems to be needed for the Z coordinate.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298373", "body": "I'll soon be rewriting (again) parts of the BBox code, which will get rid of the numbers and instead get them from the EFB_WIDTH/EFB_HEIGHT macros, as well as the scissor offsets. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5298373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5712680", "body": "Nice catch!\n\nI feel stupid for failing to notice it, though :P\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5712680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5724713", "body": "You're right, they are. In the changes I'm making I've thanged them to EFB_WIDTH and EFB_HEIGHT. I disregarded the scissor rect because they aren't used with bounding boxes. It's innacurate, but this saves some calculations in the clipping code.\n\nThe clipping was the best I could come up with...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5724713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "glennricster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5476857", "body": "This test fails now for polarssl version 1.2.  That is incorrect.  Dolphin still builds fine against that version of polarssl, and so this test should succeed.  If the previous test fails for later versions of polarssl the test should be modified to also succeed for those versions, but it should not be modified to fail for older versions that still work.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5476857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5550806", "body": "You figured it out.  Good job.  Now all those 32 bitters will be happy.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5550806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6740427", "body": "Something in this commit causes wxWidgets assertion failures when built against wxWidgets 3.0.\nThe first two lines of the following are repeated several times, and then the last two lines occur.\n\n../src/common/list.cpp(317): assert \"Assert failure\" failed in Item(): invalid index in wxListBase::Item\n../src/generic/listctrl.cpp(3269): assert \"node\" failed in GetColumnWidth(): invalid column index\n../src/generic/listctrl.cpp(3173): assert \"col >= 0 && col < GetColumnCount()\" failed in SetColumnWidth(): invalid column index\n../src/generic/listctrl.cpp(3173): assert \"col >= 0 && col < GetColumnCount()\" failed in SetColumnWidth(): invalid column index\n\nI haven't figured out what in this commit causes this yet.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6740427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wfowler1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5690237", "body": "Huh, I see what you guys mean by cleaner code. I've written plenty of crappy code in my day, and it's always satisfying to replace it with something cleaner.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5690237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5950611", "body": "I'd bet those were left out because they weren't completely game breaking. The issue with Backyard Football isn't an issue if you've ever saved another game, and Sonic Adventure 2 Battle, according to the list, just has problems displaying the number of free blocks, it doesn't say anything about actually using them.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5950611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "LPFaint99": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5890928", "body": "This change breaks the \"export all\" feature of the memcard manager\nwhen null was passed in the internal filename of the gci file was used\nofc it can be changed to check for the empty string, but when I originally wrote this some 5/6 odd years ago it seemed to make more sense to me to pass null then a std::string which is empty\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5890928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6772987", "body": "Crashing here with no Options section in the ini. (new config file)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6772987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7280199", "body": "cool, this has been on my todo list forever. Didn't really seem to get much use so it was low on my list :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7280199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Kolano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5921273", "body": "What about: Backyard Football or Sonic Adventure 2 Battle? Don't those also have issues with 1019 block cards?\n\nBackyard Football:\nWhen using an unformatted Memory Card 1019, the game will ask if you would like to format the Memory Card. Selecting \"Yes\" will cause the game to freeze. If you have an unformatted Memory Card 1019, and wish to save Backyard Football game data, you must first save game data from another game not listed as incompatible on this page. Doing so will automatically format the Memory Card.\n\nSonic Adventure 2 Battle:\n    If there are more than 999 free blocks on the Memory Card 1019, the game cannot display the amount of free blocks. With less than 999 free blocks, the amount of free blocks will display properly.\n    While mathematically the Memory Card 1019 should be able to hold hundreds of Sonic Adventure 2 Battle game files, the maximum it can hold is 99.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/5921273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AdrianoML": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6194005", "body": "This commit broke build in archlinux with gcc 4.9 and wxgtk 3.0.0:\n\n[100%] Building CXX object Source/Core/DolphinWX/CMakeFiles/dolphin-emu.dir/X11Utils.cpp.o\nLinking CXX executable ../../../Binaries/dolphin-emu\nCMakeFiles/dolphin-emu.dir/Frame.cpp.o: In function `CFrame::OnKeyDown(wxKeyEvent&)':\nFrame.cpp:(.text+0x5ec9): undefined reference to`wxCommandEvent::Clone() const'\ncollect2: error: ld returned 1 exit status\nSource/Core/DolphinWX/CMakeFiles/dolphin-emu.dir/build.make:1313: recipe for target 'Binaries/dolphin-emu' failed\nmake[2]: **\\* [Binaries/dolphin-emu] Error 1\nCMakeFiles/Makefile2:628: recipe for target 'Source/Core/DolphinWX/CMakeFiles/dolphin-emu.dir/all' failed\nmake[1]: **\\* [Source/Core/DolphinWX/CMakeFiles/dolphin-emu.dir/all] Error 2\nMakefile:146: recipe for target 'all' failed\nmake: **\\* [all] Error 2\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6194005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6205691", "body": "There are some other arch users having the same issue:\nhttps://aur.archlinux.org/packages/dolphin-emu-git\nThere is a good chance this is a gcc bug.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6205691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "legend80": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6204499", "body": "In the commit, please list the games affected so we don't have to dig through the code changes finding the games. A lot of people have custom settings for their games and don't always use/need the defaults also (since there's a lot of stuff activated that doesn't need to be or vice versa). Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6204499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6512781", "body": "Is there a way that you can please provide a list of games affected in the future for people that manage their own inis instead of forcing them to scroll through all the changes? Kosta was very good about this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6512781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "galop1n": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6461315", "body": "by adding the linker option to dump the map file, you will quickly know if EnableXSaveWorkaround::EnableXSaveWorkaround() has been stripped or not.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6461315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6495838", "body": "why not a simple \"return in.eof();\" ?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6495838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6507555", "body": "No it was just an ask to disable it temporary, to me that's better than memcpy that does not unroll and do not use a register wider than qword. But it lacks real profiling test case to be sure.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6507555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "CarlKenner": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6477233", "body": "You have no idea how much pain, suffering, and lost productivity this commit caused me today. :-)\nIt took me forever to work out why my branch was now failing before any code had even been run. I had assumed it was my fault. Then I looked through the other commits I had pulled and finally found where someone had inserted some code that ran before any code had even been run. :-)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6477233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7043221", "body": "Why would you do this?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7043221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069399", "body": "Oh, ok :-)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7069399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7686684", "body": "This crashes (when I start Metroid Prime 2, haven't tested anything else) because info is NULL.\nPlease fix this.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7686684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8022891", "body": "This is a very bad implementation. If one argument is given, it is just as likely to be -d, -h, -l, or -b. Which this has now broken. Or in my branch various other flags. \nOne way of fixing it would be to check if argv[1] begins with a '-'. Although that doesn't work with switches beginning with \"/\" on windows, which dolphin already allows.\nThere must be an official way of doing this with wxWidgets though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8022891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8078718", "body": "This doesn't fix the crash on GameCube, Controls[2] is baadf00d in TASInputDlg::TASHasFocus called from CFrame::OnKeyDown.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8078718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8078744", "body": "This doesn't fix the crash on GameCube, Controls[2] is baadf00d in TASInputDlg::TASHasFocus called from CFrame::OnKeyDown.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8078744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8165930", "body": "Isn't this a step backwards? Aren't we preventing people from turning on and off Dump Frames during gameplay? This sounds like a bad idea to me.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8165930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766413", "body": "Good on you for adding stereoscopic 3D support.\nThis totally breaks Dolphin VR though.\nI don't even know if the Oculus SDK will accept 3D textures. :-(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766724", "body": "@cegli I think you should give up merging it for now. I merged everything from master up to this commit, and pulled RachelBryk's merge after this one into my branch. So just pull my branch for now.\n\n@degasus I thought blitting from the 3D texture to two 2D ones would make it slower.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766840", "body": "Actually, I'm not that stupid, I only switch the framebuffer **once** on every draw call. I realise that is still once too many, but at least I had the sense not to do it twice:\n- For each object\n  - Draw object for current eye\n  - Swap current eye\n  - Draw object for current eye\n\nI'll see if I can merge these changes, but it will take a while, and there are some other features I need to add first and test on code that I know works, before I can mess up the code with my poor attempt at merging.\n\nThis method has additional hardware and driver requirements though, is that right? What are the requirements and how common are they likely to be for users?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766887", "body": "The hard part will be getting the telescope to work. Link holds the telescope up to his left eye only, while his right eye still sees the world unmagnified until he closes his right eye.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8770055", "body": "OK, I've got it working in Dolphin VR. With the convergence at max, and the separation at about .4 it works well enough to play. The speed is pretty good too.\nI just had to move glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0); out of m_post_processor->BlitFromTexture so the same function can be used to blit to the 2D eye framebuffers. Hopefully that means post-processing shaders can actually be used in Dolphin VR now (they weren't implemented before).\nNow I just need to separate the separation into two separate parameters, one for the shear and one for the camera movement, and in VR mode I need to set the three parameters programmatically to match the Oculus SDK, rather than using the ones the user sets (there's no such thing as separation and convergence in VR, because VR has to match exactly what your eyes would see in the real world).\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8770055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8791895", "body": "I thought I found a bug, but I was wrong. Sorry.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8791895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9055592", "body": "Moving this Geometry shader code out of VertexShaderManager was a bad idea. You need to set this every time you change the projection matrix in the VertexShaderManager, and a better stereoscopic implementation (like required for VR) would use information from the VertexShaderManager function.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9055592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9710297", "body": "This is missing a < /ClCompile > !\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9710297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17978507", "body": "I think I'll return false for the HTC Vive controller, the Oculus Remote, and tapping the HMD. That way I can guess if they're using a VR controller or a gamepad.\n\nBut do we really need to return this much less? We could return source/name whenever the name is hardcoded, and just source when the name comes from the user. I've been putting a lot of work into creating default profiles for the different input devices, skinning the Vive controller to look like different controllers, and abbreviating the controls in the GUI. It might be nice to know if I'm focusing on the right things.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17978507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Linktothepast": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6513861", "body": "No can do, kostamarino is no more, now only Linktothepast remains!\nOk seriously now, when the changes affect more than a hundred ini files it is too much for a detailed description of all of the changes.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/6513861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17481259", "body": "I am really sorry guys but for the whole summer i will be with just my smartphone due to work and can't help with dolphin.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17481259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "magcius": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7018855", "body": "Why will it cause focus loops?\n\nI know that it's called `RendererInFocus`, but we were relying on it to return true if the GCPad window was open. I'm fine with renaming it in this case.\n\nThe issue you're seeing is that the renderer window isn't managed by WX (we create it manually in every backend) when Render to Main Window is off, so this returns false if the renderer window has focus. I just forgot that, and forgot to test with Render to Main Window off. I'm going to fix that when I get home from work tonight.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7018855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019064", "body": "OK. That's fine by me. I still hate the existing code in `RendererHasFocus` though, and I'm not convinced it actually works properly.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019094", "body": "I get home around 8PM EST, so if you want to fix it before then, feel free.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7019094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7044418", "body": "Because it's now in a lower level?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7044418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7165187", "body": "Fine by me, as long as it doesn't touch the Emulated code at all.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7165187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7415245", "body": "If you resize the window, it should work fine. I thought it was correct because my window manager had a bug that was accidentally always triggering a resize after a window was mapped.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7415245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10409273", "body": "C++ is too huge for someone like me to learn correctly. I'd drop Dolphin development entirely if you guys went full-C++, since it's just a hobby project for me, and I don't particularly care about pouring over a 2,000 page spec for weekend hacking.\n\nI don't particularly see what's wrong with `new`/`delete` to be honest.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10409273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10409406", "body": "Thanks for telling me that my own demotivation is indeed a strawman! I'll be sure to keep that in mind the next time I'm working on other fun weekend projects.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/10409406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/14834782", "body": "The existing code was like that, and I don't really want to change it in an unrelated commit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/14834782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/14944117", "body": "Is there a reason you're introducing a `Shutdown` method here rather than using a destructor? We allocate in the constructor.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/14944117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/14944168", "body": "This seems weird to me. I think we should either have a Shutdown method on the channel which iterates over all its devices and calls Shutdown. Better yet, just make it part of the destructor.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/14944168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15001563", "body": "Why? One checks for the Renderer window, one checks for the UI or any dialogs. It's only in the Render to Main Window case that the Renderer is part of the UI.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15001563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15030316", "body": "I have no idea. But my goal is not to rewrite `RendererHasFocus()`, it's to fix the regressions.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15030316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15126769", "body": "What would you prefer? There's no real good constant name I can give for either of these.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15126769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15127009", "body": "Well, it's not the \"C stick\" on classic controllers, it's just the \"right analog stick\". I don't really think adding names for this will make the code clearer. I could point add a comment saying with a link to http://wiibrew.org/wiki/Wiimote/Extension_Controllers/Classic_Controller , and add that the range of the right analog stick is half of the left, for no discernible reason.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/15127009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16156083", "body": "You did not rebase this on top of my branch. It will cause merge conflicts.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16156083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16156115", "body": "This won't work correctly until you merge my branch. If you try this in NoGUI, it will look super stretched and bad since in that case GLWin.parent is the root window.\n\nAfter my branch, GLWin.parent is always the size of the host, which will be correct. We have settings, but as far as I know they don't work correctly for Render to Main Window or NoGUI. If they do, sure, we can use the settings instead. I'm not sure what AGL/WGL/D3D do. If they use the settings, then let's just use those.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16156115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16635742", "body": "Why? It's the software renderer, I don't give a shit about it.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16635742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16636857", "body": "Only instance where what's used?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/16636857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17152134", "body": "Can you remove the extra whitespace leftover here, too?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17152134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17699861", "body": "And I don't like externs.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/17699861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19466334", "body": "What about them?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/19466334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186883", "body": "these things are theme and font dependent\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186893", "body": "not true in multimonitor scenarios\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186897", "body": "this math is quite awful and shouldn't be in inputcommon\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186926", "body": "Don't hardcode fixes for games based on XFB heights, it's brittle and prone to breaking.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186935", "body": "Are these values even guaranteed to be filled in at Wiimote poll time? They can be junk unless an active copy is going through them, and I'm quite sure GX will stomp on registers it doesn't care about when prepping other commands -- masking is expensive.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186944", "body": "Since you only implement this in Xlib and WiimoteEmu assumes that coordinates are adjusted, other backends will break. Not good.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/70186944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/77546998", "body": "this comment seems bizarre especially with the condition right below it. shouldn't we check in both places, or not check at all?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/77546998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/97240292", "body": "This is just the definition of these structs. The WH structs contain one less than the width/height to make the edge case of 0 w/h impossible.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/97240292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703573", "body": "Self-include first, then standard, then Dolphin code.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703697", "body": "These should likely be rounds, not floors.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703779", "body": "I sort of hate to say this, but nearest neighbor is such an \"obvious\" resampling algorithm to me and a lot of people that I don't know if we need to credit authorship?", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703915", "body": "Also, it's a non-prefixed, non-static global.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/137703915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/146096917", "body": "I'm not convinced any compiler will misread this, given how prevalent and important it is in practically any non-toy codebase.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/146096917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/146097713", "body": "(Tomcc left a comment here but I think GitHub ate it)\r\n\r\nFor more on the intersection of \"type punning\" (casting something to a different sized type than it is -- including pointers and arrays) and strict aliasing, read https://blog.regehr.org/archives/959", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/146097713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/146098109", "body": "Other way around. You can cast any type *into* a `char*` (`char*` is an alias of other types, or \"`char*` aliases other types\"), but the reverse isn't necessarily true.\r\n\r\nAs mentioned before though, the GCC (and clang) developers make a guarantee that strict aliasing is well-defined in their compiler with the `-fno-strict-aliasing` flag. Windows ships headers that violate strict aliasing requirements, so MSVC will probably always have a backwards compatible mode forever. I prefer to set `-fno-strict-aliasing` and move on since type punning can make for some really clean code, but I think Lioncash is more in favor of following the standards. And he honestly has the last say in this.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/146098109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Sammi-Husky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068484", "body": "Currently, this increments/decrements by the number of lines set by the user's mouse settings in windows. Some users may not know that you can change it, and might make this seem broken. Would it not be better to just always scroll by four rather then relying on users having their mouse setting at 4?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068580", "body": "The only reason i would consider it is because if it's set to something like 3 without the users knowledge, scrolling in the code windows becomes disorienting as it will take you only curAddress + 3, which isn't the next line of assembly in the window before the scroll.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068641", "body": "Alrighty then. Aside from that, this commit easily can be applied to the memory window as well if i'm not mistaken..are there any plans for that? \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7068641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Swyter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7165177", "body": "Oshi.. I'm in the middle of writing an Android-based Wiimote. :(\nThe UDP protocol was quite straightforward, we only needed a decent client.\n\nMaybe it can be rewritten as an independent back-end, something apart from Real, Emulated, Hybrid or None.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7165177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7165323", "body": "Cool, simple is always better.\nI'll take a look to the netplay route though, even if lacks the handy auto-discovering and TCP may cause higher latency.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7165323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7686908", "body": "If you are talking about my Android controller, well, it's half done.  \nAfter they removed the functionality I lost some interest, I've been busy  \nwith other stuff too.\n\nEn Fri, 05 Sep 2014 05:32:32 +0200, Sebastian Valle Herrera  \nnotifications@github.com escribi\u00f3:\n\n> Are there any news about this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7686908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10874219", "body": "Probably not.\n\nMy Android client worked pretty solidly as a pointer compared with any other publicly available app, but I ditched all this when I experienced the additional difficulty of having to look at the smartphone screen every time I had to press a button, which quickly gets tiring.\n\nTo try to solve this annoyance I also mapped some controls to physical keys like volume up/down, but they weren't enough for normal gameplay.\n\nA Wiimote is quite cheap nowadays, even if I know that having alternative ways of mapping an already available gyroscope would be cool. Maybe I get inspired to give this a go again in the future.\n\nSorry, mate. :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10874219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16355731", "body": "@delroth Hi! What's with translations not updating correctly? I have been waiting a month for the changes to propagate after a massive revamp (the previous translation was pretty lame). I took a look today compiling my AUR package from Git and I was rather surprised to find that strings don't seem to reflect the current changes in Transifex.\n\nI'm talking specifically about the Spanish translation (es.po). Let me put an example; search for \"V-Sync\" in the PO, in Transifex it has been translated as \"_Sincronizaci\u00f3n vertical_\" since 2016-01-14. No trace of it here.\n\nhttps://www.transifex.com/delroth/dolphin-emu/translate/#es/emulator/9693881 <= Transifex entry for \"V-Sync\"\n\nIs the bot or the tx client broken, or am I supposed to do anything else?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16355731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16356103", "body": "@JosJuice, Can you trigger it now? Next time I do a change should I notify someone by IRC or something?\nI thought that pulling translations from Transifex was scheduled quasi-monthly, weird.\n\n(CC @delroth)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16356103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16371572", "body": "@delroth Can you please do a translation pull from Transifex? I have been wading through older revisions and other translators also seem to be confused about why their work isn't being applied in Git.\n\nLast \u00ab_Automatic translation resources update from Transifex_\u00bb  seems to be 2ddf180ee8c30cf46a5a6f342adc0d66a65efdaa.\n\nThat was December last year. I appreciate your infrastructure work!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16371572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16454923", "body": "@delroth: Any update? Are you getting notified?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16454923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Tinob": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7244332", "body": "this changes seems to break, dtk audio in xenoblade cronicles.\nTo correct as i was wrong in my knowledge of the hardware what is brocken is dma audio streaming.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7244332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8379468", "body": "This change is causing Hangs, BufferOutSize2 sometimes is biguer than the actual size of the string causing memcpy to read invalid memory.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8379468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "xsacha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7269405", "body": "We have one here that supports OpenGL 2.x and GLES3. Unfortunately it's hitting this and tries the OpenGL instead.\nComplains it has GLSL 1.2.0 instead of GLSL1.3.0 and can't compile a shader.\n\nExynos 5 Octa with Mali-T628\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7269405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "RachelBryk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7280260", "body": "I've used it about 5 times now, always accidentally, when trying to click cheat manager. I finally had enough of it >_>\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7280260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10087583", "body": "It is not saved, always defaults to off.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10087583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mwoehlke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7415066", "body": "This commit broke rendering. Stuff works in the previous commit; on this commit, there's just a big black nothing. And with #735 merged (7b6b9b09451b) there is _no render area *_at all***.\n\nI'm looking with deep suspicion at the changed calls to XCreateWindow that apparently create a 1\u00d71 window at a location that may or may not be correct...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7415066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7416351", "body": "I'm getting odd build errors after this patch:\n\n```\nIn file included from src/dolphin-emu/Source/Core/Common/Thread.cpp:6:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:36:7: error: redefinition of \u2018class Common::Barrier\u2019\n\nIn file included from src/dolphin-emu/Source/pch.h:59:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:36:7: error: previous definition of \u2018class Common::Barrier\u2019\n\nIn file included from src/dolphin-emu/Source/Core/Common/Thread.cpp:6:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h: In function \u2018void Common::YieldCPU()\u2019:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:77:13: error: redefinition of \u2018void Common::YieldCPU()\u2019\n\nIn file included from src/dolphin-emu/Source/pch.h:59:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:77:13: error: \u2018void Common::YieldCPU()\u2019 previously defined here\n\nIn file included from src/dolphin-emu/Source/Core/AudioCommon/AlsaSoundStream.h:13:0,\n                 from src/dolphin-emu/Source/Core/AudioCommon/AlsaSoundStream.cpp:7:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:36:7: error: redefinition of \u2018class Common::Barrier\u2019\n\nIn file included from src/dolphin-emu/Source/pch.h:59:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:36:7: error: previous definition of \u2018class Common::Barrier\u2019\n\nIn file included from src/dolphin-emu/Source/Core/AudioCommon/AlsaSoundStream.h:13:0,\n                 from src/dolphin-emu/Source/Core/AudioCommon/AlsaSoundStream.cpp:7:\nsrc/dolphin-emu/Source/Core/Common/Thread.h: In function \u2018void Common::YieldCPU()\u2019:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:77:13: error: redefinition of \u2018void Common::YieldCPU()\u2019\n\nIn file included from src/dolphin-emu/Source/pch.h:59:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:77:13: error: \u2018void Common::YieldCPU()\u2019 previously defined here\n\nIn file included from src/dolphin-emu/Source/Core/AudioCommon/PulseAudioStream.h:15:0,\n                 from src/dolphin-emu/Source/Core/AudioCommon/PulseAudioStream.cpp:7:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:36:7: error: redefinition of \u2018class Common::Barrier\u2019\n\nIn file included from src/dolphin-emu/Source/pch.h:59:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:36:7: error: previous definition of \u2018class Common::Barrier\u2019\n\nIn file included from src/dolphin-emu/Source/Core/AudioCommon/PulseAudioStream.h:15:0,\n                 from src/dolphin-emu/Source/Core/AudioCommon/PulseAudioStream.cpp:7:\nsrc/dolphin-emu/Source/Core/Common/Thread.h: In function \u2018void Common::YieldCPU()\u2019:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:77:13: error: redefinition of \u2018void Common::YieldCPU()\u2019\n\nIn file included from src/dolphin-emu/Source/pch.h:59:0:\nsrc/dolphin-emu/Source/Core/Common/Thread.h:77:13: error: \u2018void Common::YieldCPU()\u2019 previously defined here\n```\n\n...but it's not obvious to me why this is happening or how this change would cause it. Any ideas? Existing fixes I didn't spot?\n\np.s. gcc-c++-4.8.3-1.fc20.x86_64\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7416351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7416356", "body": "> If you resize the window, it should work fine.\n\nHuh. Thanks. Anxiously waiting on #789 then, I guess :smile:.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7416356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7450338", "body": "@lioncash, did now... same error(s)... I just did a \"clean\" though, I didn't nuke my entire build directory; is it expected I should need to do that?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7450338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7450368", "body": "mmm... I had to completely remove the entire `Source` directory of my build. Methinks there is dependency information and/or custom command outputs missing somewhere...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7450368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7598021", "body": "...are you aware that the `z` size specifier exists? It denotes a parameter of type `size_t`...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7598021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7687602", "body": "```\ndolphin-emu/Source/Core/DolphinWX/Frame.h: In constructor \u2018CFrame::CFrame(wxFrame*, wxWindowID, const wxString&, const wxPoint&, const wxSize&, bool, bool, bool, long int)\u2019:\ndolphin-emu/Source/Core/DolphinWX/Frame.h:203:13: error: \u2018CFrame::m_menubar_shadow\u2019 will be initialized after [-Werror=reorder]\n  wxMenuBar* m_menubar_shadow;\ndolphin-emu/Source/Core/DolphinWX/Frame.h:144:10: error:   \u2018wxMenu* CFrame::m_SavedPerspectives\u2019 [-Werror=reorder]\n  wxMenu* m_SavedPerspectives;\ndolphin-emu/Source/Core/DolphinWX/Frame.cpp:310:1: error:   when initialized here [-Werror=reorder]\n CFrame::CFrame(wxFrame* parent,\n```\n\n(Yeah, I like my -Werror=reorder. Among others. Before this commit it didn't trip...)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7687602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7707997", "body": "> I think the warning is slightly broken, as the compiler can quite easily tell there is no dependency conflict here.\n\nThe warning isn't broken. It's not a matter of there being a conflict or not; the warning is telling you that the compiler _will_ change the execution order of your code to be other than as you wrote it. This behavior is mandated by the C++ standard, and _all_ non-broken compilers will do this. Some will just do so without telling you. At least GCC considers that dubious enough to have a warning. I happen to agree with GCC.\n\nPlease, just don't do that. It's trivial to fix, and there's no good reason not to do so, especially when this is the _only_ spot in the code base where a reorder occurs. Otherwise you're just making it harder to use the warning where maybe it _does_ matter.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7707997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8828181", "body": "Um... I don't know about regressions, but this _broke rendering_. I can't turn on AA any more; if I do, the entire render pipe just... breaks, giving nothing but garbage memory as output.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8828181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8845034", "body": "[AMD/ATI] Cayman PRO [Radeon HD 6950]\nmesa 10.3.3-1.20141110.fc20.x86_64\n\nAssuming you mean 42bb48bd460d, yes, that seems to fix it. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8845034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11147057", "body": "This is causing dolphin to abort with a `std::bad_alloc` after failing to reserve an _enormous_ chunk of memory (`1383741509 * sizeof(SFileInfo)`; over 40 GiB) for `CFileSystemGCWii::m_FileInfoVector`.\n\nIn order to get dolphin to start, I have to revert this commit.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11147057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11552126", "body": "Umm.... this breaks the build:\n\n```\n/usr/bin/ld: Externals/polarssl/library/CMakeFiles/polarssl.dir/pkparse.c.o: relocation R_X86_64_PC32 against symbol `pk_parse_key' can not be used when making a shared object; recompile with -fPIC\n```\n\n`-fPIE` breaks shared libraries; adding it indiscriminately like this thus results in broken builds. Unfortunately I'm not sure if there is a better solution than using `target_compile_definitions` on all of the executables.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11552126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "roadsign": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7489156", "body": "Thank you! I forgot to post that on issue tracker... thought I needed to test it a little more since I'd just updated my graphics driver.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7489156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "FioraAeterna": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7513197", "body": "That's what I figured; from what I read, the 1-cycle delay applies when you feed into a different unit, so I figured if the next was going to be integer, I should probably use PAND.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7513197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7779778", "body": "Yes, because the AND clobbers flags. Overflow is _incredibly_ rare though and not even fully handled by the JIT, though.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7779778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7969132", "body": "It's slower for \"complex\" LEAs, which (I think) the typical definition is that they have 3 operands (base, scale, offset). Regular LEAs are 1/0.5, \"complex\" ones are 3/1 (latency / inverse throughput). So regular LEAs aren't any slower than before, but 3-input-operand ones are, from what I recall. Agner has the exact details at agner.org/optimize/, I think, as do the AMD/Intel optimization guides.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7969132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8108417", "body": "Double negatives are not not the worst idea to not ever be not done!\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8108417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Subv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7669270", "body": "Are there any news about this?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/7669270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "archshift": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8023700", "body": "Perhaps dolphin should use one of the many tried and tested command-line argument parsers, instead of wx's evidently bad implementation. \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8023700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Stevoisiak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8126785", "body": "Should this brace format be applied to all of Dolphin?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8126785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "cegli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8683792", "body": "This line broke the cancel button when you add an AR code.  It should be:\nBind(wxEVT_BUTTON, &CARCodeAddEdit::SaveCheatData, this, wxID_OK);\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8683792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766547", "body": "Hmm, I was just trying to merge this into Dolphin VR as well...  Looks like quite a challenge...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8766547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "penkamaster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8769476", "body": "@Armada651 How I can enable 3d stereo rendering? I dont see the option\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8769476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "cammelspit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8769508", "body": "@penkamaster The option isn't enabled yet. https://forums.dolphin-emu.org/Thread-stereoscpic-3d-side-by-side-ogl\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/8769508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "karolherbst": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9131955", "body": "since then rumble doesn't work for me (Triangle and Sine)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9131955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9131956", "body": "Any reasons for this? Because this kind of removed rumble support for xpad gamepads. My xbox gamepad has only sine and Triangle rumble for support (maybe this is also an issue, why only these?)\n\nAnother commit already bricked rumble support for me, but I left a comment there\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9131956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Mullin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9178209", "body": "Break emulation on Android + warning \n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9178209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9252739", "body": "That's fix a part of Android emulation, the other part is MMU fix\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9252739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9471625", "body": "This can be easy port to Armv7, right ?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9471625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9638549", "body": "Best fix ever :P\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9638549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mrgreywater": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619127", "body": "don't you have to invalidate s_efbCacheValid at cacheRectIdx so the change is uploaded to the gpu?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619206", "body": "This block looks almost the same as the one at 1123 and could be merged into a function.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619483", "body": "this looks wrong to me, the depth value is either 16 or 24 bit, without the argb2rbga shift. at least thats what it seems after comparing with line 1023\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9619483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Ziek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858804", "body": "actually because there is a chance of erasing the iterator during the loop we don't want to rang-base or get rid of the ++it.  At least I don't think range-base for loops are that smart.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858853", "body": "yes, but see whats going on here is that if we fail for the number of tries we erase the current iterator which then erase returns our next iterator.  If we were to have ++it or the range-base it would then go to the next iterator so we would skip over one, I believe, and I'm not sure what effects of doing ++it on an iterator that doesn't exist if we were not to take the iterator from erase.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858903", "body": "ah but the ++it at the top wouldn't be the same because we want to skip the ++it in the case we fail our tries hence why we have the continue after the erase call.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9858903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859301", "body": "wait it says 2) continue in the statement will execute iteration_expression which is not the desired result\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859313", "body": "i couldn't replace this with a range-base, when I tried compiler complained.  I think the way these bucket iterators might be different but if you know the proper way to do these I would be all ears.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859320", "body": "we are dereferencing  value not r\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859340", "body": "compiler complaint when I did that\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859363", "body": "I will admit that auto is a bit over used, but I don't think I see any used on any variables as int and such.  I also admit that this isn't my code I'm mostly just moving it over from the old netplay branch so I'm still figuring out how it all works and rather not touch sensitive bits :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9859363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "neoh4x0r": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9954240", "body": "EDIT UPDATE: Just found an open git issue for this\nhttps://github.com/dolphin-emu/dolphin/pull/1995\n## https://code.google.com/p/dolphin-emu/issues/detail?id=8277\n\nI believe this commit has introduced a compilation error.\nResulting in a:  're-declaration of \u2018socklen_t\u2019' error.\nsee:\nhttps://buildbot.dolphin-emu.org/builders/fifoci-ogl-lin-nv/builds/313\nhttps://buildbot.dolphin-emu.org/builders/fifoci-ogl-lin-nv/builds/313/steps/compile/logs/stdio\n\n4.0-5692: https://dolphin-emu.org/download/dev/1dcd0ad879d3ba450ba570d966b30436dc97a35c/\n4.0-5689: https://dolphin-emu.org/download/dev/2a41ac40721a9104ca8c47996b0c9e5b704722a0/\n4.0-5687: https://dolphin-emu.org/download/dev/85359d51690ce71efcd836acab0cec15cc68ac1e/\n-- have all failed to auto-build Windows x64 version(s) on https://dolphin-emu.org/download/\n\nSee also dolphin forum post: (which re-interates this)\nhttps://forums.dolphin-emu.org/Thread-windows-x64-builds-missing-for-4-0-builds-5692-5689-and-5687\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/9954240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "heinermann": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10069860", "body": "Confirmed caused Android builds to fail on Nexus 5 and Kindle Fire HDX devices.\nhttps://buildbot.dolphin-emu.org/builders/release-android/builds/156\n\nIs there a followup commit anywhere? I can't find a working build after this point.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10069860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "boghison": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10873994", "body": "Are you guys going to add something like this again or not?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10873994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10875260", "body": "Well, I guess there are 2 options:\n1) Write something myself\n2) Build from before this commit\nI am really disappointed though :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10875260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "FishamanP": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10909031", "body": "A prime example of your great work.\nYou will be sorely missed.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10909031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "DAOWAce": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10954951", "body": "Always sad to see the last thing someone's done..\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/10954951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "joewestcott": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11058803", "body": "This doesn't appear to change behaviour in fullscreen for me. Please see issue 8376.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11058803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11058819", "body": "Unfortunately, this doesn't fix issue 8172 (I thought it might), and causes a new major issue, 8542.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/11058819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "turbedi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12109404", "body": "Missing space after \"if\"\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12109404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "rjmxtechnology": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12123986", "body": "@Sonicadvance1 can I implement this hang loading fix on dolphin 3.5? It is the only version that runs smoothly on my pc. I am running windows 7 and the only configuration I have found to run Smash Bros Brawl smoothly is with directx11 on Windows. Is there any way you or I could implement this fix into a 3.5 windows build and upload it to Google Drive or something?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/12123986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Felk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13136683", "body": "Can you please return the functionality to filter by comparison to the previous value? It really is necessary if you want to find something specific, but don't know its value, just when it changes. You cannot hunt down most addresses without this feature.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13136683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "UlsterRose": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13139225", "body": "I second this. A lot of the time, I won't have clue what the value will be,\njust when it has changed. A good example is the value for the field of view\n- you'd have no idea what it actually was, unless the game keeps an .ini\n  file with the FOV value in it (which basically never happens.)\n\nOn Wed, Sep 9, 2015 at 2:45 PM, Felix K\u00f6nig notifications@github.com\nwrote:\n\n> Can you please return the functionality to filter by comparison to the\n> previous value? It really is necessary if you want to find something\n> specific, but don't know its value, just when it changes. You cannot hunt\n> down most addresses without this feature.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dolphin-emu/dolphin/commit/5aa5a100fa1479e33f01e0547a9004ad8993e11e#commitcomment-13136683\n> .\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/13139225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "SukharevAndrey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/14193944", "body": "Are there only approved lines? Russian language seems to be outdated although 99% of lines are translated and 0% reviewed :(\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/14193944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ds84182": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/14357395", "body": "You should be able to use luaL_tolstring to coerce any value type into a string here.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/14357395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Fu2chN": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16138652", "body": "Hi, and Direct3D 10.0? It is always confusing.\n\n> A reasonably modern graphics card (Direct3D 10.0...)\n\nSorry, I do not have an account on bug.dolphin.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/16138652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mimimi085181": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17480485", "body": "Looks like this forum thread is related to:\nhttps://bugs.dolphin-emu.org/issues/5937\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/17480485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "pezcore": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/18034115", "body": "why?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/comments/18034115/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 3, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "arthurc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/125156025", "body": "Thanks, I'll make sure to update it :)", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/125156025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sjnewbury": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102032459", "body": "@JosJuice Yes, that would be better.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102032459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102032908", "body": "@JosJuice Will change that.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102032908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102048141", "body": "I did consider it.  I just left it as it was to be clear the code just moved.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102048141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102048668", "body": "Too much code for a return statement?  Something like LUM_THRESHOLD?", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102048668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102058518", "body": "Yes, sorry.  I only read that part of your comment after I pushed.  I'm fixing that now... Too used to working with plain C.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102058518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102059838", "body": "Yup. Fixed\r\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102059838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102059998", "body": "I'd fixed the *wxBLUE, I don't know how that got lost.  Anyway, hopefully it's all good now...", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/102059998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/104981828", "body": "Okay, done.  Went with option 1 since operator precedence takes care of the order anyway.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/104981828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/111682286", "body": "ditto", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/111682286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/122639272", "body": "done", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/122639272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/122639289", "body": "also done", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/122639289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jezze": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11001846", "body": "There are a bunch of replacements of the same type I can do in this file. I'll change all of them.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11001846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11126552", "body": "I looked and as far as I can tell, after this patch, all calls to TexDecoder_Decode will have the parameter rgbaOnly set to true so the parameter should probably be removed all together. This in turn would enable us to remove even more unnused code inside TexDecoder_Decode. Are you looking into that?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/11126552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18677579", "body": "Remove line if unnused?\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/18677579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22264926", "body": "Won't g_ActiveConfig.bUseXFB always be true since you checked that on line 119? Unless some other thread could modify it of course...\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22264926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "slurps-mad-rips": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22770392", "body": "Agreed. I'll change that.\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/22770392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blubberdiblub": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/123616429", "body": "Me neither, I was just copying the same style that was already used in the file.\r\nIf you point me to a file that demonstrates the recommended style, I can change the whole file, if desired.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/123616429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/124960757", "body": "Maybe it believes it could be mistaken for a binary operation on first glance due to the parentheses on both sides.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/124960757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/125053814", "body": "```\r\n// clang-format off\r\ncode\r\n// clang-format on\r\n```", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/125053814/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/125069413", "body": "Sure can. Here's a patch for the file that applies to the branch. (Had to rename the extension, as it doesn't accept .patch files.)\r\n\r\n[0001-Use-static_cast-in-BitUtilsTest.txt](https://github.com/dolphin-emu/dolphin/files/1115758/0001-Use-static_cast-in-BitUtilsTest.txt)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/125069413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/126029851", "body": "@lioncash Ah, thank you for the recommendation, I wasn't aware of this technique. (I guess I should have noticed the already existing forward declarations in the file.) This appears to be a really good way to avoid unnecessary dependencies. I will change it.\r\n\r\nDo you have guidelines for future contributions? What are good candidates for forward declarations? Only classes and structs? Or functions as well?", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/126029851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/126167611", "body": "Sure, will do.", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/126167611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/127469617", "body": "`0x80` is likely Parental Controls enabled status, as I have a `0x00` there after clearing the Parental Controls. That byte might contain more bitwise flags, though, with further purposes.\r\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/127469617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lewurm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/78264476", "body": "sure! :)\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/78264476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/78271936", "body": "hum, I should have documented that better here as well. Reason for `CIVAC` is a suggested workaround by a couple of Cortex A-53 erratas, see here: https://github.com/v8/v8/commit/fec99c689b8587b863df4a5c4793c601772ef663\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/78271936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Zopieux": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/38448009", "body": "I would suggest to only i18n the relevant parts (including markup) and use interpolation for the actual links. The obvious benefit being that if the URL (or other params) ever changes, there is no need to update the translations in dozens of languages.\n\n``` cpp\ntr(\"Check for updates: <a href=\"%1\">%2</a>\").arg(link).arg(short_link);\n```\n", "reactions": {"url": "https://api.github.com/repos/dolphin-emu/dolphin/pulls/comments/38448009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}}}}