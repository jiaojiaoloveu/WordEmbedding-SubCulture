{"_default": {"1": {"heinezen": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/958", "title": "Converter: Create nyan modpack from modded .dat files", "body": "As an optional improvement, the converter should be able to detect differences between the standard AoC .dat files and modded versions. Then we can create a modpack for the base game from that diff. This would allow Genie Engine modders to use our converter, instead of writing their mods from scratch in nyan.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/929", "title": "Add useful shortcuts", "body": "We could integrate a bunch of useful shortcuts from other strategy games, e.g. Rise of Nations, into this project.\r\n\r\n* `CTRL+SHIFT` with selection box: Only select villagers.\r\n* `CTRL` with selection box: Only select military. Right now `SHIFT` and `CTRL` have the same behavior.\r\n* `ALT` with selection box: Only select non-siege/non-support units.\r\n* `CTRL+ALT` with selection box: Only select siege/support units.\r\n* `RIGHT-CLICK+ALT` on building: If selection contains siege, set all non-siege units on *guard* to defend the siege.\r\n* `CTRL+RIGHT-CLICK`: Perform attack move (`TAB` in HD)\r\n* `CTRL+SHIFT+RIGHT-CLICK`: Patrol (`Q` in HD)\r\n* `LEFT-CLICK` while using `RIGHT-CLICK+DRAG`: Iterate through formation types (requires #928 ).\r\n* `SCROLL` while using `RIGHT-CLICK+DRAG`: Change width of a formation (requires #928 ).\r\n\r\nKeep adding your own ideas in the comments.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/928", "title": "Let players change the direction a formation is facing", "body": "This is basically an extension to the existing movement command. Right now, formations in AoE2 will always face in the direction the units are coming from. This makes the direction of a formation unpredictable as players never know the exact path a group will take.\r\n\r\n**How does it work?**\r\n\r\n`RIGHT-CLICK` followed by an immediate release of the moue button will work as before. The direction of a formation would be changed by *holding* `RIGHT-CLICK` and *dragging* the mouse pointer in the direction the formation should face (see below). \r\n\r\n<img src=\"https://user-images.githubusercontent.com/6852422/31855058-1dfa183c-b6a3-11e7-9022-fd6b0d405c98.png\" width=\"199\" height=\"121\" />\r\n<img src=\"https://user-images.githubusercontent.com/6852422/31855060-22cfff34-b6a3-11e7-88db-0001598f36ab.png\" width=\"194\" height=\"161\" />\r\n\r\nMoving the mouse pointer will pivot the formation around the point where the player right-clicked. Unit lines will always be orthogonal to the line between pivot point and mouse pointer. To aid the player in choosing the right direction, the UI should display the selection circles where the units will stand when arrivng.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/6852422/31855061-24cedfda-b6a3-11e7-8abc-3181a9cd5fd0.png\" width=\"203\" height=\"178\" />\r\n\r\n**Will this change the balance?**\r\n\r\nUnlikely, since right-clicking without drag will always be faster. I see the main use case for unit groups that are moved long distances across the map, where the direction of a formation is generally unpredictable. Just in case, we should give players the option to turn this feature off in MP games. Then it remains a nice addition to single player.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/873", "title": "Accessibility modes", "body": "Apparently about 10 % of gamers have some kind of disability, so we should start to think about making the game accessible for them. AoE 2 was already very progressive in this regard, but the HD Edition so far does little to implement the \"Lessons Learned\" that were discovered in the 17 years after the initial release.\r\n\r\nWe are already addressing many of these issues with changeable font size and such, but there's so much more. Especially color blind mode is vital for distinguishing multiplayer factions.\r\n\r\nReferences:\r\n* [List of accessibility modes with best practice examples](http://gameaccessibilityguidelines.com/full-list)\r\n* [A practical guide to game accessibility](https://www.includification.com/AbleGamers_Includification.pdf) by Able Gamers with descriptions on what disabled people find difficult.\r\n* [Article about good and bad implementations of color blind modes](http://www.gamersexperience.com/colorblind-accessibility-in-video-games-is-the-industry-heading-in-the-right-direction/)\r\n* [Extra Credits: Accessibility - The Curb Cut Effect](https://www.youtube.com/watch?v=PJoax1Z1x4Y)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/873/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/751", "title": "Mockups for a Settings Menu Layout", "body": "Continuation of #732 .\r\n\r\nI have created a variety of layouts to test how an options menu could look like in the final game. So far there are ~~6 different layouts~~ (~~**EDIT:** The 3 tabbed layouts remain for the second iteration~~ We are down to 2 layouts in our third iteration) to choose from which need to be evaluated.\r\n\r\n[https://heinezen.github.io/openage/settings_menu](https://heinezen.github.io/openage/settings_menu)\r\n\r\nThe following steps will be:\r\n\r\n- [x] Testing and evaluating the layouts (concerning: UX, compatibility with different languages, other improvements) a.k.a. nitpicking until we are satisfied\r\n- [x] Changing and/or moving UI elements if necessary\r\n- [ ] Decide which one we go with as the final design\r\n\r\n~~If you want to test the layout, please do not use the sidebar on the left for navigation. This is generated by Axure for debugging purposes. It should always be possible to navigate to the \"Home\" Page by interacting with the UI.~~ The sidebar should not appear anymore. If it still does, ping me in the IRC.\r\n\r\nDo you want to change everything and make an even better mockup yourself? [Here is the file](https://github.com/heinezen/openage/blob/gh-pages/settings_menu/openage_settings_menu.rp) (generated with Axure RP 8).", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/751/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/738", "title": "Movable, resizable and independent ingame interface elements", "body": "The old Age of Empires II ingame interface is pretty much static, was designed with 4:3 screens in mind and takes up large chunks of the screen. It definitely lacks the usability and flexibility of modern RTS interfaces. Fortunately we are able to change that. We should allow players to \r\n\r\n* move interface elements (like Minimap, Action/Build Menu, Units statistics) anywhere they want\r\n* remove interface elements (or only activate them on button press)\r\n* resize elements\r\n* maybe add own elements with modding tools\r\n\r\nThis would also require a `HUD-Edit-Mode` were players can change their interface.  ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/732", "title": "doc: Possible entries and options for a settings menu", "body": "Since OpenAge will support more options than the original game, we likely have to redesign the entire settings menu from scratch. Before we do that, it would be beneficial to enumerate all entries for our menu. Layouters or designers can then use this information to draft a GUI, e.g. for #728 .\r\n\r\nThe options we have to enumerate (as suggested by @coffenbacher) are:\r\n\r\n- [x] Game Settings\r\n    - [x] all useful settings available up through the latest UP / Voobly / HD \r\n    - [x] any settings we see demand for that aren't even in UP but will highly likely be in OpenAge\r\n    - [x] any settings for any highly likely OpenAge-specific features\r\n- [x] Multiplayer Game Options\r\n    - [x] all useful settings available up through the latest UP / Voobly / HD \r\n    - [x] any settings we see demand for that aren't even in UP but will highly likely be in OpenAge\r\n    - [x] any settings for any highly likely OpenAge-specific features\r\n\r\nAdditionally it would be nice, if we could sort all entries into categories.\r\n\r\nInspiration can also be drawn from other (RTS-)games with nice and highly configurable interfaces like DoTA2.\r\n\r\nFeel free to suggest any options/entries/categories/nice-to-have-features in the comments. I'll add everything to this [gist](https://gist.github.com/heinezen/68b828708a5e2521b786b4e398d43f18).", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/3f2fd34c76a1c2d9d56027d46e805f6bfb060be2", "message": "Replace double whitespace with <br/>."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/986e731524f2933d64aa1f3a4340f76bd65d7926", "message": "Add various ideas from 2017"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/001b9081df54779b92a56b12a81204193a377150", "message": "Convert: String everything back together nicely."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b6de538b5a0e5309bd3fab4e4bb5f69280233bef", "message": "Convert: AoE1 + Rise of Rome."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/149b34ff974ea28450824a1be8db29b8e897d828", "message": "Convert: SWGB und Clone Campaigns."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8f0a629a54ff42f67ce8ce7974e029700bccf7a8", "message": "Convert: Update discovered unknowns."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ce73cf606fb4ac82dae9927e31cf356fc919ba07", "message": "Convert: Update map conversion."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b9c3fabe25df80bad7abf3f6b480daf1a16626b3", "message": "Convert: Update data_format with new findings."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ff9065b7096d36c2fdc859b62e1184d721910304", "message": "Convert: Add engine_version for every game."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7c1fff2a743b7082e4cb6cbb0c21cd801965af93", "message": "Convert: Adapt everything to list()"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1a41910ef3cf7d5d90e682b7d91700b28dec9b9e", "message": "Convert: Use list() for data_format"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fcef778a892f11daaf9a22299250a95168dcd2e3", "message": "Minor fixes."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/415c7adba2cdf0793a09f59ba803aeb272262756", "message": "Networking: Final sync and spoofing enhancements."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bd1527c1f01522923021f7976606f508707a13b1", "message": "Convert: Add several game versions."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5254bdbe63461a5342e146938e03f3056c52a78b", "message": "Networking: Rework chat protocol."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/156e2a9f5f9cdb7b11cf6ee40d1f1bc1389ed472", "message": "Networking: Lobby and lobby sync."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c1aa1a068d2d34abbcd28787ceb4cf470bd1ba25", "message": "Networking: 16BC41 sync."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fa4fcf2c1efe1441b235dc7156bdd225cccb91bb", "message": "Integrate suggestions from @goto-bus-stop and @happyleavesaoc"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/db5d74de04362db62c416807e06a881ac5eac559", "message": "Scrolling: Remove mouse focus requirement."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fb206c7307125c859cb23a78129e5c1cdc7b96b7", "message": "change player_id to player_number for some actions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3a4eeaac82d39cb8946e643d6853e2553d80d265", "message": "Reverse Engineering: Header (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5b250e5748cd7f078d2519dc3c6c7ae622c4566e", "message": "Reverse Engineering: AI (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3b854ba78b122d4e34275a95ae1435250e1030ba", "message": "Reverse Engineering: Misc actions (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/be4ccfe1f6fd571ada32292cd1273c49ae49646a", "message": "Reverse Engineering: Buildings (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/90a33b1de5b7f2270805f2bddd3f84f59e283f8f", "message": "Reverse Engineering: Market (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8aa9a2da2cd17faf4fb71a2a7169384792b1e559", "message": "Reverse Engineering: Unit training (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/23718b7d5baf853b34b80e036f068a064c621211", "message": "Reverse Engineering: Formation (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4b2ffa3bb554c51a0dd61619a5e1f45e37876cae", "message": "Reverse Engineering: Primary actions (network)."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b9c42b59d978826344789aaa83dfba8b7226cbfc", "message": "Reverse Engineering: Clarify waypoint coordinates."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1e9fa1e20e06e5b3ebd91f5331230ca84eda6bd5", "message": "Reverse Engineering: Movement (network)"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/aa5c95f0f3523897bf01614d63b5a03bda88f4ed", "message": "Reverse Engineering: Prepare documents."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/151019e0a9c369701f34c06eddcfd0954a0c7dd7", "message": "Reverse Engineering: General protocol structure."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5d932a1d2600a4eebe5c9e1d855f5124f36ac049", "message": "Reame: More pep, less confusing sentence."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/228ca9a1e1b8c99cd57f96d99a1f17ba33de017a", "message": "Reame: Add Genie Engine games."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5187b57288dfc9986e53c3e56224f0af459f4f27", "message": "Reverse Engineering: Selection."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2f711952878fb49d11a274aec8a9b9c15dac2dce", "message": "Reverse Engineering: Do some de-personalization."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6ee81e4c2ed97bc6c5bdefe3ba388f92c4032f6f", "message": "Reverse Engineering: Change screenshot links to images."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5a4a740a26ff1e27197df2dabcbae2969190102b", "message": "Reverse Engineering: Spoofing and forgings chat messages."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f695639a7e4edb715f969674eb7edfd91f63f5d6", "message": "Reverse Engineering: Add images to message spoofing."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b60a44bb41c65ef735bb5c36a71a4c8a70a7196a", "message": "mention patch 4.3 in media_convert.md"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/72082d02cd614130496ba0b91080a4d5805bed1c", "message": "update README"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6833034a78afa274c5ecfc23a50e6f4c9cb7c6dd", "message": "create troubleshooting doc."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6b1c6bc04646b97919097f42a79f92483cca0538", "message": "Reverse Engineering: Add info about the chat protocol."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5377ba85aaf71cbb7445f51ce7635bfb041ba3af", "message": "Reverse Engineering: Reorganize file structure."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/58bbceb2f0f11646ac4f12505517f00f06ebd9b5", "message": "Reverse Engineering: some pseudocode for ordering units."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b5f93aeb7982ad842170b902b9b23729f8cb83cb", "message": "Reverse Engineering: New pseudocode for subformation.add operation."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7ba32a9ae4c0fb8a3220b7f110ff8e5d3c02a7cf", "message": "Reverse Engineering: Small corrections to formations.md"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/aceaf61f338bc0df14f5fa503eb55861ccf89390", "message": "Reverse Engineering: Pottinger's principles and their limitations in AE2."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f4cff8272ff52796a07afe10dbfae48055e4bb9c", "message": "Reverse Engineering: Formation Type."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d500b80056378880ff9726c880cb3d36671df6b9", "message": "Reverse Engineering: Influence between subformations."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4216d3a10d9981f44af8bb7efb02f85382adf951", "message": "Reverse Engineering: Mixing units."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9a68fabc54cc21dd2fbdb8c29d481d1db436a242", "message": "Reverse Engineering: Ship formations."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cbf5b7855fea6d1ca85ffcb1c9501831cb069eb4", "message": "Reverse Engineering: Create formations.md."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/23444552", "body": "@MythTitans That's interesting. Any idea why this would be used in the network protocol? From what I've read, the reason for using SSO is memory optimization on the client. ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/23444552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "thawkins": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/954", "title": "Proposal: domestication", "body": "Priest conversion capability on wild animals to convert them into controlable military units,  domesticate wolf packs and direct them to attack enemies or defend buildings and units with guard. ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/954/reactions", "total_count": 1, "+1": 0, "-1": 1, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "waghcwb": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/953", "title": "Implement all contributors in this project", "body": "Loved the project.. I would like to suggest the implementation of [this specification](https://github.com/kentcdodds/all-contributors) for recognizing all type of contributors for the project.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryandakid": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/946", "title": "CMake Error at buildsystem/codegen.cmake:25 (message):   failed to get target list from codegen invocation", "body": "I almost fixed everything, just this is left...\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files (x86)\\Python36-32\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Program Files (x86)\\Python36-32\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\SFTtech-openage-fb4a9eb\\openage\\__main__.py\", line 133, in <module>\r\n    sys.exit(main())\r\n  File \"C:\\SFTtech-openage-fb4a9eb\\openage\\__main__.py\", line 83, in main\r\n    from .convert.main import init_subparser\r\n  File \"C:\\SFTtech-openage-fb4a9eb\\openage\\convert\\main.py\", line 7, in <module>\r\n    import readline  # pylint: disable=unused-import\r\nModuleNotFoundError: No module named 'readline'\r\nCMake Error at buildsystem/codegen.cmake:25 (message):\r\n  failed to get target list from codegen invocation\r\nCall Stack (most recent call first):\r\n  libopenage/CMakeLists.txt:54 (codegen_run)\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"C:/SFTtech-openage-fb4a9eb/build/CMakeFiles/CMakeOutput.log\".\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TheJJ": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/937", "title": "Translation: Fr\u00e4ngisch", "body": "As part of #107 it would be beneficial* to also support the (widely known) [german dialect of Fr\u00e4ngisch](https://en.wikipedia.org/wiki/East_Franconian_German).\r\n\r\nWe could then have [settings menus](https://github.com/greenshot/greenshot) [like this](https://github.com/greenshot/greenshot/blob/master/Greenshot/Languages/language-de-x-franconia.xml):\r\n![greenshot](https://user-images.githubusercontent.com/673543/33235649-bed9f4f2-d23c-11e7-9e14-4d44d914bba7.png)\r\n\r\n\\* Disclaimer: This translation may not actually be beneficial. It may increase the humorous value of this project as an unintended side effect.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/937/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/920", "title": "Create game launcher", "body": "It may be useful to have a game launcher with these features:\r\n\r\n* [ ] Update functionality for non-package-installs (Windows, macOS?)\r\n* [ ] Mod ordering and activation (later, the download and update manager for those)\r\n* [ ] Convert script invocation (for initial convert-mod creation and updates)\r\n\r\nIf needed, it can be extended with some more features, but this should be good for now.\r\n\r\nI'd say this should be written in Python and Qt.\r\n\r\nIt strongly works together with #632 and then has to provide information to the engine about the activated mods when it performs the launch, but how? :)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/919", "title": "Enable more non-default warnings", "body": "Although we've long hat `-Wall` and `-Wextra`, there is more useful warnings:\r\n\r\nhttps://kristerw.blogspot.de/2017/09/useful-gcc-warning-options-not-enabled.html\r\n\r\nWhich of those should we activate?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/899", "title": "Use Sphinx and Breathe (+Doxygen) for documentation", "body": "Currently, we have Doxygen to generate our inline C++ documentation (`libopenage/`). We also use it for the Python code (`openage/`), but we should switch to [Sphinx](http://www.sphinx-doc.org/) for this.\r\n\r\nTo beautify our `doc/` folder, we could use [Sphinx](http://www.sphinx-doc.org/).\r\n\r\nTo link between both, there is [Breathe](https://breathe.readthedocs.io/en/latest/).\r\n\r\nThen we would have a nice and one-for-all documentation by Sphinx: It natively support Python, the C++ parsing is still done by Doxygen which would be nicely integrated via breathe.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/852", "title": "macOS event dispatching broken", "body": "#828 figured out that for a successful mac run the event dispatching for mac needs to be changed.\r\nThis has to be fixed properly.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/837", "title": "Ensure spaces around operators", "body": "The codecompliance checker in `buildsystem/codecompliance/cppstyle.py` should check that the following `C++` operators always have at least one space before and after them:\r\n\r\n* `+=`\r\n* `-=`\r\n* `*=`\r\n* `%=`\r\n* `>=`\r\n* `<=`\r\n* `==`\r\n* `!=`\r\n* `~=`\r\n* `^=`\r\n* `|=`\r\n* `&=`\r\n* `<<=`\r\n* `>>=`", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/820", "title": "Define \"new\" engine modules and their interfaces", "body": "For the required architecture changes and in preparation for multiplayer games, we need to define needed components and how they talk to each other.\r\n\r\nThis is the main architecture-replanning step! The coarse goal architecture is stored in https://github.com/SFTtech/openage/blob/master/doc/architecture.md#information-flow.\r\n\r\nNow, we need to design it in more detail. Of course, such a design is impossible to get at the first attempt, so we'll have to create it in a \"changable\" way.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/816", "title": "Needed engine gamelogic features", "body": "We should come up with a list of things the engine has to be capable of to properly simulate the games we want to support. This includes every detail that the engine has to calculate differently.\r\n\r\nBasically this is what we need to implement and what the [`nyan`](https://github.com/SFTtech/nyan) API will provide then for the games.\r\n\r\nThis collection should go into `doc/features.md`.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/815", "title": "Add development guide with tips and tricks", "body": "We could use a simple guide file for new contributors. We have that for `git`, but not for Python and C++.\r\n\r\n* usage of `asdf` to break the CI build intentionally\r\n* how to add a new feature (e.g. adding a `demo` so you have a \"new\" `main()` function)\r\n* common C++ mistakes (let's see if we can get those in under 100MiB :P)\r\n* redirection to the `code_style`\r\n* how to profile (python, cython, c++)\r\n  * python (`openage.util.profiler.Profiler`)\r\n  * cython ([activate profiling in cython code](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html), then start profiling with the `openage.util.profiler.Profiler`)\r\n  * C++ (hit `F12` to start and stop profiling, then you'll get a report-PDF)\r\n* summary of\r\n  * useful openage functions (incl redirection to testing/demo docs and others)\r\n    * `ENSURE` macro\r\n    *  `log` system introduction\r\n    * `error::Error` and `MSG` usage\r\n    * `libopenage/util/fslike` introduction\r\n    * `libopenage/util/timer`\r\n    * `libopenage/util/strings`\r\n  * make people aware of existing custom datastructures\r\n    * `PairingHeap`\r\n    * ...\r\n  * how to add cython files\r\n  * how to add c++ files\r\n  * how to add python files\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/815/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 2}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/813", "title": "interface to create new cvar variables and their defaults", "body": "The cvar manager is used to store key-value pairs for engine settings.\r\n\r\nProblem: cvars (\"keys\") are assumed to exist, and if changed, it's unknown which config file it belongs to.\r\n\r\nPossible solution:\r\n* [ ] Extend the `CVarManager::create` interface to support default values and categories.\r\n  * That way \"missing\" entries can be recreated\r\n  * Categories allow filename-distinction\r\n* [ ] Map categories to storage file names (i.e. allow creating new categories with an associated filename).\r\n\r\nBonus points:\r\n* [ ] Add writeout-support so all cvars are written out (by category) to the right file (e.g. `keybinds.oac`).\r\n\r\nLocation:\r\n* `CVarManager` is in `libopenage/cvar/`\r\n* cvar reading (and then the writing) in `openage/cvar/`", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/812", "title": "Improve testing/demos guide and add benchmarks", "body": "We have existing documentation for creating tests and demos in `doc/code/testing.md`.\r\n\r\n* [ ] Simplify and improve the guide\r\n* [ ] Add a how-to for [benchmarks](https://github.com/SFTtech/openage/pull/802)\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/808", "title": "Integrate Age of Empires I", "body": "We will support the original age of empires data, the gamelogic is very similar as the game used the previous version of the Genie engine.\r\n\r\nIn order to make this work, our converter has to support the conversion of Age I data.\r\nMissing engine features are tracked in #816.\r\n\r\nRelated:\r\n* RoR support #785\r\n* SWGB support #421", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/808/reactions", "total_count": 7, "+1": 0, "-1": 0, "laugh": 0, "hooray": 4, "confused": 0, "heart": 3}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/807", "title": "Remember previous asset location", "body": "After a \"successful\" conversion, we could store the location of the source folder in `root/cfg/asset_location` so that upon the next conversion, that folder will be reused by default.\r\n\r\nImplementation should probably be in:\r\n* `openage/convert/main.py`\r\n* and pass the full `root` path to the `conversion_required` in `openage/game/main.py` (currently it's just `root/assets` but we wanna have `root/cfg` there to read and write the file)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/765", "title": "Add APNG (animated PNG) support", "body": "https://wiki.mozilla.org/APNG_Specification\r\n\r\nThe only problem is that opengl will have no idea how to draw it, and we'd still have to create an atlas I assume.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/750", "title": "Flamegraph support", "body": "Our tests, demos and the game should have an easy way to generate [flamegraphs](https://github.com/brendangregg/FlameGraph).\r\n\r\nIdeally, this would be integrated into the main python launcher, which is `openage/__main__.py` and the argparsing from there.\r\n\r\nWe should not add flamegraph as a dependency, but rather add a convenient (and documemented) way to run it.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/740", "title": "Event based future prediction engine", "body": "We have some ideas to make the game engine completely tickless. That means there will be no regular update interval in the simulation. It becomes *event based*!\r\n\r\nBasically, on each event we always try to predict it's influence to the world as much into the future as \"it makes sense\". For that, we have a space-time model of the game state, that is, all the data is time-relative. We can then align the event into the spacetime and make required adjustments to the predictions.\r\n\r\nThe differences to the standard ticked-approach are not that big, especially in the simulation logic itself. Just the approach and data storage is totally different.\r\n\r\n* As our world is 3d (we do want to have terrain height..), we have to store spacetime in 4d\r\n* An entity has a 2d or even 3d hitbox, which, dragged over time is a **Tube** (i.e. curve with volume)\r\n* The movement and the changing properties of the entity is a **Curve**\r\n\r\nQuestions to solve:\r\n* How far do we calculate into the future?\r\n  * Probably depends on the event (pathfinding, research start, attacking, ...)\r\n  * Many events are easy to predict for `t -> \u221e` (building progress, research, ...)\r\n  * Can account server load to abort further recursion\r\n* Which influence in the spacetime wins?\r\n  * Events that would be anticipated by a intelligent being can already be accounted\r\n  * Events that can't be anticipated or the entity to be influenced is dumb must always win\r\n* When do we continue calculating at points where we aborted further prediction calculation?\r\n  * Could be done by seting up a \"continue calculation\" keyframe at the point where calculation was stopped before\r\n\r\nYes, it sounds crazy, but it may work. More info to come... \ud83d\udd25 \r\n\r\nhttps://0fps.net/2014/02/26/replication-in-networked-games-spacetime-consistency-part-3/", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/736", "title": "Obstruction manager", "body": "As part of the pathfinding, we need an obstruction manager.\r\nIt is for keeping track of not-so-often changing parts in the world.\r\n\r\nWhat should that thing do:\r\n* Provide nav-mesh that allows inter-chunk-navigation\r\n* Update the nav-mesh when buildings are placed, trees fall, etc\r\n* Keeps a density grid by terrain slope, terrain type and other obstructions that just slow things down\r\n\r\nThe obstruction manager ignores moving units.\r\n\r\nThe nav-mesh is used by the long-range pathfinder (\"where is a possible way to the goal 40 chunks away\"). The long range search is probably done by `A*`, maybe with `JPS`, but it doesn't matter.\r\nThe density grid is used by the flow field pathfinding, so it can integrate that density grid so units can then do gradient descent on it.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/735", "title": "Scripting API", "body": "As our ultimate goal is cool moddability, and not everything can be done with data mods (with nyan #734)  we also need scripting support.\r\n\r\nThis consists of multiple parts that need to be done:\r\n\r\n- [ ] Load and run scripts\r\n  - [ ] Load scripts via nyan\r\n  - [ ] Install script hooks via nyan\r\n  - [ ] Let the script manipulate the hooks it installed\r\n- [ ] Game manipulation\r\n  - [ ] Apply patches in nyan\r\n  - [ ] Perform actions with game entities\r\n  - ...\r\n- [ ] higher level AI scripting\r\n  - [ ] Python interface\r\n  - [ ] even higher level lisp-like interface like the original's ai scripting language\r\n  - ...\r\n- [ ] Caution users against unsgned mod packs containing scripts\r\n  - We can't and want to sandbox python, you should be able to use http://scikit-learn.org/ and the like\r\n  - The openage-dev-team should be able to sign mods that have approved code: We can still hack your computer with the regular openage code, so we can also sign mod code.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/734", "title": "Integrate nyan", "body": "My master's thesis is about implementing and designing [nyan](https://github.com/SFTtech/nyan) (#28).\r\n\r\nAssuming it is finished, openage needs a huge overhaul to integrate it.\r\nThe integration must be done step by step to constantly see progress and keep motivation up.\r\n\r\n- [ ] Upgrade game logic\r\n  - [ ] Dynamic attribute instanciation\r\n  - [ ] Dynamic actions assignments\r\n  - [ ] Dynamic ability activation\r\n  - ...\r\n- [ ] Create the openage-engine nyan API\r\n  - [ ] Add game content (units, assets, ) via nyan (configures the game logic)\r\n  - [ ] Add additional content via nyan (UI, QML, Shaders, ...)\r\n  - [ ] Integrate that with changes to the Python-API (so that mods may ship Python scripts)\r\n- [ ] Convert the original game information (the dat file) to nyan\r\n- [ ] Create replacement files in the [openage-data](https://github.com/SFTtech/openage-data) repo", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/730", "title": "Optimize terminal emulator rendering", "body": "Our terminal emulator is basically feature complete (it can run vim!), but the rendering is very slow and inefficient. Please optimize it.\r\n\r\nThe non-opengl-output can be tested with `./run test -d console::tests::interactive`, you'll get a shell.\r\n\r\nYou should synchronize with #287 and in the chat room so that it is integrated with the renderer instead of doing the same things again.\r\n\r\n`libopenage/console/draw.cpp`\r\n\r\nMaybe you get some ideas here:\r\n* https://github.com/kovidgoyal/kitty\r\n* https://github.com/jwilm/alacritty", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/729", "title": "User profile support", "body": "In order to create different settings and progress that don't depend on the logged-in user, we have to support user profiles. We have to think of information that is stored per-user (e.g. `name`) and extend the cvar system.\r\n\r\n* [ ] What do we need to store per user?\r\n* [ ] How are profiles switched?\r\n* [ ] How do we store the data? (we probably want to preserve user comments)\r\n\r\nWe could maybe use nyan for storing the configuration, as that supports overlaying of data natively,", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/728", "title": "Graphical configuration interface", "body": "Yes, we don't have many things to configure right now, but we need an interface.\r\n\r\n* [ ] Use QtQuick to draw a config UI\r\n  * Text entries\r\n  * Sliders for number entries when appropriate\r\n  * Cancel and OK button\r\n* [ ] Display settings from the cvar subsystem\r\n* [ ] Write back changes done in the ui (cvar system probably doesn't support that yet)\r\n\r\n* [ ] Needed settings\r\n  * Frontend to change the UI scale for #673\r\n  * ...", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/689", "title": "Efficient storage of unit positions", "body": "We have to store the unit positions efficiently, so they are rendered and interacted with on demand only.\r\nWe might want to use our chunks for that.\r\nCurrently, all units are contained in the `class UnitContainer` in the `live_units` map.\r\n\r\nThe new hierarchy should be bound to our chunks to allow better local search for neighbors.\r\n\r\nhttps://en.wikipedia.org/wiki/Quadtree", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/673", "title": "HUD scaling for high-DPI displays", "body": "Our Qt-GUI should easily be scalable by some slider to be big on high-DPI displays as well.\r\n\r\nAs the system supports arbitrary resolutions, it should also be zoomable to have the size the user desires.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/671", "title": "Object mouse selection by the renderer", "body": "Currently, the outline of the unit does not matter for selecting it.\r\nWe have to build the renderer (#34 #286 #287) in such a way we can tell which pixel belonged to what unit.\r\n\r\nThis allows us to click anywhere in the game and then determine what object was drawn there.\r\n\r\nhttps://capnramses.github.io/opengl/raycasting.html\r\nhttps://en.wikibooks.org/wiki/OpenGL_Programming/Object_selection\r\nhttp://schabby.de/picking-opengl-ray-tracing/\r\n\r\nFixes #368 \r\nhttp://www.lighthouse3d.com/tutorials/opengl-selection-tutorial/", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/655", "title": "Implement cheats", "body": "As a very important feature, we need cheats of course.\n\nImplement those in the `libopenage/cheat` subsystem, which is then used by the engine to trigger all the funny actions.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/650", "title": "Building destruction physics", "body": "[![castle destruction](https://thumbs.gfycat.com/AfraidBriefGibbon-poster.jpg)](https://gfycat.com/AfraidBriefGibbon)\n\nOur buildings should be fully destructible. Yes, it requires 3D models and advanced physics simulation. Would be totally awesome though.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/650/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/636", "title": "Improve our texture atlas packing algorithm even more", "body": "We might optimize our [texture atlas generation](https://en.wikipedia.org/wiki/Texture_atlas) even more.\r\n\r\nhttp://clb.demon.fi/projects/rectangle-bin-packing\r\nhttp://blackpawn.com/texts/lightmaps/default.html\r\n\r\nhttp://clb.demon.fi/files/RectangleBinPack.pdf\r\n\r\nThe code is located in `openage/convert/binpack.py`. If necessary, you can make a Cython `.pyx` out of it.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/632", "title": "Asset pack format", "body": "We need a convention on how a asset pack looks like.\r\n\r\nQ: What is an asset pack?\r\nA: A collection of files that provide the engine with data to display.\r\n\r\nQ: What is in an asset pack?\r\nA: Some files, proposal:\r\n- root mod metainformation file (\"pack.nfo\"?)\r\n  - contains name, author, version of the mod (`name =`, `author =`, `version =`)\r\n  - dependency information (`conflicts =`, `requires =`, `replaces =`)\r\n  - nyan file name to load (`load = index.nyan`)\r\n  - nyan object name of the mod information (which inherited from `Mod`) (`mod = MyMod`)\r\n- mod data files in arbitrary directory hierarchy\r\n  - images\r\n  - nyan files to add content\r\n  - qml files for adding gui components\r\n\r\nexample mod pack:\r\n\r\n```\r\n    only enforced file name: pack.nfo\r\n    /\r\n        pack.nfo <- \"load = anothermod.nyan; mod = anothermod.MonsterMod\"\r\n        anothermod.nyan <- \"import tentaclemonster.monster; MonsterMod(Mod)...\"\r\n        tentaclemonster/\r\n            monster.nyan\r\n            moving.png\r\n            raping.png\r\n            fleeing.png\r\n            rape.py <- when a mod registers >=1 py file, it's a \"code mod\" that displays a big red ! if not signed by openage-authors.\r\n```\r\n\r\n---\r\n\r\nnfo format idea:\r\n```\r\nname: (identifier) (must equal folder name?) (identifier in oa mod repository)\r\nversion: (major.minor.patch)\r\n    \r\nprovides: (list of [identifier (= version)]))\r\nconflicts: (list of [identifiers ((>=, <=) version)])\r\nrequires: (list of [identifiers ((>=, <=) version)])\r\n    \r\ndescription: <human-readable>\r\nurl: <mod homepage>\r\nlicense: (license name or url or whatever)\r\nauthors: username <mail>, anotherguy <moremail>\r\n    \r\nload: folder/somedata.nyan\r\nmod: folder.somedata.ModObject\r\n```\r\n\r\nexamples and further ideas:\r\n\r\nvanilla/pack.cfg:\r\n```\r\nname: vanilla\r\nversion: 1.0.0\r\nprovides: base\r\nconflicts: sftflavouredvanilla\r\ndescription: converted from AoC by openage alpha 1.2.3\r\nurl: http://openage.sft.mx\r\nlicense: proprietary\r\nauthors: ensemble studios (via openage.convert)\r\n\r\nload: data/main.nyan\r\nmod: data.main.Main\r\n```\r\n\r\nvillageroverhaul/pack.cfg:\r\n```\r\nmodname: villageroverhaul\r\nversion: 4.2\r\nrequires: base   # you could also write 'requires: vanilla'.\r\ndescription: makes your villager so much better you'll never want to play stock oa again!\r\nurl: http://forum.openage.sft.mx/mods/villager_overhaul\r\n\r\nload: villager/mod.nyan\r\nmod: villager.mod.BetterVillager\r\n```\r\n\r\n---\r\n\r\n== not part of this task, just for your understanding: ==\r\nWhen the mod is enabled, the whole mod pack will be mounted as `/$modname/{contents_of_the_pack}`.\r\n\r\nAfterwards, the `.nyan` file denoted to load in `pack.nfo` is parsed (which will then read all imported other `.nyan files`), loaded and checked for errors.\r\n\r\nThen, the mod is activated by applying all the patches denoted in the `Mod` object referenced in the metadata file. This will actually initially modify the game data tree and \"install\" the mod.\r\n== end of just-to-understand section ==\r\n\r\n---\r\n\r\nBasically, please design and implement the above in `openage/pack/` so that we have a Python `class Pack` we can create for a mod pack like `somemod = Pack(\"path/to/the/mod/pack/\")`.\r\n\r\nThen `somemod.name` returns the name, `somemod.patches` returns the name of the nyan patches, and so on.\r\n\r\nedit: use `.nfo` instead of `.oam` :)\r\n\r\nThese packs are then loaded and managed by the mod loader.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/628", "title": "Have unpredictable map generation in multiplayer", "body": "In order to not reveal any information about the map except the actually discovered areas, the gameserver must not provide the seed used for the generation to the clients. Instead, only seen tiles/units/etc are transmitted in the state they were last seen.  Great cheat protection :)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/628/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/617", "title": "Add menu to action mode", "body": "Add (a prototype of) the classic escape-menu in the action mode. This is the menu that opens ingame when pressing the escape (or other bound) button.\n\nIf you have no other idea what buttons it shall contain, add:\n- Back\n- Quit game\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/616", "title": "Add quit button", "body": "One should be able to quit the game by pressing an exit button. This shall be done in the menu mode.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/580", "title": "Touch events", "body": "Qt5 supports touch screens, but our input relay does not forward them yet.\nFlicking the object lists by touch events would be a really nice feature.\n\nimplemented in:\n`libopenage/gui/guisys/private/gui_input_impl.cpp`\n\nused by: https://doc.qt.io/qt-5/qml-qtquick-flickable.html in `libopenage/gui/qml/TypePicker.qml`\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/35560213-touch-events?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/562", "title": "Master server integration for lobbies", "body": "After multiplayer games are working, we want to mediate players between lobbies.\r\n- Anybody can host a game\r\n- The game can be chosen to be registered at the master server\r\n- Others can join the game either directly or via master server\r\n- Games can be password or token protected\r\n\r\nThe masterserver is [already implemented](https://github.com/SFTtech/openage-masterserver) but needs to be further polished.\r\n\r\nMainly, openage now needs to implement the counterpart for the lobby stuff.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/548", "title": "Header inclusion minimization", "body": "In order to reduce compile times and prevent cyclic includes in the first place, all our files should be revisited:\r\n- [ ] In all header files, only non-pointer or non-reference data types are included from another header\r\n- [ ] All pointer or reference data types are forward declared in each header (`class Bla;`)\r\n- [ ] In the corresponding c++ file, those incomplete types are imported by `#include \"header\"`\r\n\r\nThus, complete types are only included in files where they are needed.\r\nTemplate stuff and inheritance parents etc must be included in header files directly of course.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/545", "title": "AppImage packaging", "body": "We should provide easy support to create an AppImage for openage.\r\n\r\nhttps://github.com/probonopd/AppImageKit\r\n\r\nMaybe there are other similar approaches, we should also work towards supporting them.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/540", "title": "Log levels and filtering", "body": "We already have log levels, but all messages are printed to `stdout` right now.\r\nThis is the `stdout sink` of the logging subsystem.\r\n\r\nFiltering for log origin is prepared, but not implemented.\r\n- [ ] Implement more log sinks, for example for a specific unit, so we can print its messages in a console window flying above its head (#48)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/530", "title": "Network communication design", "body": "tl;wr: the server does all calculations, clients only render the state they received. state is transmitted by keyframes at \"predicted\" end points.\r\n\r\nThe design is pretty much like on would do it for a FPS.\r\n[The basic idea is this](https://blog.forrestthewoods.com/the-tech-of-planetary-annihilation-chronocam-292e3d6b169a): The server sends a packet which updates the \"target\" state of the future for clients. They interpolate the received movement/update/... functions and try reaching the target state all the time.\r\n\r\n```\r\nserver\r\n------\r\n\r\n* central trust instance for the game state.\r\n* does all the calculations based on input events.\r\n* create and distribute keyframes for all clients\r\n\r\n\r\nclients\r\n-------\r\n\r\n* receive keyframes\r\n* calculate world state for current time by interpolating keyframes\r\n* display world state and fancy animations et\r\n* send actions to server (timestamp is probably a bad idea)\r\n```\r\n\r\nThis is the low-level part for transmitting the results of the simulation itself.\r\n\r\nTo understand how the prediction works, see #740.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/518", "title": "Use libuv for asynchronous operations like networking", "body": "Additional to our job subsystem, it might come in handy to use libuv:\r\n\r\nhttp://libuv.org/\r\n\r\nWe can use it primarily for network transmissions, for filesystem access our job system is good enough already I hope.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/503", "title": "Track configuration changes", "body": "All configuration changes, e.g. mod updates, keybindings, graphics settings, etcetc should be logged. That way, a user can determine what caused some break.\n\nActually all software in the world should do it this way.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30511642-track-configuration-changes?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/497", "title": "Try to use georgia font in-game", "body": "Georgia seems to be used at least for resource counts.\r\nFor an authentic look, it should be used in the UI.\r\n\r\nhttp://fontsgeek.com/fonts/Georgia-Bold\r\n\r\nCould also be http://fontsgeek.com/fonts/Copperplate-Gothic-Bold-Regular\r\n\r\nfollow up to #355", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/494", "title": "Warn players when disconnecting from loosing game", "body": "It's very annoying that players leave the game, especially in early phases, because they think they have lost.\n\nWe should add a warning that says something like:\n\n```\nHey you, have you tried fleeing to one of your allies?\nTry moving to their base and support their fight!\nIt's bad habit leaving the other players hanging, so please reconsider.\n```\n\nAnd probably adapt the message by analyzing the game state.\nOther ideas? :)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30295316-warn-players-when-disconnecting-from-loosing-game?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/442", "title": "mrproper doesn't remove some generated files", "body": "`make mrproper` doesn't remove e.g. the `slp...so` (and some others like the gen'ed .cpp and .h files and some init.py files).\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29552052-mrproper-doesn-t-remove-some-generated-files?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/434", "title": "Use opus/libogg API via cython instead of opusenc binary", "body": "With our Cython interface, we can easily use the `opus` api directly to convert `wav` files to `opus`. For packing it in the `ogg` container, we must use `libogg`.\r\nShould be a bit faster than the current approach of calling the `opusenc` binary for each conversion.\r\n\r\nedit: changed from \"use opusfile\" to \"use opus\" because opusfile can't encode.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/398", "title": "Better out-of-source build python support", "body": "We should consider boosting the buildsystem with ideas from:\n\nhttps://stackoverflow.com/questions/13959434/cmake-out-of-source-build-python-files\n\nBasically:\n- Don't rely on the source folder at all when running\n- Achieve this by symlinking/copying into build directory\n- This makes `make install` easier to implement and understand as the runimage already is present in the binary dir (although symlinks have to be fixed then)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27608012-better-out-of-source-build-python-support?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/381", "title": "Trigger reconfigure when git commit hash changes", "body": "When the value of `git describe` changes, we should trigger a reconfigure when typing `make`. This ensures the version generated to `config.h` matches with the actual repository version.\r\n\r\nThe \"dirty\" solution would be checking for the version each time, something better would be a update watch on some file in `./.git/`, but maybe you have a better idea how cmake may detect a changed HEAD efficiently.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/371", "title": "Peer to peer mod sharing", "body": "Although not much practical use currently, we should be able to share mods via p2p. We should use some DHT, e.g. use trackerless `libtorrent`, ...\n\nWe don't need some ugly forum where people post zip files but instead they share magic links.\n\nEveryone posessing a mod is a potential seeder of course.\n\nThis should be part of our mod manager, not the main game. Further ideas? :grinning: \n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26184699-peer-to-peer-mod-sharing?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/325", "title": "Game stats tracking", "body": "Keep track of values that may be funny for the game results screens:\r\n- Who made the most teamkills (onagers anyone?)\r\n- Accumulated villager idle time\r\n- Ressource wastes (build units/buildings, destroy them within seconds)\r\n- First blood\r\n- Absolutely useless deaths (1 villager vs 10 Hussars)\r\n- ...\r\n- Any other failure you can think of\r\n- And of course also track values that actually are meaningful for the game :stuck_out_tongue_winking_eye: \r\n\r\nI think displaying these would be hilarious on the gameover page.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/324", "title": "empires.dat file offset lookups", "body": "https://github.com/SFTtech/openage/blob/47294b90ee5410ff4e565edb22327155cf7eb02b/py/openage/convert/dataformat/exportable.py#L233\r\n\r\nCurrently:\r\n- If `offset of struct == 0`, skip it\r\n- if `offset of struct != 0`, read the whole struct sequentially\r\n\r\nImprovement:\r\n- Figure out where the offset value points to (it's relative to what? the parent struct? the whole file?)\r\n- Read the struct values from the given offset instead of sequentially\r\n- Be careful where to continue reading data (at what offset?) after all provided offsets were used\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/270", "title": "Integrate more cmake generators into the configure script", "body": "cmake can generate xcode projects, eclipse projects, visual studio projects, and whatnot. Currently we're just using the makefile backend. The alternatives should be advertised in the `readme` somewhere and also be provided by `./configure` conveniently.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/264", "title": "Create file watching subsystem", "body": "Currently, the inotify support is pretty proof-of-concept only. It's directly integrated into the assetmanager, which should be abstracted in the future.\r\n\r\nI'm thinking of creating a `libopenage/watch/` subsystem which provides some sane api for registering a watch on a folder, file, etc with requested events.\r\n\r\nWhen the watched events happen, generic callback functions should be called so we can use the watches for any file watching makes sense.\r\n\r\nIn the background, the \"sane api\" calls the plattform-specific kernel api, but openage can use just one uniform interface. This way we can support OS X, BSD, etc.\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/255", "title": "c++14-ize constexpr functions for string modification", "body": "Now that we have c++14-support, the fancy constexpr functions can be written more readable.\r\n\r\nhttps://github.com/SFTtech/openage/blob/7061e8bf1e54df177981415cd242f2d1dbf69ef1/cpp/util/constexpr.h\r\n\r\nhttp://isocpp.org/files/papers/N3652.html", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/242", "title": "Support Vulkan graphics API", "body": "Of course we want to live on the bleeding edge and support the new shit out there.\r\n\r\nhttps://www.khronos.org/vulkan", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/205", "title": "Profile guided optimization (PGO) integration", "body": "Our buildsystem should support [PGO](https://en.wikipedia.org/wiki/Profile-guided_optimization). This is supported by [clang](http://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization) and [gcc](https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html) (`-fprofile-*`) and will lead to a performance improvement. Of course this does not replace sane programming :wink:.\n\nThis has to be integrated in `buildsystem/cpp.cmake` and is enabled by a `cmake` and `configure`-option.\n\nProfiling procedure:\n- Compile the binary with profile generation support\n- Execute the binary and do typical actions:\n  - Run all test cases\n  - Run demo game\n  - Use as many codepaths as possible that will be active when actually playing\n- Recompile the binary with the profiling information\n  - This optimizes the branch prediction for real-world use.\n\nMight be interesting what the performance impact will be.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8235759-profile-guided-optimization-pgo-integration?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/203", "title": "Inotify support for shaders", "body": "Shaders should be reloadable on the fly as well. When saving the shader text file, it has to be reloaded, compiled, relinked and then replace the previous program.\n\nThis allows awesome-easy shader development with instant updates.\n\nWhen the shadercompiler encounters errors, the newly loaded shader is not applied and the working one is kept active, of course.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8167153-inotify-support-for-shaders?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/197", "title": "Integrate valgrind support for tests and demos", "body": "As the game is getting bigger and bigger, running valgrind on the `./openage` full launch takes ages on my machine.\n\nSome convenient support for launching tests and analyzing those with valgrind will help finding issues and reduce running times.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8079920-integrate-valgrind-support-for-tests-and-demos?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/189", "title": "Create test cases for existing subsystems", "body": "Because reasons we should add more tests to the code.\n\nSubstems with test coverage:\n- [X] Pathfinding\n- [x] Jobmanager\n- [ ] Terrain blending\n- [x] Coordinate system\n- [ ] Asset manager\n- [ ] Logger\n\nFor the missing ones, please create some creative tests.\nAn example how that could look like can be seen in `libopenage/datastructure/`.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7588860-create-test-cases-for-existing-subsystems?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/188", "title": "Create data/asset integrity check", "body": "To speed up loading, all files should only be accessed on demand.\n\nThis means file access errors will be encountered at game runtime only.\n\n-> We have to create a gamedata integrity check which verifies the existence and consistency of all assets.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7502427-create-data-asset-integrity-check?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/173", "title": "zsh completion module", "body": "There should be an openage completion module allowing to select the demos, tests and (soon) benchmarks.\n\nThis file is installed to `/usr/share/zsh/site-functions` but it should also be available for developers somehow (the least elegant solution would be sourcing that file manually).\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6531043-zsh-completion-module?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/154", "title": "Cache terrain blending results", "body": "The terrain blending calculation should not be done on every frame, results can be buffered perfectly and only updates can change the terrain overlays. The terrain blending calculation is done in `libopenage/terrain/terrain.cpp`.\r\n\r\nThis should greatly improve performance, to boost the speed and flexibility even more, a separate shader for this should be implemented (see #149).", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/149", "title": "Implement terrain blending in the shader", "body": "The terrain blending should be updated to be processed in the shader directly instead of drawing and overlaying the tiles again and again.\r\n\r\nWhen we activate the z-buffer, this overdrawing will no longer work (z-fighting yay).\r\n\r\nThe new plan is to meld all involved textures (blending masks and terrains) directly in one shader.\r\nThis generates just one drawable which is then compatible to z-buffering.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/82", "title": "Setup CD and .iso conversion support", "body": "Very related to the conversion targets (#79) and the version detection (#61) is the support of converting media and game files from setup disk images. The Python module `openage.cabextract` provides cab extraction features needed by the `.cab` files on the disc.\r\n1. Pass ISO mount point of the original CD (or even call the `udiskctl` command)\r\n2. Detect version of the disk image\r\n3. Use `fslike` abstraction to mount all archives on disk.\r\n4. Convert contents of mounted archives.\r\n\r\nThe invokation should originate from `openage/convert/driver.py`.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/82/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/71", "title": "Loading screen", "body": "The asset loading may take some time, especially it's currently dumb and just loads everything instead of accessing on demand.\n\nThere should be some \"progress bar\", \"spinner\" or at least on-screen hint that assets are being loaded. Probably related to #70, a black screen is likely to be seen when waiting for the asset loading.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5677226-loading-screen?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/65", "title": "Terrain generation", "body": "`openage` needs random map generation.\r\n\r\nFor that we probably need two approaches:\r\n\r\n* Random map scripts\r\n  * Be creative and implement configurable map generation in Python\r\n  * On top of that, we can implement a [RMS script](http://aok.heavengames.com/blacksmith/showfile.php?fileid=12178) parser that then is mapped to the Python API\r\n* As extension, deterministic infinite terrain generation, comparable to Minecraft, for unlimited map sizes.\r\n\r\nThe important part is the configurable RMS generator.\r\n* Input: some configuration\r\n* Output:\r\n  * Terrain grid (with heights and tile type)\r\n  * List of entities with their positions (trees, animals, resources)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/65/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/56", "title": "preprocessor-free coordinate system", "body": "The preprocessor hackery has to be replaced by the new `openage.codegen` python generation.\r\n\r\nThis should create the necessary headers and should end the pain of the current C preprocessing implementation.\r\n\r\nThe implementation is located in `libopenage/coord`.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/56/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/49", "title": "Static code analysis", "body": "In addition to test cases, we should have some kind of static code analysis integrated into the buildsystem.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/49/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/48", "title": "3D messages ingame", "body": "We need support for displaying any text in the game.\n\nThis allows us to e.g. display debug messages for current coordinates of objects which would otherwise spam the console.\n\nThe first step would be creating a new logging function, which gets the display coordinates as first input.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5619827-3d-messages-ingame?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/48/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/34", "title": "Render manager", "body": "The rendermanager is some kind of batching mechanism to optimize the opengl calls.\r\nThis mainly means to reduce the amount of texture and shader switches for now.\r\n\r\nEverything that should be rendered is submitted to the render manager. It orders the jobs and finally draws them in the optimized, but correct order.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/1", "title": "Age of Empires II (and HD) is being preferred over openage", "body": "Players choose the proprietary game instead of our freedom-respecting alternative.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/1/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/6f7797e7c6b3ef7d727e23db85abf7abfd79a25c", "message": "Merge pull request #947 from tusharpm/msvc_doc_update\n\nUpdate MSVC build instructions to answer some FAQs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d3cf7bf210c384fd36281127b487e158d671481f", "message": "Merge pull request #961 from tusharpm/compiler_version_msg\n\nShow known compiler versions in CMake error message"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cb26aa714529ce7278c54a8fb07cec6fe46776ea", "message": "Merge pull request #959 from nyx/patch-1\n\nupdate Homebrew-Cask installation instruction"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/eb2ce933ebe976ac87b15d7be9f6b63d47fd7dac", "message": "Merge pull request #960 from TheJJ/doc-fix\n\ndoc: fix whitespace error"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e65ad82f2cad973eab0ca75a54706a0b9b7b5860", "message": "doc: fix whitespace error"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/00a7c3325c015a3550f7f00b5cd5547c5f6de2b0", "message": "Merge pull request #957 from heinezen/feature-suggest\n\nFeature suggestions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a4cb3dec2165832f9efd13edf60f82c8ca2dc019", "message": "Merge pull request #952 from vaibhavkaul/patch-1\n\n[IDEAS] Proposal to allow using wood forests for sneak attacks."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/436e9e38ee2b9546e003bf380ee3f49b8d96b3c8", "message": "Merge pull request #955 from tusharpm/cxx_compile_features\n\nRequire C++ compiler to support C++17 features"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f942bfb2be093cc360ebbe65ff401644c44426a6", "message": "Merge pull request #942 from heinezen/convert\n\nConvert data for all Genie Engine games"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/adccacea6f84a7ebae5cdc097047a39902f1c50c", "message": "readme: add nyan to technology table"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/61b5383e111d05a108c87d5030b628dac19328ee", "message": "doc: update to c++17"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/831d49865cae9c41cf8d913f2a41bc9f68b22dc2", "message": "buildsystem: require c++17"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/14083ab0d0b706cf9d16a781dc690de31ac89f63", "message": "buildsystem: don't check if subproject folder still exists\n\nit would be downloaded again anyway"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/26746de63072c6e2966ac69731484dad9f63db55", "message": "buildsystem: make disable_updates an option"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fe1a49e51fa8c9dfe1886c0c28c7e3197267317d", "message": "convert: open registry information file as binary"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2d7e34a7dad51bddb9e602ebb83f8cce8ff403be", "message": "buildsystem: detect if folder of subproject still exists"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/68f2bc32dd9ee2214d36d14d05d3b26f77a157b1", "message": "buildsystem: allow manual deactivation of subproject updates"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/378946dc055342088215d64cd81467888daa3e66", "message": "buildsystem: add optional clang-tidy activation"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1ea86dcfc34637724fbcd81d753507f7374840b4", "message": "buildsystem: enable automoc on generated files (cmake policy 71)"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c90d01ba79131f7dab8b0083f7743cf772a85d56", "message": "buildsystem: central definition of python and cython version"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8db04ffa80d14f0220ecd9b7f9bf11b52cd24aa9", "message": "buildsystem: declare C++ standard as global definition"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/dee9787f591eb9b8e06f98824d1eef3cbdf82065", "message": "buildsystem: hint at configure option for nyan download"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6a35735d36ccc4d35cdd4ccd0bf282a903c8d18f", "message": "buildsystem: don't download nyan by default"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e7fa3c7966d3cf9390d7235d36e75d70ef607451", "message": "kevin: test the internal nyan downloader"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ee45f90cac67a6c3c7046eb934b92d75c35c4404", "message": "buildsystem: easy access to download nyan in configure script"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9319e6ede1de572b1d0ce707e374421188902667", "message": "buildsystem: download nyan with -DDOWNLOAD_NYAN=YES\n\ndiscovery as system package or from userpackage repo is still supported"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b73d105e6edcc5dcdf106a10db08c95dd154a325", "message": "kevin: build and install nyan"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cf34d208e0a1bc4d5c607d9c01c800743e498641", "message": "util: raise SIGTRAP for debugging\n\nthis allows x86-independent breakpoints."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6fd7035897706dcf9e417aa3dd33e1a624873d90", "message": "configure: populate raw_cmake_args after a -- in command line"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bb5d10780721c6e60e37a8898a01733646b822c2", "message": "nyan: initial library linkage"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7be301bb2cf99ec8d72c672ff0ce64d893a22c9a", "message": "Merge pull request #945 from devnexen/freebsd_fix\n\nLet s just use directly the cmake variable, avoiding"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fb4a9eb2cb4c76cc2737b10a46c874f496cd12b7", "message": "Merge pull request #941 from Arkanosis/media_path\n\ndoc: add the default Steam Linux path to the examples"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9f50887b7c353af2d0a98da402f0bd3c006936d2", "message": "Merge pull request #940 from chocoladisco/patch-3\n\nDebian Sid Build Instructions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/70f84da4662e3fb67b8d5976fdf5815b5a6e46d6", "message": "Merge pull request #930 from PythonicChemist/master\n\nutil/strings.py updating to same string formatting method and slight \u2026"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c69922d8edaa552f9a7d036405585da8600d83ac", "message": "Merge pull request #921 from kev946/remember-prev-asset-location-807\n\nRemember previous asset location"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5fba0b2650044fe77314bd4b7ab9ba6524812569", "message": "Merge pull request #925 from katamaritaco/patch-2\n\nUpdate typo in README"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b74f7ffa657cc8e81622b8f9d81c574bfc8ad8a5", "message": "Merge pull request #924 from PythonicChemist/master\n\n[Refactor] util/system.py free_memory() single exit point"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d079531a9dd39132917972363b60cfd030165508", "message": "Merge pull request #918 from tusharpm/win-cython-patch\n\n[Windows] Change path separator in generated pxd files"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d7915daa8c547cc850e8bafdc2f7f6b813cc9b0f", "message": "Merge pull request #917 from kev946/fedora-build-915\n\nConsolidate fedora build instructions into a single document"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/015fb5284b1814b5327c8e6f499c35bdee05d321", "message": "Merge pull request #898 from tusharpm/win-pkg\n\nWindows installer package"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f5f88241637ce4e89224cdfb84e96e1318fe208d", "message": "Merge pull request #916 from heinezen/remove-mouse-focus\n\nfix scrolling without focus (again)"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/524521e376b4bbd5c082524c8897bfe50dc79c96", "message": "Merge pull request #911 from Vtec234/file-bin\n\nUse binary mode for files in cpp"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a2072b4cdf384104010c9f71ce97ae598fa1a87c", "message": "Merge pull request #908 from heinezen/readme-games\n\nInclude other Genie Engine games in Readme"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ee3259cd3e8b7b0f3e94557f16f22738befec9d2", "message": "buildsystem: let codegen command know all its output"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/101fb6ced8d60893b4298511ae6e27140c1b3089", "message": "buildsystem: let automoc depend on codegen\n\notherwise build may fail because there's\nno known recipe to generate the files."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/37e8120be2d4b2c28d34f7332a8d88da5c6f8324", "message": "Merge pull request #896 from tusharpm/win-tests\n\nGet more tests to pass on Windows"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/914aea1349a4c981c451920f6538eefc901b3aa2", "message": "Merge pull request #901 from castilma/scroll\n\nfix scrolling without focus"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6f47471b3321bd5ad71655f3220958407eb3c564", "message": "Merge pull request #845 from MaanooAk/tech\n\nResearch (aka Technologies)"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3b1d68ef25911e9f5baab6083d6e46f278231e75", "message": "Merge pull request #894 from TheJJ/convert-interactive-fixes\n\nconvert: introduce interactive conversion shell"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3007be01712396b1495d9c7da364844b33957705", "message": "Merge pull request #893 from castilma/libpng\n\nUse directly libpng to create screenshots."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3f6be0d4bd47f989c007f3179565c5e01b80981e", "message": "Merge pull request #900 from janisozaur/patch-1\n\nTest compilation in debug and release mode"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/de62a2492b38116023c2c7b3a3c6fdfee485d44a", "message": "fslike: fix caseignoringdir-test for caseignoring filesystems"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/efca554a5e60b6495fd8ba79a5732134cd09d164", "message": "Merge pull request #897 from heinezen/selection-doc\n\ndoc: Selection mechanics"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/50754fd30ad361877b2868608a81df40a1a6da80", "message": "convert: introduce interactive conversion shell"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/11fe3a3ca8b4e43beb02a4b010f422f4d7d893f8", "message": "Merge pull request #887 from arialwhite/gdb-frontend\n\nSupport and document debugging with gdbgui"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/888db4d9fd6543402cdc18da060467abe3c8ec57", "message": "Merge pull request #892 from piotr-szpetkowski/static-cast-shader-fix\n\nUpdate C-style cast to static_cast in program.cpp"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fb1968d1537c312ad1ce2db5b99281d958b8d665", "message": "Merge pull request #880 from tusharpm/doc-update\n\nWindows documentation update"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/118ef77386a0c9a1382f4ee17ddb223df77458c1", "message": "buildsystem: add convenience options for using ccache"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/85f9297585d1298841e61f655e456b7b22d1f162", "message": "renderer: fix font glyph memory allocations"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/0b1eac59e3ad7f0c18b950d77e8eb54a76d26944", "message": "Merge pull request #886 from goto-bus-stop/drs-file-table-doc\n\ndoc: Update DRS file format."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a9f2e66dc4e0672d97b26d9af46b790df367b0f8", "message": "doc/building: add gentoo"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/389df7da81157c3629a5a1e0afd5089288ff68c9", "message": "Merge pull request #879 from TheJJ/logo-optimization\n\nlogo improvements"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/0d5186bbf0173cf21ac56d66504be630fac5fb37", "message": "assets/logo: svg improvements\n\nthis eliminates the barely-visible black stroke below the neck"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5dd443cda825e4929ea510e1f6ea2a7435707e1e", "message": "readme: add contact table at the top"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9661a697809b5f481ca8536b17e2d1272eb16264", "message": "Merge pull request #867 from tusharpm/windows\n\nWindows native support using MSVC - Visual Studio 2017"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8313de757b03352552c4be5cfd3ff2602fa37481", "message": "Merge pull request #866 from devnexen/freebsd_build_instructions\n\ninstructions for FreeBSD system"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/19b91c24f5399901452f89249e9eb18cd1431471", "message": "Merge pull request #872 from heinezen/troubleshooting\n\nTroubleshooting Guide"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/381b56b8d9957e3e9ff3115db49adbe6cec59111", "message": "Merge pull request #870 from Tomatower/exception-crash\n\nexceptions: made cython more beautiful."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/53e6bfc0834a13307d8532f8dd29f6fcf12d962d", "message": "Merge pull request #869 from Tomatower/exception-crash\n\nExceptions: break into debugger on throwing an exception"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4ee700eb806f89213c38e19c7a3a6a86c82cabbb", "message": "Merge pull request #864 from devnexen/freebsd_build_fix\n\nAdding FreeBSD support"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2454e4de1038502563c669c50174ea78a5751407", "message": "Merge pull request #859 from TheJJ/python-profiling-utility\n\nutil: added python profiling helper class"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/82b5968d0db1b0962557d57f748efa64fd7a1cad", "message": "Merge pull request #865 from castilma/screenshot\n\nsave alpha-channel in screenshots"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/db7b0d3ef58947f64f25a3490a8bf1c598d0ed85", "message": "Merge pull request #783 from heinezen/reverse-engineering\n\ndoc on Formations"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4d9e74933b1749da2dbca459d6c980878d510b40", "message": "Merge pull request #862 from Jon0/gathering\n\nunits can get removed before on_complete runs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1de00ee12f2f7d01f71b4c2b6a5729488e54a7ad", "message": "Merge pull request #860 from Jon0/gathering\n\nfix units getting stuck when dropsite isnt found"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f1f4e7d3cba521c3a0a426ea5a862accc429e2cb", "message": "Merge pull request #861 from PetterBomban/patch-1\n\nFixed spelling mistake in README"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/68eff84be69f13b961e8ab28696fddcc77659963", "message": "Merge pull request #858 from TheJJ/restartsteam-hint\n\ndoc: add hint about restarting steam"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a7c98afe62a25a997e3c9a9493496bff221909d1", "message": "Merge pull request #809 from FolkertVanVerseveld/doc_aoe\n\nDoc - Civilization and unit statistics for AoE I"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/277af48005b99913e0fb3d105d63af56e190e2c2", "message": "Merge pull request #849 from Vtec234/cvar-pyt\n\ncvar: fix python type"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bb52ed8d785297eb22d45b414dc984c32c757ad8", "message": "Merge pull request #841 from Vtec234/constmap-fix\n\nConstmap fix"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9e78dbd65ec3a2568a04598a62e27451b4e5bb8f", "message": "Merge pull request #844 from MaanooAk/hypot\n\nEuclidean distance optimization"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c5063c66fb2639106970d5ba3def9be511aca8fa", "message": "Merge pull request #843 from TheJJ/borderscrolling\n\nImplemented mouse controlled game window movement"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/09565fc831e65c4e38f555fbbff1e78ebd58034f", "message": "Merge pull request #758 from MaanooAk/score\n\nScore & Unit lifecycle"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/37adb1adbaa0eaac987543b5de45ffb449e30735", "message": "Merge pull request #835 from TheJJ/opusloadingdebugleftovers\n\naudio: remove debug leftovers for opus loading"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/0ba4989af663ad663a3b521a17ca1adbc51705d9", "message": "audio: remove debug leftovers for opus loading"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a4d47e8e25aabe1b11f677be8da79a9ad11f478c", "message": "Merge pull request #827 from zuntrax/loggingfix\n\nfix python loglvls"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b91cadcd5236e7659d2e79b58774353b74ad696f", "message": "Merge pull request #825 from zuntrax/compiler-invocation\n\nfix compiler invocations"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/10ea6a3d2057d7e5063641635abaab4aabc12820", "message": "Merge pull request #823 from castilma/fastfix\n\ntesting: fix copyright year and wrong logic"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bd26f259a5ba6c5ed21b043d0d7f19a23e87e0fa", "message": "Merge pull request #821 from Birch-san/fix-old-mac-build\n\nFix build on macOS computers that don't have Sierra && XCode 8"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/171ca610d519111e4109f586a42e4e55085bf888", "message": "Merge pull request #818 from zuntrax/warning-fixes\n\nWarning fixes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cc76276b7916d20c717f771db8a1cfdb4a55dcf3", "message": "Merge pull request #756 from ChipmunkV/gui-gl-context\n\nGUI: Also try a separate-shared-context mode"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d62de251ef444145bb863e71fca67e1ef3ff2607", "message": "Merge pull request #804 from janisozaur/gcc7\n\nFixes for GCC7"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a2a3b356135c79c919c79a00f64404bc7b9be075", "message": "Merge pull request #805 from stiopaa1/renderer_color_cleanup\n\nrenderer/color: cleanup"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/034c452fadd0da05cfed94c528666cbcb965864e", "message": "Merge pull request #802 from Tomatower/benchmarking\n\nBuildsystem: Added Benchmarking"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8ec70130d7bff145d3cb30d33a30387385fd2fd3", "message": "Merge pull request #801 from castilma/spelling\n\nSeveral spelling fixes and code style corrections."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/693e4ca4e804a588f1a5b14170b530435d5227a2", "message": "Merge pull request #797 from Tomatower/wildcardtest\n\nPrefix-matching for tests"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/24f0b4b342dcc5a22cea35fb38ffde546d0169cb", "message": "doc: updated doxyfile with doxywizard"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/af90f81935e9463142463fe944e0620d6095c7fd", "message": "Merge pull request #798 from TheJJ/customize_config_dir\n\nbuildsystem: allow customization of config and asset dir"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/223a3119581050a7d02f1134304d93b1f8fbba39", "message": "Merge pull request #799 from TheJJ/kevin_conditionals\n\nkevin: don't run sanity check on debian"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/adc678c688997fd8b665f6feeb6abb045bf165c1", "message": "kevin: don't run sanity check on debian"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cd3b6599854f402bf1c80e7c2598d0cf98eb6c01", "message": "buildsystem: allow customization of config and asset dir"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1bbf7d241c4a92afe6091d2820cafaed9a4258ed", "message": "Merge pull request #795 from Tomatower/interpreter_blacklist\n\nBuildsystem: blacklisting pythontex more flexible"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ad3efb571daae7aa0d21b47e3335e4352223c383", "message": "Merge pull request #791 from TheJJ/blendomatic-lookuptable\n\ndoc: add blending mask lookup table"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e8159f3501066ad231d5c7c819c321448d87c37b", "message": "doc: add blending mask lookup table"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6491169b07b2afd4ebf6e5bdf5e3daf9a1651402", "message": "Merge pull request #794 from janisozaur/cython\n\nUpdate required Cython version to 0.25"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6952370af3b4e3dbee527756064d9de3b5538f9c", "message": "Merge pull request #790 from Birch-san/fix-pixel-transfer\n\nFix RGB endianness used in pixel transfer"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c9419b811c5aa56843053fc40610e1da2ea98a2a", "message": "Merge pull request #787 from Birch-san/ignore-compiled-qml\n\nignore compiled QML"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f9e8f26bebb916a0b0c08d475d5d15dc893a0dfe", "message": "Merge pull request #786 from Birch-san/fix-asset-search\n\nFix Age2HD string resources search"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5470940c879ce974e6c62349d3bfd5d11a5a017f", "message": "Merge pull request #776 from castilma/code_compl\n\ncheck for asdf in codecompliance"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/46c2c269520ac45a358a0991c0ec54ab6c6c0fa6", "message": "Merge pull request #777 from Birch-san/fix-mac-build\n\nintroduce Mac-specific shims for `utimenstat()` and for `stat.st_mtim`"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f44e4c1c419fd8aa6aaff104c28e1fe75be0b1ee", "message": "Merge pull request #779 from Birch-san/obfuscate-contributors\n\nObfuscate email addresses in `copying.md`"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/86fbd63f1ec7c5320eb3415e64d074fb6bf56058", "message": "Merge pull request #775 from castilma/ddlfix\n\nFixing our DoublyLinkedList"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7e65549a7cddbddc0b33c86ba5af10ab2f21ea16", "message": "Merge pull request #774 from zuntrax/braces-fix\n\nfix missing braces warnings for subobject initialization"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/39bbe23fb01ee1a7eed98a296755edbde6bd7458", "message": "Merge pull request #773 from goto-bus-stop/doc/cython-version\n\ndoc: Update required Cython version in Build docs."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/a012f42a6514061eee00a879c9a726019d48ea19", "message": "Merge pull request #769 from TheJJ/smallfixes\n\nSmallfixes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/93f9022c8f10eaf3e08a23a0237c92cad27c59fa", "message": "Merge pull request #767 from citron0xa9/feature/766_crash-improvement\n\nSurrounded Engine::run with try catch"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ebe92f798fc23c9d435cc73f408dd0433e383b34", "message": "util: fix path filesize return type"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ff834dc266eb8b91b695a4f7f09780d45dfc6b8f", "message": "util: fix includes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7f57140bd8dddf32cd26f89a86850cf10acbf376", "message": "Merge pull request #763 from martinber/doxygen-improvements\n\nDoxygen improvements"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bb4b53ee91604e91545dacf2ca96d537bef16acc", "message": "Merge pull request #723 from TheJJ/searchpaths\n\nInstallation improvements"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cd5fb3ef214148317d5bbe5a20e9bbfe7ccc0c4c", "message": "util: default to little endian for array conversions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/108e4a275a505cf4100517fac095b17cb697ab0b", "message": "util: constexpr for some helper functions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60523218", "body": "thx, that link wasn't updated when the milestones file was moved ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60523218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60529791", "body": "thx, link was forgotten as well when the files were moved.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60529791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60537827", "body": "thx, i'm procrastinating from preparing my presentation slides as well. You don't need to feel bad.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60537827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545878", "body": "You might wanna resubmit the pull request with the correct email stored in each commit.\nOtherwise github won't associate the code with your account ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545984", "body": "Also, why libopus-dev libvorbis-dev? They should be pulled in by libopusfile, shouldn't they?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60545984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546099", "body": "would you mind placing this in the #dependencies section? (basically under the dependency list and before \"Build procedure\")\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60548048", "body": "awesome! lets see how we can bring your changes upstream without ugly hacks ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60548048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60584724", "body": "We could utilize cmake for that in near future: We're currently using [FindOpenGL](http://www.cmake.org/cmake/help/v3.0/module/FindOpenGL.html) which should directly provide the correct names.\n\nI think the header-switch was a quick fix, but in the long run we should go for cmake.\n\nAbout indenting `#include`: writing `#    include` would surely look nice :smile: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60584724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625322", "body": "i think many include guards also had a comment at the bottom of the file. you could either update them or remove the comments. i'd prefer removing, do you?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633634", "body": "The header is created [here](https://github.com/SFTtech/openage/blob/63cdb4470a1c1b8b58f18012fd88ca2b1a2bc507/py/openage/convert/dataformat.py#L848).\n\nThe convert script is veeery sophisticated, but adding a uuid identifier to the header guard should be trivial.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60652842", "body": "If we decide to use uuids for the codegenerated headers as well, they have to be deterministic.\n\nThe changes look good now, but shouldn't the trailing _ in the python generated header also be removed?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60652842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60692585", "body": "Your mail address is unassigned again :cry: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60692585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60692789", "body": "The two commits seem to be redundant, could you resubmit with just one commit?\nDoes is also work if you cast to `cost_t`?  That would be the preferred way instead of hardcoding `float`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60692789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60698068", "body": "Probably the shader compilation fails. Can you try to get some error messages? Mesa supports debug environment variables: http://www.mesa3d.org/envvars.html\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60698068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60698232", "body": "Did you install `python3-dev`? It looks like it cant find /usr/lib64/libpython3.3.so or 3.4. Does it exist on your machine? You probably might have a look at [the building guidelines](https://github.com/SFTtech/openage/blob/master/building.md#prerequisite-steps-for-ubuntu-users-ubuntu-1410).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60698232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60698409", "body": "I think @mic-e came up with a solution that is just pending the commit.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60698409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60750017", "body": "could anyone else confirm if HD is working now? I don't own it ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60750017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60750760", "body": "And [there](https://github.com/SFTtech/openage/pull/35/files#diff-3fa8f3edefd1481b01e03746fcded50dR25) is a space-indentation. :sob:\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60750760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60772235", "body": "Are you able to get any more info about the `r300 FP: Compiler Error` you posted first? If we can figure out why the compilation fails, we can probably fix this for radeon cards.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60772235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60788523", "body": "@jamesmintram please use tabs for indentation, [see here](https://github.com/SFTtech/openage/blob/master/doc/code_style/tabs_n_spaces.md)  :smile:.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60788523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60832561", "body": "Hm strange, when i press the flattr button, I see\n\n```\nAre you sure you want to flattr this page?\n```\n\nCould you please try again?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60832561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60836209", "body": "Does [this](https://flattr.com/submit/auto?user_id=the0jj&url=https%3A%2F%2Fgithub.com%2FSFTtech%2Fopenage) URL work?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60836209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60838147", "body": "I contacted the flattr support. The button behaves very strange, I get a blank page when trying to flattr myself...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60838147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60840889", "body": "hm actually i'd leave this open until the mac build really succeeds for all mac users that still have problems.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60840889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60856046", "body": "The proper solution should be not using format strings. We should use the new logger (#50) for that.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60856046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60961035", "body": "Thanks! Could you please add some more documentation to describe what \"gettin a case-insensitive path\" means in practice? Others might not understand what the code should do.\n\nAlso, the tests seems to be specific for your system, could you somehow change them to work with files existing in the repository?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60961035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61030551", "body": "Could you please also add the `this->` pointers?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61030551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61038121", "body": "I disabled the flattr button with e85027408f8ca7b372ef7ae7c24dca60709e789c, see the commit message. We'll have to see what we could integrate for people that want to send money...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61038121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61089687", "body": "I lol'd at the screenshot :smile:\n\nI'd say a screenshot manager is just fine!\nNext idea: You could check what files are there and chose the next free filename, when having many screenshots, this may fail though.\nBetter idea: Store the screenshot with the timestamp in the filename, `openage_2014-10-30_14:18:20_xx.png`. As people can take `n` screenshots per second, we still need a counter :wink:, but the number of existence checks should probably fall down to `0`.\n\nDon't worry about `~/.openage` yet, some other subsystem will create it sooner or later, especially when #28 is finished.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61089687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61094569", "body": "This should have been fixed in 1de94e49f72cd6c118cc279d88a229a2f091ba03, make sure you are using the latest version.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61094569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61121537", "body": "Yeah, will be a lot more modular that way.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61121537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61170587", "body": ":+1: that should hopefully fix the find-python issues for version indifferences and macusers.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61170587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61174007", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61174007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61180363", "body": "Hmm, i think that's too dirty :wink:, playing the actual assigned destruction sounds should be implemented right away, not some hardcoded number.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61180363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61228363", "body": "btw @oldlaptop, you can just force-push to your branch again to update the code you wanna submit, you don't need a new pull request every time.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61228363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61246413", "body": "The script is currently called by `make media`, which invokes the script located in `py/openage/convert/__main__.py`. The script is available as\n\n``` python\nimport openage.convert\n```\n\nthat's where the name comes from :wink:\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61246413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61246706", "body": ":+1: merged\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61246706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61247647", "body": "As mentioned in IRC, i'm having issues with the terrain blending after i touched a terrain tile file:\n\nBefore `touch 15001.slp.png`:\n![openage_2014-10-31_12-22-17_00](https://cloud.githubusercontent.com/assets/673543/4859897/65929180-60f0-11e4-96e5-7f6537e319f1.png)\n\nAfter `touch 15001.slp.png` to trigger the asset update:\n![openage_2014-10-31_12-22-55_00](https://cloud.githubusercontent.com/assets/673543/4859901/79645dba-60f0-11e4-8aa4-22b893e8c706.png)\n\nI'm trying to figure out why that is happening...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61247647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61250499", "body": "wtf you are awesome, it does work indeed... :grinning: \n\nBefore we pull this in, the action stack etc has to be coordinated with the nyan concepts, this may take some time.\n\nWhy did you reimplement the A\\* instead of fix the existing one? In your implementation i can't see the decrease_key call to the priority_queue, I implemented the `datastructure/pairing_heap` specifically for that.\n\nAlthough this is totally awesome to see a horse riding over the map, we have to improve things a bit before it's ready to ship.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61250499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61250995", "body": "put it into the `game_main.cpp` for now, we have to generalize the sounds for all units and not just buildings anyway soon.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61250995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61251252", "body": "Although i'd find that pretty funny, i think we should go for some custom-drawn spinner :smile: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61251252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61288163", "body": "hm, the image binary isn't that great in the repo.. could you draw an ascii art instead?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61288163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61298100", "body": "should be fixed by the separate cmake module, if not: reopen pls.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61298100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61298802", "body": "https://github.com/SFTtech/openage/blob/5f49b531eabf4adb401834bf2fbdbfcd340f8bd8/cpp/game_main.cpp#L43\n\nThe -1 indicates the terrain tile is missing, this is indeed intentional. I used it for the building placement \ncollision detection testing.\nThis also demonstrated that we support map borders smaller than chunk size.\n\nWe should fill the holes to avoid further confusion.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61298802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61316372", "body": "otherwise :+1:\n\nfuture work: integrate this into make test, so travis will automatically fail for mismatching pull requests\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61316372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61351160", "body": "indeed, you need to squash the commits in order to drop the file @masterofjellyfish \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61351160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61367633", "body": "This inheritance equals the original game data, as seen in https://github.com/SFTtech/openage/blob/master/py/openage/convert/gamedata/unit.py#L933\n\n@jamesmintram is currently implementing the new renderer, when that is done, we can look into multilayer buildings (see #58).\n\nThe \"quick\" fix would be a dying sound for TerrainObjects. In the long run, we'll have GameObjects and the TerrainObjects inherits from it.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61367633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61367781", "body": "Outlines are not implemented at the moment, they should be ignored entirely. Maybe we have to increase the epsilon for the float comparison.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61367781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61368823", "body": "@mic-e then you should leave some note that the pullreq isn't finished yet, people will get confused otherwise.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61368823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61372126", "body": "Ok, then all inits should be done with {}, right? This would also require an update in `mom.cpp` for the initializer list demonstration.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61372126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61380338", "body": "I'd vote for the `{}` initiailzers, it's the new shit and it triggers better warnings: http://pastebin.com/1EdbZg8S\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61380338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61386618", "body": "I found the blending problem bug, the terrain texture hotspot is not updated when reloading.\nfix and merge incoming.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61386618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61386646", "body": "whee it's done!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61386646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61386738", "body": "This is probably caued by the long loading time of the few thousand files. Loading them the second run or after conversion is faster as Linux will have cached the requested files.\n\nIt will be fixed, once #28 is finished. We could stuff all files in a tar archive or something to improve the access time i think.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61386738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387285", "body": "ah, i see, very nice then, :+1: for merge\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61393490", "body": "Oh gaben, bringer of the half life 3, thou thy lordship is perfect for our project, there must not be binary files in the repo where they can be avoided. The clean solution would be to add a install rule that uses imagemagick or similar to cut the already existing gaben image to icon format.\n\nThe real logo should be some epic svg so we'll never have to provide higher resolution icons including the day we got 9001k screens.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61393490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61394011", "body": "In case you haven't noticed, the game is far from finished right now. Volunteers are having fun creating the engine right now, there are no prebuilt packages available, and even if there were, the end-user functionality is pretty low right now.\n\nYou can follow the steps in [building.md](https://github.com/SFTtech/openage/blob/master/building.md#build-procedure). If you encounter problems, you have to be more specific what exactly went wrong, otherwise it's really hard to guess and try to look into your head.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61394011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61407074", "body": "unfortunately, this is a duplicate of #29.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61407074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409308", "body": "This should be available as an opt-in or out option, for testing purposes one might want to place exactly the terrain tiles wanted, no implicit stuff should happen then.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409501", "body": "The .desktop file is for all distros, you can place it in `dist/openage.desktop` i'd say. Distro specific stuff should be put to `dist/$distroname/`, but we have to condider whether we want to put the package building script in our repo.\n\nI think putting distro build scripts into the repo is a bad idea and shouldn't be done. The files will outdate and just clobber the repo, instead we could create a new repo where distroscript are stored in.\n\nDon't misunderstand me, packaging related files like the .desktop is suited for all distros and can be put inside the repo.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409563", "body": "Sure, but i recommend rebasing your branch against the current master. Then you can also remove your current initlist-commit and amend it with the `{}` initializer replacement.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409996", "body": "Ugh, another dependency... I hope we could avoid that somehow, especially as other platforms might have difficulties with using or having imagemagick available.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416596", "body": "Mouse cursor placement is easy to fix, the main problem currently is the wrong center of the building texture hotspot, which does not equal the terrain tile grid placement. The calculation algorithm mentioned is likely to be wrong.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416657", "body": ":+1: looking good now\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416938", "body": "awesome, it's perfect now, :+1: for merge.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61417017", "body": "We'd have to implement a whole gui toolkit then, which would look ugly and required way too much work. Only the viewport in the middle should be the engine surface, the surroundings GTK stuff.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61417017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420295", "body": "hmm, why don't you add it to the list the line before?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61426689", "body": "currently, `start_pos` is indeed the west corner of the building foundation. This can of course be adjusted to be the center of the mouse click. But this does not fix the offset error of the foundation and the building texture.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61426689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61427293", "body": "very good idea, that should be the way to go.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61427293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61436541", "body": "The major version equals the current milestone. The first usable release will probably be v15.0 then. I thought about using v0.$milestone, but once we reach v1.0, what next? This is why i chose this version model for now, each milestone will be a major version even after the current milestone list is finished.\n\nFor a game, i think the semantic versioning is less suited as it is for production software, libraries etc.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61436541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/9736597", "body": "nope, as this does not change the exported fields, the change is not visible to the outside.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9736597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/12420835", "body": "you might want to use `util::Dir` for that, i'm not sure if that's the best path representation at the moment^^\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12420835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/12424386", "body": "if you need that, sure. Add it.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12424386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/12938812", "body": "This is openage-specific, so should not be in a cmake file in the `modules/` folder. instead, the openage specifics should be in `buildsystem/python.cmake`. Everything in `modules/` is kind of library functions for the buildsystem that should not be specific to openage.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12938812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/20272488", "body": "thx :)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/20272488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/22788810", "body": "Try removing the `| 0xFF000000`, and try if the screenshot is looking good then. I don't remember what the problem was, however the screenshot didn't look right. But that was a long time ago :)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/22788810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19638723", "body": "could you please indent the lines with tabs instead of two spaces?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19638723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19687782", "body": "isn't it [\"lesser\" GPL](https://www.gnu.org/licenses/lgpl.html)?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19687782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19884992", "body": "nice find! this is really stupid and i have no idea why ~ broke, there was a time it worked..\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19884992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20047079", "body": "https://github.com/Tapsa/genieutils/blob/master/src/resource/DrsFile.cpp#L115\nhttps://github.com/Tapsa/genieutils/blob/master/src/resource/DrsFile.cpp#L88\nhttps://github.com/Tapsa/genieutils/blob/master/include/genie/Types.h#L25\n\nThat's why i preserved the note. Some day (tm) when we may support versions other than 1.0c and HD, this will be important again.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20047079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20047939", "body": "to clarify, you may put parens around `(cmd_byte & 0xf0)`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20047939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20048033", "body": "you corrected spec_color to special_colo(u)r below, but here it's still called spec colour.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20048033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009680", "body": "use `cpp/util/misc.h:mod() functions` to avoid negative number fuckups.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009708", "body": "for consistency reasons, we decided to use `+= 1` only, except for `for` loops.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009757", "body": "please add spaces around operators, the space behind `else` seems a bit much.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009802", "body": "would be nice if you replaced the hardcoded tile sizes by a constexpr, i think the engine even has that constant already.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20009802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055330", "body": "although the compiler will most likely optimize it, you could extract the redundant multiplications to a common variable.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055332", "body": "spaces before and after `=` and `<` would be nice.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055338", "body": "you can remove the `glEnd` and `glBegin` as each vertex pair will form one line.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20213325", "body": "It was not a bug, but architecture dependent. `size_t` is 32 bit on x86, but 64 bit on x86_64. Now this gets adjusted dynamically.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20213325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403361", "body": "missing `delete`, these should be unique-ptrs anyway.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19667648", "body": "``` cpp\nfor(auto &action : action_stack) {}\n```\n\nis the new C++11 way\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19667648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19667658", "body": "you can use `std::hypot` here.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19667658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668457", "body": "This function is completely redundant, the above one should rather be used and improved. I'd also use the `path::Path` class for containing the `path::Node` of the result.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668523", "body": "ugh, whitespace issue. as this is an alignment, you have to do it with spaces.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668645", "body": "again, tab indentation for alignment, these must be spaces.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668811", "body": "`std::hypot` here\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668958", "body": "`std::hypot` again\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19668958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669072", "body": "i'd prefer if you used `this->` for member variable and function accesses\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669114", "body": "whee whitespace, spaces here pls.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669150", "body": "whitespace! for reaching the `EntityType` indentation, use tabs, for aligning the wrapped args, use spaces.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669231", "body": "the `path::Nodes` should be preserved, just the tile coordinates won't be flexible enough soon.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19669231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697818", "body": "if possible, please use `{}` for the initializers\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697830", "body": "the `valid_unit_target` variable is probably uneccessary\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697875", "body": "all `this->` ptrs would be good\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697882", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697885", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20697885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21344860", "body": "dead space!!11\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21344860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346691", "body": "space behind if parentheses please: `if (producer) {`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346738", "body": "stick `*` to name, not at type\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346860", "body": "space after `if` and behind condition closing `)` missing\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346878", "body": "stick `&` to `action`, not to `auto`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346885", "body": "same here\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346905", "body": "stick `*` do function name, not to return type\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346969", "body": "stick `&` to variable, not to its type.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346987", "body": "missing spaces after namespace name and before `{`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346996", "body": "dead last line!111 :grin: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21346996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21347033", "body": "missing space after `args)`, space indentation for `return` instead of tab-indent\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21347033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21347107", "body": "could you add some documentation for this function please?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21347107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21405942", "body": "I have no problem with switching to c++14 as soon as gcc and clang support it^^\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21405942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21800192", "body": "Yeah, it is retarded, but would require to ignore `E201 whitespace after '('` as well. And this would be the only place where it is ignored...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21800192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22311626", "body": "Shouldn't this be a `shared_ptr`?  I think one texture must be shared by multiple terrain objects.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22311626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403207", "body": "why is it called `modify_tile` although it deletes tiles from the cache?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403221", "body": "please indent with tabs and place spaces before the block `{` (in this case after `std {`, `const {` and `tile> {`)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403240", "body": "Why do you think it's a good idea to disable the cache if blending is disabled? Can we do it without that distinction?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492229", "body": "can also be constructed with `{}`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492256", "body": "`this->get_missing_tex();`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492450", "body": "`emplaced_at`, no camel case variables\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492518", "body": "do you think it's a good idea to use a nice `unique_ptr` but then return a raw pointer?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492612", "body": "`this->missing_tex` pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22492612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772899", "body": "lolwhat :laughing: \ncould you add some comment what could fail there?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772900", "body": "maybe this is better readable/understandable with\n\n``` cpp\nuint64_t state_init = 0;\nsize_t read_count;\nif (bytes <= sizeof(state_init)) {\n    read_count = bytes;\n} else {\n    read_count = sizeof(state_init);\n}\nmemcpy...\n```\n\nedit: comparison in the `if` should be with `sizeof` as well.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772903", "body": "uh what? please also comment this^^\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772904", "body": "shouldn't `bytes` be named `count` and be `size_t`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772908", "body": "Nice, inlined. Is it intended that `s0` and `s1` get modified? If not, can `&s0` and `&s1` be `const &`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772909", "body": "hm, you sure that's a good idea? might be better to use explicitly use the `std::chrono` namespace.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772910", "body": "what is catched here?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772913", "body": "indentation seems a bit strange here.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772923", "body": "indentation is strange again, maybe `{}` after the macro could clarify this?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22772923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23499137", "body": "`case 8:` should provide an example now.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23499137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23731366", "body": "why is `flags` added two times?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23731366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23732095", "body": "Does it have to be `-fdiagnostics-color=always`? Probably this is `=auto`, which might be better if one pipes the output to somewhere. If it is `=auto`, then stating it explicitly might be better.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23732095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23732525", "body": "Hm, my clang 3.5 manpage does not have a `-fdiagnostics-color` listed. Did you mean `-fcolor-diagnostics`?\nAlso, this option is enabled by default when on a terminal, so I'd just leave out this line.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23732525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24869808", "body": "Thanks very much for the hint, I updated the code.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24869808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421838", "body": "one tab indent for initializer list pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421841", "body": "indent\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421846", "body": "indent\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421852", "body": "one tab indent\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421857", "body": "indent\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421863", "body": "using a `struct audio_chunk` instead of the tuple might be more intuitive\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421867", "body": "leftover comment\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421870", "body": "why is it returning 0?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421876", "body": "`enum class`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421883", "body": "indent\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421891", "body": "some kind of struct instead of the tuple pls.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421899", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421906", "body": "`this->length`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421911", "body": "`(read_count * 2) / channels`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421923", "body": "and what does `inmemory` have to do with it?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421928", "body": "`@param data_length` has to be in the next line probably\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421935", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421936", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421944", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421955", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421967", "body": "what are `should_abort` and `abort`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421973", "body": "1 tab for initializer list\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421980", "body": "`thrown when`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421985", "body": "1 tab\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421987", "body": "`@param`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421997", "body": "space alignment pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23421997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422011", "body": "could be speeded up with `std::swap(jobs, it->second)` (freakout's idea)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422015", "body": "`create_job_group`, this is not just a getter\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422019", "body": "`// nope, this is the first finished job for that thread`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422028", "body": "`@param`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422030", "body": "space align pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422035", "body": "`@param`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422038", "body": "space indent pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422046", "body": "when using multiline, use proper multiline... :skull: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422049", "body": "one tab pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422060", "body": "`while[space](`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422068", "body": "`while[space](`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422071", "body": "some comment about dat magic pls\none tab pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422075", "body": "one tab pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422079", "body": "i'd name this `manager`, not `parent_manager`\none tab\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422083", "body": "`// pass the \"should abort\" function`\none tab pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422086", "body": "`if` -> `while`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422088", "body": "`// get jobs from our assigned job group`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422091", "body": "`escape = false;`\nalso, this is redundant with the previous query. should be avoided by `first` execution check which bypasses the `wait`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422094", "body": "check for `this->pending_jobs.empty()` again and lock the `pending_job` mutex\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23422094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25862870", "body": "jup, thx\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25862870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808351", "body": "#209, `_WIN32` pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808377", "body": "c++casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808467", "body": "`_WIN32`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808587", "body": "until implemented otherwise, using the sdl api is probably a good workaround.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808898", "body": "where's your new namespace style now?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26808898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26809170", "body": "omgwtfnooblolgtfo commented out code commited!111\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/26809170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24726637", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24726637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24726640", "body": "`this->`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24726640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732484", "body": "mouse ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732488", "body": "The `openage::` is redundant here.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732489", "body": "redundant `openage::`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732491", "body": "redundant `openage::`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732493", "body": "maybe this function should go in the `coord/` subsystem?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732496", "body": "cpp-style cast pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732508", "body": "linewrap and `{}` pls\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24732508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "crazycusti": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/935", "title": "build fails on powerpc (linux)", "body": "```\r\n[ 39%] Building CXX object libopenage/CMakeFiles/libopenage.dir/error/demo.cpp.o\r\n[ 39%] Building CXX object libopenage/CMakeFiles/libopenage.dir/error/error.cpp.o\r\n/tmp/ccmrhs8c.s: Assembler messages:\r\n/tmp/ccmrhs8c.s:3493: Error: unrecognized opcode: `int'\r\nlibopenage/CMakeFiles/libopenage.dir/build.make:2930: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/error/error.cpp.o\u201c scheiterte\r\nmake[3]: *** [libopenage/CMakeFiles/libopenage.dir/error/error.cpp.o] Fehler 1\r\nCMakeFiles/Makefile2:1482: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/all\u201c scheiterte\r\nmake[2]: *** [libopenage/CMakeFiles/libopenage.dir/all] Fehler 2\r\nMakefile:160: die Regel f\u00fcr Ziel \u201eall\u201c scheiterte\r\nmake[1]: *** [all] Fehler 2\r\nMakefile:33: die Regel f\u00fcr Ziel \u201ebuild\u201c scheiterte\r\nmake: *** [build] Fehler 2\r\nwynton@PowerBookG4:~/Downloads/SFTtech-openage-c69922d$\r\n```\r\n\r\n\r\nUbuntu Mate 16.04\r\nopenage git (19.11.2017)\r\nPowerPC G4 7450 1.67GHz\r\nGCC 5.4.0 altivec enabled\r\n\r\nAny ideas?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hgdagon": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/934", "title": "Compiling in msys2", "body": "This is just my experience compiling with msys2 (Spoiler alert: I DID NOT Succeed).\r\n\r\nPreliminary configuration:\r\n\r\nGo ahead and install everything in the [dependency list](https://github.com/SFTtech/openage/blob/master/doc/building.md), except for Python-related stuff (`numpy`, `pillow`, `pycodestyle`, `pygments`, `pylint`). Get those with `pip`, except for `pillow`. `Qt5` is 5GB, so it's gonna take a while.\r\n\r\nGet dejavu fonts from [here](https://dejavu-fonts.github.io/Download.html) and install. These are unrelated to msys2 (and building in general).\r\n\r\nGet the latest [Pillow source](https://github.com/python-pillow/Pillow/releases), `4.3.0` as of now.\r\nExtract, cd into it and run (in mingw32 shell):\r\n\t`python3 setup.py build_ext --disable-jpeg2000 install`\r\n\r\nGet `pyReadLine` with `pip`, `Jasper` and `dlfcn` from repo.\r\n\r\nIf I didn't forget anything, this should be enough. CMake is also looking for `backtrace`, `gperftools`, and `inotify`. These seem to be optional, so I never bothered with these.\r\n\r\nAs far as the code goes, my only problem with `libopenage` was the `_MSC_VER` checks. You guys should really consider replacing those that look for Windows with [something else](https://github.com/msys2/msys2/wiki/Porting#platform-checks). I've made some changes ([libopenage-msys2.zip](https://github.com/SFTtech/openage/files/1484428/libopenage-msys2.zip)), but since I couldn't build openage itself, I can only confirm that libopenage builds with these changes, but I have no idea, if it actually works.\r\n\r\nWhen building openage, I got a bunch of unidentified references to `Py*` (you can feast your eyes [here](https://pastebin.com/dC9r173V)), which is not surprising, since nothing in `openage` is being linked against, well, _anything_ python-related. At least I couldn't find one in _any_ of the `linklibs.rsp`'s in `openage`. Since I know pretty much nothing about Python, I didn't know what to do with this, so this was my dead end...\r\nI'm not sure if this is related or not, but CMake, for whatever reason, detected `PYTHON_LIBRARIES` and `PYTHON_LIBRARY` as `libpython3.6.dll`, I manually changed them to `libpython3.6.dll.a`, that didn't seem to change anything...\r\nI noticed that there also seems to be a problem with `WinMain`/`SDL_main` in run.exe, `-lSDL2Main` must be added for Windows.\r\n\r\nI guess, this is it. I hope you guys find this useful!", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "momo-aux": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/931", "title": "VMs for testing on Windows", "body": "Hi, I think you could use https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ for this.\r\n\r\nFree and usable for 90 Days, then reset, repeat.\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "castilma": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/914", "title": "doubled input handling", "body": "when I start the console and then select an input field from the game option, the keyboard input is put in the textfield and the console.\r\n\r\nwe currently have 3 input handler. one for qt, one for the normal keybindings and one for the console. they are called in that order in engine.h:359\r\n```\r\nfor (auto &action : this->on_input_event) {\r\n       if (false == action->on_input(&event)) {\r\n              break;\r\n       }\r\n}\r\n```\r\nit looks like the handler can return false to indicate that they handled the input. strangely, input/input_manager.cpp:381 always returns true.\r\n\r\nI guess we need to unselect the textfield when the console is set visible/clicked on.\r\n(why does the qt input manager return true if it handled the key?)\r\n\r\n\r\nanother problem is that Console::register_to_engine.h() registers \"`\" to be used to hide the console, but when pressing it, it is taken as literal text input to the console.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/910", "title": "Build fails on armv7l: 'hypot' not a member of std", "body": "I'm trying to package openage v0.3.0 with [guix](http://gnu.org/software/guix/) on armv7l. 0.3.0 is a pretty old version, but the newest.\r\n```\r\n[  0%] Building CXX object libopenage/CMakeFiles/libopenage.dir/terrain/terrain_object.cpp.o\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp: In member function \u2018virtual openage::coord::phys_t openage::SquareObject::from_edge(const openage::coord::phys3&) const\u2019:\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:323:9: error: \u2018hypot\u2019 is not a member of \u2018std\u2019\r\n  return std::hypot(dx, dy);\r\n         ^\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:323:9: note: suggested alternative:\r\nIn file included from /gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/features.h:410:0,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/os_defines.h:39,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/c++config.h:482,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/bits/stl_algobase.h:59,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/memory:62,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.h:6,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:3:\r\n/gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/bits/mathcalls.h:164:1: note:   \u2018hypot\u2019\r\n __MATHCALL (hypot,, (_Mdouble_ __x, _Mdouble_ __y));\r\n ^\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp: In member function \u2018virtual bool openage::SquareObject::intersects(const openage::TerrainObject&, const openage::coord::phys3&) const\u2019:\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:367:10: error: \u2018hypot\u2019 is not a member of \u2018std\u2019\r\n   return std::hypot(dx, dy) < rad->phys_radius;\r\n          ^\r\n/tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:367:10: note: suggested alternative:\r\nIn file included from /gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/features.h:410:0,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/os_defines.h:39,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/arm-unknown-linux-gnueabihf/bits/c++config.h:482,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/bits/stl_algobase.h:59,\r\n                 from /gnu/store/pbchqvpngq9zx32mlm8drf454rp3vpbf-gcc-5.4.0/include/c++/memory:62,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.h:6,\r\n                 from /tmp/guix-build-openage-0.3.0.drv-0/openage-0.3.0/libopenage/terrain/terrain_object.cpp:3:\r\n/gnu/store/ld8n6wb1f20fjb5xi3ajk4mizk4lsi9n-glibc-2.25/include/bits/mathcalls.h:164:1: note:   \u2018hypot\u2019\r\n __MATHCALL (hypot,, (_Mdouble_ __x, _Mdouble_ __y));\r\n ^\r\n```\r\non amd64 v0.3.0 builds. any ideas?\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/905", "title": "Asan Error on generating game", "body": "building with asan and generating a game results in this nice message.\r\n\r\n```\r\nINFO [T17829216608256360205] name2 has civilisation French\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile3.cpp:22:29: runtime error: left shift of negative value -1\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile.cpp:23:29: runtime error: left shift of negative value -1\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile3.cpp:23:29: runtime error: left shift of negative value -21\r\n/home/mcd/.repo/ap/openage/libopenage/coord/tile.cpp:24:29: runtime error: left shift of negative value -21\r\n=================================================================\r\n==20768==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62d00062ba00 at pc 0x7feaaa319e18 bp 0x7fea88d46cb0 sp 0x7fea88d46ca0\r\nREAD of size 2 at 0x62d00062ba00 thread T3 (SDLAudioDev2)\r\n    #0 0x7feaaa319e17 in openage::audio::SoundImpl::mix_audio(int*, int) /home/mcd/.repo/ap/openage/libopenage/audio/sound.cpp:150\r\n    #1 0x7feaaa2bc3f7 in openage::audio::AudioManager::audio_callback(short*, int) /home/mcd/.repo/ap/openage/libopenage/audio/audio_manager.cpp:172\r\n    #2 0x7feaaa2bc776 in operator() /home/mcd/.repo/ap/openage/libopenage/audio/audio_manager.cpp:76\r\n    #3 0x7feaaa2bc776 in _FUN /home/mcd/.repo/ap/openage/libopenage/audio/audio_manager.cpp:77\r\n    #4 0x7feaa689183a  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0x1b83a)\r\n    #5 0x7feaa68f109b  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0x7b09b)\r\n    #6 0x7feaa693f398  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0xc9398)\r\n    #7 0x7feabac766b9 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76b9)\r\n    #8 0x7feabaf933dc in clone (/lib/x86_64-linux-gnu/libc.so.6+0x1073dc)\r\n\r\n0x62d00062ba00 is located 0 bytes to the right of 38400-byte region [0x62d000622400,0x62d00062ba00)\r\nallocated by thread T0 here:\r\n    #0 0x7feabca056b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\r\n    #1 0x7feaaa2d9b0d in std::_MakeUniq<short []>::__array std::make_unique<short []>(unsigned long) /usr/include/c++/5/bits/unique_ptr.h:771\r\n    #2 0x7feaaa2d9b0d in openage::audio::chunk_info_t::chunk_info_t(openage::audio::chunk_info_t::state_t, unsigned long) /home/mcd/.repo/ap/openage/libopenage/audio/dynamic_resource.cpp:19\r\n    #3 0x7feaaa2deacc in void __gnu_cxx::new_allocator<openage::audio::chunk_info_t>::construct<openage::audio::chunk_info_t, openage::audio::chunk_info_t::state_t, unsigned long&>(openage::audio::chunk_info_t*, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/ext/new_allocator.h:120\r\n    #4 0x7feaaa2deacc in void std::allocator_traits<std::allocator<openage::audio::chunk_info_t> >::construct<openage::audio::chunk_info_t, openage::audio::chunk_info_t::state_t, unsigned long&>(std::allocator<openage::audio::chunk_info_t>&, openage::audio::chunk_info_t*, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/alloc_traits.h:530\r\n    #5 0x7feaaa2deacc in std::_Sp_counted_ptr_inplace<openage::audio::chunk_info_t, std::allocator<openage::audio::chunk_info_t>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<openage::audio::chunk_info_t::state_t, unsigned long&>(std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr_base.h:522\r\n    #6 0x7feaaa2deacc in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<openage::audio::chunk_info_t, std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::_Sp_make_shared_tag, openage::audio::chunk_info_t*, std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr_base.h:617\r\n    #7 0x7feaaa2deacc in std::__shared_ptr<openage::audio::chunk_info_t, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::_Sp_make_shared_tag, std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr_base.h:1097\r\n    #8 0x7feaaa2deacc in std::shared_ptr<openage::audio::chunk_info_t>::shared_ptr<std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::_Sp_make_shared_tag, std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr.h:319\r\n    #9 0x7feaaa2deacc in std::shared_ptr<openage::audio::chunk_info_t> std::allocate_shared<openage::audio::chunk_info_t, std::allocator<openage::audio::chunk_info_t>, openage::audio::chunk_info_t::state_t, unsigned long&>(std::allocator<openage::audio::chunk_info_t> const&, openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr.h:620\r\n    #10 0x7feaaa2deacc in std::shared_ptr<openage::audio::chunk_info_t> std::make_shared<openage::audio::chunk_info_t, openage::audio::chunk_info_t::state_t, unsigned long&>(openage::audio::chunk_info_t::state_t&&, unsigned long&) /usr/include/c++/5/bits/shared_ptr.h:636\r\n    #11 0x7feaaa2deacc in openage::audio::DynamicResource::use() /home/mcd/.repo/ap/openage/libopenage/audio/dynamic_resource.cpp:51\r\n    #12 0x7feaaa31a141 in openage::audio::Sound::play() /home/mcd/.repo/ap/openage/libopenage/audio/sound.cpp:53\r\n    #13 0x7feaaa5838a3 in openage::Sound::play() const /home/mcd/.repo/ap/openage/libopenage/gamestate/game_spec.cpp:448\r\n    #14 0x7feaaa9a201d in openage::ObjectProducer::place(openage::Unit*, std::shared_ptr<openage::Terrain>, openage::coord::phys3) const /home/mcd/.repo/ap/openage/libopenage/unit/producer.cpp:315\r\n    #15 0x7feaaa9a2a9e in openage::MovableProducer::place(openage::Unit*, std::shared_ptr<openage::Terrain>, openage::coord::phys3) const /home/mcd/.repo/ap/openage/libopenage/unit/producer.cpp:397\r\n    #16 0x7feaaa9a2f1a in openage::LivingProducer::place(openage::Unit*, std::shared_ptr<openage::Terrain>, openage::coord::phys3) const /home/mcd/.repo/ap/openage/libopenage/unit/producer.cpp:481\r\n    #17 0x7feaaaa477fb in openage::UnitContainer::new_unit(openage::UnitType&, openage::Player&, openage::coord::phys3) /home/mcd/.repo/ap/openage/libopenage/unit/unit_container.cpp:107\r\n    #18 0x7feaaa648abd in openage::Generator::add_units(openage::GameMain&) const /home/mcd/.repo/ap/openage/libopenage/gamestate/generator.cpp:260\r\n    #19 0x7feaaa55ff8a in openage::GameMain::GameMain(openage::Generator const&) /home/mcd/.repo/ap/openage/libopenage/gamestate/game_main.cpp:37\r\n    #20 0x7feaaa64fde6 in std::_MakeUniq<openage::GameMain>::__single_object std::make_unique<openage::GameMain, openage::Generator&>(openage::Generator&) /usr/include/c++/5/bits/unique_ptr.h:765\r\n    #21 0x7feaaa64fde6 in openage::Generator::create(std::shared_ptr<openage::GameSpec>) /home/mcd/.repo/ap/openage/libopenage/gamestate/generator.cpp:314\r\n    #22 0x7feaaa43490b in operator() /home/mcd/.repo/ap/openage/libopenage/gui/game_creator.cpp:53\r\n    #23 0x7feaaa43490b in operator() /home/mcd/.repo/ap/openage/libopenage/gui/guisys/link/gui_item.h:187\r\n    #24 0x7feaaa43490b in _M_invoke /usr/include/c++/5/functional:1871\r\n    #25 0x7feaaa4b6a67 in std::function<void ()>::operator()() const /usr/include/c++/5/functional:2267\r\n    #26 0x7feaaa4b6915 in qtsdl::GuiCallback::process(std::function<void ()> const&) /home/mcd/.repo/ap/openage/libopenage/gui/guisys/private/gui_callback.cpp:23\r\n    #27 0x7feaaa4b2b24 in QtPrivate::FunctorCall<QtPrivate::IndexesList<0>, QtPrivate::List<std::function<void ()> const&>, void, void (qtsdl::GuiCallback::*)(std::function<void ()> const&)>::call(void (qtsdl::GuiCallback::*)(std::function<void ()> const&), qtsdl::GuiCallback*, void**) /usr/include/x86_64-linux-gnu/qt5/QtCore/qobjectdefs_impl.h:501\r\n    #28 0x7feaaa4b2b24 in void QtPrivate::FunctionPointer<void (qtsdl::GuiCallback::*)(std::function<void ()> const&)>::call<QtPrivate::List<std::function<void ()> const&>, void>(void (qtsdl::GuiCallback::*)(std::function<void ()> const&), qtsdl::GuiCallback*, void**) /usr/include/x86_64-linux-gnu/qt5/QtCore/qobjectdefs_impl.h:520\r\n    #29 0x7feaaa4b2b24 in QtPrivate::QSlotObject<void (qtsdl::GuiCallback::*)(std::function<void ()> const&), QtPrivate::List<std::function<void ()> const&>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void**, bool*) /usr/include/x86_64-linux-gnu/qt5/QtCore/qobject_impl.h:143\r\n    #30 0x7feaa56b2bae in QMetaObject::activate(QObject*, int, int, void**) (/usr/lib/x86_64-linux-gnu/libQt5Core.so.5+0x2b4bae)\r\n    #31 0x7feaaace423f in qtsdl::GameLogicCaller::in_game_logic_thread(std::function<void ()> const&) const /home/mcd/.repo/ap/openage/.bin/g++-debug-Oauto-sanitize-yes/libopenage/moc_game_logic_caller.cpp:138\r\n    #32 0x7feaaa436927 in i<openage::gui::GameCreator::activate()::<lambda(openage::GameMainHandle*, openage::GameSpecHandle*, openage::Generator*, std::shared_ptr<openage::gui::GameCreatorSignals>)>, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::shared_ptr<openage::gui::GameCreatorSignals>&> /home/mcd/.repo/ap/openage/libopenage/gui/guisys/link/gui_item.h:185\r\n    #33 0x7feaaa436927 in openage::gui::GameCreator::activate() /home/mcd/.repo/ap/openage/libopenage/gui/game_creator.cpp:71\r\n    #34 0x7feaaacf4a3e in openage::gui::GameCreator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**) /home/mcd/.repo/ap/openage/.bin/g++-debug-Oauto-sanitize-yes/libopenage/moc_game_creator.cpp:131\r\n    #35 0x7feaaad06f34 in openage::gui::GameCreator::qt_metacall(QMetaObject::Call, int, void**) /home/mcd/.repo/ap/openage/.bin/g++-debug-Oauto-sanitize-yes/libopenage/moc_game_creator.cpp:231\r\n    #36 0x7feaa60b3318  (/usr/lib/x86_64-linux-gnu/libQt5Qml.so.5+0x297318)\r\n\r\nThread T3 (SDLAudioDev2) created by T0 here:\r\n    #0 0x7feabc9a2253 in pthread_create (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x36253)\r\n    #1 0x7feaa693f420  (/usr/lib/x86_64-linux-gnu/libSDL2-2.0.so.0+0xc9420)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow /home/mcd/.repo/ap/openage/libopenage/audio/sound.cpp:150 openage::audio::SoundImpl::mix_audio(int*, int)\r\nShadow bytes around the buggy address:\r\n  0x0c5a800bd6f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c5a800bd730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x0c5a800bd740:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd750: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd760: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd770: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd780: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c5a800bd790: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Heap right redzone:      fb\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack partial redzone:   f4\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n==20768==ABORTING\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/890", "title": "Build fails on armv7l", "body": "I'm trying to build on a raspberry pi 3. after './configure'ing  without additional options, make fails.\r\n```[  1%] Building CXX object libopenage/CMakeFiles/libopenage.dir/gui/guisys/public/gui_renderer.cpp.o\r\nIn file included from /usr/include/arm-linux-gnueabihf/qt5/QtGui/qopengl.h:99:0,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/qquickwindow.h:45,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/QQuickWindow:1,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../private/gui_renderer_impl.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:7:\r\n/usr/include/GLES3/gl31.h:73:25: error: conflicting declaration \u2018typedef khronos_ssize_t GLsizeiptr\u2019\r\n typedef khronos_ssize_t GLsizeiptr;\r\n                         ^~~~~~~~~~\r\nIn file included from /usr/include/GL/gl.h:2055:0,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../public/gui_renderer.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:3:\r\n/usr/include/GL/glext.h:468:19: note: previous declaration as \u2018typedef ptrdiff_t GLsizeiptr\u2019\r\n typedef ptrdiff_t GLsizeiptr;\r\n                   ^~~~~~~~~~\r\nIn file included from /usr/include/arm-linux-gnueabihf/qt5/QtGui/qopengl.h:99:0,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/qquickwindow.h:45,\r\n                 from /usr/include/arm-linux-gnueabihf/qt5/QtQuick/QQuickWindow:1,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../private/gui_renderer_impl.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:7:\r\n/usr/include/GLES3/gl31.h:74:26: error: conflicting declaration \u2018typedef khronos_intptr_t GLintptr\u2019\r\n typedef khronos_intptr_t GLintptr;\r\n                          ^~~~~~~~\r\nIn file included from /usr/include/GL/gl.h:2055:0,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/../public/gui_renderer.h:12,\r\n                 from /home/pi/code/openage/libopenage/gui/guisys/public/gui_renderer.cpp:3:\r\n/usr/include/GL/glext.h:469:19: note: previous declaration as \u2018typedef ptrdiff_t GLintptr\u2019\r\n typedef ptrdiff_t GLintptr;\r\n                   ^~~~~~~~\r\nlibopenage/CMakeFiles/libopenage.dir/build.make:1766: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/gui/guisys/public/gui_renderer.cpp.o\u201c scheiterte\r\nmake[3]: *** [libopenage/CMakeFiles/libopenage.dir/gui/guisys/public/gui_renderer.cpp.o] Fehler 1\r\nCMakeFiles/Makefile2:1513: die Regel f\u00fcr Ziel \u201elibopenage/CMakeFiles/libopenage.dir/all\u201c scheiterte\r\nmake[2]: *** [libopenage/CMakeFiles/libopenage.dir/all] Fehler 2\r\nMakefile:138: die Regel f\u00fcr Ziel \u201eall\u201c scheiterte\r\nmake[1]: *** [all] Fehler 2\r\nMakefile:33: die Regel f\u00fcr Ziel \u201ebuild\u201c scheiterte\r\nmake: *** [build] Fehler 2\r\n```\r\nI understand the error but have no clue, how to fix it.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/884", "title": "Address sanitizer false positives.", "body": "when compiling dea5112dbd with addresssanitizer, I get the following error. It looks like a false positive to me, but I don't know who is responsible for it.\r\n\r\non a side note, ~~the thread counter is broken~~. EDIT: on the same commit without asan the counter works. strange...\r\n```$ ./run game\r\n/home/mcd/.repo/ap/openage/openage/log/log_cpp.cpp:1748:59: runtime error: member call on address 0x604000023350 which does not point to an object of type 'LogSource'\r\n0x604000023350: note: object is of type 'openage::log::NamedLogSource'\r\n 04 00 80 52  78 f6 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  70 33 02 00 40 60 00 00  02 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::log::NamedLogSource'\r\nINFO [T875755398522103943] [py] launching openage v0.3.0-984-gdea5112\r\nINFO [T875755398522103943] [py] compiled by GNU 5.4.0\r\nINFO [T875755398522103943] [py] running in DEVMODE\r\nINFO [T875755398522103943] launching engine with Path(Union(Directory(/home/mcd/.repo/ap/openage/cfg).root @ (b'cfg',), Directory(/home/mcd/.repo/ap/openage/assets).root @ (b'assets',)):) and fps limit 0\r\nINFO [T875755398522103943] SDL audio subsystems initialized\r\nINFO [T875755398522103943] Using audio device: default [freq=48000, format=32784, channels=2, samples=2048]\r\nINFO [T875755398522103943] Initialized SDL video subsystems.\r\n/home/mcd/.repo/ap/openage/libopenage/util/fslike/python.cpp:47:38: runtime error: member call on address 0x7fff10cf8950 which does not point to an object of type 'Path'\r\n0x7fff10cf8950: note: object is of type 'openage::util::Path'\r\n 6d 7f 00 00  f8 7a ea d5 6d 7f 00 00  50 5f 04 00 70 60 00 00  40 5f 04 00 70 60 00 00  30 ee 0f 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::Path'\r\n/home/mcd/.repo/ap/openage/libopenage/util/fslike/python.cpp:46:65: runtime error: member call on address 0x7fff10cf8950 which does not point to an object of type 'Path'\r\n0x7fff10cf8950: note: object is of type 'openage::util::Path'\r\n 6d 7f 00 00  f8 7a ea d5 6d 7f 00 00  50 5f 04 00 70 60 00 00  40 5f 04 00 70 60 00 00  30 ee 0f 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::Path'\r\nINFO [T875755398522103943] Compiled with Qt 5.5.1 and run with Qt 5.5.1\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6662:17: runtime error: member call on address 0x7fff10cf8090 which does not point to an object of type 'File'\r\n0x7fff10cf8090: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  01 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6662:17: runtime error: member call on address 0x7fff10cf7fb0 which does not point to an object of type 'File'\r\n0x7fff10cf7fb0: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  70 f4 37 f8\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6667:13: runtime error: member call on address 0x7fff10cf8230 which does not point to an object of type 'File'\r\n0x7fff10cf8230: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  98 87 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6574:23: runtime error: member call on address 0x7fff10cf8090 which does not point to an object of type 'File'\r\n0x7fff10cf8090: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  01 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6897:13: runtime error: member call on address 0x7fff10cf8270 which does not point to an object of type 'File'\r\n0x7fff10cf8270: note: object is of type 'openage::util::File'\r\n 00 00 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  b0 82 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6897:58: runtime error: member call on address 0x7fff10cf8230 which does not point to an object of type 'File'\r\n0x7fff10cf8230: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  98 87 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6898:11: runtime error: member call on address 0x7fff10cf8330 which does not point to an object of type 'File'\r\n0x7fff10cf8330: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 c9 72 67\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/openage/util/fslike/cpp.cpp:6824:23: runtime error: member call on address 0x7fff10cf8270 which does not point to an object of type 'File'\r\n0x7fff10cf8270: note: object is of type 'openage::util::File'\r\n 00 00 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  b0 82 cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/pyinterface/functional.h:182:54: runtime error: member call on address 0x7fff10cf8330 which does not point to an object of type 'File'\r\n0x7fff10cf8330: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  f0 a2 11 e7 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  00 c9 72 67\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:71:22: runtime error: member call on address 0x7fff10cf8a00 which does not point to an object of type 'File'\r\n0x7fff10cf8a00: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  88 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:79:22: runtime error: member call on address 0x7fff10cf8a00 which does not point to an object of type 'File'\r\n0x7fff10cf8a00: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  88 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:73:67: runtime error: member call on address 0x7fff10cf8a40 which does not point to an object of type 'File'\r\n0x7fff10cf8a40: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 ab 12 00 60 61 00 00  80 ab 12 00 60 61 00 00  60 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n/home/mcd/.repo/ap/openage/libopenage/gui/gui.cpp:65:65: runtime error: member call on address 0x7fff10cf8a00 which does not point to an object of type 'File'\r\n0x7fff10cf8a00: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 c6 12 00 60 61 00 00  80 c6 12 00 60 61 00 00  88 5e 04 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\nINFO [T875755398522103943] loading configuration files...\r\nINFO [T875755398522103943] [py] loading config file [Union(Directory(/home/mcd/.repo/ap/openage/cfg).root @ (b'cfg',), Directory(/home/mcd/.repo/ap/openage/assets).root @ (b'assets',))]:cfg/keybinds.oac...\r\n/home/mcd/.repo/ap/openage/libopenage/gamedata/../util/csv.h:184:23: runtime error: member call on address 0x7fff10cf9d80 which does not point to an object of type 'File'\r\n0x7fff10cf9d80: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 36 12 00 60 61 00 00  80 36 12 00 60 61 00 00  e0 dd 08 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\nINFO [T875755398522103943] Loading time [engine]: 0.592 s\r\n<unknown>: runtime error: member call on address 0x7fff10cf8c80 which does not point to an object of type 'File'\r\n0x7fff10cf8c80: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 55 14 00 60 61 00 00  80 55 14 00 60 61 00 00  c0 8e 18 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8ca0 which does not point to an object of type 'File'\r\n0x7fff10cf8ca0: note: object is of type 'openage::util::File'\r\n 30 60 00 00  d8 7a ea d5 6d 7f 00 00  90 4f 14 00 60 61 00 00  80 4f 14 00 60 61 00 00  07 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8cc0 which does not point to an object of type 'File'\r\n0x7fff10cf8cc0: note: object is of type 'openage::util::File'\r\n 00 00 00 00  d8 7a ea d5 6d 7f 00 00  90 28 14 00 60 61 00 00  80 28 14 00 60 61 00 00  20 8d cf 10\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8ce0 which does not point to an object of type 'File'\r\n0x7fff10cf8ce0: note: object is of type 'openage::util::File'\r\n ff 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 0d 14 00 60 61 00 00  80 0d 14 00 60 61 00 00  00 c9 72 67\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d00 which does not point to an object of type 'File'\r\n0x7fff10cf8d00: note: object is of type 'openage::util::File'\r\n e5 12 e4 ef  d8 7a ea d5 6d 7f 00 00  90 5a 15 00 60 61 00 00  80 5a 15 00 60 61 00 00  1e 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d20 which does not point to an object of type 'File'\r\n0x7fff10cf8d20: note: object is of type 'openage::util::File'\r\n 00 00 00 00  d8 7a ea d5 6d 7f 00 00  90 3f 15 00 60 61 00 00  80 3f 15 00 60 61 00 00  09 3a ef f6\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d40 which does not point to an object of type 'File'\r\n0x7fff10cf8d40: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 ce 16 00 60 61 00 00  80 ce 16 00 60 61 00 00  19 39 ef f6\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n<unknown>: runtime error: member call on address 0x7fff10cf8d60 which does not point to an object of type 'File'\r\n0x7fff10cf8d60: note: object is of type 'openage::util::File'\r\n 6d 7f 00 00  d8 7a ea d5 6d 7f 00 00  90 b3 16 00 60 61 00 00  80 b3 16 00 60 61 00 00  32 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\nINFO [T875755398522103943] Loading time   [game]: 0.721 s\r\nINFO [T13377334251450678901] Loading game specification files...\r\n/home/mcd/.repo/ap/openage/libopenage/gui/game_control_link.cpp:119:15: runtime error: load of value 190, which is not a valid value for type 'bool'\r\n/home/mcd/.repo/ap/openage/libopenage/gamestate/../gamedata/../util/csv.h:184:23: runtime error: member call on address 0x7f6dbb3c23d0 which does not point to an object of type 'File'\r\n0x7f6dbb3c23d0: note: object is of type 'openage::util::File'\r\n 00 00 00 00  d8 7a ea d5 6d 7f 00 00  90 d1 2b 00 60 61 00 00  80 d1 2b 00 60 61 00 00  00 00 00 00\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'openage::util::File'\r\n=================================================================\r\n==21157==ERROR: AddressSanitizer: new-delete-type-mismatch on 0x60c000592f00 in thread T0:\r\n  object passed to delete has wrong type:\r\n  size of the allocated type:   120 bytes;\r\n  size of the deallocated type: 1 bytes.\r\n    #0 0x7f6df8a1c132 in operator delete(void*, unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x9a132)\r\n    #1 0x7f6de68c174d in std::default_delete<unsigned char>::operator()(unsigned char*) const /usr/include/c++/5/bits/unique_ptr.h:76\r\n    #2 0x7f6de68c174d in std::unique_ptr<unsigned char, std::default_delete<unsigned char> >::~unique_ptr() /usr/include/c++/5/bits/unique_ptr.h:236\r\n    #3 0x7f6de68c174d in openage::renderer::GlyphAtlas::get(openage::renderer::Font*, unsigned int) /home/mcd/.repo/ap/openage/libopenage/renderer/font/glyph_atlas.cpp:88\r\n    #4 0x7f6de689e0d3 in openage::renderer::TextRenderer::render() /home/mcd/.repo/ap/openage/libopenage/renderer/text.cpp:159\r\n    #5 0x7f6de623c53b in openage::Engine::loop() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:456\r\n    #6 0x7f6de623cd31 in openage::Engine::run() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:311\r\n    #7 0x7f6de62a9f15 in openage::run_game(openage::main_arguments const&) /home/mcd/.repo/ap/openage/libopenage/main.cpp:61\r\n    #8 0x7f6de9f4b997 in __pyx_pf_7openage_4game_8main_cpp_run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1183\r\n    #9 0x7f6de9f4d1ca in __pyx_pw_7openage_4game_8main_cpp_1run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1023\r\n    #10 0x7f6df839b1b8 in PyCFunction_Call (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0xa01b8)\r\n    #11 0x7f6df84b5084 in PyEval_EvalFrameEx (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0x1ba084)\r\n    #12 0x7f6df84b5508 in PyEval_EvalFrameEx (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0x1ba508)\r\n    #13 0x4033e9 in __Pyx_PyFunction_FastCallNoKw /home/mcd/.repo/ap/openage/run.cpp:1407\r\n    #14 0x403b2d in __Pyx_PyFunction_FastCallDict /home/mcd/.repo/ap/openage/run.cpp:1447\r\n    #15 0x407bee in __Pyx_PyObject_CallNoArg /home/mcd/.repo/ap/openage/run.cpp:1591\r\n    #16 0x407bee in PyInit_run /home/mcd/.repo/ap/openage/run.cpp:1055\r\n    #17 0x408c34 in __Pyx_main /home/mcd/.repo/ap/openage/run.cpp:1800\r\n    #18 0x408f84 in main /home/mcd/.repo/ap/openage/run.cpp:1941\r\n    #19 0x7f6df6ec282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\r\n    #20 0x402648 in _start (/home/mcd/.repo/ap/openage/run+0x402648)\r\n\r\n0x60c000592f00 is located 0 bytes inside of 120-byte region [0x60c000592f00,0x60c000592f78)\r\nallocated by thread T0 here:\r\n    #0 0x7f6df8a1b6b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\r\n    #1 0x7f6de68b0bf1 in openage::renderer::Font::load_glyph(unsigned int, openage::renderer::Glyph&) const /home/mcd/.repo/ap/openage/libopenage/renderer/font/font.cpp:224\r\n    #2 0x7f6de68c166a in openage::renderer::GlyphAtlas::get(openage::renderer::Font*, unsigned int) /home/mcd/.repo/ap/openage/libopenage/renderer/font/glyph_atlas.cpp:88\r\n    #3 0x7f6de689e0d3 in openage::renderer::TextRenderer::render() /home/mcd/.repo/ap/openage/libopenage/renderer/text.cpp:159\r\n    #4 0x7f6de623c53b in openage::Engine::loop() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:456\r\n    #5 0x7f6de623cd31 in openage::Engine::run() /home/mcd/.repo/ap/openage/libopenage/engine.cpp:311\r\n    #6 0x7f6de62a9f15 in openage::run_game(openage::main_arguments const&) /home/mcd/.repo/ap/openage/libopenage/main.cpp:61\r\n    #7 0x7f6de9f4b997 in __pyx_pf_7openage_4game_8main_cpp_run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1183\r\n    #8 0x7f6de9f4d1ca in __pyx_pw_7openage_4game_8main_cpp_1run_game /home/mcd/.repo/ap/openage/openage/game/main_cpp.cpp:1023\r\n    #9 0x7f6df839b1b8 in PyCFunction_Call (/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0+0xa01b8)\r\n\r\nSUMMARY: AddressSanitizer: new-delete-type-mismatch ??:0 operator delete(void*, unsigned long)\r\n==21157==HINT: if you don't care about these warnings you may set ASAN_OPTIONS=new_delete_type_mismatch=0\r\n==21157==ABORTING\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/834", "title": "pdflatex documentation fails because of unicode character and other things", "body": "creating the latex documentation with `make doc; cd bin/doc/latex; make` fails:\r\n```\r\nChapter 53.\r\n(./md__home_castilma_.repo_ap_openage_doc_nyan_engine_types.tex [163]\r\n\r\n! Package inputenc Error: Unicode char \u21d2 (U+21D2)\r\n(inputenc)                not set up for use with LaTeX.\r\n\r\nSee the inputenc package documentation for explanation.\r\nType  H <return>  for immediate help.\r\n ...                                              \r\n                                                  \r\nl.87 ... # WIP: how about checking (speed < 0) \u21d2\r\n                                                   instant before\r\n```\r\nsomehow we (or doxygen) need to tell pdflatex not to choke on unicode characters. I haven't checked yet, what the option would be (maybe `\\usepackage[no_unicode_choke]{inputenc}`) or how we would need to tell doxygen to write that options into the `.tex` files.\r\nI wanted to see, if this was the only problem. It wasn't. I edited mentioned file and removed the troubling character. next error:\r\n```\r\n(./md__home_castilma_.repo_ap_openage_doc_reverse_engineering_unit_stats_unit_stats.\r\ntex\r\n\r\n! Package array Error:  Illegal pream-token (5): `c' used.\r\n\r\nSee the array package documentation for explanation.\r\nType  H <return>  for immediate help.\r\n ...                                              \r\n                                                  \r\nl.6 \\begin{longtabu} spread 0pt [c]{*15{|X[-1]}|}\r\n```\r\nI'm confused by this. latex says check `array` package documentation for explanation, but `longtabu` is in from the `tabu` package. the `longtabu` doc mentions the c options and:\r\n\r\n> The tabu environment behaves mostly like tabular: the preamble is parsed by the macros in\r\n> array.sty and some measures are performed before printing. tabu improves tabular and array:\r\n\r\nI don't exactly understand how latex packages work, but `tabu` seems to somehow change the behaviour of `array` which causes this error?\r\nI changed the `c` to an `r`. Still the `c` is the problem. The question now is only, which `c`?\r\n```\r\n! Package array Error:  Illegal pream-token (5): `c' used.\r\n\r\nSee the array package documentation for explanation.\r\nType  H <return>  for immediate help.\r\n ...                                              \r\n                                                  \r\nl.6 \\begin{longtabu} spread 0pt [r]{*15{|X[-1]}|}\r\n```\r\nSo, what now? What is the direct cause of the problem? Who needs to fix his code?\r\nEDIT: the c is not the problem, it is the 5 in {*15{... ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/771", "title": "Enforce proper comment format?", "body": "The comment style inside libopenage is pretty mixed. Have a look on these comments:\r\nunit_type.h:48:\r\n```\r\n/**\r\n * UnitType has to main roles:\r\n *\r\n * initialise(unit, player) should be called on a unit to give it a type and the required attributes, abilities and initial actions\r\n * of that type\r\n *\r\n * place(unit, terrain, initial position) is called to customise how the unit gets added to the world -- used to setup the TerrainObject location\r\n *\r\n * UnitType is connected to a player to allow independent tech levels\r\n */\r\nclass UnitType {\r\n```\r\nunit_type.h:68:\r\n```\r\n        /**\r\n         * gets the parent id of this unit type\r\n         * which is used for village base and gather types\r\n         */\r\n```\r\n\r\npath.h:23:\r\n```\r\n/**\r\n * The data type for movement cost\r\n */\r\n```\r\npath.h:39:\r\n```\r\n/**\r\n * Cost comparison for node_pt.\r\n * Extracts the ptr from the shared_ptr.\r\n * Calls operator < on Node.\r\n */\r\n```\r\nAll except the last comment lack punctuation. While reading them in source, this does not matter because of the linebreaks. In doxygen, however, simple linebreaks vanish.\r\nThe second comment is missing proper capitalization.\r\nI think, the last one is pretty ok. If there is something that deserves a fancy comment, `@param` etc. can be used.\r\nFrom `code_style/mom.cpp` I thought the fourth comment style was the only way to go, but then, in line 122:\r\n```\r\nprivate:\r\n        /** links to the story of the game */\r\n        Story *story;\r\n```\r\n(private ?) attributes may be commented in lower-case without punctuation?\r\n\r\nSo, how strict are we with comment-styles?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/4dd6ba3a323cb0f84032cb69e51f6449b8db4d5f", "message": "fix scrolling without focus"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6c1d165f2e59ab1fbb8e88d7cbe9cd92e37f8a87", "message": "doc: add libpng dependency"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9e6cb00e41ba9becbe6c1e5330b53f0f6377befc", "message": "encode screenshot in another thread\n\nThis also removes the window_size member from the screenshotmanager.\nThe current window size needs to be passed as arguments to\nsave_screenshot()."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fc87a2fd7ac8fb5803e0d4d7de4b201321fde8f4", "message": "save alpha-channel in screenshots"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5042fa411fbde17e0b77baaf95a0825c70d4cfcb", "message": "testing: fix copyright year and wrong logic"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6cda67e62558eba16945292ea85260972e6062a5", "message": "convert: enhance filter options\n\nThis adds an option to ignore AI and Random Map scripts.\n\nSome files where not filtered correctly or were not moved in the right\ndirectory. This is fixed now."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/32044a257593d70194acd639aefb480a3f6a8775", "message": "Several spelling fixes and code style corrections."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/856ae41f86d360023a4aca0ae25a688baff17b47", "message": "codecompliance: make files codecompliant\n\nThis removes 'asdf' from several files to make the compliance check stop\ncomplaining, so that it's possible to merge the asdf-test. mic-e will fix\nengine.h in #662."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5c45b89594a1413f46a5b6dfc576cb287ac668ac", "message": "codecompliance: check for asdf\n\nThis makes the codecompliance-check write a warning, when an \"asdf\"\nis found, indicating an immediate TODO."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e5d1828a1ed4ed9f48e2bfcbcd44ff48dc3eb88d", "message": "datastructure: remove unused DoublyLinkedList"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/832", "title": "[WIP] Spelling", "body": "some things I found over time.\r\nwe could keep this pr open for a while and I will add stuff over time.\r\n\r\nI don't know, if you want the change in print in logging.py. If you do, I will squash it, if not, remove it.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/814", "title": "[WIP] Use libopus instead of opusenc binary for conversion.", "body": "This is in response to #434.\r\n\r\nThings todo:\r\n- [x] Make the resampler faster.\r\n- [x] Comment my code. (I'm supposed to do that.)\r\n- [ ] Comment on my code. (You're supposed to do that.)\r\n- [ ] Checkout which `todo`s from the `todo` file should be done and do them.\r\n- [ ] Remove opus-tools requirement from buildsystem and documentation. [Done for all except os x. Who is responsible for the [arch packet](https://aur.archlinux.org/packages/openage-git/)? @linkmauve or @FabioLolix?]\r\n- [x] Register cython files into buildsystem.\r\n- [ ] Rebase and squash leaving only a few commits. (One for the code, one for the buildsystem changes, one for ...) PLEASE don't merge before I ticked this.\r\n\r\nOptionally:\r\n- [ ] Come up with an idea how to unit test this code.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/640", "title": "[WIP] doc: Nyan types", "body": "I started a list of all base types that need to be implemented in the engine. Add your thoughts and make changes.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/22775108", "body": "what was the problem you encountered? it works fine for me on current master.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/22775108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sairam": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/913", "title": "Setup CI via Travis CI", "body": "Travis CI has offering for Mac OS X . Offers free for OpenSource projects.\r\n\r\nhttps://blog.travis-ci.com/2017-09-22-macos-update", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rehmsen": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/912", "title": "Some HUD textures missing (red cross) when converting from AoE 2 HD", "body": "# Looks like this:\r\n![openage_2017-09-19_21-52-55_00](https://user-images.githubusercontent.com/29040/30612833-2a6e2792-9d86-11e7-9fae-11512e28d9ea.png)\r\n\r\n\r\n# To reproduce:\r\n\r\n1. Convert textures from a AoE 2 HD Beta 4.3 (in my case, installed on Windows, but openage is run on Linux).\r\n2. Run openage, generate any game.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MaanooAk": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/902", "title": "Alias Thread IDs to smaller numbers", "body": "Anyone else gets this:\r\n\r\n![screenshot from 2017-08-30 00-41-55](https://user-images.githubusercontent.com/6997990/29845641-5a1c2d9c-8d1c-11e7-99ca-6c1828fd75d6.png)\r\n\r\nShouldn't that be T1?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/842", "title": "Player sub classes", "body": "**Player**: Contains information and operations of game Player\r\n\r\n- `Player` \r\n// hint: they should have a different data structure or different operations\r\n  - `Human Player`\r\n  - `AI Player`\r\n  - `Idle Player` (for Gaia or multiple independent Gaia**s**) (or even `Gaia Player`)\r\n  - `Dummy Player` (usually provided in many modding environments, eg. used as a bank)\r\n\r\n**Controller**: Takes input from a source (eg. gui, AI) and transforms them into game actions\r\n\r\n- `Controller` \r\n// hint: they should have a different input source or different generated game actions\r\n  - `Human Controller` (gui actions to actions)\r\n  - `AI Controller` (AI algorithms to actions)\r\n    - `Scripted Controller` (Combines fixed actions and actions from AI algorithms)\r\n  - `Empty Controller` (do nothing)\r\n\r\n#### Old post\r\n> At some point the class Player will become the base class of something like this\r\n> \r\n> - `Player`\r\n>   - `Human Player`\r\n>   - `AI Player`\r\n>     - `Scripted Player` (for campaign like stuff)\r\n>   - `Idle Player` (for Gaia or multiple independent Gaia**s**) \r\n>   - `Dummy Player` (usually provided in many modding environments)\r\n> \r\n> Any suggestions on the topic? different tree? other sub classes?\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/748", "title": "Male villager idle graphics", "body": "In the villager idle graphics we can see a knife-like-thing. So the current default idle graphics should go to the attack idle graphics and we should find the idle graphics without the knife.\r\n\r\nAlso, the idle loops in the original had a frame which lasted 1-2s and the rest at normal rate, is this something openage will have too?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/a1b216703f32fd7c0e677b5dc9997d7ab7d43d51", "message": "Actions and Research and doc fixes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6634ced0c1b36c08b54eadefbf4950e67b386f96", "message": "Moved timing logic from actions to seperate class"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c7e1f2396569351526f3df4b25ded4aedf992155", "message": "Research basic structure"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/607360f4e050ddd7319f7004c2cc25a0a3133af9", "message": "Eucledian distance optimization"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5b5da6d1d84e3f8ccbdcc63fb303fcaa633035a0", "message": "Player shared ptr and score renames"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/15bfdd8ad96df911065777288a8616180277bb09", "message": "Use static cast on all enum classes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7f77d882f68c1f2d5e5c73b37cbb268f3a1ce11b", "message": "Changed players container and access"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2142211fed21ff5a183810eede953856b1ad4df1", "message": "Keep track of units for dependecies"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/39d35b3b8276d05a01d3bbee44ecf8af9871ada0", "message": "Score resource and unit costs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/82cf4b51f4b1af0928757507ed1f705b6fd6a013", "message": "Damage refactors and kill credit"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/641f602997c1fe08faa410bb10dfceaa64a2e5d3", "message": "Score updates and death credit"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8c9df99f89288b6467fd928cc82d0ecde498ff1e", "message": "Score of teams"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/54e8d2e94264ad3eeaceedbb7459a245c82c504f", "message": "Score system init"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/904", "title": "Buildings limits, Resource capacity and more", "body": "- **Buildings**\r\n  - **cost** check and deduction\r\n  -  **limits** max at single instance, max ever created\r\n    - Player keeps track for each unit type the numbers:\r\n      - **units have**: active \r\n      - **units had**: active and dead\r\n      - **units pending**: being made\r\n- Player **Resource capacity**\r\n  - **Storage** attribute\r\n- Dynamic resources (first steps)\r\n  - **Resource**: one resource type (e.g wood)\r\n  - **Resources**: set of Resource\r\n  - **ResourceBoundle**: Resource-Amount pairs (created with a Resources)\r\n- **Resource** **decay** and **gather rate multiplier**\r\n\r\nEDIT:\r\n\r\n- **Resource generator** attribute\r\n  - Tmp logic in idle action\r\n- **ResourceCost** \r\n  - It can be **constant** or **dynamic** (= function of player)\r\n  - Used in **UnitType** and **ReseachType**\r\n\r\nEDIT:\r\n\r\n- **ResourceBundle** operations with bundles from different versions of Resources", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Vtec234": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/855", "title": "GUI subsystem refactor", "body": "As part of both the renderer rewrite (#850) and the [architectural rework of the engine](https://github.com/SFTtech/openage/milestone/6), we need to decouple subsystems. Without this, proper support for a client/server split and job-based parallelism with communication through channels will be practically impossible. I'm working on the graphics side of things, so I'd like to work on decoupling the GUI first.\r\n\r\nTo achieve this design goal, we unfortunately have to get rid of all the `GuiLink`s as they stand, as well as any other links to non-GUI engine components (e.g. `EngineQMLInfo`). From a very high-level viewpoint, the initial idea of how we could replace this is a callback system, where all communication proceeds solely through the `Gui` class, with an API of something like:\r\n```c++\r\nclass Gui {\r\npublic:\r\n  Gui (SDL_Window*, util::Path const& source, util::Path const& root_dir); // no EngineQMLInfo\r\n\r\n  void register_on_X_cb(std::function<..> callback); // registers a function to be called when X happens in the GUI\r\n\r\n  void enqueue_event(SDL_Event*); // stores an event to be processed\r\n  void process_events(); // actually processes events and calls callbacks\r\n\r\nprivate:\r\n  internal state\r\n};\r\n```\r\nObviously, we will need more than just the above in practice, but the general idea is that the GUI is an event-based component like any other. By itself it doesn't do anything. The user registers functions that they want called on GUI state changes. To give an example, currently changing properties of a game involves a `GameControlLink` that directly manipulates `Engine` members. This is unfortunate, because it will result in completely unpredictable behaviour in a concurrent execution context. Instead, what we would have is a `on_game_property_changed` callback which is called from `process_events` whenever the GUI detects that one of the enqueued events is a mouse click on something that triggers a game property change. It is up to the user to ensure threadsafety for that callback, and what we would in fact do is either make that callback send an event on the `WorldUpdater` concurrent input channel or directly modify some property of the `PresentationState`, which is local to the `Presenter` class - the user of the GUI.\r\n\r\nI'd be happy to hear thoughts on this, especially from @ChipmunkV, who I understand is the principal author of the GUI.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/846", "title": "Backtrace symbol address to file and line mappings", "body": "The current implementation of exceptions uses GCCBacktrace to gather the source locations of functions in the backtrace. It's not portable or widely available, even on Linux.\r\nThe fallback code, if `libbacktrace` is not available, does just print symbol names, but not their source file origin.\r\n\r\nTherefore it would be good to have a cross-platform backtrace library such as `Boost.Backtrace`. Another option is `libdwarf`, but that is only available for Linux ELF.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/6a5bd41faff1b7cb0b9da3c4b7132b832547ff50", "message": "Use binary mode for files in cpp"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/34ac3cf2698527df1c33794b43c41dc864d51bc8", "message": "cvar: fix python type"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3ec171986cffdbe47115caae41ff2cfc50ba1ce4", "message": "datastructure: fix ConstMap type errors, add exceptions and simplify"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/850", "title": "[WIP] New renderer, cont.", "body": "A new rendering engine providing functionality designed for our needs. This is work continued from #287. Related: #34, #153, #286. Please submit contributions to the branch [here](https://github.com/Vtec234/openage/tree/new-renderer).\r\n\r\nList of things to do:\r\n- [x] Abstraction of render backend\r\n  - [x] OpenGL 3.3 or higher\r\n    - [ ] Use 4.x when available (optional)\r\n    - [ ] Support ancient 2.x legacy (optional)\r\n  - [ ] Vulkan (optional, #242)\r\n- [ ] Render pipeline abstraction\r\n  - [x] Textures\r\n  - [x] Shaders\r\n    - [x] Uniforms\r\n    - [ ] Uniform buffers\r\n    - [ ] Vertex attributes\r\n  - [x] Geometries\r\n    - [x] Quad primitives\r\n    - [ ] Circles\r\n    - [ ] Smooth paths\r\n    - [ ] Mesh importing (optional)\r\n  - [x] Render targets\r\n    - [x] Framebuffers\r\n    - [ ] Renderbuffers (optional)\r\n- [ ] Functionality\r\n  - [x] Screenshot support\r\n    - [ ] [PBO optimization](http://www.songho.ca/opengl/gl_pbo.html) for texture downloading (optional)\r\n  - [x] Pixel-perfect unit hitbox for unit selection and damage areas (#368, #671 )\r\n  - [ ] Outline rendering\r\n  - [ ] Investigate why tree textures render incorrectly (#359, [maybe this?](http://www.adriancourreges.com/blog/2017/05/09/beware-of-transparent-pixels/))\r\n  - [ ] Fix #374\r\n- [ ] Terrain rendering\r\n  - [ ] Merge terrain texture into a single bitmap\r\n  - [ ] Cache blending results (#154, #158)\r\n  - [ ] Do as much as possible in shaders (#149)\r\n  - [ ] Clip tiles properly (#141)\r\n- [ ] Optimizations\r\n  - [ ] [Occlusion queries](https://vertostudio.com/gamedev/?p=177)\r\n  - [ ] Minimize OpenGL state changes (batch by shader, then by buffer)\r\n  - [ ] Texture binpacking into atlas\r\n  - [ ] Smooth zooming\r\n- [ ] Integration\r\n  - [ ] Rewrite all of drawing functionality to be expressed in terms of `Renderer`\r\n    - [ ] Get rid of GL code everywhere except the rendering backend and the GUI\r\n    - [ ] Write a `GameRenderer` that takes evaluations of curves at the current instant as input\r\n  - [ ] GUI integration\r\n    - [ ] TBD (#624)", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FolkertVanVerseveld": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/840", "title": "Assets midi conversion", "body": "The original Age of Empires uses MIDI for background music using the\r\nsystem's default sound banks for MIDI. I think it is best to add MIDI\r\nconversion support to the assets converter tools, rather than add MIDI\r\nplayback support to the engine directly. MIDI is especially troublesome\r\nto get working on linux due to lack of good soundfonts and playback\r\nsoftware.\r\n\r\nIt is possible to get MIDI playback working on linux by using\r\nlibfluidsynth (one of my projects uses this library to support MIDI\r\nplayback), but I don't think this is what we want.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/788", "title": "Fix asset conversion for HD + Rise of the Rajas (Version 5.x)", "body": "It is not possible to run OpenAge with current Steam version of Age of\r\nEmpires HD + Rise of the Rajas (Version 5.x). The run script fails to\r\nconvert the assets saying:\r\n```\r\nWARN [py] You have installed incompatible game version(s):\r\nWARN [py]  * Age of Empires 2: HD + Rise of the Rajas (Version 5.x)\r\n```\r\n\r\nThe complete run log:\r\n```\r\nINFO [py] launching openage v0.3.0-857-gc9419b8\r\nINFO [py] compiled by GNU 5.4.0\r\nINFO [py] running in DEVMODE\r\nINFO [py] No converted assets have been found\r\nINFO [py] Game specification version file not found.\r\nINFO [py] Converting graphics, interface, metadata, sounds\r\nINFO [py] Will save to 'b'/home/dev/openage/assets''\r\nCould not find any installation directory automatically.\r\nPlease enter an AOE2 install path manually.\r\n> /media/dev/ISOIMAGE\r\nWARN [py] You have installed incompatible game version(s):\r\nWARN [py]  * Age of Empires 2: HD + Rise of the Rajas (Version 5.x)\r\nWARN [py] You need at least one of:\r\nWARN [py]  * Age of Empires 2: The Conquerors, Patch 1.0c\r\nWARN [py]  * Age of Empires 2: Forgotten Empires\r\nWARN [py]  * Age of Empires 2: HD Edition (Version 3.0+)\r\nWARN [py]  * Age of Empires 2: HD + Forgotten Empires (Version 4.0+)\r\nWARN [py]  * Age of Empires 2: HD + African Kingdoms (Version 4.7+)\r\n ERR [py] game asset conversion failed\r\nconverting from '/media/dev/ISOIMAGE'\r\n```\r\n\r\nThe provided image path is the Steam version (2017-03-31) of HD + Rise\r\nof the Rajas + The African Kingdom + The Forgotten Empires.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/788/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/785", "title": "Integrate Rise of Rome (AoK prequel)", "body": "@TheJJ asked me back in january to join forces to speed up developing\r\nOpenAge. Unfortunately, life had other plans for me so hence the 3\r\nmonths delay.\r\n\r\nI think it would be a nice thing to have to be able to provide support\r\nfor the prequels of AoE II as well. In my opinion, the original AoE is\r\nvery limited due to lots of boring micromanagement. I would like to help\r\nto integrate the expansion to AoE: Rise of Rome.\r\n\r\nLet me know what you guys think or what you need help with the most so\r\nwe can improve OpenAge together and maybe integrate the prequels in the\r\nfuture :D\r\n\r\nSome things I've come up with:\r\n\r\nTo integrate the prequels OpenAge either needs to provide multiple setup\r\noptions in the configuration scripts for the specified build target\r\n(e.g. --game=[AoK|RoR|AoC]) or the game engine needs to be upgraded to\r\nsupport different genie game engines on-the-fly.\r\n\r\nSome of the issues that need to be resolved:\r\n\r\n* The Genie game engine in all AoE II games are very different from the\r\n  original game engine used in AoE I and RoR (especially with\r\n  path-finding).\r\n* Verify whether the file format of original game assets in AoE II are\r\n  compatible with the original game assets (otherwise, we need to\r\n  upgrade the assets converter to also support RoR).\r\n\r\nRelated:\r\n* AOE I support: #808 \r\n* SWGB support: #421 ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/785/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/d4c71b089d92cce89ebc6aaf97e993a151cc85e3", "message": "doc/reverse_engineering/scoring: Clarified equalities\n\nIf multiple players have the same requirements for a bonus, a set of\nrules is applied to determine which player gets the bonus points."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ede7621c45396e762a7b858901a90f61d80a7f5e", "message": "doc/reverse_engineering: AoE I scoring and civilizations\n\nComplete scoring system and civilization specials and unit/building\nproduction table copied from the official Age of Empires I card fold\nlookup sheet and reverse engineered some other values manually."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7a5f478c641d9a3667a309e75be7e303e963e46f", "message": "doc/reverse_engineering/unit_stats: AoE I units (wip)\n\nTaken directly from the official Age of Empires I game manual guide for\nMacOS 9 appendix pp. 108. Some columns are still missing because we have\nto reverse engineer those."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Birch-san": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/831", "title": "[macOS] \"cannot play\" opus files", "body": "I encounter `Data didn't contain opus stream: /assets/converted/sounds/6042.opus`.\r\nI checked and confirmed that the absolute path to the file was correct, and pointed to a real file on my computer. I played the file in `mpv`, and it played correctly.\r\nI checked the bytes of the file [0]; they don't look weird.\r\n\r\nHere's the stack trace I encounter [1].\r\n\r\n[0] bytes\r\n\r\n```\r\n\u279c  ~ xxd /Users/birch/git/openage/assets/converted/sounds/6042.opus | head -n 60\r\n00000000: 4f67 6753 0002 0000 0000 0000 0000 df9a  OggS............\r\n00000010: 5060 0000 0000 8040 1b70 0113 4f70 7573  P`.....@.p..Opus\r\n00000020: 4865 6164 0101 9001 2256 0000 0000 004f  Head....\"V.....O\r\n00000030: 6767 5300 0000 0000 0000 0000 00df 9a50  ggS............P\r\n00000040: 6001 0000 0005 b276 7403 ffff fe4f 7075  `......vt....Opu\r\n00000050: 7354 6167 730d 0000 006c 6962 6f70 7573  sTags....libopus\r\n00000060: 2031 2e31 2e34 0200 0000 2500 0000 454e   1.1.4....%...EN\r\n00000070: 434f 4445 523d 6f70 7573 656e 6320 6672  CODER=opusenc fr\r\n00000080: 6f6d 206f 7075 732d 746f 6f6c 7320 302e  om opus-tools 0.\r\n00000090: 312e 3917 0000 0045 4e43 4f44 4552 5f4f  1.9....ENCODER_O\r\n000000a0: 5054 494f 4e53 3d2d 2d71 7569 6574 0000  PTIONS=--quiet..\r\n000000b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000000c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000000d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000000e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000000f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000100: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000110: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000120: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000130: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000140: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000150: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000160: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000170: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000180: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000190: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000001a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000001b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000001c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000001d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000001e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000001f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000200: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000210: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000220: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000230: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000240: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000250: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000260: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000270: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000280: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000290: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000002a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000002b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000002c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000002d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000002e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000002f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000300: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000310: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000320: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000330: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000340: 0000 0000 0000 0000 004f 6767 5300 0080  .........OggS...\r\n00000350: bb00 0000 0000 00df 9a50 6002 0000 004b  .........P`....K\r\n00000360: 3444 2f32 7353 5251 5454 5d65 666b 6b69  4D/2sSRQTT]efkki\r\n00000370: 6d6e 6a6a 6b69 6b6d 676a 696b 7168 6969  mnjjkikmgjikqhii\r\n00000380: 6a69 6b6b 6f69 6c6c 6f69 686d 6c66 6769  jikkoilloihmlfgi\r\n00000390: 6461 635a 5757 d87f 6593 8c7f fd24 8d58  dacZWW..e....$.X\r\n000003a0: 1ab0 3cff ccf6 a45b 42bf d810 de74 f02b  ..<....[B....t.+\r\n000003b0: 394e fba0 5144 7815 01e1 90e5 da0c 4ed5  9N..QDx.......N.\r\n```\r\n\r\n[1] stack trace\r\n\r\n```\r\nWARN cannot play: Traceback (most recent call last):\r\n  File ?, in start+0x1 [0x7fffe80a7235]\r\n  File ?, in main+0x18b [0x108de9a6b]\r\n  File ?, in __Pyx_main(int, wchar_t**)+0x6d [0x108de9b3d]\r\n  File ?, in PyInit_run+0x9e5 [0x108de82d5]\r\n  File ?, in __Pyx_PyObject_CallNoArg(_object*)+0x33 [0x108de9683]\r\n  File ?, in __Pyx_PyFunction_FastCallDict(_object*, _object**, int, _object*)+0x20f [0x108dea50f]\r\n  File ?, in __Pyx_PyFunction_FastCallNoKw(PyCodeObject*, _object**, long, _object*)+0x13c [0x108dead9c]\r\n  File ?, in _PyEval_EvalFrameDefault+0x68eb [0x108e9ba44]\r\n  File ?, in call_function+0x20c [0x108e9e683]\r\n  File ?, in _PyFunction_FastCall+0x79 [0x108e9f7f8]\r\n  File ?, in _PyEval_EvalFrameDefault+0x68eb [0x108e9ba44]\r\n  File ?, in call_function+0x232 [0x108e9e6a9]\r\n  File ?, in _PyCFunction_FastCallDict+0x1cd [0x108e371a3]\r\n  File ?, in __pyx_pw_7openage_4game_8main_cpp_1run_game(_object*, _object*, _object*)+0x355 [0x10c956da5]\r\n  File ?, in __pyx_pf_7openage_4game_8main_cpp_run_game(_object*, _object*, _object*)+0xa4a [0x10c95835a]\r\n  File ?, in openage::run_game(openage::main_arguments const&)+0x587 [0x1090a0d37]\r\n  File ?, in openage::Engine::run()+0x37 [0x10904fec7]\r\n  File ?, in openage::Engine::loop()+0x664 [0x1090505b4]\r\n  File ?, in openage::gui::GUI::on_input(SDL_Event*)+0x2f [0x1091bb11f]\r\n  File ?, in qtsdl::GuiInput::process(SDL_Event*)+0x38 [0x1091c7b18]\r\n  File ?, in qtsdl::GuiInputImpl::process(SDL_Event*)+0x566 [0x1091db896]\r\n  File ?, in qtsdl::GuiInputImpl::relay_input_event(QEvent*, bool)+0x87 [0x1091dbe87]\r\n  File ?, in qtsdl::GuiInputImpl::input_event(std::__1::atomic<bool>*, QEvent*, bool)+0x6d [0x1095e815d]\r\n  File ?, in QMetaObject::activate(QObject*, int, int, void**)+0x9ea [0x10af392fa]\r\n  File ?, in QtPrivate::QSlotObject<void (qtsdl::EventHandlingQuickWindow::*)(std::__1::atomic<bool>*, QEvent*, bool), QtPrivate::List<std::__1::atomic<bool>*, QEvent*, bool>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void**, bool*)+0xa6 [0x1091dc566]\r\n  File ?, in void QtPrivate::FunctionPointer<void (qtsdl::EventHandlingQuickWindow::*)(std::__1::atomic<bool>*, QEvent*, bool)>::call<QtPrivate::List<std::__1::atomic<bool>*, QEvent*, bool>, void>(void (qtsdl::EventHandlingQuickWindow::*)(std::__1::atomic<bool>*, QEvent*, bool), qtsdl::EventHandlingQuickWindow*, void**)+0x50 [0x1091dc640]\r\n  File ?, in QtPrivate::FunctorCall<QtPrivate::IndexesList<0, 1, 2>, QtPrivate::List<std::__1::atomic<bool>*, QEvent*, bool>, void, void (qtsdl::EventHandlingQuickWindow::*)(std::__1::atomic<bool>*, QEvent*, bool)>::call(void (qtsdl::EventHandlingQuickWindow::*)(std::__1::atomic<bool>*, QEvent*, bool), qtsdl::EventHandlingQuickWindow*, void**)+0xae [0x1091dc71e]\r\n  File ?, in qtsdl::EventHandlingQuickWindow::on_input_event(std::__1::atomic<bool>*, QEvent*, bool)+0xbd [0x1091dc9ad]\r\n  File ?, in QCoreApplication::sendEvent(QObject*, QEvent*)+0x38 [0x1091dcc78]\r\n  File ?, in QCoreApplication::notifyInternal2(QObject*, QEvent*)+0xa4 [0x10af07a34]\r\n  File ?, in QCoreApplication::notify(QObject*, QEvent*)+0x2d [0x10af07aad]\r\n  File ?, in QCoreApplicationPrivate::notify_helper(QObject*, QEvent*)+0x12f [0x10af07e4f]\r\n  File ?, in QQuickWindow::event(QEvent*)+0x34c [0x10a0f334c]\r\n  File ?, in QWindow::event(QEvent*)+0xf4 [0x10a3bcad4]\r\n  File ?, in QQuickWindowPrivate::handleMouseEvent(QMouseEvent*)+0x858 [0x10a0f61a8]\r\n  File ?, in QQuickWindowPrivate::deliverPointerEvent(QQuickPointerEvent*)+0x36 [0x10a0f52f6]\r\n  File ?, in QQuickWindowPrivate::deliverMouseEvent(QQuickPointerMouseEvent*)+0xb3 [0x10a0f4813]\r\n  File ?, in QQuickWindow::sendEvent(QQuickItem*, QEvent*)+0x7c [0x10a0f45bc]\r\n  File ?, in QCoreApplication::notifyInternal2(QObject*, QEvent*)+0xa4 [0x10af07a34]\r\n  File ?, in QCoreApplication::notify(QObject*, QEvent*)+0x2d [0x10af07aad]\r\n  File ?, in QCoreApplicationPrivate::notify_helper(QObject*, QEvent*)+0x12f [0x10af07e4f]\r\n  File ?, in QQuickItem::event(QEvent*)+0x101 [0x10a0e3c41]\r\n  File ?, in QQuickMouseArea::mouseReleaseEvent(QMouseEvent*)+0xa7 [0x10a1692e7]\r\n  File ?, in QQuickMouseArea::setPressed(Qt::MouseButton, bool, Qt::MouseEventSource)+0x1ab [0x10a168abb]\r\n  File ?, in QQuickMouseArea::released(QQuickMouseEvent*)+0x40 [0x10a23c2d0]\r\n  File ?, in QMetaObject::activate(QObject*, int, int, void**)+0x79 [0x10af38989]\r\n  File ?, in QQmlNotifier::emitNotify(QQmlNotifierEndpoint*, void**)+0x2e5 [0x10aa67885]\r\n  File ?, in QQmlBoundSignal::setEnabled(bool)+0x1dd [0x10aa26b3d]\r\n  File ?, in QQmlBoundSignalExpression::evaluate(void**)+0x475 [0x10aa26345]\r\n  File ?, in QQmlJavaScriptExpression::evaluate(QV4::CallData*, bool*, QV4::Scope&)+0x293 [0x10aa862c3]\r\n  File ?, in QV4::FunctionObject::sourceLocation() const+0x1fe9 [0x10a981319]\r\n  File ?, in ? [0x116f22166]\r\n  File ?, in QV4::Runtime::method_callProperty(QV4::ExecutionEngine*, int, QV4::CallData*)+0x334 [0x10a9f61e4]\r\n  File ?, in QV4::QObjectMethod::callInternal(QV4::CallData*, QV4::Scope&) const+0x7b6 [0x10a9e0586]\r\n  File ?, in QV4::QObjectMethod::callInternal(QV4::CallData*, QV4::Scope&) const+0xcef [0x10a9e0abf]\r\n  File ?, in QV4::QMetaObjectWrapper::isEqualTo(QV4::Managed*, QV4::Managed*)+0x209c [0x10a9e41fc]\r\n  File ?, in qt_plugin_instance+0xd9d [0x116e6766d]\r\n  File ?, in qt_plugin_instance+0xadd [0x116e673ad]\r\n  File ?, in QMetaObject::activate(QObject*, int, int, void**)+0x79 [0x10af38989]\r\n  File ?, in QQmlNotifier::emitNotify(QQmlNotifierEndpoint*, void**)+0x2e5 [0x10aa67885]\r\n  File ?, in QQmlBoundSignal::setEnabled(bool)+0x1dd [0x10aa26b3d]\r\n  File ?, in QQmlBoundSignalExpression::evaluate(void**)+0x475 [0x10aa26345]\r\n  File ?, in QQmlJavaScriptExpression::evaluate(QV4::CallData*, bool*, QV4::Scope&)+0x293 [0x10aa862c3]\r\n  File ?, in QV4::FunctionObject::sourceLocation() const+0x1593 [0x10a9808c3]\r\n  File ?, in ? [0x116f218f6]\r\n  File ?, in QV4::Runtime::method_callProperty(QV4::ExecutionEngine*, int, QV4::CallData*)+0x334 [0x10a9f61e4]\r\n  File ?, in QV4::QObjectMethod::callInternal(QV4::CallData*, QV4::Scope&) const+0x488 [0x10a9e0258]\r\n  File ?, in QV4::QObjectMethod::callInternal(QV4::CallData*, QV4::Scope&) const+0xaf6 [0x10a9e08c6]\r\n  File ?, in QV4::QMetaObjectWrapper::isEqualTo(QV4::Managed*, QV4::Managed*)+0x1098 [0x10a9e31f8]\r\n  File ?, in QQmlVMEMetaObject::metaCall(QObject*, QMetaObject::Call, int, void**)+0x321 [0x10a9fea01]\r\n  File ?, in QMetaObject::activate(QObject*, int, int, void**)+0x79 [0x10af38989]\r\n  File ?, in QQmlNotifier::emitNotify(QQmlNotifierEndpoint*, void**)+0x2e5 [0x10aa67885]\r\n  File ?, in QQmlBoundSignal::setEnabled(bool)+0x1dd [0x10aa26b3d]\r\n  File ?, in QQmlBoundSignalExpression::evaluate(void**)+0x475 [0x10aa26345]\r\n  File ?, in QQmlJavaScriptExpression::evaluate(QV4::CallData*, bool*, QV4::Scope&)+0x293 [0x10aa862c3]\r\n  File ?, in QV4::FunctionObject::sourceLocation() const+0x1fe9 [0x10a981319]\r\n  File ?, in ? [0x116f8c74d]\r\n  File ?, in QV4::Runtime::method_callProperty(QV4::ExecutionEngine*, int, QV4::CallData*)+0x334 [0x10a9f61e4]\r\n  File ?, in QV4::QObjectMethod::callInternal(QV4::CallData*, QV4::Scope&) const+0x488 [0x10a9e0258]\r\n  File ?, in QV4::QObjectMethod::callInternal(QV4::CallData*, QV4::Scope&) const+0xaf6 [0x10a9e08c6]\r\n  File ?, in QV4::QMetaObjectWrapper::isEqualTo(QV4::Managed*, QV4::Managed*)+0x1098 [0x10a9e31f8]\r\n  File ?, in openage::gui::GameCreator::qt_metacall(QMetaObject::Call, int, void**)+0x75 [0x1095e4aa5]\r\n  File ?, in openage::gui::GameCreator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)+0xb3 [0x1095e44d3]\r\n  File ?, in openage::gui::GameCreator::activate()+0x12b [0x109185eab]\r\n  File ?, in void qtsdl::GuiItemMethods<openage::gui::GameMainLink>::i<openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&>(openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&&&, openage::gui::GeneratorLink*&&&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&&&)+0x119 [0x109186249]\r\n  File ?, in qtsdl::GameLogicCaller::in_game_logic_thread(std::__1::function<void ()> const&) const+0x4a [0x1095e756a]\r\n  File ?, in QMetaObject::activate(QObject*, int, int, void**)+0x9ea [0x10af392fa]\r\n  File ?, in QtPrivate::QSlotObject<void (qtsdl::GuiCallback::*)(std::__1::function<void ()> const&), QtPrivate::List<std::__1::function<void ()> const&>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void**, bool*)+0xa6 [0x1091d1906]\r\n  File ?, in void QtPrivate::FunctionPointer<void (qtsdl::GuiCallback::*)(std::__1::function<void ()> const&)>::call<QtPrivate::List<std::__1::function<void ()> const&>, void>(void (qtsdl::GuiCallback::*)(std::__1::function<void ()> const&), qtsdl::GuiCallback*, void**)+0x50 [0x1091d19e0]\r\n  File ?, in QtPrivate::FunctorCall<QtPrivate::IndexesList<0>, QtPrivate::List<std::__1::function<void ()> const&>, void, void (qtsdl::GuiCallback::*)(std::__1::function<void ()> const&)>::call(void (qtsdl::GuiCallback::*)(std::__1::function<void ()> const&), qtsdl::GuiCallback*, void**)+0x85 [0x1091d1a95]\r\n  File ?, in qtsdl::GuiCallback::process(std::__1::function<void ()> const&)+0x19 [0x1091d30e9]\r\n  File ?, in std::__1::function<void ()>::operator()() const+0x7e [0x1091d316e]\r\n  File ?, in std::__1::__function::__func<void qtsdl::GuiItemMethods<openage::gui::GameMainLink>::i<openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&>(openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&&&, openage::gui::GeneratorLink*&&&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&&&)::'lambda'(), std::__1::allocator<void qtsdl::GuiItemMethods<openage::gui::GameMainLink>::i<openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&>(openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&&&, openage::gui::GeneratorLink*&&&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&&&)::'lambda'()>, void ()>::operator()()+0x29 [0x1091894c9]\r\n  File ?, in void std::__1::__invoke_void_return_wrapper<void>::__call<void qtsdl::GuiItemMethods<openage::gui::GameMainLink>::i<openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&>(openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&&&, openage::gui::GeneratorLink*&&&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&&&)::'lambda'()&>(void qtsdl::GuiItemMethods<openage::gui::GameMainLink>::i<openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&>(openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&&&, openage::gui::GeneratorLink*&&&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&&&)::'lambda'()&&&)+0x2d [0x1091897bd]\r\n  File ?, in void qtsdl::GuiItemMethods<openage::gui::GameMainLink>::i<openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&, openage::gui::GeneratorLink*&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&>(openage::gui::GameCreator::activate()::$_0, openage::gui::GameSpecLink*&&&, openage::gui::GeneratorLink*&&&, std::__1::shared_ptr<openage::gui::GameCreatorSignals>&&&)::'lambda'()::operator()() const+0x98 [0x109189868]\r\n  File ?, in openage::gui::GameCreator::activate()::$_0::operator()(openage::GameMainHandle*, openage::GameSpecHandle*, openage::Generator*, std::__1::shared_ptr<openage::gui::GameCreatorSignals>) const+0x12d [0x1091899dd]\r\n  File ?, in openage::Generator::create(std::__1::shared_ptr<openage::GameSpec>)+0x91c [0x10928f4ec]\r\n  File ?, in openage::GameMain::GameMain(openage::Generator const&)+0x1d [0x10921dfdd]\r\n  File ?, in openage::GameMain::GameMain(openage::Generator const&)+0xc21 [0x10921dbe1]\r\n  File ?, in openage::Generator::add_units(openage::GameMain&) const+0x5d3 [0x10928e533]\r\n  File ?, in openage::UnitContainer::new_unit(openage::UnitType&, openage::Player&, openage::coord::phys3)+0x320 [0x10948e4d0]\r\n  File ?, in openage::LivingProducer::place(openage::Unit*, std::__1::shared_ptr<openage::Terrain>, openage::coord::phys3) const+0xc9 [0x1094238f9]\r\n  File ?, in openage::MovableProducer::place(openage::Unit*, std::__1::shared_ptr<openage::Terrain>, openage::coord::phys3) const+0xc9 [0x109420e09]\r\n  File ?, in openage::ObjectProducer::place(openage::Unit*, std::__1::shared_ptr<openage::Terrain>, openage::coord::phys3) const+0x5b8 [0x10941e3d8]\r\n  File ?, in openage::Sound::play() const+0x132 [0x10923ff72]\r\n  File ?, in openage::audio::Sound::play()+0x60 [0x1090f2d70]\r\n  File ?, in openage::audio::DynamicResource::use()+0x32a [0x1090d62ba]\r\n  File ?, in openage::audio::DynamicLoader::create(openage::util::Path const&, openage::audio::format_t)+0x116 [0x1090d4e26]\r\n  File ?, in openage::audio::OpusDynamicLoader::OpusDynamicLoader(openage::util::Path const&)+0x1d [0x1090ebc9d]\r\n  File ?, in openage::audio::OpusDynamicLoader::OpusDynamicLoader(openage::util::Path const&)+0x48 [0x1090eb978]\r\n  File ?, in openage::audio::open_opus_file(openage::util::Path const&)+0xef0 [0x1090ee380]\r\n  File ?, in openage::audio::Error::Error(openage::log::message const&)+0x1d [0x1090ea1ed]\r\n  File ?, in openage::audio::Error::Error(openage::log::message const&)+0x30 [0x1090ea1b0]\r\n  File \"libopenage/audio/opus_loading.cpp\", line 121, in openage::audio::opus_file_t openage::audio::open_opus_file(const util::Path &)\r\nopenage::audio::Error: Could not open opus file: Path(Union(Directory(/Users/birch/git/openage/cfg).root @ (b'cfg',), Directory(/Users/birch/git/openage/assets).root @ (b'assets',)):/assets/converted/sounds/6042.opus) = '/Users/birch/git/openage/assets/converted/sounds/6042.opus': Data didn't contain opus stream\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/545f1e2c2d37fd9b524fe4ad21223068d6b6ab07", "message": "undo final change of gui-gl-context pull request, to prevent SIGSEGV"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/901ff9b162a2c31cf476fd5b587f6c1ec2bd62b1", "message": "since we are setting time to \"NOW\", we can just use nullptr. also I notice now that I was missing an == 0 this whole time."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2bc8a97e17516eed1370b43f249c6162c704073e", "message": "provide missing GL_DEBUG definitions to fix compile on Mac"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3335228a7dd1a2792f278f9b7c5dba711a5bc7ee", "message": "fix pixel transfer format for loading an OpenGL texture from an SDL surface (i.e. swap red & blue channels on Mac)"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ae8ef52547a882ecd9bb916a649f412bf35b4a91", "message": "ignore compiled QML"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bfb028c531c1f5f68f57fd3451383a8f1c5d1a2d", "message": "fix asset search (was looking in resources/resources/)"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/03eccfbc045d7615b965a42a5c6f4bd7fad0905c", "message": "introduce Mac-specific shims for `utimensat()` and for `stat.st_mtim`\n\nimplement feedback from review"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5087bed2745dfb023433117bd46de59ed5abb629", "message": "enable contributors to obfuscate the email address they publish in copying.md\n\nimplement review feedback (simplify syntax, remove unused functions, remove utf-8 header, update copyright year)\n\nprotect the innocent; s/@/ \u00e0 / s/./ dawt /\n\nguess how to fix linting violations\n\nenable contributors to obfuscate the email address they publish in copying.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kindl": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/829", "title": "Learn AoE graphics style and then autogenerate assets", "body": "Hello there.\r\nWe cannot use the original AoE assets.\r\nHave a look at this work https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix which can turn zebras into horses and vice versa using learning. I thought it would be awesome to learn the graphical style of AoE assets and apply it to pictures of houses, castles and other buildings to generate game assets. The next step would be, to use it on satellite data to create maps similar to real world regions.\r\nThis idea is a bit crazy and still out of reach, but openage is all about crazy ideas.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/829/reactions", "total_count": 10, "+1": 7, "-1": 0, "laugh": 3, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aap": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/781", "title": "File format documentation incomplete", "body": "I've been working on documenting the .dat files lately, check out:\r\nhttps://github.com/aap/geniedoc\r\nSorry this is not a PR but I wanted to compile everything in one place in the same style and didn't want to write it twice. I hope you find it helpful.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MrZupperman": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/770", "title": "Multiplayer: Shared / Co-Op Mode", "body": "In the original Age of Empire 2 (never played the HD version) there exists an undocumented \"shared\" multiplayer mode. When you choose same color, team and civilization for two teams, they can control the same units, have the same buildings, share the same resources etc. I.e. they act/appear as one player in the game, that can be controlled from two persons (more should be possible, but I have never tested).\r\nIt would be pretty cool if this is possible in openage too.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/770/reactions", "total_count": 9, "+1": 9, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Tomatower": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/746", "title": "Code Compliance output grouping", "body": "The output of the code compliance should be grouped by the file that is tested - makes it a lot easier to fix all the issues in a file, without having to jump around a lot.\r\n\r\nThe code compliance checks are performed in `openage/buildsystem/codecompliance`.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/745", "title": "Code Compliance automatic fixing", "body": "The Code Compliance tester can automatically determine, where spaces are faulty inserted, so a script could easily fix them without having to go through every file manually - at least for a lot of often occurring issues.\r\n\r\nThe code compliance checks are performed in `openage/buildsystem/codecompliance`, where the automatic fixing should be added to.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/624", "title": "Decoupling of subsystems", "body": "Set up the `GameState` as a dump data store. \r\n\r\nThe core loop consists of: \r\n- simulation\r\n- input events\r\n- presentation (renderer, sound, gui)\r\n- network \r\n\r\nThey all work on the `GameState` (read/write). \r\n\r\nThe `GameState` may carry some information for the subsystem (e.g. Unit objects have some member struct from another subsystem or have a forward-declarated pointer etc), but all the subsystem methods should stay in the subsystems. \r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/ca2cbaea249ff2367a0b1bb8cac66903cb32393d", "message": "Merge pull request #909 from TheJJ/codegenfix\n\nbuildsystem: let automoc depend on codegen"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/871b6b253b462f1d4803fa3c5a161739196449ed", "message": "Merge pull request #895 from TheJJ/caseinsensitivefilesystems\n\nfslike: fix caseignoringdir-test for caseignoring filesystems"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7ddb170371354cb90757f2abbae26368a9883de5", "message": "Merge pull request #889 from TheJJ/asan-fixes\n\nrenderer: fix font glyph memory allocations"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/257843e4dbd647643a6b74c339ff0279f4d444df", "message": "Merge pull request #891 from TheJJ/ccache-convenience\n\nbuildsystem: add convenience options for using ccache"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/87f68683925c5d5f519c13cae82ec257b9ee9eb5", "message": "Merge pull request #883 from TheJJ/buildinstructions-gentoo\n\ndoc/building: add gentoo"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/dea5112dbd644e7e785699e015b4f7b44aaa5e8f", "message": "Merge pull request #882 from TheJJ/blog-in-readme\n\nreadme: add contact table at the top"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d94876028d28f80a1ee7e72846133e6d7fdc9965", "message": "Merge pull request #868 from heinezen/reverse-engineering\n\ndoc: Multiplayer chat messsaging in AoC"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2d161c741b6caf9abf993491309b3ac8416be4c6", "message": "Merge branch 'master' into reverse-engineering"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4b968370fbdd66cc6fce42cb02aa678a46973e01", "message": "exceptions: made cython more beautiful.\n\nhttp://docs.cython.org/en/latest/src/userguide/wrapping_CPlusPlus.html#static-member-method"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3135a13ce142dbb08e6d5f5db5b8b44ab0a6c516", "message": "Exceptions: break into debugger on throwing an exception"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/0c8355de1a47f7397f0086d8c8e04cd4b5031066", "message": "Merge pull request #806 from castilma/convert\n\nconvert: enhance filter options"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/20e6bc9c2765779fdb768d31de65fde6457deafa", "message": "Added Benchmarking to the runscripts"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ab5c6745b659a41b59e954052c838935c8c77aa7", "message": "Added prefix-matching to tests\n\nAlso made a few clobby for/if constructs into list comprehensions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b38288f9d3b69c193912fcfbf59abbae974da858", "message": "Buildsystem: blacklisting pytontex more flexible"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/744", "title": "Event logic", "body": "The tube demo runs a simple curses based pong, that shall\r\ndemonstrate the functionality where and why a prediction interface is\r\nbuilt.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zuntrax": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/743", "title": "perform pxdgen using jinja2 templates", "body": "We are using hardcoded textblobs for `.pxd` generation. That would be way nicer using a proper templating system. Depends on #662.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/704", "title": "purge manual font rendering", "body": "Right now, we are using fontconfig, freetype and harfbuzz for rendering fonts in some places, while Qt5 is used in the newer GUI code. We should get rid of the low-level libraries.\r\n\r\n* [ ] find code that uses our own font renderer (`libopenage/renderer/font`)\r\n* [ ] use Qt5 instead\r\n* [ ] remove the font renderer\r\n* [ ] update buildsystem and docs", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/696", "title": "kevin: build with libbacktrace", "body": "@TheJJ please install backtrace in kevin so the related code gets tested.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/ff63bb4e32b43bfd478b7c70e237c3dbea694495", "message": "Merge pull request #877 from heinezen/reverse-engineering\n\ndoc: Network protocol of AoC 1.0c"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cf99edee436fe0fd5f23a3a43effde11daf5cd1c", "message": "Merge pull request #828 from Birch-san/fix-mac-runtime\n\nundo final change of gui-gl-context pull request, to prevent SIGSEGV"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/dfd9d33a67df19f4948224f06d49588a4f1af87e", "message": "fix python loglvls"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/abbff255ce492f2c719add3ba695f922eff514bb", "message": "fix compiler invocations"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/31a41c070e4d1fa5b278a8c21a236130b6bee8ad", "message": "suppress warnings about use of GNU statement expression extensions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3eeb404dfb2487328068e6452eed8175f78bb985", "message": "build cython generated files without warnings"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4dab4e1ed9d61880f9678ad86dfe921dd8442890", "message": "fix mismatched-tags problems"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/bd25401b5caca1211244d539fc194b5441679923", "message": "get rid of ununsed private member warning"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c8a13c2a14edcdf2cd3c2ef4e1dcbe8418c65a5e", "message": "Merge pull request #800 from TheJJ/doxygen-update\n\ndoc: updated doxyfile with doxywizard"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4838d793edef9a5275566d257da9912d03a6f31f", "message": "fix missing braces warnings for subobject initialization"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61370817", "body": ":+1: seems to be ok.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61370817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61403634", "body": "If I recall right, we reproduced some of the blending bugs the original game has. Can you provide a screenshot of the same terrain pattern with blending turned off (space)? I'll try to reproduce it in my AoE2 installation.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61403634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409031", "body": "We should also consider the opposite case: Placing e.g. grass tiles in water or beach.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409645", "body": "You should also add ImageMagick  to the dependencies in building.md\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/9831943", "body": "We use valgrind to find memory leaks in our code. SDL causes a memory leak which clutters our output. This is a minimal example to reproduce that issue.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9831943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25839945", "body": "`idxmap = dict(enumerate(files))`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25839945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "mic-e": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/739", "title": "pxdgen sometimes runs multiple times when building on multiple cores", "body": "This has potentially dire consequences (maybe it hasn't, but are we sure it's just cosmetical?), and the cause must be identified and eliminated.\r\n\r\n    mic@mic ~/git/openage $ make -j4\r\n    [  0%] Automatic moc for target libopenage\r\n    [  1%] pxdgen: generating .pxd files from headers\r\n    [  1%] pxdgen: generating .pxd files from headers\r\n    Scanning dependencies of target libopenage\r\n    ...\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/263", "title": "Proposal: Split header files to avoid include dependency hell", "body": "Due to the nature of C++, for the purpose of compile-time reduction, it may be preferable to split some of our larger header files into three files. Take the following example files:\r\n\r\n`a.h`\r\n\r\n``` cpp\r\nvoid f();\r\n\r\n/**\r\n * docstring goes here\r\n */\r\nstruct A {\r\n    /**\r\n     * member function docstring goes here\r\n     */\r\n    template<int i>\r\n    int member_function(int arg) {\r\n        return arg + i;\r\n    }\r\n};\r\n```\r\n\r\n`b.h`\r\n\r\n``` cpp\r\n#include \"a.h\"\r\nstruct B {\r\n    A *member_struct;\r\n};\r\n```\r\n\r\n`c.h`\r\n\r\n``` cpp\r\n#include \"b.h\"\r\nstruct C {\r\n    B *member_struct;\r\n};\r\n```\r\n\r\nEvery file that includes `c.h` will automatically include `b.h`, with all its own dependencies, including `a.h`. It will even need to parse the implementation of `a::member_function`. As a result, in practice everything that includes `engine.h` in openage automatically includes the huge majority of all openage header files.\r\n\r\nHowever, `c.h` does not actually _need_ to know about the contents of `struct B`, it just needs to know that `B` _is_ a `struct`, so I suggest splitting the headers into:\r\n\r\n`a_decl.h`\r\n\r\n``` cpp\r\nvoid f();\r\n\r\n/**\r\n * docstring goes here\r\n */\r\nstruct A;\r\n```\r\n\r\n`a.h`\r\n\r\n``` cpp\r\n#include \"a_decl.h\"\r\n\r\nstruct A {\r\n    /**\r\n     * member function docstring goes here\r\n     */\r\n    template<int i>\r\n    int member_function(int arg) {\r\n        return arg + i;\r\n    }\r\n};\r\n```\r\n\r\n`b_decl.h`\r\n\r\n``` cpp\r\nstruct B;\r\n```\r\n\r\n`b.h`\r\n\r\n``` cpp\r\n#include \"b_decl.h\"\r\n\r\n#include \"a_decl.h\"\r\nstruct B {\r\n    A *member_struct;\r\n};\r\n```\r\n\r\n`c_decl.h`\r\n\r\n``` cpp\r\nstruct C;\r\n```\r\n\r\n`c.h`\r\n\r\n``` cpp\r\n#include \"c_decl.h\"\r\n\r\n#include \"b_decl.h\"\r\nstruct C {\r\n    B *member_struct;\r\n};\r\n```\r\n\r\nAs an added bonus, this also prevents any unnecessary circular header dependencies.\r\n\r\nTo avoid unneeded parsing of template implementations, in addition `a.h` may be split into\r\n\r\n`a.h`\r\n\r\n``` cpp\r\n#include \"a_decl.h\"\r\n\r\nstruct A {\r\n    template<int i>\r\n    int member_function(int arg);\r\n};\r\n```\r\n\r\n`a_impl.h`\r\n\r\n``` cpp\r\n#include \"a.h\"\r\n\r\ntemplate<int i>\r\nint A::member_function(int arg) {\r\n    return arg + i;\r\n}\r\n```\r\n\r\nI do not recommend making this policy mandatory, just to use it for headers where significant compile time reductions are to be expected.\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/160", "title": "Font system: allow rendering centered and right alignments", "body": "Currently only left-aligned rendering is possible...\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6177156-font-system-allow-rendering-centered-and-right-alignments?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/87", "title": "Terrain editing: Automatically place beach when placing water", "body": "Neighbouring non-water tiles should be replaced by beach tiles when placing water tiles.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5713877-terrain-editing-automatically-place-beach-when-placing-water?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/87/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/f624779b82b4c8141286f507f13d42a73dfb29b8", "message": "Merge pull request #951 from TheJJ/readme-updates\n\nReadme updates"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/662", "title": "[WIP] Re-write of the coordinate system", "body": "The coordinate system code is arguably one of the most stinky and oldest parts of the C++ codebase and desperately requires a re-write - manual, header-assisted code generation - could you imagine I once thought that was a good idea?\r\n\r\nFurthermore it adds new coordinate base classes.\r\n\r\n- [x] Add new fixed-point number type, adapted from #322, thanks to @detrumi\r\n- [x] Add tests for the fixed-point number type\r\n- [x] Add new coordinate system base classes: Coordinate(XY(Z)?|NeSe(Up)?)(Absolute|Relative)\r\n- [ ] Move the coordinate conversion functions from the existing classes to the Engine (or a subsystem thereof)\r\n- [ ] Re-write the existing classes (CamGame, ...) to be based on the Coordinate classes, using the fixed-point number type\r\n- [x] Update build instructions for new dependencies (jinja2)\r\n\r\ncloses #56", "author_association": "OWNER"}], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560522", "body": "Hm... from various other `C` projects I've looked at/worked on, I was under the impression that this is how header guards are done, but you're of course right in that we should follow the standard. Standards are a great thing. I suggest we change the guards to `CALLBACKS_H` and `ENGINE_TERRAIN_H` as suggested in your link.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561848", "body": "We've been considerating that... there are benefits, especially that classical guards are very prone to accidential name clashes or typos.\nIt's obviously useful, so I researched why it wasn't put into the standard. The answer seems to be that header files might be copy/pasted or reached over multiple paths through symlinks, confusing the compiler as to whether to include them with `#pragma once`.\nI'm rather undecided right now... obviously the C++ standards commitee knows what they're doing*, so if they decide against `#pragma once`, maybe we should just accept that. Ideally, there would be something like `#pragma once ENGINE_TERRAIN_H`.\n\n*disclaimer: actually they don't\n\nP.S.: [obligatory stackoverflow link](http://stackoverflow.com/a/23699893/1347646)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562376", "body": "If `cmake 3.0` is available in all distros that also have the other dependencies (such as recent versions of `gcc` and/or `g++`, `libopusfile`, ...), there's no reason not to just bump the required cmake version to that version instead of applying hacks. Any feedback on that (I guess Debian stable is out anyway, but what about the various versions of Ubuntu, Fedora, ...)?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562662", "body": "`set(Python_ADDITIONAL_VERSIONS 3.4)` it is, then. Though I believe it belongs into `python.cmake` rather than the `cpp.cmake` :P\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60567951", "body": "Sounds like something straight for one of our \"idea\" files (gameplay? interface?). The current design for networking includes a dedicated server (optionally run when clicking the 'Host' button), so both the client and server could provide such an interface. Hacking around in attempts to parse recorded game files/network streams is unnecessary though, since you can build your interface, and even the web server (or maybe an OpenGL rendering window?) directly into the game.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60567951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590322", "body": "[This issue](https://github.com/Homebrew/homebrew/issues/25118) seems to be related.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60626655", "body": "- I agree with TheJJ. Please remove all the `#endif` comments in the last lines of the header files.\n- I guess the UUIDs are a necessary evil... how did you generate them?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60626655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60743469", "body": "As a workaround, you can manually define `PYTHON_LIBRARIES` and `PYTHON_INCLUDEDIRS`. Have a look at [the OSX discussion](https://github.com/SFTtech/openage/issues/16), see svkurowski's comment. However that's hardly a solution. What does [this minimal example](https://gist.github.com/mic-e/01151d6fc08467d58577) output?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60743469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60744048", "body": "@TheJJ: indeed.\n\nFor the record (and for further reference), the issue is that `cmake` selects a `PYTHON_INTERPRETER` that doesn't have accompaning header files installed. Later, `setup.py` is called by that interpreter, and fails because it can't find the header files.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60744048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60744451", "body": "-1 to UUIDs as well, because\n- personally, I think they're ugly\n- people might generate them differently, leading to inconsistencies\n- it's hard to generate them in a deterministic, stable manner for codegen files (salted md5sum of filename?)\n\nI suggest\n- appending `_HEADER_GUARD` for regular headers, and `_GENERATED_HEADER_GUARD` for codegen headers.\n- always using the full filename, e.g. `CONSOLE_DRAW_HEADER_GUARD`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60744451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60745481", "body": "Looking good, but\n- [there](https://github.com/SFTtech/openage/pull/35/files#diff-d47eb01f2f5fb68fde724a1ba6cd27d5R69) is a typo\n- please put the ugly cross-platform preprocessor stuff in a new header in `cpp/crossplatform/pty.h`, similar to `cpp/crossplatform/opengl.h`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60745481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60756235", "body": "@daveheitzman please try the minimal example... the workaround doesn't use env, but passes the defines as command-line arguments (`./configure --raw-cmake-args -DPYTHON_INCLUDE_DIR=/whereever`)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60756235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60757056", "body": "`mingw32-fontconfig` is the wrong library; fontconfig is a core part of each linux distro, it should be installed already (I think?). There should be a file `/usr/lib/libfontconfig.so.whatever`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60757056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60758306", "body": "Thanks for the Fedora packet list btw, that's indeed something for the how-to-build doc\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60758306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60763201", "body": "To clarify, is this an issue with homebrew, cmake, or both? Not a legal expert, but I don't think including BSD-licensed code poses a problem in any way. I'm more worried about breaking functionality on other platforms.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60763201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60764349", "body": "Hm... doesn't sound like a fix will be coming soon, then... I vote to include the qgis module.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60764349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60769184", "body": "Do you have the file (symlink) `/usr/lib/libfontconfig.so`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60769184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60786777", "body": "You need to convert the game assets first; you need a copy of the original age of empires for that. See [building.md](https://github.com/SFTtech/openage/blob/master/building.md#for-developersusers-who-want-to-try-the-project)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60786777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60787833", "body": "`cmake` support says that the `/usr/lib/libfontconfig.so` symlink is usually part of the development package (`fontconfig-devel`). Can you confirm?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60787833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60828837", "body": "Seems like installing `fontconfig-devel` fixes the issue after all; closing as fixed.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60828837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60854285", "body": "Fixed by pull request #18\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60854285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60855252", "body": "Unfortunately, if you take a look at the [travis log](https://travis-ci.org/SFTtech/openage/jobs/39320204#L1208), it adds those warnings when compiling on Linux. I've encountered this sort of issue before; see if you find a solution that works on all platforms and compilers.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60855252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60855947", "body": "fak u jj\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60855947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60858343", "body": "@o11c Don't worry, I have a pretty sophisticated design (I just was too lazy to actually implement it up until now).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60858343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60895847", "body": "We have actually been relying heavily on your/Tapsa's work for .dat file reading. I also remember using pcrio (and the official PE documentation) as a reference when implementing the DLL reader.\n\nWe probably should add some sort of credits section to the readme file in an attempt to properly show our gratitude.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60895847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60896926", "body": "Seems like you broke the Travis build in a very strange way... without even editing `.travis.yml`... wat? On second note, probably travis broke itself. Would be nice if there was a \"retry\" button.\n\nEdit: Local tests on Arch Linux resulted in a successful, warning-free build.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60896926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60898378", "body": "Doesn't SDL2 internally use OpenGL?\n\nAnyways, the renderer currently does non-trivial stuff with shaders, such as coloring buildings/units with their team colors. Rendering unit outlines (for units that are hidden behind a building) would be an other thing.\n\nI don't see an obvious way of doing this with the basic SDL2 renderer, but I haven't really looked into it either. I guess the team colors could be replaced in software, at the price of having 8 versions of each unit in memory.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60898378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60900641", "body": "Related issue: #50\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60900641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60901823", "body": "Try updating your repo and running `./configure` again. I've fixed that issue earlier (I hope).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60901823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60921804", "body": "Note: All sorts of linux distros (mostly ubuntu) seem to have issues with the current way of finding Python as well.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60921804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60928208", "body": "IIRC software rendering can always by triggered by setting an environment variable `LIBGL_ALWAYS_SOFTWARE=1`. No support in openage is required for that.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60928208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61140177", "body": "Looking good overall. However, there are a few issues:\n- please don't use `:` in output filenames. This works on Linux, and will probably work (though look strange) on OSX, but fail on Windows.\n- please enter your name/email in the authors list in `copying.md`\n- `util` is the wrong folder/namespace for this; this is my fault for not writing any documentation on what the `util` namespace was designed for. For now, I think it would be best to simply put the file in the root directory/namespace.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61140177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61163341", "body": "Looking fine to me\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61163341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61163475", "body": "Looking fine to me :+1: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61163475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61185101", "body": "A deterministic random number generator that is synced across all multiplayer clients is absolutely essential, of course. De-syncs were the main issue during age2's development. Map seeds and game session seeds would be an essential step.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61185101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61185307", "body": "`<vortigaunt voice>` agreed. the free man must hurry. `</vortigaunt voice>`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61185307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61195623", "body": "No need to be ashamed about stealing code that's in the same file (except when it would lead to code duplication, which it doesn't). To be compatible with Minecraft's interface, I suggest using F3 instead, and using that to toggle FPS as well.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61195623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61196721", "body": "Also, minor code issue: the correct place for the `Engine::drawing_version` default value would be [here](https://github.com/oldlaptop/openage/blob/draw_version/cpp/engine.cpp#L62), to keep in line with the current code (which I don't like; I'd actually prefer the default value to be in the header. Gonna have to change that some time). Oh, and please put your name in the authors list in `copying.md`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61196721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61209394", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61209394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61215563", "body": "Can anybody else reproduce this issue?\n\nWhen you encounter it again, please check the stack trace in gdb. This is a very basic method that allows you to get an idea of where the offending code/infinite loop might be (example from my working game):\n\n```\nmic@mic-nb ~ $ ps aux | grep openage\nmic      12544 37.4  1.0 580244 43448 pts/0    Sl+  05:15   1:02 ./openage --data=assets\nmic      13433  0.0  0.0  12888  2324 pts/2    S+   05:18   0:00 grep openage\nmic@mic-nb ~ $ sudo gdb -p 12544\nGNU gdb (GDB) 7.8\n\n    (removed clutter)\n\nAttaching to process 12544\n\n    (removed clutter)\n\n[New LWP 12587]\n[New LWP 12546]\n[Thread debugging using libthread_db enabled]\n\n    (removed clutter)\n\n(gdb) where\n#0  0x00007fc6785cd972 in ?? () from /usr/lib/xorg/modules/dri/i965_dri.so\n#1  0x00007fc6785af08e in ?? () from /usr/lib/xorg/modules/dri/i965_dri.so\n#2  0x00007fc678569ba0 in ?? () from /usr/lib/xorg/modules/dri/i965_dri.so\n#3  0x00007fc6783c0dae in ?? () from /usr/lib/xorg/modules/dri/i965_dri.so\n#4  0x00000000004324ec in openage::Texture::draw(int, int, bool, int, unsigned int, openage::Texture*, int) ()\n#5  0x0000000000432812 in openage::Texture::draw(openage::coord::tile, int, openage::Texture*, int) ()\n#6  0x0000000000430edf in openage::Terrain::draw(openage::Engine*) ()\n#7  0x00000000004228d5 in openage::GameMain::on_draw() ()\n#8  0x000000000042c939 in openage::Engine::loop() ()\n#9  0x000000000042c9dc in openage::Engine::run() ()\n#10 0x0000000000425714 in openage::run_game(openage::Arguments*) ()\n#11 0x0000000000421d0e in main ()\n(gdb) continue\nContinuing.\n^C\nProgram received signal SIGINT, Interrupt.\n0x00007fc6866e1300 in glBindTextureEXT () from /usr/lib/libGL.so.1\n(gdb) where\n#0  0x00007fc6866e1300 in glBindTextureEXT () from /usr/lib/libGL.so.1\n#1  0x00000000004322ba in openage::Texture::draw(int, int, bool, int, unsigned int, openage::Texture*, int) ()\n#2  0x0000000000432812 in openage::Texture::draw(openage::coord::tile, int, openage::Texture*, int) ()\n#3  0x0000000000430edf in openage::Terrain::draw(openage::Engine*) ()\n#4  0x00000000004228d5 in openage::GameMain::on_draw() ()\n#5  0x000000000042c939 in openage::Engine::loop() ()\n#6  0x000000000042c9dc in openage::Engine::run() ()\n#7  0x0000000000425714 in openage::run_game(openage::Arguments*) ()\n#8  0x0000000000421d0e in main ()\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61215563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61220043", "body": ":+1: looking fine now.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61220043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61368422", "body": "Yeah, the screenshot.h headers are missing because\n- they were added by the merge\n- I currently _want_ the thing to display the warnings for testing purposes (the pull request isn't finished yet)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61368422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61377494", "body": "I'm developing on Arch Linux; it shouldn't be a problem... you just need to install all the required dependencies. Once you succeed, please report the list of all packages you installed so it can be added to the building.md file.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61377494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61380368", "body": "so be it, then.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61380368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387176", "body": "nice. however you also replaced \"make\" in the comments and echo messages.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405619", "body": "Please just follow the instructions from `building.md`, as pointed out in your other issue report.\n\nOf course, this should be automated. Related issues are #85 and #86. A fix is #110.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405653", "body": "Could you please post a list of all packages you did install?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405725", "body": "Question is: Do we want to blend\n- exactly like AoC\n- equally well as AoC\n- better than AoC?\n\nI think ATM we're blending \"equally well\". Just try it out in AoC's scenario editor; the blending is incredibly easy to break.\n\nThe actual issue here is that beach isn't automatically placed when placing water.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405823", "body": "Related bug: #87 \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405931", "body": "@hwmrocker: right... I think ISO browsing is pretty low priority; we shouldn't spend time to implement an ISOFS reader, nor should we make an ISOFS library a dependency. But if the user happens to have an ISO-browsing Python library installed, why not use it.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409047", "body": "Good catch. Whenever a tile is edited, the surrounding tiles should be checked for water-land borders, and replaced by beach if one is found. Harder mode: Beach sometimes needs to be auto-removed.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409246", "body": "Looking forward to the nightlies. Also I love gaben.\n\nHowever, the dist folder shouldn't be inside `assets`. Instead, create a folder `dist/`, with a subfolder `opensuse` (obviously gaben isn't distribution-specific and should be directly in `dist/`.\n\nClarification: the assets folder is for all files that are used by openage at run-time, and is installed to `/usr/share/openage`.\n\nAvoiding binaries in the git history is indeed a goal.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61409246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61410902", "body": "oops, sorry.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61410902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416855", "body": "Are the GUI elements supposed to be rendered by the OpenGL context as well? Because I think that would make some sort of sense...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61416855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420291", "body": "Any reason you didn't append those libs to the existing line?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420301", "body": "/me was faster than TheJJ\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420568", "body": "BTW you don't have to re-create the pull request. You can just force-push your amended commit into the branch. Looks a lot cleaner on the issue tracker.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420723", "body": "If you just do `edit file; git add file; git commit --amend; git push --force`, there won't be any extra clutter.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420940", "body": "You could also do `edit file; git add file; git commit; git rebase github/master --interactive; git push --force`\n\nThe interactive rebase lets you squash commits.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61427132", "body": "Looks pretty nice overall.\n- Units should not be able to move between two diagonally touching water tiles (I just tested that in the age2 editor)\n- It should be pretty straightforward to pull the unit's actual speed from the gamedata struct, and use that. At least for me, the unit is moving extremely fast.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61427132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61427268", "body": "We _do_ have PIL as a depend, right? Maybe some 5-line python script could duplicate the imagemagick functionality?\n\n```\nimport PIL.Image\nfile=PIL.Image.open('/home/mic/git/openage/assets/gaben.png')\nfile.resize((24, 24), PIL.Image.ANTIALIAS).save('/tmp/tinygaben.png')\n```\n\nSorry, 3 lines, actually.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61427268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430583", "body": "I'm currently attempting to build deb packages in an Ubuntu 12.04 virtual machine... travis is ancient.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/8469156", "body": "I didn't even know that github allows you to comment on any commits...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8469156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/10716745", "body": "orly?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10716745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/10717031", "body": "All my life I've lived with a lie... this changes everything.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10717031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650349", "body": "this isn't delete[]'d (memory leak... we should really migrate to `c++ std::string` already...)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650417", "body": "style issue: should be\n\n```\nscreenshotmanager()\n        :\n        count(0) {}\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650448", "body": "this shouldn't be there anymore\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650481", "body": "whitespace issue\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19650481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19700778", "body": "nope, it was called \"library\" up until v2.1... I guess they renamed it to \"lesser\" with v3 for propaganda reasons.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19700778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19739806", "body": "this only runs `if omode == 'max'`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19739806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19885433", "body": "I suggest writing `$HOME` instead of `/home/user`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19885433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971687", "body": "We don't do that; it's horrible.\n\n```\nwrite if() {\n        return true;\n}\n```\n\ninstead.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971863", "body": "example:\n\n```\nif (test) a(); b();\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971948", "body": "this should be in the engine class (analogous to the draw_debug_view bool)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972109", "body": "I'm thinking about Minecraft again: `F1` completely toggles all HUD, and `F3` completely toggles the debug view... overlay... thing.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972731", "body": "You misunderstood me; sorry. Actually I just wanted you to just put braces around the return:\n\n```\nif (!editor_drawing_hud) {\n        return;\n}\n```\n\n(avoiding those unnecessary indentation levels is ofc a good thing)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19982698", "body": "why remove the `/**`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19982698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20039323", "body": "The old doc contained a hint about the copyright size being 40 bytes _only_ for the specific case of Age of Empires II. You removed that without any replacement.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20039323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20039389", "body": "We don't have any \"preferred\" markdown headline style, I think. However if you use the `#` style, please write a space after the `#`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20039389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20039505", "body": "There are a few words missing in that last sentence.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20039505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20051928", "body": "Actually it should be `./assets/converted` as of right now\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20051928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20042556", "body": "oh my god, we had commented-out code in our github master? *shivers*\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20042556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20042825", "body": "Is component-wise addition necessary here? I can't quite remember, but if I did my coord stuff right, `drawpos_tile += this->size / 2` should work as well. Same for `this->end_pos`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20042825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20043011", "body": "Regarding the rounding issue for even-sized objects that @thejj has mentioned:\n\nWhat about a simple `drawpos = (this->startpos.to_phys2() + this->size.to_phys2() / 2).to_phys3()`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20043011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20017759", "body": "we have a terrain_halfsize, which isn't even constant, but waiting to be dynamically filled from `convert`. It's {48, 24}.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20017759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20041649", "body": "I _think_ somewhere in our style guide it says to always put code blocks in the next line, even if it's just one statement, i.e.\n\n```\nif (condition) {\n        statement()\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20041649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20041860", "body": "Please add a comment why this is necessary (and what you're doing here). While it's obvious to you right now, other people will have to think about it for a minute; this makes the code harder to read.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20041860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20041987", "body": "`t`?\nWhile I certainly _do_ print the entire codebase of openage on paper after every single commit, I think I can afford the extra ink for a variable name that is a bit more descriptive.\n\none-letter names should be reserved for loop counters and other places where they're really obvious (such as `e` for the engine). The same thing applies to `w2`, `k`, etc.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20041987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055243", "body": "newline missing\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055350", "body": "that common variable would be `Engine::tile_size`. Seriously, `tile_halfsize`? What retard had that idea? *looks at git blame* uhm nvm\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20059952", "body": "one finaly style thing: [this](https://bpaste.net/show/adafbc8d4cac) is the preferred style for `glBegin` blocks (should add that somewhere to the codestyle doc).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20059952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20061839", "body": "You don't sound all too convinced :)\n\nHad you not used two indentations for some reason, I wouldn't even have noticed.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20061839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197506", "body": "shouldn't you multiply that value with 8, and divide by 2 instead of subtracting?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197942", "body": "it does? huh...\n/me goes back to math class\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198911", "body": "it's right IMO\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20202262", "body": "I spy with my Nazi eye... one extra tab!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20202262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20202282", "body": "I'm really unhappy about this define cluttering up the build just to fix such a corner case issue :(\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20202282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203240", "body": "Line 63; you're aligning with a tab plus 4 spaces, instead of 12 spaces.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203252", "body": "I think it's due to the fact that it has an ancient standard library version.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403411", "body": "yeah...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20403411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20410044", "body": "this should be pass-by-reference: `const std::vector<gamedata::empiresdat> &gamedata`\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20410044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20341179", "body": "excellent question\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20341179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20409859", "body": "unspeakable horrors lie within this code block; fortunately for you, you're not responsible for any of them. This code was in dire need of a re-write long before you touched it :)\n- yoda style for `>=` comparisons is not clever or useful, it's just deliberate obfuscation\n- use `std::unique_ptr<char[]>` instead of manually calling `delete[]`\n\nthose nested `if` branches give me internal bleedings just from looking at them... how about you put that code block into its own `std::string get_snd_fname(int id)` function that uses a for-each loop similar to this pseudocode:\n\n```\n    for(auto &sounddir : {\"sounds.drs\", \"sounds_x1.drs\"}) {\n        std::unique_ptr<char[]> snd_fname.reset(util::format(\"Data/%s/%d.opus\", sounddir, item.resource_id))\n        if(stuff) {\n            return asset_dir.join(snd_fname);\n        }\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20409859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20703282", "body": "I'd prefer if this simply returned a `std::string` instead of a complicated `unique_ptr` type. Also, why the `auto` stuff? Seems to be overcomplicating stuff.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20703282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21347019", "body": "gotta love C pointer semantics\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21347019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21348117", "body": "This is a backport of `C++14`'s `make_unique`: http://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21348117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21348239", "body": "Though you should probably imlement the other (array) variation of `make_unique`, too.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21348239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21409998", "body": "On 05/12/14 23:42, Jonas Jelten wrote:\n\n> > @@ -0,0 +1,20 @@\n> > +// Copyright 2014-2014 the openage authors. See copying.md for legal info.\n> > +\n> > +#ifndef OPENAGE_UTIL_UNIQUE_H_\n> > +#define OPENAGE_UTIL_UNIQUE_H_\n> > +\n> > +#include <memory>\n> > +#include <utility>\n> > +\n> > +namespace openage{\n> > +namespace util{\n> > +\n> > +template<class T, class... Args>\n> > +std::unique_ptr<T> make_unique(Args&&... args){\n> \n> I have no problem with switching to c++14 as soon as gcc and clang support it^^\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SFTtech/openage/pull/175/files#r21405942\n> \n> gcc 4.9 and clang 3.4 support std::unique_ptr with -std=c++14\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21409998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21415769", "body": "as of now our C++ code style has no hard line width limitation, so this line break was unnecessary.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21415769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21520939", "body": "if neither chebychev nor euclidian are true, this function doesn't return anything\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21520939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21520949", "body": "you forgot the return statement\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21520949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21520957", "body": "you forgot the return statement\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21520957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21521856", "body": "this conflicts with our coding style guide; you're required to put braces around the conditional statement.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21521856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21523208", "body": "You might want to build your code before committing it. this is missing a `;`.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21523208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613011", "body": "this is missing a space at the end (probably in other places, too)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613095", "body": "spaaaace\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613284", "body": "put the space after the ',', not in the next line\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613309", "body": "...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613481", "body": "heh, pylint is gonna complain about this... \"too many attributes (10/8)\"\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21613481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21799543", "body": "indentation\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21799543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21799825", "body": "WRONG\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21799825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21799938", "body": "undo pls, this pep8 rule is retarded (in this case)...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21799938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20264480", "body": "a valid question.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20264480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20575900", "body": "evil whitespaces; is save a member of this? it should be better-qualified IMO\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20575900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "goto-bus-stop": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/720", "title": "convert: Support HD Edition terrain textures", "body": "HD Edition has different terrain textures than 1.0c. They're now pngs that are transformed during render to fit the terrain:\r\n\r\n![g_uwtr_00_color](https://cloud.githubusercontent.com/assets/1006268/22264723/45c0011e-e279-11e6-9ed5-30f00391cc87.png)\r\n\r\nTextures are found in `<Age2Dir>/resources/_common/terrain/textures`.\r\n\r\nOlder HD Edition versions also still shipped with 1.0c's terrain SLP files, but they were removed as of patch 4.8. Currently, users have to downgrade to patch 4.3 before running the conversion.\r\n\r\nI suppose to convert these new textures, they need to be cut up and transformed to generate the same output as the SLP conversion.\r\n\r\nInteresting data:\r\n\r\n - The texture names seem to be derived from the `name1` attribute on Terrains. eg. the `g_wtr` texture name is `g_wtr_00_color.png`.\r\n - The SLP id of the obsolete textures is still present on Terrain data from HD 4.8. So that could be used to map the texture name to an appropriate output file.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/454", "title": "Converted HD Language files lang codes are wrong", "body": "When reading HD Edition language files in [`openage/convert/hdlanguagefile.py`](https://github.com/SFTtech/openage/blob/master/openage/convert/hdlanguagefile.py#L11), the `langcode` value is passed in as a byte string (e.g. `b'en'`, `b'fr'`) [from here](https://github.com/SFTtech/openage/blob/master/openage/convert/driver.py#L47). The lang code is then passed through [this langcode map](https://github.com/SFTtech/openage/blob/master/openage/convert/hardcoded/langcodes_hd.py) to convert to a longer language code that's compatible with the output of an AoC 1.0c language file conversion.\r\n\r\nHowever, the langcode_hd map uses \"normal\" strings and not byte strings, so trying to access the `b'en'` property fails. And we end up with `\"b'en'\"` in the language field in the generated language files.\r\n\r\nInstead, langcodes should be converted to \"normal\" strings beforehand, so they can be used to access the `LANGCODE_HD_MAP`.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/cdd3bf61adc84239a59925a823411edcbc13e1b8", "message": "convert: Update drs file extension handling\n\nFiles that were previously extracted as `.bin` files are now extracted\nas `.bina` files. This means those files are now treated the same way\nfor all game versions."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4d79844c8fd4bdaf09b06997d227c56550c96c4c", "message": "doc: Update DRS file format.\n\nInternally, Age of Empires does something like this when reading files\nfrom a DRS archive:\n\n```c\nread_drs_file('bina', 50500);\n```\n\nNote how it uses a C char with multiple bytes. This is written out as a\nlittle-endian integer, so the 'a' byte ends up at the lowest address,\nand the 'b' byte ends up at the highest address."}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/798cb983cd78998d80d811d6ec141eef1a8de40d", "message": "doc: Update required Cython version in Build docs."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60666285", "body": "sorry for the fuckups, lol\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60666285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60728273", "body": "implemented as of 91cbcf3 and db5e0e0\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60728273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60759234", "body": "Try adding version 3.4 to line 41 of `/usr/share/cmake-2.8/FindPythonLibs.cmake`, if it isn't there. iirc that's what made things work for me.\n\nOriginal:\n\n``` cmake\nset(_PYTHON3_VERSIONS 3.3 3.2 3.1 3.0)\n```\n\nNew:\n\n``` cmake\nset(_PYTHON3_VERSIONS 3.4 3.3 3.2 3.1 3.0)\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60759234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60836274", "body": "Oh, that's strange. I guess you may have a gamedata.drs file in your HD install Data/, which isn't there on mine. Could you add a screenshot of your Data/ directory, and maybe upload the gamedata.drs somewhere?\n\ne; an easier / less error prone way might be to just `try: xx except` that whole DRS instance line instead of checking if the file exists.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60836274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61400714", "body": "This just means that openage can't find your assets. Have you run `make media`? If you have, try running `make run`, it should pass the correct assets path to the binary.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61400714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61404849", "body": "In AoC, water is always surrounded by a tile of Beach, its blending rules for water+<not-beach> are sub-optimal at best :smile:\n\ne; original AoC shallow water + grass: https://i.imgur.com/9lcOGZJ.png\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61404849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "Haroldoa": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/719", "title": "Docks can be built far from water", "body": "The dock building can be built by a villager on the ground, not near any water.\r\n\r\n![dockground](https://cloud.githubusercontent.com/assets/23324718/22265398/c3d9eb30-e230-11e6-8f2b-14d33b47ba45.png)\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/682", "title": "Invalid negative subtexture requested", "body": "I'm having trouble building this on my linux dual boot. I am not an experienced linux user.\r\n\r\nI did the [dependency installation for ubuntu](https://github.com/SFTtech/openage/blob/master/doc/build_instructions/ubuntu_15.04.md)\r\nEverything went fine.\r\n\r\nI forked and then cloned the repo to `/home/USERNAME/openage`\r\n\r\nI tried both of these in terminal in the openage directory \r\n\"For *nix: `./configure --compiler=clang` will prepare building\r\n\r\nYou could also use `./configure --mode=release --compiler=gcc` here\"\r\n\r\nFor clang I got this:\r\n```\r\n _________________________________________\r\n/ ./configure is a convenience script: it \\\r\n| creates the build directory, symlinks   |\r\n| it, and invokes cmake for an            |\r\n| out-of-source build.                    |\r\n|                                         |\r\n| Nobody is stopping you from skipping    |\r\n| ./configure and our Makefile, and using |\r\n| CMake directly (e.g. when packaging, or |\r\n| using an IDE). For your convenience,    |\r\n| ./configure even prints the direct      |\r\n\\ CMake invocation!                       /\r\n -----------------------------------------\r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n\r\n         build_type | Debug\r\n       cxx_compiler | clang++\r\n          cxx_flags | \r\n   exe_linker_flags | \r\n     install_prefix | /usr/local\r\nmodule_linker_flags | \r\nshared_linker_flags | \r\n\r\nconfig options:\r\n\r\n          backtrace | if_available\r\ngperftools-profiler | if_available\r\ngperftools-tcmalloc | False\r\n            inotify | if_available\r\n\r\nbindir:\r\n/home/harold/openage/.bin/clang++-debug-Oauto-sanitize-none/\r\n\r\ninvocation:\r\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS='' -DCMAKE_EXE_LINKER_FLAGS='' -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_MODULE_LINKER_FLAGS='' -DCMAKE_SHARED_LINKER_FLAGS='' -DCXX_OPTIMIZATION_LEVEL=auto -DCXX_SANITIZE_FATAL=False -DCXX_SANITIZE_MODE=none -DWANT_BACKTRACE=if_available -DWANT_GPERFTOOLS_PROFILER=if_available -DWANT_GPERFTOOLS_TCMALLOC=False -DWANT_INOTIFY=if_available -- /home/harold/openage\r\n\r\n(running cmake...)\r\n\r\n ___  ______ _______ _______ ___\r\n|  _)/ _____|_______|_______|_  |\r\n| | ( (____  _____      _     | |    ___  ____  _____ ____  _____  ____ _____\r\n| |  \\____ \\|  ___)    | |    | |   / _ \\|  _ \\| ___ |  _ \\(____ |/ _  | ___ |\r\n| |_ _____) ) |        | |   _| |  | |_| | |_| | ____| | | / ___ ( (_| | ____|\r\n|___|______/|_|        |_|  (___|   \\___/|  __/|_____)_| |_\\_____|\\___ |_____)\r\n                                         |_|                     (_____|\r\n\r\nWelcome to the SFT technologies computer-aided openage build system!\r\n\r\nYou have chosen, or been chosen, to attempt the daring task of building openage.\r\nIf you have installed all the dependencies that are conveniently listed in\r\n[doc/building.md], this _might_ just work!\r\n\r\nIf it doesn't, consider reporting the issue/asking for help in #sfttech on freenode.net.\r\n\r\nTesting /usr/bin/python3\r\nTesting /usr/bin/python2.7\r\nTesting /usr/bin/python3.5dm\r\nTesting /usr/bin/python3.5m\r\nTesting /usr/bin/python3.5\r\n-- Looking for suitable Python >=3.4 - Success: /usr/bin/python3\r\n-- Checking python3 module PIL.Image - Success\r\n-- Checking python3 module PIL.ImageDraw - Success\r\n-- Checking python3 module numpy - Success\r\n-- Checking python3 module pygments - Success\r\n-- Checking utility program opusenc - Success\r\n\r\ncpp library\r\n\tlibopenage                                          [213 sources] [15 generated]\r\n-- Could NOT find GCCBacktrace (missing:  GCCBacktrace_LIBRARY GCCBacktrace_INCLUDE_DIR) \r\nunavailable: backtrace\r\n-- Could NOT find Gperftools (missing:  GPERFTOOLS_LIBRARIES GPERFTOOLS_INCLUDE_DIR) \r\nunavailable: gperftools-profiler\r\n\r\ncython module\r\n\trun                                                 [embedded interpreter] [noinstall]\r\n\topenage.cabextract.lzxd\r\n\topenage.cabextract.cabchecksum                      [standalone]\r\n\topenage.convert.slp\r\n\topenage.cppinterface.exctranslate\r\n\topenage.cppinterface.exctranslate_tests\r\n\topenage.cppinterface.pyobject\r\n\topenage.cppinterface.setup_checker\r\n\topenage.cvar.cvar\r\n\topenage.game.main_cpp\r\n\topenage.log.log_cpp\r\n\topenage.util.fslike.cpp\r\n\topenage.testing.cpp_testing\r\n\topenage.testing.misc_cpp\r\n\r\nenabled options:\r\n\tinotify\r\n\r\ndisabled options:\r\n\tbacktrace\r\n\tgperftools-profiler\r\n\tgperftools-tcmalloc\r\n\r\nopenage v0.3.0-547-g6592436\r\n\r\n         compiler | Clang 3.8.0\r\n       build type | Debug\r\n         cxxflags |  -Wall -Wextra -pedantic -Wno-mismatched-tags -std=c++14\r\n build type flags | -g -O1\r\n        build dir | /home/harold/openage/.bin/clang++-debug-Oauto-sanitize-none\r\n   install prefix | /usr/local\r\npy install prefix | /usr/local/lib/python3.5/dist-packages\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/harold/openage/.bin/clang++-debug-Oauto-sanitize-none\r\n```\r\n\r\n**Notice GCC Backtrace and Gperftools are missing**\r\n\r\n**For GCC:**\r\n\r\n```\r\n/ ./configure is a convenience script: it \\\r\n| creates the build directory, symlinks   |\r\n| it, and invokes cmake for an            |\r\n| out-of-source build.                    |\r\n|                                         |\r\n| Nobody is stopping you from skipping    |\r\n| ./configure and our Makefile, and using |\r\n| CMake directly (e.g. when packaging, or |\r\n| using an IDE). For your convenience,    |\r\n| ./configure even prints the direct      |\r\n\\ CMake invocation!                       /\r\n -----------------------------------------\r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n\r\n         build_type | Release\r\n       cxx_compiler | g++\r\n          cxx_flags | \r\n   exe_linker_flags | \r\n     install_prefix | /usr/local\r\nmodule_linker_flags | \r\nshared_linker_flags | \r\n\r\nconfig options:\r\n\r\n          backtrace | if_available\r\ngperftools-profiler | if_available\r\ngperftools-tcmalloc | False\r\n            inotify | if_available\r\n\r\nbindir:\r\n/home/harold/openage/.bin/g++-release-Oauto-sanitize-none/\r\n\r\ninvocation:\r\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS='' -DCMAKE_EXE_LINKER_FLAGS='' -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_MODULE_LINKER_FLAGS='' -DCMAKE_SHARED_LINKER_FLAGS='' -DCXX_OPTIMIZATION_LEVEL=auto -DCXX_SANITIZE_FATAL=False -DCXX_SANITIZE_MODE=none -DWANT_BACKTRACE=if_available -DWANT_GPERFTOOLS_PROFILER=if_available -DWANT_GPERFTOOLS_TCMALLOC=False -DWANT_INOTIFY=if_available -- /home/harold/openage\r\n\r\n(running cmake...)\r\n\r\n ___  ______ _______ _______ ___\r\n|  _)/ _____|_______|_______|_  |\r\n| | ( (____  _____      _     | |    ___  ____  _____ ____  _____  ____ _____\r\n| |  \\____ \\|  ___)    | |    | |   / _ \\|  _ \\| ___ |  _ \\(____ |/ _  | ___ |\r\n| |_ _____) ) |        | |   _| |  | |_| | |_| | ____| | | / ___ ( (_| | ____|\r\n|___|______/|_|        |_|  (___|   \\___/|  __/|_____)_| |_\\_____|\\___ |_____)\r\n                                         |_|                     (_____|\r\n\r\nWelcome to the SFT technologies computer-aided openage build system!\r\n\r\nYou have chosen, or been chosen, to attempt the daring task of building openage.\r\nIf you have installed all the dependencies that are conveniently listed in\r\n[doc/building.md], this _might_ just work!\r\n\r\nIf it doesn't, consider reporting the issue/asking for help in #sfttech on freenode.net.\r\n\r\nTesting /usr/bin/python3\r\nTesting /usr/bin/python2.7\r\nTesting /usr/bin/python3.5dm\r\nTesting /usr/bin/python3.5m\r\nTesting /usr/bin/python3.5\r\n-- Looking for suitable Python >=3.4 - Success: /usr/bin/python3\r\n-- Checking python3 module PIL.Image - Success\r\n-- Checking python3 module PIL.ImageDraw - Success\r\n-- Checking python3 module numpy - Success\r\n-- Checking python3 module pygments - Success\r\n-- Checking utility program opusenc - Success\r\n\r\ncpp library\r\n\tlibopenage                                          [213 sources] [15 generated]\r\n-- Could NOT find GCCBacktrace (missing:  GCCBacktrace_LIBRARY GCCBacktrace_INCLUDE_DIR) \r\nunavailable: backtrace\r\n-- Could NOT find Gperftools (missing:  GPERFTOOLS_LIBRARIES GPERFTOOLS_INCLUDE_DIR) \r\nunavailable: gperftools-profiler\r\n\r\ncython module\r\n\trun                                                 [embedded interpreter] [noinstall]\r\n\topenage.cabextract.lzxd\r\n\topenage.cabextract.cabchecksum                      [standalone]\r\n\topenage.convert.slp\r\n\topenage.cppinterface.exctranslate\r\n\topenage.cppinterface.exctranslate_tests\r\n\topenage.cppinterface.pyobject\r\n\topenage.cppinterface.setup_checker\r\n\topenage.cvar.cvar\r\n\topenage.game.main_cpp\r\n\topenage.log.log_cpp\r\n\topenage.util.fslike.cpp\r\n\topenage.testing.cpp_testing\r\n\topenage.testing.misc_cpp\r\n\r\nenabled options:\r\n\tinotify\r\n\r\ndisabled options:\r\n\tbacktrace\r\n\tgperftools-profiler\r\n\tgperftools-tcmalloc\r\n\r\nopenage v0.3.0-547-g6592436\r\n\r\n         compiler | GNU 5.4.0\r\n       build type | Release\r\n         cxxflags |  -Wall -Wextra -pedantic -std=c++14 -fdiagnostics-color=auto -Wsuggest-override\r\n build type flags | -DNDEBUG -O3\r\n        build dir | /home/harold/openage/.bin/g++-release-Oauto-sanitize-none\r\n   install prefix | /usr/local\r\npy install prefix | /usr/local/lib/python3.5/dist-packages\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/harold/openage/.bin/g++-release-Oauto-sanitize-none\r\n```\r\n\r\n**Same GCCbacktrace and gperftools are missing**", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/682/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/2a67af37c13be94ef4aaf18cb1846fe9b7fa7e7f", "message": "doc: add hint about restarting steam"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "samkellett": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/715", "title": "Provide support for building openage under a virtualenv", "body": "Bug to document issues uncovered when building under a virtualenv.\r\n\r\nThe first issue found from my attempt is that virtualenv ships it's own site.py which doesn't have getsitepackages defined. This appears to be a known issue for python 2.7 (see pypa/virtualenv#355) -- I can't see much online about this still being the case in python 3.6 but it definitely seems to be for me.\r\n\r\nTensorFlow had this problem and fixed it by using the inspect module instead of site, [see here](https://github.com/tensorflow/tensorflow/pull/702) for details.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lisacvuk": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/712", "title": "Units (Villagers) being hidden by a shadow", "body": "![image](https://cloud.githubusercontent.com/assets/673543/22174973/ba1fa69e-dfeb-11e6-91de-f8f2ede2bb52.png)\r\n\r\n^As you can probably see. @TheJJ ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Piruzzolo": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/705", "title": "[WIP] doc on formations", "body": "I've created [this gist](https://gist.github.com/Piruzzolo/e744c9da5ed18898fae85f29a560e90f) on units formations. As you can see from the revision log, it is still a work in progress. I'm finding a way to express the last formula in terms of integer functions only (i.e. `Mod`, `Ceil`, `Floor` and so on). I will make a PR with a recap of the gist as ready.\r\nThis is for you to know and discuss and (possibly, if you feel to), contribute ideas \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/705/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/692", "title": "Grouping resource collection to save CPU", "body": "In the original game, when a lot of workers all work at the same resource tile they make frequent collection calls (C) \r\n`time-------->`\r\n`x---C1--C2---x---C1--C2---x---C1--C2---x`\r\n\r\nC1 stands for \"call of worker 1\", likewise C2, traits are frames, x is the nth frame\r\n\r\nWhen the resource collection is off-screen (i.e. the player doesn't watch), we could \"group\" resource collection calls from miners, lumberjacks and others in a single one, to save CPU, so that, say every nth frame, the resource tile value is `resource -= (number of workers) * (resource taken by each worker)`. As a worker is full, the resource (and the rate) diminishes by a worker until he comes back to work.\r\n\r\nSomething like:\r\n`time-------->`\r\n`B{1, 2}----------B{1, 2}----------B{1, 2}---G1------B{2}---R1------B{1, 2}`\r\n\r\n- B{1, 2} is \"big call {worker 1, worker 2}\" (B is at frame nth), \r\n- G1 is when \"worker 1 goes\", \r\n- B{2} is big call with worker 2 only, \r\n- R1 is when \"returns 1\"\r\n\r\nThe resources taken by each worker would be updated syncronously in the same nth frame, with a delay to take into account the time workers actually began working at the tile (so they're not full all at the same time - wouldn't be faithful of the original game)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jon0": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/697", "title": "Create a better sprite format", "body": "Converting from slp to png seems to lose some of  the original information, which pixels are part of the outline, or which are real colours, or player colours.\r\n\r\nFor use in opengl or vulkan, we could save multiple layers per converted slp file:\r\n1: Sprite plain colours as RGB\r\n2: Player colours: mono (later replaced in shader, with player colour)\r\n3: Outlines: mono (later replaced in shader, with player colour)\r\n\r\nMaybe use a different format (can png save multiple layers in one file?)\r\nor create a new format, probably just some container for png, and save to different files in conversion\r\n\r\nAlso, some unit can appear too small on hidpi and could use upscaling. Probably do this while loading assets.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/5c20fd619f02a8a8c8babb6898827807f8458fba", "message": "this not needed in capture"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e77c8261f3137720d23de6b41fd905f3c35087f0", "message": "units can get removed before on_complete runs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e63794232233058f97c267d8ea3090c767d5c107", "message": "fix header"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3f593833c7b5913ee7f803f6c25ff33ce10e1759", "message": "fix units getting stuck when dropsite isnt found"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61275043", "body": "There are no const modifiers on operators\n\nno match for \u2018operator+\u2019 (operand types are \u2018const openage::coord::tile\u2019 and \u2018const openage::coord::tile_delta\u2019)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61275043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61358807", "body": "Fixed most problems. the heuristic only accepting nodes makes things difficult -- to make a node you need a heuristic calculation but then to perform that calculation you need a node...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61358807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/12424344", "body": "They are used to append other `Dir` objects at the moment. Should there be a `Dir::append(const Dir &other)` ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/12424344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "zombifier": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/675", "title": "contains_military should use more concise checks", "body": "According to the current code, units that cannot build buildings are considered military units by contains_military in the selection code. However this also means sheeps are considered military units.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "coffenbacher": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/657", "title": "Implement taunts", "body": "Critical feature, we need 30 - wololo and 10 - \"I'll beat you back to Age of Empires\" to go along with cheats. Depends on #109 \n\n14 14 14 14 14 14 14 14\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/657/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/652", "title": "Headless mode", "body": "I would love to be able to develop and run tests of the engine without spinning up the whole asset loading & graphics pipeline. Combining a simple test framework with the history / log discussed in [Chipmunk's pull request](https://github.com/SFTtech/openage/pull/642) this could enable powerful regression testing as well in the future.\n\nFor example, in some silly pseudocode, maybe testing wood gathering could look like this:\n\n```\n# test_wood_gatherer_log.txt:\n- tick 0: load TestArabia.map\n- tick 0: spawn villager at (1,1) with id 0\n- tick 1: task unit with id 0 to chop wood at (1,2)\n- tick 1000: end\n\n# test.py\nimport headless_engine\nheadless_engine.run(open('test_wood_gatherer_log.txt'))\nassert headless_engine.get(unit=0)['carrying']['wood'] == 10\n```\n\nPerhaps this is already possible. If so, can someone point me in the right direction for doing so? \n\n(This is a bit of a stupid reason / test compared to the architectural advantages of a headless mode, but I only develop on Linux over SSH (my local machine cannot effectively run it) and I'd love to be able to contribute without having access to Linux with a graphical environment. Except for the rendering pipeline, everything should be workable like that it seems.)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/652/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/553", "title": "Disable friendly fire from projectiles", "body": "It seems that getting in the way of your own projectiles causes friendly fire.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/245867/15094707/04e70416-1462-11e6-8655-5d4683eeb74b.png)", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/552", "title": "[WIP] Improving building logic", "body": "Do not place conflicting buildings and/or foundations. Conflict with unit is OK to place foundation, although building construction cannot begin until the site has been cleared. Addresses second half of #533.\n\nFixes the two behaviors seen here:\n\n![two_bad_building_behaviors](https://cloud.githubusercontent.com/assets/245867/15038760/8894ecf0-125b-11e6-9245-50c49ff742b2.png)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "timohaas": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/644", "title": "Screenshot of whole map", "body": "it would be awesome if we could do screenshots of the whole map. It would be needed if we want preview of maps and also it would help developing new maps.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/649", "title": "savefile Format proposal", "body": "#613 It is written in Markdown and contains the first draft. I need the help of the other developers, I don't know what attributes need saving and what of what types they are.\r\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/613", "title": "[WIP] random map scripts (already working)", "body": "a simple random map generator\n\ngets a rms file and tries to make a map which can be loaded within the game.\n\nimportant: if the map is for more than 2 players, you need to add more playernames in the menu, otherwise openage will crash.\n\nhow does it work?\n./rms.py oasis.rms\nwill generate a /tmp/default_save.oas file which can be loaded\n\nwhat works:\ncan create Islands (Water,Grass) with shapes(random flood fill) and placement(in circle, random, and within a bounding box)\nconnection: from island center to another island center with terrain costs\nobject placement: random, in a circle, filling whole island\nnearly everything has paramenters which can be tweaked\nnew map can be generated with a different seed\n\nTODO:\n- [ ] preprocessor language\n- [x] team circle placement\n- [x] team circle placement with deep pocket players >= 6\n- [ ] team placement (random placement for a team on an island)\n- [x] map scaling completion (current status: only size of map is scaling)\n- [x] map scaling algorithm (linear, sqrt,..)\n- [ ] island styles (more than just random flood fill)\n- [x] island basesize\n- [ ] island smoothing, no single tiles inside water\n- [x] island polygon boundary\n- [ ] automatic beach grass - beach - water\n- [x] automatic deep water\n- [ ] object placement parameter (min distance to, loose coupling)\n- [ ] object avoid player starting area\n- [ ] water unit placement\n- [ ] wall generation with gates\n- [ ] island patches (maybe can be implemented as it is now with a dummy object)\n- [x] team connection\n- [x] team to island connection\n- [ ] team to team connection\n- [ ] connection variance (currently we go straight lines, maybe add random costs to tiles or random dummy objects)\n- [x] individual  object connection cost\n- [ ] diffrent connection width for diffrent terrain\n- [x] do not do replacement on start and end island of a connection\n- [ ] blacklist of island for connection creation\n- [ ] merge connection which are close to each other\n- [ ] trigger support\n- [ ] cython wrapper\n\nwhat ideas do you have?\n\n[documentation](https://github.com/timohaas/openage/tree/randommap/openage/randommap)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "agdsat134": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/638", "title": "Disconnect-resume mechanism for multiplayer games", "body": "In current commercial versions of the game, if a player disconnects they cannot rejoin the game unless a Save & Exit is initiated and the group restores the game. Based on my observation from over decade of playing multiplayer, players feel this is huge inconvenience and it can ruin a game 40 minutes into one.\n\nWould it be possible to create a resume feature so that if a player drops due to loss of internet connection they can rejoin the game while it is still active, a la League of Legends?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "elnabo": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/611", "title": "Units can be selected through the UI", "body": "Units hidden behind the bottom UI can be selected and their health bars will appear.\n\n![https://i.imgur.com/dDjVoF2.jpg](https://cloud.githubusercontent.com/assets/673543/18847583/17eed9a6-842b-11e6-9329-85b253529200.jpg)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/37970498-units-can-be-selected-through-the-ui?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/533", "title": "Building placement problem", "body": "It is possible to build on non buildable terrain (eg: water, ice) if it touch a walkable terrain. Destroying the building doesn't restore the previous terrain.\n\nIt is also possible to build stuff in a town center in some of its corner, try with house.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/32258650-building-placement-problem?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jazzpi": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/608", "title": "Can't stop the game while it is loading assets", "body": "On first launch, openage usually takes ~4-5 minutes to load all assets for me. During that time, pressing SHIFT-ESC in game or Ctrl-C in the console doesn't actually stop the game. It waits until all assets are loaded, then it immediately stops.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/604", "title": "Palisades aren't static enough", "body": "Placing down and building a palisade (ID 72, WALL) produces [this](https://gfycat.com/QualifiedMistyGiraffe).\n\nLooks like it cycles through all palisade textures or something like that to me.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/37221147-palisades-aren-t-static-enough?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/604/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ChipmunkV": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/542", "title": "Saving debug symbols", "body": "Even the release build of libopenage should be probably producing a separate file with debug symbols. And this file should be installed/distributed with the rest of the binaries.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/3ea6df9662bb72fcfb83e3194b077395ff49f98a", "message": "guisys: try both init modes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2b90c962c36afc21cf1ff4c40e7cd6d784caac57", "message": "guisys: common interface for context init modes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/76b9a977206c06de0cf53dfeda48ba7466f1b0e3", "message": "guisys: context init sequences for unique and separate modes"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ff1b7ffc218b37ad9ba9773c6a4fe39145735010", "message": "guisys: logger for separate context mode"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/e769b601e2a40b4cb26ddf274f9b984c91749336", "message": "guisys: separate context mode"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6b1e464aa3abcd8d3485e2d5ac4ef51dfbb88c9d", "message": "fix include"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/749", "title": "Settings menu placeholder", "body": "#673 \r\n#728 \r\n#732 \r\n#751\r\n\r\n- [x] SettingsMode and its TabView with global font size setting in \"Graphics\" tab\r\n- [x] Global font size cvar\r\n- [x] Write back cvars to config file when calling set\r\n- [x] Initial propagation of the cvar list to gui\r\n- [x] on-changed propagation from gui to cvar\r\n- [x] on-cvar-changed callbacks (that will allow on-changed propagation from cvar to gui)\r\n- [x] caching of the cvars that are loaded but not yet taken by any subsystem of the engine\r\n- [x] ~~Batch write back to config file (instead on writing each time)~~. Ok, write them one by one, but in different thread\r\n\r\nRandom unrelated stuff:\r\n- [x] Keep mode when reloading gui\r\n- [x] Fix input crash on reload\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/642", "title": "[WIP] History and interpolation", "body": "The current game logic will be mostly used in the server. Same code will probably be used on the client to predict the outcome of the commands issued by the player.\r\n\r\nThe outcomes of all commands of all of the players form a history. The history is generated by the server.\r\n\r\nThis PR starts from an in-memory representation of the history (it's not about network). The goals are:\r\n- [x] modify attributes, so they can record changes\r\n- [x] position is not an `Attribute`, so capture changes inside the constructor and actions\r\n- [x] write out the history while the client is running (currently it has all the server code)\r\n- [ ] write out the history of object creation\r\n\r\n*no server-side prediction/correction for the moment\r\n\r\n*no special format\r\n- [ ] replay that history on the client\r\n- [ ] output the history with server-side predictions and corrections (move away from recording every change of an attribute)\r\n- [ ] replay the history that contains corrections\r\n\r\nIntegration is probably going to be via `Unit::action_secondary`, `UnitContainer::new_unit` and `Unit::delete_unit`. The idea is to create one `CurveAction` that will sit forever in the `Unit::action_secondary` and apply all curves on each graphical tick.\r\n\r\nTo extract changes, the members of `Attribute<T>` can be transformed into \"spying\" values. It's enough for point-curves, but things like `MoveAction` will eventually need to generate longer curves.\r\n\r\nAt the end of each logic tick (maybe I should call it a network tick) the history will be resynchronized and a segment from it will be used to show the next tick. Pipelining will be needed. The network frame rate is flexible because in theory it's inversely proportional to the amount of stuff that is coming.\r\n\r\nRelated - #530.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/584", "title": "[WIP] Input replay", "body": "There is no established world-history protocol, so it's too early for the game replays.\n\nThe goal is to be able to replay the player's perspective by replaying the input. It's supposed to be a part of the real replay functionality.\n\nWill do:\n- [x] replay of actions\n- [x] mouse movements\n- [x] camera movements\n- [ ] camera movements with keys\n- [ ] testing GUI for starting/restarting the replay\n- [ ] testing GUI for specifying I/O files\n- [ ] doc overview (copy-paste several sentences from this PR description)\n\nRelated to the #277\n\nDumps ActionMode events to out.txt while playing from in.txt.\n\nProblems: ~~held buttons~~, constness of the events, SDL_SetRelativeMouseMode.\n\nFuture work that needs real replays to be done first:\n- GUI to switch between players\n- handling switches between different players and the 'free mode' during the replays\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/578", "title": "[WIP] Fix paper crash", "body": "(**edit:** actually, it's unrelated to #577).\n\nMakes the paper more yellowish, but removes inline shaders that were causing problems when chained together by the untrained personnel.\n\nUses some copy-paste from Qt 5.7.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/559", "title": "Minimap", "body": "Made some action buttons (hooked up 'kill' and 'garrison', haven't found the game logic for other ones).\n\nBorrowed https://github.com/SFTtech/openage/pull/344 for the minimap. But can't understand why the player colours aren't bright. The player palette has only dark shades...\n\n**update:** dissociated action buttons from this PR.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "niklasf": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/481", "title": "Optimize PNG encoding speed for asset conversion", "body": "TODO https://github.com/SFTtech/openage/blob/72cca2d9960cbd35c227f78880ade0ed0aa5ad8e/openage/convert/texture.py#L100 suggests switching to libpng (from PIL) to speed up PNG encoding and writing.\n\n---\n\nHere's a benchmark comparing the options that are **available through PIL**. Note that it may be skewed, because I couldn't be bothered to run tests multiple times in a clean environment. It should still give a general idea.\n\nTested command: `python3 -m openage convert --force --no-sound`\n\nProcessor: `i7-4800MQ @ 2.70GHz \u00d7 8`\n\n| Option | Size of `assets/converted/graphics` | Time taken |\n| --- | --- | --- |\n| compress_level=0 | 773.7 MB | 4:44 |\n| compress_level=1 | 129.2 MB | 4:32 |\n| compress_level=2 | 125.8 MB | 4:32 |\n| compress_level=6 (status quo) | 124.0 MB | 4:36 |\n| optimize=True (highest) | 123.6 MB | 4:37 |\n\nDoesn't look like there's much in it.\n\n---\n\nSee also #431 for another idea to optimize the speed of asset conversion.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29912322-optimize-png-encoding-speed-for-asset-conversion?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60835527", "body": "Yes, I get that too. The message above comes once I then indeed try to flattr the page.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60835527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60836463", "body": "Getting the same error (after the confirmation page).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60836463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61081110", "body": "I noticed I can enable \"automatically flattr repositories I star on GitHub\" in the settings, so flattr will work that way, too.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61081110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "franciscod": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/480", "title": "Missing util/compiler implementation for WIN32", "body": "The `dlfcn` headers are provided by this package https://github.com/dlfcn-win32/dlfcn-win32 that wraps winapi calls into the posix api.\r\n\r\nHowever, `dlfcn-win32` doesn't provide dladdr (because it is not posix, more info here https://github.com/dlfcn-win32/dlfcn-win32/issues/21) so we should work around it on WIN32.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/479", "title": "Missing StackAnalyzer implementation for WIN32", "body": "Currently, if the `WITH_BACKTRACE` flag is set by CMake, the modern `backtrace.h` is used. Else, the GNU's `execinfo.h` is tried.\n\nWhen building on MSYS2, it tries to include `execinfo.h` and fails, because `execinfo` isn't available for windows.\n\n[Here](http://spin.atomicobject.com/2013/01/13/exceptions-stack-traces-c/) is some example code for catching exceptions and getting stack traces on windows platforms.\n\nThis should be implemented in `libopenage/error/stackanalyzer.cpp`.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29897119-missing-stackanalyzer-implementation-for-win32?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/277", "title": "Scripting and recording of all user interaction.", "body": "All user interaction should be recordable/scriptable.\r\n- keystrokes\r\n- mouse movements\r\n- scrolls\r\n- clicks\r\n\r\nThis is related to networking and multiplayer, but also could be useful for reproducing bugs.\r\n\r\nThoughts?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/223", "title": "The openage::console::tests::demo test is severely broke for some people (like me)", "body": "Demo recorded with asciinema:\n\nhttps://asciinema.org/a/16209\n\nPreview:\n![1423450969](https://cloud.githubusercontent.com/assets/726447/6100454/04cdcb6e-afef-11e4-8046-c5d95dec5581.png)\n\nmeanwhile, on irc...\nTheJJ: but unfortunately i'm the wrong guy for that subsystem, you have to interact with this @mic-e guy\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8409199-the-openage-console-tests-demo-test-is-severely-broke-for-some-people-like-me?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/141", "title": "Terrain tiles perspective merging", "body": "Let's say i have the following terrain texture made by A Bad Guy (notice the colour dots in the alpha space)\r\n![15001 slp](https://cloud.githubusercontent.com/assets/726447/4948913/efaef48a-6627-11e4-9748-1fe34d8216e6.png)\r\n\r\nThe alpha space is outside the rhombus, so it'd be okay... [_right?_](https://www.youtube.com/watch?v=YztLZ_NfgdQ)\r\n\r\n![1415339142](https://cloud.githubusercontent.com/assets/726447/4948925/367f1084-6628-11e4-9735-706f281df0ad.png)\r\n\r\nNOPE! THE DOTS TRY TO REACH GABEN!\r\n\r\nBasically each tile wastes half the space.\r\n\r\nWe should fix this :grinning: ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/114", "title": "emscripten port", "body": "because why the hell no?\r\n\r\nhttps://hacks.mozilla.org/2014/11/porting-to-emscripten/", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/111", "title": "Implement minimap", "body": "Should we limit the world terrain size for this? What if the world grows? The minimap scale changes accordingly to accomodate the whole world?\n\nattached screenshot for reference\n![minimap](http://i.imgur.com/a7tuqkh.png)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5766131-implement-minimap?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/109", "title": "Convert more things than just $AGE2/Data", "body": "On my AGE2 directory I see the following directories:\r\n- `Avi/` (contains an intro logo)\r\n- `Campagin/`\r\n  - `.cpn` and `.cpx` files (main data?)\r\n  - `Media/` directory contains a lot of `.bln`, `.mm`, `.pal`, `.sin` and `.slp` files\r\n- `History/`: txt files with lore about the civilizations, armies and many random terms.\r\n- `Sound/`\r\n  - `stream/` directory: \"start game\" sounds for each civilization, and x{credits,open,town} background music\r\n  - `terrain/` directory: ambient ingame sounds\r\n- `Taunt/`: 1~42 taunts, **especially** `30 Wololo.mp3`\r\n\r\nAFAIK none of these are being converted to our assets directory.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61046792", "body": "Hello! A little progress here: https://github.com/franciscod/openage/commit/6b5ab1dc6b03e7c17c5099f8ebd7cb96f03b04d8\n\nAs far as I could tell, there is currently no way of saving to a file in the codebase. So, for now the numbering restarts on each run.\n\nAlso, when should we create the ~/.openage and ~/.openage/screenshot directories? Should the engine create them as needed on each screenshot, or fail silently?\n\nedit: maybe a ScreenshotManager is too much? :stuck_out_tongue_closed_eyes: \n\n[a few screenshots](https://i.imgur.com/1RCwQqn.gif)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61046792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61053905", "body": "After adding these lines I only get 291 and 337 as sound_creation0... \n\nhttps://github.com/franciscod/openage/commit/24160c01f91c406fdf3bdd9815a617b0821634b5\n\n% make run | grep sndcre\nMSG   sndcre 291 -1\nMSG   sndcre 291 -1\nMSG   sndcre 337 -1\nMSG   sndcre 291 -1\nMSG   sndcre 291 -1\nMSG   sndcre 337 -1\nMSG   sndcre 337 -1\n\nCan anyone reproduce this?\n\n(Might it be because my game is the Spanish version?)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61053905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61120705", "body": "lol, lord gaben is praised :sun_with_face: \n\nYeah, I thought about the timestamp in the filename since that's what scrot and minecraft do, but since you stated _xxxx I went on that idea.\n\nShould I also move the screenshot taking code (the SDL masking/copying and finally saving the PNG) to the ScreenshotManager?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61120705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61129049", "body": "code moved: https://github.com/franciscod/openage/compare/screenshot\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61129049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61208849", "body": "Thank you all! I think I covered everything. Should I squash the 4 commits into a single one?\n\nEDIT: still broke, hang on\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61208849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61209954", "body": "squashed everything :smile:\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61209954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61210141", "body": "oh! we have the actual id for each building? into teh codez!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61210141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61210664", "body": "On the game, you click a TerrainObject, which knows only the texture and foundation_size from the TestBuilding (which has the sound). At this time, should we put effort into giving to TerrainObject more info about the building, or the hardcoded option is good enough for this demo game_main.cpp?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61210664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61215323", "body": "(squash pending, waiting for more things to fix!)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61215323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61221487", "body": "squashed!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61221487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61250976", "body": "spinning gaben? (?)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61250976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61251583", "body": "okay!\n\nin the future we want Jon0's horse can walk through the town center, so we should have a building layer and an unit layer or something like that. and maybe each layer should just be pointers to entities in the game? i don't know if this is the time to discuss this :p\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61251583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61252261", "body": "/**\nterrain object class represents one immobile object on the map (building, trees, fish, ...).\n*/\n\na tree is a building? a fish is a building?\n\nshould we add a dying_sound to terrainobject, or it'd be enough to add a 'building_id'?\n\nEDIT: whoops, wanted to cancel this comment and closed the whole thing, reopened\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61252261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61253930", "body": "should we do this outside the engine loop? or let the engine have a \"loading\" flag and run (and don't lock on drawing so gamemain can keep loading stuff)?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61253930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61256346", "body": "I'm thinking about registering a (new) \"loading\" DrawHandler before the big asset load, and after it register the current GameMain's one...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61256346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61298763", "body": "same here, but classic conquerors data (spanish version)... are that holes intended?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61298763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61308496", "body": "missing screenshot.{h,cpp} ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61308496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61360117", "body": "isn't the header missing on screenshot.c and screenshot.h?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61360117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387944", "body": "also developing on arch, what problems did you have?\nOn 1 Nov 2014 15:12, \"behind1231\" notifications@github.com wrote:\n\n> Studied two days if the game under the archlinux system installation, the\n> results are not ~! , please show ~ I love this game, hope to be able to\n> play on\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SFTtech/openage/issues/77.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61413676", "body": "Install sdl2 and sdl2 image: pacman -Ss sdl image\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61413676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61414190", "body": "Maybe we could have clickable checkboxes on the f3 debug menu for all those things :)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61414190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61419107", "body": "Hedgewars (worms clone) picked Qt, that works fine even on android. LXDE is\nalso migrating to Qt.\n\nTake a good time to pick the GUI toolkit, don't hurry on that.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61419107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61436175", "body": "It's fixed on the gcc libs on version [4.8.2 and 4.9.0](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56627), while Travis is using 4.8.\nOn MVSC an error of that kind will [break](http://llvm.org/bugs/show_bug.cgi?id=11632), but I don't know if the MS lib has this mismatch.\n\n---\n\n\"The reason for the warning is that some versions of MSVC++ (love it or hate it, it's the compiler for a major platform that people want to keep their codebases building under) will error on mismatched struct and class. The warning allows developers using clang to catch the problem before breaking MSVC builds.\"\nhttp://llvm.org/bugs/show_bug.cgi?id=11632\n\n\"There's nothing to \"fix\", the code is correct, the warning is stupid.\"\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=58030\n\n(Sorry for the multiple posting!)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61436175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61436990", "body": "done TheJJ \"quick\" fix and somehow it doesn't work!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61436990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61437605", "body": "aha! all dying sounds are -1! anyone can reproduce or my assets are different (spanish version)?\n\ni have a similar issue with #59, where most creation0 and creation1 are -1\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61437605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61438384", "body": "https://github.com/franciscod/openage/compare/convert-crossplatform-tmp\n\nThis should fix the mentioned issue:\npy/openage/convert/mediafile.py:20: dat_cache_file = \"C:/tmp_empires2_x1_p1.dat.pickle\"\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61438384/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/8408196", "body": "nice!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8408196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8432888", "body": "discussion is here: https://github.com/SFTtech/openage/issues/28\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8432888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434677", "body": "...@TheJJ you didn't clean the broken line?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434732", "body": "https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8434732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8468572", "body": "nice!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8468572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8469475", "body": "![tmyk](http://rainiernew.wpengine.com/yurts/wp-content/uploads/sites/2/2014/01/The_more_you_know_banner.jpg)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8469475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/8494914", "body": "works perfectly!!!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8494914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/9643786", "body": "what's this @TheJJ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9643786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/9730298", "body": "does this require a `make media`? @TheJJ \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9730298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/9736735", "body": "nice! Tom Hanks!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9736735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649238", "body": "whoops, sorry! sure thing!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649479", "body": "yup, bad copypaste in a hurry! thanks!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19649479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651217", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651221", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651228", "body": "check the new one!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19651228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19778025", "body": "maybe the description could be \"print the current version string\"? is `v2.2-437-gf6736cd` even a number?\n\nedit: already merged, but anyway it could be improved\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19778025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857226", "body": "quoting your commit message: \n\n```\nconfigure: error: unknown compiler suite: g++. manually specify\n--c-compiler and --cpp-compiler, or use one of [llvm, gnu]\n```\n\nhowever, you put \"gcc\", does that work? :)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857235", "body": "same that line 108 comment\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857241", "body": "Arch _L_inux? /me is a capitalization nazi\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857249", "body": "nice! thanks\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19857249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921666", "body": "0 is a valid index, you should test for -1\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921669", "body": "0 is a valid index, you should test for -1\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921690", "body": "are you sure about giving that huge block of code a level of nesting?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19921690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971737", "body": "okay, i'll go with that style, but why do you think it's horrible?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19971737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972021", "body": "hmm, okay, i went conservative so another huds don't get disabled\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972545", "body": "okay, that's fine :) it'll be nice to disable all the hud views ingame\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972907", "body": "oh yes totally misunderstood you! anyway it got refactored :D\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19972907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19977824", "body": "this is unrelated to the pr EDIT: okay, it wont clutter the history because it's in a separate commit\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19977824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19978754", "body": "also unrelated with the pr but no problem, it's in a separate commit\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19978754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969777", "body": "alignment is awesome for the eyes :D\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969804", "body": "staircase effect due to autoindent lol\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969841", "body": "align the pipes :D\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969890", "body": "staircase\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19969890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055118", "body": "seems reasonable!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055126", "body": "indeed:\nhttps://github.com/SFTtech/openage/blob/master/doc/code_style/mom.cpp#L139\n\nsorry!!!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055187", "body": "adding comments\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055191", "body": "using reasonable names now\n\nalso, you print WHAT?!!?! is it a joke? if not, how much paper does the codebase weight?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055270", "body": "i really need a codestyle checker lol\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055291", "body": "missed this one\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055340", "body": "okay let me fix all those niceties before merging\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20055340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20061821", "body": "okaaay\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20061821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20061848", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20061848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197647", "body": "is sizeof(size_t) == 34 in any system????\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197671", "body": "umm PRIuPTR should be inside the `\"`?\n\nEDIT: oh, nope, it's c string concatenation :D\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197683", "body": "part 1 of what?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197703", "body": "funky alignment\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197852", "body": "also, @mic-e, multiply with 8 and divide by 2 sounds like *4 to me\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198888", "body": "i'm not sure if your alignment is right or you should align after the `\"`... hm...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20212902", "body": "+1 to the unhappy bandwagon\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20212902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20213023", "body": "was the \"32\" a bug? is the current expresion a bug? \n\nsimple math:\n\n```\n         32 == sizeof(size_t) * 8 - 2       original\n     2 + 32 == sizeof(size_t) * 8           plus 2\n         34 == sizeof(size_t) * 8           calc dat shit\n\n       34/8 == sizeof(size_t)               divide by 8\n\n   float^      int^                         wat!?!?!?!?!? \n```\n\nCould anyone please explain me what's going on? I'm supposing size_t is 32bits or 64bits on most cases too.\nWith 32bit size_t:\n\n```\nsizeof(size_t) * 8 - 2 ==\n            32 * 8 - 2 ==\n              128  - 2 ==\n                 126       ???\n```\n\nWith 64b it goes to 254 or something...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20213023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20213342", "body": "please read the edited version of my comment above\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20213342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19995284", "body": "please swap engine and assetmanager lines to fix this warning:\n\n```\nIn file included from /home/fd/src/openage/cpp/game_main.cpp:3:0:\n/home/fd/src/openage/cpp/game_main.h: In constructor \u2018openage::GameMain::GameMain(openage::Engine*)\u2019:\n/home/fd/src/openage/cpp/game_main.h:111:19: warning: \u2018openage::GameMain::engine\u2019 will be initialized after [-Wreorder]\n  openage::Engine *engine;\n                   ^\n/home/fd/src/openage/cpp/game_main.h:104:15: warning:   \u2018openage::AssetManager openage::GameMain::assetmanager\u2019 [-Wreorder]\n  AssetManager assetmanager;\n               ^\n/home/fd/src/openage/cpp/game_main.cpp:99:1: warning:   when initialized here [-Wreorder]\n GameMain::GameMain(Engine *engine)\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19995284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20340768", "body": "why `#!< foo` instead of `# foo` ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20340768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197172", "body": "why remove whitespaces? D:\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197183", "body": "hmm dat codestyle\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197192", "body": "i think you need an extra space between operators, also alignment is somehow lacking\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197205", "body": "nice!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197304", "body": "https://github.com/SFTtech/openage/blob/master/doc/code_style/tabs_n_spaces.md\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24083951", "body": "I think this one should stay: we don't want to keep building if a previous step failed.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24083951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24084396", "body": "these changes should be addressed by CMake\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24084396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24084565", "body": "Should we set `bindir` to `'bin'` directly?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24084565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24084608", "body": "How should we say to CMake that it should use this generator, but just on WIN32 platform?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24084608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24086317", "body": "whoops, except -Wno-format\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24086317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24646293", "body": "+1 to fr3akout's question\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24646293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25804542", "body": "ummmmm\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25804542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25804570", "body": "ummm\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25804570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25804630", "body": "are you using tabs here by any chance?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/25804630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "lyle-nel": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/468", "title": "Consistently use openage::util::hash_combine()", "body": "I have tracked down 3 places that use a different hash implementation than that defined in `libopenage/util/hash.h`. However, both implementations seem to serve the same purpose, that is, combine two hashes.\n\nFor the sake of consistency it might be good to reuse that function instead of having two implementations.\n\nThe places in question are:\n\nhttps://github.com/SFTtech/openage/blob/master/libopenage/coord/phys3.h#L72-L74\nhttps://github.com/SFTtech/openage/blob/master/libopenage/coord/tile.h#L58-L60\nhttps://github.com/SFTtech/openage/blob/master/libopenage/pathfinding/path.h#L207-L209\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29807251-consistently-use-openage-util-hash_combine?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janisozaur": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/429", "title": "XDG-App packaging", "body": "You should try packaging openage as XDG-App for easier distribution.\r\n\r\nProbably depends on #86 \r\n\r\nSee https://wiki.gnome.org/Projects/SandboxedApps and https://github.com/alexlarsson/xdg-app", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/402", "title": "VR support", "body": "Hey, you should support Oculus, HTC Vive and other VR headsets!\r\n\r\nI would suggest using tapping into [project tango](https://www.google.com/atap/project-tango/) to generate necessary 3d data in realtime.\r\n\r\nAt some later stage you could add PS Move/Kinect/Wiimote compatibility and option to micromanage selected unit, so you could become gatherer, hunter or crossbowman\u2026\r\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/b6fa4d40342a4b9169907cd4416782660ec18af6", "message": "Test compilation in debug and release mode"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cf0729344763aa3bd79ee9c18bb4e55962590618", "message": "Initialise GLXContext properly\n\nFixes clang 4 warning"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/32f432e0cf1677aba71190c12b82e6198350d1a8", "message": "Fixes for GCC7"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/2a0c31ac0246316c3590b10482cc0887cac9d3ff", "message": "Update required Cython version to 0.25\n\nAs seen in discussion in https://github.com/SFTtech/openage/issues/792"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60901282", "body": "SDL is certainly able to use DirectX instead, perhaps also GLES? While noone cares about former, GLES actually could be useful.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60901282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60929001", "body": "As @mic-e says, llvmpipe would have nothing to do with openage/sdl. Given its performance though, if you have \"troubled video chip\", chances are your cpu isn't performant as well.\nI don't think llvmpipe should be taken into consideration at this stage.\nGLES, on the other hand, enables you to target much broader audience: embedded devices, wayland (libGL currently pulls X libraries, hence has GLES support only so far)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60929001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61112587", "body": "errors like missing libstdc++ usually mean you're trying to use C compiler (gcc, clang) instead of C++ compiler (g++, clang++)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61112587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117698", "body": "from your configure script output:\n\n```\nbuild dir | /Users/martinphee/develop/openage/.bin/gcc-release-stdlib=libc++-I-usr-local-Cellar-fontconfig-2-11-1-include-I-usr-local-include-SDL2-I-usr-local-Cellar-opus-1-1-include-opus-I-usr-local-Cellar-opusfile-0-6-include-opus-I-usr-local-Cellar-opus-1-1-include-opus\n```\n\nI would look in there\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117828", "body": "or simply\n\n```\nfind . -type f -executable -name openage\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61183214", "body": "keep in mind that system-provided rand() are not portable in a sense that each system can provide it's own (p)rng. implementation of own prng would likely be required. have a look at lcamtuf's paper for inspiration: http://lcamtuf.coredump.cx/oldtcp/tcpseq.html\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61183214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61336507", "body": "keep in mind that if you merge like it is now, the png file would still have been in the repository\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61336507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387159", "body": "see https://www.gnu.org/software/make/manual/make.html#MAKE-Variable for details on that variable. please note that I'm not an expert on Makefiles\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387223", "body": "yes I did. Deliberately, as this treats invocation somewhat like argv[0]. if you use nmake instead of make it would tell you to use nmake, etc\u2026\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61387223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61388024", "body": "I haven't noticed any. If I recall correctly, all the required libs are in main archives, no need to use AUR.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61388024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23437650", "body": "doesn't have line above updated\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23437650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23437724", "body": "can cases declare new variables? if so, how would blocks here look like?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23437724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23731612", "body": "Sorry about that, I didn't remove one while checking something\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23731612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23732473", "body": "Yes, it is `=auto` by default\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23732473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "MayeulC": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/421", "title": "Star Wars Galactic battlegrounds support", "body": "Hi there,\r\n\r\nI was wondering if this engine re-implementation could support Star Wars:Galactic battlegrounds assets; it's one of my favorite games (I like it a lot more than the vanilla ages of empire II).\r\n\r\nIt is using (as far as I know) the same engine, with some custom modifications, like Flying units, shields, energy and such.\r\n\r\nhttp://www.gog.com/game/star_wars_galactic_battlegrounds_saga\r\n\r\nRelated:\r\n* AOE I support #808 \r\n* ROR support #785 ", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/421/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iNaKoll": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/408", "title": "Converter script doesn't specify text file encoding", "body": "While running the convert script, [util.fslike.path](https://github.com/SFTtech/openage/blob/0f895d3dbb0058d710dd8f0a839c3677b9b7edbe/openage/util/fslike/path.py#L100-L104) doesn't specify text file encoding nor give any mean to specify one. This could lead to some unicode encoding/decoding error at some point.\r\n\r\nThe default encoding used by [TextIOWrapper](https://docs.python.org/3/library/io.html#io.TextIOWrapper) is `locale.getpreferredencoding(False)` and depending on the system this doesn't necessarily return 'utf-8' ( ;o )\r\n\r\nTo reproduce the problem simply change the system locale (change the `LANG` environment variable on Linux systems) to another locale (try `ANSIX3.4-1968`) before the convert script runs. Hopefully, the script should raise an `UnicodeEncodingError` exception at some point while trying to encode a Python unicode string...\r\n\r\nIf we know the encoding of the our files, whether we are reading or writing them, we should specify that encoding explicitly instead of relying on some [weird default system encoding](http://askubuntu.com/questions/581458/how-to-configure-locales-to-unicode-in-a-docker-ubuntu-14-04-container).", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21390131", "body": "The implementation of make_unique for arrays is not so trivial. While `make_unique<T[]>` is perfectly legal, `make_unique<T[N]>` (array of known bound) is ill-formed in C++14.\nSee http://stackoverflow.com/a/20313842/2557561 and http://coliru.stacked-crooked.com/a/1494be9e4ce4866c from the same author.\n\nI still can't believe the ISO C++ committee standardized make_shared but not make_unique in C++11. IMHO unique_ptr is the most important thing that comes with C++11, but I digress. This would worth switching to C++14 just for that don't you think ? Would it be possible to pretend the project is C++11 and compile it to C++14 anyway ? Or switch to C++14 completely without hesitation ? Sorry, that's a lot of questions for a pull request, we might go on with this discussion on IRC...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/21390131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24714693", "body": "Be VERY careful here. I don't think this code is doing what you think it does! This will only erase ONE element from the container if the predicate is satisfied at least once. If more than one element satisfies the predicate the remaining elements would be moved at the end of the container and will remain there. If no element satisfies the predicate this code would try to `erase(std::end(container))` which is an undefined behavior!\n\nThe correct code would be : \n\n``` cpp\ncontainer.erase(std::remove_if(std::begin(container),\n                               std::end(container),\n                               std::forward<Function>(func)),\n                std::end(container)); // Note the additional parameter here!\n```\n\nThis would call the correct erase overload for an `std::vector` but unfortunately this would not work for `std::list`, `std::map` and other containers and there is no uniform way (yet) to do this for all containers.\nFor more details : \n- http://stackoverflow.com/questions/16013545/how-do-i-erase-elements-from-stl-containers\n- http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4161.htm\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24714693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jfeo": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/389", "title": "Some converted interface images have distorted colors", "body": "Quite a few of the converted files look similar to this:\n![distorted_colors](https://cloud.githubusercontent.com/assets/915204/9975669/0e506536-5ec5-11e5-9100-8df204f103a6.png)\n\nWhile other files look mostly fine, with just small 'issues':\n![50131 slp](https://cloud.githubusercontent.com/assets/915204/9975685/7162117e-5ec5-11e5-8167-2f45b24af91c.png)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26799659-some-converted-interface-images-have-distorted-colors?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/303", "title": "Support for wrap-around maps", "body": "In games where some teams start along along edge of the map, and some teams starting in the middle, I find that teams in the middle often get squeezed, as they are the closest opponent to all teams on the edges.\n\nIf the map wrapped around, so the opposite edges were linked, it would make for interesting, and perhaps more balanced play.\n\nI realize that this is kind of counter to the idea of infinitely generating terrain, but as I imagine that a mode for set-size maps would make sense, in that context wrap-around maps could also be an idea.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/13649539-support-for-wrap-around-maps?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Miguellissimo": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/376", "title": "The king can kill enemy units too ", "body": "when I remember correctly this was not possible in the original game\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26235707-the-king-can-kill-enemy-units-too?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/375", "title": "Monk kills enemy unit instead of converting to own team", "body": "and he doesn't keep distance to enemy unit. \n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26235636-monk-kills-enemy-unit-instead-of-converting-to-own-team?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/374", "title": "Tree clipping bug in the bottom corners of the screen", "body": "When I move the camera around the world, trees in the bottom corners are disapearing to early. You can also see them popping up again.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/373", "title": "When attacking with a group of archers, one takes damage as well", "body": "When I have a group of archers and attack the enemy villagers, one random archer from my group takes damage too. \n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26235320-when-attacking-with-a-group-of-archers-one-takes-damage-as-well?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zesterer": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/370", "title": "Custom cursors", "body": "Something similar to the AOE2 flag, or the way in which the cursor changes based on the action.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/369", "title": "Archers can't kill sheep", "body": "No more words are needed.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26170719-archers-can-t-kill-sheep?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/368", "title": "Entity (character) click-box is too small", "body": "It's mainly focussed around their feet. When you click their head or upper body, they aren't selected. Perhaps the clickbox should take into account the height of entities too?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/367", "title": "Telling multiple entities to move at the same time makes them all say their respective phrases", "body": "With only a few characters, it sounds harmonic. With more than 10, it begins to break the speakers.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26170614-telling-multiple-entities-to-move-at-the-same-time-makes-them-all-say-their-respective-phrases?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/366", "title": "New pathfinding and grouping", "body": "Presumably you use some form of grid-based A\\* algorithm? Maybe it is better to 'group' nearby searches to reduce the stress of re-calculating paths that are very similar.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/363", "title": "Villagers don't carry resources back to Town Centre", "body": "Kind of self-explanatory. Although, interestingly, they do carry things back when carrying gold.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26170424-villagers-don-t-carry-resources-back-to-town-centre?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/362", "title": "Game crashes when attempting to save a game file", "body": "```\r\nSIGSEGV\r\n\r\nFATAL: terminate has been called\r\n\r\ncurrent stack\r\n\r\nTraceback (most recent call last):\r\n  File ?, in _start+0x29 [0x401e19]\r\n  File ?, in __libc_start_main+0xf0 [0x7f9109eb4700]\r\n  File ?, in main+0x10b [0x403a84]\r\n  File ?, in ? [0x403933]\r\n  File ?, in PyInit_run+0x938 [0x403404]\r\n  File ?, in ? [0x7f910d2695f8]\r\n  File ?, in PyEval_EvalCodeEx+0x8c6 [0x7f910d2f8de6]\r\n  File ?, in PyEval_EvalFrameEx+0x85a2 [0x7f910d2f8162]\r\n  File ?, in PyEval_EvalFrameEx+0x835f [0x7f910d2f7f1f]\r\n  File ?, in ? [0x7f90fd45bbe4]\r\n  File ?, in ? [0x7f90fd45b839]\r\n  File ?, in openage::run_game(openage::main_arguments const&)+0x745 [0x7f910ce9f796]\r\n  File ?, in openage::Engine::run()+0x1f [0x7f910ce7909d]\r\n  File ?, in openage::Engine::loop()+0x18e [0x7f910ce78ae2]\r\n  File ?, in openage::input::InputManager::on_input(SDL_Event*)+0x98 [0x7f910cecf1c6]\r\n  File ?, in openage::input::InputManager::set_state(openage::input::Event const&, bool)+0x5e [0x7f910cecf124]\r\n  File ?, in openage::input::InputManager::trigger(openage::input::Event const&)+0xde [0x7f910cecef30]\r\n  File ?, in openage::input::InputContext::execute_if_bound(openage::input::action_arg_t const&)+0x3f [0x7f910cecd9f9]\r\n  File ?, in std::function<void (openage::input::action_arg_t const&)>::operator()(openage::input::action_arg_t const&) const+0x13 [0x7f910cecdeeb]\r\n  File ?, in ? [0x7f910ce82b2b]\r\n  File ?, in ? [0x7f910ce824a4]\r\n  File ?, in openage::options::OptionNode::do_action(std::string const&)+0x21 [0x7f910cea08a9]\r\n  File ?, in openage::options::OptionAction::do_action()+0xd [0x7f910cea0087]\r\n  File ?, in std::function<openage::options::OptionValue ()>::operator()() const+0x13 [0x7f910cea1d2b]\r\n  File ?, in ? [0x7f910ce9a224]\r\n  File ?, in openage::gameio::save(openage::GameMain*, std::string)+0x780 [0x7f910ce88d61]\r\n  File ?, in openage::gameio::save_unit(std::basic_ofstream<char, std::char_traits<char> >&, openage::Unit*)+0x100 [0x7f910ce88391]\r\n  File ?, in ? [0x7f9109ec8a50]\r\n  File ?, in ? [0x7f910cecbd39]\r\n  File ?, in ? [0x7f910a8009e1]\r\n  File ?, in ? [0x7f910a800996]\r\n  File ?, in openage::error::terminate_handler()+0xe2 [0x7f910cecbbbf]\r\n  File ?, in openage::error::StackAnalyzer::analyze()+0x77 [0x7f910cecc27d]\r\n\r\nstandard terminate handler\r\n\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n```", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/359", "title": "Rendering Glitch: Purple Trees", "body": "Running Mesa 11.0-git, Arch Linux 64bit, MATE, AMD Radeon HD 7750.\n\nI don't remember trees being this purple in the original game. Most likely a Mesa bug.\n\n![Purple Trees](http://i.imgur.com/M3hdd6j.png)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26108012-rendering-glitch-purple-trees?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zyavrik": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/315", "title": "iOS support", "body": "Can anybody add iOS support? There is no good strategy games in the App Store at all!\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/22330661-ios-support?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marespiaut": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/302", "title": "openage is still not available for Apple Watch\u00ae!", "body": "Hello,\n\nI recently bought an Apple Watch and I'm very disapointed to see that openage is not available for Apple Watch.\nThis is outrageous! I paid US$17k for this device and I can't play my favorite game on it.\n\nThis is very disapointing, considering the Apple Watch have a touch screen, I see no reason why no one have ported openage yet for it.\n\n_This issue is, of course, a complete joke. I don't even own an Apple device. Keep up the good work guys._\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/13474094-openage-is-still-not-available-for-apple-watch?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/283", "title": "Incorrect unit animation speeds", "body": "I've messed around with the latest revision of openage, and it seems that the idle animation of GENITX is too fast. Not sure if this unit is used in the original game.\n\nProbably it would be best adding some timing infrastructure or patch the wrong times in the convert script.\n\n@Jon0 is probably the best guess for fixing this.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/11398239-incorrect-unit-animation-speeds?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "charlesrgould": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/279", "title": "Add docs on developing in IDE(s)", "body": "There are [free licenses](https://www.jetbrains.com/buy/opensource/?product=clion) for open source (core devs only).\n\nhttps://www.jetbrains.com/clion/\n\n> nobody uses any IDEs (unless you count emacs). If you want to use an IDE, first of all reconsider: Neither C++ nor Python are IDE-centric languages (unlike Java or C#) -- [development.md](https://github.com/SFTtech/openage/blob/master/doc/development.md)\n\n:o\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/11154410-add-docs-on-developing-in-ide-s?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dbrgn": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/273", "title": "Male villagers become female villagers when building", "body": "This is a fun one. Steps to reproduce:\n1. Start openage\n2. Create four male villagers\n3. Create a construction site for a building\n4. Enter actions mode\n5. Select villagers\n6. Right-click on construction site\n\nThe male villagers immediately turn into female ones. SEXIST!!11!elf\n\n![openage_2015-04-12_03-38-36_00](https://cloud.githubusercontent.com/assets/105168/7104043/a5d9454a-e0c5-11e4-969d-86cb239703f4.png)\n\n![openage_2015-04-12_03-38-39_00](https://cloud.githubusercontent.com/assets/105168/7104044/a98fbac0-e0c5-11e4-88dd-19200bffbef3.png)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10958825-male-villagers-become-female-villagers-when-building?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/266", "title": "String resource markup format", "body": "I stumbled over this comment in the converter source:\n\n``` python\n# TODO: transform and cleanup the read strings...\n# (strip html, insert formatchars/identifiers, ...)\n```\n\nWhen take a look at the strings, the following format is being used:\n- `<Team>`\n- `<b>Mini-map<b>`\n- `Create <b> Samurai<b> (<cost>)`\n- ..\n\nI see two different \"features\" in there. The first one is the pseudo-HTML (it's not HTML as no proper closing tags are being used) that's being used for markup. The other thing is placeholders.\n\nMy suggestion is the following:\n- Use a markdown subset for markup: `*italic*`, `**bold**`, `***bold italic***`. Maybe also the underscore variants (although I prefer simplicity).\n- Use a placeholder syntax inspired by Python 3's named `.format()` syntax: `Create **Samurai** ({cost})`. I don't think we need formatting syntax like `!s` or `:.2`.\n- Convert all uppercase placeholders to lowercase. Convert camelCase (not sure if that even exists) to snake_case.\n- Strip unneeded whitespace\n\nSo the examples above would become:\n- `{team}`\n- `**Mini-map**`\n- `Create **Samurai** ({cost})`\n\nAn alternative placeholder could be like in the Django template language: `{{ placeholder_name }}`. That would also leave open the possibility for filters: `{{ begin_date|date:\"d.m.y H:M\" }}`\n\nOpinions?\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10198376-string-resource-markup-format?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/260", "title": "Failed to add inotify watch for some asset.", "body": "Trying to build the debug build on Arch Linux. When starting:\n\n```\n$ make run\n...\nDBG Texture has been loaded from assets/converted/Data/graphics.drs/4015.slp.png\nINFO Loading meta file: assets/converted/Data/graphics.drs/4015.slp.docx\n ERR Error: WARN cpp/assetmanager.cpp:62 (std::shared_ptr<Texture> openage::AssetManager::load_texture(const std::string &), thread 0): Failed to add inotify watch for assets/converted/Data/graphics.drs/4015.slp.png\nINFO cleanup container\nCRIT Exception: Error: WARN cpp/assetmanager.cpp:62 (std::shared_ptr<Texture> openage::AssetManager::load_texture(const std::string &), thread 0): Failed to add inotify watch for assets/converted/Data/graphics.drs/4015.slp.png\nMakefile:46: recipe for target 'run' failed\nmake: *** [run] Error 1\n```\n\nAny ideas?\n\n(Would be great if I could get it to run, we'll probably do a small openage dev hackathon in Switzerland in 2 weeks.)\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10061731-failed-to-add-inotify-watch-for-some-asset?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/10713560", "body": "Actually you can select 40 :)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10713560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "airon90": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/107", "title": "Translations", "body": "Hi, is there a plan to translate openage? I could localize it in Italian and Esperanto", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "boombatower": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/94", "title": "Create nightly distro packages", "body": "Breaking off from #81...\n\nI have [openSUSE build working](https://build.opensuse.org/package/show/home:boombatower:openage/openage) ([download instructions](http://software.opensuse.org/download.html?project=home%3Aboombatower%3Aopenage&package=openage)).\n\n~~I have [fedora and openSUSE builds working](https://build.opensuse.org/package/show/home:boombatower:branches:games/openage) ([download instructions](http://software.opensuse.org/download.html?project=home%3Aboombatower%3Abranches%3Agames&package=openage)).~~\n\nI have script created (which I need to commit somewhere, putting in package repo almost seems right, but not quite...I'll consider it).  The script can be setup on cron, pick the latest commit, update package repo and .spec file for latest commit tar ball, and push changes to repo to trigger build. I'll get that setup on remote server in the future, could possible be done via travis as well.\n\nIt may also make sense to move to something like `home:boombatower:openage` as the repository? I was originally branching games repo since that was my target, but on my request to move into official games repo it was suggested that non-playable games are probably not a good idea.\n\nIt would be slick if we did the necessary work to support building for .deb packages. https://en.opensuse.org/openSUSE:Build_Service_Debian_builds Perhaps someone is familiar with deb packaging? Then we can get nightly builds for all major distros from one place!\n\nOpen Build Service (OBS) is great in that it provides the familiar fork/branch and pull request workflow for packaging in addition to allowing us to package for all major distros in one place. Can even make changes through web interface!\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5725172-create-nightly-distro-packages?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/94/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/11", "title": "Battlefield style battlescreen", "body": "Basically a large second screen minimap with more detail. Perhaps showing unit icons instead of just colored pixels.\r\n\r\nThe Battlefield version is done using a web interface (not sure if connected to local game or central server). For openage it could be done in any variety of options.\r\n\r\nI bring this up since I've been doing some basic research into this before I discovered openage. My plan was to either intercept network traffic (like voobly does for observer proxy) or read the record game file as it is being written (assuming it dumps fairly often).\r\n\r\nThere is some code out there to parse the starting point of recorded games and stats and what not, which voobly uses on their site, but not a lot of info on the meat of the file. Does openage support recorded game files? As such I imagine I could look there.\r\n\r\nI would be interested in creating this if it sounds feasible, although my plan was do it as a local webservice. If there is information on recorded game format perhaps it would be better to create it standalone so it works for AoC, HD, and openage. Thoughts?", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60826944", "body": "It proceeds further as it used to trip up on sounds_x1.drs, but seems to still crap.\n\n``` bash\n$ git describe\nv2.2-324-g395f956\n```\n\n```\n$ make media AGE2DIR=\"/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/\"                                                                                                \nbuildsystem/runinenv PYTHONPATH=prependpath:py -- python3 -m openage.convert -v media -o \"assets/converted\" \"/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/\" graphics:*.* terrain:*.* sounds0:*.* sounds1:*.* gamedata0:*.* gamedata1:*.* gamedata2:*.* interface:*.*                                                   \nsetting age2 input directory to /var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/                                                                                                                  \nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/graphics.drs]                                                                                                                    \n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592                                                             \n  version:            1.00                                                                                              \n  ftype:              tribe                                                                                             \n  table count:        1                                                                                                 \n  file offset:        21292                                                                                             \n\nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/interfac.drs]                                                                                                                    \n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592                                                             \n  version:            1.00                                                                                              \n  ftype:              tribe                                                                                             \n  table count:        3                                                                                                 \n  file offset:        4348                                                                                              \n\nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/sounds.drs]                                                                                                                      \n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592                                                             \n  version:            1.00                                                                                              \n  ftype:              tribe                                                                                             \n  table count:        1                                                                                                 \n  file offset:        12328                                                                                             \n\nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/sounds_x1.drs]                                                                                                                   \n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592                                                             \n  version:            1.00                                                                                              \n  ftype:              tribe                                                                                             \n  table count:        1                                                                                                 \n  file offset:        4456                                                                                              \n\nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/gamedata_x1.drs]                                                                                                                 \n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592                                                             \n  version:            1.00                                                                                              \n  ftype:              tribe                                                                                             \n  table count:        1                                                                                                 \n  file offset:        1000                                                                                              \n\nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/gamedata_x1_p1.drs]\n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592\n  version:            1.00\n  ftype:              tribe\n  table count:        2\n  file offset:        172\n\nDRS header [/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/terrain.drs]\n  copyright:          Copyright (c) 1997 Ensemble Studios.\u2592\n  version:            1.00\n  ftype:              tribe\n  table count:        1\n  file offset:        400\n\nTraceback (most recent call last):\n  File \"/usr/lib64/python3.3/runpy.py\", line 160, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/usr/lib64/python3.3/runpy.py\", line 73, in _run_code\n    exec(code, run_globals)\n  File \"/home/boombatower/openage/py/openage/convert/__main__.py\", line 54, in <module>\n    main()\n  File \"/home/boombatower/openage/py/openage/convert/__main__.py\", line 51, in main\n    args.handler(args)\n  File \"/home/boombatower/openage/py/openage/convert/mediafile.py\", line 84, in media_convert\n    drsfiles[\"gamedata0\"] = DRS(\"Data/gamedata.drs\")\n  File \"/home/boombatower/openage/py/openage/convert/drs.py\", line 52, in __init__\n    self.header = DRS.drs_header.unpack(buf)\nstruct.error: unpack requires a bytes object of length 64\nmake: *** [media] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60826944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60841857", "body": "```\n$ ls -l \"/var/run/media/boombatower/8C2C93C52C93A8AA/Program Files (x86)/Steam/SteamApps/common/Age2HD/Data/\"\ntotal 250329\n-rw------- 2 boombatower users   329568 Apr  5  2013 blendomatic.dat\n-rw------- 2 boombatower users   741518 Apr  5  2013 blendomatic_x1.dat\n-rw------- 1 boombatower users    84471 Apr  5  2013 BlkEdge.Dat\n-rw------- 1 boombatower users     3056 Apr  5  2013 clf_pal.pal\n-rw------- 2 boombatower users      125 Apr  5  2013 custome_palette_list.txt\n-rw------- 2 boombatower users   926934 Dec  6  2013 empires2_x1_p1.dat\n-rw------- 2 boombatower users  1041720 Sep  2  2013 empires2_x1_v1.dat\n-rw------- 2 boombatower users  1350376 Sep 24 20:02 empires2_x2_p1.dat\n-rw------- 2 boombatower users   300124 Apr  5  2013 FilterMaps.dat\ndrwx------ 1 boombatower users     4096 Apr  5  2013 fonts\n-rw------- 1 boombatower users        0 Aug 22 21:57 gamedata.drs\n-rw------- 2 boombatower users  1766259 Sep 26 23:08 gamedata_x1.drs\n-rw------- 2 boombatower users   530869 Sep  2  2013 gamedata_x1_p1.drs\n-rw------- 2 boombatower users  4007358 Sep 26 23:08 gamedata_x2.drs\n-rw------- 2 boombatower users 65479394 Sep 24 20:02 gamedata_x2_p1.drs\n-rw------- 1 boombatower users 86137347 Apr  5  2013 graphics.drs\n-rw------- 1 boombatower users 44276389 Jun 19 00:11 interfac.drs\n-rw------- 2 boombatower users    73800 Apr  5  2013 lightMaps.dat\ndrwx------ 1 boombatower users     8192 Aug 27 20:06 Load\ndrwx------ 1 boombatower users        0 Apr  5  2013 Loc\n-rw------- 1 boombatower users   124623 Apr  5  2013 LoQMaps.dat\n-rw------- 1 boombatower users     2976 Apr  5  2013 pal_2.pal\n-rw------- 1 boombatower users     2933 Apr  5  2013 pal_3.pal\n-rw------- 1 boombatower users     2982 Apr  5  2013 pal_4.pal\n-rw------- 1 boombatower users     3103 Apr  5  2013 pal_5.pal\n-rw------- 1 boombatower users     2718 Apr  5  2013 pal_6.pal\n-rw------- 2 boombatower users   164000 Apr  5  2013 PatternMasks.dat\n-rw------- 1 boombatower users     1167 Apr  5  2013 shadow.col\ndrwx------ 1 boombatower users    32768 Aug 22 20:46 Slp\n-rw------- 1 boombatower users 29678340 Apr  5  2013 sounds.drs\n-rw------- 1 boombatower users 12003432 Apr  5  2013 sounds_x1.drs\n-rw------- 1 boombatower users     7208 Apr  5  2013 STemplet.dat\n-rw------- 1 boombatower users  6649972 Apr  5  2013 terrain.drs\ndrwx------ 1 boombatower users        0 Sep 23  2013 Textures\n-rw------- 1 boombatower users   209287 Apr  5  2013 TileEdge.Dat                                                       \n-rw------- 1 boombatower users   327680 Apr  5  2013 view_icm.dat         \n```\n\nAs discussed in IRC, removed the 0 byte gamedata.drs file and script ran. Had to install a few python 3.x dependencies, but appears to have succeeded!\n\n```\nmedia files extracted: 3619\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60841857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60842205", "body": "Looks nice! http://i.imgur.com/ZOHfIc6.jpg\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60842205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60851899", "body": "I'll probably whip up a package on Open Build Service. Not it supports more than openSUSE so .deb instructions can be placed there as well by someone familiar with .deb packaging.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60851899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60859845", "body": "That could be quite cool. Transport over river and hold while you build a bridge.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60859845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61393578", "body": "I'll look into adding a rule. Also, a preview:\n\n![](http://i.imgur.com/B6NoeDu.png)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61393578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61394377", "body": "I recommend that I rebase the branch before it is pulled so there is no copy of binary image in history. Also not sure how close I am with cmake stuff or how to get it included since it does not seem to be executed. I'll leave it here and wait for input.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61394377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430341", "body": "Perhaps one of the many solid ones found at http://www.reddit.com/r/loadingicon/ ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430553", "body": "One in OBS: https://build.opensuse.org/package/show?project=multimedia%3Alibs&package=opusfile\n\nCould branch and provide deb instructions and a repo quite easily if someone familiar with deb packaging. Otherwise not sure if something like `alien` to install rpm on deb system.\n\nPackman also has one.\nhttp://packman.links2linux.org/package/opusfile/545334\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430655", "body": "Great! Not familiar with ubuntu repos, but if not super easy to adhoc host can build against ubuntu on obs.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61430655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61437311", "body": "Seems like hard wiring milestones to version tags is a mistake. Down the road I would expect bug releases and such which will muck up milestone releases and even overlapping milestones and such where you want to release new stuff, but a particular milestone is not complete. Milestones are goals for development (or even versions), but they shouldn't be thought of as the versions themselves.\n\nHalf the point of this seems to be enhanced modding/scripting/etc and even people making other games off the engine which means the API and which version mods are compatible with would definitely benefit from semver.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61437311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "olafito18": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/51", "title": "Allow building bridges in-game", "body": "Would be nice if you can add support to build a bridge in game mode. This is posible in map editor but not in game.\n\nThanks.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5620684-allow-building-bridges-in-game?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/51/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oldlaptop": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/33", "title": "Rendering of buildings broken under r300g/Mobility FireGL V5250 (poor driver/hardware support?)", "body": "Buildings simply do not render under r300g (on a Mobility FireGL V5250, like Radeon X1700) : http://plantmonster.net/~oldlaptop/images/openage-blackbuilding.png\n\nThe following fragment of console log seems relevant:\n\n```\nr300 FP: Compiler Error:\n../../../../../../src/gallium/drivers/r300/compiler/r500_fragprog_emit.c::emit_paired():  emit_alu: Too many instructions\nUsing a dummy shader instead.\n```\n\nWhether this can or should be fixed on openage's end, I don't know. Perhaps it's even a hardware limitation.\n## <bountysource-plugin>\n\nWant to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/5566202-rendering-of-buildings-broken-under-r300g-mobility-firegl-v5250-poor-driver-hardware-support?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/33/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60769139", "body": "I tried setting LIBGL_DEBUG and MESA_DEBUG to \"verbose\", nothing of real relevance:\n\n```\nlibGL: screen 0 does not appear to be DRI3 capable\nlibGL: pci id for fd 8: 1002:71d4, driver r300\nlibGL: OpenDriver: trying /usr/lib/x86_64-linux-gnu/dri/tls/r300_dri.so\nlibGL: OpenDriver: trying /usr/lib/x86_64-linux-gnu/dri/r300_dri.so\nlibGL: Can't open configuration file ~/.drirc: No such file or directory.\nlibGL: Can't open configuration file ~/.drirc: No such file or directory.\n<lots of openage's spew about loading textures>\n<much further down, the same message I reported earlier>\n```\n\nI do see a few messages from openage about '[asset file] not present, ignoring...'; it looks to me like most/all buildings are being loaded correctly though. If you are interested in the full 4 kiloline log, I can post it somewhere.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60769139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61002333", "body": "After some discussion on IRC (thanks especially to mareko in #radeon), the conclusion seems to be that the shader in question (https://github.com/SFTtech/openage/blob/master/assets/shaders/teamcolors.frag.glsl) is more than this particular hardware can handle (although in the process it was discovered that the shader compiler was unrolling loops where it shouldn't). Specifically the hardware doesn't support indexing arrays with non-constant values, and the compiler has to work around that (which gets too wordy with big arrays). mareko did have a suggestion for optimizing the shader for this hardware, though:\n\n```\n[16:22:58] <mareko> oldlaptop: it's definitely indirect addressing, sorry, that shader cannot run on R500, the solution is to set the player_color array as a 1D texture and use texture1D() to read it, that should work\n[16:24:08] <mareko> oldlaptop: that's the only way to do indexing to a huge read-only array with a non-constant expression in a fragment shder\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61002333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61037485", "body": "I'll take a stab at this.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61037485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61205134", "body": "oh drat, VCS shenanigans lost an #include.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61205134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mappu": {"issues": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/9", "title": "Windows support [$30]", "body": "Windows should be a major supported target either by native compilation or cross-compilation.\n\nOpenage currently builds fine under Win32 with some minor patches ( http://i.imgur.com/Hxpym3K.jpg ) but there is no documentation available or binaries. I'll document the steps i used to build for win32 below:\n## <bountysource-plugin>\n\nThere is a **[$30 open bounty](https://www.bountysource.com/issues/5541383-windows-support-30?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github)** on this issue. Add to the bounty at [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F371436&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/9/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60547745", "body": "**DEPENDENCIES**\n\nInstall MSYS2 with mingw-w64 toolchain\n\n```\npacman -Syu\n```\n\nInstall opusfile (not currently packaged by MSYS2 distribution)\n\n```\nwget http://downloads.xiph.org/releases/opus/opusfile-0.6.tar.gz\n./configure --prefix=/mingw32/ --{build,host,target}=mingw64-i686\nmake install\n```\n\nInstall dependencies\n\n```\npacman -S mingw-w64-i686-{SDL2,SDL2_image,glew,freetype,ftgl,opus,opus-tools,libogg,python3-numpy,python3-Pillow}\nfc-cache\n```\n\n**PATCHES**\n\nBuildsystem patches: (I gave up on cmake)\n- configure: Comment out 258-259, MSYS2 doesn't support symlinks.\n- configure: Add `invocation.append('-G')` `invocation.append('MSYS Makefiles')` around line 278.\n- buildsystem/simple: line 18 add `set -e` for debugging\n- buildsystem/simple: `sed -i 's~/usr/include/~/mingw32/include/~g' buildsystem/simple`\n- buildsystem/simple: remove `-z,relro` and `-fPIC` options\n- buildsystem/simple: move `-lpython3.4m` to the END of the python ext module build\n- buildsystem/simple: change `PYTHONPATH` to just `PYTHONPATH=py`\n- buildsystem/simple: Remove `-l{GLEW,GLU,GL,SM,ICE,X11,Xext,util}` from main gcc build ; move libraries to end ; `-lSDL2` doesn't need to be there twice ; add `-lglew32 -lopengl32`\n- buildsystem/simple: Add `-Wno-format`. There are lots of minor printf format issues owing to building on ILP32 platform.\n\nC++ patches:\n- utils/fds.h: comment out termio.h, comment 84\n- utils/fds.cpp: comment out pty.h, comment 26-27, comment 101-111, comment 115-118\n- console/tests.cpp: comment out pty.h, comment 36-158\n- audio/hash_functions.h: change to <<16 for ILP32 platform. This seems unused?\n- main.cpp: append the WinMain wrapper from http://www.flipcode.com/archives/WinMain_Command_Line_Parser.shtml , since main() doesn't seem to be called as-is and `ld` can't find the usual mainCRTStartup wrapper\n\nPython patches:\n- py/openage/convert/dataformat.py:1051: should be snippets_body_sorted ( issue #7 )\n- py/openage/convert/mediafile.py:20: dat_cache_file = \"C:/tmp_empires2_x1_p1.dat.pickle\"\n\n**BUILD**\n\nBuild binary\n\n```\n./configure --mode=debug --c-compiler=gcc --cpp-compiler=g++ \ncp -R .bin/gcc-debug-01 ./bin\nbuildsystem/simple\n```\n\nBuild assets (takes a long time and 600MB+ ram.)\n\n```\nPYTHONPATH=py python3 -m openage.convert -v media -o \"assets/converted\" \"/c/Program Files (x86)/Age of Empires/\" graphics:*.* terrain:*.* sounds0:*.* sounds1:*.* gamedata0:*.* gamedata1:*.* gamedata2:*.* interface:*.*\n```\n\nConvert all *.docx files from CRLF to LF\n\n```\nfind ./assets/converted/ | grep 'docx$' | xargs -n1 sed -rie 's/\\r\\n/\\n/'\n```\n\nThis conversion is slow, it would be better to fix the script to produce LF instead of CRLF on MSYS2 platform.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60547745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tusharpm": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/01012d852133c6512d1f5e33973d3a3f888bb876", "message": "doc: miscellaneous\n- include nyan update\n- line breaks for multiple sentence lines.\n- clarify build and run instructions"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/1fb34885ad018bcafb79c8d9c08f0565438be23e", "message": "buildsystem: adjustment for MSVC\n- skip \"untested compiler\" message\n- skip optimization/sanitizing flags"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/807a50f899d91f3fe29d86922e10f32c8edc1054", "message": "doc: add instructions to install fonts on Windows"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/3649f7dac5f9744f064ddde5c09db03736652d38", "message": "doc: add MSVC build instructions to answer some FAQs"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/0d9e145c13a98cca0143f480b84b77c61bdf7329", "message": "buildsystem: add known compiler versions to error message"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/c2e0e9de08f65e7c2d3bedc49ee51072362fa9d4", "message": "buildsystem: add details in error message"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/cc58cd5e68aa9afd55670b65638a382844895e40", "message": "buildsystem: require c++ compiler to support following c++17 features\n- nested namespaces\n- structured bindings"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/208178aa4572acdefe75baaac55a0f35ecb89be8", "message": "Merge pull request #939 from TheJJ/nyan-link-lib\n\nLink to nyan library"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7417e68f745b9ed6fb2ebbb7c274b89217a26e34", "message": "Use safe path separator"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/dffbbe98a2660e60f188df4980e3700a66c610f8", "message": "doc: add packaging instructions for Windows"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/4690ee6c0217390315bbdd8f91d4d6b4a50e3e17", "message": "openage: Replace exit with sys.exit in python files\nUse python -m openage to start"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/f799ecfedf37372ece3cf0c86d2e7d34bdf3198e", "message": "buildsystem: Windows installer using CPack\n\nPackaging basics\nReduce CMake install code clutter\n\nSeparate cmake script responsibilities\nSeparate download_cache function\n\nEmbed python\nInclude python script to copy modules\n\nEmbed font\nInclude fontconfig configuration\n\nPackage dll dependencies using cmake\nFind windeployqt at CMake configure stage\nInstall qt dependencies in the application directory\nAllow using pre-installed qt\n\nAdapt to install dir\nFinalize all dependencies"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/161400d0fb6c53db228fe14dcc7e639e2f413e8d", "message": "openage: get more tests to pass on Windows"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/b5a5e3649741e6624606afbe3d662105e58ebd06", "message": "Add links to the windows documentation"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/5484921ed7888d4d319c861fe3a31c01ea1fdcf2", "message": "Update Windows dependencies"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d7c4c40651953fd1d783e424945736d4d3138712", "message": "Add name to copying.md"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/6b85e34250eced5b9ff7a6fa87a19b9d567a5bf5", "message": "doc: instructions for Windows MSVC\nintroduce `OAAPI`"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/214693082f7b5f41ddca0718b23d5732c3baf902", "message": "openage: HACK: path usage"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/faae03bcbfd6685b2db8bd80a63b5762bcfc490e", "message": "libopenage: Fixes for MSVC\nConsolidate compiler specific attributes into macros\nReduce/remove usage of unistd.h\nDefine ssize_t appropriately for Windows\nIntroduce `OAAPI` for decorating DLL entry points\nReduce CONCAT and LOOP macros argument count"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/fdc00668c2957a2a1137a376f1396325e9787e0a", "message": "guisys: Use #582 with modifications\nUpdates for MSVC build"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/102a8236f6c14637358d42377ae102d7629f5c17", "message": "buildsystem: Fix paths and usage\nTweak to find python library\nFix inplacemodules for msvc build"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/53e6bb3590632e434a0d4bf786bf1663440deb53", "message": "gitignore: Windows build files"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nyx": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/ba0fc4609cfec4173ab10807ed735a85e254ac8b", "message": "update Homebrew-Cask installation instruction\n\nit seems this process has changed"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vaibhavkaul": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/a01062a4d53081c1ba132843c0620f97485e211c", "message": "doc/ideas: add villagers hiding in trees."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alanyee": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/cc00d491a1cabc8839a4c1136ed15a5d522ff9bc", "message": "readme: update for https linkx and macOS name"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "devnexen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/e64f6c4d71608095bee81a31021054c8809499ff", "message": "Let s just use directly the cmake variable, avoiding\nthe system detection 'dribble' Linux/FreeBSD"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/8322e29e02f78f3041039c1b0cf0a1b96cb40b52", "message": "instructions for FreeBSD system"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/7c4684ed8555bb8909892e8270632b0d741646ff", "message": "Adding FreeBSD support"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Arkanosis": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/a6dc3eb75650c97cb0a04edced06ba6097a59e6c", "message": "doc: add the default Steam Linux path to the examples"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chocoladisco": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/5c64467fb7e854368ada479acc110d31d7c74356", "message": "Added myself to contributors"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/61668c512607e3c6e414b7af1a67ee71fce1f482", "message": "Create debian.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PythonicChemist": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/1b82476430c9870ca706a514680e39af4be04369", "message": "util/strings.py updating to same string formatting method and slight refactor of binstr()"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/030f77b09f561ca0d6decd3a7270b54dc501f7b0", "message": "Added to copying.md"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/d08611c77035a71a268c1d15c36c44aaea8ab4b8", "message": "[Refactor] util/system.py free_memory() single exit point"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/938", "title": "util/iterators.py removed superfluous ListIterator for iter() and refactored denote_last", "body": "ListIterator was only used once and reimplemented iter() so I replaced it with iter().\r\n\r\nI didn't like the \"while True:\" loop in denote_last, so I researched a cleaner way of implementing the logic. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kev946": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/7da8901e9c0a6dfd97fcdbc244c6d1e780f8a0e2", "message": "Remember previous asset location\n\nAddresses #807"}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/9c151e572e664b750eed16c38c94f4be6c9edba9", "message": "Consolidate fedora build instructions into a single document\n\nAddresses #915"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "katamaritaco": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/1999cae52598cf3b6b274253a1b39091af4094f8", "message": "Update typo in README\n\nwow such big important changes."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "arialwhite": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/fbb4b935f2e02e48633330850b4261acae14bf01", "message": "create doc/debug.md"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "piotr-szpetkowski": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/90fd890e28b03baf8c90840c50c69beb8cc8669a", "message": "Update C-style cast to static_cast in program.cpp"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PetterBomban": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/db239cb95bbabd6919c19f6fc960ff30ffe0ec68", "message": "Fixed spelling mistake in README\n\nChanged \"und\" to \"and\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ohn0": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/b19e4d8a0f2e578372d80896a68607862f2ae771", "message": "util: added python profiling helper class"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cdw33": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/83150c495b76a5b4f0cdd2221ca89289b23b9cf2", "message": "Implemented mouse controlled game window movement"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stiopaa1": {"issues": [], "commits": [{"url": "https://api.github.com/repos/SFTtech/openage/commits/e84f9ea63e11eca403e3e215c3b02cccf578a009", "message": "renderer/color: cleanup\n\n-remove copy constructor and assignment operator(default ones are fine)\n-change operator!= to use operator=="}, {"url": "https://api.github.com/repos/SFTtech/openage/commits/ec73b7717bfb873682781532b99e475f74516c4f", "message": "Add contributor to copying.md"}], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/810", "title": "[WIP] speed up initial loading of the textures", "body": "use several threads for loading SDL_Surface", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gocarlos": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/956", "title": "[WIP] snapcraft packaging", "body": "", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wanderrful": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/936", "title": "Fixed minor typo in main_cpp.pyx", "body": "Don't mind me, just fixing a typo.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sandsmark": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/922", "title": "[WIP] Minimap", "body": "just rebased #559, + added support for using the mouse to move around from the minimap.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "LordAro": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/789", "title": "Monk conversions instead of killings, rebased", "body": "Supercedes #428. No functional changes (I haven't even tested it beyond compilation & tests!), and @bombadie retains primary commit authorship\r\n\r\nI got very bored.\r\n\r\nFixes #375", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60684702", "body": "-1 to UUIDs\nimo (which totally counts) is that they're unnecessary and just complicate things. Sure it decreases the chance of collisions to effectively 0, but how often do you come across an environment in which [...]_H is already defined? never, i'd reckon..\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60684702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61356531", "body": "oops, broke build, please hold\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61356531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61378959", "body": "Hmm, i don't know. I think the () is more normal, and sure, the {} is now the \"uniform initialization\", but it's by no means used everywhere.\n\nClearly a coding style decision needs to be made, but I don't think \"because Uniform Initialization\" is a good reason\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61378959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61407986", "body": "shall i add a commit to this prq?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61407986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61413881", "body": "I see no issue with storing images in the repo, if they're necessary\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61413881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20045919", "body": "I was under the impression that this did not vary, even for AoE and Star Wars: Galactic Battlegrounds (except for year). Certainly, all DRS tools work with AoE and SWGB drs files\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20045919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20048936", "body": "Very well, i'll readd it\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20048936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20017586", "body": "also indentation\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20017586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489235", "body": "eeeewwww. Surely there's a better way of doing this?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489264", "body": "See above. You shouldn't have to manually specify the deleter method like that\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489287", "body": "Not a huge fan of the typedef either, but meh\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489301", "body": "pointless change is pointless\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489370", "body": "unnecessary string? i would've thought \"gl not initialized properly\" would be obvious from \"glGenBuffers != nullptr\" ?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489440", "body": "{} style for initialiser lists\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489537", "body": "this line looks very unfriendly to me also. maybe break it up a bit?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jprashanth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/560", "title": "[WIP] Another bold attempt at out of source builds", "body": "- Moves python build process from cmake to setuptools\n- Removes the clutter of cmake files from python packages\n- Moves generation of pxd files, cython c++ files, python extension from source dir to binary dir\n- Removes various buildsystem routines like pxdgen, check_py_file_list, compilepy, cythonize, inplacemodules\n- Now, no configuration dependent files (config.h, config.cpp) are generated inside the libopenage directory\n- Single point of version specification. Now, there is no need to invent a way to re-configure the project when the git HEAD changes\n- Introduced a central source for storing and retrieving build metadata\n- Removes the awkward cmake configuration for config.py.in\n- Simpler approach to DEVMODE\n\nAddresses #398 #381 \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19923903", "body": "any suggestions?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19923903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jamesmintram": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546224", "body": "> Also, why libopus-dev libvorbis-dev? They should be pulled in by libopusfile, shouldn't they?\n> Ah yeah - that was an artifact of me working through the dependencies!\n> \n> would you mind placing this in the #dependencies section? (basically under the dependency list and before \"Build procedure\")\n\nSure\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546397", "body": "Should be good now.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60546397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60789293", "body": "Yeah - I think that is xcode screwing around with me! I've updated my settings now!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60789293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60803290", "body": "I have started working on this here: https://github.com/jamesmintram/openage/tree/graphics_renderer\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60803290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60861370", "body": "I have used CPPCheck on other projects - it is good for hooking into CI too: http://cppcheck.sourceforge.net/\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60861370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61020016", "body": "Gonna look into this as part of #34\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61020016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mdparker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560969", "body": "Since the project is using C++ 11, there's no reason not to simply use \"#pragma once\" at the top of each header. All modern C++ compilers support, AFAIK.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60560969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "snoek09": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561220", "body": "Or add version 3.4 to the list in (Ubuntu 14.04):\n\n/usr/share/cmake-2.8/Modules/FindPythonLibs.cmake (line 41)\n/usr/share/cmake-2.8/Modules/FindPythonInterp.cmake (line 36)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60561220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "organman91": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562595", "body": "On Ubuntu 14.04 the latest available version is 2.8.12 (unless there's a suitable backport).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60562595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LeviSchuck": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590346", "body": "I upgraded to 10.10 with brew and had problems with python. I removed brew and reinstalled it, as well as packages I regularly use.\n\nPerhaps you can try that. (I have not tried to build this yet, as I only started watching yesterday :sweat_smile: )\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60590346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60927946", "body": "Would it be possible to alternatively provide mesa 3d (software opengl implementation) for such needs?\n\nI've seen a guy use mesa in dosbox for fun. \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60927946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61003849", "body": "Is the solution to make it a compatible shader (and not taking advantage of current hardware?) or to have shader overrides for certain chipsets that fulfill the basic function?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61003849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dalexandrov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60592122", "body": "@kloplop321 I've reinstalled brew yesterday. Did not help.\n\n@mic-e I've tried to find fix in the issue specified, still the same stuff. \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60592122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60651033", "body": "The only thing left:\n\nopenage v2.2-285-gf7268cc\n\n```\n  compiler | GNU 4.9.1\n  cxxflags | -O2 -Wall -Wextra -pedantic -std=c++11\n```\n\ninstall prefix | /usr/local\n     build dir | /Users/mitia/openage/openage/.bin/gcc-release-O2\n\nCMake Error: The following variables are used in this project, but they are set to NOTFOUND.\nPlease set them or make sure they are set and tested correctly in the CMake files:\nOPUSFILE_INCLUDE_DIR\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\nOPUSFILE_LIB\n    linked by target \"openage\" in directory /Users/mitia/openage/openage/cpp\nSDL2IMAGE_INCLUDE_DIRS\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\nSDL2IMAGE_LIBRARIES\n    linked by target \"openage\" in directory /Users/mitia/openage/openage/cpp\n\nWhats wrong?\n\nThank you!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60651033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60652679", "body": "@svkurowski \nyep, installed, still got:\n\nOPUSFILE_INCLUDE_DIR\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\nSDL2IMAGE_INCLUDE_DIRS\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n   used as include directory in directory /Users/mitia/openage/openage/cpp\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60652679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60660154", "body": "Ok, fixed. Configure now works, but the make fails. In my case:\n/usr/local/Cellar/opusfile/0.6/include/opusfile.h:110:11: fatal error: 'opus_multistream.h' file not found\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60660154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61084975", "body": "configure is ok, but then make suffers.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61084975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61088359", "body": "gcc: error: unrecognized command line option '-stdlib=libc++'\n\nAre you building with gcc or clang?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61088359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61092775", "body": "switched to clang:\n/Users/mitia/openage/openage/cpp/texture.h:5:10: fatal error: 'GL/gl.h' file not found\n#include <GL/gl.h>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61092775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61096140", "body": "nice but..\nopenage/cpp/font.cpp:3:10: fatal error: 'fontconfig/fontconfig.h' file not found\n#include <fontconfig/fontconfig.h>\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61096140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117132", "body": "OK! Build completed.\nNow.. any chance to run it? ..openage/bin/cpp/openage is this the correct path?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117432", "body": "Just for info, my config was kind of this:\n\n``` bash\n ./configure   --flags=\"-stdlib=libc++  -I/usr/local/Cellar/fontconfig/2.11.1/include/ -I/usr/local/include/SDL2 -I/usr/local/Cellar/opus/1.1/include/opus -I/usr/local/Cellar/opusfile/0.6/include/opus -I/usr/local/Cellar/opus/1.1/include/opus\"   --ldflags=\"-stdlib=libc++ -lSDL2_Image -lSDL2main\"   --raw-cmake-args   -DPYTHON_INCLUDE_DIR=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4.2/include/python3.4/   -DPYTHON_LIBRARY=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/lib/libpython3.4m.dylib   -DPython_FRAMEWORKS=/usr/local/Cellar/python3/3.4.2/Frameworks/Python.framework   -DSDL2IMAGE_INCLUDE_DIRS=/usr/local/Cellar/sdl2_image/2.0.0_1/include   -DSDL2IMAGE_LIBRARIES=/usr/local/Cellar/sdl2_image/2.0.0_1/lib/libSDL2_image-2.0.0.dylib\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61117432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "svkurowski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60606802", "body": "Actually I chatted with @mic-e on the IRC channel and we concluded to have a `cpp/crossplatform/opengl.h` file that includes the appropriate files to avoid having platform specific code in each header.\nI will do that later and open a pull request unless he's faster than me ;)\n[This stackoverflow answer](http://stackoverflow.com/a/16203192) gives some hints for cmake based approaches.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60606802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60629962", "body": "Install python3 via homebrew and then pass the following to the configure script. You may need to change the python version.\n\n```\n  --raw-cmake-args \\\n  -DPYTHON_INCLUDE_DIR=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/include/python3.4m/ \\\n  -DPYTHON_LIBRARY=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/lib/libpython3.4.dylib \\\n  -DPython_FRAMEWORKS=/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework\n```\n\n[This](https://gist.github.com/svkurowski/746e85f1e28eeefc30f1) is the whole command I use to configure right now. Compilation will fail due to [this llvm bug](http://llvm.org/bugs/show_bug.cgi?id=18350). @fr3akout is working on that after we discussed it in the irc channel.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60629962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60651369", "body": "Did you install `opus,`opusfile`,`sdl2`and`sdl2_image` using Homebrew?\nIf so, did you use the whole command I posted above?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60651369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60653092", "body": "Well, the corresponding lines in my command are:\n\n```\n-DOPUSFILE_INCLUDE_DIR=/usr/local/Cellar/opusfile/0.6/include/ \\\n-DSDL2IMAGE_INCLUDE_DIRS=/usr/local/Cellar/sdl2_image/2.0.0_1/include/\n```\n\nCould you do\n\n``` bash\nls /usr/local/Cellar/opusfile/0.6/include/\nls /usr/local/Cellar/sdl2_image/2.0.0_1/include/\n```\n\nand check if the header files are there?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60653092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60663238", "body": "~~Yeah I had that too, that is an upstream bug in homebrews' opus/opus_file in my opinion.\nI will investigate upon it and maybe post an issue to the homebrew repo.\nSetup the following symlinks to fix it for now: [..]~~\n\nThis got fixed in [this pullrequest](https://github.com/SFTtech/openage/pull/36). The Python problem persists and will be discussed in #40 .\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60663238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60758928", "body": "I +1 @mic-e 's approach.\nAlso we need to change the [example header file](https://github.com/SFTtech/openage/blob/master/doc/code_style/mom.h), too.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60758928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60763771", "body": "It's a cmake issue. The official FindFrameworks and FindPythonLibs modules don't recognize homebrew supplied Frameworks (which get installed to `/usr/local/Frameworks/`).\nAnd Python is packed as a Framework on OS X.\nAdditionally FindFrameworks doesn't even allow to specify additional Frameworks folders.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60763771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60778381", "body": "I recommend to close this pull request without merging as alot is unnecessary by now.\n@jamesmintram could you open a separate branch/commit/pullrequest with just the changes to the a star implementation? By the way nice job on finding how to change the implementation :+1: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60778381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60834883", "body": "Atleast on OS X, setting the env variables won't work. As @mic-e said you have to pass them to cmake via the configure script:\n\n``` bash\n./configure -c llvm --raw-cmake-args --mode debug \\\n  -DPYTHON_LIBRARIES=/usr/lib/python3.4/config-3.4m-x86_64-linux-gnu/libpython3.4m.so\n  -DPYTHON_INCLUDE_DIR=/usr/include/python3.4\n```\n\nChange `llvm` to `gnu` if you're using `gcc` obviously.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60834883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60835088", "body": "This issue can be closed.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60835088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61126091", "body": "You run it by executing `make run`. Make sure to convert the media files first though.\nSee [the building documentation](https://github.com/SFTtech/openage/blob/master/building.md#for-developersusers-who-want-to-try-the-project).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61126091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61236479", "body": "This happens for me at every start of the program. It doesn't fix itself. The program stays a long time in the `openage::util::read_whole_file` function. So far I have encountered two parameters that cause the program to stay so long in that function. The first is `0x0` i.e. an `nullptr`. This should be fixed by adding a null check (which we should do anyways). More interestingly however would be why this function does even get called with `nullptr` as parameter.\nThe second parameter that causes the function to take a long time is `\"#struct unit_dead_or_fish\\n#adds walking graphics, rotations and tracking properties to units.\\n#int16_t,uint16_t,uint16_t,enum unit_classes,int16_t,int16_t,int16_t,int16_t,int16_t,float,float,int16_t,i\"`. Again, why is the function called with this parameter?\nI guess his is related to the game assets (different original game versions maybe).\nI will try to find out more.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61236479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "thehydroimpulse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625186", "body": "Same issue for me. Tried a bunch of workarounds, trying to overwrite which version of python cmake uses with `-DPYTHON_EXECUTABLE` with no luck.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60625186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633592", "body": "@svkurowski Yep, that worked perfectly. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60633592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60651821", "body": "@svkurowski Using the whole command does indeed work.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60651821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61017030", "body": "You might also need to add `-DPYTHONLIBS_VERSION_STRING=3.4.1` given the recent change.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61017030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61017103", "body": "You might have to add the `-lstdc++` ldflag for it to build python in correctly.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61017103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61170047", "body": "This would be awesome to have. You could definitely have a web service as a proxy to the game server. It would connect to the game server and proxy the needed data to a web socket, for example. Considering Battlefield achieves this with dedicated servers, it's slightly more challenging when you have a peer-to-peer network.\n\nOne could have a python server (as a plugin/module) send the needed data to a web socket. Polling would be another alternative, or comex but a web socket would be vastly more efficient. Then you can load up the \"battle\" screen in a browser on another device or monitor.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61170047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "elfring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60628703", "body": "- Most changes for this update suggestion were automatically generated by my patch creation program which reuses the function \"[uuid_generate_random](http://linux.die.net/man/3/uuid_generate_random)\".\n- I do not really care for those comments that mark the end of affected include guards. I would be more interested to improve the header files that will be generated in the subdirectory \"gamedata\". Does this software build step reuse a template file which I do not know and find so far?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60628703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60671427", "body": "A single trailing underscore is fine for C++ standard compliance from my point of view. This character will also contribute a bit to my wishes around identifier uniqueness at the end, won't it?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60671427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "daveheitzman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60704662", "body": "yes. I've installed python3-dev. I've been looking at the guidelines as well, to no avail. \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60704662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60754367", "body": "tried setting ENV .. no luck. \n$ ~/_code/openage$ env | grep PY\nPYTHON_LIBRARIES=/usr/lib/python3.4/config-3.4m-x86_64-linux-gnu/libpython3.4m.so\nPYTHON_INCLUDE_DIR=/usr/include/python3.4\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60754367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60847480", "body": "@goto-bus-stop - your solution worked. It has built! \n\n~/_code/openage$ ./configure --mode=debug\n\n...\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/gruen/_code/openage/.bin/gcc-debug-O1\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60847480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60850607", "body": "./configure worked, but now make fails\n\n/usr/bin/gcc -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.3m -c /home/gruen/_code/openage/py/openage/convert/cabextract/lzxd/lzxd.cpp -o build/temp.linux-x86_64-3.3/home/gruen/_code/openage/py/openage/convert/cabextract/lzxd/lzxd.o -O1 -Wall -Wextra -pedantic -std=c++11\n...\nIn file included from /home/gruen/_code/openage/py/openage/convert/cabextract/lzxd/pyinterface.cpp:1:0:\n/home/gruen/_code/openage/py/openage/convert/cabextract/lzxd/pyinterface.h:4:20: fatal error: Python.h: No such file or directory\n #include <Python.h>\n\nIt fails to find Python.h \n\nI suspect it has to do with it looking for that in the /usr/include/python3.3m directory. But I do not know how to make the build system use /usr/include/python3.4m, which does contain Python.h\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60850607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60931415", "body": "Okay that works. Now, last problem I'm having is compiling the assets. \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60931415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "luan-cestari": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60755954", "body": "About your issue, have you tried the python 3.3 (instead of 3.4)?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60755954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60756008", "body": "Link for what I think you can do to install other versions http://stackoverflow.com/a/10961035/1322969\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60756008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60761285", "body": "I didn't know that, thanks =) (I thought that you guys chose that library to do the cross compilation). I tried 'export FONTCONFIG_LIBS=\"/usr/lib/libfontconfig.so.1\" '  and 'export FONTCONFIG_LIBS=\"-L/usr/lib/libfontconfig.so.1\" ' but both didn't work, got the same error message =/\n\nBy the way, I have the /usr/lib/libfontconfig.so.1.8.0 , I can run readelf (or other command) if you think that could output something meaningful for this issue.\n\nThank in advance for helping me =)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60761285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60786026", "body": "Nice =D It worked. I could not understand why the other library isn't expose (I tried to search in the confiigure file and it isnt a explicit specific reference to that library). So I just executed 'sudo ln -s /usr/lib/libfontconfig.so.1 /usr/lib/libfontconfig.so && sudo chmod 777 /usr/lib/libfontconfig.so' and it worked like a charm.\nThen, when I tried to make it, I got an error due my misunderstood with mingw32, so I fixed that with 'sudo yum install fontconfig-devel'\n\nNow it generated the binary but when I ran it got an wierd execption:\n$ ./openage \nMSG   launching engine with data directory './'\nMSG   initialized SDL audio subsystems.\nMSG   Using audio device 'default' [freq=48000,format=32784,channels=2,samples=2048]\nMSG   initialized SDL video subsystems.\nDBG0  Maximum supported texture size: 8192\nDBG0  Maximum supported texture units: 32\nDBG2  queried font: DejaVu Serif:style=Book\nDBG2  returning font file /usr/share/fonts/dejavu/DejaVuSerif.ttf\nMSG   ERROR: file nonexistant: .//converted/termcolors.docx\nFATAL Exception: file nonexistant: .//converted/termcolors.docx\n\nI tried to find that document in the project, but I didnt find it. I got the source from the tar.gz file of the web site, do you think it would be better try the master branch from github?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60786026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60792329", "body": "Well, I installed the fontconfig-devel package and it didnt work. It created /usr/lib/libfontconfig.so.1.8.0 and /usr/lib/libfontconfig.so.1 (symbolic link ).I will take a look on building.md later , thank you for helping me =D\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60792329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rmbreak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60827502", "body": "Hello,\n\nI just spun up a Fedora 20 x86_64 install and ran the following commands:\n\n```\n# yum groupinstall -y \"Development Tools\"\n# yum install -y gcc gcc-c++\n# yum install -y cmake python3-devel SDL2-devel ftgl-devel SDL2_image-devel \\\nopus-tools glew-devel freeglut-devel libpng-devel freetype-devel opusfile-devel \\\nfontconfig-devel git\n```\n\nFinally I grabbed openage and built using:\n\n```\n$ git clone https://github.com/SFTtech/openage.git \\\n   && cd openage && ./configure && make\n\n<snip>\n[100%] Built target openage\n```\n\nNotice I installed the fontconfig-devel package and not the mingw32-fontconfig package.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60827502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "o11c": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60857466", "body": "On colors in logs:\n\nTerminal programs that can output color should have a `--color` command-line option. `--color` is short for `--color=always` (some programs get this wrong). `--color=never` and `--color=auto` also exist; the latter is the default if the option is not found on the command line at all.\n\nIf `--color=auto` is chosen, check `isatty(3)` on the file descriptor you are writing to - either `stdout` (`STDOUT_FILENO=1`) or `stderr` (`STDERR_FILENO=2`). Output written to files other than stdout and stderr should ignore the command-line option and output no color. (Possibly there might be a separate configuration option `color_in_log_files` but this probably wouldn't be available as a command-line option. There's also an exception if you explicitly open a new tty.)\n\nAs a GUI program that only writes to `stdout`/`stderr` as a secondary sink, it feels funny for openage to accept `--color`, but the same principles should apply.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60857466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60858055", "body": "As for the API itself, I think it is a **fatal** mistake to think in terms of logging strings. Instead, log structures. In particular, this is useful for what I do a lot, which is parse files. My logging structure is like:\n\n``` c++\nenum class LogLevel { WARNING, ERROR };\nstruct LogMessage {\n    io::LineSpan span;\n    std::string message;\n};\nstruct LogEntry {\n    LogLevel level;\n    LogMessage main_message;\n    std::string option; // think [-Wfoo] from gcc; don't store the \"-W\" because \"level\" controls how it prints\n    std::vector<LogMessage> notes;\n};\n```\n\nAdditionally, since I'm making a server, it's my goal to switch all my logging to syslog, since otherwise I have to reinvent log rotation and everything manually.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60858055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "apreiml": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60897394", "body": "Alright then. I don't care for credits, you don't need to mention me. I just wanted to spare you some work :).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60897394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MartinMcGrath": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60898101", "body": "@TheJJ a blank page, you should at least get a page which reads \"don't flattr yourself\" ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60898101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61064003", "body": "@TheJJ changetip? https://www.changetip.com/\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61064003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "andrekupka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60919705", "body": "Is there a special reason for using std::map instead of std::unordered_map for storing resources in the AssetManager? I think it is not necessary to keep any kind of order within the associative container, thus a std::unordered_map should be used, because its lookup is much faster. Likewise the lookup should be done by the find and not by the count method.\nAs the loaded textures will be used in multiple places, I would prefer returning a std::shared_ptr<Texture> instead of a raw pointer (Although this should be fixed by us, as it affects multiple parts of the whole project.).\nNevertheless I like your central implementation of an AssetManager and I would appreciate if not only textures but hopefully any resources/assets can be managed by a central class.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60919705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61179903", "body": "What version of AoE do you have installed? AoE II - The Conquerors' path is \"Data\" and I doubt, that this path is changing between random installations.\nYou should add some documentation to your code, as it is pretty hard to understand the idea behind it.\nI think checking all possible lower- and uppercase versions of a path is not the way to go. One should determine a finite set of possible paths (in this case \"Data\" and \"DATA\") and only check for all wellknown paths if one of them exists.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61179903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61253130", "body": "We cannot merge the pull request immediately, because it would conflict with some later concepts of the nyan data format. Especially the EntityType (we call it UnitType), will be generated by the nyan parser and not implemented by hand. Nevertheless, your Entity class can be used as reference for future implementations.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61253130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61271538", "body": "I would prefer using std::find_if with std::vector::erase. \n\n``` cpp\nauto position_it = std::find_if(std::begin(action_stack), std::end(action_stack),\n    [](std::shared_ptr<EntityAction> &element) {\n        return element->completed();\n    });\naction_stack.erase(position_it, std::end(action_stack));\n```\n\n(Actually I hope that my example code is compiling :wink:)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61271538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61279582", "body": "Parameters of those binary operators should be changed to const references.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61279582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61340097", "body": "I would split up the methods of legal.py into multiple smaller ones, as one big method is mostly harder to understand than a few small ones. Could you also add the code compliance check to the default make-target. Apart from that, nice work.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61340097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61371998", "body": "+1 for const updates and declaring variables at the most local location\nNevertheless braces within initialization lists should not be changed to parenthesis, because C++11 introduced braces as uniform initialization (see here: https://en.wikipedia.org/wiki/C%2B%2B11#Uniform_initialization).\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61371998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61372347", "body": "Right\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61372347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61417155", "body": ":+1: for merge\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61417155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/9116830", "body": "vector::reserve only allocates memory, but it doesn't initialize the size of the vector. Therefore the chunk's size was still zero.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/9116830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22865982", "body": "Why are you using !(...).fail() instead of good()?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22865982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22862320", "body": "I would use a `shared_ptr` in this map as well. The `weak_ptr` does not avoid any circular references here and with every usage it is converted to a `shared_ptr` using the lock-function anyway.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22862320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22862741", "body": "Is there a specific reason for using ssize_t as index type. I thought (s)size_t is only used for machine-width-integers for memory management.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22862741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22863257", "body": "Why not use a std::vector instead of unique_ptrs to arrays. Those vectors can be passed to all functions, that use them in a readonly way, as a const reference. Therefore unnecessary copies will be avoided.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22863257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22863662", "body": "get_neighbors should return a std::vector<struct neighbor_tile> instead of writing the result to a preallocated array.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22863662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22863935", "body": "Replace all unique_ptrs to arrays with std::vectors.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22863935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22864243", "body": "Instead of passing a raw pointer to the image data, just add a Texture constructor that expects a unique_ptr to the image data and move image_data into the constructor. This avoids copying the complete image data within the constructor. The Texture's internal image data should be managed as unique_ptr anyway.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22864243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22864276", "body": "See above.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22864276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24601506", "body": "please use one line comments again\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24601506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24601649", "body": "is there a place where we use `no_inline` with a proper reason?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/24601649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734261", "body": "please use c++ style casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734283", "body": "please use c++ style casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734294", "body": "please use c++ style casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734303", "body": "please use c++ style casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734341", "body": "please use c++ style casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734371", "body": "please use c++ style casts\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/23734371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "agusl88": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60972034", "body": "Actually, players prefer the legacy version of age of empries the conqueros over the \"new HD\" version in steam. The community playing at voobly.com is far bigger than steam, and the multiplayer client is years ahead compared to the basic multiplayer lobbies of the steam version. \nThe community is bigger and more active, they managed to create patches to the original game to add support for multi-monitor, full-hd resolutions, improved AI and even a new expansion called forgotten empires (latter that expansion was lincesed and ported to the steam version). The features created by the community for the original game are far superior to the steam version.\n\nSome usefull links:\nhttp://www.aoczone.net (community site)\nhttp://www.voobly.com (multiplayer client)\nhttp://userpatch.aiscripters.net/ (site of the userpatch 1.4 project)\nhttp://www.forgottenempires.net/ (site of the new expansion)\nhttp://aok.heavengames.com/ (AI scripters and map/mods makers community)\n\nIf you want to bring attention to this project, those are good places to start. There are many skilled devs working around this game, they could be a nice addition to the project.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/60972034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ColdPie1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61027565", "body": "Thanks for the review. I've updated the branch to 3e72703. This update changes a minor style issue (indentation in assetmanager.h), changes map to unordered_map, and uses find in place of count. Please re-review.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61027565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "meZee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61033447", "body": "@goto-bus-stop, don't forget to claim your bounty, https://www.bountysource.com/issues/5542471-aoe-hd-support\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61033447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "martyphee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61081466", "body": "This worked for me on 10.9.4.\n\n```\n./configure \\\n  --flags=\"-stdlib=libc++  -I/usr/local/Cellar/fontconfig/2.11.1/include/ -I/usr/local/include/SDL2 -I/usr/local/Cellar/opus/1.1/include/opus -I/usr/local/Cellar/opusfile/0.6/include/opus -I/usr/local/Cellar/opus/1.1/include/opus\" \\\n  --ldflags=\"-stdlib=libc++ -lSDL2_Image -lSDL2main\" \\\n  --raw-cmake-args \\\n  -DPYTHON_INCLUDE_DIR=/usr/local/Cellar/python3/3.4.2/Frameworks/Python.framework/Versions/3.4/include/python3.4m/ \\\n  -DPYTHON_LIBRARY=/usr/local/Cellar/python3/3.4.2/Frameworks/Python.framework/Versions/3.4/lib/libpython3.4.dylib \\\n  -DPython_FRAMEWORKS=/usr/local/Cellar/python3/3.4.2/Frameworks/Python.framework \\\n  -DSDL2IMAGE_INCLUDE_DIRS=/usr/local/Cellar/sdl2_image/2.0.0_1/include \\\n  -DSDL2IMAGE_LIBRARIES=/usr/local/Cellar/sdl2_image/2.0.0_1/lib/libSDL2_image-2.0.0.dylib\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61081466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61087598", "body": "So was mine until I did configure like above.  Had a number of linking issues because it wasn't finding libraries.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61087598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61088596", "body": "Looks like clang.  I'm very rusty with my C/C++ and build tools.  Too much java/python....\n\n```\nopenage v2.2-357-ge850274\n\n      compiler | Clang 6.0.0.6000051\n      cxxflags | -stdlib=libc++ -I/usr/local/Cellar/fontconfig/2.11.1/include/ -I/usr/local/include/SDL2 -I/usr/local/Cellar/opus/1.1/include/opus -I/usr/local/Cellar/opusfile/0.6/include/opus -I/usr/local/Cellar/opus/1.1/include/opus -Wall -Wextra -pedantic -std=c++11\ninstall prefix | /usr/local\n     build dir | /Users/martinphee/develop/openage/.bin/gcc-release-stdlib=libc++-I-usr-local-Cellar-fontconfig-2-11-1-include-I-usr-local-include-SDL2-I-usr-local-Cellar-opus-1-1-include-opus-I-usr-local-Cellar-opusfile-0-6-include-opus-I-usr-local-Cellar-opus-1-1-include-opus\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61088596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61102852", "body": "Install fontconfig: brew install fontconfig\n\nOn Thu, Oct 30, 2014 at 9:04 AM, Dmitry Alexandrov <notifications@github.com\n\n> wrote:\n> \n> nice but..\n> openage/cpp/font.cpp:3:10: fatal error: 'fontconfig/fontconfig.h' file not\n> found\n> #include\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/SFTtech/openage/issues/16#issuecomment-61096140.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61102852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mandelbug": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61131613", "body": "Same result with your code @franciscod \nSome buildings play sound when placed.\n\n```\n[m building[10]: TREBU\n[m    slp id/name: 1244 TREBU_FN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 291 -1\n[m building[55]: PTREB\n[m    slp id/name: 2279 PTREB_WN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 291 -1\n[m building[63]: PMANG\n[m    slp id/name: 2279 PTREB_WN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 337 -1\n[m building[98]: HBNB\n[m    slp id/name: 1244 TREBU_FN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 291 -1\n[m building[99]: HGOS\n[m    slp id/name: 1244 TREBU_FN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 291 -1\n[m building[113]: HGOSP\n[m    slp id/name: 2279 PTREB_WN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 337 -1\n[m building[114]: HBNBP\n[m    slp id/name: 2279 PTREB_WN\n[m    building has foundation size 0.50 x 0.50 = 1x1\n[m sndcre 337 -1\n```\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61131613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SkySkimmer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61186032", "body": "IIRC it was some gold CD version. I don't have the CD with me so can't check though.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61186032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Qquanwei": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61237585", "body": "I agree,but now  I can't find this file openage.convert >_<\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61237585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mistressofjellyfish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61327562", "body": "ASCII art drawn as requested. Also did some \"minor\" enhancements.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61327562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61372322", "body": "It would be nice to have some kind of abstraction layer for the basic Inotify stuff. While other platforms like windows or OSX do not have Inotify support, they provide similar features ([Win](http://msdn.microsoft.com/en-us/library/aa365261%28VS.85%29.aspx), [OSX](https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html)) that could be used to trigger an update. I know that's not top priority at the moment, but I figured it'll be better to write it down so it won't be forgotten.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61372322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61412659", "body": "Should be good now.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61412659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61417230", "body": "I thought I was careful enough not to lay out any implementation details. But I'd go with TheJJ, let's make it GTK. It's not platform dependent and a well-known GUI toolkit.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61417230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "behind1231": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61393323", "body": "Archlinux system how to install the game??????????\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61393323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61397356", "body": "Could NOT find SDL2 (missing:  SDL2IMAGE_LIBRARIES)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61397356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61398040", "body": "FATAL Exception: file nonexistant: .//converted/termcolors.docx\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61398040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61398450", "body": "is bug ????\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61398450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hwmrocker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61396311", "body": "Why do you need ISO support? It is so easy to mount an ISO in Linux and Windows (and I am pretty sure also on a Mac)\n\nIf you point just to the filesystem structure of the DVD content and export the data from there it is all a user want. If try to read the content of the iso you need more dependencies and bloat your software. The usability gain is minimal.\n\nThose people who have an iso probably know how to mount it.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61396311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "m-sebastiyan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61399183", "body": "Did you launched the openage like this - ./openage --data=assets?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61399183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61404515", "body": "I created new terrain. Here screens with on/off blending.\n![openage_2014-11-02_04-11-17_00](https://cloud.githubusercontent.com/assets/9057096/4875205/1e7d9bd2-628a-11e4-954c-275075718860.png)\n![openage_2014-11-02_04-11-28_00](https://cloud.githubusercontent.com/assets/9057096/4875206/1e81a9fc-628a-11e4-8065-3c185527d271.png)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61404515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405335", "body": "It's not a bug it's a feature :godmode: \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61405335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61411703", "body": "As I understand, mouse cursor should be a center for a ground and a building sprite? \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61411703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61419304", "body": "You are right, algorithm needs to be fixed. However, I'm figured out how to place the ground properly.  \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61419304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420382", "body": "Just because. I can recreate pull, if you want.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420688", "body": "It should be +1 useless commit in branch\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420861", "body": "Oh, that's how it works. Thank you, comrade.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61420861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61426466", "body": "I have a question. Is `start_pos` should be a west corner? \n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61426466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Phrohdoh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61424614", "body": "OS X can get ImageMagick easily through Homebrew, but not all users will want to go that route.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/issues/comments/61424614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "UltraMC": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/8432028", "body": "Why not use YAML?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/8432028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Davidslv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/10866260", "body": "Really? LOL!\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/10866260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "darrenstrash": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/13342959", "body": "Interesting. I wonder why we don't see this problem with the other calls to py_exec...\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/13342959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/15234266", "body": "Yep. Thanks for finding this. I guess hardly anyone uses Mac OSX.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/15234266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "0bailey6": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/15229287", "body": "Well pretty much it's going to be another day one of those days that you just wake up and say \"damn can't believe it\", \"another year that just went by and things are just going on\", kids are just growing, talking bad, just doing all sorts of things. You don't know me pretty much, a little bit about myself: I'm 29 now its her turn. On Christmas Day and then really do not the for my birthday but just wanted to say have a lot happy new years\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/15229287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "williamriancho": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/15233962", "body": "@darrenstrash : Isn't it `brew tap homebrew/versions`?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/15233962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mdrost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/20269209", "body": "Missing semicolon.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/20269209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "MythTitans": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/comments/23434107", "body": "> After the message reaches 13 character length it looks like the pattern repeats. Instead, a byte with the value of the \"Length\"-byte emerges. It even adjusts its value with every character that is added.\r\n\r\nThis really makes me think about Small String Optimization. It is a technique that stores short strings (here less than 13 characters, which is a common threshold value) directly on the stack in a fixed size buffer, instead of allocating space on the heap.", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/23434107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/SFTtech/openage/comments/23467259", "body": "@heinezen I don't see any good reason why they would do that in network protocol. Maybe it's just the reflection of their internal implementation that they didn't hide behind a good abstraction...", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/comments/23467259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AlexandreArpin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19627805", "body": "typo, should be screenshot manager I believe?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19627805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "qlonik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19874844", "body": "That is apparently a typo. 'gcc' does not work as well. 'gnu' has to be there.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/19874844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blucoat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198379", "body": "Whoops, didn't mean to include that in the commit.  I stuck that there because I was wondering why it was taking so long to load.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198452", "body": "The reason I shift by 2 less than sizeof(size_t) is because category_t is in the range 0-3, or 2 bits.  You're right about multiplying by 8.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198840", "body": "What should it be instead?  All the arguments are aligned.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20198840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203215", "body": "I feel the same way.  It's not even supposed to be necessary, according to the specification for cinttypes.  I'd like to know why Travis was having trouble without it.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203218", "body": "Where?\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20203218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "schets": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20405300", "body": "It's possible (see [possible](https://github.com/schets/openage/commit/a7ca140a650d667cea29acffb8f15e82789a0701)) to do it without the distinction, but the create_tile_advice is fairly cheap without the blending turned on and I wasn't sure if it was really worth the extra memory usage. It may be possible to do this w/o caching data separately for both blended and unblended, in which case I see no reason to avoid the cache in those places.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20405300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197272", "body": "Something is up with that in emacs, cause I see that too in git but in emacs it's fine and dandy. I'll see if I can figure out what magic is happening\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/20197272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Ethon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489687", "body": "Not really if you want to support the (in my eyes questionable) idea of displaying an error texture instead of simply treating missing textures as a hard error.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489830", "body": "Was deleted and readded by me. ;)\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489951", "body": "And ...? I think the benefit of immediately knowing what the problem is outweighs the few bytes of diskspace and is a common pattern when using assert. The string wont be in the binary.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22489951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22490022", "body": "Makes things easier when manually setting a deleter.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22490022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22491510", "body": "changed\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22491510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22491518", "body": "changed\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22491518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520305", "body": "Yes. AssetManager owns the texture and not the user code just requesting a shared instance. Raw pointers are the correct way to express that if you guarantee lifetime, else shared_ptr would be correct. But here it would be just unnecessary overhead.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520317", "body": "Oops. Changed.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520381", "body": "Changed for the sake of consistancy with the old code inside WITH_INOTIFY. Pointless imho.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520382", "body": "Changed for the sake of consistancy with the old code inside WITH_INOTIFY. Pointless imho.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520513", "body": "It can but here is the constructor call explicitly noted what is better style imho.\n", "reactions": {"url": "https://api.github.com/repos/SFTtech/openage/pulls/comments/22520513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}