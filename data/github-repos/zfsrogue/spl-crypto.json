{"_default": {"1": {"saturnnights": {"issues": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/13", "title": "Kernel 4.0+ fix to algapi.h [implicit declaration of function 'scatterwalk_sg_next']", "body": "When compiling on a recent kernel, the compile step for SPL halted with:\n\n```\n/tmp/spl-build-user-e5OooVFT/BUILD/spl-kmod-0.6.3/_kmod_build_4.1.0-2-amd64/module/sun-ctr/../../../spl-0.6.3/module/sun-ctr/blkcipher.c:118:13: error:\n implicit declaration of function 'scatterwalk_sg_next' [-Werror=implicit-function-declaration]\n             scatterwalk_start(walk, scatterwalk_sg_next(walk->sg));\n```\n\nChecking about led me to this commit to the kernel:\n\nhttps://github.com/torvalds/linux/commit/5be4d4c94b1f98b839344fda7a8752a4a09d0ef5\n\nThe crypto-specific \"scatterwalk_sg_next\" has been replaced with the generic \"sg_next\".\n\nThe below diff redefines the function if being built again kernel 4.0+:\n\n```\ndiff --git a/module/sun-ctr/algapi.h b/module/sun-ctr/algapi.h\nindex 5fa0bd0..8029855 100644\n--- a/module/sun-ctr/algapi.h\n+++ b/module/sun-ctr/algapi.h\n@@ -12,6 +12,12 @@\n #ifndef _CRYPTO_XALGAPI_H\n #define _CRYPTO_XALGAPI_H\n\n+#include <linux/version.h>\n+\n+#if (LINUX_VERSION_CODE > KERNEL_VERSION(4, 0, 0))\n+#  define scatterwalk_sg_next(x) sg_next(x)\n+#endif\n+\n #include <linux/crypto.h>\n #include <linux/list.h>\n #include <linux/kernel.h>\n\n```\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/13/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/12", "title": "Kernel 3.13+ fix to spl-crypto.c [implicit declaration of function 'INIT_COMPLETION']", "body": "When compiling on a recent kernel, the compile step for SPL halted with:\n\n```\n/tmp/spl-build-user-e5OooVFT/BUILD/spl-kmod-0.6.3/_kmod_build_4.1.0-2-amd64/module/spl/../../../spl-0.6.3/module/spl/spl-crypto.c:462:13: error: implicit declaration of function 'INIT_COMPLETION' [-Werror=implicit-function-declaration]\n             INIT_COMPLETION(result.completion);\n```\n\nSearching for similar error had led me to this commit that resolved the issue in their codebase:\n\nhttp://git.buildroot.net/buildroot/commit/?id=b520abe9a63d4a36cbde707e7c17119b28e5af01\n\nThe change was introduced into the kernel with this commit:\n\nhttps://github.com/torvalds/linux/commit/c32f74ab2872994bc8336ed367313da3139350ca\n\nThe below diff uses the same idea to rework the INIT_COMPLETION code.\n\n```\ndiff --git a/module/spl/spl-crypto.c b/module/spl/spl-crypto.c\nindex 59c2172..2320265 100644\n--- a/module/spl/spl-crypto.c\n+++ b/module/spl/spl-crypto.c\n@@ -1,6 +1,12 @@\n #include <sys/crypto/api.h>\n #include <sys/cmn_err.h>\n\n+#include <linux/version.h>\n+\n+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3, 13, 0))\n+#  define reinit_completion(x) INIT_COMPLETION(*(x))\n+#endif\n+\n #include <linux/scatterlist.h>\n #include <linux/crypto.h>\n #include <crypto/scatterwalk.h>\n@@ -459,7 +465,7 @@ int crypto_encrypt_aead(crypto_mechanism_t *mech, crypto_data_t *plaintext,\n         ret = wait_for_completion_interruptible(\n                                                 &result.completion);\n         if (!ret && !(ret = result.err)) { \n-            INIT_COMPLETION(result.completion);\n+            reinit_completion(&result.completion);\n             break;\n         }\n         break;\n@@ -628,7 +634,7 @@ int crypto_decrypt_aead(crypto_mechanism_t *mech, crypto_data_t *ciphertext,\n         ret = wait_for_completion_interruptible(\n                                                 &result.completion);\n         if (!ret && !(ret = result.err)) { \n-            INIT_COMPLETION(result.completion);\n+            reinit_completion(&result.completion);\n             break;\n         }\n@@ -811,7 +817,7 @@ int crypto_encrypt_blk(crypto_mechanism_t *mech, crypto_data_t *plaintext,\n         ret = wait_for_completion_interruptible(\n                                                 &result.completion);\n         if (!ret && !(ret = result.err)) { \n-            INIT_COMPLETION(result.completion);\n+            reinit_completion(&result.completion);\n             break;\n         }\n         break;\n@@ -964,7 +970,7 @@ int crypto_decrypt_blk(crypto_mechanism_t *mech, crypto_data_t *ciphertext,\n         ret = wait_for_completion_interruptible(\n                                                 &result.completion);\n         if (!ret && !(ret = result.err)) { \n-            INIT_COMPLETION(result.completion);\n+            reinit_completion(&result.completion);\n             break;\n         }\n         break;\n```\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/12/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lundman": {"issues": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/11", "title": "kernel-2.6 compile fixes", "body": "I was compiling on a 2.6 kernel, and these minor tweaks were needed. I don't know if we really want to support something old like 2.6\n\nNote that the ctr crypto_type binds to the wrong module! Could explain why the module dependencies does not work.\n\n```\ndiff --git a/module/sun-ctr/blkcipher.c b/module/sun-ctr/blkcipher.c\nindex 4abbb16..ee9c4cd 100644\n--- a/module/sun-ctr/blkcipher.c\n+++ b/module/sun-ctr/blkcipher.c\n@@ -46,13 +46,13 @@ static int xblkcipher_walk_first(struct blkcipher_desc *desc,\n\n inline void Xscatterwalk_unmap(void *vaddr)\n {\n-    kunmap_atomic(vaddr);\n+    kunmap_atomic(vaddr, crypto_kmap_type(0));\n }\n EXPORT_SYMBOL_GPL(Xscatterwalk_unmap);\n\n void *Xscatterwalk_map(struct scatter_walk *walk)\n {\n-    return kmap_atomic(scatterwalk_page(walk)) +\n+    return kmap_atomic(scatterwalk_page(walk), crypto_kmap_type(0)) +\n         offset_in_page(walk->offset);\n }\n EXPORT_SYMBOL_GPL(Xscatterwalk_map);\n@@ -641,7 +641,7 @@ const struct crypto_type crypto_xblkcipher_type = {\n #ifdef CONFIG_PROC_FS\n        .show = crypto_xblkcipher_show,\n #endif\n-       .report = crypto_xblkcipher_report,\n+       //.report = crypto_xblkcipher_report,\n };\n //EXPORT_SYMBOL_GPL(crypto_xblkcipher_type);\n\ndiff --git a/module/sun-ctr/ctr.c b/module/sun-ctr/ctr.c\nindex 1669f05..ffffc49 100755\n--- a/module/sun-ctr/ctr.c\n+++ b/module/sun-ctr/ctr.c\n@@ -36,6 +36,7 @@ struct crypto_rfc3686_ctx {\n        u8 nonce[CTR_RFC3686_NONCE_SIZE];\n };\n\n+extern const struct crypto_type crypto_xblkcipher_type;\n static int crypto_ctr_setkey(struct crypto_tfm *parent, const u8 *key,\n                             unsigned int keylen)\n {\n@@ -211,7 +212,7 @@ static struct crypto_instance *crypto_ctr_alloc(struct rtattr **tb)\n        inst->alg.cra_priority = alg->cra_priority;\n        inst->alg.cra_blocksize = 1;\n        inst->alg.cra_alignmask = alg->cra_alignmask | (__alignof__(u32) - 1);\n-       inst->alg.cra_type = &crypto_blkcipher_type;\n+       inst->alg.cra_type = &crypto_xblkcipher_type;\n\n        inst->alg.cra_blkcipher.ivsize = alg->cra_blocksize;\n        inst->alg.cra_blkcipher.min_keysize = alg->cra_cipher.cia_min_keysize;\n```\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/11/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d6e6e4a98eef03971213044d4277edd56dda61ab", "message": "Add support for aarch64 (ARMv8)\n\nUsing the ARM reference simulation (fast model foundation v8) I\ncross compiled spl and zfs, to confirm it works on ARMv8 (64 bit\narm architecture, called aarch64 in Linux).\n\nAs it is based on previous ARM porting, the resulting patch is\ndisappointingly small, there was very little to do. The code fixes\nthe compile issues and has light testing done.\n\nSigned-off-by: Jorgen Lundman <lundman@lundman.net>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #351"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9ea40af4ad43a2ddb4761e9af4f80d623e074c7a", "message": "ZVOL's AES-CTR was also not setting iv correctly."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/20d5a41946fcc45efa326df112d16038b195cb89", "message": "Merge branch 'hack'\n\nConflicts:\n\tmodule/spl/spl-crypto.c"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/10a23cb662528055890583fa594c13ce7da4bc33", "message": "GCM mode was not setting \"iv\" correctly (using CCM method)."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6a0a8c987e2f2e2546a3858b3779d5945e6612d8", "message": "It would incorrectly set 'associated data' to 16, with all zero input.\nWhich is inefficient and incompatible with other implementations. Changed\nto not use associated data like that of Solaris.\n\nIt incorrectly assumed all noncelen to be of 12. ZFS uses variable sizes.\n\nNote this makes the encrypted ZFS incompatible with previous version."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6da9fae6252479f6870dcabe9ec188fc51623b20", "message": "Merge branch 'master' of git://github.com/zfsrogue/spl-crypto into hack"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2776e257d2f2179c52aafe2ed6f43b474ef22fd7", "message": "Do not use associated data."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/abed857fe0c7ec63be5b7eb2f40b7077c7931461", "message": "Change so that the type of cipher used, aead or blk, is picked on the fly\nas ZVOL needs blkciphers."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2111799fc57004268a3bc44ad810319294734755", "message": "crypto_decrypt should return CRYPTO_INVALID_MAC when auth fails, so that\nmount can fail cleanly."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/fd74073fd42ac7de9e06bb1fe125b5e62d8d1a68", "message": "Merge branch 'master' of github.com:lundman/spl-crypto\n\nConflicts:\n\tmodule/sun-ctr/ctr.c"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/02dd7910b15e538233210b973f5fcfb35dcda623", "message": "spl-crypto rework.\n\nSplit sun-ctr out of sun-ccm to make own module,\nAdded sun-gcm cipher method (also uses sun-ctr).\nMade ciphers to be configurable from commandline, and pick right cipher when\nused.\nAdded testing (ensuring cipher exists) on creation, so it can fail cleanly\nwhen sun-ccm module has not been loaded.\nAdded crypto_mac function, even though it has yet to be called.\nEnsured keylen commandline changes work."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a6ec722d0286900b0a5b26865934ad9067aa81b7", "message": "spl-crypto rework.\n\nSplit sun-ctr out of sun-ccm to make own module,\nAdded sun-gcm cipher method (also uses sun-ctr).\nMade ciphers to be configurable from commandline, and pick right cipher when\nused.\nAdded testing (ensuring cipher exists) on creation, so it can fail cleanly\nwhen sun-ccm module has not been loaded.\nAdded crypto_mac function, even though it has yet to be called.\nEnsured keylen commandline changes work."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bb0089d7545f0334ce0e2ff3379361ac8bedd9c6", "message": "Merge branch 'master' of github.com:lundman/spl-crypto"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9008dded360bf496f34907f27f4f5020a8af9d8f", "message": "The scatterwalk_map and unmap API has changed parameters so\nadding them to the module."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e4fa977c0775d320f3d7b02fe951e4e2a62e7234", "message": "Missing Makefile, sorry."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/38d35d093ecac26ec251f04b69f8f2f50e79a26d", "message": "Add a new cipher module \"sun-ccm\" which is an identical copy of\nccm + ctr + blkcipher, just to avoid a bug in blkcipher.\n\nIt allows us to skip the heavy block-copy."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e5c2f069aff3b3de0c0c7deff323744764d79ad9", "message": "scatterwalk() will cause panic when using multiple output buffers, so\nnow we allocate a new linear memory for output, then call\nsg_copy_from_buffer() to copy back to scatterlist. Note that using\nscatterwalk_map_and_copy() instead will cause panic.\n\nThis fixes the recordsize=512 limit, all recordsizes work.\n\nFixed crypto_map_buffers() which took static 2 buffers to be dynamic. It\nturns out ZFS will chain events, and was using over 28 on my tests.\n\nZFS-crypto can now do a simple bonnie run without crashing.\n\nCreated MACRO to crypto debug messages. Default is off. Removed old\ncipher code, but left 3 alternate calls. AEAD (default), blkcipher, and\nmemcopy.\n\nTODO: Solve the panic which scatterlists to remove the need to allocate\n      dst temporary buffer."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/655569580540a3a5d358c7192c51112d043bf6b5", "message": "Add Solaris crypto API calls to SPL layer, translating into Linux\ncrypto API. This code was not easy to work out, Linux crypto API\nlacks any documentation.\n\nHowever, there appears to be a \"maximum length\" limitation with\nLinux scatterlist. It is better to use recordsize=512 when creating\nencrypted filesystems for now.\n\nPossibly large crypt calls need to be split up into more scatterlist\nentries.\n\nCode currently does not use ASYNC calls, as original ZFS appears not to.\n\n'iv' is computed the same as Open Solaris sources.\n\nThe ctx_template functions should probably be used to acquire the tfm\ninstead of calling crypto_alloc_aead() each and every time.\n\nNote this code is littered with debug prints."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10471308", "body": "Good news, with the help of the guys in IRC, it turns out that sometimes (the large buffers) are vmalloc() memory allocations, and can not just be handled the same. Calling vmalloc_to_page() lets us look up the correct page.\n\nPatch to come shortly.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10471308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10483024", "body": "I have attached https://github.com/lundman/spl-crypto/commit/38d35d093ecac26ec251f04b69f8f2f50e79a26d fix in pull requests.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10483024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14888751", "body": "Most likely just followed a Linux crypto example when that was pulled in. It probably isn't needed.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14888751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14912581", "body": "Of course it is not stolen, it was done by me, or copied from IllumOS sources (headers). If you took a second to think about it, SPL means Solaris Porting Layer, where Linux code export IllumOS API functions. If you can find Linux code in the \"stolen sources\" that would be impressive.  By nature, nothing in SPL can be.\n\nzfs-crypto is a different story, that is what rogue did, and I don't look in there either.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14912581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "zfsrogue": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bcf44be13dde4f7e0596ec2938f33ccfe5d01a34", "message": "Merge remote branch 'upstream/master'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6eac4f2ae31bd5c8f36f542833f1dd092a4311cb", "message": "Merge remote branch 'upstream/master'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d3f8727fee2c379945c6a62720b9ef971253b844", "message": "Merge remote branch 'upstream/master' into 0.6.3"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2e2276529986f63540c89300a4ca31a3d4441456", "message": "Merge remote branch 'upstream/master'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e612e22637c3ef312c69febf8999d730a3297181", "message": "Merge remote branch 'upstream/master'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e1f8547dd0fd1e19b9ad4e3acb35f96c1e0fd900", "message": "Merge branch 'master' of github.com:zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/954666f21a048d3448f3e07b986b58cef9678dd8", "message": "Merge branch 'master' of github.com:zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d58512ac7b3064e38828a8cad6b7aa874afcebf1", "message": "add the directory 'include/sys/crypto' to the list of make dirs\n- Turbo"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/740318b6a898639e04873cd379b548de36f2ce11", "message": "Merge remote branch 'upstream/master'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bcd2d65648da56aeb20182a23e70cf036cd5cfbf", "message": "Merge branch 'master' of github.com:zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/5b3d0855b1f4bac7a6f7f2b96f7cfc259c38fddc", "message": "Merge branch 'master' of github.com:zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b0ebdf555adb4bb2ecaeb86c1f79df45c7b3642b", "message": "Merge pull request #10 from lundman/master\n\nAES-CTR mode was not using correct mech->cm_param type to set iv"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/30545635fa8b36560619683af6270c880247853e", "message": "Merge branch 'master' of github.com:zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e4a4bb00ac7acb7e604723d770cb309759aae244", "message": "Merge branch 'master' of git://github.com/lundman/spl-crypto into lundman-master\n\nConflicts:\n\tmodule/spl/spl-crypto.c"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/36d5838eae8a0f7e109a638f6106f008d4959886", "message": "CCM-AES \"associated auth data\" is optional, and we no longer\nset it to 16 bytes of zeros. Now we don't use associated at all."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ec7bba4fb4e6ba12864fae253fe3c57082defb74", "message": "Merge remote branch 'upstream/master'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/7523611fee559c38285645671cdcf12a5cfcc283", "message": "Merge branch 'master' of git://github.com/zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1d748c730d2bea83e97ca928bc2679fbe1eb8340", "message": "Merge branch 'master' of git://github.com/zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bcf554e95121bd7a03c08e435d1bc634ae2e846b", "message": "Merge branch 'master' of git://github.com/zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b12d27f06b44e7e3d57414834e3c952b877819fe", "message": "Merge pull request #8 from lundman/master\n\nPick ciphers dynamically."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/30af39419457d6784d89c752d19a6270f3b30925", "message": "Merge pull request #7 from lundman/master\n\ncrypto_decrypt should return CRYPTO_INVALID_MAC"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d306a3ae9f1fc0a2e10419ff4049a5cde7a0af17", "message": "Merge pull request #6 from lundman/master\n\n spl-crypto rework."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6e7ceac72e8b9332885b0672c4901b1f4bf40743", "message": "Merge pull request #5 from lundman/master\n\nLinux 3.2 has different number parameters to scatterwalk_map and unmap"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/94cc3fe0fce94af7f1b9478877bcef01ac0e8434", "message": "Merge pull request #4 from lundman/master\n\nAdd new cipher module to fix copyblock problem."}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d4cce3c5b0d6a15bd01410e89b0d2fe73aadc08e", "message": "Merge pull request #2 from lundman/master\n\nFix scatterlists temporarily with tmp buffer"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a87db92c2e6ab216eb9272ef804a820e16044717", "message": "Merge branch 'master' of git://github.com/zfsonlinux/spl"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/70b26c2563134ae658501ac2f30795cce179c1d8", "message": "Merge pull request #1 from lundman/master\n\nSPL add crypto functions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10391915", "body": "Thanks you. This good start!\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10391915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10408173", "body": "Very fast. Bravo.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10408173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10483572", "body": "Sorry so late, at conference. This is great work!\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10483572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10509291", "body": "This very good. Feature complete! \u0421\u043f\u0430\u0441\u0438\u0431\u043e.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/10509291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/12297367", "body": "Maybe nobody else uses yet, so pool incompatibility is ok.\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/12297367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/12410226", "body": "Ah this is natural, thanks\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/issues/comments/12410226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "behlendorf": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c7db36a3c4ac768a74bd86778cc3535bdcb8d526", "message": "Optimize vmem_alloc() retry path\n\nFor performance reasons the reworked kmem code maps vmem_alloc() to\nkmalloc_node() for allocations less than spa_kmem_alloc_max.  This\nallows for more concurrency in the system and less contention of\nthe virtual address space.  Generally, this is a good thing.\n\nHowever, in the case when the kmalloc_node() fails it makes little\nsense to retry it using kmalloc_node() again.  It will likely fail\nin exactly the same way.  A smarter strategy is to abandon this\noptimization and retry using spl_vmalloc() which is very likely\nto succeed.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Ned Bass <bass6@llnl.gov>\nCloses #428"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/54cccfc2e30fa84463c056e8ad04b2be9448999e", "message": "Fix GFP_KERNEL allocations flags\n\nThe kmem_vasprintf(), kmem_vsprintf(), kobj_open_file(), and vn_openat()\nfunctions should all use the kmem_flags_convert() function to generate\nthe GFP_* flags.  This ensures that they can be safely called in any\ncontext and the correct flags will be used.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #426"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9099312977e994f8638eb1d93fd92a5cd66b8ea6", "message": "Merge branch 'kmem-rework'\n\nThe core motivation behind these changes is to minimize the\nmemory management differences between ZFS on Linux and other\nplatforms.  This simplifies the process of porting changes to\nLinux from other platforms.  This is good for code quality\nand is expected to reduce the number of defects accidentally\nintroduced due to porting.\n\nThe key reason this is now possible is due to the addition of\nLinux features such as the thread-specific PF_FSTRANS bit which\nwas introduced for XFS.\n\nThis patch stack also performs some refactoring and cleanup\ndesigned to make the code more maintainable and understandable.\nFinally, in the context of making and testing these changes\nseveral bugs were identified and resolved resulting in a\nmore robust implementation.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nCloses #414"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ee33517452020c3cd630c432038c735ea41bd1c9", "message": "Use __get_free_pages() for emergency objects\n\nThe __get_free_pages() function must be used in place of kmalloc()\nto ensure the __GFP_COMP is strictly honored.  This is due to\nkmalloc() being layered on the generic Linux slab caches.  It\nwasn't until recently that all caches were created using __GFP_COMP.\nThis means that it is possible for a kmalloc() which passed the\n__GFP_COMP flag to be returned a non-compound allocation.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/436ad60faa971dc62f30ebd5c79fa55722234147", "message": "Fix kmem cache deadlock logic\n\nThe kmem cache implementation always adds new slabs by dispatching a\ntask to the spl_kmem_cache taskq to perform the allocation.  This is\ndone because large slabs must be allocated using vmalloc().  It is\npossible these allocations will block on IO because the GFP_NOIO flag\nis not honored.  This can result in a deadlock.\n\nTherefore, a deadlock detection strategy was implemented to deal with\nthis case.  When it is determined, by timeout, that the spl_kmem_cache\nthread has deadlocked attempting to add a new slab.  Then all callers\nattempting to allocate from the cache fall back to using kmalloc()\nwhich does honor all passed flags.\n\nThis logic was correct but an optimization in the code allowed for a\ndeadlock.  Because only slabs backed by vmalloc() can deadlock in the\nway described above.  An optimization was made to only invoke this\ndeadlock detection code for vmalloc() backed caches.  This had the\nadvantage of making it easy to distinguish these objects when they\nwere freed.\n\nBut this isn't strictly safe.  If all the spl_kmem_cache threads end\nup deadlocked than we can't grow any of the other caches either.  This\ncan once again result in a deadlock if memory needs to be allocated\nfrom one of these other caches to ensure forward progress.\n\nThe fix here is to remove the optimization which limits this fall back\nallocation stratagy to vmalloc() backed caches.  Doing this means we\nmay need to take the cache lock in spl_kmem_cache_free() call path.\nBut this small cost can be mitigated by ignoring objects with virtual\naddresses.\n\nFor good measure the default number of spl_kmem_cache threads has been\nincreased from 1 to 4, and made tunable.  This alone wouldn't resolve\nthe original issue since it's still possible for all the threads to be\ndeadlocked.  However, it does help responsiveness by ensuring that a\nsingle deadlocked spl_kmem_cache thread doesn't block allocations from\nother caches until the timeout is reached.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3018bffa9b8bfd8d24010407c8a07c25b44c010e", "message": "Refine slab cache sizing\n\nThis change is designed to improve the memory utilization of\nslabs by more carefully setting their size.  The way the code\ncurrently works is problematic for slabs which contain large\nobjects (>1MB).  This is due to slabs being unconditionally\nrounded up to a power of two which may result in unused space\nat the end of the slab.\n\nThe reason the existing code rounds up every slab is because it\nassumes it will backed by the buddy allocator.  Since the buddy\nallocator can only performs power of two allocations this is\ndesirable because it avoids wasting any space.  However, this\nlogic breaks down if slab is backed by vmalloc() which operates\nat a page level granularity.  In this case, the optimal thing to\ndo is calculate the minimum required slab size given certain\nconstraints (object size, alignment, objects/slab, etc).\n\nTherefore, this patch reworks the spl_slab_size() function so\nthat it sizes KMC_KMEM slabs differently than KMC_VMEM slabs.\nKMC_KMEM slabs are rounded up to the nearest power of two, and\nKMC_VMEM slabs are allowed to be the minimum required size.\n\nThis change also reduces the default number of objects per slab.\nThis reduces how much memory a single cache object can pin, which\ncan result in significant memory saving for highly fragmented\ncaches.  But depending on the workload it may result in slabs\nbeing allocated and freed more frequently.  In practice, this\nhas been shown to be a better default for most workloads.\n\nAlso the maximum slab size has been reduced to 4MB on 32-bit\nsystems.  Due to the limited virtual address space it's critical\nthe we be as frugal as possible.  A limit of 4M still lets us\nreasonably comfortably allocate a limited number of 1MB objects.\n\nFinally, the kmem:slab_small and kmem:slab_large SPLAT tests\nwere extended to provide better test coverage of various object\nsizes and alignments.  Caches are created with random parameters\nand their basic functionality is verified by allocating several\nslabs worth of objects.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e50e6cc958a85e010d996ca80cf20d48c51103d3", "message": "Reduce kmem cache deadlock threshold\n\nReduce the threshold for detecting a kmem cache deadlock by 10x\nfrom HZ to HZ/10.  The reduced value is still several orders of\nmagnitude large enough to avoid being triggered incorrectly.  By\nreducing it we allow the system to resolve the issue more quickly.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b1c3ae48a7d1ec40d86218e60c928f093a898238", "message": "Update spl-module-parameters(5) man page\n\nThe spl-module-parameters(5) was not kept up to date.  Refresh\nthe man page so that it lists all the possible module options,\ndescribes what the do, and justify why the default values are\nset they way the are.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1a20496834f4f270a45c68fd67ade7643442652f", "message": "Make slab reclaim more aggressive\n\nMany people have noticed that the kmem cache implementation is slow\nto release its memory.  This patch makes the reclaim behavior more\naggressive by immediately freeing a slab once it is empty.  Unused\nobjects which are cached in the magazines will still prevent a slab\nfrom being freed.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c3eabc75b1ea41a12e3fec06db74a2995bda7514", "message": "Refactor generic memory allocation interfaces\n\nThis patch achieves the following goals:\n\n1. It replaces the preprocessor kmem flag to gfp flag mapping with\n   proper translation logic. This eliminates the potential for\n   surprises that were previously possible where kmem flags were\n   mapped to gfp flags.\n\n2. It maps vmem_alloc() allocations to kmem_alloc() for allocations\n   sized less than or equal to the newly-added spl_kmem_alloc_max\n   parameter.  This ensures that small allocations will not contend\n   on a single global lock, large allocations can still be handled,\n   and potentially limited virtual address space will not be squandered.\n   This behavior is entirely different than under Illumos due to\n   different memory management strategies employed by the respective\n   kernels.  However, this functionally provides the semantics required.\n\n3. The --disable-debug-kmem, --enable-debug-kmem (default), and\n   --enable-debug-kmem-tracking allocators have been unified in to\n   a single spl_kmem_alloc_impl() allocation function.  This was\n   done to simplify the code and make it more maintainable.\n\n4. Improve portability by exposing an implementation of the memory\n   allocations functions that can be safely used in the same way\n   they are used on Illumos.   Specifically, callers may safely\n   use KM_SLEEP in contexts which perform filesystem IO.  This\n   allows us to eliminate an entire class of Linux specific changes\n   which were previously required to avoid deadlocking the system.\n\nThis change will be largely transparent to existing callers but there\nare a few caveats:\n\n1. Because the headers were refactored and extraneous includes removed\n   callers may find they need to explicitly add additional #includes.\n   In particular, kmem_cache.h must now be explicitly includes to\n   access the SPL's kmem cache implementation.  This behavior is\n   different from Illumos but it was done to avoid always masking\n   the Linux slab functions when kmem.h is included.\n\n2. Callers, like Lustre, which made assumptions about the definitions\n   of KM_SLEEP, KM_NOSLEEP, and KM_PUSHPAGE will need to be updated.\n   Other callers such as ZFS which did not will not require changes.\n\n3. KM_PUSHPAGE is no longer overloaded to imply GFP_NOIO.  It retains\n   its original meaning of allowing allocations to access reserved\n   memory.  KM_PUSHPAGE callers can be converted back to KM_SLEEP.\n\n4. The KM_NODEBUG flags has been retired and the default warning\n   threshold increased to 32k.\n\n5. The kmem_virt() functions has been removed.  For callers which\n   need to distinguish between a physical and virtual address use\n   is_vmalloc_addr().\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b34b95635a99223b6bff5437fb389e9340dc7dcd", "message": "Fix kmem cstyle issues\n\nAddress all cstyle issues in the kmem, vmem, and kmem_cache source\nand headers.  This will done to make it easier to review subsequent\nchanges which will rework the kmem/vmem implementation.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e5b9b344c728bb0d9304f1a143db9255901dc5fe", "message": "Refactor existing code\n\nThis change introduces no functional changes to the memory management\ninterfaces.  It only restructures the existing codes by separating the\nkmem, vmem, and kmem cache implementations in the separate source and\nheader files.\n\nSplitting this functionality in to separate files required the addition\nof spl_vmem_{init,fini}() and spl_kmem_cache_{initi,fini}() functions.\n\nAdditionally, several minor changes to the #include's were required to\naccommodate the removal of extraneous header from kmem.h.\n\nBut again, while large this patch introduces no functional changes.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/03a783534ad9ea1db71d978f9f850f9dd13ccd51", "message": "Fix debug object on stack warning\n\nWhen running the SPLAT tests on a kernel with CONFIG_DEBUG_OBJECTS=y\nenabled the following warning is generated.\n\n  ODEBUG: object is on stack, but not annotated\n  WARNING: at lib/debugobjects.c:300 __debug_object_init+0x221/0x480()\n\nThis is caused by the test cases placing a debug object on the stack\nrather than the heap.  This isn't harmful since they are small objects\nbut to make CONFIG_DEBUG_OBJECTS=y happy the objects have been relocated\nto the heap.  This impacted taskq tests 1, 3, and 7.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #424"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8d9a23e82cea5d897e9357d569ef364106703d5a", "message": "Retire legacy debugging infrastructure\n\nWhen the SPL was originally written Linux tracepoints were still\nin their infancy.  Therefore, an entire debugging subsystem was\nadded to facilite tracing which served us well for many years.\n\nNow that Linux tracepoints have matured they provide all the\nfunctionality of the previous tracing subsystem.  Rather than\nmaintain parallel functionality it makes sense to fully adopt\ntracepoints.  Therefore, this patch retires the legacy debugging\ninfrastructure.\n\nSee zfsonlinux/zfs@bc9f413 for the tracepoint changes.\n\nSigned-off-by: Ned Bass <bass6@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #408"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/917fef273295616c563bbb0a5f6986cfce543d2f", "message": "Lower minimum objects/slab threshold\n\nAs long as we can fit a minimum of one object/slab there's no reason\nto prevent the creation of the cache.  This effectively pushes the\nmaximum object size up to 32MB.  The splat cache tests were extended\naccordingly to verify this functionality.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/46c936756ea26a52945eb8e8756e7c44ea9fc125", "message": "Merge branch 'cleanup'\n\nOver the years the SPL code bases has accumulated compatibly code\nto allow it to build against a wide range of Linux kernels. In\ngeneral this is desirable because it makes the code flexible.\nHowever, once support for these old kernels is no longer needed\nand is no longer being actively tested it should be removed. This\nhelps keep the code simple and understandable.\n\nThe spl-0.6.x releases have supported kernels all the way back to\n2.6.26. This patch stack moves that cut off up to 2.6.32 and newer\nkernels. This ensures we still support all the major enterprise\ndistributions which are largely locked in to 2.6.32 based kernels.\nAnd at the same time we can shed a large amount of compatibility\ncode which simplifies maintenance and new development.\n\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #395"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dcf91382b9cfad776f4de9458e53319e5a106331", "message": "Remove vfs_fsync() wrapper\n\nThe vfs_fsync() function has been available since Linux 2.6.29.\nThere is no longer a need to maintain this compatibility code.\nHowever, the HAVE_2ARGS_VFS_FSYNC check was left in place\nsince that change occured after 2.6.32.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/599662c538d06054608b16a1d6a3ce10f4fdd08c", "message": "Remove kern_path() wrapper\n\nThe kern_path() function has been available since Linux 2.6.28.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3d5392cefabc1a9b7dd9c853439d3262c5374829", "message": "Remove kvasprintf() wrapper\n\nThe kvasprintf() function has been available since Linux 2.6.22.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0fac9c9e6d8d74f56be09cd84ffb30197d2dcaad", "message": "Remove proc_handler() wrapper\n\nAs of Linux 2.6.32 the proc handlers where updated to expect only\nfive arguments.  Therefore there is no longer a need to maintain\nthis compatibility code and this infrastructure can be simplified.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e03119e86f695851f68b9a52de64075a89fb41bd", "message": "Update put_task_struct() comments\n\nUpdate the comments to correctly reflect when this interface was\nadded.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/68a829b29d50b2a0e83222e93cf4897527673a41", "message": "Remove credential configure checks.\n\nThe groups_search() function was never exported by a mainline kernel\ntherefore we drop this compatibility code and always provide our own\nimplementation.\n\nAdditionally, the cred_t structure has been available since 2.6.29\nso there is no longer a need to maintain compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e39174ed56acd418ef744d43876fc8cf6e9823ab", "message": "Add vfs_unlink() and vfs_rename() comments\n\nJust for consistency with the other autoconf checks a small comment\nblock was added before these checks.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/137af025f687dd19994666a6c7d38661c209f0c9", "message": "Remove set_fs_pwd() configure check\n\nThis function has never been exported by any mainline and was only\nbriefly available under RHEL5.  Therefore this check is being removed\nand the code update to always use the wrapper function.\n\nThe next step will be to eliminate all this code.  If ZFS were updated\nnot to assume that it's pwd was / there would be no need for this.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3c49a1698986861d76dc2c08dcce8774bde36e25", "message": "Remove user_path_dir() wrapper\n\nThe user_path_dir() function has been available since Linux 2.6.27.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/44778f41100f88e7458d4deb2335ad09ce0bd0ea", "message": "Remove kallsyms_lookup_name() wrapper\n\nAfter the removable of get_vmalloc_info(), the unused global memory\nvariables, and the optional dcache/icache shrinkers there is no\nlonger a need for the kallsyms compatibility code.  This allows\nus to eliminate another brittle area of the code by removing the\nkernel upcall this functionality depended on for older kernels.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/89a461e70c13c860d336dc36358bb02172ed6346", "message": "Remove shrink_{i,d}node_cache() wrappers\n\nThis is optional functionality which may or may not be useful to\nZFS when using older kernels.  It is never a hard requirement.\nTherefore this functionality is being removed from the SPL and\na simpler slimmed down version will be added to ZFS.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8bbbe46f8680389888d6111f8d81429dcc5defac", "message": "Remove global memory variables\n\nPlatforms such as Illumos and FreeBSD have historically provided\nglobal variables which summerize the memory state of a system.\nLinux on the otherhand doesn't expose any of this information\nto kernel modules and uses entirely different mechanisms for\nmemory management.\n\nIn order to simplify the original ZFS port to Linux these global\nvariables were emulated by the SPL for the benefit of ZFS.  As ZoL\nhas matured over the years it has moved steadily away from these\ninterfaces and now no longer depends on them at all.\n\nTherefore, this patch completely removes the global variables\navailrmem, minfree, desfree, lotsfree, needfree, swapfs_minfree,\nand swapfs_reserve.  This greatly simplifies the memory management\ncode and eliminates a common area of confusion.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e1310afae3bdb17628b40c35561f2daedfaf4062", "message": "Remove get_vmalloc_info() wrapper\n\nThe get_vmalloc_info() function was used to back the vmem_size()\nfunction.  This was always problematic and resulted in brittle\ncode because the kernel never provided a clean interface for\nmodules.\n\nHowever, it turns out that the only caller of this function in\nZFS uses it to determine the total virtual address space size.\nThis can be determined easily without get_vmalloc_info() so\nvmem_size() has been updated to take this approach which allows\nus to shed the get_vmalloc_info() dependency.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/50e41ab1e12f0b007239c55bfa77d02f6e8ba890", "message": "Remove on_each_cpu() wrapper\n\nThe on_each_cpu() function has been available since Linux 2.6.27.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b652d169b05cc1c75fdb04421feb83713a0e36c4", "message": "Remove mutex_lock_nested() wrapper\n\nThe mutex_lock_nested() function has been available since Linux 2.6.18.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2bc5666f53685c6631f9a5d1d8beebdf1325f8e0", "message": "Remove i_mutex() configure check\n\nThe inode structure has used i_mutex as its internal locking\nprimitive since 2.6.16.  The compatibility code to check for\nthe previous semaphore primitive has been removed.  However,\nthe wrapper function itself is being kept because it's entirely\npossible this primitive will change again to allow finer grained\nlocking.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9f36cace4154f7dd855c42aae2eb13a6e1d79362", "message": "Remove kmalloc_node() compatibility code\n\nThe kmalloc_node() function has been available since Linux 2.6.12.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d227e114edd65356c928b660c19d6f1f471c9f8d", "message": "Remove linux/uaccess.h header check\n\nThe uaccess header has been available in the same location since\nLinux 2.6.18.  There is no longer a need to maintain this\ncompatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e5b65e317948926f082740a331900eb9aaddc624", "message": "Remove uintptr_t typedef\n\nThe uintptr_t typedef has been available since Linux 2.6.24.\nThere is no longer a need to maintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ff0582cb395a8fd9be61926023a3923b9a908cc2", "message": "Remove atomic64_xchg() wrappers\n\nThe atomic64_xchg() and atomic64_cmpxchg() functions have been\navailable since Linux 2.6.24.  There is no longer a need to\nmaintain this compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/82f2f1a3af28d8ceadab53aeba3e94ab02138f85", "message": "Simplify the time compatibility wrappers\n\nMany of the time functions had grown overly complex in order to\nhandle kernel compatibility issues.  However, as of Linux 2.6.26\nall the required functionality is available.  This allows us to\nretire numerous configure checks and greatly simplify the time\ncompatibility wrappers.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/87f8055a91940e6408420091e1a1601113f7912e", "message": "Map highbit64() to fls64()\n\nThe fls64() function has been available since Linux 2.6.16 and\nit should be used to implemented highbit64().  This allows us\nto provide an optimized implementation and simplify the code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9c91800d199c65c7d893445bae9b9a9a5590c335", "message": "Remove CTL_UNNUMBERED sysctl interface\n\nSupport for the CTL_UNNUMBERED sysctl interface was removed in\nLinux 2.6.19.  There is no longer any reason to maintain this\ncompatibility code.  There also issue any reason to keep around\nthe CTL_NAME macro and helpers so they have been retired.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b38bf6a4e3bb321b1e4fad1be5a77faf22dcdcbc", "message": "Remove register_sysctl() compatibility code\n\nThe register_sysctl() interface has been stable since Linux 2.6.21.\nThere is no longer a need to maintain compatibility code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bb4dee3df2a191032201ce7f367be12fd898e08d", "message": "Remove utsname() wrapper\n\nThere is no longer a need to wrap this because utsname() is provided\nby the kernel and can be called directly.  This will require a small\nchange in the ZFS code because utsname is expected to be a global\nstructure and not a function.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/aa363c5c0507ed660f57655211df1fe2c30b380e", "message": "Remove sysctl_vfs_cache_pressure assumption\n\nThe generic SPL cache shrinkers make the assumption that the\ncaches only contain VFS cache data and therefore should be scaled\nbased on vfs_cache_pressure.  This is not strictly true and it\nshould not be assumed.\n\nRemoving this tuning should not have any impact on the stock\nbehavior because vfs_cache_pressure=100 by default.  This means\nthat no scaling will take place.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a80d69caf0daa28d661c88cb699bee02de2e312d", "message": "Remove adaptive mutex implementation\n\nSince the Linux 2.6.29 kernel all mutexes have been adaptive mutexs.\nThere is no longer any point in keeping this code so it is being\nremoved to simplify the code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/56cfabd3e8ceac79703edd4453c2c2d89a15ff6f", "message": "Remove patches directory\n\nThere is no longer a need to carry these stale patches in the\nSPL source tree.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3a9253056345e27cd79433a52a63929d6bef907b", "message": "Update code to use misc_register()/misc_deregister()\n\nWhen the SPL was originally written it was designed to use the\ndevice_create() and device_destroy() functions.  Unfortunately,\nthese functions changed considerably over the years making them\ndifficult to rely on.\n\nAs it turns out a better choice would have been to use the\nmisc_register()/misc_deregister() functions.  This interface\nfor registering character devices has remained stable, is simple,\nand provides everything we need.\n\nTherefore the code has been reworked to use this interface.  The\nhigher level ZFS code has always depended on these same interfaces\nso this is also as a step towards minimizing our kernel dependencies.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0cb3dafccdffd00167275416730332cd5570a07a", "message": "Update SPLAT to use kmutex_t for portability\n\nFor consistency throughout the code update the SPLAT infrastructure\nto use the wrapped mutex interfaces.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/62032954383dc6d1200890f07f56bb0ad85451be", "message": "Make license compatibility checks consistent\n\nApply the license specified in the META file to ensure the\ncompatibility checks are all performed consistently.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/81857a34d1d767abf40aea7e6db074d8cbf7b49f", "message": "Fix bug in SPLAT taskq:front\n\nWhile running SPLAT on a kernel with CONFIG_DEBUG_ATOMIC_SLEEP\nenabled the taskq:front was flagged as a test which might sleep\nwhich in an unsafe context.  Specifically, the splat_vprint()\nfunction which internally takes a mutex was being called under\na spin lock.  Moving the log function outside the spin lock\ncleanly solves this issue.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f2297b5a8932594a45c99d3d01b0d53a16ea9753", "message": "Set spl_kmem_cache_slab_limit=16384 to default\n\nFor small objects the Linux slab allocator should be used to make the most\nefficient use of the memory.  However, large objects are not supported by\nthe Linux slab and therefore the SPL implementation is preferred.  A cutoff\nof 16K was determined to be optimal for architectures using 4K pages.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: DHE <git@dehacked.net>\nIssue #356\nCloses #379"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c1aef26944ca8bc18e9f46f464c2957890c707e9", "message": "Set spl_kmem_cache_reclaim=0 to default\n\nReinstate the correct default behavior of returning the number of objects\nin the cache for reclaim.  This behavior was disabled in recent releases\nto do occasional reports of spinning in shrink_slabs().  Those issues have\nbeen resolved and can no longer can be reproduced.  See commit 376dc35.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: DHE <git@dehacked.net>\nIssue #358\nCloses #379"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/377e12f14a2c3694c3a733782b91ae7beecc44f3", "message": "Rate limit debugging stack traces\n\nThere have been issues in the past where excessive debug logging\nto the console has resulted in significant performance impacts.\nIn the vast majority of these cases only a few stack traces are\nrequired to diagnose the issue.  Therefore, stack traces dumped to\nthe console will now we limited to 5 every 60s.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nCloses #374"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/31cb5383bff0fddc5058973e32a6f2c446d45e59", "message": "Tag spl-0.6.3\n\nMETA file and release log updated.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/4cdcdbff636763fbdae72e2f7e1f9e7971649cca", "message": "Fix DKMS package upgrade and packager\n\nRunning 'yum upgrade spl-dkms' package could appear to work properly\nand still leave you with no spl modules installed.  This will occur\nwhen only the spl release, and not the version, are incremented.\nThis may be the case for a fast moving spl-testing repository.\n\nDuring the upgrade process DKMS will realize that spl-x.y.z is already\ninstalled and remove it.  DKMS then correctly builds the new modules\nfor spl-x.y.z.  However, as a final step when the old spl-x.y.z-r is\nremoved the %preun script runs and removes the newly build modules.\nTo handle this case the %preun script has been updated to only run\nwhen the installed version exactly matches the full spec file version.\n\nThis change also updated ChangeLog section based on the DKMS\nreference spec file.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c4f38ddd8003ef51e7f4e92607b1838216650730", "message": "Restrict release number to META version\n\nWhen creating packages in a git repository the release number\ncan be automatically set by 'git describe'.  This normally works\nwell but if your repository has newer tags which match the form\nNAME-VERSION* the release may be incorrectly calculated.  To\nprevent this the match patten has been restricted to NAME-VERSION.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/376dc35e228498da7703e7ca4c2b75d16763c23b", "message": "Add spl_kmem_cache_reclaim module option\n\nThe correct behavior for all registered shrinkers is to return the\nnumber of objects in their cache.  In theory this allows the Linux\nVM to balance memory reclaim across all registered caches.\n\nIn commit b9b3715 this behavior was disabled in favor of returning\n-1 which notifies the VM that no additional objects are available\nfor reclaim.  This was done as a workaround to resolve thrashing\nin shrink_slabs() which could occur when memory was low and numerous\ncore where in reclaim.  Unfortunately, this has been observed to\nincrease the likelihood of OOM events when SPL slab consumers are\nresponsible for consuming the majority of memory.\n\nTherefore, this patch makes this behavior tunable.  Setting the\nspl_kmem_cache_reclaim module option to 0x1 will result in the\nshrinker only being called once.  This is the default behavior.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nCloses #358"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a073aeb0604b7d410be58135fb9d5c43671af263", "message": "Add KMC_SLAB cache type\n\nFor small objects the Linux slab allocator has several advantages\nover its counterpart in the SPL.  These include:\n\n1) It is more memory-efficient and packs objects more tightly.\n2) It is continually tuned to maximize performance.\n\nTherefore it makes sense to layer the SPLs slab allocator on top\nof the Linux slab allocator.  This allows us to leverage the\nadvantages above while preserving the Illumos semantics we depend\non.  However, there are some things we need to be careful of:\n\n1) The Linux slab allocator was never designed to work well with\n   large objects.  Because the SPL slab must still handle this use\n   case a cut off limit was added to transition from Linux slab\n   backed objects to kmem or vmem backed slabs.\n\n   spl_kmem_cache_slab_limit - Objects less than or equal to this\n   size in bytes will be backed by the Linux slab.  By default\n   this value is zero which disables the Linux slab functionality.\n   Reasonable values for this cut off limit are in the range of\n   4096-16386 bytes.\n\n   spl_kmem_cache_kmem_limit - Objects less than or equal to this\n   size in bytes will be backed by a kmem slab.  Objects over this\n   size will be vmem backed instead.  This value defaults to\n   1/8 a page, or 512 bytes on an x86_64 architecture.\n\n2) Be aware that using the Linux slab may inadvertently introduce\n   new deadlocks.  Care has been taken previously to ensure that\n   all allocations which occur in the write path use GFP_NOIO.\n   However, there may be internal allocations performed in the\n   Linux slab which do not honor these flags.  If this is the case\n   a deadlock may occur.\n\nThe path forward is definitely to start relying on the Linux slab.\nBut for that to happen we need to start building confidence that\nthere aren't any unexpected surprises lurking for us.  And ideally\nneed to move completely away from using the SPLs slab for large\nmemory allocations.  This patch is a first step.\n\nNOTES:\n1) The KMC_NOMAGAZINE flag was leveraged to support the Linux slab\n   backed caches but it is not supported for kmem/vmem backed caches.\n\n2) Regardless of the spl_kmem_cache_*_limit settings a cache may\n   be explicitly set to a given type by passed the KMC_KMEM,\n   KMC_VMEM, or KMC_SLAB flags during cache creation.\n\n3) The constructors, destructors, and reclaim callbacks are all\n   functional and will be called regardless of the cache type.\n\n4) KMC_SLAB caches will not appear in /proc/spl/kmem/slab due to\n   the issues involved in presenting correct object accounting.\n   Instead they will appear in /proc/slabinfo under the same names.\n\n5) Several kmem SPLAT tests needed to be fixed because they relied\n   incorrectly on internal kmem slab accounting.  With the updated\n   test cases all the SPLAT tests pass as expected.\n\n6) An autoconf test was added to ensure that the __GFP_COMP flag\n   was correctly added to the default flags used when allocating\n   a slab.  This is required to ensure all pages in higher order\n   slabs are properly refcounted, see ae16ed9.\n\n7) When using the SLUB allocator there is no need to attempt to\n   set the __GFP_COMP flag.  This has been the default behavior\n   for the SLUB since Linux 2.6.25.\n\n8) When using the SLUB it may be desirable to set the slub_nomerge\n   kernel parameter to prevent caches from being merged.\n\nOriginal-patch-by: DHE <git@dehacked.net>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: DHE <git@dehacked.net>\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nCloses #356"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e19101e08f25708b03e5ff98a4da5756cfd709f7", "message": "splat cred:groupmember: Fix false positives\n\nDue to certain assumptions made in the the cred:groupmember test it\ncould result in false positives when run on specific distributions.\nThis was solely a bug in the test case and not in the groupmember()\nfunction which the test case was validating.\n\nTo prevent future false positives the test case has been rewritten\nto be both more rigerous and to make fewer assumptions about the\nsystem.\n\nMinor style cleanup was done to cr_groups_search() and groupmember()\nfunctions.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/668d2a0da5d542983ab200b35732d44c8b724305", "message": "splat kmem:slab_reclaim: Test cleanup\n\nBy setting __GFP_NORETRY the kernel memory reclaim logic was allowed to\nabort early and dump a falled allocation stack to the console.  Since\nthis was done in a tight loop to fill memory it could result in a large\nnumber of stacks being dumped to the console.  This in turn slowed down\nthe test sufficiently so it exceeded the time limit and failed.\n\nTo resolve this issue the __GFP_NORETRY flag is being removed.  This is\nhow it should have been called originally to ensure we're simulating\nthe behavior of most callers which will use the GFP_KERNEL flag.\n\nIn addition, the reclaim granularity of 1000 objects was far to coarse\nfor this to be a realistic test.  For kmem:slab_reclaim there might\nonly be a few thousand objects total in the cache.  Therefore, the\nSPLAT_KMEM_OBJ_RECLAIM constant for these tests was lowered.  This\nwill cause the reclaim callback to run more frequently which makes\nfor a better test case.\n\nThe frequency of the cache reaping in kmem:slab_reap was increased\nto accommodate the reduced number of objects released during the\nreclaim.\n\nThese changes only impact the test cases and were done to remove\nfalse positives caused by the test case itself.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/4c995417bc4207118eb9ae4848086c89bf1132f7", "message": "Remove incorrect use of EXTRA_DIST for man pages\n\nSetting the 'dist_' prefix is the correct way to instruct Automake\nto include these files in the distribution.  The EXTRA_DIST variable\nis reserved for files which are not covered by the automatic rules.\n\n  http://www.gnu.org/software/automake/manual/automake.html#Basics\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/aeeb4e0c0ae75b99ebbaa3056f0afc8e12949532", "message": "Remove default taskq thread to CPU bindings\n\nWhen this code was written it appears to have been assumed that\nevery taskq would have a large number of threads.  In this case\nit would make sense to attempt to evenly bind the threads over\nall available CPUs.  However, it failed to consider that creating\ntaskqs with a small number of threads will cause the CPUs with\nlower ids become over-subscribed.\n\nFor this reason the kthread_bind() call is being removed and\nwe're leaving the kernel to schedule these threads as it sees fit.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #325"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2f117de8beca7da1d22103df4630e9298afae370", "message": "Include linux/vmalloc.h for ARM and Sparc\n\nRelated to issue #257 which added Linux 3.10 compatibility.  For\nARM and Sparc architectures we must explicitly include the\n<linux/vmalloc.h> header to ensure the vmalloc_info structure\nis always defined when available.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #257\nCloses #291"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/921a35adeb9ccfa123add942bfe20837454138fa", "message": "Add module versioning\n\nUse the standard Linux MODULE_VERSION macro to expose the installed\nspl and splat module versions.  This will also automatically add a\nchecksum of the .c files and headers in \"srcversion\".  See:\n\n  /sys/module/spl/version\n  /sys/module/spl/srcversion\n  /sys/module/splat/version\n  /sys/module/splat/srcversion\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1923\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dd33a169ef1e071c2eb777328fe91df30ce542ae", "message": "Retroactively fix bogus %changelog date\n\nNew versions of rpmbuild detect the invalid date which was added\nincorrectly to the changelog.  To silence this noise fix it.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #306"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0f4b9a58063d95b4da26c64dab4054d6272e0973", "message": "Merge branch 'kstat'\n\nThis branch updates the existing kstat infrastructure to be\nmore flexible.  In particular, it extends the KSTAT_TYPE_RAW\ntype so it may be used to generate more dynamic kstats without\nthe need for additional custom types.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ce07767f79c926acdbdf7bb272f05e89820f31c3", "message": "Revert \"Add KSTAT_TYPE_TXG type\"\n\nThis reverts commit dba79fcbf2cc50be5caef84ae01657e884ac5d89 in\nfavor of using the generic KSTAT_TYPE_RAW callbacks.  The advantage\nof this approach is that arbitrary types can be added without the\nneed to add them to the SPL.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #296"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/429fe89ceefa033120f220787265eb10d77991e7", "message": "Consistently use local_irq_disable/local_irq_enable\n\nIt was observed that spl_kmem_cache_alloc() uses local_irq_save()\nand saves the interrupt state in a local variable.  This would\nnormally be fine except that spl_kmem_cache_alloc() calls\nspl_cache_refill() which re-enables interrupts.  It is then\npossible that while interrupts are enabled the process is\nrescheduled to a different cpu before being disable again.\nThis could result in us restoring the saved interrupt state\nfrom one cpu to another.\n\nWhat the consequences of this are aren't perfectly clear, but\nthis is clearly a bug and it has the potential to cause issues.\nThe code has been updated to just use local_irq_enable() and\nlocal_irq_disable() to avoid this.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e90856f1d2ac1c5135802b802a66e60439b2ac1a", "message": "Tag spl-0.6.2\n\nMETA file and release log updated.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0b15402db3819115953127078192d804ff36b27f", "message": "Add kmod repo integration\n\nWhen the kmod packaging infrastructure was originally added the\ndependency on the rpmfusion yum repositories was disabled.  This\nwas done at the time in favour of getting local builds working.\n\nNow the time has come to conditionally re-enable that functionality\nso we can properly provide binary kmod packages.\n\n  ./configure --with-config=srpm\n  make SRPM_DEFINE_KMOD='--define=\"repo rpmfusion\"' srpm-kmod\n  mock rebuild spl-kmod-x.y.z-r.el6.src.rpm\n\nOne nice benefit of finishing this work is that the generic and\nfedora spl-kmod spec files can be merged again.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ceb387282577b872264143515fc4f55043368b0f", "message": "Fix KMC_OFFSLAB type caches\n\nBecause spl_slab_size() was always returning -ENOSPC for caches of\ntype KMC_OFFSLAB the cache could never be created.  Additionally\nthe slab size is rounded up to a page which is what kv_alloc()\nexpects.  The kv_alloc() code will minimally allocate a page,\nin the KMC_OFFSLAB case this could be reduced.\n\nThe basic regression tests kmem:slab_small, kmem:slab_large,\nand kmem:slab_align regression were updated to test KMC_OFFSLAB.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Ying Zhu <casualfisher@gmail.com>\nCloses #266"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b9b3715346b2748b2e512099862f1eabf076cf51", "message": "Return -1 for generic kmem cache shrinker\n\nIt has been observed that it's possible to get in a state where\nshrink_slabs() will spin repeated invoking the generic kmem cache\nshrinker.  It fails to detect it's not making forward progress\nreclaiming from the cache and doesn't give up.  To ensure this\nnever occurs we unconditionally return -1 after reclaiming what\nwe can.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nCloses zfsonlinux/zfs#1276\nCloses zfsonlinux/zfs#1598\nCloses zfsonlinux/zfs#1432"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f7f344f1b099732908f47232858e68518bb4393a", "message": "Improve build instructions\n\nMake it clear that when building directly from the Git tree\nthe configure script must be manually generated by running the\nautogen.sh script.  This requires that the GNU autotools packages\nbe installed for your distribution.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1448"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ab4e74cc38359a1e909febe31e8440a2908bd10e", "message": "Fix bogus kmem leak warning\n\nCommit 5c7a036 correctly relocated the creation of a taskq\nand the registraction of the kmem_cache_shrinker after the\ninitialization of the kmem tracking code.  However, the\ncleanup of these structures was not done before the leak\nchecks in spl_kmem_fini().  This resulted in an incorrect\n'kmem leaked' warning even though there was no actual leak.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1569"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b1424adda53eba1b6342aab4547330acc6d783fd", "message": "Fix --enable-debug-kmem-tracking option\n\nThis code has gotten something stale and no longer builds cleanly\nagainst modern kernels.  The two issues addressed here are as\nfollows:\n\n* The hlist_*_rcu interfaces in the kernel have been relatively\n  unstable.  Since this isn't performance critical code just use\n  the long standing hlist_* variants.\n\n* In older kernels the hash_ptr() function takes a 'void *' but\n  in newer kernels it expects a 'const void *'.  To silence the\n  compiler warnings about this explicitly cast it to a 'void *'.\n  The memset function is a similar case but it always expects\n  a 'void *'.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #256"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/5bc941f3cd1142abc3d7d2261a7a077bfe949367", "message": "Merge branch 'linux-3.10'\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #257"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ab0fdfef52b4770f8039c0871ff514e079a09a4c", "message": "Fix ASSERT0 and VERIFY0 macro typo\n\nEnsure the value is cast to a 'long long' for printing purposes.  The\nexpectation is that ASSERT0/VERIFY0 are mostly used for validating\nreturn values and thus may commonly be negative.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #246"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1c6d149feb4033e4a56fb987004edc5d45288bcb", "message": "Add ASSERT0 and VERIFY0 macros\n\nThe Illumos code introduced the ASSERT0 and VERIFY0 macros which\nare to be used instead of ASSERT3S(x, ==, 0) and VERIFY3S(x, ==, 0).\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Madhav Suresh <madhav.suresh@delphix.com>\nCloses #246"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/99c452bbbaeaa8fae498da1774d81e146bdd45ed", "message": "Fix taskq_wait_id()\n\nThe existing taskq_wait_id() function can incorrectly block\nindefinitely.  Reimplement it more simply using wait_event()\nin a similar fashion to taskq_wait_all().\n\nThis flaw was uncovered in the context of moving vn_rdwr() to\na taskq.  Previously taskq_wait_id() had no consumers outside\nthe SPLAT task framework which is why the issue went unnoticed.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ab59be7bc752481db64df07c821e2ae6bf2ae71b", "message": "Fix delay()\n\nSomewhat amazingly it went unnoticed that the delay() function\ndoesn't actually cause the task to block.  Since the task state\nis never changed from TASK_RUNNING before schedule_timeout() the\nscheduler allows to task to continue running without any delay.\nUsing schedule_timeout_interruptible() resolves the issue by\ncorrectly setting TASK_UNINTERRUPTIBLE.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f6437b60c2b2bf514a0c2e82f51fde5803b57b93", "message": "Add msec/usec/nsec to tick convertors\n\nAdd wrappers for the Solaris MSEC_TO_TICK, USEC_TO_TICK, and\nNSEC_TO_TICK conversion functions.  They are mapped directly to\ntheir Linux counterparts with the exception of NSEC_TO_TICK\ncan cannot use usecs_to_jiffies() because it is not exported\nby the kernel.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/352bd194827fc0b6425bf701b095969f9fb80b4f", "message": "Add additional dependencies for DKMS package\n\nFor the DKMS package to successfully build the kernel-devel\nheaders must be included along gcc, make, and perl.  The SPL\ncode never directly invokes perl but the kernel build system\ndepends on it.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue zfsonlinux/zfs#1380"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/7fd629d4304d1335963e61802c38c9ab3856c171", "message": "Replace the SPL_AC_META perl dependency with awk\n\nThe only remaining perl dependency is part of the SPL_AC_META macro.\nBy eliminating this and replacing it with awk we can avoid the need\nto pull in perl to rebuild the packages.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue zfsonlinux/zfs#1380"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c76b1dab8d24a833f0867b69e6c8576a1b6b28e4", "message": "Automake 1.10.1 compat: AM_SILENT_RULES\n\nPart of the automated testing involves building the source on Debian Lenny\nwhich ships an ancient version of automake (1.10.1).  Historically, this\nhas caused a non-fatal warning about AM_SILENT_RULES not being defined.\nBut when the autogen.sh script was updated to use autoreconf the warning\nbecame fatal.\n\n  configure.ac:31: warning: macro `AM_SILENT_RULES' not found in library\n  autoreconf: running: /usr/bin/autoconf --force\n  configure.ac:34: error: possibly undefined macro: AM_SILENT_RULES\n        If this token and others are legitimate, please use m4_pattern_allow.\n\nTo resolve this build issue the call to AM_SILENT_RULES has been wrapped\nby m4_ifdef().  This prevents the macro from being expanded on platforms\nwhere it's undefined.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6385874dbfe0478a5f3d70c5e5983e800b038d49", "message": "Tag spl-0.6.1\n\nMETA file and release log updated.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8636968f9a24e4a1cce1753ca68631a0ae2ced71", "message": "Provide ${kmodname}-devel-kmod for yum-builddep\n\nIn order to ensure that yum-builddep pulls in all the build\nrequirements a generic ${kmodname}-devel-kmod provides line is\nadded.  This allows a version of the development headers to be\nincluded without requiring knowledge of the kernel version.\n\nThis is important because unlike rpmbuild which does correctly\nexpand the source rpm spec file, yum-builddep does not.  Without\nthis generic provides line mock which relies on yum-builddep is\nunable to automatically satisfy the dependency.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c14183adcabd020b72c29f224f94bd90f9cead12", "message": "Use 'git describe' for working builds\n\nWhen building from an arbitrary commit in the git tree it's useful\nfor the resulting packages to be uniquely identifiable.  Therefore,\nthe build system has been updated to detect if your compiling in\ngit tree.\n\nIf you are building in a git tree, and there are commits after the\nlast annotated tag.  Then the <id>-<hash> component of 'git describe'\nwill be used to overwrite the 'Release:' field in the META file.\n\nThe only tricky part is that to ensure the 'make dist' tarball is\nbuilt using the correct release.  A dist-hook was added to the top\nlevel make file to rewrite the META file using the correct release.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #195\nIssue #111"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bef14fbc8c29fb07a34fc3ac7f70ef8c2f8d1c0e", "message": "Use requested kernel for dkms builds\n\nThe --with-linux and --with-linux-obj options must be specified\nas part of the dkms build otherwise the package will be built\nagainst the running kernel.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/19e9d8fd618e7cc6385911b5cf329d2f00c2b638", "message": "Remove spl-dkms conflict with spl-kmod\n\nBecause the spl-dkms package also provides spl-kmod for the\nspl user package yum flags this as a conflict.  To avoid the\nproblem remove the Conflicts tag from spl-dkms and just rely\non the one in spl-kmod.\n\n  spl-dkms-0.6.0-rc14.fc18.noarch has installed conflicts\n    spl-kmod: spl-dkms-0.6.0-rc14.fc18.noarch\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/493972c8964174d0ec767c4e780bb3add71363fe", "message": "Refresh RPM packaging\n\nRefresh the existing RPM packaging to conform to the 'Fedora\nPackaging Guidelines'.  This includes adopting the kmods2\npackaging standard which is used fod kmods distributed by\nrpmfusion for Fedora/RHEL.\n\n  http://fedoraproject.org/wiki/Packaging:Guidelines\n  http://rpmfusion.org/Packaging/KernelModules/Kmods2\n\nWhile the spec files have been entirely rewritten from a\nuser perspective the only major changes are:\n\n* The Fedora packages now have a build dependency on the\n  rpmfusion repositories.  The generic kmod packages also\n  have a new dependency on kmodtool-1.22 but it is bundled\n  with the source rpm so no additional packages are needed.\n\n* The kernel binary module packages have been renamed from\n  spl-modules-* to kmod-spl-* as specificed by kmods2.\n\n* The is now a common kmod-spl-devel-* package in addition\n  to the per-kernel devel packages.  The common package\n  contains the development headers while the per-kernel\n  package contains kernel specific build products.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #222"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/4a6d8d2c3e72345463de1db97d7d016c95443679", "message": "Change spl-kmod-devel install path\n\nInstall the common spl kernel development headers under\n/usr/src/spl-<version>/ rather than in a kernel specific\ndirectory.  The kernel specific build products such as\nspl_config.h and Modules.symvers are left installed under\n/usr/src/spl-<version>/<kernel>.\n\nThis was done to be consistent with where dkms expects\nkernel module source to be packaged.  It also allows for\na common spl-kmod-devel package which includes the headers,\nand per-kernel spl-kmod-devel-<kernel> packages.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/5c30c47a4542a58ae6c94bdee15f4691affa2a17", "message": "Merge branch 'linux-3.9'\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #221"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ea5c4389fb7183f036b38e5ba171ac5a05798c4d", "message": "Merge branch 'build-system'"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/5f0a4b0847ae19a5e647734cb3ca1c5af8bd9cf9", "message": "Remove ARCH packaging\n\nThe kernel modules are now available in the Arch User Repository\n(AUR) via zfs.  Since their packaging is maintained and superior\nto ours it is being removed from the tree.\n\n  https://wiki.archlinux.org/index.php/ZFS\n\nNow that various distributions are picking up the packages we\nshould eventually be able to remove most of this infrastructure.\nPackaging belongs with the distributions not upstream.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d1142fbffe720cd5f82691d7a00816ce72f4e2b2", "message": "Remove custom install-data-local for headers\n\nRather than use a custom install target it is cleaner to define\na 'kerneldir' and set 'kernel_HEADERS' appropriately.  This\nallows us to leverage the standing configure install support.\n\nAdditionally, I took this opertunity add the missing make files\nto the include subdirectories.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0298f3d67ff4971513ff848d640ca431a983de43", "message": "Add KMODDIR to install target\n\nProvide a mechanism to control the directory name the modules\nare installed in.  The kernel privdes INSTALL_MOD_DIR for\nthis but it was hardcoded to be 'addon/spl'.\n\nAdd a KMODDIR variable which can be passed to 'make install'\nto override the default directory name.  While we're here\nchange the default from 'addon/spl' to 'extra' which is the\nkernel.org default.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/fea77534f0a865bad1c7456bd9fceb1f54976988", "message": "Fix spl_config.h install permissions\n\nThe default permissions used by install are 755.  Since this\nfile isn't executable 644 is more appropriate.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8adf71e9b0e20d9f1ec2b3bc308db206cb6ceed7", "message": "Remove INSTALL\n\nThe generic INSTALL instructions can be safely dropped.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/4bf3909e5186a978ea9bf5fb1409aa9777d40a35", "message": "Disable automatic log dumping\n\nLong ago infrastructure was added to the SPL to keep an internal\ndebug log of the last few seconds of activity.  This was helpful\nduring the early development, but these days it is no longer\nneeded.  I haven't had to resort to this debug buffer to resolve\nan issue for several years now.\n\nToday better more generic tools like systemtap and ftrace have\nevolved to the point where they can be used for this purpose.\nAlong with the stack trace dumped to the system console, and in\nrare cases a crash dump we almost always have the debug we need.\n\nTherefore, I'm disabling the code which automatically dumps\nthis log to disk during an assertion except for the case where\nspl_debug_panic_on_bug is set (disabled by default).\n\nThis should be viewed as a first step towards either.\n\n  a) Retiring this infrastructure and complexity entirely, or\n  b) Integrating this logging more properly with ftrace.\n\nAs part of this change I'm also removing from the packages the\nundocumented spl utility which is used to decode the binary logs.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dd3678fc29d75286b57e705454bbd7e60e1b44e0", "message": "Fix atomic64_* autoconf checks\n\nThe SPL_AC_ATOMIC_SPINLOCK, SPL_AC_TYPE_ATOMIC64_CMPXCHG, and\nSPL_AC_TYPE_ATOMIC64_XCHG were all directly including the\n'asm/atomic.h' header.  As of Linux 3.4 this header was removed\nwhich results in a build failure.\n\nThe right thing to do is include 'linux/atomic.h' however we\ncan't safely do this because it doesn't exist in 2.6.26 kernels.\nTherefore, we include 'linux/fs.h' which in turn includes the\ncorrect atomic header regardless of the kernel version.\n\nWhen these incorrect APIs are used in ZFS the following build\nfailure results.\n\n  arc.c:791:80: warning: '__ret' may be used uninitialized\n  in this function [-Wuninitialized]\n  arc.c:791:1875: error: call to '__cmpxchg_wrong_size'\n  declared with attribute error: Bad argument size for cmpxchg\n\nSince this is all Linux 2.6.24 compatibility code there's\nan argument to be made that it should be removed because\nkernels this old are not supported.  However, because we're\nso close to a release I'm going to leave it in place for now.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#814\nCloses zfsonlinux/zfs#1254"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/869f30f1aecbb9fbd03c43980beb2ee16975f2a4", "message": "SPL 0.6.0-rc14"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6ef94aa67a48792d98b76152661743e42c23a03f", "message": "Fix tsd_get/set() race with tsd_exit/destroy()\n\nThe tsd_exit() and tsd_destroy() functions remove entries from\nhash bins without taking the hash bin lock.  They do take the\ntable lock, but tsd_get() and tsd_set() only take the hash bin\nlock to allow for maximum concurency.\n\nThe result is that while tsd_get() and tsd_set() are traversing\nthe hash bin list it can be modified by another thread in which\nhappens to hash to the same value.  To avoid this add the needed\nlocking to tsd_exit() and tsd_destroy().\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #174"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/de081a2ab4e911d2308b4f4055558f1d666f6b63", "message": "Check for KALLSYMS\n\nCheck at ./configure time that the kernel was built with kallsyms\nsupport.  If the kernel doesn't have CONFIG_KALLSYMS defined the\nmodules will still compile cleanly but will not be loadable.  So\nwe really want to catch this early during ./configure.  Note that\nwe do not require CONFIG_KALLSYMS_ALL but it may be safely defined.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #6"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0936c3449fc81caeed49d23e1705a9decd964700", "message": "Add spl_kmem_cache_expire module option\n\nCache aging was implemented because it was part of the default Solaris\nkmem_cache behavior.  The idea is that per-cpu objects which haven't been\naccessed in several seconds should be returned to the cache.  On the other\nhand Linux slabs never move objects back to the slabs unless there is\nmemory pressure on the system.\n\nThis behavior is now configurable through the 'spl_kmem_cache_expire'\nmodule option.  The value is a bit mask with the following meaning.\n\n  0x1 - Solaris style cache aging eviction is enabled.\n  0x2 - Linux style low memory eviction is enabled.\n\nBoth methods may be safely enabled simultaneously, but by default\nboth are disabled.  It has never been clear if the kmem cache aging\n(which has been around from day one) actually does any good.  It has\nhowever been the source of numerous bugs so I wouldn't mind retiring\nit entirely.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1227\nCloses #210"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/84dd1f4f158c2da72f50d5ee5cd798197303ab23", "message": "Remove spl_invalidate_inodes()\n\nThis functionality is no longer required by ZFS, see commit\nzfsonlinux/zfs@7b3e34ba5a7ee8d0fda44d214f6f11eb16cdb26f.\nSince there are no other consumers, and because it adds\nadditional autoconf complexity which must be maintained\nthe spl_invalidate_inodes() function has been removed.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue zfsonlinux/zfs#795"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d4899f4747fd03be748fd1a589b9db5786fa1375", "message": "kmem-cache: Fix slab ageing soft lockup\n\nCommit a10287e00d13c4c4dbbff14f42b00b03da363fcb slightly reworked\nthe slab ageing code such that it is no longer dependent on the\nLinux delayed work queue interfaces.\n\nThis was good for portability and performance, but it requires us\nto use the on_each_cpu() function to execute the spl_magazine_age()\nfunction.  That means that the function is now executing in interrupt\ncontext whereas before it was scheduled in normal process context.\nAnd that means we need to be slightly more careful about the locking\nin the interrupt handler.\n\nWith the reworked code it's possible that we'll be holding the\nskc->skc_lock and be interrupted to handle the spl_magazine_age()\nIRQ.  This will result in a deadlock and soft lockup errors unless\nwe're careful to detect the contention and avoid taking the lock in\nthe interupt handler.  So that's what this patch does.\n\nAlternately, (and slightly more conventionally) we could have used\nspin_lock_irqsave() to prevent this race entirely but I'd perfer to\navoid disabling interrupts as much as possible due to performance\nconcerns.  There is absolutely no penalty for us not aging objects\nout of the magazine due to contention.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nCloses zfsonlinux/zfs#1193"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/42b3ce622f53001d819e6c8eabe4576e6dd38913", "message": "Check for ZLIB_INFLATE and ZLIB_DEFLATE\n\nCheck at ./configure time that the kernel was built with zlib\nsupport enabled.  This support may either be configured as a\nmodule or builtin to the kernel.  But if it's missing the build\nwill fail so it's best to catch this early.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#582"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/050cd84e628e5d827a0b345cda12b97253fccd37", "message": "Linux compat 3.7.1, on_each_cpu()\n\nSome kernels require that we include the 'linux/irqflags.h'\nheader for the SPL_AC_3ARGS_ON_EACH_CPU check.  Otherwise,\nthe functions local_irq_enable()/local_irq_disable() will not\nbe defined and the prototype will be misdetected as the four\nargument version.\n\nThis change actually include 'linux/interrupt.h' which in turn\nincludes 'linux/irqflags.h' to be as generic as possible.\n\nAdditionally, passing NULL as the function can result in a\ngcc error because the on_each_cpu() macro executes it\nunconditionally.  To make the test more robust we pass the\ndummy function on_each_cpu_func().\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #204"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1c7b3eaf87492e875d7ad05f183e98fa306e48c2", "message": "RHEL 6.4 compat, fallocate()\n\nIn the upstream kernel the FALLOC_FL_PUNCH_HOLE #define was\nintroduced after the fallocate() function was moved from the\ninode_operations to the file_operations structure.  Therefore,\nthe SPL code assumed that if FALLOC_FL_PUNCH_HOLE was defined\nit was safe to use f_ops->fallocate().\n\nUnfortunately, the RHEL6.4 kernel has only backported the\nFALLOC_FL_PUNCH_HOLE #define and not the fallocate() change.\n\nTo address this compatibility issue the spl_filp_fallocate()\nhelper function was added to properly detect which interface\nis available.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/02d25048d293a44001de6967872476f7d78e2397", "message": "SPL 0.6.0-rc13"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/5b2fdbb69cedd22fcb489b0cc28d36ee08992c31", "message": "Refresh AUTHORS\n\nThe AUTHORS file was getting stale.  Refresh its contents\nusing the authors listed in the git commit logs.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dd5b6d96f1952df2f99486fbf0d665a43e92bbe3", "message": "Remove the ChangeLog\n\nThe ChangeLog was retired long ago, the git commit logs are\nauthoritative.  To avoid any confusion remove the ChangeLog.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/034f1b331e2c152e8e8954d715fa9a84f7b48d64", "message": "Fix spl_kmem_init_kallsyms_lookup() panic\n\nDue to I/O buffering the helper may return successfully before\nthe proc handler has a chance to execute.  To catch this case\nwait up to 1 second to verify spl_kallsyms_lookup_name_fn was\nupdated to a non SYMBOL_POISON value.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#699\nCloses zfsonlinux/zfs#859"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/18e0c500a759e0131b446bfe685cd1969656e7f5", "message": "Merge branch 'taskq'\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #199"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/eb0be2ed46d3f0eb01378458f421a88798608592", "message": "Removed SPL_AC_3ARGS_INIT_WORK check\n\nAll consumers of the kernel delayed work queues have been shifted\nover to rely on the taskq implementation.  This compatibility code\ncan now be removed.  Any new callers which need this functionality\nshould use the taskq interfaces for delayed work items.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/33e94ef1dd2678e28a5fbdb80f4ce35fd8c85974", "message": "kmem-cache: Use a taskq for async allocations\n\nShift the asynchronous allocations over to use the taskq interfaces.\nThis allows us to abandon the kernels delayed work queue interface\nand all the compatibility code it requires.\n\nThis code never actually used the delay functionality it was just\ndone this way to leverage the existing compatibility code.  All that\nis required is a thread context to perform the allocation in.  The\nonly thing clever in this change is that we take advantage of the\npreallocated task queue entries to avoid a memory allocation.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a10287e00d13c4c4dbbff14f42b00b03da363fcb", "message": "kmem-cache: Use taskqs for ageing\n\nShift the cache and magazine ageing functionality over to the new\ndelayed taskq interfaces.  This allows us to abandon the kernels\ndelayed work queue interface and all the compatibility code it\nrequires.\n\nHowever, the delayed taskq interface does not allow us to schedule\na task for a specfic cpu so the ageing code was slightly reworked.\nThe magazine ageing delay has been directly linked to the cache\nageing function.  The spl_cache_age() function invokes on_each_cpu()\nin order to run spl_magazine_age() on each cpu.  It then blocks\nwaiting for them to complete and promptly reclaims any free slabs.\n\nWhen restructing the code wasn't the primary goal I think the\nnew code is far more understable and maintainable.  It also should\nhelp minimize magazine thrashing because free slabs are immediately\nreleased after the magazine is aged.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/296a8e596dac344cf3af5e7f2dff5be12c979d80", "message": "kmem-cache: spl_kmem_cache_create() may always sleep\n\nWhen this code was originally written I went overboard and allowed\nfor the possibility of creating a cache in an atomic context.  In\npractice there are no callers which ever do this.  This makes sense\nsince a cache is by design a long lived data structure.\n\nTo prevent abuse of this function going forward I'm removing the\ncode which is supported to handle an atomic context.  All allocators\nhave been updated to use KM_SLEEP and the might_sleep() debug macro\nhas been added to immediately detect atomic callers.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a5a98e72605c071f94b9fdc4bf1811f8ed8d7f32", "message": "splat taskq:front: Reduce stack frame\n\nThe slightly increased size of the taskq_ent_t when debugging is\nenabled has pushed the taskq:front splat test over frame size\nlimit.  To resolve this dynamically allocate the taskq_ent_t\nstructures so they are part of the heap instead of the stack.\n\n  In function 'splat_taskq_test6_impl'\n  error: the frame size of 1648 bytes is larger than 1024 bytes\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/94ff5d38e30e5c79a45099413ac642c94b55a619", "message": "splat taskq:order: Reduce stack frame\n\nThe slightly increased size of the taskq_ent_t when debugging is\nenabled has pushed the taskq:order splat test over frame size\nlimit.  To resolve this dynamically allocate the taskq_ent_t\nstructures so they are part of the heap instead of the stack.\n\n  In function 'splat_taskq_test5_impl'\n  error: the frame size of 1680 bytes is larger than 1024 bytes\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3238e717631c68f6f44907b46733f4ae70452d3b", "message": "splat taskq:cancel: Add test case\n\nAdd a test case for taskq_cancel_id() to verify it is working\nproperly.  Just like taskq:delay we start by dispatching 100\ntasks.  However this time 1/3 of the tasks use taskq_dispatch()\nand will be run immediately, and 2/3 use taskq_dispatch_delay().\nThe idea is to create a busy taskq with both active, pending,\nand delayed tasks.\n\nAfter all the items have been successfully dispatched the test\nbegins randomly canceling known task ids.  It will do this for\n5 seconds randomly canceling a task id and then sleeping for a\nfew milliseconds.   The task being canceled may have already run,\nstill be on the pending list, or may be currently being executed\nby a worker thread.  The idea is to ensure we catch any subtle\nrace conditions.\n\nOnce all the non-canceled tasks have completed we cross check\nthe number of tasks which ran with the number of tasks which\nwere successfully canceled.  Additionally, we verify that the\ntaskq_cancel_id() function never blocks longer than needed.\nThis time is bounded by the longest run time of the task which\nwas dispatched.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2f357826208085bacce9e0a29972c2e5728d5420", "message": "splat taskq:delay: Add test case\n\nAdd a test case for taskq_dispatch_delay() to verify it is working\nproperly.  The test dispatchs 100 tasks to a taskq with random\nexpiration times spread over 5 seconds.  As each task expires and\ngets executed by a worker thread it verifies that it was run at\nthe correct time.  Once all the delayed tasks have been executed\nwe double check that all the dispatched tasks were successful.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d9acd930b52503582425c6398fc8dbc1d7d4a01b", "message": "taskq delay/cancel functionality\n\nAdd the ability to dispatch a delayed task to a taskq.  The desired\nbehavior is for the task to be queued but not executed by a worker\nthread until the expiration time is reached.  To achieve this two\nnew functions were added.\n\n* taskq_dispatch_delay() -\n\n  This function behaves exactly like taskq_dispatch() however it\ntakes a third 'expire_time' argument.  The caller should pass the\ndesired time the task should be executed as an absolute value in\njiffies.  The task is guarenteed not to run before this time, it\nmay run slightly latter if all the worker threads are busy.\n\n* taskq_cancel_id() -\n\n  Given a task id attempt to cancel the task before it gets executed.\nThis is primarily useful for canceling delay tasks but can be used for\ncanceling any previously dispatched task.  There are three possible\nreturn values.\n\n  0      - The task was found and canceled before it was executed.\n  ENOENT - The task was not found, either it was already run or an\n           invalid task id was supplied by the caller.\n  EBUSY  - The task is currently executing any may not be canceled.\n           This function will block until the task has been completed.\n\n* taskq_wait_all() -\n\n  The taskq_wait_id() function was renamed taskq_wait_all() to more\nclearly reflect its actual behavior.  It is only curreny used by\nthe splat taskq regression tests.\n\n* taskq_wait_id() -\n\n  Historically, the only difference between this function and\ntaskq_wait() was that you passed the task id.  In both functions you\nwould block until ALL lower task ids which executed.  This was\nsemantically correct but could be very slow particularly if there\nwere delay tasks submitted.\n\n  To better accomidate the delay tasks this function was reimplemnted.\nIt will now only block until the passed task id has been completed.\n\nThis is actually a fairly low risk change for a few reasons.\n\n* Only new ZFS callers will make use of the new interfaces and\n  very little common code was changed to support the new functions.\n\n* The existing taskq_wait() implementation was not changed just\n  slightly refactored.\n\n* The newly optimized taskq_wait_id() implementation was never\n  used by ZFS we can't accidentally introduce a new bug there.\n\nNOTE: This functionality does not exist in the Illumos taskqs.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/aed8671cb0bfc18f6cd034ecad2e9cf49536d965", "message": "taskq style, remove #define wrappers\n\nWhen the taskq implementation was originally written I wrapped all\nthe API functions in #define's.  This was done as a preventative\nmeasure to ensure that a taskq symbol never conflicted with an\nexisting kernel symbol.\n\nHowever, in practice the taskq symbols never conflicted.  The only\nmajor conflicts occured with the kmem cache API.  Since this added\nlayer of obfuscation never bought us anything for the taskq's I'm\nremoving it.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/472a34caff3bc8b0f65e7cdb4b5960b0e2d616c2", "message": "taskq style, convert spaces to soft tabs\n\nUpdate the taskq implementation to conform with the style used\nthroughout the rest of the code.  There are no functional\nchanges in this commit.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/576ec6aac4a4a15754892824643cedb30d652c39", "message": "splat command verbose behavior\n\nThe splat command takes a verbose option which when set prints\nthe internal debug log for every test.  This is helpful when\ntracking down a common failure, but for a rare failure the\nvolume of log data is distracting.\n\nTherefore, the verbose option has been adjusted to allow only\nprinting the debug log on failure.  The legacy behavior is still\navailable by specifying the verbose option twice.  For example:\n\n$ splat -t all:all     # Never print the debug log\n$ splat -v -t all:all  # Only print debug log on failure\n$ splat -vv -t all:all # Always print the debug log\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/053678f3b0572db442551dfa547dea939f45c96b", "message": "Handle errors from spl_kern_path_locked()\n\nWhen the Linux 3.6 KERN_PATH_LOCKED compatibility code was added\nby commit bcb1589 an entirely new vn_remove() implementation was\nadded.  That function did not properly handle an error from\nspl_kern_path_locked() which would result in an panic.  This\npatch addresses the issue by returning the error to the caller.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #187"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b84412a6e8a1d22780a8203e00049c6e43efacac", "message": "Linux compat 3.7, kernel_thread()\n\nThe preferred kernel interface for creating threads has been\nkthread_create() for a long time now.  However, several of the\nSPLAT tests still use the legacy kernel_thread() function which\nhas finally been dropped (mostly).\n\nUpdate the condvar and rwlock SPLAT tests to use the modern\ninterface.  Frankly this is something we should have done a\nlong time ago.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #194"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/251677e98fd41170a885095626a9247d609661b0", "message": "Verify --with-linux source directory exists\n\nPreviously this check was only performed when ./configure was\nattempting to autodetect your kernel source directory.  But we\nshould also handle the case where --with-linux was provided\nand is obviously wrong.  This way we catch the error before\ninvoking make and compiling the source with an incorrect\nautoconf results.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #162"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/043f9b57247eafb8e28e7b9465470ece87090228", "message": "Disable FS reclaim when allocating new slabs\n\nAllowing the spl_cache_grow_work() function to reclaim inodes\nallows for two unlikely deadlocks.  Therefore, we clear __GFP_FS\nfor these allocations.  The two deadlocks are:\n\n* While holding the ZFS_OBJ_HOLD_ENTER(zsb, obj1) lock a function\n  calls kmem_cache_alloc() which happens to need to allocate a\n  new slab.  To allocate the new slab we enter FS level reclaim\n  and attempt to evict several inodes.  To evict these inodes we\n  need to take the ZFS_OBJ_HOLD_ENTER(zsb, obj2) lock and it\n  just happens that obj1 and obj2 use the same hashed lock.\n\n* Similar to the first case however instead of getting blocked\n  on the hash lock we block in txg_wait_open() which is waiting\n  for the next txg which isn't coming because the txg_sync\n  thread is blocked in kmem_cache_alloc().\n\nNote this isn't a 100% fix because vmalloc() won't strictly\nhonor __GFP_FS.  However, it practice this is sufficient because\nseveral very unlikely things must all occur concurrently.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue zfsonlinux/zfs#1101"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e71a4534b340228d2e73bdadacaff570ade5ab6a", "message": "SPL 0.6.0-rc12"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/366346c56592b1ff13020460dcbdd607c70ac7f1", "message": "Merge branch 'kmem-cache-optimization'\n\nThis branch contains kmem cache optimizations designed to resolve\nthe lockups reported in zfsonlinux/zfs#922.  The lockups were\nlargely the result of spin lock contention in the slab under low\nmemory conditions.  Fundamentally, these changes are all designed\nto minimize that contention though a variety of methods.\n\n  * Improved vmem cached deadlock detection\n  * Track emergency objects in rbtree\n  * Optimize spl_kmem_cache_free()\n  * Never spin in kmem_cache_alloc()\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nzfsonlinux/zfs#922"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dc1b30224f9b1587dbe383d9c8e16caa4b1f71d3", "message": "Never spin in kmem_cache_alloc()\n\nIf we are reaping from the cache and a concurrent allocation\noccurs then the caller must block until the reaping is complete.\nThis is signaled by the clearing of the KMC_BIT_REAPING bit.\n\nOtherwise the caller will be in a tight loop which takes and\nreleases the skc->skc_cache lock.  When there are multiple\nconcurrent callers the system will thrash on the lock and\nappear to lock up.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a1af8fb1eaa08e55f6e0799779a89f455a5017f2", "message": "Optimize spl_kmem_cache_free()\n\nBecause only virtual slabs may have emergency objects and these\nobjects are guaranteed to have physical addresses.  It can be\neasily determined if the passed object is a virtual slab object\nor an emergency object.  This allows us to completely optimize\nthe emergency object free case out of the common free path.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ed3163484d2e70df8d9c50bad9678891b26c0fa0", "message": "Track emergency object in rbtree\n\nIn the initial implementation emergency objects were tracked on a\nper-cache list.  The assumption was that under normal operation we\nwould never allocate more than a handful of these objects.  So the\ncost of walking the list during free was expected to be negligible.\n\nHowever real world usage has shown that emergency objects tend to\nbe allocated in batches.  A deadlock will be detected and several\nthousand emergency objects will be allocated before the original\nblocked slab allocation can complete.\n\nTherefore the original list has been replaced by a red black tree\nwhich is sorted by the memory address of each allocated object.\nThis bounds the worst case insertion and removal time to O(log n)\nwhich minimize contention on the assoicated spin lock.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/165f13c33abadc06ccaea1c4f654fddfa316a80f", "message": "Improved vmem cached deadlock detection\n\nThe entire goal of performing the slab allocations asynchronously\nis to be able to detect when a vmalloc() deadlocks.  In this case,\nand only this case, do we want to start allocating emergency objects.\nThe trick here is to minimize false positives because the overhead\nof tracking emergency objects is far higher than normal slab objects.\n\nWith that goal in mind the code was reworked to be less sensitive\nto slow allocations by increasing the wait time.  Once a cache is\nis marked deadlocked all subsequent allocations which can not be\nsatisfied with existing cache objects will immediately allocate new\nemergency objects.  This behavior persists until the asynchronous\nallocation completes and clears the deadlocked flag.\n\nThe result of these tweaks is that far fewer emergency objects\nget created which is important because this minimizes the cost of\nreleasing them latter in kmem_cache_free().\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/65c2fc5a2ed3a60711cc63e53b3ab01e9d5095ae", "message": "Merge branch 'splat'\n\nAdditional debugging, some cleanup, and an assortment of fixes\nto the SPLAT tests and infrastructure.  Full details in the\nindividual patches.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1112486356252d4bd1f9d62b3931314e7dc05a32", "message": "splat kmem:slab_overcommit: Disabled\n\nDisable this test because it may result in an OOM event on the\nsystem which can result in the test infrastructure being killed.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/b8296bf3e664f1e583335c2ca3287199eb4e3863", "message": "splat atomic:64-bit: Create thread outside spin lock\n\nThe Fedora 3.6 debug kernel identified the following issue where\nwe create a thread under a spin lock.  This isn't safe because\nsleeping could result in a deadlock.  Therefore the lock is changed\nto a mutex so it's safe to sleep.\n\n  BUG: sleeping function called from invalid context at mm/slub.c:930\n  in_atomic(): 1, irqs_disabled(): 0, pid: 10583, name: splat\n  1 lock held by splat/10583:\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/0e149d42049a0fc89c9ecdac428dbdfc6fd4e20a", "message": "splat: Fix log buffer locking\n\nThe Fedora 3.6 debug kernel identified the following issue where\nwe call copy_to_user() under a spin lock().  This used to be safe\nin older kernels but no longer appears to be true so the spin\nlock was changed to a mutex.  None of this code is performance\ncritical so allowing the process to sleep is harmless.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/df870a697fc8669d63534b27a108335269a7884f", "message": "splat: Cleanup headers\n\nRestructure the the SPLAT headers such that each test only\nincludes the minimal set of headers it requires.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d2733258d09b02fac76af0df9921e369d33e9642", "message": "Condition variable reference counts\n\nReference count every entry and exit from the condition variable\nfunctions: cv_wait(), cv_wait_timeout(), cv_signal(), cv_broadcast().\n\nThis allows us to safely block in cv_destroy() until all consumers\nhave been scheduled and are no longer accessing the condition\nvariable memory.\n\nIn addition poison the magic value at the start of cv_destroy() to\nensure there are never any new callers after cv_destroy() is called.\nThe consumer is responsible for ensuring this never occurs.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/87efc30b270454a372e18f236491b4f0e5bcc30d", "message": "Merge remote branch 'eris/stats'\n\nBring in support for the new KSTAT_TYPE_TXG type.  This allows for\nadditional visibility in to the txg handling.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dba79fcbf2cc50be5caef84ae01657e884ac5d89", "message": "Add KSTAT_TYPE_TXG type\n\nAdd a new kstat type for tracking useful statistics about a TXG.\nThe new KSTAT_TYPE_TXG type can be used to tracks the following\nstatistics per-txg.\n\n  txg          - Unique txg number\n  state        - State (O)pen/(Q)uiescing/(S)yncing/(C)ommitted\n  birth;       - Creation time\n  nread        - Bytes read\n  nwritten;    - Bytes written\n  reads        - IOPs read\n  writes       - IOPs write\n  open_time;   - Length in nanoseconds the txg was open\n  quiesce_time - Length in nanoseconds the txg was quiescing\n  sync_time;   - Length in nanoseconds the txg was syncing\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/71c9f0b00307e6ee703eef9eba91e7640731c458", "message": "Make kstat.ks_update() callback atomic\n\nMove the kstat ks_update() callback under the ks_lock.  This\nenables dynamically sized kstats without modification to the\nkstat API.\n\n  * Create a kstat with the KSTAT_FLAG_VIRTUAL flag.\n  * Register a ->ks_update() callback which does:\n    o Frees any existing ks_data buffer.\n    o Set ks_data_size to the kstat array size.\n    o Set ks_data to an allocated buffer of size ks_data_size\n    o Populate the array of buffers with the required data.\n\nThe buffer allocated in the ks_update() callback is guaranteed\nto remain allocated and valid while the proc sequence handler\niterates over the buffer.  The lock will not be dropped until\nkstat_seq_stop() function is run making it safe for concurrent\naccess.  To allow the ks_update() callback to perform memory\nallocations the lock was changed to a mutex.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1e0c2c2ccfb720be81051a43c405fad173775963", "message": "Linux 3.7 compat, __clear_close_on_exec() removed\n\nCommit torvalds/linux@b8318b0 moved the __clear_close_on_exec()\nfunction out of include/linux/fdtable.h and in to fs/file.c\nmaking it unavailable to the SPL.\n\nNow as it turns out we only used this function to tear down\nsome test infrastructure for the vn_getf()/vn_releasef() SPLAT\nregression tests.  Rather than implement even more autoconf\ncompatibilty code to handle this we just remove the test case.\nThis also allows us to drop three existing autoconf tests.\n\nThis does mean the SPLAT tests will no longer verify these\nfunctions but historically they have never been a problem.\nAnd if we feel we absolutely need this test coverage I'm\nsure a more portable version of the test case could be added.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #183"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a6c6839a88b7dc344f3cd8e875a01802b34645cd", "message": "SPL 0.6.0-rc11"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3050c9314faf95a63f000577a1d9feebb86b26d9", "message": "Switch KM_SLEEP to KM_PUSHPAGE\n\nUnder certain circumstances the following functions may be called\nin a context where KM_SLEEP is unsafe and can result in a deadlocked\nsystem.  To avoid this problem the unconditional KM_SLEEPs are\nconverted to KM_PUSHPAGEs.  This will prevent them from attempting\nto initiate any I/O during direct reclaim.\n\nThis change was originally part of cd5ca4b but was reverted by\n330fe01.  It always should have had its own commit for exactly\nthis reason.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9b51f218410ccdeb69a85d99bd5f09051ec2def1", "message": "Remove TQ_SLEEP -> KM_SLEEP mapping\n\nWhen the taskq code was originally written it seemed like a good\nidea to simply map TQ_SLEEP to KM_SLEEP.  Unfortunately, this\nassumed that the TQ_* flags would never confict with any of the\nLinux GFP_* flags.  When adding the TQ_PUSHPAGE support in commit\ncd5ca4b this invariant was accidentally broken.\n\nTherefore to support TQ_PUSHPAGE, which is needed for Linux, and\nprevent any further confusion I have removed this direct mapping.\nThe TQ_SLEEP, TQ_NOSLEEP, and TQ_PUSHPAGE are no longer defined\nin terms of their KM_* counterparts.  Instead a simple mapping\nfunction is introduce to convert TQ_* -> KM_* where needed.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #171"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/330fe010e42fcdbc70832583f95248b9227ac2c4", "message": "Revert \"Switch KM_SLEEP to KM_PUSHPAGE\"\n\nThis reverts commit cd5ca4b2f86a606aa6ed68341a3672fdde1c9856\ndue to conflicts in the higher TQ_ bits which caused incorrect\nbehavior.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3c60f5054cf567ddc4a87e72d16d0a425721e422", "message": "Debug cv_destroy() with mutex held\n\nThere still appears to be a race in the condition variables where\n->cv_mutex is set after we are woken from the cv_destroy wait queue.\nThis might be possible when cv_destroy() is called immediately after\ncv_broadcast().  We had some troubles with this previously but\nthere may still be a small race, see commit d599e4f.\n\nThe following patch closes one small race and improves the ASSERTs\nsuch that they log the offending value.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nzfsonlinux/zfs#943"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/95331f4437d57f0d0a719d38355159b90a52f40d", "message": "Set KMC_NOEMERGENCY for zlib workspaces\n\nThe workspace required by zlib to perform compression is roughly\n512MB (order-7).  These allocations are so large that we should\nnever attempt to directly kmalloc an emergency object for them.\n\nIt is far preferable to asynchronously vmalloc an additional slab\nin case it's needed.  Then simply block waiting for an existing\nobject to be released or for the new slab to be allocated.\n\nThis can be accomplished by disabling emergency slab objects by\npassing the KMC_NOEMERGENCY flag at slab creation time.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nzfsonlinux/zfs#917"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/cb5c2acebb86da5b50f099b39209d22845eda8c7", "message": "Add KMC_NOEMERGENCY slab flag\n\nProvide a flag to disable the use of emergency objects for a\nspecific kmem cache.  There may be instances where under no\ncircumstances should you kmalloc() an emergency object.  For\nexample, when you cache contains very large objects (>128k).\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/46b3945d5da42fe8bf3c9ff8e28dbb8cb88095b9", "message": "Suppress task_hash_table_init() large allocation warning\n\nWhen various kernel debuging options are enabled this allocation\nmay be larger than usual as shown by the following warning.  It\nis in no way harmful so we suppress the warning.\n\n  SPL: large kmem_alloc(40960, 0x80d0) at\n  tsd_hash_table_init:358 (76495/76495)\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #93"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/efcd0ca32d099b0dcb556617c82403c150e6018b", "message": "Enhance SPLAT kmem:slab_overcommit test\n\nAfter the emergency slab objects were merged I started observing\ntimeout failures in the kmem:slab_overcommit test.  These were\ndue to the ineffecient way the slab_overcommit reclaim function\nwas implemented.  And due to the additional cost of potentially\nallocating ten of thousands of emergency objects and tracking\nthem on a single list.\n\nThis patch addresses the first concern by enhansing the test\ncase to trace all of the allocations objects as a linked list.\nThis allows for a cleaner version of the reclaim function to\nsimply release SPLAT_KMEM_OBJ_RECLAIM objects.\n\nSince this touches some common code all the tests which share\nthese data structions were also updated.  After making these\nchanges slab_overcommit is reliably passing.  However, there\nis certainly additional cleanup which could be done here.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/cd5ca4b2f86a606aa6ed68341a3672fdde1c9856", "message": "Switch KM_SLEEP to KM_PUSHPAGE\n\nUnder certain circumstances the following functions may be called\nin a context where KM_SLEEP is unsafe and can result in a deadlocked\nsystem.  To avoid this problem the unconditional KM_SLEEPs are\nconverted to KM_PUSHPAGEs.  This will prevent them from attempting\nto initiate any I/O during direct reclaim.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3e904f40b4f24db61798ca8c8a9027731cf2ced6", "message": "Mutex ASSERT on self deadlock\n\nGenerate an assertion if we're going to deadlock the system by\nattempting to acquire a mutex the process is already holding.\n\nThere are currently no known instances of this under normal\noperation, but it _might_ be possible when using a ZVOL as a\nswap device.  I want to ensure we catch this immediately if it\nwere to occur.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/eb0f407a2b9089113ef6f2402ebd887511315b43", "message": "Add PF_NOFS debugging flag\n\nPF_NOFS is a per-process debug flag which is set in current->flags to\ndetect when a process is performing an unsafe allocation.  All tasks\nwith PF_NOFS set must strictly use KM_PUSHPAGE for allocations because\nif they enter direct reclaim and initiate I/O they may deadlock.\n\nWhen debugging is disabled, any incorrect usage will be detected and\na call stack with a warning will be printed to the console.  The flags\nwill then be automatically corrected to allow for safe execution.  If\ndebugging is enabled this will be treated as a fatal condition.\n\nTo avoid any risk of conflicting with the existing PF_ flags.  The\nPF_NOFS bit shadows the rarely used PF_MUTEX_TESTER bit.  Only when\nCONFIG_RT_MUTEX_TESTER is not set, and we know this bit is unused,\nwill the PF_NOFS bit be valid.  Happily, most existing distributions\nship a kernel with CONFIG_RT_MUTEX_TESTER disabled.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/500e95c884f711883e094b48b58450ce2d80f2ea", "message": "Revert \"Disable vmalloc() direct reclaim\"\n\nThis reverts commit 2092cf68d89a51eb0d6193aeadabb579dfc4b4a0.  The\nuse of the PF_MEMALLOC flag was always a hack to work around memory\nreclaim deadlocks.  Those issues are believed to be resolved so this\nworkaround can be safely reverted.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/617f79de6aff55213bf233cf90d4425507acf56e", "message": "Revert \"Fix NULL deref in balance_pgdat()\"\n\nThis reverts commit b8b6e4c453929596b630fa1cca1ee26a532a2ab4.  The\nuse of the PF_MEMALLOC flag was always a hack to work around memory\nreclaim deadlocks.  Those issues are believed to be resolved so this\nworkaround can be safely reverted.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bc03e07a7c43b134c7936bba5e87fb8a526b6692", "message": "Revert \"Detect kernels that honor gfp flags passed to vmalloc()\"\n\nThis reverts commit 36811b4430aaea8c8b91bbe7d812a26799865499.\nWhich is no longer required because there is now SPL code in\nplace to safely handle the deadlocks the kernel patch was designed\nto address.  Therefore we can unconditionally use vmalloc() and\ndrop all the PF_MEMALLOC code.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d47e664ad4b7468c43a97aa6d299d8756571155d", "message": "Revert \"Add TASKQ_NORECLAIM flag\"\n\nThis reverts commit 372c2572336468cbf60272aa7e735b7ca0c3807c.  The\nuse of the PF_MEMALLOC flag was always a hack to work around memory\nreclaim deadlocks.  Those issues are believed to be resolved so this\nworkaround can be safely reverted.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e2dcc6e2b818d6f996203c9f1b4dfaf449554790", "message": "Emergency slab objects\n\nThis patch is designed to resolve a deadlock which can occur with\n__vmalloc() based slabs.  The issue is that the Linux kernel does\nnot honor the flags passed to __vmalloc().  This makes it unsafe\nto use in a writeback context.  Unfortunately, this is a use case\nZFS depends on for correct operation.\n\nFixing this issue in the upstream kernel was pursued and patches\nare available which resolve the issue.\n\n  https://bugs.gentoo.org/show_bug.cgi?id=416685\n\nHowever, these changes were rejected because upstream felt that\nusing __vmalloc() in the context of writeback should never be done.\nTheir solution was for us to rewrite parts of ZFS to accomidate\nthe Linux VM.\n\nWhile that is probably the right long term solution, and it is\nsomething we want to pursue, it is not a trivial task and will\nlikely destabilize the existing code.  This work has been planned\nfor the 0.7.0 release but in the meanwhile we want to improve the\nSPL slab implementation to accomidate this expected ZFS usage.\n\nThis is accomplished by performing the __vmalloc() asynchronously\nin the context of a work queue.  This doesn't prevent the posibility\nof the worker thread from deadlocking.  However, the caller can now\nsafely block on a wait queue for the slab allocation to complete.\n\nNormally this will occur in a reasonable amount of time and the\ncaller will be woken up when the new slab is available,.  The objects\nwill then get cached in the per-cpu magazines and everything will\nproceed as usual.\n\nHowever, if the __vmalloc() deadlocks for the reasons described\nabove, or is just very slow, then the callers on the wait queues\nwill timeout out.  When this rare situation occurs they will attempt\nto kmalloc() a single minimally sized object using the GFP_NOIO flags.\nThis allocation will not deadlock because kmalloc() will honor the\npassed flags and the caller will be able to make forward progress.\n\nAs long as forward progress can be maintained then even if the\nworker thread is deadlocked the critical thread will make progress.\nThis will eventually allow the deadlocked worker thread to complete\nand normal operation will resume.\n\nThese emergency allocations will likely be slow since they require\ncontiguous pages.  However, their use should be rare so the impact\nis expected to be minimal.  If that turns out not to be the case in\npractice further optimizations are possible.\n\nOne additional concern is if these emergency objects are long lived.\nRight now they are simply tracked on a list which must be walked when\nan object is freed.  Is they accumulate on a system and the list\ngrows freeing objects will become more expensive.  This could be\nhandled relatively easily by using a hash instead of a list, but that\noptimization (if needed) is left for a follow up patch.\n\nAdditionally, these emeregency objects could be repacked in to existing\nslabs as objects are freed if the kmem_cache_set_move() functionality\nwas implemented.  See issue https://github.com/zfsonlinux/spl/issues/26\nfor full details.  This work would also help reduce ZFS's memory\nfragmentation problems.\n\nThe /proc/spl/kmem/slab file has had two new columns added at the\nend.  The 'emerg' column reports the current number of these emergency\nobjects in use for the cache, and the following 'max' column shows\nthe historical worst case.  These value should give us a good idea\nof how often these objects are needed.  Based on these values under\nreal use cases we can tune the default behavior.\n\nLastly, as a side benefit using a single work queue for the slab\nallocations should reduce cpu contention on the global virtual address\nspace lock.   This should manifest itself as reduced cpu usage for\nthe system.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c638e9ad047f5192ee131ed8ec3d9851fbbedd2e", "message": "Remove autotools products\n\nRemove all of the generated autotools products from the repository\nand update the .gitignore files accordingly.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue zfsonlinux/zfs#718"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryao": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a988a35a93671c086c38ce5b71b6badb59a9c2de", "message": "Enforce architecture-specific barriers around clear_bit()\n\nThe comment above the Linux 3.16 kernel's clear_bit() states:\n\n/**\n * clear_bit - Clears a bit in memory\n * @nr: Bit to clear\n * @addr: Address to start counting from\n *\n * clear_bit() is atomic and may not be reordered.  However, it does\n * not contain a memory barrier, so if it is used for locking purposes,\n * you should call smp_mb__before_atomic() and/or smp_mb__after_atomic()\n * in order to ensure changes are visible on other processors.\n */\n\nThis comment does not make sense in the context of x86 because x86 maps the\noperations to barrier(), which is a compiler barrier. However, it does make\nsense to me when I consider architectures that reorder around atomic\ninstructions. In such situations, a processor is allowed to execute the\nwake_up_bit() before clear_bit() and we have a race. There are a few\narchitectures that suffer from this issue.\n\nIn such situations, the other processor would wake-up, see the bit is still\ntaken and go to sleep, while the one responsible for waking it up will\nassume that it did its job and continue.\n\nThis patch implements a wrapper that maps smp_mb__{before,after}_atomic() to\nsmp_mb__{before,after}_clear_bit() on older kernels and changes our code to\nleverage it in a manner consistent with the mainline kernel.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c2fa09454ef322a34df58655978e79c1c7fab641", "message": "Add hooks for disabling direct reclaim\n\nThe port of XFS to Linux introduced a thread-specific PF_FSTRANS bit\nthat is used to mark contexts which are processing transactions.  When\nset, allocations in this context can dip into kernel memory reserves\nto avoid deadlocks during writeback.  Linux 3.9 provided the additional\nPF_MEMALLOC_NOIO for disabling __GFP_IO in page allocations, which XFS\nbegan using in 3.15.\n\nThis patch implements hooks for marking transactions via PF_FSTRANS.\nWhen an allocation is performed in the context of PF_FSTRANS, any\nKM_SLEEP allocation is transparently converted to a GFP_NOIO allocation.\n\nAdditionally, when using a Linux 3.9 or newer kernel, it will set\nPF_MEMALLOC_NOIO to prevent direct reclaim from entering pageout() on\non any KM_PUSHPAGE or KM_NOSLEEP allocation.  This effectively allows\nthe spl_vmalloc() helper function to be used safely in a thread which\nis responsible for IO.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6ecf6d7228fbb29cfe6a335f5afc20f75493a791", "message": "Revert \"Add PF_NOFS debugging flag\"\n\nThis reverts commit eb0f407a2b9089113ef6f2402ebd887511315b43 in\npreperation for updating the kmem/vmem infrastructure to use the\nPF_FSTRANS flag.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/fd05dde75d1abbb3dd906f9efa298b12ffc9d7d7", "message": "Kernel header installation should respect --prefix\n\nThis is the upstream component of work that enables preliminary support\nfor building Gentoo's ZFS packaging on other Linux systems via Gentoo\nPrefix.\n\nSigned-off-by: Richard Yao <richard.yao@clusterhq.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #384"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ad9863e80be35825229d0638c5e69c0ea30f82de", "message": "kmem_cache: Call constructor/destructor on each alloc/free\n\nThis has a few benefits. First, it fixes a regression that \"Rework\ngeneric memory allocation interfaces\" appears to have triggered in\nsplat's slab_reap and slab_age tests. Second, it makes porting code from\nIllumos to ZFSOnLinux easier. Third, it has the side effect of making\nreclaim from slab caches that specify reclaim functions an order of\nmagnitude faster. The splat slab_reap test usually took 30 to 40\nseconds. With this change, it takes 3 to 4.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #369"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ec18fe3ce8f27cfd86743f091d2d57e78dd8a5af", "message": "Cleanup vn_rename() and vn_remove()\n\nzfsonlinux/spl#bcb15891ab394e11615eee08bba1fd85ac32e158 implemented\nLinux 3.6+ support by adding duplicate vn_rename and vn_remove\nfunctions. The new ones were cleaner, but the duplicate functions made\nthe codebase less maintainable. This adds some compatibility shims that\nallow us to retire the older vn_rename and vn_remove in favor of the new\nones on old kernels. The result is a net 143 line reduction in lines of\ncode and a cleaner codebase.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #370"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/89aa97059d7ddad668a5118aef7914743162a5e8", "message": "Change spl_kmem_cache_expire default setting to 2\n\nThis behavior is more consistent with the way memory reclaim\nis expected to work under Linux.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #349"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/acf0ade362cb8b26d67770114ee6fa17816e6b65", "message": "Simplify hostid logic\n\nThere is plenty of compatibility code for a hw_hostid\nthat isn't used by anything. At the same time, there are apparently\nissues with the current hostid logic. coredumb in #zfsonlinux on\nfreenode reported that Fedora 17 changes its hostid on every boot, which\nrequired force importing his pool. A suggestion by wca was to adopt\nFreeBSD's behavior, where it treats hostid as zero if /etc/hostid does\nnot exist\n\nAdopting FreeBSD's behavior permits us to eliminate plenty of code,\nincluding a userland helper that invokes the system's hostid as a\nfallback.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #224"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/50a0749eba31e821a7edf286f1e3b149f7d13c59", "message": "Linux 3.13 compat: Pass NULL for new delegated inode argument\n\nThis check was originally added for SLES10, a093c6a, to check for\na 'struct vfsmount *' argument which they added.  However, since\nSLES10 is based on a 2.6.16 kernel which is no longer supported\nthis functionality was dropped.  The checks were refactored to\nsupport Linux 3.13 without concern for historical versions.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #312"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3e96de17d723d6f6c9e2fd04b059b50d4e0bbef0", "message": "Linux 3.13 compat: Remove unused flags variable from __cv_init()\n\nGCC 4.8.1 complained about an unused flags variable when building\nagainst Linux 2.6.26.8:\n\n/var/tmp/portage/sys-kernel/spl-9999/work/spl-9999/module/spl/../../module/spl/spl-condvar.c:\nIn function \u2018__cv_init\u2019:\n/var/tmp/portage/sys-kernel/spl-9999/work/spl-9999/module/spl/../../module/spl/spl-condvar.c:39:6:\nerror: variable \u2018flags\u2019 set but not used\n[-Werror=unused-but-set-variable]\n  int flags = KM_SLEEP;\n        ^\n\tcc1: all warnings being treated as errors\n\nAdditionally, the superfluous code uses a preempt_count variable that is\nno longer available on Linux 3.13. Deleting the unnecessary code fixes a\nLinux 3.13 compatibility issue.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #312"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c3d9c0df3ee8d43db22815ebbfbe8b803fa46e46", "message": "Linux 3.12 compat: New shrinker API\n\ntorvalds/linux@24f7c6 introduced a new shrinker API while\ntorvalds/linux@a0b021 dropped support for the old shrinker API.\nThis patch adds support for the new shrinker API by wrapping\nthe old one with the new one.\n\nThis change also reorganizes the autotools checks on the shrinker\nAPI such that the configure script will fail early if an unknown\nAPI is encountered in the future.\n\nSupport for the set_shrinker() API which was used by Linux 2.6.22\nand older has been dropped.  As a general rule compatibility is\nonly maintained back to Linux 2.6.26.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1732\nCloses zfsonlinux/zfs#1822\nCloses #293\nCloses #307"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/4768c0d0a61497f2f3a52678154f2742a355618f", "message": "Define SET_ERROR()\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/df2c0f18498d1c98e4f211fdb623376b18f18134", "message": "Replace current_kernel_time() with getnstimeofday()\n\ncurrent_kernel_time() is used by the SPLAT, but it is not meant for\nperformance measurement. We modify the SPLAT to use getnstimeofday(),\nwhich is equivalent to the gethrestime() function on Solaris.\nAdditionally, we update gethrestime() to invoke getnstimeofday().\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #279"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f7fd6ddd96fae173d64bf2982ba4ceda28db56e2", "message": "Linux 3.8 compat: Use kuid_t/kgid_t when required\n\nWhen CONFIG_UIDGID_STRICT_TYPE_CHECKS is enabled uid_t/git_t are\nreplaced by kuid_t/kgid_t, which are structures instead of integral\ntypes. This causes any code that uses an integral type to fail to build.\nThe User Namespace functionality introduced in Linux 3.8 requires\nCONFIG_UIDGID_STRICT_TYPE_CHECKS, so we could not build against any\nkernel that supported it.\n\nWe resolve this by converting between the new kuid_t/kgid_t structures\nand the original uid_t/gid_t types.\n\nOriginal-patch-by: DHE\nRewrite-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #260"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e3c4d44886a8564e84aa697477b0e37211d634cd", "message": "PaX/GrSecurity Linux 3.8.y compat: Use __no_const on struct ctl_table\n\nThe PaX team started constifying `struct ctl_table` as of their Linux\n3.8.0 patchset. This lead to zfsonlinux/spl#225 and Gentoo bug #463012.\n\nWhile investigating our options, I learned that there is a preprocessor\ndirective called CONSTIFY_PLUGIN that we can use to detect the presence\nof the PaX changes and adjust the code accordingly.\n\nThe PaX Team had suggested adopting ctl_table_no_const, but supporting\nolder kernels required declaring that whenever the CONSTIFY_PLUGIN was\nset. Future compiler changes could potentially cause that to break in\nthe presence of -Werror, so instead we define our own spl_ctl_table\ntypdef and use that. This should be compatible with all PaX kernels.\n\nThis introduces a Linux kernel version number check to prevent a build\nfailure on versions of the PaX GCC plugin that existed for kernels\nbefore Linux 3.8.0. Affected versions of the PaX plugin will trigger a\ncompiler error when they see no_const cast on a non-constified\nstructure.  Ordinarily, we would need an autotools check to catch that.\nHowever, it is safe to do a kernel version check instead of an autotools\ncheck in this specific instance because the affected versions of the PaX\nGCC plugin only exist for Linux kernels before 3.8.0 and the\nconstification of `struct ctl_table` by the PaX developers only occurs\nin Linux 3.8.0 and later.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #225"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/251e7a779ba5d4b5e46c42d8b792c481380da28b", "message": "Fix race in spl_kmem_cache_reap_now()\n\nThe current code contains a race condition that triggers when bit 2 in\nspl.spl_kmem_cache_expire is set, spl_kmem_cache_reap_now() is invoked\nand another thread is concurrently accessing its magazine.\n\nspl_kmem_cache_reap_now() currently invokes spl_cache_flush() on each\nmagazine in the same thread when bit 2 in spl.spl_kmem_cache_expire is\nset. This is unsafe because there is one magazine per CPU and the\nmagazines are lockless, so it is impossible to guarentee that another\nCPU is not using its magazine when this function is called.\n\nThe solution is to only touch the local CPU's magazine and leave other\nCPU's magazines to other CPUs.\n\nReported-by: DHE\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #274"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ba062980728bbd09c4b829f5d801a773af7381cf", "message": "Linux 3.11 compat: Replace num_physpages with totalram_pages\n\nnum_physpages was removed by\ntorvalds/linux@cfa11e08ed39eb28a9eff9a907b20913020c69b5, so lets replace\nit with totalram_pages.\n\nThis is a bug fix as much as it is a compatibility fix because\nnum_physpages did not reflect the number of pages actually available to\nthe kernel:\n\nhttp://lkml.indiana.edu/hypermail/linux/kernel/0908.2/01001.html\n\nAlso, there are known issues with memory calculations when ZFS is in a\nXen dom0. There is a chance that using totalram_pages could resolve\nthem. This conjecture is untested at the time of writing.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #273"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f2a745c41df44c32149abb27b80e92cede772551", "message": "Linux 3.10 compat: Do not rely on struct proc_dir_entry definition\n\nLinux kernel commit torvalds/linux#59d8053f moved the definition of\nstruct proc_dir_entry from include/linux/proc_fs.h to the private\nheader fs/proc/internal.h. The SPL relied on that to map Solaris'\nkstat to entries in /proc/spl/kstat.\n\nSince the proc_dir_entry structure is now private the only safe\nthing to do is wrap the opaque proc handle with our own structure.\nThis actually ends up simplify the code and is good because it\nmoves us away from depending on implementation details of /proc.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #257"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/feaf1e321da97ab0aaa60edc121fb6aa2d03952d", "message": "Do not call cond_resched() in spl_slab_reclaim()\n\nCalling cond_resched() after each object is freed and then after each\nslab is freed can cause slabs of objects to live for excessive periods\nof time following reclaimation. This interferes with the kernel's own\nmemory management when called from kswapd and can cause direct reclaim\nto occur in response to memory pressure that should have been resolved.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/4a31e5aa9be561a450a2741f5305932e0b9df241", "message": "Linux 3.9 compat: Switch to hlist_for_each{,_rcu}\n\ntorvalds/linux@b67bfe0d42cac56c512dd5da4b1b347a23f4b70a changed\nhlist_for_each_entry{,_rcu} to take 3 arguments instead of 4. We handle\nthis by switching to hlist_for_each{,_rcu}, which works across all\nsupported kernels.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8274ed598801255626b8c1648c3a4cdfea07b738", "message": "Drop support for 3 argument version of set_fs_pwd\n\nThis was a suggestion that Brian Behlendorf made when reviewing an early\npull request for Linux 3.9 support. This commit was made intentionally\neasy to revert should we ever have a reason to reintroduce support for\nolder kernels.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a54718cfe0d8e8a4b124f176f0d5c94141f9aea0", "message": "Linux 3.9 compat: set_fs_root takes const struct path *\n\ntorvalds/linux@dcf787f39162ce32ca325b3e784aba2d2444619a enforces\nconst-correctness in passing struct path *.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2a305c34c8876c06f55475e5ff5163923baa5491", "message": "Linux 3.9 compat: vfs_getattr takes two arguments\n\nThe function prototype of vfs_getattr previoulsy took struct vfsmount *\nand struct dentry * as arguments. These would always be defined together\nin a struct path *.\n\ntorvalds/linux@3dadecce20603aa380023c65e6f55f108fd5e952 modified\nvfs_getattr to take struct path * is taken as an argument instead.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bc90df66887af63bd67223616f9084c4e9567056", "message": "Linux 3.9 compat: Do not depend on f_vfsmnt\n\ntorvalds/linux@182be684784334598eee1d90274e7f7aa0063616 removed the\npreprocessor definition for f_vfsmnt. The ability to access the\nmountpoint via ->f_path.mnt has been stable for a long time, so we\nswitch to that.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/10087fe1fa3e4aa4b6722a1d27a47853ebdf47c8", "message": "Linux 3.9 compat: Include linux/sched/rt.h\n\nLinux 3.9 reorganized sched.h, splitting it into numerous files.\ntorvalds/linux@8bd75c77b7c6a3954140dd2e20346aef3efe4a35 moved MAX_PRIO\nand MAX_RT_PRIO to linux/sched/rt.h.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a0625691b39468d04eb716919e237f96a3987b48", "message": "Fix HAVE_MUTEX_OWNER_TASK_STRUCT autotools check on PPC64\n\nThe HAVE_MUTEX_OWNER_TASK_STRUCT fails on PPC64 with the following\nerror:\n\nerror: 'current' undeclared (first use in this function)\n\nWe include linux/sched.h to ensure that current is available.\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/30196bfd42567a9bc3fccac8650dc2cd9f0f7c0a", "message": "Do not use KERNEL_DIR env var in Makefile.am\n\nA Gentoo user reported an issue where the build system would\nattempt to recurse into the kernel source tree if KERNEL_DIR\nis set in the environment. KERNEL_DIR is an environment variable\nthat is used when the kernel sources are in a non-standard\nlocation, so it is necessary to stop relying on it to prevent\nthis issue.\n\nhttps://bugs.gentoo.org/show_bug.cgi?id=433946\n\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dweeezil": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/47af4b76ffe72457166e4abfcfe23848ac51811a", "message": "Use current_kernel_time() in the time compatibility wrappers\n\nSince the Linux kernel's utimens family of functions uses\ncurrent_kernel_time(), we need to do the same in the context of ZFS\nor else there can be discrepencies in timestamps (they go backward)\nif userland code does:\n\n\tfd = creat(FNAME, 0600);\n\t(void) futimens(fd, NULL);\n\nThe getnstimeofday() function generally returns a slightly lower time\nvalue.\n\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#3006"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/802a4a2ad53f6844ce2dbbf219a5e373ebd24688", "message": "Linux 3.12 compat: shrinker semantics\n\nThe new shrinker API as of Linux 3.12 modifies \"struct shrinker\" by\nreplacing the @shrink callback with the pair of @count_objects and\n@scan_objects.  It also requires the return value of @count_objects to\nreturn the number of objects actually freed whereas the previous @shrink\ncallback returned the number of remaining freeable objects.\n\nThis patch adds support for the new @scan_objects return value semantics\nand updates the splat shrinker test case appropriately.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nCloses #403"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2bf35fb7547f2b66a1905b5ee86b467ff2d3c4b6", "message": "Add atomic_swap_32() and atomic_swap_64()\n\nThe atomic_swap_32() function maps to atomic_xchg(), and\nthe atomic_swap_64() function maps to atomic64_xchg().\n\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #377"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/7f23e0010977ffa492d6df57aee0c97ce8e74278", "message": "Add functions and macros as used upstream.\n\nAdded highbit64() and howmany() which are used in recent upstream\ncode.  Both highbit() and highbit64() should at some point be\nre-factored to use the optimized fls() and fls64() functions.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nCloses #363"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f6a869614e5bdf9a3819a845f7a90d8c9ede0fc3", "message": "Safer debugging and assertion macros.\n\nSpl's debugging and assertion macros macro used the typical do/while(0)\nform for if/else friendliness, however, this limits their use in contexts\nwhere a do loop is not valid; such as within another multi-statement\nstyle macro.\n\nThe following macros have been converted to not use do/while(0):\n\tPANIC, ASSERT, ASSERTF, VERIFY, VERIFY3_IMPL\n\nPANIC has been converted to a wrapper around the new spl_PANIC() function.\n\nThe other macros have been converted to use the \"&&\" operator for the\nbranch-predicition conditional and also to use spl_PANIC().\n\nThe __ASSERT() macro was not touched.  It is only used by the debugging\ninfrastructure and that code, including this macro, will be retired when\nthe tracepoint patches are merged.\n\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #367"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3ceb71e8966e5f1895885eeaaa9354ffd940b490", "message": "Call kthread_create() correctly with fixed arguments.\n\nThe kernel's kthread_create() function is defined as \"...\" and there is\nno va_list variant at the moment.  The task name is pre-formatted into\na local buffer and passed to kthread_create() with fixed arguments.\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #347"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/17a527cb0f44cef6582583e502621541061d8817", "message": "Support post-3.13 kthread_create() semantics.\n\nProvide spl_kthread_create() as a wrapper to the kernel's kthread_create()\nto provide pre-3.13 semantics.  Re-try if the call is interrupted or if it\nwould have returned -ENOMEM.  Otherwise return NULL.\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Tim Chase <tim@chase2k.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #339"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/5c7a0369e225d306e53bd8011c58fa0f5e827865", "message": "Fix --enable-debug-kmem-tracking option\n\nRe-order initialization in spl_kmem_init to allow for kmem tracing\nto work.  The spl_kmem_init function calls taskq_create prior to\ninitializing the tracking (calling spl_kmem_init_tracking).  Since\ntaskq_create uses kmem_alloc, NULL dereferences occur because the\nglobal kmem_list hasn't had its next & prev pointers initialized yet.\n\nThis commit moves the calls to spl_kmem_init_tracking earlier in the\nspl_kmem_init function in order that the subsequent kmem_alloc calls\n(by taskq_create) work properly.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #243"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tuxoko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a3c1eb77721a0d511b4fe7111bb2314686570c4b", "message": "mutex: force serialization on mutex_exit() to fix races\n\nIt is known that mutexes in Linux are not safe when using them to\nsynchronize the freeing of object in which the mutex is embedded:\n\nhttp://lwn.net/Articles/575477/\n\nThe known places in ZFS which are suspected to suffer from the race\ncondition are zio->io_lock and dbuf->db_mtx.\n\n* zio uses zio->io_lock and zio->io_cv to synchronize freeing\n  between zio_wait() and zio_done().\n* dbuf uses dbuf->db_mtx to protect reference counting.\n\nThis patch fixes this kind of race by forcing serialization on\nmutex_exit() with a spin lock, making the mutex safe by sacrificing\na bit of performance and memory overhead.\n\nThis issue most commonly manifests itself as a deadlock in the zio\npipeline caused by a process spinning on the damaged mutex.  Similar\ndeadlocks have been reported for the dbuf->db_mtx mutex.  And it can\nalso cause a NULL dereference or bad paging request under the right\ncircumstances.\n\nThis issue any many like it are linked off the zfsonlinux/zfs#2523\nissue.  Specifically this fix resolves at least the following\noutstanding issues:\n\nzfsonlinux/zfs#401\nzfsonlinux/zfs#2523\nzfsonlinux/zfs#2679\nzfsonlinux/zfs#2684\nzfsonlinux/zfs#2704\nzfsonlinux/zfs#2708\nzfsonlinux/zfs#2517\nzfsonlinux/zfs#2827\nzfsonlinux/zfs#2850\nzfsonlinux/zfs#2891\nzfsonlinux/zfs#2897\nzfsonlinux/zfs#2247\nzfsonlinux/zfs#2939\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nCloses #421"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ad3412efd7cc2debb0f9f354d3f5e105a99d97e1", "message": "Linux 3.15: vfs_rename() added a flags argument\n\nDetect the updated vfs_rename() interface and call it with an\nextra flags argument.\n\nReferences:\n  torvalds/linux@520c8b1\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #355"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1538f4b6e3cc08c334f58b0025aa7de1d6c97e1a", "message": "Linux 3.15 compat: NICE_TO_PRIO and PRIO_TO_NICE\n\nThese macro's were exposed to make them available to other\nparts of the kernel and modules.\n\nReferences:\n  torvalds/linux@6b6350f\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #355"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ae16ed992bd0ef5a55b04d9edaaa6456674315f9", "message": "Fix crash when using ZFS on Ceph rbd\n\nWhen using __get_free_pages to get high order memory, only the first page's\n_count will set to 1, other's will be 0. When an internal page get passed into\nrbd, it will eventully go into tcp_sendpage. There, it will be called with\nget_page and put_page, and get freed erroneously when _count jump back to 0.\n\nThe solution to this problem is to use compound page. All pages in a\nhigh order compound page share a single _count. So get_page and put_page in\ntcp_sendpage will not cause _count jump to 0.\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #251"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/545e9ac00a813ed13d6b67c86d058c9048d78552", "message": "Add ddi_time_after and friends\n\nWhen comparing times gotten from ddi_get_lbolt, we have to take account of\nwrap around of jiffies. Therefore, we cannot use 't1 < t2'. Instead we should\nuse 't1 - t2 < 0'.\n\nThis patch add ddi_time_after and friends to address this issue. They have\nstrict type restriction, clock_t for vanilla and int64_t for 64 version, to\nprevent type conversion from screwing things.\n\nSigned-off-by: Chunwei Chen <tuxoko@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #335"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nedbass": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/52479ecf58fa89190e384edcf838fecccc786af5", "message": "Remove compat includes from sys/types.h\n\nDon't include the compatibility code in linux/*_compat.h in the public\nheader sys/types.h. This causes problems when an external code base\nincludes the ZFS headers and has its own conflicting compatibility code.\nLustre, in particular, defined SHRINK_STOP for compatibility with\npre-3.12 kernels in a way that conflicted with the SPL's definition.\nBecause Lustre ZFS OSD includes ZFS headers it fails to build due to a\n'\"SHRINK_STOP\" redefined' compiler warning.  To avoid such conflicts\nonly include the compat headers from .c files or private headers.\n\nAlso, for consistency, include sys/*.h before linux/*.h then sort by\nheader name.\n\nSigned-off-by: Ned Bass <bass6@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #411"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2fc44f66ec9b83069593d87cf311069458c0d5ae", "message": "Linux 3.17 compat: remove wait_on_bit action function\n\nLinux kernel 3.17 removes the action function argument from\nwait_on_bit().  Add autoconf test and compatibility macro to support\nthe new interface.\n\nThe former \"wait_on_bit\" interface required an 'action' function to\nbe provided which does the actual waiting. There were over 20 such\nfunctions in the kernel, many of them identical, though most cases\ncan be satisfied by one of just two functions: one which uses\nio_schedule() and one which just uses schedule().  This API change\nwas made to consolidate all of those redundant wait functions.\n\nReferences: torvalds/linux@7431620\n\nSigned-off-by: Ned Bass <bass6@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #378"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/184c6873874c350bfb0b74f9e08ec8d89750d603", "message": "Emulate illumos interface cv_timedwait_hires()\n\nNeeded for Illumos #3582. This interface is supposed to support\na variable-resolution timeout with nanosecond granularity.  This\nimplementation rounds up to microsecond resolution, as nanosecond-\nprecision timing is rarely needed for real-world performance\ntuning and may incur unnecessary busy-waiting.  usleep_range() is\nused if available, otherwise udelay() or msleep() are used\ndepending on the length of the delay interval.\n\nAdd flags from sys/callo.h as these are used to control the behavior of\ncv_timedwait_hires().  Specifically,\n\nCALLOUT_FLAG_ABSOLUTE\n    Normally, the expiration passed to the timeout API functions is\n    an expiration interval. If this flag is specified, then it is\n    interpreted as the expiration time itself.\n\nCALLOUT_FLAG_ROUNDUP\n    Roundup the expiration time to the next resolution boundary. If this\n    flag is not specified, the expiration time is rounded down.\n\nReferences:\n    https://www.illumos.org/issues/3582\n    illumos/illumos-gate@0689f76\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #304"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/f483a97a417ca7292d6a7d516a72558d385f2370", "message": "3537 add kstat_waitq_enter and friends\n\nThese kstat interfaces are required to port\n\"Illumos #3537 want pool io kstats\" to ZFS on Linux.\n\nkstat_waitq_enter()\nkstat_waitq_exit()\nkstat_runq_enter()\nkstat_runq_exit()\n\nAdditionally, zero out the ks_data buffer in __kstat_create() so\nthat the kstat_io_t counters are initialized to zero.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3ecf2d2bb66b36917520c9b66154547f3510a66a", "message": "Add kpreempt() compatibility macro\n\nThis is needed for the Illumos #4045 write throttle patch.  It is used\nin the arc eviction code to avoid blocking all arc activity by sitting on\narcs_mtx too long.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #286"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3d6af2dd6d598bebf6ab04d0e2b6f6ba6e5d0f00", "message": "Refresh links to web site\n\nUpdate links to refer to the official ZFS on Linux website instead of\n@behlendorf's personal fork on github.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8842263bd0f3c2f78c9cd52be8a74d4376396501", "message": "call_usermodehelper() should wait for process\n\nAs of Linux 3.4 the UMH_WAIT_* constants were renumbered.  In\nparticular, the meaning of \"1\" changed from UMH_WAIT_PROC (wait for\nprocess to complete), to UMH_WAIT_EXEC (wait for the exec, but not the\nprocess).  A number of call sites used the number 1 instead of the\nconstant name, so the behavior was not as expected on kernels with\nthis change.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maci0": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/7f118e836e3533d85aa0f859eb463cf9e54dc3fc", "message": "Add config/compile to config/.gitignore\n\nThis file may be added by automake and therefore should be added\nto config/.gitignore.  For the full list of possible auxiliary\nprograms see the full automake documentation.\n\nhttp://www.gnu.org/software/automake/manual/automake.html#Auxiliary-Programs\n\nSigned-off-by: Marcel Wysocki <maci.stgn@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pyhalov": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3f4a13c49709ab4bc6abb6b3159be77ce168a5e0", "message": "Fix modules installation directory\n\nWhen building zfs modules with kernel, compiled from deb.src, the\npackaging process ends up installing the modules in the wrong place.\n\nSigned-off-by: Alexander Pyhalov <apyhalov@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#2822"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "FransUrbo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e3020723dc43af2bc22af0d68571a61daf9b44d0", "message": "Linux 3.16 compat: smp_mb__after_clear_bit()\n\nThe smp_mb__{before,after}_clear_bit functions have been renamed\nsmp_mb__{before,after}_atomic.  Rather than adding a compatibility\nfunction to handle this the code has been updated to use smp_wmb().\n\nThis has the advantage of being a stable functionally equivalent\ninterface.  On many architectures smp_mb__after_clear_bit() expands\nto smp_wmb().  Others might be able to do something slightly more\nefficient but this will be safe and correct on all of them.\n\nSigned-off-by: Turbo Fredriksson <turbo@bayour.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #386"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1e929b97ac3fd0aa752feba9f08caeb5356e9a43", "message": "Set LANG to a reasonable default (C)\n\nSet LANG=C before calling 'rpmbuild' to avoid rpmbuild failing on\nthe translated date string in the changelog.\n\nSigned-off-by: Turbo Fredriksson <turbo@bayour.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #306"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/30607d9b7b82dcb50eebe15d5b78cfd6deef07a5", "message": "Document SPL module parameters.\n\nThis is a first draft of a spl-module-parameters(5) man page. I have\njust extracted the parameter name and its description with modinfo,\nthen checked the source what type it is and its default value.\n\nThis will need more work, preferably someone that actually know these\nvalues and what to use them for.  Similar to zfsonlinux/zfs#1856, but\nfor the spl.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1856"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/8bbda8df3ea618cd994d477d6d5c0e0acec80089", "message": "Ignore *.{deb,rpm,tar.gz} files in the top directory.\n\nThese are build products and should be ignored.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Turbo Fredriksson <turbo@bayour.com>\nIssue zfsonlinux/zfs#1402"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/16253cff43bf4865be01fb6f0b03cc7eeb1ece1b", "message": "Add --bump=0 to alien\n\nPreserve the release field when creating Debian packages.  The\n--keep-version option was not used because it results in a failure\nwhen the git '<commit>_<hash>' syntax is used for the release.\nThe '_' is a valid character for RPM packages but not for DEBs.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Turbo Fredriksson <turbo@bayour.com>\nIssue zfsonlinux/zfs#1402\nIssue zfsonlinux/zfs#928"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/2c213707465e8e904064f97ead08a23ed51b79b9", "message": "Support .nogitrelease file\n\nWhen building a custom release in a git tree provide the ability\nto prevent the release field from being overwritten by the\n`git describe` output.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue zfsonlinux/zfs#1402"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/7165246", "body": "This doesn't seem to be defined in 3.15.0.\n\n```\ndiff --git a/module/spl/spl-crypto.c b/module/spl/spl-crypto.c\nindex 59c2172..475bd96 100644\n--- a/module/spl/spl-crypto.c\n+++ b/module/spl/spl-crypto.c\n@@ -17,6 +17,9 @@\n  */\n //#define ZFS_COPYDST\n\n+#ifndef INIT_COMPLETION\n+  #define INIT_COMPLETION(x)      ((x).done = 0)\n+#endif\n\n /*\n  * Linux cipher types, and the Solaris equivalent.\n```\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/7165246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14893845", "body": "I don't want to be a buzz-kill or a party pooper, but is this kosher? Since you've been looking, extensively, at the \"stolen\" (or at least \"maybe not kosher\") code distributed by zfsrouge, can you work on this?\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14893845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "andrey-ve": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/703371d8c734bc2cc6350f1bca014f08245dcc69", "message": "Evenly distribute the taskq threads across available CPUs\n\nThe problem is described in commit aeeb4e0c0ae75b99ebbaa3056f0afc8e12949532.\nHowever, instead of disabling the binding to CPU altogether we just keep the\nlast CPU index across calls to taskq_create() and thus achieve even\ndistribution of the taskq threads across all available CPUs.\n\nThe implementation based on assumption that task queues initialization\nperformed in serial manner.\n\nSigned-off-by: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>\nSigned-off-by: Andrey Vesnovaty <andreyv@infinidat.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #336"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bdfbe594a109933e72103bd720d2c6aa560dc400", "message": "Expose max/min objs per slab and max slab size\n\nBy default maximal number of objects in slab can't exceed (16*2 - 1) and slab\nsize can't exceed 32M.\nToday's high end servers having couple hundreds of RAM available for ARC may\nrun into a trouble with virtual memory because of the restriction mentioned\nabove.\n\nProblem:\nReasons for very high number of virtual memory allocations:\n\t* Real slab size very small relative to the size of the entire RAM\n\t* Slabs allocated on virtual memory and fill entire ARC\n\nThe result is very high number of allocated virtual memory ranges (hundreds of\nranges). When virtual memory subsystem manages high number of ranges its\nperformance become so poor that it freezes from time to time.\n\nSolution:\nNumber of objects per slab should be increased taking into account maximal\nslab size which can also be increased if needed.\n\nSigned-off-by: Andrey Vesnovaty <andrey.vesnovaty@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #337"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yshui": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6c48cd8ac223eb00cb4dadebcbe4ce1dfdfc6b76", "message": "This patch add a CTASSERT macro for compile time assertion.\n\nThis macro makes the compile to spit \"mixed definition and code\"\nwarning, I can't find a way to avoid it.\n\nThis patch lays some groundwork for the persistent l2arc feature.\nSee https://www.illumos.org/issues/3525.\n\nSigned-off-by: Yuxuan Shui <yshuiv7@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #303"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/79a7ab25812d2701230aaff62904570ef7dbecef", "message": "Linux 3.10 compat: add missing include of linux/slab.h\n\nLinux kernel commit torvalds/linux@0d01ff2 changes some\nincludes we were depending on through linux/proc_fs.h.\n\nSigned-off-by: Yuxuan Shui <yshuiv7@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #257"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/1ddf9722dcb6429d38fcbc5ff791779ec89be9fc", "message": "Linux 3.10 compat: replace PDE()->data with PDE_DATA()\n\nLinux kernel commit torvalds/linux@d9dda78b renamed PDE() to\nPDE_DATA().  To handle this detect the prefered interface\nand define a PDE_DATA() wrapper for consistency.\n\nSigned-off-by: Yuxuan Shui <yshuiv7@gmail.com>\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #257"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c02ab72fb9d557e8d98c5e089faa6557b6d83127", "message": "Linux 3.10 compat: struct vmalloc_info moved\n\nLinux kernel commmit torvalds/linux@db3808c1 moved the\nvmalloc_info structure from a private to a public header.\nNow that it's available for kernel modules use it.\n\nSigned-off-by: Yuxuan Shui <yshuiv7@gmail.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #257"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bcb15891ab394e11615eee08bba1fd85ac32e158", "message": "Linux 3.6 compat, kern_path_locked() added\n\nThe kern_path_parent() function was removed from Linux 3.6 because\nit was observed that all the callers just want the parent dentry.\nThe simpler kern_path_locked() function replaces kern_path_parent()\nand does the lookup while holding the ->i_mutex lock.\n\nThis is good news for the vn implementation because it removes the\nneed for us to handle the locking.  However, it makes it harder to\nimplement a single readable vn_remove()/vn_rename() function which\nis usually what we prefer.\n\nTherefore, we implement a new version of vn_remove()/vn_rename()\nfor Linux 3.6 and newer kernels.  This allows us to leave the\nexisting working implementation untouched, and to add a simpler\nversion for newer kernels.\n\nLong term I would very much like to see all of the vn code removed\nsince what this code enabled is generally frowned upon in the kernel.\nBut that can't happen util we either abondon the zpool.cache file\nor implement alternate infrastructure to update is correctly in\nuser space.\n\nSigned-off-by: Yuxuan Shui <yshuiv7@gmail.com>\nSigned-off-by: Richard Yao <ryao@cs.stonybrook.edu>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #154"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marku89": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/d58a99af2f308dde912639c66af7f9c2cb9e8680", "message": "Define the needed ISA types for Sparc\n\nAdd the minimum required ISA types to support the Sparc\narchitecture.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nSigned-off-by: Ned Bass <bass6@llnl.gov>\nSigned-off-by: marku89 <mar42@kola.li>\nCloses #317"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "imp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/9bd8cbc53d46c09d2f465d4207eaa00c26e29fc5", "message": "Tighten spl dependency on spl-kmod\n\nMake spl depend on the same version of spl-kmod, rather than on same or\nbetter. When yum repository contains a number of versions the dependency\nresolution breaks on trying to install non-latest version.\n\nSigned-off-by: Cyril Plisko <cyril.plisko@mountall.com>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses zfsonlinux/zfs#1677"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "prakashsurya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/09f38b7e60eea27637780822f86f80da8938bb1f", "message": "Add wrappers for accessing PID and command info\n\nThis change adds simple wrappers for accessing a thread's PID and\ncommand character string.\n\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #296"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/56d40a686b0504042a088943154ba7b0dde36d51", "message": "Add callbacks for displaying KSTAT_TYPE_RAW kstats\n\nThe current implementation for displaying kstats of type KSTAT_TYPE_RAW\nis rather crude. This patch attempts to enhance this handling by\nallowing a kstat user to register formatting callbacks which can\noptionally be used.\n\nThe callbacks allow the user to implement functions for interpreting\ntheir data and transposing it into a character buffer. This buffer,\ncontaining a string representation of the raw data, is then be displayed\nthrough the current /proc textual interface.\n\nAdditionally the kstats are made writable because it's now possible\nto provide a useful handler via the existing ks_update() interface.\n\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #296"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/587045a6386d1e7a6256eb6ef825e046beabd9a3", "message": "Remove SPL_LINUX_CONFIG autoconf macro\n\nSince removing the check for CONFIG_PREEMPT, there are no consumers of\nthe SPL_LINUX_CONFIG macro. As such, there is no reason to keep it\naround.\n\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #164"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/e3a436070283596bae22773fee3b56d846ab6cec", "message": "Revert \"Make CONFIG_PREEMPT Fatal\"\n\nThis reverts commit 7731d46b69bd893d515c55e87ffa8a9bd2ddfb38.\n\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/45324c7c419b70397cae31b9f2b90ca0a97c9d77", "message": "Add kpreempt_[dis|en]able macros in <sys/disp.h>\n\nTo support preempt enabled kernels in ZFS on Linux, there are a couple\nplaces where the ZFS code needs to disable interrupts. This change adds\nthe Solaris preempt functions and maps them to the equivalent ZFS\nfunctions, allowing the ZFS to make use of them.\n\nSigned-off-by: Prakash Surya <surya1@llnl.gov>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #98"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/08850eddcb128cbdca584255324d71dfee2ccba9", "message": "Avoid calling smp_processor_id in spl_magazine_age\n\nThe spl_magazine_age function had the implied assumption that it will\nremain on its current cpu through its execution. In order to support\npreempt enabled kernels, this assumption had to be removed.\n\nThe spl_kmem_magazine structure now holds the cpu id of the cpu it is\nlocal to. This allows spl_magazine_age to use this field when scheduling\nwork to be done by the magazine's local cpu.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nIssue #98"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kohsuke": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/6a696939617503e5c34dbb88ba62d556ce994bf1", "message": "Document how to run SPLAT\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #294"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jimmyH": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c47efbc7fda5eaed9b60b3767347d9f88553309b", "message": "Modify gethrestime to use current_kernel_time()\n\nThis allows us to get nanosecond resolution. It also means\nwe use the same time source as utimensat(now) etc.\n\nSigned-off-by: Richard Yao <ryao@gentoo.org>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #255"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "utopiabound": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/485b471eb29cfa3a6dbac7de8fda5e020068044a", "message": "Add --buildroot option to kmod build\n\nThis allows rpmbuild to define buildroot to point to where kernel\ndata is located.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #242"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "prometheanfire": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/991857cac5929fa149820722b8e8cd90f874670c", "message": "Copy spl.release.in to kernel dir\n\nRequired when compiling ZFS in the kernel.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #253"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dechamps": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/c1b20ce32084fa946f446400a66c4b606d7649d7", "message": "Fix various generic kmod RPM spec issues.\n\nThere are a number of issues with the generic kmod RPM spec in its\ncurrent state:\n - The \"%{__id_u}\" macro seems to not be available on some systems (e.g.\n   Debian squeeze). It appears it has been deprecated. Use \"${__id} -u\"\n   instead.\n - The way the \"--with-linux=\" configure option is generated in the\n   non-RHEL/Fedora case is completely wrong with various newline and\n   escaping issues (also, $kernel_version is not available in the\n   generator context).\n\nThe second issue made the generator shell snippet (almost) silently\nfail, which under specific circumstances can result in broken builds\nagainst the wrong kernel sources.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #231"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/bbdc6ae49518a4be7230ab673370e9231e2f72e7", "message": "Add interface for file hole punching.\n\nThis adds an interface to \"punch holes\" (deallocate space) in VFS\nfiles. The interface is identical to the Solaris VOP_SPACE interface.\nThis interface is necessary for TRIM support on file vdevs.\n\nThis is implemented using Linux fallocate(FALLOC_FL_PUNCH_HOLE), which\nwas introduced in 2.6.38. For a brief time before 2.6.38 this was done\nusing the truncate_range inode operation, which was quickly deprecated.\nThis patch only supports FALLOC_FL_PUNCH_HOLE.\n\nThis adds support for the truncate_range() inode operation to\nVOP_SPACE() for file hole punching. This API is deprecated and removed\nin 3.5, so it's only useful for old kernels.\n\nOn tmpfs, the truncate_range() inode operation translates to\nshmem_truncate_range(). Unfortunately, this function expects the end\noffset to be inclusive and aligned to the end of a page. If it is not,\nthe kernel will stop with a BUG_ON().\n\nThis patch fixes the issue by adapting to the constraints set forth by\nshmem_truncate_range().\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #168"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/ac8ca67a88bdb8be08456785116a8824fba735df", "message": "Add DKIOCTRIM for TRIM support.\n\nSee dechamps/zfs@cc6cd40ad71e1e611591929ad08184516357eaf5 for details.\n\nThis harmless addition was merged to simplify testing the ZFS TRIM\nsupport patches.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>\nCloses #167"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jengelh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/83918aebe5547370b6d377aa2d17f378c44054b7", "message": "build: do not call boilerplate ourself\n\nRationale see section 3.5 \"Using `autoreconf' to Update `configure'\nScripts\" of the autoconf manual.\n\nSigned-off-by: Jan Engelhardt <jengelh@inai.de>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/a9e86ac4fd080328742a52362110c1d344fb2799", "message": "gitignore: anchor entries at their respective directory\n\n.ko is specific to module, .m4 to config, etc.\n\nSigned-off-by: Jan Engelhardt <jengelh@inai.de>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/92c4ea38c9bd4dc619e4e82bb15c30618878793a", "message": "build: use CPPFLAGS\n\n-D and -I are preprocessor flags, so should preferably be in the\nappropriate variable.\n\nSigned-off-by: Jan Engelhardt <jengelh@inai.de>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/7a8a639390c290a9351943b42216bea64d92e77d", "message": "build: resolve orthographic and other grammatical errors\n\nSigned-off-by: Jan Engelhardt <jengelh@inai.de>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dajhorn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/407482090470bfb25d508595116995aad88cd55a", "message": "Create splat man page\n\nThe automake templates have been updated to install this man\npage and the existing packaging was updated to include it.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "edillmann": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/3cbfd259b709e3561b4b407d4a27eeec6dc201d0", "message": "Define BE_IN16 & BE_IN32 for lz4 compression\n\nThe new lz4 compression algorithm, zfsonlinux/zfs@9759c60, requires\nthe generic BE_IN16 and BE_IN32 functions.  These are added to the SPL\nfor other consumers to take advantage of.\n\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maxximino": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dea3505dff1252b337eb1cb8744626fb0f796d86", "message": "Switch KM_SLEEP to KM_PUSHPAGE\n\nIn this particular instance the allocation occurred in the context\nof sys_msync()->...->zpl_putpage() where we must be careful not to\ninitiate additional I/O.\n\nSigned-off-by: Massimo Maggi <massimo@mmmm.it>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chrisrd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/commits/dd87332f478b2a55c007aae568dd242fb2a34602", "message": "Remove autotools products\n\nspl_config.h.in is a generated file: remove and .gitignore it\n\nSigned-off-by: Chris Dunlop <chris@onthe.net.au>\nSigned-off-by: Brian Behlendorf <behlendorf1@llnl.gov>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nixomose": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14878783", "body": "looking at the use of INIT_COMPLETION, it resets the completion, but it is never referenced again. result is local to the function and there are no flow control structures that would ever cause it to be read again. Does the INIT_COMPLETION call even need to be there?\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14878783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14903470", "body": "Is it kosher? How would I know. First I'm hearing of it being stolen. From who? I guess we don't know who zfsrogue is?\n", "reactions": {"url": "https://api.github.com/repos/zfsrogue/spl-crypto/comments/14903470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}